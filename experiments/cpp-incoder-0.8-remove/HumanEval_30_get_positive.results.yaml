language: cpp
name: HumanEval_30_get_positive
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos_nums;\n    for (long i : l) {\n        if (i >= 0)\n            pos_nums.push_back(i);\n\
    \    }\n    return pos_nums;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpo7iz6hr3: /tmp/tmpo7iz6hr3.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> positive;\n  for (long num : l) {\n    if (num\
    \ > 0) {\n      positive.push_back(num);\n    }\n  }\n  return positive;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpem9gyfva: /tmp/tmpem9gyfva.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i = 0; i < (long)l.size(); i++)\n        if(l[i] > 0)\n \
    \           res.push_back(l[i]);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ != 0);\n  std::vector<long> positive;\n  positive.reserve(l.size());\n  for\
    \ (long i : l) {\n    if (i >= 0) {\n      positive.push_back(i);\n    }\n  }\n\
    \  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwh1ac_k_: /tmp/tmpwh1ac_k_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n   std::vector<long>\
    \ result;\n   result.clear();\n   for (long i=0; i<l.size(); i++)\n      if (l[i]\
    \ > 0)\n         result.push_back(l[i]);\n   return result;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto it : l) {\n        if (it > 0)\n            res.push_back(it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  for (int i = 0; i < l.size(); i++)\n    if (l[i] > 0) p.push_back(l[i]);\n\
    \  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> res;\n  for (long i : l) {\n    if (i >= 0) res.push_back(i);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuu6rndx1: /tmp/tmpuu6rndx1.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  for (int i = 0; i < l.size(); ++i) {\n    if (l.at(i) >= 0) {\n      p.push_back(l.at(i));\n\
    \    }\n  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuxjbbzj1: /tmp/tmpuxjbbzj1.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (auto it = l.begin(); it != l.end(); ++it)\n        if (*it >\
    \ 0)\n            pos.push_back(*it);\n    return pos;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res; // Initialize an empty vector.\n    for (auto it = l.begin(); it != l.end();\
    \ it++) {\n        if (*it > 0) res.push_back(*it);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ retval;\n    for (auto i : l) {\n        if (i >= 0) {\n            retval.push_back(i);\n\
    \        }\n    }\n    return retval;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsmdww81w: /tmp/tmpsmdww81w.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l)\n        if (i < 0)\n            result.push_back(-i);\n\
    \        else\n            result.push_back(i);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpixashds3: /tmp/tmpixashds3.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i = 0; i < l.size(); i++)\n        if (l[i] > 0)\n       \
    \     v.push_back(l[i]);\n    return v;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for (long i : l) if (i >= 0) v.push_back(i);\n  return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf384rihh: /tmp/tmpf384rihh.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(long i : l) {\n        if(i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp46zk2bnx: /tmp/tmp46zk2bnx.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.assign(l.begin(), l.begin()\
    \ + std::find(l.begin(), l.end(), 0));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_orriyn5.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_orriyn5.cpp:7:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n    7 |     res.assign(l.begin(), l.begin()\
    \ + std::find(l.begin(), l.end(), 0));\n      |                           ~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                                \
    \  |             |\n      |                                  |             __normal_iterator<[...],[...]>\n\
    \      |                                  __normal_iterator<[...],[...]>\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_orriyn5.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type\u2019 {aka \u2018long int\u2019\
    }\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n    \
    \  |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container"
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (long i : l) {\n    if (i > 0) positive.push_back(i);\n  }\n\
    \  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto i : l) {\n    if (i >= 0) {\n      res.push_back(i);\n   \
    \ }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcxd6dfoi: /tmp/tmpcxd6dfoi.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v1(l.begin(), l.end());\n    // Remove duplicates, sort them.\n    std::sort(v1.begin(),\
    \ v1.end());\n    // Return only positive numbers in the sorted vector.\n    std::vector<long>\
    \ v2;\n    for(auto v: v1) {\n        if(v > 0) {\n            v2.push_back(v);\n\
    \        }\n    }\n    return v2;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9ds5u8ek: /tmp/tmp9ds5u8ek.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i: l) {\n        if (i > 0) {\n            pos.push_back(i);\n\
    \        }\n    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i : l) {\n        if (i > 0) p.push_back(i);\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    // Remove all the negative numbers.\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] >= 0) {\n            ret.push_back(l[i]);\n       \
    \ }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe92kum95: /tmp/tmpe92kum95.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] > 0) {\n   \
    \         p.push_back(l[i]);\n        }\n    }\n    return p;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long k : l)\n        if ((k & 1LL) != 0LL)\n            v.push_back(k);\n\
    \    return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8d_qt21y: /tmp/tmp8d_qt21y.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (auto i : l) {\n        if (i > 0) p.push_back(i);\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  for(long i = 0; i < l.size(); i++)\n  {\n    if (l[i] > 0)\n    {\n\
    \      pos.push_back(l[i]);\n    }\n  }\n  return pos;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique(l.begin(), l.end()); //Remove duplicate elements\n\
    \    return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzp8r8ygz: /tmp/tmpzp8r8ygz.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  // Loop through the vector and add numbers that are positive.\n  for\
    \ (long i = 0; i < (long)l.size(); i++) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        if (i > 0)\n            r.push_back(i);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n     \
    \ positive.push_back(l[i]);\n  }\n  return positive;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (auto i : l)\n        if (i >= 0)\n            v.push_back(i);\n\
    \    return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu8j2gr3d: /tmp/tmpu8j2gr3d.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ vll;\n    std::sort(l.begin(), l.end());\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > l[i - 1]) {\n            vll.push_back(l[i]);\n \
    \       }\n    }\n    return vll;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnby40hlh: /tmp/tmpnby40hlh.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ Your code goes here.\n    // std::vector<long> res;\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_aad6njy.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_aad6njy.cpp:8:12: error: \u2018res\u2019 was not declared\
    \ in this scope\n    8 |     return res;\n      |            ^~~\n"
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i : l)\n    if (i >= 0)\n      res.push_back(i);\n  return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9bf2tpuk: /tmp/tmp9bf2tpuk.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    // Loop through the list and append only positive numbers to the result.\n\
    \    for (long i : l)\n        if (i > 0)\n            res.push_back(i);\n   \
    \ return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.push_back(0);\n    for (auto i : l) {\n        if (i > 0) {\n    \
    \        v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpiq_gj46w: /tmp/tmpiq_gj46w.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ temp;\n  for (auto i : l) {\n    if (i >= 0) {\n      temp.push_back(i);\n \
    \   }\n  }\n  return temp;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjr7yxhor: /tmp/tmpjr7yxhor.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096763
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l;\n    std::copy_if(l.begin(), l.end(), std::back_inserter(new_l), [&](long\
    \ num) {return num >= 0;});\n    return new_l;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvjwh5w0g: /tmp/tmpvjwh5w0g.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ Your code goes here.\n    std::vector<long> result;\n    for(long &num : l)\
    \ {\n        if(num > 0) {\n            result.push_back(num);\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for(long i : l) if(i >= 0) ans.push_back(i);\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq5lsxk7q: /tmp/tmpq5lsxk7q.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> result;\n  for (long i : l)\n    if (i >= 0)\n\
    \      result.push_back(i);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplwi2jmq5: /tmp/tmplwi2jmq5.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> ans(l.begin(), l.begin() + l.size() - 1);\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n      \
    \      ans.push_back(l[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphc8sq7a4: /tmp/tmphc8sq7a4.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i : l)\n        if(i>0)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096761
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive_number;\n    for (long i : l) {\n        if (i > 0)\n            positive_number.push_back(i);\n\
    \    }\n    return positive_number;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ retval;\n    for(size_t i = 0; i < l.size(); ++i) {\n        if(l[i] > 0) {\n\
    \            retval.push_back(l[i]);\n        }\n    }\n    return retval;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096763
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v; // To store only positive numbers.\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    if (l.at(i) > 0) {\n      v.push_back(l.at(i));\n    }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096764
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::set<long>\
    \ s;\n  std::vector<long> ret(l.size());\n  for (auto i = l.begin(); i != l.end();\
    \ ++i)\n    if (*i < 0)\n      s.insert(*i);\n  for (auto i = l.begin(); i !=\
    \ l.end(); ++i)\n    if (s.count(*i) == 0)\n      ret.push_back(*i);\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdbdhdb24: /tmp/tmpdbdhdb24.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    long\
    \ long sum = 0;\n    for (auto x : l)\n    {\n        if (x >= 0)\n          \
    \  sum += x;\n    }\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (auto x : l)\n    {\n        if (x >= 0)\n            res.push_back(x);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpql1b0667: /tmp/tmpql1b0667.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for (long i : l) {\n        if (i >= 0)\n            ans.push_back(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjybqjtnn: /tmp/tmpjybqjtnn.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::set<long>\
    \ s;\n\tstd::vector<long> res;\n\tfor (auto &i : l)\n\t\ts.insert(i);\n\tfor (long\
    \ i : s) {\n\t\tif (i < 0)\n\t\t\tres.push_back(-i);\n\t\telse\n\t\t\tres.push_back(i);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfosynz8u: /tmp/tmpfosynz8u.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ > 0);\n  std::vector<long> positive;\n  for (int i = 0; i < l.size(); ++i)\n\
    \    if (l[i] > 0)\n      positive.push_back(l[i]);\n  return positive;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjkyh8db9: /tmp/tmpjkyh8db9.cpp:5: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.push_back(0);\n    for(long i=l.size()-1;i>=0;i--) {\n        if(l[i]>0)\
    \ {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgp6s086t: /tmp/tmpgp6s086t.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for(long i = 0; i < l.size(); i++){\n        if(l[i] > 0){\n     \
    \       pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    // Sort the numbers from high to low.\n    std::sort(l.begin(), l.end(),\
    \ std::greater<long>());\n    for (long i : l) {\n        if ((i > 0) && (r.size()\
    \ == 0)) {\n            r.push_back(i);\n        } else if (i > 0) {\n       \
    \     r.push_back(-1);\n        }\n    }\n    return r;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpton70wyd: /tmp/tmpton70wyd.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long &x: l)\n        if(x>0)\n            res.push_back(x);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret; \n    std::set<long> s;\n    std::copy(l.begin(), l.end(), std::inserter(s,\
    \ s.end()));\n    for (long & i : s) ret[i] = 0;\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn6kl8m5c.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn6kl8m5c.cpp:8:21: error: binding reference of type \u2018\
    long int&\u2019 to \u2018const long int\u2019 discards qualifiers\n    8 |   \
    \  for (long & i : s) ret[i] = 0;\n      |                     ^\n"
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  l.clear();\n\
    \  std::vector<long> p;\n  for (auto &e : l) {\n    if (e > 0)\n      p.push_back(e);\n\
    \  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu35ap7z2: /tmp/tmpu35ap7z2.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppakhxqrh: /tmp/tmppakhxqrh.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    int\
    \ n=l.size();\n    std::vector<long> v(n);\n    for(int i=0;i<n;i++)\n       \
    \ v[i]=l[i];\n    std::vector<long> res(n);\n    for(int i=0;i<n;i++)\n      \
    \  if(v[i]>0)\n            res[i]=v[i];\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpiqbxwtj5: /tmp/tmpiqbxwtj5.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for(auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmw3942d3: /tmp/tmpmw3942d3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ ret;\n  for (long i: l) {\n    if (i > 0) ret.push_back(i);\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.erase(it, l.end());\n\
    \    return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprsxto156: /tmp/tmprsxto156.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long x : l)\n        if (x>0)\n            pos.push_back(x);\n\
    \    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v1(l.size());\n    for(size_t i = 0; i < l.size(); ++i) v1[i] = -l[i];\n   \
    \ return v1;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa93iglz6: /tmp/tmpa93iglz6.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      res.push_back(l[i]);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_n37q4ur: /tmp/tmp_n37q4ur.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n      \
    \  std::vector<long> ret;\n        for(int i=0; i<l.size(); i++){\n          \
    \  if(l[i] > 0)\n                ret.push_back(l[i]);\n        }\n        return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ ans;\n  for (long i : l) {\n    if (i >= 0) ans.push_back(i);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpocquf00z: /tmp/tmpocquf00z.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ poss;\n  poss.reserve(l.size());\n  for (long i : l) {\n    if (i >= 0) poss.push_back(i);\n\
    \  }\n  return poss;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4o7nq84u: /tmp/tmp4o7nq84u.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long &i : l) {\n        if (i >= 0) {\n            pos.push_back(i);\n\
    \        }\n    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdnmil4nl: /tmp/tmpdnmil4nl.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  l.sort([]\
    \ (long a, long b) { return (a > b); });\n  std::vector<long> pos;\n  for (long\
    \ &x : l) { if (x > 0) { pos.push_back(x); } }\n  return pos;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ur57gxd.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7ur57gxd.cpp:5:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    5 |   l.sort([] (long a,\
    \ long b) { return (a > b); });\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n      \
    \  std::vector<long> res;\n        for (long & i : l)\n            if (i >= 0)\n\
    \                res.push_back(i);\n        return res;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps8dzr9lo: /tmp/tmps8dzr9lo.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p(l.size());\n    for (size_t i = 0; i < l.size(); i++)\n        p[i] = std::max(l[i],\
    \ 1);\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqq5ongur.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqq5ongur.cpp:7:32: error: no matching function for call\
    \ to \u2018max(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&,\
    \ int)\u2019\n    7 |         p[i] = std::max(l[i], 1);\n      |             \
    \                   ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqq5ongur.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpqq5ongur.cpp:7:32: note:  \
    \ deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n    7 |         p[i] = std::max(l[i], 1);\n      |   \
    \                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqq5ongur.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqq5ongur.cpp:7:32:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n    7 |         p[i] = std::max(l[i], 1);\n\
    \      |                                ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqq5o"
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  p.reserve(l.size());\n  for (long &it : l) {\n    if (it > 0) p.push_back(it);\n\
    \  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppakhxqrh: /tmp/tmppakhxqrh.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long num : l) {\n        if (num > 0) {\n            positive.push_back(num);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i : l) {\n        if (i > 0) positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(v),\n            \
    \    [](long x) { return x > 0; });\n  return v;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for (long i : l)\n    if (i >= 0)\n      v.push_back(i);\n  return v;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcpm6koab: /tmp/tmpcpm6koab.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  res.reserve(l.size());\n  for (auto e : l) {\n    if (e > 0)\n     \
    \ res.push_back(e);\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long &i : l)\n        if (i < 0)\n            i = -l;\n     \
    \   res.push_back(i);\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvonyk01o.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvonyk01o.cpp:8:17: error: no match for \u2018operator-\u2019\
    \ (operand type is \u2018std::vector<long int>\u2019)\n    8 |             i =\
    \ -l;\n      |                 ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvonyk01o.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpvonyk01o.cpp:8:18:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n    8 |             i = -l;\n      |                  ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvonyk01o.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     operator-(const move_iterator<_IteratorL>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1209:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvonyk01o.cpp:8:18:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::move_iterator<_Iter"
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n   long\
    \ count = 0;\n   for (auto i : l) {\n      if (i > 0) count++;\n   }\n   std::vector<long>\
    \ result;\n   for (int i = 0; i < count; i++) {\n      result.push_back(l[i]);\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgtc8am0r: /tmp/tmpgtc8am0r.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::vector<long>\
    \ ret;\n\tfor (size_t i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) ret.push_back(l[i]);\n\
    \t}\n\treturn ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(auto v : l){\n        if(v>0){\n            res.push_back(v);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i : l) {\n        if (i>0) {\n            p.push_back(i);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) v.push_back(l[i]);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ Your code goes here.\n    std::vector<long> res;\n    for(auto it=l.begin();\
    \ it!=l.end(); ++it){\n        if((*it) > 0){\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n   \
    \         pos.push_back(l[i]);\n    }\n    return pos;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfb80w09c: /tmp/tmpfb80w09c.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ r;\n  for (long i : l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx16t8vjh: /tmp/tmpx16t8vjh.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    // Check whether the list is empty.\n    if (l.size() == 0) {\n  \
    \      return res;\n    }\n    // Remove all negative elements.\n    // If any\
    \ element is negative, remove it from the list.\n    for (int i = 0; i < l.size();\
    \ ++i) {\n        if (l[i] < 0) {\n            l.erase(l.begin() + i);\n     \
    \       i -= 1;\n        }\n    }\n    // Add all positive numbers.\n    for (int\
    \ i = 1; i < l.size(); ++i) {\n        res.push_back(l[i]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpagwsk1rz: /tmp/tmpagwsk1rz.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  positive.reserve(l.size());\n  for (long i : l)\n    if (i >= 0)\n\
    \      positive.push_back(i);\n  return positive;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbqmki_5p: /tmp/tmpbqmki_5p.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096766
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (int i = 0; i < l.size(); ++i) {\n        if (l[i] > 0) {\n    \
    \        p.push_back(l[i]);\n        }\n    }\n    return p;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  for (auto i : l) {\n    if (i >= 0) {\n      pos.push_back(i);\n   \
    \ }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpefv9grjw: /tmp/tmpefv9grjw.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::vector<long> p;\n    for(long &i : l) {\n        if(i>0) p.push_back(i);\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpah23fpow: /tmp/tmpah23fpow.cpp:5: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660096767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (auto i : l) {\n        if (i >= 0) positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpc27pfjz8: /tmp/tmpc27pfjz8.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(auto i : l)\n        if(i > 0)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ ans;\n  \n  for (long i : l) {\n    if (i >= 0)\n      ans.push_back(i);\n \
    \ }\n  return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfis0v29w: /tmp/tmpfis0v29w.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  // Loop the vector and insert only positive numbers.\n  for (const auto\
    \ i : l) {\n    if (i > 0) {\n      v.push_back(i);\n    }\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for(long &i : l)\n        if(i>=0)\n            p.push_back(i);\n  \
    \  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5ec2aj81: /tmp/tmp5ec2aj81.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> res;\n  for (long i : l)\n    if (i >= 0)\n \
    \     res.push_back(i);\n  return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkerrq2uj: /tmp/tmpkerrq2uj.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v(l.size());\n    for (long i = 0; i < l.size(); i++)\n        v[i] = l[i];\n\
    \    sort(v.begin(), v.end());\n    for (long i = 0; i < v.size(); i++)\n    \
    \    if (v[i] > 0) \n            v.erase(v[i]);\n    return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe70w0nzf.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe70w0nzf.cpp:11:25: error: no matching function for call\
    \ to \u2018std::vector<long int>::erase(__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   11 |             v.erase(v[i]);\n  \
    \    |                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe70w0nzf.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1427:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::vector<long\
    \ int>::const_iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<const long\
    \ int*, std::vector<long int> >\u2019}\n 1427 |       erase(const_iterator __position)\n\
    \      |             ~~~~~~~~~~~~~~~^~~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::const_iterator) [with "
  stdout: ''
  timestamp: 1660096767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (auto i : l)\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkvsp3n68: /tmp/tmpkvsp3n68.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    long cur = 0;\n    for (auto i : l) {\n        if (i != 0) {\n   \
    \         res.push_back(cur);\n            cur += i;\n        }\n    }\n    res.push_back(cur);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps2va8us2: /tmp/tmps2va8us2.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0)\n            v.push_back(i);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph6szsnrs: /tmp/tmph6szsnrs.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l(n);\n    for(long i=0; i<n; i++){\n        if(l[i] > 0){\n           \
    \ new_l[i] = l[i];\n        }\n    }\n    return new_l;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcs4in6_g.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcs4in6_g.cpp:5:29: error: \u2018n\u2019 was not declared\
    \ in this scope\n    5 |     std::vector<long> new_l(n);\n      |            \
    \                 ^\n"
  stdout: ''
  timestamp: 1660096767
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n   \
    \         v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(positive),\n\
    \               [](long x){ return x >= 0; });\n  return positive;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_w2nkbw1: /tmp/tmp_w2nkbw1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (auto i : l) {\n    if (i > 0) result.push_back(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i=0; i<l.size(); i++)\n    {\n        if(l[i]>=0) \n    \
    \    {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfxdwxhv4: /tmp/tmpfxdwxhv4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n      \
    \  std::vector<long> v;\n        for(int i=0;i<l.size();i++){\n              \
    \  if(l[i]>0){\n                        v.push_back(l[i]);\n                }\n\
    \        }\n        return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::vector<long>\
    \ p;\n\tfor (auto iter = l.begin(); iter != l.end(); ++iter)\n\t\tif (*iter >=\
    \ 0)\n\t\t\tp.push_back(*iter);\n\treturn p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4z_9elu5: /tmp/tmp4z_9elu5.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    long max_value = *std::max_element(l.begin(), l.end());\n    long\
    \ max_pos = -1;\n    for (long i : l) {\n        if (i > max_value) {\n      \
    \      ans.clear();\n            return ans;\n        }\n        if (i == max_pos)\
    \ {\n            ans.push_back(i);\n        } else {\n            ans.clear();\n\
    \            ans.push_back(i);\n            ans.push_back(max_pos);\n        \
    \    return ans;\n        }\n    }\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp32kx_bhl: /tmp/tmp32kx_bhl.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i=l.size()-1; i>=0; i--){\n        if(l[i]>0){\n        \
    \    for(long j=0; j<i; j++){\n                l[j]=-l[j];\n            }\n  \
    \          for(long j=i; j<l.size(); j++){\n                l[j]=-l[j];\n    \
    \        }\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4vi5qu9k: /tmp/tmp4vi5qu9k.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for (long i : l)\n        if (i >= 0)\n            ans.push_back(i);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2dw75k4r: /tmp/tmp2dw75k4r.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    long\
    \ n = 0;\n    std::vector<long> res = std::vector<long>();\n    for (const auto\
    \ &i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    for (const auto\
    \ &i : l) {\n        if (i == 0) continue;\n        if (i == n) res.push_back(n);\n\
    \        n++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    int\
    \ pos = 0;\n    std::vector<long> res;\n    for (long i : l)\n        if (i >=\
    \ 0)\n            res[pos++] = i;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  // Make copy of input vector\n  for (auto& num : l) p.push_back(num);\n\
    \  // Now make vector of only positive numbers.\n  p.erase(std::remove_if(p.begin(),\
    \ p.end(), [](long n) {\n      return n < 0;\n    }), p.end());\n  // Return vector\
    \ of only positive numbers.\n  return p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphxq7_3fu: /tmp/tmphxq7_3fu.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i< l.size(); i++) {\n        if (l[i] > 0)\n    \
    \        res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i : l) {\n        if (i > 0)\n            pos.push_back(i);\n\
    \    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l;\n    for(long i: l) {\n        if(i>0) {\n            new_l.push_back(i);\n\
    \        }\n    }\n    return new_l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ new_l;\n  for (auto& x : l)\n    if (x >= 0)\n      new_l.push_back(x);\n  return\
    \ new_l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp7enr1nc: /tmp/tmpp7enr1nc.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positives;\n    for (long &e : l) {\n        if (e > 0) {\n            positives.push_back(e);\n\
    \        }\n    }\n    return positives;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  // Traverse the vector to find positive numbers.\n  for (size_t i =\
    \ 0; i < l.size(); ++i) {\n    if (l[i] >= 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  // Return only positive numbers.\n  return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmjzsj1tr: /tmp/tmpmjzsj1tr.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    int\
    \ size = l.size();\n    std::vector<long> r;\n    long max_value = 0;\n    for\
    \ (int i = 0; i < size; i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    int count = 0;\n    for (int i = 0; i < size;\
    \ i++) {\n        if (l[i] > max_value) {\n            r.push_back(l[i]);\n  \
    \          count++;\n        }\n    }\n    if (count == 0) {\n        r.push_back(-max_value);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz3zp6znt: /tmp/tmpz3zp6znt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        if (i > 0) ret.push_back(i);\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive(l);\n    for (long &i : positive)\n        if (i >= 0)\n          \
    \  i = i;\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfir8duaj: /tmp/tmpfir8duaj.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1xqtambg: /tmp/tmp1xqtambg.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v(l);\n  for (int i = 0; i < v.size(); i++) {\n    if (v[i] >= 0) v[i] = v[i]\
    \ + 1;\n  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphlgpom7m: /tmp/tmphlgpom7m.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long e : l)\n        if (e > 0)\n            ret.push_back(e);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    p.reserve(l.size());\n    for (long i : l) {\n        if (i >= 0) p.push_back(i);\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpebis1wvx: /tmp/tmpebis1wvx.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long e : l) {\n        if (e > 0) {\n            p.push_back(e);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long x : l) {\n        if (x > 0) result.push_back(x);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i : l)\n        if (i > 0)\n            positive.push_back(i);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ >= 2);\n  std::vector<long> ret;\n  for (long i = 0; i < l.size(); i++) {\n\
    \    if (l[i] >= 0)\n      ret.push_back(l[i]);\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq15yyi3u: /tmp/tmpq15yyi3u.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long n : l) {\n        if (n >= 0)\n            res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8ddz320c: /tmp/tmp8ddz320c.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096769
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it\
    \ != l.end(); it++) {\n        if (*it > 0) {\n            positive.push_back(*it);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res(l.size());\n  for (long i : l) {\n    if (i >= 0)\n      res[i] = i;\n \
    \ }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpajlrh9ms: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res(l.size());\n    for (long i = 0; i < l.size(); ++i) res[i] = l[i] > 0 ?\
    \ l[i] : 0;\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr7ifzg60: /tmp/tmpr7ifzg60.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p(l.size());\n  for (long i : l)\n    p[std::find(std::begin(p), std::end(p),\
    \ i) - std::begin(p)] = i;\n  return p;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgobvtvsy: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long &i : l) {\n        if (i>0)\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p(l.size());\n    std::iota(p.begin(), p.end(), 0);\n    auto it = std::remove_if(p.begin(),\
    \ p.end(), [&](long n) {\n        return n > 0;\n    });\n    return std::move(std::unique(it,\
    \ p.end()) - p.begin());\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptanfu1iu.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptanfu1iu.cpp:10:21: error: could not convert \u2018std::move<long\
    \ int>(__gnu_cxx::operator-<long int*, std::vector<long int> >(std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(it, p.std::vector<long int>::end()), p.std::vector<long\
    \ int>::begin()))\u2019 from \u2018std::remove_reference<long int>::type\u2019\
    \ {aka \u2018long int\u2019} to \u2018std::vector<long int>\u2019\n   10 |   \
    \  return std::move(std::unique(it, p.end()) - p.begin());\n      |          \
    \  ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                  \
    \   |\n      |                     std::remove_reference<long int>::type {aka\
    \ long int}\n"
  stdout: ''
  timestamp: 1660096769
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n   \
    \   positive.push_back(l[i]);\n    }\n  }\n  return positive;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l)\n        if (i >= 0)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1j_3m09q: /tmp/tmp1j_3m09q.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res(l);\n  for (long i = 0; i < res.size(); i++) {\n    if (res[i] <= 0) {\n\
    \      res.erase(res.begin() + i);\n      i--;\n    }\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i : l) {\n        if (i > 0) p.push_back(i);\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096762
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long x: l) {\n        if (x > 0)\n            v.push_back(x);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ temp(l.size());\n  for (long i = 0; i < l.size(); i++)\n    if (l[i] > 0)\n\
    \      temp[i] = l[i];\n  return temp;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt18pd3hc: /tmp/tmpt18pd3hc.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for(long n: l)\n        if(n >= 0)\n            result.push_back(n);\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf57j5il9: /tmp/tmpf57j5il9.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppakhxqrh: /tmp/tmppakhxqrh.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096765
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i : l)\n        if (i > 0)\n            positive.push_back(i);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l) {\n        if (i > 0)\n            result.push_back(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n    \
    \        v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ n(nl.size(), 0);\n    for (const auto &i : l) {\n        if (i > 0) {\n    \
    \        ++n[i - 1];\n        }\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6vo6rr3f.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6vo6rr3f.cpp:5:25: error: \u2018nl\u2019 was not declared\
    \ in this scope; did you mean \u2018n\u2019?\n    5 |     std::vector<long> n(nl.size(),\
    \ 0);\n      |                         ^~\n      |                         n\n"
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for (long i : l) {\n        if (i > 0)\n            ans.push_back(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (long i : l) {\n    if (i >= 0)\n      positive.push_back(i);\n\
    \  }\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp08391cep: /tmp/tmp08391cep.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i > 0) res.push_back(i);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i : l) {\n        if (i > 0)\n            pos.push_back(i);\n\
    \    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive(l);\n  for (long i : positive) if (i <= 0) return positive;\n  std::sort(positive.begin(),\
    \ positive.end());\n  auto it = std::unique(positive.begin(), positive.end());\n\
    \  positive.erase(it, positive.end());\n  return positive;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpngaxud5e: /tmp/tmpngaxud5e.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n   auto\
    \ p = std::remove_if(l.begin(), l.end(), [](const long x){ return x >= 0; });\n\
    \   std::reverse(l.begin(), p);\n   return p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvdf0cds.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppvdf0cds.cpp:7:11: error: could not convert \u2018p\u2019\
    \ from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018std::vector<long int>\u2019\n    7 |    return p;\n      |        \
    \   ^\n      |           |\n      |           __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660096770
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      p.push_back(l[i]);\n\
    \    }\n  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ sort the vector\n    std::sort(l.begin(), l.end());\n\n    // Return the elements\
    \ that are positive\n    std::vector<long> out;\n    long pos = 0;\n    for (long\
    \ i : l)\n        if (i > pos) out.push_back(pos);\n        else      out.push_back(i);\n\
    \    return out;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5zepzpm1: /tmp/tmp5zepzpm1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for(int i = 0; i < l.size(); i++) {\n    if(l[i] > 0) {\n      v.push_back(l[i]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    std::stack<long> st;\n    for (auto i : l) {\n        st.push(i);\n\
    \        while (st.size()) {\n            long curr = st.top();\n            st.pop();\n\
    \            if (curr > 0) {\n                ans.push_back(curr);\n         \
    \   } else {\n                if (ans.size())\n                    st.push(ans.back());\n\
    \                ans.pop_back();\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l)\n        if (i>0)\n            v.push_back(i);\n  \
    \  return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ TODO: Complete me!\n    return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpj06ok1pp: /tmp/tmpj06ok1pp.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (int i=0; i<l.size(); i++) {\n        if(l[i]>0) {\n    \
    \        positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long &it: l){\n        if (it > 0){\n            res.push_back(it);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i : l)\n        if (i > 0)\n            pos.push_back(i);\n\
    \    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (auto i : l) {\n        if (i > 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive(l);\n  std::remove_copy_if(l.begin(), l.end(), std::back_inserter(positive),\n\
    \    [](long x) { return x >= 0; });\n  return positive;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbft9afme: /tmp/tmpbft9afme.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (auto &x : l)\n        if (x >= 0)\n            v.push_back(x);\n\
    \    return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaq0bt3ae: /tmp/tmpaq0bt3ae.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        if (i > 0)\
    \ res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ >= 2);\n  std::vector<long> res;\n  res.reserve(l.size());\n  for (auto &el\
    \ : l)\n    if (el >= 0)\n      res.push_back(el);\n  return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0eay01sg: /tmp/tmp0eay01sg.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for(long i=0; i<l.size(); i++)\n    if(l[i] > 0)\n      res.push_back(l[i]);\n\
    \  return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) v.push_back(i);\n    }\n   \
    \ return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp16t13043: /tmp/tmp16t13043.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for(auto i : l)\n    {\n        if(i > 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ out;\n    out.assign( l.begin(), l.end() );\n    std::sort(out.begin(), out.end());\n\
    \    return out;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4sj14qgz: /tmp/tmp4sj14qgz.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpog3au4xu: /tmp/tmpog3au4xu.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i > 0)\n            res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ We use unordered set for O(log n) algorithm.\n    std::unordered_set<long> positive;\n\
    \    for (long i : l)\n        positive.insert(i);\n    std::vector<long> res;\n\
    \    for (long i : l) {\n        if (positive.count(i)) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgjwtdcyc: /tmp/tmpgjwtdcyc.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::set<long>\
    \ positive;\n    for (auto i : l)\n        if (i > 0) positive.insert(i);\n  \
    \  std::vector<long> res;\n    res.reserve(l.size());\n    for (auto i : l)\n\
    \        if (positive.find(i) != positive.end()) res.push_back(i);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positives;\n    \n    // Initialize an empty vector to store result\n    positives.resize(l.size());\n\
    \    \n    // Insert each element of l into the vector\n    std::transform(l.begin(),\
    \ l.end(), positives.begin(), [](long x){return x >= 0; });\n    \n    return\
    \ positives;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9us9phm7: /tmp/tmp9us9phm7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l(n);\n    for(size_t i = 0; i < n; i++) {\n        if (l[i] > 0) {\n  \
    \          new_l[i] = l[i];\n        }\n    }\n    return new_l;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyfzzd_g.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnyfzzd_g.cpp:5:29: error: \u2018n\u2019 was not declared\
    \ in this scope\n    5 |     std::vector<long> new_l(n);\n      |            \
    \                 ^\n"
  stdout: ''
  timestamp: 1660096771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v(l.size());\n  for (size_t i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n\
    \      v[i] = l[i];\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp59656uws: /tmp/tmp59656uws.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.assign(l);\n    std::sort(v.begin(), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyslruv4n.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyslruv4n.cpp:6:15: error: no matching function for call\
    \ to \u2018std::vector<long int>::assign(std::vector<long int>&)\u2019\n    6\
    \ |     v.assign(l);\n      |               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyslruv4n.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:746:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::assign(std::vector<_Tp,\
    \ _Alloc>::size_type, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp,\
    \ _Alloc>::value_type = long int]\u2019\n  746 |       assign(size_type __n, const\
    \ value_type& __val)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:746:7:\
    \ note:   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/stl_vector.h:765:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> void std::vector<_Tp,\
    \ _Alloc>::assign(_InputIterator, _InputIterator) [with _InputIterator = _InputIterator;\
    \ <template-parameter-2-2> = <template-parameter-1-2>; _Tp = long int; _Alloc\
    \ = std::allocator<long int>]\u2019\n  765 |  assign(_InputIterator __first, _InputIterator\
    \ __last)\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:765:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpyslruv4n.cpp:6:15:\
    \ note:   candidate expects 2 arguments, 1 provided\n    6 |     v.assign(l);\n\
    \      |               ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9"
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(auto i:l)\n        if(i>0)\n            v.push_back(i);\n    return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> ret;\n  // Find the first positive number.\n\
    \  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      break;\n  }\n\
    \  for (long i = 0; i < l.size(); i++) {\n    ret.append(l[i]);\n  }\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49qjbdck.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp49qjbdck.cpp:13:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018append\u2019\n   13 |     ret.append(l[i]);\n\
    \      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660096771
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::vector<long>\
    \ v;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) v.push_back(l[i]);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096772
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for(long i: l) {\n        if(i>0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ retval;\n    retval.push_back(l[0]);\n    for (auto i : l) {\n        if (i\
    \ > 0) retval.push_back(i);\n    }\n    return retval;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppxm0gfx2: /tmp/tmppxm0gfx2.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1660096772
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for(const auto &i : l) {\n        if(i > 0) pos.push_back(i);\n  \
    \  }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096772
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l;\n    for (const auto& e : l) {\n        if (e > 0) {\n            new_l.push_back(e);\n\
    \        }\n    }\n    return new_l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660096772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positives;\n  positives.reserve(l.size());\n  for (int i = 1; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      positives.push_back(l[i]);\n    }\n  }\n\
    \  return positives;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdrnxn4n3: /tmp/tmpdrnxn4n3.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660096772
