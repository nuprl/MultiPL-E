language: cpp
name: HumanEval_30_get_positive
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos_nums;\n    for (long i : l) {\n        if (i >= 0)\n            pos_nums.push_back(i);\n\
    \    }\n    return pos_nums;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9zo09cs2: /tmp/tmp9zo09cs2.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> positive;\n  for (long num : l) {\n    if (num\
    \ > 0) {\n      positive.push_back(num);\n    }\n  }\n  return positive;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcfrzcwuq: /tmp/tmpcfrzcwuq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i = 0; i < (long)l.size(); i++)\n        if(l[i] > 0)\n \
    \           res.push_back(l[i]);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ != 0);\n  std::vector<long> positive;\n  positive.reserve(l.size());\n  for\
    \ (long i : l) {\n    if (i >= 0) {\n      positive.push_back(i);\n    }\n  }\n\
    \  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk0cowteg: /tmp/tmpk0cowteg.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n   std::vector<long>\
    \ result;\n   result.clear();\n   for (long i=0; i<l.size(); i++)\n      if (l[i]\
    \ > 0)\n         result.push_back(l[i]);\n   return result;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto it : l) {\n        if (it > 0)\n            res.push_back(it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  for (int i = 0; i < l.size(); i++)\n    if (l[i] > 0) p.push_back(l[i]);\n\
    \  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> res;\n  for (long i : l) {\n    if (i >= 0) res.push_back(i);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm5x9jmhy: /tmp/tmpm5x9jmhy.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  for (int i = 0; i < l.size(); ++i) {\n    if (l.at(i) >= 0) {\n      p.push_back(l.at(i));\n\
    \    }\n  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4nvwjncb: /tmp/tmp4nvwjncb.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (auto it = l.begin(); it != l.end(); ++it)\n        if (*it >\
    \ 0)\n            pos.push_back(*it);\n    return pos;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res; // Initialize an empty vector.\n    for (auto it = l.begin(); it != l.end();\
    \ it++) {\n        if (*it > 0) res.push_back(*it);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ retval;\n    for (auto i : l) {\n        if (i >= 0) {\n            retval.push_back(i);\n\
    \        }\n    }\n    return retval;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpn5ho7k_b: /tmp/tmpn5ho7k_b.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l)\n        if (i < 0)\n            result.push_back(-i);\n\
    \        else\n            result.push_back(i);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphj03owjc: /tmp/tmphj03owjc.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i = 0; i < l.size(); i++)\n        if (l[i] > 0)\n       \
    \     v.push_back(l[i]);\n    return v;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for (long i : l) if (i >= 0) v.push_back(i);\n  return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpws1m7ivn: /tmp/tmpws1m7ivn.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(long i : l) {\n        if(i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpornzcga_: /tmp/tmpornzcga_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.assign(l.begin(), l.begin()\
    \ + std::find(l.begin(), l.end(), 0));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuxr9qo_a.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuxr9qo_a.cpp:7:37: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n    7 |     res.assign(l.begin(), l.begin()\
    \ + std::find(l.begin(), l.end(), 0));\n      |                           ~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                                \
    \  |             |\n      |                                  |             __normal_iterator<[...],[...]>\n\
    \      |                                  __normal_iterator<[...],[...]>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpuxr9qo_a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:859:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  859 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/shared/centos7/"
  stdout: ''
  timestamp: 1659822636
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (long i : l) {\n    if (i > 0) positive.push_back(i);\n  }\n\
    \  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (auto i : l) {\n    if (i >= 0) {\n      res.push_back(i);\n   \
    \ }\n  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbizso5jt: /tmp/tmpbizso5jt.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v1(l.begin(), l.end());\n    // Remove duplicates, sort them.\n    std::sort(v1.begin(),\
    \ v1.end());\n    // Return only positive numbers in the sorted vector.\n    std::vector<long>\
    \ v2;\n    for(auto v: v1) {\n        if(v > 0) {\n            v2.push_back(v);\n\
    \        }\n    }\n    return v2;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmp7euffq: /tmp/tmpmp7euffq.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i: l) {\n        if (i > 0) {\n            pos.push_back(i);\n\
    \        }\n    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i : l) {\n        if (i > 0) p.push_back(i);\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    // Remove all the negative numbers.\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] >= 0) {\n            ret.push_back(l[i]);\n       \
    \ }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpld9welvv: /tmp/tmpld9welvv.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] > 0) {\n   \
    \         p.push_back(l[i]);\n        }\n    }\n    return p;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822638
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long k : l)\n        if ((k & 1LL) != 0LL)\n            v.push_back(k);\n\
    \    return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsmy782qi: /tmp/tmpsmy782qi.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (auto i : l) {\n        if (i > 0) p.push_back(i);\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  for(long i = 0; i < l.size(); i++)\n  {\n    if (l[i] > 0)\n    {\n\
    \      pos.push_back(l[i]);\n    }\n  }\n  return pos;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique(l.begin(), l.end()); //Remove duplicate elements\n\
    \    return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_2s14oc2: /tmp/tmp_2s14oc2.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  // Loop through the vector and add numbers that are positive.\n  for\
    \ (long i = 0; i < (long)l.size(); i++) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    for (long i : l) {\n        if (i > 0)\n            r.push_back(i);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n     \
    \ positive.push_back(l[i]);\n  }\n  return positive;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (auto i : l)\n        if (i >= 0)\n            v.push_back(i);\n\
    \    return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1m23k5rc: /tmp/tmp1m23k5rc.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ vll;\n    std::sort(l.begin(), l.end());\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > l[i - 1]) {\n            vll.push_back(l[i]);\n \
    \       }\n    }\n    return vll;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpi4dwnad9: /tmp/tmpi4dwnad9.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ Your code goes here.\n    // std::vector<long> res;\n    \n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt1mq10u.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnt1mq10u.cpp:8:12: error: \u2018res\u2019 was not declared\
    \ in this scope\n    8 |     return res;\n      |            ^~~\n"
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (long i : l)\n    if (i >= 0)\n      res.push_back(i);\n  return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqbvn1e_r: /tmp/tmpqbvn1e_r.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    // Loop through the list and append only positive numbers to the result.\n\
    \    for (long i : l)\n        if (i > 0)\n            res.push_back(i);\n   \
    \ return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.push_back(0);\n    for (auto i : l) {\n        if (i > 0) {\n    \
    \        v.push_back(i);\n        }\n    }\n    return v;\n}\nint main() {\n \
    \   auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmvr20_g0: /tmp/tmpmvr20_g0.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ temp;\n  for (auto i : l) {\n    if (i >= 0) {\n      temp.push_back(i);\n \
    \   }\n  }\n  return temp;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3pjtad36: /tmp/tmp3pjtad36.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l;\n    std::copy_if(l.begin(), l.end(), std::back_inserter(new_l), [&](long\
    \ num) {return num >= 0;});\n    return new_l;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3fvmyli3: /tmp/tmp3fvmyli3.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ Your code goes here.\n    std::vector<long> result;\n    for(long &num : l)\
    \ {\n        if(num > 0) {\n            result.push_back(num);\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for(long i : l) if(i >= 0) ans.push_back(i);\n    return ans;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkt45pmvx: /tmp/tmpkt45pmvx.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> result;\n  for (long i : l)\n    if (i >= 0)\n\
    \      result.push_back(i);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpj3lxuicg: /tmp/tmpj3lxuicg.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> ans(l.begin(), l.begin() + l.size() - 1);\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n      \
    \      ans.push_back(l[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjawyam16: /tmp/tmpjawyam16.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i : l)\n        if(i>0)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive_number;\n    for (long i : l) {\n        if (i > 0)\n            positive_number.push_back(i);\n\
    \    }\n    return positive_number;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822639
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ retval;\n    for(size_t i = 0; i < l.size(); ++i) {\n        if(l[i] > 0) {\n\
    \            retval.push_back(l[i]);\n        }\n    }\n    return retval;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822640
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v; // To store only positive numbers.\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    if (l.at(i) > 0) {\n      v.push_back(l.at(i));\n    }\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822641
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::set<long>\
    \ s;\n  std::vector<long> ret(l.size());\n  for (auto i = l.begin(); i != l.end();\
    \ ++i)\n    if (*i < 0)\n      s.insert(*i);\n  for (auto i = l.begin(); i !=\
    \ l.end(); ++i)\n    if (s.count(*i) == 0)\n      ret.push_back(*i);\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzlmiz047: /tmp/tmpzlmiz047.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    long\
    \ long sum = 0;\n    for (auto x : l)\n    {\n        if (x >= 0)\n          \
    \  sum += x;\n    }\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (auto x : l)\n    {\n        if (x >= 0)\n            res.push_back(x);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpn1zs33yx: /tmp/tmpn1zs33yx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for (long i : l) {\n        if (i >= 0)\n            ans.push_back(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9f5nuh36: /tmp/tmp9f5nuh36.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::set<long>\
    \ s;\n\tstd::vector<long> res;\n\tfor (auto &i : l)\n\t\ts.insert(i);\n\tfor (long\
    \ i : s) {\n\t\tif (i < 0)\n\t\t\tres.push_back(-i);\n\t\telse\n\t\t\tres.push_back(i);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphbd_om1f: /tmp/tmphbd_om1f.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ > 0);\n  std::vector<long> positive;\n  for (int i = 0; i < l.size(); ++i)\n\
    \    if (l[i] > 0)\n      positive.push_back(l[i]);\n  return positive;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpad0cdb16: /tmp/tmpad0cdb16.cpp:5: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.push_back(0);\n    for(long i=l.size()-1;i>=0;i--) {\n        if(l[i]>0)\
    \ {\n            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbpmztylg: /tmp/tmpbpmztylg.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822641
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for(long i = 0; i < l.size(); i++){\n        if(l[i] > 0){\n     \
    \       pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ r;\n    // Sort the numbers from high to low.\n    std::sort(l.begin(), l.end(),\
    \ std::greater<long>());\n    for (long i : l) {\n        if ((i > 0) && (r.size()\
    \ == 0)) {\n            r.push_back(i);\n        } else if (i > 0) {\n       \
    \     r.push_back(-1);\n        }\n    }\n    return r;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp40yoe_at: /tmp/tmp40yoe_at.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long &x: l)\n        if(x>0)\n            res.push_back(x);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822641
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret; \n    std::set<long> s;\n    std::copy(l.begin(), l.end(), std::inserter(s,\
    \ s.end()));\n    for (long & i : s) ret[i] = 0;\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_r5zlt3.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy_r5zlt3.cpp:8:21: error: binding reference of type \u2018\
    long int&\u2019 to \u2018const long int\u2019 discards qualifiers\n    8 |   \
    \  for (long & i : s) ret[i] = 0;\n      |                     ^\n"
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  l.clear();\n\
    \  std::vector<long> p;\n  for (auto &e : l) {\n    if (e > 0)\n      p.push_back(e);\n\
    \  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbn8b98vo: /tmp/tmpbn8b98vo.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8s0i9veq: /tmp/tmp8s0i9veq.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    int\
    \ n=l.size();\n    std::vector<long> v(n);\n    for(int i=0;i<n;i++)\n       \
    \ v[i]=l[i];\n    std::vector<long> res(n);\n    for(int i=0;i<n;i++)\n      \
    \  if(v[i]>0)\n            res[i]=v[i];\n    return res;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3aefrp0c: /tmp/tmp3aefrp0c.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for(auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpeo6ztigx: /tmp/tmpeo6ztigx.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ ret;\n  for (long i: l) {\n    if (i > 0) ret.push_back(i);\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.erase(it, l.end());\n\
    \    return l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa6vh74k6: /tmp/tmpa6vh74k6.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long x : l)\n        if (x>0)\n            pos.push_back(x);\n\
    \    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v1(l.size());\n    for(size_t i = 0; i < l.size(); ++i) v1[i] = -l[i];\n   \
    \ return v1;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0vfvve0j: /tmp/tmp0vfvve0j.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      res.push_back(l[i]);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpq8ve42xo: /tmp/tmpq8ve42xo.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n      \
    \  std::vector<long> ret;\n        for(int i=0; i<l.size(); i++){\n          \
    \  if(l[i] > 0)\n                ret.push_back(l[i]);\n        }\n        return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822642
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ ans;\n  for (long i : l) {\n    if (i >= 0) ans.push_back(i);\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpz5xfr7o_: /tmp/tmpz5xfr7o_.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ poss;\n  poss.reserve(l.size());\n  for (long i : l) {\n    if (i >= 0) poss.push_back(i);\n\
    \  }\n  return poss;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjnjanfi1: /tmp/tmpjnjanfi1.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long &i : l) {\n        if (i >= 0) {\n            pos.push_back(i);\n\
    \        }\n    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe6ktf1rd: /tmp/tmpe6ktf1rd.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  l.sort([]\
    \ (long a, long b) { return (a > b); });\n  std::vector<long> pos;\n  for (long\
    \ &x : l) { if (x > 0) { pos.push_back(x); } }\n  return pos;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpclhrlysb.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpclhrlysb.cpp:5:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    5 |   l.sort([] (long a,\
    \ long b) { return (a > b); });\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1659822643
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n      \
    \  std::vector<long> res;\n        for (long & i : l)\n            if (i >= 0)\n\
    \                res.push_back(i);\n        return res;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppihi7gf8: /tmp/tmppihi7gf8.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p(l.size());\n    for (size_t i = 0; i < l.size(); i++)\n        p[i] = std::max(l[i],\
    \ 1);\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmn4zs57l.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmn4zs57l.cpp:7:32: error: no matching function for call\
    \ to \u2018max(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&,\
    \ int)\u2019\n    7 |         p[i] = std::max(l[i], 1);\n      |             \
    \                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmn4zs57l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmn4zs57l.cpp:7:32:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n    7 |         p[i] = std::max(l[i], 1);\n\
    \      |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/ce"
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  p.reserve(l.size());\n  for (long &it : l) {\n    if (it > 0) p.push_back(it);\n\
    \  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8s0i9veq: /tmp/tmp8s0i9veq.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long num : l) {\n        if (num > 0) {\n            positive.push_back(num);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i : l) {\n        if (i > 0) positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(v),\n            \
    \    [](long x) { return x > 0; });\n  return v;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for (long i : l)\n    if (i >= 0)\n      v.push_back(i);\n  return v;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdwjzc6ks: /tmp/tmpdwjzc6ks.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  res.reserve(l.size());\n  for (auto e : l) {\n    if (e > 0)\n     \
    \ res.push_back(e);\n  }\n  return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long &i : l)\n        if (i < 0)\n            i = -l;\n     \
    \   res.push_back(i);\n    return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctqz36hw.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpctqz36hw.cpp:8:17: error: no match for \u2018operator-\u2019\
    \ (operand type is \u2018std::vector<long int>\u2019)\n    8 |             i =\
    \ -l;\n      |                 ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpctqz36hw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpctqz36hw.cpp:8:18:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n    8 |             i = -l;\n      |                  ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++"
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n   long\
    \ count = 0;\n   for (auto i : l) {\n      if (i > 0) count++;\n   }\n   std::vector<long>\
    \ result;\n   for (int i = 0; i < count; i++) {\n      result.push_back(l[i]);\n\
    \   }\n   return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyi_qgj0q: /tmp/tmpyi_qgj0q.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::vector<long>\
    \ ret;\n\tfor (size_t i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) ret.push_back(l[i]);\n\
    \t}\n\treturn ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(auto v : l){\n        if(v>0){\n            res.push_back(v);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i : l) {\n        if (i>0) {\n            p.push_back(i);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0) v.push_back(l[i]);\n\
    \  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ Your code goes here.\n    std::vector<long> res;\n    for(auto it=l.begin();\
    \ it!=l.end(); ++it){\n        if((*it) > 0){\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] >= 0)\n   \
    \         pos.push_back(l[i]);\n    }\n    return pos;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpikngz61q: /tmp/tmpikngz61q.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ r;\n  for (long i : l) {\n    if (i >= 0) {\n      r.push_back(i);\n    }\n\
    \  }\n  return r;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplrniezk3: /tmp/tmplrniezk3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    // Check whether the list is empty.\n    if (l.size() == 0) {\n  \
    \      return res;\n    }\n    // Remove all negative elements.\n    // If any\
    \ element is negative, remove it from the list.\n    for (int i = 0; i < l.size();\
    \ ++i) {\n        if (l[i] < 0) {\n            l.erase(l.begin() + i);\n     \
    \       i -= 1;\n        }\n    }\n    // Add all positive numbers.\n    for (int\
    \ i = 1; i < l.size(); ++i) {\n        res.push_back(l[i]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxrktern3: /tmp/tmpxrktern3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  positive.reserve(l.size());\n  for (long i : l)\n    if (i >= 0)\n\
    \      positive.push_back(i);\n  return positive;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt1k88bak: /tmp/tmpt1k88bak.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822644
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (int i = 0; i < l.size(); ++i) {\n        if (l[i] > 0) {\n    \
    \        p.push_back(l[i]);\n        }\n    }\n    return p;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822645
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  for (auto i : l) {\n    if (i >= 0) {\n      pos.push_back(i);\n   \
    \ }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxr0ydk3a: /tmp/tmpxr0ydk3a.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::vector<long> p;\n    for(long &i : l) {\n        if(i>0) p.push_back(i);\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmysimvah: /tmp/tmpmysimvah.cpp:5: std::vector<long int> get_positive(std::vector<long
    int>): Assertion `l.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (auto i : l) {\n        if (i >= 0) positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7tglyyiz: /tmp/tmp7tglyyiz.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(auto i : l)\n        if(i > 0)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ ans;\n  \n  for (long i : l) {\n    if (i >= 0)\n      ans.push_back(i);\n \
    \ }\n  return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5h8gcm_4: /tmp/tmp5h8gcm_4.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ pos;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n\
    \    }\n  }\n  return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  // Loop the vector and insert only positive numbers.\n  for (const auto\
    \ i : l) {\n    if (i > 0) {\n      v.push_back(i);\n    }\n  }\n  return v;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for(long &i : l)\n        if(i>=0)\n            p.push_back(i);\n  \
    \  return p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx0kdhhpi: /tmp/tmpx0kdhhpi.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> res;\n  for (long i : l)\n    if (i >= 0)\n \
    \     res.push_back(i);\n  return res;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp58ydcq8r: /tmp/tmp58ydcq8r.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v(l.size());\n    for (long i = 0; i < l.size(); i++)\n        v[i] = l[i];\n\
    \    sort(v.begin(), v.end());\n    for (long i = 0; i < v.size(); i++)\n    \
    \    if (v[i] > 0) \n            v.erase(v[i]);\n    return v;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx08psg89.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx08psg89.cpp:11:25: error: no matching function for call\
    \ to \u2018std::vector<long int>::erase(__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   11 |             v.erase(v[i]);\n  \
    \    |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpx08psg89.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1427:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::vector<long\
    \ int>::const_iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<const long\
    \ int*, std::vector<long int> >\u2019}\n 1427 |       erase(const_iterator __position)\n\
    \      |             ~~~~~~~~~~~~~~~^~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vect"
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (auto i : l)\n        if (i >= 0)\n            positive.push_back(i);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa5p9gfg5: /tmp/tmpa5p9gfg5.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    long cur = 0;\n    for (auto i : l) {\n        if (i != 0) {\n   \
    \         res.push_back(cur);\n            cur += i;\n        }\n    }\n    res.push_back(cur);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg6girb1v: /tmp/tmpg6girb1v.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0)\n            v.push_back(i);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0b20w12l: /tmp/tmp0b20w12l.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l(n);\n    for(long i=0; i<n; i++){\n        if(l[i] > 0){\n           \
    \ new_l[i] = l[i];\n        }\n    }\n    return new_l;\n}\nint main() {\n   \
    \ auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_kzoq8mx.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_kzoq8mx.cpp:5:29: error: \u2018n\u2019 was not declared\
    \ in this scope\n    5 |     std::vector<long> new_l(n);\n      |            \
    \                 ^\n"
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n   \
    \         v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(positive),\n\
    \               [](long x){ return x >= 0; });\n  return positive;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpiek7i6zo: /tmp/tmpiek7i6zo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ result;\n  for (auto i : l) {\n    if (i > 0) result.push_back(i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i=0; i<l.size(); i++)\n    {\n        if(l[i]>=0) \n    \
    \    {\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph56ve814: /tmp/tmph56ve814.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n      \
    \  std::vector<long> v;\n        for(int i=0;i<l.size();i++){\n              \
    \  if(l[i]>0){\n                        v.push_back(l[i]);\n                }\n\
    \        }\n        return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::vector<long>\
    \ p;\n\tfor (auto iter = l.begin(); iter != l.end(); ++iter)\n\t\tif (*iter >=\
    \ 0)\n\t\t\tp.push_back(*iter);\n\treturn p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkypbg63j: /tmp/tmpkypbg63j.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    long max_value = *std::max_element(l.begin(), l.end());\n    long\
    \ max_pos = -1;\n    for (long i : l) {\n        if (i > max_value) {\n      \
    \      ans.clear();\n            return ans;\n        }\n        if (i == max_pos)\
    \ {\n            ans.push_back(i);\n        } else {\n            ans.clear();\n\
    \            ans.push_back(i);\n            ans.push_back(max_pos);\n        \
    \    return ans;\n        }\n    }\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmwsuvm97: /tmp/tmpmwsuvm97.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822646
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for(long i=l.size()-1; i>=0; i--){\n        if(l[i]>0){\n        \
    \    for(long j=0; j<i; j++){\n                l[j]=-l[j];\n            }\n  \
    \          for(long j=i; j<l.size(); j++){\n                l[j]=-l[j];\n    \
    \        }\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1rgvs7ms: /tmp/tmp1rgvs7ms.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822647
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for (long i : l)\n        if (i >= 0)\n            ans.push_back(i);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6j_e71v1: /tmp/tmp6j_e71v1.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    long\
    \ n = 0;\n    std::vector<long> res = std::vector<long>();\n    for (const auto\
    \ &i : l) {\n        if (i > 0) res.push_back(i);\n    }\n    for (const auto\
    \ &i : l) {\n        if (i == 0) continue;\n        if (i == n) res.push_back(n);\n\
    \        n++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    int\
    \ pos = 0;\n    std::vector<long> res;\n    for (long i : l)\n        if (i >=\
    \ 0)\n            res[pos++] = i;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  // Make copy of input vector\n  for (auto& num : l) p.push_back(num);\n\
    \  // Now make vector of only positive numbers.\n  p.erase(std::remove_if(p.begin(),\
    \ p.end(), [](long n) {\n      return n < 0;\n    }), p.end());\n  // Return vector\
    \ of only positive numbers.\n  return p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpofssf1c6: /tmp/tmpofssf1c6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i = 0; i< l.size(); i++) {\n        if (l[i] > 0)\n    \
    \        res.push_back(l[i]);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i : l) {\n        if (i > 0)\n            pos.push_back(i);\n\
    \    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l;\n    for(long i: l) {\n        if(i>0) {\n            new_l.push_back(i);\n\
    \        }\n    }\n    return new_l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822641
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ new_l;\n  for (auto& x : l)\n    if (x >= 0)\n      new_l.push_back(x);\n  return\
    \ new_l;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvr9g8i94: /tmp/tmpvr9g8i94.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positives;\n    for (long &e : l) {\n        if (e > 0) {\n            positives.push_back(e);\n\
    \        }\n    }\n    return positives;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  // Traverse the vector to find positive numbers.\n  for (size_t i =\
    \ 0; i < l.size(); ++i) {\n    if (l[i] >= 0) {\n      res.push_back(l[i]);\n\
    \    }\n  }\n  // Return only positive numbers.\n  return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5aysogyb: /tmp/tmp5aysogyb.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    int\
    \ size = l.size();\n    std::vector<long> r;\n    long max_value = 0;\n    for\
    \ (int i = 0; i < size; i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    int count = 0;\n    for (int i = 0; i < size;\
    \ i++) {\n        if (l[i] > max_value) {\n            r.push_back(l[i]);\n  \
    \          count++;\n        }\n    }\n    if (count == 0) {\n        r.push_back(-max_value);\n\
    \    }\n    return r;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0g9qg66o: /tmp/tmp0g9qg66o.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822648
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        if (i > 0) ret.push_back(i);\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive(l);\n    for (long &i : positive)\n        if (i >= 0)\n          \
    \  i = i;\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph3ua09pd: /tmp/tmph3ua09pd.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5uk5yquy: /tmp/tmp5uk5yquy.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v(l);\n  for (int i = 0; i < v.size(); i++) {\n    if (v[i] >= 0) v[i] = v[i]\
    \ + 1;\n  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4r9eknhp: /tmp/tmp4r9eknhp.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    for (long e : l)\n        if (e > 0)\n            ret.push_back(e);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    p.reserve(l.size());\n    for (long i : l) {\n        if (i >= 0) p.push_back(i);\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5nnl4fdm: /tmp/tmp5nnl4fdm.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long e : l) {\n        if (e > 0) {\n            p.push_back(e);\n\
    \        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long x : l) {\n        if (x > 0) result.push_back(x);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i : l)\n        if (i > 0)\n            positive.push_back(i);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ >= 2);\n  std::vector<long> ret;\n  for (long i = 0; i < l.size(); i++) {\n\
    \    if (l[i] >= 0)\n      ret.push_back(l[i]);\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp34c6h7ki: /tmp/tmp34c6h7ki.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822649
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long n : l) {\n        if (n >= 0)\n            res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmps5fvymkq: /tmp/tmps5fvymkq.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    std::vector<long>::iterator it;\n    for (it = l.begin(); it\
    \ != l.end(); it++) {\n        if (*it > 0) {\n            positive.push_back(*it);\n\
    \        }\n    }\n    return positive;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res(l.size());\n  for (long i : l) {\n    if (i >= 0)\n      res[i] = i;\n \
    \ }\n  return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzb0lnttm: /tmp/tmpzb0lnttm.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res(l.size());\n    for (long i = 0; i < l.size(); ++i) res[i] = l[i] > 0 ?\
    \ l[i] : 0;\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgo7o89v7: /tmp/tmpgo7o89v7.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p(l.size());\n  for (long i : l)\n    p[std::find(std::begin(p), std::end(p),\
    \ i) - std::begin(p)] = i;\n  return p;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxfm9xmf4: /tmp/tmpxfm9xmf4.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long &i : l) {\n        if (i>0)\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822650
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p(l.size());\n    std::iota(p.begin(), p.end(), 0);\n    auto it = std::remove_if(p.begin(),\
    \ p.end(), [&](long n) {\n        return n > 0;\n    });\n    return std::move(std::unique(it,\
    \ p.end()) - p.begin());\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8h4s8unm.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8h4s8unm.cpp:10:21: error: could not convert \u2018std::move<long\
    \ int>(__gnu_cxx::operator-<long int*, std::vector<long int> >(std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(it, p.std::vector<long int>::end()), p.std::vector<long\
    \ int>::begin()))\u2019 from \u2018std::remove_reference<long int>::type\u2019\
    \ {aka \u2018long int\u2019} to \u2018std::vector<long int>\u2019\n   10 |   \
    \  return std::move(std::unique(it, p.end()) - p.begin());\n      |          \
    \  ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                  \
    \   |\n      |                     std::remove_reference<long int>::type {aka\
    \ long int}\n"
  stdout: ''
  timestamp: 1659822650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n   \
    \   positive.push_back(l[i]);\n    }\n  }\n  return positive;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (auto i : l)\n        if (i >= 0)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpl7lm7ycu: /tmp/tmpl7lm7ycu.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822650
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res(l);\n  for (long i = 0; i < res.size(); i++) {\n    if (res[i] <= 0) {\n\
    \      res.erase(res.begin() + i);\n      i--;\n    }\n  }\n  return res;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ p;\n    for (long i : l) {\n        if (i > 0) p.push_back(i);\n    }\n    return\
    \ p;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822637
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long x: l) {\n        if (x > 0)\n            v.push_back(x);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ temp(l.size());\n  for (long i = 0; i < l.size(); i++)\n    if (l[i] > 0)\n\
    \      temp[i] = l[i];\n  return temp;\n}\nint main() {\n    auto candidate =\
    \ get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbp425loo: /tmp/tmpbp425loo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for(long n: l)\n        if(n >= 0)\n            result.push_back(n);\n\
    \    return result;\n}\nint main() {\n    auto candidate = get_positive;\n   \
    \ assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5, (long)6})))\
    \ == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp44id44b: /tmp/tmpp44id44b.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8s0i9veq: /tmp/tmp8s0i9veq.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822642
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i : l)\n        if (i > 0)\n            positive.push_back(i);\n\
    \    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822649
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for (long i : l) {\n        if (i > 0)\n            result.push_back(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n    \
    \        v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ n(nl.size(), 0);\n    for (const auto &i : l) {\n        if (i > 0) {\n    \
    \        ++n[i - 1];\n        }\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3f5i54m0.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3f5i54m0.cpp:5:25: error: \u2018nl\u2019 was not declared\
    \ in this scope; did you mean \u2018n\u2019?\n    5 |     std::vector<long> n(nl.size(),\
    \ 0);\n      |                         ^~\n      |                         n\n"
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for (long i : l) {\n        if (i > 0)\n            ans.push_back(i);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive;\n  for (long i : l) {\n    if (i >= 0)\n      positive.push_back(i);\n\
    \  }\n  return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzu_b99qn: /tmp/tmpzu_b99qn.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i > 0) res.push_back(i);\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;\n\
    }\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i : l) {\n        if (i > 0)\n            pos.push_back(i);\n\
    \    }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822648
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive(l);\n  for (long i : positive) if (i <= 0) return positive;\n  std::sort(positive.begin(),\
    \ positive.end());\n  auto it = std::unique(positive.begin(), positive.end());\n\
    \  positive.erase(it, positive.end());\n  return positive;\n}\nint main() {\n\
    \    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp28jmf8wz: /tmp/tmp28jmf8wz.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n   auto\
    \ p = std::remove_if(l.begin(), l.end(), [](const long x){ return x >= 0; });\n\
    \   std::reverse(l.begin(), p);\n   return p;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1chdvm4j.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1chdvm4j.cpp:7:11: error: could not convert \u2018p\u2019\
    \ from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018std::vector<long int>\u2019\n    7 |    return p;\n      |        \
    \   ^\n      |           |\n      |           __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ p;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      p.push_back(l[i]);\n\
    \    }\n  }\n  return p;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ sort the vector\n    std::sort(l.begin(), l.end());\n\n    // Return the elements\
    \ that are positive\n    std::vector<long> out;\n    long pos = 0;\n    for (long\
    \ i : l)\n        if (i > pos) out.push_back(pos);\n        else      out.push_back(i);\n\
    \    return out;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzeyheb2o: /tmp/tmpzeyheb2o.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822651
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v;\n  for(int i = 0; i < l.size(); i++) {\n    if(l[i] > 0) {\n      v.push_back(l[i]);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822652
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    std::stack<long> st;\n    for (auto i : l) {\n        st.push(i);\n\
    \        while (st.size()) {\n            long curr = st.top();\n            st.pop();\n\
    \            if (curr > 0) {\n                ans.push_back(curr);\n         \
    \   } else {\n                if (ans.size())\n                    st.push(ans.back());\n\
    \                ans.pop_back();\n            }\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l)\n        if (i>0)\n            v.push_back(i);\n  \
    \  return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ TODO: Complete me!\n    return l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpehfr_x7k: /tmp/tmpehfr_x7k.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (int i=0; i<l.size(); i++) {\n        if(l[i]>0) {\n    \
    \        positive.push_back(l[i]);\n        }\n    }\n    return positive;\n}\n\
    int main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long &it: l){\n        if (it > 0){\n            res.push_back(it);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i : l)\n        if (i > 0)\n            pos.push_back(i);\n\
    \    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positive;\n    for (auto i : l) {\n        if (i > 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positive(l);\n  std::remove_copy_if(l.begin(), l.end(), std::back_inserter(positive),\n\
    \    [](long x) { return x >= 0; });\n  return positive;\n}\nint main() {\n  \
    \  auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1unqkbbl: /tmp/tmp1unqkbbl.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (auto &x : l)\n        if (x >= 0)\n            v.push_back(x);\n\
    \    return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqqyva985: /tmp/tmpqqyva985.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        if (i > 0)\
    \ res.push_back(i);\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  assert(l.size()\
    \ >= 2);\n  std::vector<long> res;\n  res.reserve(l.size());\n  for (auto &el\
    \ : l)\n    if (el >= 0)\n      res.push_back(el);\n  return res;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptqtiyjai: /tmp/tmptqtiyjai.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ res;\n  for(long i=0; i<l.size(); i++)\n    if(l[i] > 0)\n      res.push_back(l[i]);\n\
    \  return res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (long i : l) {\n        if (i >= 0) v.push_back(i);\n    }\n   \
    \ return v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx5yuey48: /tmp/tmpx5yuey48.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    for(auto i : l)\n    {\n        if(i > 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ out;\n    out.assign( l.begin(), l.end() );\n    std::sort(out.begin(), out.end());\n\
    \    return out;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqqnhz5mz: /tmp/tmpqqnhz5mz.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuifyh9v3: /tmp/tmpuifyh9v3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822653
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i > 0)\n            res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    //\
    \ We use unordered set for O(log n) algorithm.\n    std::unordered_set<long> positive;\n\
    \    for (long i : l)\n        positive.insert(i);\n    std::vector<long> res;\n\
    \    for (long i : l) {\n        if (positive.count(i)) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvrv0znc6: /tmp/tmpvrv0znc6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822654
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::set<long>\
    \ positive;\n    for (auto i : l)\n        if (i > 0) positive.insert(i);\n  \
    \  std::vector<long> res;\n    res.reserve(l.size());\n    for (auto i : l)\n\
    \        if (positive.find(i) != positive.end()) res.push_back(i);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ positives;\n    \n    // Initialize an empty vector to store result\n    positives.resize(l.size());\n\
    \    \n    // Insert each element of l into the vector\n    std::transform(l.begin(),\
    \ l.end(), positives.begin(), [](long x){return x >= 0; });\n    \n    return\
    \ positives;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8yh9wp2f: /tmp/tmp8yh9wp2f.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l(n);\n    for(size_t i = 0; i < n; i++) {\n        if (l[i] > 0) {\n  \
    \          new_l[i] = l[i];\n        }\n    }\n    return new_l;\n}\nint main()\
    \ {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7l_eow9z.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7l_eow9z.cpp:5:29: error: \u2018n\u2019 was not declared\
    \ in this scope\n    5 |     std::vector<long> new_l(n);\n      |            \
    \                 ^\n"
  stdout: ''
  timestamp: 1659822653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ v(l.size());\n  for (size_t i = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n\
    \      v[i] = l[i];\n    }\n  }\n  return v;\n}\nint main() {\n    auto candidate\
    \ = get_positive;\n    assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10}))) == (std::vector<long>({(long)5,\
    \ (long)3, (long)2, (long)3, (long)3, (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp51_ygjxu: /tmp/tmp51_ygjxu.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.assign(l);\n    std::sort(v.begin(), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    return v;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps33ktazi.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps33ktazi.cpp:6:15: error: no matching function for call\
    \ to \u2018std::vector<long int>::assign(std::vector<long int>&)\u2019\n    6\
    \ |     v.assign(l);\n      |               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmps33ktazi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:746:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::assign(std::vector<_Tp,\
    \ _Alloc>::size_type, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp,\
    \ _Alloc>::value_type = long int]\u2019\n  746 |       assign(size_type __n, const\
    \ value_type& __val)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:746:7:\
    \ note:   candidate expects 2 arguments, 1 provided\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:765:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> void std::vector<_Tp,\
    \ _Alloc>::assign(_InputIterator, _InputIterator) [with _InputIterator = _InputIterator;\
    \ <template-parameter-2-2> = <template-parameter-1-2>; _Tp = long int; _Alloc\
    \ = std::allocator<long int>]\u2019\n  765 |  assign(_InputIterator __first, _InputIterator\
    \ __last)\n      |  ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:765:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmps33ktazi.cpp:6:15:\
    \ note:   candidate expects 2 arguments, 1 provided\n    6 |     v.assign(l);\n\
    \      |               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7"
  stdout: ''
  timestamp: 1659822654
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(auto i:l)\n        if(i>0)\n            v.push_back(i);\n    return\
    \ v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> ret;\n  // Find the first positive number.\n\
    \  for (long i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      break;\n  }\n\
    \  for (long i = 0; i < l.size(); i++) {\n    ret.append(l[i]);\n  }\n  return\
    \ ret;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24dpfeb7.cpp: In function \u2018std::vector<long int> get_positive(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp24dpfeb7.cpp:13:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018append\u2019\n   13 |     ret.append(l[i]);\n\
    \      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1659822654
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n\tstd::vector<long>\
    \ v;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) v.push_back(l[i]);\n\
    \t}\n\treturn v;\n}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822654
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    for(long i: l) {\n        if(i>0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ retval;\n    retval.push_back(l[0]);\n    for (auto i : l) {\n        if (i\
    \ > 0) retval.push_back(i);\n    }\n    return retval;\n}\nint main() {\n    auto\
    \ candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
    \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
    \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9,\
    \ (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3w0ragor: /tmp/tmp3w0ragor.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)-1,
    (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,
    (long)6}))'' failed.

    '
  stdout: ''
  timestamp: 1659822654
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ pos;\n    for(const auto &i : l) {\n        if(i > 0) pos.push_back(i);\n  \
    \  }\n    return pos;\n}\nint main() {\n    auto candidate = get_positive;\n \
    \   assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822654
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n    std::vector<long>\
    \ new_l;\n    for (const auto& e : l) {\n        if (e > 0) {\n            new_l.push_back(e);\n\
    \        }\n    }\n    return new_l;\n}\nint main() {\n    auto candidate = get_positive;\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
    \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n  std::vector<long>\
    \ positives;\n  positives.reserve(l.size());\n  for (int i = 1; i < l.size();\
    \ i++) {\n    if (l[i] > 0) {\n      positives.push_back(l[i]);\n    }\n  }\n\
    \  return positives;\n}\nint main() {\n    auto candidate = get_positive;\n  \
    \  assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)4, (long)5,\
    \ (long)6}))) == (std::vector<long>({(long)4, (long)5, (long)6})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,\
    \ (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,\
    \ (long)9, (long)123, (long)1})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp80b8o8rx: /tmp/tmp80b8o8rx.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1,
    (long)-10}))) == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3,
    (long)9, (long)123, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1659822655
