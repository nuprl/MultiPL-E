name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with -\nstd::string fix_spaces(std::string\
  \ text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["  std::string res = text;\n  int prev_spaces = -1;\n  for (auto c :\
    \ text) {\n    if (isspace(c)) {\n      if (prev_spaces >= 2) \n      {\n    \
    \    res = res.replace(prev_spaces, 0, \"-\");\n      }\n      prev_spaces = 0;\n\
    \    } else {\n      prev_spaces++;\n    }\n  }\n  return res;", "    size_t pos\
    \ = 0;\n    while (pos < text.size()) {\n        if (text[pos] == ' ')\n     \
    \       pos = text.find(' ', pos + 1);\n        else if (text[pos] == ' ')\n \
    \           pos = text.find(' ', pos + 1);\n        else if (text[pos] == '_')\n\
    \            pos = text.find('_', pos + 1);\n        else if (text[pos] == '_')\n\
    \            pos = text.find('_', pos + 1);\n        else\n            break;\n\
    \    }\n    std::string result = text;\n    size_t prev = 0, next = 0;\n    while\
    \ (pos < text.size()) {\n        if (text[pos] == ' ')\n            prev = pos;\n\
    \        else if (text[pos] == '_')\n            next = pos;\n        else if\
    \ (next - prev > 2) {\n            result += text.substr(prev, next - prev);\n\
    \            result += '-';\n            prev = pos + 1;\n        }\n        else\
    \ {\n            result += text.substr(prev, next - prev);\n        }\n      \
    \  pos = text.find(' ', pos + 1);\n    }\n    return result;", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    text.erase(std::replace_if(text.rbegin(),\
    \ text.rend(), ::isspace, ' '), text.end());\n    return text;", "    // Code\
    \ is very similar to one in fix_underscores\n    // only instead of underscores,\
    \ spaces are replaced by hyphen.\n    std::string out = text;\n    for (int i\
    \ = 0; i < out.length(); i++) {\n        if (out[i] == ' ') {\n            if\
    \ (i + 1 < out.length() && out[i + 1] == ' ') {\n                // Replace two\
    \ spaces with hyphen.\n                out += \"-\";\n            } else {\n \
    \               // Replace space with underscore.\n                out += \"_\"\
    ;\n            }\n        }\n    }\n    return out;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), '  ', '-');\n\
    \    return text;", "    // replace all spaces with underscore\n    std::string\
    \ text2 = text;\n    std::replace(text2.begin(), text2.end(), ' ', '_');\n\n \
    \   // if there are more than 2 consecutive spaces, \n    // then replace all\
    \ consecutive spaces with -\n    if (std::count(text2.begin(), text2.end(), '\
    \ ') > 2) {\n        text2 = std::regex_replace(text2, std::regex(\"[ ]{2,}\"\
    ), \" -\");\n    }\n\n    return text2;", "    // Write your code here.\n    \n\
    \    // Find out how many spaces are there in the text\n    int space = text.find(\"\
    \ \");\n    \n    // If no spaces then return text unchanged\n    if (space ==\
    \ std::string::npos) return text;\n    \n    // If there are spaces then find\
    \ out how many times a space is repeated\n    int space_count = 1;\n    while\
    \ (space != text.npos) {\n        space = text.find(\" \", space + 1);\n     \
    \   space_count++;\n    }\n    \n    // If there is only one space then return\
    \ text unchanged\n    if (space_count == 1) return text;\n    \n    // If there\
    \ are two or more spaces then return text with spaces replaced with -\n    std::string\
    \ new_text = text;\n    for (int i = 0; i < space_count; i++) {\n        new_text.replace(space,\
    \ space_count, \"-\");\n    }\n    return new_text;", "  int n = text.size();\n\
    \  text.resize(2*n); \n  for(int i = 0; i < n; i++) {\n    if(text[i] == ' ')\
    \ text[i] = '_';\n    else if(text[i] == ' ' && text[i+1] == ' ') text[i] = '-';\n\
    \  }\n  return text;", "    int n = text.length();\n    bool any_space = true;\n\
    \    for(int i = 0; i < n; i++){\n        if(text[i] == ' '){\n            if(any_space){\n\
    \                text[i] = '_';\n                any_space = false;\n        \
    \    }\n            else{\n                text[i] = '-';\n            }\n   \
    \     }\n        else{\n            any_space = true;\n        }\n    }\n    return\
    \ text;", "    // Your code here\n    std::string result = text;\n    for(int\
    \ i = 0; i < result.length(); i++){\n        if(result[i] == ' '){\n         \
    \   result += '_';\n        }\n        else if(result.substr(i, 2) == \" _ \"\
    ){\n            result += \"-\";\n            i = i + 2;\n        }\n    }\n \
    \   return std::move(result);", "    // Step 1: replace all spaces with _\n  \
    \  size_t index = 0, len = text.length();\n    std::string spaces = \"\";\n  \
    \  while (index < len) {\n        if (text[index] == ' ') {\n            spaces\
    \ += \"_\";\n        }\n        index++;\n    }\n    // Step 2: replace all spaces\
    \ with -\n    size_t index2 = 0, len2 = spaces.length();\n    std::string dashes\
    \ = \"\";\n    while (index2 < len2) {\n        if (spaces[index2] == ' ') {\n\
    \            dashes += \"-\";\n        }\n        index2++;\n    }\n    // Step\
    \ 3: replace spaces between dash \n    size_t index3 = 0, len3 = dashes.length();\n\
    \    std::string fixes = \"\";\n    while (index3 < len3) {\n        if (dashes[index3]\
    \ == '-') {\n            fixes += \" \";\n        }\n        index3++;\n    }\n\
    \    // Step 4: replace spaces inside _ \n    size_t index4 = 0, len4 = fixes.length();\n\
    \    std::string fixed = \"\";\n    while (index4 < len4) {\n        if (fixes[index4]\
    \ == '_') {\n            fixed += \" \";\n        }\n        index4++;\n    }\n\
    \    // Step 5: replace space before and after _ \n    size_t index5 = 0, len5\
    \ = fixed.length();\n    std::string fix1 = \"\";\n    while (index5 < len5) {\n\
    \        if (fixed[index5] == '_') {\n            fix1 += \" \";\n        }\n\
    \        index5++;\n    }\n    size_t index6 = 0, len6 = fix1.length();\n    std::string\
    \ fix2 = \"\";\n    while (index6 < len6) {\n        if (fixed[index6] == '_')\
    \ {\n            fix2 += \"_\";\n        }\n        index6++;\n    }\n    // Step\
    \ 6: replace multiple _ by single _ \n    size_t index7 = 0, len7 = fix2.length();\n\
    \    std::string fixed2 = \"\";\n    while (index7 < len7) {\n        if (fix2[index7]\
    \ == '_') {\n            fixed2 += \"_\";\n        }\n        index7++;\n    }\n\
    \    // Step 7: replace multiple _ by single _ \n    size_t index8 = 0, len8 =\
    \ fixed2.length();\n    std::string fixed3 = \"\";\n    while (index8 < len8)\
    \ {\n        if (fixed2[index8] == '_') {\n            fixed3 += \"_\";\n    \
    \    }\n        index8++;\n    }\n    std::string result = fixed + fix1 + fix2\
    \ + fixed3;\n    // Step 9: replace multiple - by single - \n    size_t index9\
    \ = 0, len9 = fixed3.length();\n    std::string fixed4 = \"\";\n    while (index9\
    \ < len9) {\n        if (fixed3[index9] == '-') {\n            fixed4 += \"-\"\
    ;\n        }", "    std::string fixed_text;\n    int index = 0;\n    bool flag\
    \ = false;\n    bool consecutive = false;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        char ch = text[i];\n        if (ch == ' ') {\n            flag\
    \ = true;\n            fixed_text += '_';\n        } else if (flag) {\n      \
    \      fixed_text += ch;\n        } else if (ch != ' ' && ch == ' ') {\n     \
    \       flag = true;\n            consecutive = true;\n            fixed_text\
    \ += '_';\n        } else if (ch != ' ' && ch != ' ') {\n            flag = false;\n\
    \        }\n    }\n    if (fixed_text.size() > 2) {\n        index = 2;\n    \
    \    flag = false;\n        for (int i = 0; i < text.size(); i++) {\n        \
    \    char ch = text[i];\n            if (ch == ' ' && consecutive) {\n       \
    \         flag = true;\n                fixed_text += '-';\n            } else\
    \ if (ch == ' ') {\n                flag = true;\n                fixed_text +=\
    \ '_';\n            } else if (ch != ' ') {\n                flag = false;\n \
    \           }\n        }\n    }\n    return fixed_text;", "  for(int i = 0; i\
    \ < text.size(); i++)\n  {\n    if(text[i] == ' ')\n      text[i] = '_';\n   \
    \ else if (text[i] == ' ')\n      text[i] = '-';\n  }\n  \n  std::string output;\n\
    \  output = text;\n  \n  for(int i = 1; i < text.size(); i++)\n  {\n    if(text[i]\
    \ == ' ')\n    {\n      if(text[i-1] == ' ' && text[i+1] == ' ')\n      {\n  \
    \      text[i-1] = '_';\n        text[i+1] = '-';\n      }\n    }\n  }\n  \n \
    \ return output;", "    std::size_t found_spaces = 0;\n    for (const char c :\
    \ text) {\n        if (c == ' ') {\n            if (found_spaces == 2) {\n   \
    \             text = text.substr(0, text.length()-1);\n            }\n       \
    \     found_spaces++;\n        }\n        else {\n            found_spaces = 0;\n\
    \        }\n    }\n    text = text.replace(\" \", \"-\");\n    if (text.find(\"\
    \  \") != std::string::npos) {\n        text = text.replace(\"  \", \"-\");\n\
    \    }\n    return text;", "    bool first = true;\n    for (auto c : text) {\n\
    \        if (c == ' ')\n            if (first) {\n                first = false;\n\
    \            } else {\n                text.replace(text.find_first_of(c), 1,\
    \ 1, '-');\n                text.replace(text.find_last_of(c), 1, 1, '-');\n \
    \           }\n    }\n    return text;", "   std::string::size_type pos = 0;\n\
    \   while (pos < text.size()) {\n      pos = text.find(' ', pos);\n      if (pos\
    \ == std::string::npos) return text;\n      text.insert(pos, \"-\");\n   }\n \
    \  return text;", "    std::replace(text.begin(), text.end(), ' ', '_');\n   \
    \ std::replace(text.begin(), text.end(), ' ', '-');\n\n    std::string res;\n\
    \    int pos = 0;\n    int len = text.length();\n    while (pos < len) {\n   \
    \     if (text[pos] == ' ') {\n            if (pos < len && text[pos + 1] == '\
    \ ') {\n                res += '-';\n                pos += 2;\n            }\
    \ else {\n                res += '_';\n                pos++;\n            }\n\
    \        } else {\n            res += text[pos];\n        }\n        pos++;\n\
    \    }\n    return res;", "    // Code for string replacement goes here\n    for\
    \ (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n     \
    \       if (text.substr(i, 2) == \" \") {\n                text.erase(i, 1);\n\
    \                i = i - 2;\n            } else {\n                text.insert(i,\
    \ '-');\n                i = i + 1;\n            }\n        }\n    }\n    return\
    \ text;", "    size_t len = text.length();\n    std::string fix_spaces;\n    size_t\
    \ counter = 0;\n    for(int i = 0; i < len; i++) {\n        if(text[i] == ' ')\
    \ {\n            fix_spaces += \"_\";\n            counter += 1;\n        } else\
    \ {\n            fix_spaces += text[i];\n        }\n        if(counter > 2) {\n\
    \            fix_spaces += \"_\";\n            counter = 1;\n        }\n    }\n\
    \    return fix_spaces;", "    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    \n    for (int i = 0; i <= text.size()-1; i++) {\n        if (text[i] ==\
    \ ' ' && text[i+1] == ' ') {\n            std::replace(text.begin()+i+1, text.end(),\
    \ ' ', '_');\n        }\n    }\n    \n    return text;", "  assert(text.size()\
    \ != 0);\n  \n  std::string ans = \"\";\n  for (auto c: text) {\n    if (c ==\
    \ ' ')\n      ans += \"_\";\n    else if (c == ' ')\n      ans += \"-\";\n   \
    \ else\n      ans += c;\n  }\n  return ans;", "    // your code goes here\n  \
    \  \n    int start = 0;\n    int end = text.length() - 1;\n    while(start < end\
    \ && !(text[start] == ' ' && text[end] == ' '))\n    {\n        start++;\n   \
    \ }\n    while(end > start && !(text[end] == ' ' && text[start] == ' '))\n   \
    \ {\n        end--;\n    }\n    \n    if(start == end)\n    {\n        return\
    \ text;\n    }\n    while(start < end && text[start] == ' ')\n    {\n        start++;\n\
    \    }\n    while(end > start && text[end] == ' ')\n    {\n        end--;\n  \
    \  }\n    if(start == end)\n    {\n        return text;\n    }\n    while(start\
    \ < end && (text[start] == ' ' || text[start] == '\\t'))\n    {\n        start++;\n\
    \    }\n    while(end > start && (text[end] == ' ' || text[end] == '\\t'))\n \
    \   {\n        end--;\n    }\n    \n    int i = 0;\n    while(i < start)\n   \
    \ {\n        text[i] = '_';\n        i++;\n    }\n    while(i < end)\n    {\n\
    \        text[i] = '_';\n        i++;\n    }\n    \n    while(i < text.length())\n\
    \    {\n        if(text[i] == ' ')\n        {\n            while(i < text.length()\
    \ && text[i] == ' ')\n            {\n                i++;\n            }\n   \
    \         while(i < text.length() && text[i] == ' ')\n            {\n        \
    \        text[i] = '-';\n                i++;\n            }\n        }\n    \
    \    i++;\n    }\n    \n    return text;", "   size_t pos = 0;\n   while (pos\
    \ < text.size()) {\n      // find space\n      size_t space_pos = text.find(\"\
    \  \", pos);\n      if (space_pos != std::string::npos) {\n         // replace\
    \ spaces with underscores\n         text.replace(space_pos, 2, \"_\");\n     \
    \ }\n      else if (space_pos == std::string::npos) {\n         // if space is\
    \ missing then append a _\n         text += \"_\";\n      }\n      else {\n  \
    \       // if more than one space then replace spaces with -\n         text.replace(space_pos,\
    \ 2, \"-\");\n      }\n      // update pos for finding space in next iteration\n\
    \      pos = space_pos + 2;\n   }\n   // return the new string\n   return text;",
  "    std::replace( text.begin(), text.end(), ' ', '_');\n    if (text.size() >=\
    \ 2)\n        std::replace( text.begin(), text.end(), ' ', '-');\n    return text;",
  "\tstd::string result = text;\n\t// Go through every character\n\tfor(int i = 0;\
    \ i < result.size(); i++) {\n\t\t// If current character is a space, add an underscore\n\
    \t\tif(result[i] == ' ') {\n\t\t\tresult += '_';\n\t\t}\n\t\t// If current character\
    \ is not a space, \n\t\t// and if the next character is a space,\n\t\t// then\
    \ add an underscore\n\t\telse if(result[i] != ' ' && result[i + 1] == ' ') {\n\
    \t\t\tresult += '_';\n\t\t}\n\t\t// Otherwise, if the current character is not\
    \ a space, \n\t\t// and if the next character is not a space,\n\t\t// then replace\
    \ the current character with -\n\t\telse if(result[i] != ' ' && !(result[i + 1]\
    \ == ' ')) {\n\t\t\tresult += '-';\n\t\t}\n\t}\n\treturn result;", "  int i=0;\n\
    \  int j=0;\n  bool cont = false;\n  bool end_space = false;\n  while (i != text.length())\
    \ {\n    if (!cont && !end_space) {\n      if (text[i] == ' ') {\n        cont\
    \ = true;\n        i++;\n      }\n    } else {\n      if (text[i] == ' ') {\n\
    \        end_space = true;\n        i++;\n      }\n      if (cont) {\n       \
    \ text[j] = text[i];\n        cont = false;\n        i++;\n        continue;\n\
    \      } else {\n        cont = false;\n        end_space = false;\n      }\n\
    \    }\n    text[j] = text[i];\n    i++;\n    j++;\n  }\n  return text;", "  \
    \  // Find number of spaces.\n    size_t spaces = 0, i = 0;\n    while (i < text.length())\
    \ {\n        if (text[i] == ' ') spaces++;\n        ++i;\n    }\n    // Resize\
    \ the string if there are less than two spaces\n    if (spaces <= 1) return text;\n\
    \    // If there are more than two spaces, fix it\n    std::string new_text;\n\
    \    new_text.resize(text.length());\n    // Replace spaces with underscores\n\
    \    for (size_t i = 0; i < new_text.length(); ++i) {\n        if (text[i] ==\
    \ ' ') new_text[i] = '_';\n    }\n    // Replace more than two spaces with -\n\
    \    for (size_t i = 1; i < spaces; ++i) {\n        new_text[i] = '-';\n    }\n\
    \    return new_text;", "    std::string rev = \"\";\n    size_t spaces = 0;\n\
    \    size_t count = 0;\n    for (auto c: text) {\n        if (c == ' ') {\n  \
    \          spaces++;\n            if (count != 0) {\n                count = -1;\n\
    \            }\n        } else if (c == ' ' && spaces == 2) {\n            count\
    \ = -1;\n            spaces = 0;\n        }\n        rev += c;\n    }\n    return\
    \ rev;", "    size_t spaces_cnt = 0;\n    size_t space_pos = 0;\n    for (size_t\
    \ i = 0; i != text.length(); ++i) {\n        if (text[i] == ' ') {\n         \
    \   spaces_cnt++;\n            if (spaces_cnt == 2) {\n                space_pos\
    \ = i;\n                spaces_cnt = 0;\n            } else if (spaces_cnt > 2)\
    \ {\n                for (size_t j = space_pos; j < i; ++j) {\n              \
    \      text[j] = '-';\n                }\n                spaces_cnt -= 2;\n \
    \               space_pos = i;\n            }\n        }\n    }\n    return text;",
  "    text.erase(std::remove_if(text.begin(), text.end(), ::isspace), text.end());\
    \ \n    text.erase(std::find_if(text.begin(), text.end(), \n                 \
    \           [](char c) {return (c == ' ') || (c == 0x200B); }), \n           \
    \   text.end()); \n    text.erase(std::find_if(text.begin(), text.end(), \n  \
    \                          [](char c) {return ((c == ' ') || (c == 0x200B)) &&\
    \ (c != 0x200B); }), \n              text.end()); \n    if (text.size() > 2) text\
    \ = text.replace(text.begin(), text.begin() + 2, std::string(\" \"));\n    return\
    \ text;", "    std::string res = text;\n    res = res.replace( \" \",\"_\" );\n\
    \    int count = 0; \n    for(auto ch : res)\n    {\n        if (ch == ' ')\n\
    \            count++; \n        else if ( count == 2 )\n            res=res.replace(\"\
    \ \",\"-\");\n    }\n    return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    int i = 0;\n    while (i < res.size()) {\n  \
    \      if (res[i] == ' ')\n            i++;\n        else if (res[i] == '_') {\n\
    \            if (i + 1 < res.size() && res[i + 1] == '_') {\n                std::replace(res.begin()\
    \ + i, res.end(), '_', '-');\n                i++;\n            } else {\n   \
    \             res += '-';\n                i++;\n            }\n        }\n  \
    \  }\n    return res;", "    std::string s = text;\n    // Replace spaces with\
    \ underscores\n    std::replace(s.begin(), s.end(), ' ', '_');\n    // Replace\
    \ consecutive spaces with -\n    size_t pos = 0;\n    while (pos != std::string::npos)\
    \ {\n        pos = s.find(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            s.insert(pos, \"-\");\n        }\n    }\n    return s;", "  \
    \  int n = text.length();\n    std::string res;\n    std::string buf;\n    bool\
    \ replaced = false;\n    for (int i = 0; i < n; i++) {\n        if (text[i] ==\
    \ ' ') {\n            if (!replaced) {\n                res = buf + text[i];\n\
    \                replaced = true;\n            }\n            buf = \"\";\n  \
    \      } else {\n            buf += text[i];\n        }\n    }\n    return res;",
  "    size_t len = text.size();\n    std::string res;\n    for (size_t i = 0; i <\
    \ len; i++) {\n        if (text[i] == ' ') {\n            res += '_';\n      \
    \  } else {\n            res += text[i];\n        }\n    }\n    res.erase(std::remove(std::begin(res),\
    \ std::end(res), ' '), std::end(res)); // remove trailing space\n    if (res.size()\
    \ > 2) {\n        for (size_t i = 0; i < res.size(); i++) {\n            if (res[i]\
    \ == ' ') {\n                res[i] = '-';\n            }\n        }\n    }\n\
    \    return res;", "    for(int i = 0; i < text.length(); i++) {\n        if(text[i]\
    \ == ' ')\n            text[i] = '_'; \n        else if (text[i] == \" \" && text.substr(i\
    \ + 1, 2) == \" \") {\n            text[i] = '-';\n        }\n    }\n    return\
    \ text;", "    // Write your code here\n    text = std::regex_replace(text, std::regex(\"\
    \\\\s+\"), std::string(\"-\"));\n    text = std::regex_replace(text, std::regex(\"\
    \\\\s{2,}\"), std::string(\"_\"));\n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), '  ', ' ');\n\
    \    std::replace(text.begin(), text.end(), '  ', ' ');\n    return text;", " \
    \   // your code goes here\n    size_t pos = 0;\n    for(;pos < text.size();pos++)\n\
    \    {\n        size_t length = text[pos] - ' ';\n        while(length >= 3)\n\
    \        {\n            pos = text.find(\" \", pos + 1);\n            text.insert(pos,\
    \ \"-\");\n            length -= 2;\n        }\n    }\n    return text;", "  int\
    \ i, j = 0, flag = 0;\n  for (i = 0, j = 0, flag = 0; text[i] != '\\0'; ++i) {\n\
    \    if (text[i] == ' ') {\n      flag = 1;\n    } else if (flag) {\n      text[j++]\
    \ = text[i];\n      flag = 0;\n    } else if (text[i] == ' ' && text[i + 1] ==\
    \ ' ') {\n      text[j++] = text[i];\n      text[j++] = text[i + 1];\n      i\
    \ += 2;\n    } else {\n      text[j++] = text[i];\n    }\n  }\n  if (flag) {\n\
    \    text[j] = '-';\n  }\n  text[j] = '\\0';\n  return text;", "    size_t pos\
    \ = 0;\n    size_t found = 0;\n    do {\n        pos = text.find(' ', pos);\n\
    \        found = text.find(' ', pos);\n        if (pos == std::string::npos) {\n\
    \            text = text + \"_\";\n            found = text.size() - 1;\n    \
    \    } else {\n            text = text.substr(0, pos) + \"_\" + text.substr(pos\
    \ + 1);\n        }\n    } while (found != std::string::npos);\n    return text;",
  "    int i = 1;\n    while (i <= text.length()) {\n        if (text.at(i) == ' ')\
    \ {\n            text.at(i) = '_';\n            ++i;\n        }\n        else\
    \ if (text.at(i-1) == ' ') {\n            text.at(i-1) = '-';\n            ++i;\n\
    \        }\n        else if (text.at(i-1) != text.at(i)) {\n            ++i;\n\
    \        }\n    }\n    return text;", "    std::string out = text;\n    for (auto\
    \ c : text) {\n        if (c == ' ') {\n            if (out != text) {\n     \
    \           out += '_';\n            }\n        } else {\n            out += c;\n\
    \        }\n    }\n    if (out.find_first_not_of(\" \") == std::string::npos)\
    \ {\n        return out;\n    }\n    for (auto i = 0; i < out.size(); ++i) {\n\
    \        if (out.at(i) != ' ') {\n            out.at(i) = '_';\n        }\n  \
    \  }\n    return out;", "  // Count how many spaces are in text\n  int spaces\
    \ = text.find_first_not_of(\" \");\n  // If there are no spaces, return text\n\
    \  if (spaces == std::string::npos) return text;\n  \n  // If there are at least\
    \ 2 consecutive spaces, \n  // then replace all consecutive spaces with -\n  if\
    \ (spaces > 0 && text.find_first_of(\" \", spaces + 1) != std::string::npos) {\n\
    \    for (int i = 0; i < spaces; i++) {\n      text.erase(text.begin() + i, text.begin()\
    \ + i + 1);\n    }\n  }\n  \n  // Replace all spaces with underscores\n  text\
    \ = text.replace(\" \", \"_\");\n\n  return text;", "    std::string output =\
    \ text;\n    for(auto &c:output) {\n        c = tolower(c);\n        if (c.isalnum()\
    \ || c == '_')\n            continue;\n        \n        size_t pos = 0;\n   \
    \     while((pos = output.find(\" \", pos)) != std::string::npos)\n          \
    \  output.replace(pos, 2, \" \");\n        \n        pos = 0;\n        while((pos\
    \ = output.find(\" \", pos)) != std::string::npos)\n            output.replace(pos,\
    \ 1, \"-\");\n    }\n    \n    return output;", "    int spaces = text.find_first_of(\"\
    \ \");\n    for (int i = 0; i < spaces; i++) {\n        text.erase(text.begin()\
    \ + i);\n    }\n    spaces = text.find_last_of(\" \");\n    for (int i = spaces\
    \ + 1; i < text.size(); i++) {\n        text.erase(text.begin() + i);\n    }\n\
    \    std::string result = text;\n    \n    int i = result.find(\"  \");\n    while(i\
    \ != result.npos) {\n        result.insert(result.begin() + i, \"-\");\n     \
    \   i += 2;\n        i = result.find(\"  \", i);\n    }\n    \n    return result;",
  "    std::string fixed_text = text;\n    std::replace(fixed_text.begin(), fixed_text.end(),\
    \ ' ', '_');\n    // std::replace(fixed_text.begin(), fixed_text.end(), '_', '\
    \ ');\n    std::size_t n = fixed_text.size();\n    if (n >= 2 && n%2 == 0) {\n\
    \        std::size_t k = 0;\n        std::size_t j = 0;\n        while (k < n\
    \ && j < n) {\n            std::size_t next_space = fixed_text[k] == ' ' ? k +\
    \ 1 : 0;\n            std::size_t prev_space = fixed_text[j] == ' ' ? j : n -\
    \ 1;\n            fixed_text[j] = std::tolower(fixed_text[j]);\n            fixed_text[j]\
    \ = std::toupper(fixed_text[j]);\n            j = next_space;\n            k =\
    \ prev_space;\n        }\n    }\n    return fixed_text;", "   \n   // Step 1\n\
    \   std::replace(text.begin(), text.end(), ' ', '_');\n   \n   // Step 2\n   std::replace(text.begin(),\
    \ text.end(), ' ', '-');\n   \n   // Step 3\n   std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n   \n   // Step 4\n   std::replace(text.begin(), text.end(), '\
    \ ', '_');\n   \n   // Step 5\n   std::replace(text.begin(), text.end(), '  ',\
    \ '-');\n   \n   // Step 6\n   std::replace(text.begin(), text.end(), ' ', '_');\n\
    \   \n   return text;", "    text.erase(std::remove_if(text.begin(), text.end(),\
    \ ::isspace), text.end());\n    text.erase(std::remove_if(text.begin(), text.end(),\
    \ ::ispunct), text.end());\n    text.erase(std::remove_if(text.begin(), text.end(),\
    \ ::isdigit), text.end());\n    text.erase(std::remove_if(text.begin(), text.end(),\
    \ ::isupper), text.end());\n\n    std::string fixed_text;\n    int n = 0, k =\
    \ 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' '){\n\
    \            if (k == 0){\n                fixed_text += text[i];\n          \
    \      n = 1;\n                k++;\n            }\n            else {\n     \
    \           if (k == 1){\n                    fixed_text += '-';\n           \
    \         n = 1;\n                    k++;\n                }\n              \
    \  else {\n                    fixed_text += '_';\n                    n++;\n\
    \                    k++;\n                }\n            }\n        }\n     \
    \   else {\n            if (k == 1){\n                fixed_text += text[i];\n\
    \                n = 1;\n                k++;\n            }\n            else\
    \ {\n                fixed_text += text[i];\n                n++;\n          \
    \      k++;\n            }\n        }\n    }\n    return fixed_text;", "    std::replace_if(text.begin(),\
    \ text.end(), std::isspace, \" _\");\n    std::replace_if(text.begin(), text.end(),\
    \ [&text](char c) { return std::isspace(c); }, \" -\");\n    return text;", " \
    \   int i = 0;\n    int j = text.size() - 1;\n    bool hasSpace = false;\n   \
    \ while (i< j) {\n        if(isspace(text[i])) i++;\n        else if (isspace(text[j]))\
    \ j--;\n        else {\n            if (hasSpace == false) {\n               \
    \ text[i] = '_';\n                hasSpace = true;\n            }\n          \
    \  else if (hasSpace == true) {\n                text[i] = '-';\n            }\n\
    \            i++;\n            j--;\n        }\n    }\n    return text;", "  //\
    \ Your code here\n  bool flag;\n  std::replace_if(text.begin(), text.end(), [](char\
    \ c) {\n    return c==' '? false : true;\n  }, '_');\n  flag=false;\n  for(int\
    \ i=0;i<text.size()-1;i++) {\n    if(text[i]==' ' && text[i+1]==' ') {\n     \
    \ if(flag) {\n        text.replace(i,2,\"-\");\n        flag=false;\n        i=-1;\n\
    \      }\n    } else {\n      flag=true;\n    }\n  }\n  return text;", "    //\
    \ your code goes here\n    size_t len = text.length();\n    size_t prev = 0, pos;\n\
    \    std::string rev_text;\n    for(int i=0; i < len; ++i){\n        pos = i;\n\
    \        while(pos < len && text[pos] == ' '){\n            ++pos;\n        }\n\
    \        if(pos != i){\n            rev_text.append(text.begin() + prev, text.begin()\
    \ + pos);\n            rev_text.push_back('_');\n            prev = pos = i;\n\
    \        }\n    }\n    rev_text.append(text.begin() + prev, text.end());\n   \
    \ rev_text.resize(len);\n    return rev_text;", "    std::string ans = text;\n\
    \    // find length of string\n    size_t len = ans.length();\n    // replaces\
    \ spaces with underscore\n    ans.replace(len - 1, 1, \" \");\n    // if the string\
    \ has more than two consecutive spaces,\n    // then replaces all consecutive\
    \ spaces with -\n    if (ans.size() > 2 && ans[ans.size() - 1] == ' ') {\n   \
    \     ans.replace(0, ans.size() - 1, \" -\");\n    }\n    // returns fixed string\n\
    \    return ans;", "    std::string temp = \"\";\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            temp += \"_\";\n        }\n\
    \    }\n    temp = std::regex_replace(temp, std::regex(\" +\"), \"\");\n    temp\
    \ = std::regex_replace(temp, std::regex(\"  +\"), \"-\");\n    return temp;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::string::size_type\
    \ prev = text.find_first_not_of(\" \\t\");\n    if (prev == std::string::npos)\
    \ {\n        prev = text.size();\n    }\n    prev = text.find_first_not_of(\"\
    \ \\t\", prev);\n    if (prev == std::string::npos) {\n        prev = text.size();\n\
    \    }\n    for (auto it = text.begin(); prev != std::string::npos; prev = it.end())\
    \ {\n        if (text[prev] == '_') {\n            it[prev] = '-';\n        }\n\
    \    }\n    return text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[0] == ' ' && s[s.size() - 1]\
    \ == ' ') {\n        s.replace(s.size() - 1, s.size() - 1, ' ');\n    }\n    if\
    \ (s[0] == '_' && s.size() > 1 && s[1] == '_') {\n        s.replace(s.size() -\
    \ 2, s.size() - 1, ' ');\n    }\n    return s;", "\tstd::string result = text;\n\
    \tfor(unsigned int i=0;i<text.length();i++) {\n\t\tif(text[i]==' ') {\n\t\t\t\
    result = result.replace(i, i+1, \"_\");\n\t\t\tif(i+1 < text.length() && (text[i+1]=='\
    \ ' || text[i+1]=='.')) {\n\t\t\t\tresult = result.replace(i, i+1, \"-\");\n\t\
    \t\t}\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;", "    std::string s = text;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n      \
    \      s[i] = '-';\n        }\n    }\n    return s;", "    // Find length of text\n\
    \    int lgth = text.length();\n    // Create new string array\n    std::string\
    \ new_str = \"\";\n    // Iterate through all chars\n    for (int i = 0; i < lgth;\
    \ i++) {\n        // If char is a space\n        if (text[i] == ' ') {\n     \
    \       // Add underscore\n            new_str += \"_\";\n        }\n        //\
    \ If char is not space\n        else {\n            // Add char\n            new_str\
    \ += text[i];\n        }\n    }\n    // If string has more than 2 consecutive\
    \ spaces\n    if (new_str.find(\"___\") > new_str.find(\"__\")) \n        new_str\
    \ = new_str.replace(\"___\", \"-\");\n    // Return string\n    return new_str;",
  "    std::string res = \"\";\n    for(auto it = text.cbegin(); it != text.cend();\
    \ it++) {\n        if (*it == ' ') {\n            res += \"_\";\n        } else\
    \ {\n            res += *it;\n        }\n    }\n    return res;", "        std::string\
    \ output = text;\n        output = output.replace(\" \", \"_\");\n        output\
    \ = output.replace(\"--\", \"_\");\n        output = output.replace(\" \", \"\
    -\");\n        output = output.replace(\" \", \"_\");\n        output = output.replace(\"\
    --\", \"_\");\n        return output;", "\tauto new_text = \"\";\n\tstd::size_t\
    \ spaces = 0;\n\tfor (auto c : text) {\n\t\tif (c == ' ') {\n\t\t\tif (spaces\
    \ == 2) {\n\t\t\t\tnew_text += '-';\n\t\t\t} else {\n\t\t\t\tnew_text += '_';\n\
    \t\t\t}\n\t\t\tspaces = 0;\n\t\t} else {\n\t\t\tif (c == '\\n') {\n\t\t\t\tnew_text\
    \ += '\\n';\n\t\t\t\tspaces++;\n\t\t\t} else {\n\t\t\t\tnew_text += c;\n\t\t\t\
    \tspaces++;\n\t\t\t}\n\t\t}\n\t}\n\treturn new_text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    // If more than two consecutive spaces\n    if (std::count(text.begin(),\
    \ text.end(), ' ') > 2) {\n        // Replace all consecutive spaces with -\n\
    \        std::replace(text.begin(), text.end(), '_', '-');\n    }\n    return\
    \ text;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    \n    std::string\
    \ fixed_text = \"\";\n    int no_space_count = 0;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            no_space_count++;\n     \
    \   } else {\n            if (no_space_count > 1) {\n                fixed_text\
    \ += \"-\";\n            }\n            no_space_count = 0;\n            fixed_text\
    \ += text[i];\n        }\n    }\n    return fixed_text;", "    // Initialize a\
    \ boolean variable\n    bool flag = true;\n    // Go through each character of\
    \ the string\n    for (int i = 0; i < text.size(); i++) {\n        // If the character\
    \ is a space\n        if (text[i] == ' ') {\n            // If flag is set to\
    \ true\n            if (flag) {\n                // Replace it with underscore\n\
    \                text.push_back('_');\n            }\n            // If flag is\
    \ set to false\n            else {\n                // Replace it with -\n   \
    \             text.push_back('-');\n            }\n            // Set flag to\
    \ true\n            flag = true;\n        }\n        // If flag is true and character\
    \ is not a space\n        else if (flag) {\n            // Replace it with _\n\
    \            text.push_back('_');\n            // Set flag to false\n        \
    \    flag = false;\n        }\n    }\n    // Return our new string\n    return\
    \ text;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size()\
    \ > 1) {\n        std::size_t index = text.find(' ');\n        for (std::size_t\
    \ i = index + 1; i < text.size(); i++) {\n            if (text[i] == ' ') {\n\
    \                text[i] = '_';\n            }\n        }\n    }\n    return text;",
  "    // replace all spaces with underscores\n    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    // replace all consecutive spaces with -\n    size_t count =\
    \ 0;\n    for (size_t i = 1; i < text.size(); ++i) {\n        std::cout << text[i];\n\
    \        if (text[i] == ' ' && text[i-1] == ' ') {\n            ++count;\n   \
    \     } else {\n            text[i] = '-';\n        }\n    }\n    return text;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    if(res.size() >2)\n    {\n        std::replace(std::begin(res),\
    \ std::begin(res)+2, \" \", \"-\");\n    }\n    return res;", "  // Start with\
    \ an empty string\n  std::string result = text;\n  \n  // Loop through the string,\
    \ character by character\n  for (auto it = text.begin(); it != text.end(); ++it)\
    \ {\n    // Check for spaces\n    if (*it == ' ') {\n      // If the previous\
    \ character is space, and it's not a consecutive space\n      if (it != text.begin())\
    \ \n        if (*(--it) == ' ') \n          result.replace(*it, *it + 1, \"_\"\
    );\n      // If the previous character is not space\n      else \n        result.replace(*it,\
    \ *it + 1, \"\");\n    }\n  }\n  \n  // If there are more than 2 consecutive spaces\
    \ \n  if (result.find_first_of(\"_ _\") > 0) {\n    // Replace the 2 consecutive\
    \ spaces with -\n    result.replace(result.find_first_of(\"_ _\"), 2, \"-\");\n\
    \  }\n  \n  // If the string has a '-', remove it\n  if (result.find_first_of(\"\
    -\") != std::string::npos) {\n    result.replace(result.find_first_of(\"-\"),\
    \ 1, \"\");\n  }\n  \n  return result;", "    \n    for(int i=0; i<text.size();\
    \ i++) {\n        \n        if(text[i] == ' ') {\n            \n            for(int\
    \ j=i; j<text.size(); j++) {\n                \n                if(text[j] ==\
    \ ' ') {\n                    \n                    text[i] = '_';\n         \
    \           \n                    for(int k=j+1; k<text.size(); k++) {\n     \
    \                   \n                        if(text[k] == ' ') {\n         \
    \                   \n                            text[i] = '_';\n           \
    \                 \n                            break;\n                     \
    \   }\n                        \n                        text[i] = text[i];\n\
    \                    }\n                    \n                    break;\n   \
    \             }\n                \n                text[i] = text[i];\n      \
    \      }\n            \n            break;\n        }\n        \n        text[i]\
    \ = text[i];\n    }\n    \n    return text;", "    std::regex spaces_regex(\"\\\
    \\s+\");\n    std::smatch sm;\n    std::string fixed_text = spaces_regex.replace_all(text,sm);\n\
    \    int consecutive_spaces_count=0;\n    for(int i=0;i<fixed_text.length();i++)\n\
    \    {\n        if(fixed_text[i]==' ')\n            consecutive_spaces++;\n  \
    \      else\n            consecutive_spaces=0;\n        if(consecutive_spaces==2)\n\
    \        {\n            fixed_text[i]='-';\n            consecutive_spaces=0;\n\
    \        }\n    }\n    return fixed_text;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    \n    std::string ans = \"\";\n    std::size_t foundSpaces =\
    \ 0;\n    for (size_t i = 0; i < text.size(); ++i) {\n        if ((text[i] ==\
    \ ' ') || (text[i] == '_'))\n            foundSpaces = 1;\n        else if ((text[i]\
    \ == '_') && (foundSpaces > 1)) {\n            ans += \"_\";\n            foundSpaces\
    \ = 1;\n        } else\n            ans += text[i];\n    }\n    \n    return ans;",
  "    std::replace_if(text.begin(), text.end(), std::isspace, '-');\n    std::string\
    \ fixed_text;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            if (fixed_text.size() != 0) {\n                fixed_text\
    \ += \"-\";\n            }\n            continue;\n        }\n        fixed_text\
    \ += text[i];\n    }\n    return fixed_text;", "    for (auto c: text) {\n   \
    \     if (c == ' ') {\n            text += '_';\n        }\n        else if (c\
    \ == '\\n') {\n            text += '_';\n        }\n    }\n    return text;",
  "    std::ostringstream new_text;\n    for (int i = 0; i != text.length(); ++i)\
    \ {\n        if (text[i] == ' ') {\n            new_text << \"_\";\n         \
    \   ++i;\n        } else {\n            new_text << text[i];\n        }\n    }\n\
    \    return new_text.str();", "    std::string res = text;\n    for(int i = 0;\
    \ i < res.size(); i++) {\n        if(res[i] == ' ') {\n            res.at(i) =\
    \ '_';\n        }\n    }\n    if(res.size() > 2) {\n        for(int i = 1; i <\
    \ res.size() - 1; i++) {\n            if(res.at(i) == res.at(i + 1)) {\n     \
    \           res.at(i) = '-';\n            }\n        }\n    }\n    return res;",
  "    std::string fixed_text = text;\n    for (int i = 0; i < text.length(); i++)\
    \ {\n        if (text.at(i) == ' ') {\n            fixed_text = fixed_text.replace(i,\
    \ \"_\");\n            if (fixed_text.substr(i - 1, 1) != \" \") fixed_text.replace(i\
    \ - 1, 1, \"-\");\n        }\n    }\n    return fixed_text;", "    // We will\
    \ replace all spaces with -\n    std::string res = text;\n    \n    // Find all\
    \ spaces that are followed by space and replace with -\n    for(int i = 0; i <\
    \ res.size(); i++)\n    {\n        if (res[i] == ' ')\n        {\n           \
    \ if (i + 1 < res.size() && res[i + 1] == ' ')\n                res[i] = '-';\n\
    \            else\n                res[i] = '-';\n        }\n    }\n    \n   \
    \ // Replace all 2 or more spaces with -\n    int count = 0;\n    for(int i =\
    \ 0; i < res.size(); i++)\n    {\n        if (res[i] == ' ')\n        {\n    \
    \        count++;\n        }\n        if (count == 2)\n        {\n           \
    \ res[i] = '-';\n            count = 0;\n        }\n    }\n    \n    return res;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    int i = 1;\n    while\
    \ (i != text.length()) {\n        if (text[i] == ' ') {\n            while (i\
    \ != text.length() && text[i] == ' ') {\n                i++;\n            }\n\
    \            if (i != text.length()) \n                std::replace(text.begin()\
    \ + i, text.end(), ' ', '-');\n        }\n        i++;\n    }\n    return text;",
  "    std::replace_if(text.begin(), text.end(), \n        [&](char c){ \n       \
    \     return (c == ' '|| c == '_') ? c : '_'; \n        });\n\n    // if consecutive\
    \ spaces exists, replace it with a -\n    size_t len = text.size();\n    size_t\
    \ pos = 0;\n    bool found = false;\n    while (pos < len) {\n        if (text[pos]\
    \ == '_') {\n            found = true;\n        }\n        pos++;\n    }\n   \
    \ if(found) {\n        while(pos < len) {\n            if(text[pos] == '_') {\n\
    \                text[pos] = '-';\n            }\n            pos++;\n       \
    \ }\n    }\n\n    return text;", "    std::replace( text.begin(), text.end(),\
    \ ' ', '_');\n    std::string res = text;\n    if(std::count(res.begin(), res.end(),\
    \ '_') > 1) {\n        std::replace(res.begin(), res.end(), '_', '-');\n    }\n\
    \    return res;", "    // Complete this function\n    for (int i = 0; i < text.length();\
    \ i++) {\n        if (text[i] == ' ') {\n            text = text.replace(i, 1,\
    \ \" _\");\n        }\n    }\n    text = text.replaceAll(\"\\\\s+\", \"-\");\n\
    \    return text;", "    \n    std::string spaces = \"_\";\n    std::string fixed\
    \ = text;\n    \n    size_t index1 = fixed.find_first_not_of(spaces);\n    size_t\
    \ index2 = fixed.find_last_not_of(spaces);\n    size_t length = index2 - index1;\n\
    \    \n    if (length > 2) {\n        fixed = fixed.substr(0, index1) + \"_\"\
    \ + fixed.substr(index2 + 1, fixed.length());\n    }\n    \n    return fixed;",
  "    std::string::size_type pos = 0;\n    std::string res = \"\";\n    while (pos\
    \ < text.length()) {\n        if (text[pos] == ' ') {\n            if (pos ==\
    \ 0) {\n                res += '-';\n            }\n            res += '-';\n\
    \        } else if (text[pos] == ' ' && pos != 0) {\n            res += '-';\n\
    \        } else if (text[pos] != ' ' && pos != 0) {\n            res += text[pos];\n\
    \        }\n        pos++;\n    }\n    return res;", "    std::regex space_re(\"\
    \\\\s+\");\n    std::regex spaces_re(\"\\\\s{2,}\");\n    std::string modified_text\
    \ = text;\n    modified_text.replace(std::sregex_token_iterator(modified_text.begin(),\
    \ modified_text.end(), space_re, -1), std::sregex_token_iterator(), std::string(\"\
    -\"));\n    modified_text.replace(std::sregex_token_iterator(modified_text.begin(),\
    \ modified_text.end(), spaces_re, -1), std::sregex_token_iterator(), std::string(\"\
    _\"));\n    return modified_text;", "    auto space = ' ';\n    auto replace =\
    \ '_';\n    auto replace2 = '-';\n    std::string outtext = text;\n    int i =\
    \ 0;\n    while (i < outtext.size()) {\n        char c = outtext.at(i);\n    \
    \    if (c == space) {\n            i++;\n            if (outtext.at(i) == space)\
    \ {\n                outtext.replace(i + 1, outtext.size() - i, replace);\n  \
    \              i = outtext.size();\n            } else {\n                outtext.replace(i\
    \ + 1, outtext.size() - i, replace2);\n            }\n        }\n        i++;\n\
    \    }\n    return outtext;", "    std::string temp;\n    int flag = 0;\n    int\
    \ n = text.length();\n    for(int i = 0; i < n; i++) {\n        if(text[i] ==\
    \ ' ') {\n            temp = text[i];\n            temp = temp + \"_\";\n    \
    \        temp = temp.substr(0, 2);\n            if(text[i + 1] == ' ' && text[i\
    \ + 2] != ' ') {\n                temp = temp + \"-\";\n                i++;\n\
    \            } \n            flag = 1;\n        }\n        temp += text[i];\n\
    \    }\n    if(!flag) {\n        return text;\n    }\n    return temp;", "   \
    \ // Write your code here\n    int i = 0;\n    int j = 0;\n    int counter = 0;\n\
    \    while (i < text.length()) {\n        if (text[i] == ' ') {\n            counter++;\n\
    \        } else if (counter > 1) {\n            counter = 0;\n            j++;\n\
    \        } else {\n            i++;\n        }\n    }\n    std::string result\
    \ = \"\";\n    int k = 0;\n    while (i < text.length()) {\n        if (text[i]\
    \ == ' ') {\n            result = result + \"-\";\n        } else if (counter\
    \ > 1) {\n            result = result + \"_\";\n            counter = 0;\n   \
    \         j++;\n        } else {\n            result = result + text[i];\n   \
    \     }\n        i++;\n    }\n    if (result.length() > 2 && result.substr(0,\
    \ 2) == \"_\" && result.substr(result.length() - 2, 2) == \"_\") {\n        result\
    \ = result.substr(0, result.length() - 2);\n    }\n    return result;", "    size_t\
    \ pos = 0;\n    std::string modified;\n    do {\n        pos = text.find(\"  \"\
    , pos);\n        modified += text.substr(pos, 2);\n    }\n    while (pos != std::string::npos);\n\
    \n    pos = modified.find(\"  \");\n    modified += text.substr(pos, 1);\n   \
    \ pos = modified.find(' ');\n    while(pos != std::string::npos){\n        modified\
    \ += \"-\";\n        pos = modified.find(' ', pos);\n    }\n    return modified;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find(\" \"\
    ) != std::string::npos) {\n        std::stringstream ss;\n        size_t pos =\
    \ 0;\n        for (; pos < text.length(); ++pos) {\n            if (text[pos]\
    \ == ' ') {\n                if (pos == text.length() - 1) {\n               \
    \     ss.write(text.data() + pos, 1);\n                    break;\n          \
    \      } else {\n                    ss.write(text.data() + pos, 1);\n       \
    \         }\n                ++pos;\n            } else {\n                if\
    \ (pos == text.length() - 1) {\n                    ss.write(text.data() + pos,\
    \ 1);\n                    break;\n                } else {\n                \
    \    ss.write(text.data() + pos, 1);\n                    ss.write(\"-\", 1);\n\
    \                }\n            }\n        }\n        text = ss.str();\n    }\n\
    \    if (text.find(\" \") != std::string::npos) {\n        text = text.replace(\"\
    \  \", \"  -\");\n    }\n    return text;", "    // Your code here\n    for(int\
    \ i=0; i<text.length(); i++) {\n        if(text[i] == ' ') {\n            text\
    \ = text.replace(text[i],\"_\");\n        }\n    }\n    \n    for(int i=0; i<text.length();\
    \ i++) {\n        if(text[i] == ' ' && text.substr(i, i+2) == \"   \") {\n   \
    \         text = text.replace(text[i],\"-\");\n        }\n    }\n    return text;",
  "    if (text.find(\"  \")!=std::string::npos)\n    {\n        text = text.replace(\"\
    \  \",\"_\");\n    }\n    if(text.find_first_of(\"  \") != std::string::npos)\n\
    \    {\n        text = text.replace(\" \",\"-\");\n    }\n    return text;", " \
    \   // Create a copy of input string\n    std::string temp_str = text;\n    //\
    \ Use a boolean flag to determine if the flag is set\n    bool is_consecutive_space\
    \ = false;\n    // Iterate over the characters in string\n    for (int i = 0;\
    \ i < temp_str.size(); i++) {\n        // If character is space\n        if (temp_str[i]\
    \ == ' ') {\n            // If flag is set, then concatenate with underscore\n\
    \            if (is_consecutive_space) {\n                temp_str[i] = '-';\n\
    \            }\n            // Otherwise, reset the flag\n            else {\n\
    \                is_consecutive_space = true;\n            }\n        }\n    \
    \    // If the flag is set\n        else if (is_consecutive_space) {\n       \
    \     // Then concatenate with -\n            temp_str[i] = '-';\n        }\n\
    \        // If flag is unset\n        else {\n            // Then concatenate\
    \ with underscore\n            temp_str[i] = '_';\n        }\n    }\n    return\
    \ temp_str;", "    // your code goes here\n    std::string new_text;\n    size_t\
    \ counter = 0;\n    for(size_t i = 0; i < text.size(); i++) {\n        char c\
    \ = text[i];\n        if(c == ' ') {\n            counter++;\n        }\n    \
    \    else {\n            if(counter > 0) {\n                if(i+1 < text.size()\
    \ && text[i+1] == ' ') {\n                    new_text += '-';\n             \
    \   }\n                else {\n                    new_text += std::string(\"\
    -\", 1);\n                }\n                counter = 0;\n            }\n   \
    \         else {\n                new_text += c;\n            }\n        }\n \
    \   }\n    return new_text;", "    std::string space = \" \";\n    std::string\
    \ repl = \"_\";\n    size_t pos = 0;\n    while ((pos = text.find(space, pos))\
    \ != std::string::npos) {\n        text.replace(pos, space.length(), repl);\n\
    \        pos += repl.length();\n    }\n    return text;", "    for (int i = 0;\
    \ i < text.length(); i++) {\n        if (text.at(i) == ' ') {\n            text\
    \ += \"_\";\n        }\n    }\n\n    size_t count = 0;\n    bool flag = false;\n\
    \    for (int i = 0; i < text.length(); i++) {\n        if (text.at(i) == ' ')\
    \ {\n            count++;\n            if (count > 2) {\n                text\
    \ += \"_\";\n                count = 0;\n            }\n        }\n        else\
    \ {\n            count = 1;\n        }\n    }\n\n    return text;", "    // Your\
    \ code goes here\n    int flag = 0;\n    int i = 0;\n    while (i != text.size())\
    \ {\n        if (text[i] == ' ') {\n            flag = 1;\n            i += 1;\n\
    \        } else if (text[i] == '\\n') {\n            flag = 0;\n            i\
    \ += 1;\n        }\n        if (i == text.size() || flag == 0) {\n           \
    \ i += 1;\n        }\n    }\n    std::string s;\n    s = text;\n    std::replace(\
    \ s.begin(), s.end(), ' ', '_' );\n    return s;", "   \n    // If text has less\
    \ than 2 spaces, return text as is\n    int n = text.size();\n    if (n <= 2)\
    \ {\n        return text;\n    }\n    // Replace all spaces with _ and store it\
    \ in result string\n    std::string result;\n    for(char c : text) {\n      \
    \  if (c == ' ') {\n            result.append(\"_\");\n        }\n        else\
    \ {\n            result.append(c);\n        }\n    }\n    \n    // Return fixed\
    \ string if all spaces have been replaced\n    if (result == text) {\n       \
    \ return text;\n    }\n    \n    // Remove spaces if there are more than 2 consecutive\
    \ spaces in a string\n    int index = 0;\n    while (index != -1) {\n        index\
    \ = result.find(\" \", index);\n        if (index != -1) {\n            result.replace(index,\
    \ 1, \"\");\n            index = result.find(\" \", index + 1);\n        }\n \
    \   }\n    \n    // Return fixed string\n    return result;", "    text = std::regex_replace(text,\
    \ regex_whitespace, \" \");\n    text = std::regex_replace(text, std::regex(\"\
    \ +\"), \" -\");\n    return text;", "\tstd::string result = text;\n\tstd::replace(result.begin(),\
    \ result.end(), ' ', '_');\n\tstd::replace_if(result.begin(), result.end(), [](char\
    \ c) { return c==' '; } );\n\tstd::replace(result.begin(), result.end(), '_',\
    \ ' ');\n\treturn result;", "    std::string result = text;\n    // replace spaces\n\
    \    for(int i = 0; i < result.length(); i++){\n        if(result[i] == ' ')\n\
    \            result[i] = '_';\n    }\n    // replace multiple spaces\n    for(int\
    \ i = 0; i < result.length(); i++){\n        if(result[i] == ' '){\n         \
    \   int count = 0;\n            while(i < result.length() && result[i] == ' ')\n\
    \                i++;\n            while(i < result.length() && result[i] == '\
    \ ')\n                count++;\n            if(count > 2)\n                result[i]\
    \ = '-';\n        }\n    }\n    return result;", "  text.replace(text.begin(),\
    \ text.end(), ' ', '_');\n  if(text.size() > 2) {\n    text.replace(text.begin()\
    \ + 1, text.end() - 1, ' ', '-');\n  }\n  return text;", "  // To fix multiple\
    \ consecutive spaces in a string,\n  // replace each space with underscores\n\
    \  // And if there are more than two consecutive spaces, \n  // then replace all\
    \ consecutive spaces with -\n  for(int i = 0; i < text.length(); i++) {\n    if(text[i]\
    \ == ' ') {\n      text.insert(i, '_');\n      if((i+1) == text.length() || (i+2)\
    \ == text.length()) {\n        text.insert(i, '-');\n      }\n    }\n  }\n  return\
    \ text;", "    std::ostringstream os;\n    int i,j;\n    int n = text.size();\n\
    \    for(i = 0; i < n; i++) {\n        if(text[i] == ' ') {\n            for(j\
    \ = i+1; j < n; j++)\n                if(text[j] == ' ') break;\n            if(j\
    \ == n) os << text[i];\n            else\n                for(j = i; j < n; j++)\n\
    \                    if(text[j] == ' ') {\n                        os << \"_\"\
    ;\n                        i = j;\n                        break;\n          \
    \          }\n        }\n        else os << text[i];\n    }\n    return os.str();",
  "    for(int i=0;i<text.length();i++) {\n        if(text[i] == ' ') {\n        \
    \    text = text.substr(0,i) + \"_\" + text.substr(i+1);\n        }\n        else\
    \ if(text.substr(i,2) == \"  \") {\n            text = text.substr(0,i) + \"-\"\
    \ + text.substr(i+2);\n        }\n    }\n    return text;", "  std::string res\
    \ = text;\n  // Replace all spaces with underscores\n  for (int i = 0; i< text.length();\
    \ i++) {\n    if (text[i] == ' ') {\n      res[i] = '_';\n    }\n  }\n  // If\
    \ a string has more than 2 consecutive spaces\n  if (res.substr(1, 2) == \"__\"\
    ) {\n    int i = 0;\n    // Replace all consecutive spaces with -\n    while(i\
    \ < res.length() - 2) {\n      res[i++] = '-';\n    }\n  }\n  return res;", " \
    \   size_t len = text.length();\n    std::string ans = text;\n\n    for(size_t\
    \ i = 0; i < len; i++) {\n        if (text[i] == ' ') {\n            ans[i] =\
    \ '_'; \n            i += 1;\n        }\n\n        if (i == len - 1) {\n     \
    \       break;\n        }\n\n        if (ans.substr(len - 2, 2) == \"___\") {\n\
    \            ans[len - 2] = '-';\n            ans.resize(len - 2);\n        }\n\
    \    }\n\n    return ans;", "    int index = 0;\n    int len_text = text.length();\n\
    \    while (index < len_text && \n           (text[index] == ' ' || text[index]\
    \ == '\\n' || text[index] == '\\t') && \n           text[index-1] != ' ' && text[index-1]\
    \ != '\\n' && text[index-1] != '\\t') {\n        \n        text[index++] = fix_spaces(text[index-1]);\n\
    \    }\n    std::string fixed_text = text;\n    \n    for (int i = len_text -\
    \ 1; i >= 0; i--) {\n        if (text[i] == ' ' && text[i+1] != ' ' && text[i+1]\
    \ != '\\n' && text[i+1] != '\\t' && text[i-1] != ' ' && text[i-1] != '\\n' &&\
    \ text[i-1] != '\\t') {\n            fixed_text[i] = fix_spaces(text[i]);\n  \
    \      }\n    }\n    return fixed_text;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    \n    int spaces = 0;\n    for (int i = 0; i != text.size();\
    \ ++i) {\n        if (text[i] == ' ')\n            spaces++;\n        else\n \
    \           break;\n    }\n    \n    for (int i = 0; i < spaces; ++i)\n      \
    \  text = text.substr(0, text.size()-1);\n    \n    int consecutive_spaces = 0;\n\
    \    for (int i = 0; i != text.size(); ++i) {\n        if (text[i] == ' ')\n \
    \           consecutive_spaces++;\n        else\n            break;\n    }\n \
    \   \n    if (consecutive_spaces > 2)\n        text = text.substr(0, text.size()-1);\n\
    \    \n    return text;", "  std::replace(text.begin(), text.end(), ' ', '_');\n\
    \  if (text.find('  ') != std::string::npos) {\n    text = text.replace('  ',\
    \ '-');\n  }\n  return text;", "    // Declare a variable to hold our output\n\
    \    std::string res = \"\";\n    // Loop over the string\n    for(int i = 0;\
    \ i < text.length(); i++) {\n        // If this character is a space\n       \
    \ if(text[i] == ' ') {\n            // Append the underscore\n            res\
    \ += \"_\";\n        } else {\n            // Otherwise, append the space\n  \
    \          res += \" \";\n        }\n    }\n    // If there is a - at the end\n\
    \    if(res.substr(res.length() - 1).find('-') != std::string::npos) {\n     \
    \   // Split on the last - and fix the rest\n        std::stringstream ss(res);\n\
    \        std::string word;\n        while(std::getline(ss, word, ' ')) {\n   \
    \         if(word.find_first_of(' ') != std::string::npos) {\n               \
    \ word = word.substr(0, word.find_first_of(' '));\n                word += '-';\n\
    \            }\n            res += word;\n        }\n    }\n    return res;",
  "    \n    std::string out(text.begin(), text.end());\n    size_t i, j, len;\n \
    \   bool consecutive = false;\n\n    for(i = out.size() - 1; i >= 0; i--) {\n\
    \        if(out[i] == ' ')\n        {\n            consecutive = false;\n    \
    \    }\n        else\n        {\n            if(!consecutive) {\n            \
    \    consecutive = true;\n            }\n            else {\n                consecutive\
    \ = false;\n            }\n        }\n        if(out[i] == ' ')\n        {\n \
    \           if(!consecutive) {\n                for(j = i + 1; j < out.size();\
    \ j++) {\n                    if(out[j] == ' ') {\n                        out[j]\
    \ = '*';\n                        break;\n                    }\n            \
    \    }\n            }\n            else {\n                for(j = i + 1; j <\
    \ out.size(); j++) {\n                    if(out[j] == ' ') {\n              \
    \          out[j] = '-';\n                        break;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    len = out.size();\n\
    \    out.resize(len);\n    return out;", "    std::string fixed_text = text;\n\
    \    for (auto &c: fixed_text) {\n        if (c == ' ') c = '_';\n        else\
    \ if (c == ' ' && fixed_text[c + 1] == ' ') {\n            c = '-';\n        }\n\
    \    }\n    return fixed_text;", "    std::string fix_space_str = \"__\";\n  \
    \  for (auto &c : text) \n        if (c.isspace()) \n            fix_space_str\
    \ += \"_\";\n        else if (c.isspace() && !text.back().isspace()) \n      \
    \      fix_space_str += \"-\";\n    return fix_space_str;", "    for(size_t i\
    \ = 0; i < text.length(); i++) {\n        if(text[i] == ' ') {\n            text[i]\
    \ = '_';\n        }\n        if(text[i] == '\\t') {\n            text[i] = '-';\n\
    \        }\n    }\n    \n    std::string output = text;\n    \n    int count_space\
    \ = 0;\n    \n    for(size_t i = 1; i < text.length(); i++) {\n        if(text[i]\
    \ == ' ') {\n            count_space++;\n        }\n        if(count_space > 2)\
    \ {\n            count_space = 0;\n            output = output.replace(i, 1, '-');\n\
    \        }\n    }\n    \n    return output;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), '_', ' ');\n\
    \    if(text.find('  ') != std::string::npos) {\n        text = text.replace('\
    \  ', '-');\n    }\n    return text;", "    std::string fixed = \"\";\n    std::string\
    \ before = \"\";\n    std::string after = \"\";\n    bool need_to_fix = false;\n\
    \    for (std::string::iterator it = text.begin(); it != text.end(); ++it) {\n\
    \        if (before == \"\") {\n            before = *it;\n            after =\
    \ before;\n            need_to_fix = false;\n        } else {\n            if\
    \ (*it == ' ') {\n                need_to_fix = true;\n            } else {\n\
    \                after = after + before;\n                before = *it;\n    \
    \        }\n        }\n    }\n    if (need_to_fix)\n        fixed += after + before;\n\
    \    return fixed;", "  std::string out;\n  // count how many spaces there are\n\
    \  size_t spaces = 0;\n  for (auto&& ch: text) {\n    if (ch == ' ') {\n     \
    \ spaces++;\n    } else {\n      if (spaces > 1) {\n        out += std::string(\"\
    -\"s, spaces);\n      }\n      spaces = 0;\n      out += ch;\n    }\n  }\n  //\
    \ add last -\n  if (spaces > 1) {\n    out += std::string(\"-\"s, spaces);\n \
    \ }\n  return out;", "    std::string spaces(\" \");\n    std::string hyphen(\"\
    -\");\n    std::string result = text;\n    size_t space_pos = 0, hyphen_pos =\
    \ 0;\n    while (space_pos < result.size()) {\n        size_t space_size = result.size()\
    \ - space_pos;\n        if (space_size < 2 || result[space_pos+space_size] ==\
    \ ' ')\n            space_pos = result.size();\n        else {\n            space_pos\
    \ = space_size;\n            while (space_pos < result.size() && result[space_pos]\
    \ == ' ')\n                ++space_pos;\n        }\n    }\n    while (hyphen_pos\
    \ < result.size()) {\n        size_t hyphen_spaces = result.size() - hyphen_pos;\n\
    \        if (hyphen_spaces <= 1)\n            break;\n        if (result[hyphen_pos\
    \ + hyphen_spaces - 1] == ' ')\n            result[hyphen_pos + hyphen_spaces\
    \ - 1] = '-';\n        else\n            hyphen_pos = result.size();\n    }\n\
    \    return result;", "    std::string res;\n    size_t len = text.length();\n\
    \    for(size_t i = 0; i < len; ++i)\n    {\n        if(text[i] == ' ')\n    \
    \    {\n            std::string s = text.substr(0, i);\n            s += \"_\"\
    ;\n            s += text.substr(i, len - i);\n            res += s;\n        }\n\
    \    }\n    return res;", "    std::string r = text;\n    std::size_t n = r.size();\n\
    \    for (std::size_t i = 0; i < n; ++i) {\n        if (r[i] != ' ') continue;\n\
    \        if (r[i + 1] != ' ') r[i] = '-';\n        if (r[i + 2] != ' ') r[i +\
    \ 1] = '-';\n    }\n    return r;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    std::string temp;\n    size_t start = 0;\n    size_t end = 0;\n\
    \    size_t spaces = 0;\n    bool flag = false;\n    while (end < text.size())\
    \ {\n        end = text.find(' ', start);\n        if (end == std::string::npos)\
    \ {\n            end = text.size();\n        }\n        if (text[end] == '_')\
    \ {\n            temp = temp + std::string(text.begin() + start, text.begin()\
    \ + end);\n            start = end + 1;\n        } else {\n            temp +=\
    \ std::string(text.begin() + start, text.begin() + end);\n            if (flag\
    \ == true) {\n                temp += \"-\";\n            }\n            temp\
    \ += \" \";\n            start = end + 1;\n        }\n        spaces++;\n    \
    \    if (spaces > 2) {\n            temp += \"-\";\n            spaces = 0;\n\
    \            flag = false;\n        }\n        if (end == text.size() - 1) {\n\
    \            if (flag == true) {\n                temp += \"-\";\n           \
    \ }\n            temp += \" \";\n            flag = false;\n        }\n    }\n\
    \    return temp;", "    std::string res;\n    for (size_t i = 0; i < text.length();\
    \ i++) {\n        char ch = text[i];\n        if (ch == ' ') {\n            ch\
    \ = '_';\n            if (i + 1 < text.length() && text[i + 1] == ' ') {\n   \
    \             ch = '-';\n                i++;\n            }\n        }\n    \
    \    res += ch;\n    }\n    return res;", "    std::string spaces = \"_\";\n \
    \   while(true){\n        size_t pos = text.find(' ');\n        if (pos == std::string::npos)\n\
    \            return text;\n        text.erase(0, pos);\n        text.insert(pos,\
    \ spaces);\n        pos = text.find(' ', pos + 1);\n        if (pos == std::string::npos)\n\
    \            break;\n        text.replace( text.substr(0, pos), spaces, 1 );\n\
    \    }\n    return text;", "  std::size_t found = -1;\n  while ((found = text.find(\"\
    \  \", found + 1)) != std::string::npos) {\n    text.erase(found, 2);\n  }\n \
    \ while ((found = text.find(\"  \", found + 1)) != std::string::npos) {\n    text.insert(found,\
    \ \"-\");\n  }\n  return text;", "    std::string output = text;\n    for(int\
    \ i = 0;i<output.size();i++){\n        if(output[i] == ' '){\n            int\
    \ space_counter = 0;\n            while(output[i+1] != ' '){\n               \
    \ space_counter++;\n                i++;\n            }\n            if(space_counter\
    \ > 2){\n                for(int j = i;j<output.size();j++){\n               \
    \     if(output[j] == ' '){\n                        output[j] = '-';\n      \
    \                  j--;\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return output;", "    // your code goes here\n   \
    \ text.erase(std::remove_if(text.begin(), text.end(), isspace), text.end()); \n\
    \    text.erase(std::find_if(text.begin(), text.end(), \n                    \
    \    [&](int ch){ return (isspace(ch))? true: !isspace(ch); }), \n           \
    \     text.end()); \n    text.erase(std::find_if(text.begin(), text.end(), \n\
    \                        [&](int ch){ return (isspace(ch))? false: isspace(ch);\
    \ }), \n                text.end()); \n    \n    if(text.size()>2) \n    {\n \
    \       text.erase(std::remove_if(text.begin(), text.end(), \n               \
    \ [&](int ch){ return (isspace(ch))? true: !isspace(ch); }), \n              \
    \  text.end()); \n        text.erase(std::find_if(text.begin(), text.end(), \n\
    \                [&](int ch){ return (isspace(ch))? false: isspace(ch); }), \n\
    \                text.end()); \n    }\n    return text;", "\tsize_t space_count\
    \ = text.find_first_not_of(\" \");\n\tif (space_count > 2) {\n\t\tspace_count\
    \ = text.find_last_not_of(\" \", space_count+1);\n\t}\n\tif (space_count > 0)\
    \ {\n\t\tfor (int i=0;i<space_count-1;i++) {\n\t\t\ttext[i] = text[i]+'-';\n\t\
    \t}\n\t}\n\treturn text;", "    for(auto c: text) {\n        if(c == ' ') {\n\
    \            std::replace(c,c+1,'_');\n            if(text.find(c+1, c+2) == std::string::npos)\
    \ {\n                std::replace(c,c+1,'-');\n            }\n        } else {\n\
    \            std::replace(c,c+1,'_');\n        }\n    }\n    return text;", " \
    \   int space_count = text.find(\" \");\n    while(space_count != std::string::npos)\
    \ {\n        text = text.replace(space_count, space_count + 1, \"_\");\n     \
    \   space_count = text.find(\" \", space_count + 1);\n    }\n    \n    // If there\
    \ is only 1 space, then add _ between words\n    if (text.find(\" \") != std::string::npos)\
    \ {\n        text = text + \" _\";\n    }\n\n    return text;", "  int n = text.length();\n\
    \  std::string result;\n  // We will store our result here\n  for (int i = 0;\
    \ i < n; ++i) {\n    if (text[i] == ' ') {\n      result += \"_\";\n    } else\
    \ {\n      result += text[i];\n    }\n  }\n  if (result.length() > 1) {\n    if\
    \ (result[result.length() - 2] == ' ' && result[result.length() - 1] == ' ') {\n\
    \      result += result[result.length() - 3];\n    }\n  }\n  return result;",
  "        std::string result;\n        std::replace(text.begin(), text.end(), ' ',\
    \ '_');\n        std::replace_if(text.begin(), text.end(), [&result](int x) {\n\
    \            return (x == ' ') || ((x == ' ') && (result.back() == '_'));\n  \
    \      }, '_');\n        std::replace(result.begin(), result.end(), '_', ' ');\n\
    \        return result;", "    for(auto &c : text){\n        if(isspace(c))\n\
    \            c = '_';\n    }\n    // find consecutive spaces in the text\n   \
    \ int consecutive_spaces = 0;\n    for(auto &c : text){\n        if(isspace(c))\n\
    \            consecutive_spaces++;\n        else\n            consecutive_spaces\
    \ = 0;\n        if(consecutive_spaces > 1)\n            std::replace(text.begin(),\
    \ text.end(), ' ', '-');\n    }\n    return text;", "    std::string fixed_text;\n\
    \    \n    int space_count = 0;\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            fixed_text += \"_\";\n           \
    \ space_count++;\n        } else {\n            fixed_text += text[i];\n     \
    \   }\n        if (space_count > 1) {\n            fixed_text += \"_\";\n    \
    \        space_count--;\n        }\n    }\n    return fixed_text;", "    std::string\
    \ spaces = \"_\";\n    int n = text.size();\n    bool flag = true;\n    for (int\
    \ i = 0; i < n; i++) {\n        if (text.at(i) == ' ')\n            flag = true;\n\
    \        else\n            flag = false;\n        if (flag) {\n            if\
    \ (i == 0 || text.at(i-1) != ' ')\n                text.insert(i, spaces);\n \
    \       }\n    }\n    if (text.size() > 2)\n        for (int i = 1; i < n-2; i++)\n\
    \            text.insert(i, spaces);\n    return text;", "    auto words = text.split(\"\
    \ \");\n    for (auto & word: words)\n        word.replace(1, word.length(), \"\
    _\");\n    return words.join(\" \");", "    std::string fixed = text;\n    for(auto\
    \ i : fixed) {\n        if(i != ' ') {\n            fixed = fixed.replace(i, std::string(\"\
    _\"));\n        }\n    }\n    if(fixed.find(\"  \")!=std::string::npos) {\n  \
    \      fixed.replace(fixed.find(\"  \"), 2, std::string(\"-\"));\n    }\n    return\
    \ fixed;", "    std::string result = text;\n    replace(text.begin(), text.end(),\
    \ \" \", \"_\");\n    std::size_t num_consecutive_spaces = std::count_if(text.begin(),\
    \ text.end(), \n        [&](char c) {\n            return (c == ' ');\n      \
    \  }) - text.begin();\n    if (num_consecutive_spaces > 2) {\n        replace(text.begin(),\
    \ text.end(), \" \", \"-\");\n    }\n    return result;", "    std::string res;\n\
    \    size_t i = 1;\n    while (i < text.size()) {\n        if (text[i] == ' ')\
    \ {\n            res = res + text[i];\n            i++;\n        } else if (text[i]\
    \ == '\\n') {\n            res = res + text[i];\n            i++;\n        } else\
    \ {\n            res = res + text[i] + '_';\n            i++;\n        }\n   \
    \ }\n    size_t s = res.size();\n    size_t last_space = -1;\n    while (last_space\
    \ != -1) {\n        last_space = find_last_not_of(\" \\n\", s);\n        res =\
    \ res.substr(0, last_space) + '-' + res.substr(last_space + 1);\n        s = last_space\
    \ + 1;\n    }\n    return res;", "    // your code here\n    std::size_t found\
    \ = -1;\n    std::size_t last_index = -1;\n    std::string fixed = \"\";\n   \
    \ \n    while ((found = text.find(' ', found + 1)) != std::string::npos) {\n \
    \       fixed += text[found];\n        std::string temp_last = found;\n      \
    \  while ((found = text.find(' ', found + 1)) == std::string::npos) {\n      \
    \      fixed += \"_\";\n        }\n        if (found > last_index + 1) {\n   \
    \         fixed += \"-\";\n            last_index = found;\n        }\n    }\n\
    \    return fixed;", "    // Complete the fix_spaces function below.\n    int\
    \ count=0;\n    while(count<text.length()){\n        if(text[count] == ' '){\n\
    \            count++;\n        }\n        else{\n            text.insert(count,\"\
    _\");\n            count++;\n        }\n    }\n    return text;", "  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  \n  int n = 2;\n  \n  while ((n = text.find(\"  \"\
    , n)) != std::string::npos) {\n    text = text.substr(0, n) + text.substr(n +\
    \ 2, 2).replace(\"  \", \"-\");\n  }\n  \n  return text;", "    for(auto i : text)\
    \ {\n        if(i != ' ') {\n            text += '_';\n        }\n    }\n    std::string\
    \ result;\n    size_t consecutive_count = 0;\n    for(size_t i = 0; i < text.size();\
    \ ++i) {\n        if(text[i] == ' ') {\n            consecutive_count++;\n   \
    \     }\n        else if(consecutive_count == 2) {\n            result += '-';\n\
    \            consecutive_count = 0;\n        }\n        else {\n            result\
    \ += text[i];\n        }\n    }\n    return result;", "    \n    std::regex space(\"\
    \\\\s+\");\n    std::regex space2(\"-\\\\s+\");\n    std::regex space3(\"-\\\\\
    s+\");\n    std::smatch match;\n    std::string newString = \"\";\n    std::string\
    \ temp = \"\";\n    \n    for (int i = 0; i < text.size(); i++) {\n        temp\
    \ = temp + text[i];\n        \n        if (std::regex_search(temp, match, space))\
    \ {\n            newString = newString + temp;\n            temp.clear();\n  \
    \      }\n        \n        if (std::regex_search(temp, match, space2)) {\n  \
    \          newString = newString + temp;\n            temp.clear();\n        }\n\
    \        \n        if (std::regex_search(temp, match, space3)) {\n           \
    \ newString = newString + temp;\n            temp.clear();\n        }\n    }\n\
    \    \n    return newString;", "    // If there are no spaces, just return text\n\
    \    if (text.empty()) {\n        return text;\n    }\n    // Initialize result\
    \ text to empty\n    std::string result;\n    // Loop through all characters in\
    \ text\n    for (char ch : text) {\n        // If character is a space\n     \
    \   if (ch == ' ') {\n            // Replace it with underscore\n            result.append(1,\
    \ '_');\n        } else {\n            // If character is not space, append the\
    \ character \n            // to result\n            result.append(1, ch);\n  \
    \      }\n    }\n    // Return result text if it has more than 2 consecutive spaces\n\
    \    if (result.size() > 2) {\n        return result;\n    }\n    // If result\
    \ text has less than 3 characters, add an underscore\n    if (result.size() <\
    \ 3) {\n        result.insert(result.begin(), 1, '_');\n    }\n    // Return result\
    \ text\n    return result;", "    std::replace(text.begin(), text.end(), ' ',\
    \ '_');\n    if (text.find('  ') != std::string::npos)\n        std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n    return text;", "    size_t pos = 0;\n    size_t\
    \ pos_next = pos;\n    size_t spaces_cnt = 0;\n    std::string res;\n\n    while\
    \ (pos < text.size()) {\n        if (text[pos] == ' ') {\n            spaces_cnt++;\n\
    \        }\n        if (spaces_cnt > 1) {\n            res+='_';\n           \
    \ spaces_cnt-=1;\n            pos_next = pos+1;\n        }\n        if (spaces_cnt\
    \ > 2) {\n            res+='-';\n            spaces_cnt-=2;\n            pos_next\
    \ = pos+1;\n        }\n        pos++;\n    }\n    res = text.substr(pos_next)\
    \ + res;\n    return res;", "    // your code goes here\n    text=text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end());\n    int len=0;\n    for(unsigned int i=0;i<text.length();++i)\n\
    \    {\n        if(text[i]==' ')\n        {\n            text.erase(i, 1);\n \
    \           ++i;\n        }\n    }\n    text=text.substr(len);\n    len=text.length();\n\
    \    if(text.length()>2 && text[len-1]==' ')\n    {\n        text.erase(len-1,\
    \ 1);\n    }\n    text=text+\" \";\n    len=text.length();\n    for(unsigned int\
    \ i=0;i<text.length();++i)\n    {\n        if(text[i]==' ')\n        {\n     \
    \       text.erase(i, 1);\n            ++i;\n        }\n    }\n    text=text.substr(len);\n\
    \    len=text.length();\n    for(int i=0;i<text.length();++i)\n    {\n       \
    \ if(text[i]=='-' && text[i-1]==' ')\n        {\n            text.erase(i, 1);\n\
    \            ++i;\n        }\n    }\n    text=text.substr(len);\n    len=text.length();\n\
    \    for(int i=0;i<text.length();++i)\n    {\n        if(text[i]==' ' && text[i-1]=='-'\
    \ && text[i-2]==' ')\n        {\n            text.erase(i, 1);\n            ++i;\n\
    \        }\n    }\n    text=text.substr(len);\n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::string ret = text;\n    // Replace multiple\
    \ consecutive spaces with a single -\n    for (size_t i = 0; i < ret.size(); i++)\
    \ {\n        if (ret[i] == ' ') {\n            if (i + 1 < ret.size() && ret[i\
    \ + 1] == ' ') {\n                ret[i] = '-';\n                ret[i + 1] =\
    \ '-';\n                i++;\n            }\n        }\n    }\n    return ret;",
  "    while(!text.empty()) {\n        auto iter = text.begin();\n        while(iter\
    \ != text.end() && isspace(*iter)) ++iter;\n        auto next = text.find(iter);\n\
    \        if(next != text.end()) {\n            auto after = text.find(iter, next);\n\
    \            if(after != text.end()) {\n                std::swap(iter, after);\n\
    \            }\n            ++iter;\n            next = text.find(iter, next);\n\
    \        }\n        if(iter != text.end()) {\n            auto before = text.find(iter);\n\
    \            if(before != text.end()) {\n                auto beforeNext = text.find(iter,\
    \ before);\n                if(beforeNext != text.end()) {\n                 \
    \   std::swap(iter, beforeNext);\n                }\n            }\n        }\n\
    \        auto end = text.end();\n        while(end > text.begin() && isspace(*--end))\
    \ ;\n        text = text.substr(0, iter) + std::string(\"-\") + text.substr(iter);\n\
    \    }\n    return text;", "\tsize_t spaces = 0;\n\tfor (int i = 0; i < text.length();\
    \ i++)\n\t\tif (text[i] == ' ')\n\t\t\tspaces++;\n\tif (spaces > 2)\n\t\treturn\
    \ text;\n\tstd::string res = \"\";\n\tfor (int i = 0; i < text.length(); i++)\n\
    \t\tif (text[i] == ' ')\n\t\t\tres += \"_\";\n\t\telse \n\t\t\tres += text[i];\n\
    \treturn res;", "    int start = 0;\n    int end = 0;\n    std::string new_text;\n\
    \n    while (true) {\n        end = text.find(\"  \", start);\n        if (end\
    \ == std::string::npos) {\n            break;\n        }\n        std::string\
    \ word = text.substr(start, end-start);\n        new_text.append(word);\n    \
    \    new_text.append(\"_\");\n        start = end+2;\n    }\n\n    end = text.find(\"\
    \  \", start);\n    while (end != std::string::npos) {\n        new_text.append(text.substr(start,\
    \ end - start));\n        new_text.append(\" \");\n        start = end + 2;\n\
    \        end = text.find(\"  \", start);\n    }\n\n    end = text.find(\"  \"\
    , start);\n    while (end != std::string::npos) {\n        new_text.append(text.substr(start,\
    \ end - start));\n        new_text.append(\"-\");\n        start = end + 2;\n\
    \        end = text.find(\"  \", start);\n    }\n    return new_text;", "\tstd::replace(text.begin(),\
    \ text.end(), ' ', '_');\n\tif (text.size() > 2) {\n\t\tstd::replace(text.begin(),\
    \ text.begin() + text.size() - 2, ' ', '-');\n\t}\n\treturn text;", "    std::string\
    \ rep_str;\n    int count=0;\n    for(int i=0;i<text.length();i++){\n        if(text[i]\
    \ == ' '){\n            count++;\n            if(i+1<text.length() && text[i+1]\
    \ == ' '){\n                rep_str.append(text[i]);\n            }else{\n   \
    \             rep_str.append(text[i],\"_\");\n            }\n        }else{\n\
    \            if(count>1){\n                rep_str.append(text[i],\"_\");\n  \
    \          }else{\n                rep_str.append(text[i]);\n            }\n \
    \           count=0;\n        }\n    }\n    return rep_str;", "    size_t i =\
    \ 0;\n    size_t j = text.size();\n    while (i < j) {\n        if (text[i] ==\
    \ ' ' && \n            (((i+1) < j) && \n             ((j-1) > i) && \n      \
    \       (text[i+1] == ' ' && text[j-1] == ' '))) {\n            text.insert(i,\
    \ ' ');\n            j = i + 2;\n        }\n        else \n            ++i;\n\
    \    }\n    if (i == j)\n        return text;\n    if (i != 0 && text[i - 1] ==\
    \ ' ' && \n        (j - i > 1) && (text[j] == ' ' && text[j-1] == ' '))\n    \
    \    return text.substr(0, i - 1) + text.substr(i, j - i);\n    else\n       \
    \ return text.substr(0, i);", "    std::string res = text;\n    size_t prev =\
    \ 0, pos = 0;\n    while (pos < res.size()) {\n        if (res[pos] == ' ') {\n\
    \            res[prev] = res[pos];\n            prev++;\n            pos++;\n\
    \        } else {\n            pos++;\n        }\n    }\n    if (prev > 0) res[prev]\
    \ = '_';\n    while (pos < res.size()) {\n        if (res[pos] == ' ' && prev\
    \ == pos) {\n            res[pos] = '-';\n            pos++;\n            prev++;\n\
    \        } else {\n            pos++;\n        }\n    }\n    return res;", " \
    \   std::string new_str = std::to_string(text.size()+1);\n    new_str[0] = '\\\
    0';\n    for (char &c : text) {\n        c = std::tolower(c);\n        if (c ==\
    \ ' ') {\n            new_str[text.size() - 1] = '-';\n        } else {\n    \
    \        new_str[text.size()] = c;\n        }\n    }\n    return new_str;", " \
    \   int n = text.length();\n    for (int i = 0; i < n; i++) {\n        char c\
    \ = text[i];\n        if (c == ' ') {\n            if (i == 0 || i == n - 1) \n\
    \                continue;\n            char next = text[i + 1];\n           \
    \ if (next == ' ') {\n                text[i] = '-';\n            } else {\n \
    \               text[i] = '_';\n            }\n        }\n    }\n    return text;",
  "    int spaceCount=0;\n    for(int i=0;i<text.size();i++) {\n        if(text[i]=='\
    \ ')\n            spaceCount++;\n        else {\n            if(spaceCount>=2)\
    \ {\n                text=text.substr(0,i)+\"-\"+text.substr(i+1);\n         \
    \       spaceCount=1;\n            }\n        }\n    }\n    return text;", " \
    \   std::replace(text.begin(), text.end(), ' ', '_');\n    bool consecutive =\
    \ false;\n    size_t pos = 0;\n    while(pos < text.size() && text[pos] == ' ')\
    \ {\n        pos++;\n    }\n    while(pos < text.size() && text[pos] == ' ') {\n\
    \        if(consecutive) {\n            text.insert(text.begin() + pos, \"-\"\
    );\n        } else {\n            consecutive = true;\n        }\n        pos++;\n\
    \    }\n    return text;", "    int i=0;\n    while ((i = text.find(\"  \")) !=\
    \ std::string::npos) {\n        text.replace(i, 3, \"_\");\n    }\n    if ((i\
    \ = text.find(\"  \")) != std::string::npos)\n        text.replace(i, 2, \"-\"\
    );\n    return text;", "    for(auto &c: text)\n        if(c==' ') c='_';\n  \
    \  \n    int nspace=0;\n    bool found = false;\n    for(auto &c: text)\n    \
    \    if(c==' ') found=true;\n        if(found){\n            nspace++;\n     \
    \       if(nspace==2)\n                text='-';\n        }\n    return text;",
  "    // Write your code here\n    \n    for(auto i = text.begin(); i != text.end();\
    \ i++)\n    {\n        if(*i == ' ')\n        {\n            if(i+1 == text.end())\n\
    \            {\n                text += '_';\n            }\n            else\n\
    \            {\n                text += '_';\n            }\n        }\n    }\n\
    \    \n    for(auto i = text.begin(); i != text.end(); i++)\n    {\n        if(*i\
    \ == ' ')\n        {\n            if(i+1 == text.end())\n            {\n     \
    \           text += '-';\n            }\n            else\n            {\n   \
    \             text += '-';\n            }\n        }\n    }\n    \n    return\
    \ text;", "   auto first_space = text.find(\"  \");\n   if(first_space != std::string::npos){\n\
    \      std::string before = text.substr(0, first_space);\n      std::string after\
    \ = text.substr(first_space+2, text.length()-2);\n      text = before + \"-\"\
    \ + after;\n   }\n   return text;", "    // Initialize a boolean flag to indicate\
    \ if the string has \n    // 2 or more consecutive spaces. \n    bool has_more_spaces\
    \ = false;\n    \n    // Iterate over the string and if the character is a space,\
    \ \n    // replace it with underscore. \n    for (char &c : text) {\n        if\
    \ (c == '_') has_more_spaces = true;\n        else if (c == ' ') \n          \
    \  c = has_more_spaces ? '_' : '-';\n        else has_more_spaces = false;\n \
    \   }\n    \n    // Return the modified string.\n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    // Check whether there are more than two consecutive\
    \ spaces\n    size_t i = 0;\n    while (i < text.length() && text[i] == ' ') {\n\
    \        i++;\n    }\n    if (i >= text.length()) {\n        // If there are no\
    \ more consecutive spaces, \n        // then replace all spaces with _\n     \
    \   return std::to_string(text.size()) + ' _';\n    }\n    else if (i + 1 == text.length())\
    \ {\n        // If there are only two consecutive spaces, \n        // then replace\
    \ all spaces with -\n        return std::to_string(text.size()) + '-';\n    }\n\
    \    else {\n        std::string sub = text;\n        sub.replace(i, 1, ' ');\n\
    \        // If there are more than two consecutive spaces, \n        // then replace\
    \ all spaces with -\n        return std::to_string(text.size()) + '-' + sub;\n\
    \    }", "    std::replace(text.begin(), text.end(), ' ', '_');\n    size_t found\
    \ = 0;\n    while (found < text.size() &&\n           text[found + 1] == ' ' &&\n\
    \           found != text.size() - 1) {\n        ++found;\n    }\n    if (found\
    \ != text.size()) {\n        while (found < text.size() &&\n               text[found\
    \ + 1] != ' ' &&\n               found != text.size() - 1) {\n            ++found;\n\
    \        }\n        if (found != text.size()) {\n            text.replace(found,\
    \ text.size() - 1, \" \");\n            text.replace(text.size() - 1, 1, \"_\"\
    );\n        }\n    }\n    return text;", "    for(int i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            text.erase(i, 1);\n      \
    \      text.insert(i, '_');\n        }\n    }\n\n    // The above loop will change\
    \ the string from:\n    // Hello World\n    // to\n    // Hello_World\n\n    //\
    \ The below loop will check if the string has more than 2 consecutive spaces\n\
    \    // If it does, then replace all consecutive spaces with -\n    int counter\
    \ = 0;\n    for(int i = 0; i < text.length(); i++) {\n        if(text[i] == '\
    \ ') {\n            counter++;\n        } else {\n            counter = 0;\n \
    \       }\n\n        if(counter > 2) {\n            text.erase(i, 1);\n      \
    \      text.insert(i, '_');\n        }\n    }\n\n    return text;", "    // TODO\n\
    \    std::string new_text;\n    \n    return new_text;", "    \n    // Initialization\n\
    \    int len = text.length();\n    std::string res = \"\";\n    \n    // If text\
    \ has only one space after removing all spaces\n    if (len < 2)\n        return\
    \ text;\n    \n    \n    for (int i = 0; i < len; i++) {\n        \n        //\
    \ If current character is a space\n        if (text[i] == ' ') {\n           \
    \ \n            // Replace all spaces with underscores\n            res += \"\
    _\";\n        }\n        \n        // If the current character is not a space\n\
    \        else if (text[i] != ' ') {\n            \n            // Replace all\
    \ consecutive spaces with -\n            res += \"-\";\n        }\n    }\n   \
    \ \n    return res;", "    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    text = text.erase(std::remove_if(text.begin(), text.end(), ::isspace), text.end());\n\
    \    if(text.find('  ') != std::string::npos) {\n        text = text.erase(std::remove(text.begin(),\
    \ text.end(), '  '), text.end());\n        std::replace(text.begin(), text.end(),\
    \ '  ', '-');\n    }\n    return text;", "    auto it = std::find_if(text.begin(),\
    \ text.end(), [](char c) { return c == ' '; });\n    text.erase(it, text.end());\n\
    \    for (auto it = std::find_if(text.begin(), text.end(), [](char c) { return\
    \ c == ' '; }); it != text.end();) {\n        text.erase(it);\n        text.insert(it,\
    \ *it);\n    }\n    it = std::find_if(text.begin(), text.end(), [](char c) { return\
    \ c == '-' });\n    text.erase(it, text.end());\n    return text;", "  int n =\
    \ text.size();\n  std::string out;\n  for (int i = 0; i < n; ++i) {\n    char\
    \ ch = text[i];\n    if (ch != ' ') out += ch;\n    else if (i + 1 < n && text[i\
    \ + 1] == ' ') \n      out += ' ';\n    else if (i + 2 < n && text[i + 1] == '\
    \ ' && text[i + 2] == ' ')\n      out += '-';\n  }\n  return out;", "    int num_spaces\
    \ = 0;\n    \n    int start_pos = 0;\n    \n    int end_pos = 0;\n    \n    int\
    \ prev_char = 0;\n    \n    std::string new_text;\n    \n    while(end_pos < text.length())\
    \ {\n        // Find space\n        while(text[start_pos] == ' ') {\n        \
    \    start_pos++;\n        }\n        \n        // Skip first space \n       \
    \ if(start_pos == 0) {\n            prev_char = 0;\n        } else {\n       \
    \     prev_char = text[start_pos];\n        }\n        \n        while(end_pos\
    \ < text.length()) {\n            // Find another space\n            while(text[end_pos]\
    \ == ' ') {\n                end_pos++;\n            }\n            \n       \
    \     if(end_pos == text.length()) {\n                new_text += text[start_pos];\n\
    \                start_pos = end_pos + 1;\n                break;\n          \
    \  }\n            \n            // Find next space\n            while(text[end_pos]\
    \ == ' ') {\n                end_pos++;\n            }\n            \n       \
    \     // If space is next to a letter, add underscore to space\n            if(end_pos\
    \ == text.length()) {\n                if(!isalpha(text[end_pos])) {\n       \
    \             new_text += text[start_pos];\n                    start_pos = end_pos\
    \ + 1;\n                    break;\n                }\n                \n    \
    \            if(num_spaces > 1 && text[start_pos] == ' ') {\n                \
    \    new_text += \"_\";\n                }\n                \n               \
    \ new_text += text[start_pos];\n                start_pos = end_pos + 1;\n   \
    \         }\n        }\n    }\n    \n    if(start_pos == text.length()) {\n  \
    \      return text;\n    }\n    \n    return new_text;", "    int length = text.length();\n\
    \    std::string ans;\n    for(int i = 0; i< length; i++){\n        if(isspace(text[i])\
    \ == true ){\n            ans += \"_\";\n        }\n        else if(ans.length()\
    \ > 2){\n            ans = ans.substr(0,ans.length()-2);\n        }\n        else\
    \ if(ans.length() == 2){\n            ans += \"_\";\n        }\n    }\n    return\
    \ ans;", "    for (auto &c : text)\n        if (c != ' ')\n            c = '_';\n\
    \    if (text.size() > 2 && text.back() == ' ')\n        text.pop_back();\n  \
    \  return std::move(text);", "  std::replace(text.begin(), text.end(), ' ', '_');\n\
    \  // If string has more than 2 consecutive spaces, replace all consecutive spaces\
    \ with -\n  if (text.find_first_of(\"  \") != std::string::npos)\n  {\n    std::string\
    \ temp_str = text;\n    std::replace(temp_str.begin(), temp_str.end(), ' ', '-');\n\
    \    text.assign(temp_str);\n  }\n  return text;", "    std::replace( text.begin(),\
    \ text.end(), ' ', '_');\n    \n    for(int i=0;i<text.size()-1;i++){\n      \
    \  if(text[i]==' ' && text[i+1]==' '){\n            text.erase(i+1,i+1);\n   \
    \         i = i - 1;\n        }\n    }\n    \n    std::string result;\n    \n\
    \    for(int i=0;i<text.size();i++){\n        if(text[i]==' ')\n            result\
    \ += text[i];\n    }\n    \n    return result;", "    std::string result;\n  \
    \  for(auto &c : text) {\n        if(std::isspace(c)) {\n            result.push_back('_');\n\
    \        }\n        else if(result.size() > 1) {\n            if(result.back()\
    \ == '_' && c != ' ') {\n                result.back() = '-';\n            }\n\
    \        }\n        else {\n            result.push_back(c);\n        }\n    }\n\
    \    return result;", "    // Store the result of the previous iteration \n  \
    \  // to avoid useless string construction\n    std::string prev = \"\";\n   \
    \ for (auto c : text) {\n        if (c == ' ') {\n            prev = std::to_string(prev.size())\
    \ + \"_\";\n        } else if (prev != \"\" && prev == c) {\n            prev\
    \ = std::to_string(prev.size()) + \"-\";\n        } else {\n            prev =\
    \ c;\n        }\n    }\n    return prev;", "    while(true){\n        std::string::size_type\
    \ pos = text.find_first_of(\" \");\n        if(pos == std::string::npos)\n   \
    \         break;\n        std::string s = text.substr(0,pos);\n        text.erase(0,\
    \ pos + 1);\n        while(text.find_first_of(\" \") != std::string::npos)\n \
    \           text.erase(0, text.find_first_of(\" \"));\n        std::string s2\
    \ = s;\n        while(s.find_first_of(\" \") != std::string::npos)\n         \
    \   s.replace(s.find_first_of(\" \"), 1, \"-\");\n        if(s==s2)\n        \
    \    break;\n    }\n    return text;", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), isspace), text.end()); \n    text.erase(std::replace_if(text.begin(),\
    \ text.end(), \n            [&](const char &c) {\n                return c ==\
    \ '_';\n            }), text.end()); \n    text.erase(std::replace_if(text.begin(),\
    \ text.end(), \n            [&](const char &c) {\n                return c ==\
    \ ' ';\n            }), text.end()); \n\n    int length = 0;\n    std::string\
    \ temp;\n    for(std::string::iterator it = text.begin(); it != text.end(); it++)\
    \ {\n        if(c == '_') {\n            temp.push_back(*it);\n        }\n   \
    \     else {\n            temp += *it;\n        }\n        length++;\n    }\n\n\
    \    if(length == 2) {\n        text.clear();\n        temp += \"-\";\n      \
    \  for(std::string::iterator it = temp.begin(); it != temp.end(); it++) {\n  \
    \          text += *it;\n        }\n    }\n\n    return text;", "  // TODO - your\
    \ code goes here\n  std::string fixed_text = \"\";\n  for (int i = 0; i < text.length();\
    \ i++)\n  {\n    if (text[i] == ' ')\n    {\n      fixed_text += \"_\";\n    }\n\
    \    if (i + 2 >= text.length())\n    {\n      fixed_text += \"-\";\n      i++;\n\
    \    }\n  }\n  return fixed_text;", "   \n   std::size_t len = text.length();\n\
    \n   for (std::size_t i = 1; i < len; ++i) {\n      if (text[i] == ' ') {\n  \
    \       auto new_end = std::replace_if(text.begin() + i, text.end(), [&i] (char\
    \ ch) {\n            if (std::isspace(ch)) {\n               return false;\n \
    \           } else {\n               return true;\n            }\n         },\
    \ ' ');\n         i = new_end - text.begin();\n      }\n   }\n\n   return text;",
  "    std::string space = \" \";\n    std::string hyphen = \"-\";\n    for (auto\
    \ &i : text) {\n        switch (i) {\n            case space:\n              \
    \  i = '_';\n                break;\n            case hyphen:\n              \
    \  i = '-';\n                break;\n        }\n    }\n    while (text.find(space)\
    \ != std::string::npos && text.find(\"  \") != std::string::npos) {\n        text\
    \ = text.replace(text.find(\"  \"), text.find(\"  \"), hyphen);\n    }\n    return\
    \ text;", "  std::string fixed_text;\n  \n  for (int i = 0; i < text.length();\
    \ i++) {\n    char c = text[i];\n    if (c == ' ') {\n      fixed_text += '_';\n\
    \    } else if (c != ' ' && c != '\\t') {\n      fixed_text += c;\n    }\n  }\n\
    \n  fixed_text = fixed_text.replace(/\\s+/g, '-');\n  \n  return fixed_text;",
  "    size_t pos_space = text.find_first_of(\" \");\n    size_t pos_double_space\
    \ = text.find_first_of(\" \", pos_space);\n    while ((pos_double_space != text.end())\
    \ && (pos_space != text.end())) {\n        text.replace(pos_space, 1, \"_\");\n\
    \        text.replace(pos_double_space, 1, \"_\");\n        size_t pos_space =\
    \ text.find_first_of(\" \", pos_double_space);\n        size_t pos_double_space\
    \ = text.find_first_of(\" \", pos_space);\n    }\n    return text;", "    text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end()); \n    // Eliminate consecutive spaces if there\
    \ are more than one\n    if(text.size() > 2)\n        text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end());\n    \n    // Return modified string\n    return\
    \ text;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if (text.size() >= 2) {\n        std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n    }\n    return text;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    int length = text.size();\n    if (length < 2)\n\
    \        return text;\n    std::string result;\n    for (int i = 1; i < length\
    \ - 1; ++i) {\n        if (text[i] == text[i + 1] && text[i] == ' ') {\n     \
    \       result += text[i];\n            ++i;\n        }\n        else {\n    \
    \        result += text[i] + '-';\n        }\n    }\n    return result;", "  \
    \  \n    // Loop through all characters in the text\n    for(int i=0; i<text.size();\
    \ i++){\n        // If the character is a space, \n        // then replace it\
    \ with _\n        if(text[i] == ' ')\n        {\n            text[i] = '_';\n\
    \        }\n        // Otherwise, if the character is a -,\n        // then replace\
    \ it with spaces again\n        else if(text[i] == '-')\n        {\n         \
    \   text[i] = ' ';\n        }\n    }\n    \n    // If there are consecutive spaces\n\
    \    // then replace them with -\n    if(text.find_first_of(' ') != text.npos)\n\
    \    {\n        std::string spaces = text.substr(text.find_first_of(' '));\n \
    \       std::string dashed = text.substr(0, text.find_first_of(' ')-1);\n    \
    \    text = dashed + spaces + \"-\" + dashed;\n    }\n    \n    return text;",
  "  // Check whether the string has more than 2 spaces\n  int space_count = 0;\n\
    \  for(int i = 0; i < text.length(); i++)\n    if(text[i] == ' ')\n      space_count++;\n\
    \  if(space_count >= 2)\n    return \"-\"; // if more than 2 consecutive spaces\
    \ replace them with -\n  \n  // Find all the spaces in the string and replace\
    \ them with _\n  \n  text.erase(std::remove_if(text.begin(), text.end(), ::isspace),\
    \ text.end()); // remove spaces in string\n  std::string fixed = \"\";\n  for(int\
    \ i = 0; i < text.length(); i++)\n    if(text[i] == ' ')\n      fixed += \"_\"\
    ;\n    else\n      fixed += text[i];\n  \n  return fixed;", "    // Your code\
    \ goes here\n    \n    if (text.size() == 0)\n        return text;\n    \n   \
    \ \n    int last_pos = 0, pos = 0;\n    std::string str1(text);\n    std::string\
    \ str2(\"\");\n    for (int i = 0; i < str1.size(); i++) {\n        if (str1[i]\
    \ == ' ') {\n            pos = i;\n            while (i < str1.size() && str1[i]\
    \ == ' ')\n                i++;\n            if (last_pos > 0 && pos - last_pos\
    \ > 2)\n                str2 += '-';\n            last_pos = pos;\n        }\n\
    \        else if (last_pos > 0)\n            str2 += '_';\n    }\n    \n    return\
    \ str2;", "    std::string fix_spaces;\n    size_t pos = 0;\n    while ((pos =\
    \ text.find(' ', pos)) != std::string::npos) {\n        fix_spaces += '_';\n \
    \       pos = pos + 1;\n    }\n    pos = 0;\n    while ((pos = text.find('  ',\
    \ pos)) != std::string::npos) {\n        fix_spaces += '-';\n        pos = pos\
    \ + 1;\n    }\n    pos = 0;\n    while ((pos = text.find(' ', pos)) != std::string::npos)\
    \ {\n        pos = text.find(' ', pos);\n        fix_spaces += '_';\n        pos\
    \ = pos + 1;\n    }\n    return fix_spaces;", "    std::string s = text;\n   \
    \ \n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n \
    \           s[i] = '-';\n        }\n    }\n\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] == ' ') {\n            std::size_t cnt = 0;\n     \
    \       while (s[i + 1] == ' ') {\n                cnt++;\n                i++;\n\
    \            }\n            s[i] = '-';\n            std::cout << cnt << std::endl;\n\
    \        }\n    }\n    \n    return s;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    std::string str = \"\";\n    bool flag = true;\n    for (int\
    \ i = 0; i < text.size(); i++) {\n        if (text[i] != ' ') {\n            str\
    \ += text[i];\n            flag = false;\n        } else if (flag == true) {\n\
    \            str += \"_\";\n            flag = true;\n        }\n    }\n    std::string\
    \ str1=\"\";\n    for(int i=0;i<text.size();i++){\n        if(text[i]==' '){\n\
    \            str1+='-';\n        }\n    }\n    return str;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::string result = text;\n    std::size_t index\
    \ = 1;\n    while (result.find(\" \", index) != std::string::npos) {\n       \
    \ index = result.find(\" \", index) + 1;\n        std::replace(result.begin()\
    \ + index, result.end(), ' ', '-');\n        index = 1;\n    }\n    return result;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find(\"  \"\
    , 0) != std::string::npos)\n        std::replace(text.begin(), text.end(), \"\
    \ \", \"-\");\n    return text;", "    int index = 0;\n    int current_spaces\
    \ = 0;\n    while (index < text.size()) {\n        if (text[index] == ' ') {\n\
    \            current_spaces++;\n        }\n        else if (current_spaces > 2)\
    \ {\n            text[index] = '_';\n        }\n        index++;\n    }\n    return\
    \ text;"]
stop_tokens:
- "\n}"
