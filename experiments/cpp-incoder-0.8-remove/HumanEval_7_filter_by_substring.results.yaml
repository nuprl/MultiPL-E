language: cpp
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> result;\n    std::copy(std::begin(strings), std::end(strings),\
    \ std::inserter(result, result.end()));\n    return std::copy_if(std::begin(strings),\
    \ std::end(strings), std::inserter(result, result.end()) ,\n        std::bind(std::equal_to<std::string>(),\
    \ std::placeholders::_1, substring));\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpem52ua3i.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpem52ua3i.cpp:7:24: error: could not convert \u2018std::copy_if<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >, std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >, std::_Bind<std::equal_to<std::__cxx11::basic_string<char> >(std::_Placeholder<1>,\
    \ std::__cxx11::basic_string<char>)> >(std::begin<std::vector<std::__cxx11::basic_string<char>\
    \ > >(strings), std::end<std::vector<std::__cxx11::basic_string<char> > >(strings),\
    \ std::inserter<std::set<std::__cxx11::basic_string<char> > >(result, result.std::set<std::__cxx11::basic_string<char>\
    \ >::end()), std::bind(_Func&&, _BoundArgs&& ...) [with _Func = std::equal_to<std::__cxx11::basic_string<char>\
    \ >; _BoundArgs = {const std::_Placeholder<1>&, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >&}; typename std::_Bind_helper<std::__is_socketlike<_Func>::value,\
    \ _Func, _BoundArgs ...>::type = std::_Bind<std::equal_to<std::__cxx11::basic_string<char>\
    \ >(std::_Placeholder<1>, std::__cxx11::basic_string<char>)>](std::placeholders::_1,\
    \ substring))\u2019 from \u2018std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n  \
    \  7 |     return std::copy_if(std::begin(strings), std::end(strings), std::inserter(result,\
    \ result.end()) ,\n      |            ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                        |\n      |                        std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >\n    8 |         std::bind(std::equal_to<std::string>(), std::placeholders::_1,\
    \ substring));\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116108
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create a temp list for holding our filtered strings\n    std::vector<std::string>\
    \ temp_strings;\n\n    // Loop through each string in input list\n    for (auto\
    \ it = strings.begin(); it != strings.end(); it++) {\n        // Check if our\
    \ current string contains the substring\n        if (std::find(*it, substring.begin(),\
    \ substring.end()) != substring.end())\n            temp_strings.push_back(*it);\n\
    \    }\n\n    return temp_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkp81may.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpwkp81may.cpp:11:62: error: no matching function for call to \u2018\
    find(std::__cxx11::basic_string<char>&, std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   11 |         if (std::find(*it,\
    \ substring.begin(), substring.end()) != substring.end())\n      |           \
    \                                                   ^\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwkp81may.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:373:5:\
    \ note: candidate: \u2018template<class _CharT2> typename __gnu_cxx::__enable_if<std::__is_char<_CharT2>::__value,\
    \ std::istreambuf_iterator<_CharT> >::__type std::find(std::istreambuf_iterator<_CharT>,\
    \ std::istreambuf_iterator<_CharT>, const _CharT2&)\u2019\n  373 |     find(istreambuf_iterator<_CharT>\
    \ __first,\n      |     ^~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:373:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwkp81may.cpp:11:62:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    std::istreambuf_iterator<_CharT>\u2019\n   11 |         if (std::find(*it, substring.begin(),\
    \ substring.end()) != substring.end())\n      |                              \
    \                                ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwkp81may.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3936:5:\
    \ note:"
  stdout: ''
  timestamp: 1660116108
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    assert(!strings.empty());\n    assert(substring);\n    std::vector<std::string>\
    \ substring_vec(substring);\n    std::set<std::string> all_strings(substring);\n\
    \    std::vector<std::string> results;\n    for (const auto &s : strings) {\n\
    \        all_strings.insert(s);\n    }\n    for (const auto &s : substring_vec)\
    \ {\n        results.push_back(all_strings.find(s));\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpy8u_xfgy.cpp:2:\n/tmp/tmpy8u_xfgy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpy8u_xfgy.cpp:6:5: error: invalid static_cast from type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to type \u2018bool\u2019\n\
    \    6 |     assert(substring);\n      |     ^~~~~~\n/tmp/tmpy8u_xfgy.cpp:7:53:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::vector(std::string&)\u2019\n    7 |     std::vector<std::string> substring_vec(substring);\n\
    \      |                                                     ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy8u_xfgy.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpy8u_xfgy.cpp:7:53: note:   candidate expects 3 arguments, 1\
    \ provided\n    7 |     std::vector<std::string> substring_vec(substring);\n \
    \     |                                                     ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,"
  stdout: ''
  timestamp: 1660116108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (auto const &str : strings)\
    \ {\n        if (substring.find(str) != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpk449l9ac: /tmp/tmpk449l9ac.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create a vector with the filtered results\n    std::vector<std::string>\
    \ filtered_strings;\n    // Loop through all strings\n    for (std::string &str\
    \ : strings)\n    {\n        // If this string contains the substring, add it\
    \ to our filtered list\n        if (substring in str)\n            filtered_strings.push_back(str);\n\
    \    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21v6agau.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp21v6agau.cpp:11:22: error: expected \u2018)\u2019 before \u2018in\u2019\
    \n   11 |         if (substring in str)\n      |            ~         ^~~\n  \
    \    |                      )\n/tmp/tmp21v6agau.cpp:11:13: error: could not convert\
    \ \u2018substring\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n   11 |         if (substring in str)\n      |        \
    \     ^~~~~~~~~\n      |             |\n      |             std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660116108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        if(substring == strings[i])\n            result.push_back(strings[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpy_24dfjk: /tmp/tmpy_24dfjk.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> out;\n    for (auto &it : strings) {\n     \
    \   auto pos = it.find(substring);\n        if (pos != std::string::npos)\n  \
    \          out.push_back(it);\n    }\n    return out;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> ans;\n    for (const auto& el : strings) {\n\
    \        if (el.find(substring) != std::string::npos) {\n            ans.push_back(el);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> ret;\n    for (std::string x : strings)\n  \
    \  {\n        if (x.find(substring) != std::string::npos)\n            ret.push_back(x);\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tstd::vector<std::string> outputs;\n\tfor (std::string &s : strings) {\n\
    \t\tif (s.find(substring) != std::string::npos) {\n\t\t\toutputs.push_back(s);\n\
    \t\t}\n\t}\n\treturn outputs;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    \n    for (std::string string :\
    \ strings)\n        if (string.find(substring) != std::string::npos)\n       \
    \     result.push_back(string);\n            \n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for(std::size_t i = 0; i < strings.size();\
    \ i++) {\n        if(strings[i].find(substring) != std::string::npos) {\n    \
    \        result.push_back(strings[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string cur : strings)\
    \ {\n        if (cur.find(substring) != std::string::npos) {\n            result.push_back(cur);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (auto &s: strings) {\n    if\
    \ (substring.find(s) != std::string::npos) filtered.push_back(s);\n  }\n  return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpwd6xplqo: /tmp/tmpwd6xplqo.cpp:14: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    for (auto it : strings) {\n      \
    \  if (it.find(substring) != std::string::npos)\n            res.push_back(it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (auto &str : strings)\n   \
    \     if (str.find(substring) != std::string::npos)\n            result.push_back(str);\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  // Store substring and its corresponding count\n  std::map<std::string,\
    \ int> substr_counter;\n  for (const auto &string : strings) {\n    // If the\
    \ current string is equal to the substring then increment the count\n    if (string.find(substring)\
    \ != std::string::npos) {\n      substr_counter[string]++;\n    }\n  }\n  // Now\
    \ filter the strings which have same count as substrings\n  std::vector<std::string>\
    \ filtered_strings;\n  for (const auto &s : strings) {\n    if (substr_counter[s]\
    \ > 1) {\n      filtered_strings.push_back(s);\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpkqfu9iey: /tmp/tmpkqfu9iey.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> output;\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        if(strings[i].find(substring) != std::string::npos) {\n    \
    \        output.push_back(strings[i]);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::unordered_set<std::string> string_set;\n    for(const auto &str\
    \ : strings) {\n        string_set.insert(str);\n    }\n    std::vector<std::string>\
    \ result;\n    for (const auto &str : strings) {\n        if (string_set.find(str)\
    \ != std::string::npos)\n            result.push_back(str);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1_446fb.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpv1_446fb.cpp:11:34: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::unordered_set<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018std::__detail::_Node_iterator<std::__cxx11::basic_string<char>, true,\
    \ true>\u2019} and \u2018const size_type\u2019 {aka \u2018const long unsigned\
    \ int\u2019})\n   11 |         if (string_set.find(str) != std::string::npos)\n\
    \      |             ~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |      \
    \                      |                     |\n      |                      \
    \      |                     const size_type {aka const long unsigned int}\n \
    \     |                            std::unordered_set<std::__cxx11::basic_string<char>\
    \ >::iterator {aka std::__detail::_Node_iterator<std::__cxx11::basic_string<char>,\
    \ true, true>}\nIn file included from /usr/include/c++/9/bits/hashtable.h:35,\n\
    \                 from /usr/include/c++/9/unordered_map:46,\n                \
    \ from /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpv1_446fb.cpp:2:\n/usr/include/c++/9/bits/hashtable_policy.h:311:5: note:\
    \ candidate: \u2018template<class _Value, bool _Cache_hash_code> bool std::__detail::operator!=(const\
    \ std::__detail::_Node_iterator_base<_Value, _Cache_hash_code>&, const std::__detail::_Node_iterator_base<_Value,\
    \ _Cache_hash_code>&)\u2019\n  311 |     operator!=(const _Node_iterator_base<_Value,\
    \ _Cache_hash_code>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/hashtable_policy.h:311:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpv1_446fb.cpp:11:50:\
    \ note:   mismatched types \u2018const std::__detail::_Node_iterator_base<_Value,\
    \ _Cache_hash_code>\u2019 and \u2018const size_type\u2019 {aka \u2018const long\
    \ unsigned int"
  stdout: ''
  timestamp: 1660116108
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (auto & str : strings) {\n\
    \        auto pos = str.find(substring);\n        if (pos != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    \n    for (auto & s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (std::string s: strings) {\n\
    \    if (s.find(substring) != std::string::npos) {\n      filtered.push_back(s);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  strings.erase(std::remove_if(strings.begin(), strings.end(),\n        \
    \                       [&](std::string str) {\n                             \
    \    return !str.find(substring);\n                               }),\n      \
    \          strings.end());\n  return strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpjt8w_2hm: /tmp/tmpjt8w_2hm.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  if(strings.size() == 0) {\n    return strings;\n  }\n  std::vector<std::string>\
    \ result;\n  std::string tempString;\n  for(unsigned int i = 0; i < strings.size();\
    \ ++i) {\n    tempString = strings[i];\n    if(substring.find(tempString) != std::string::npos)\
    \ {\n      result.push_back(strings[i]);\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmptz1_hox2: /tmp/tmptz1_hox2.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n   auto it = std::find_if(strings.begin(), strings.end(), [&](const std::string\
    \ &s) {\n      return s.find(substring) != std::string::npos;\n   });\n\n   std::vector<std::string>\
    \ result;\n   if (it != strings.end())\n      result.push_back(*it);\n\n   return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpy505pnb9: /tmp/tmpy505pnb9.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create a vector of all substrings\n    std::vector<std::string> all_substrings;\n\
    \    for (std::string str : strings)\n        all_substrings.push_back(str);\n\
    \n    // Filter the strings based on substring\n    std::vector<std::string> substrings_filtered;\n\
    \    for (std::string str : all_substrings) {\n        if (str.find(substring)\
    \ != std::string::npos)\n            substrings_filtered.push_back(str);\n   \
    \ }\n\n    return substrings_filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Get string length\n    int len = strings.size();\n\n    // Filter\
    \ strings by substring\n    for (int i = 0; i < len; i++) {\n        // If string\
    \ contains substring\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            // Return substring\n            strings.erase(std::remove(strings.begin(),\
    \ strings.end(), strings[i]), strings.end());\n        }\n    }\n    // Return\
    \ vector of strings\n    return strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpxwta1n51: /tmp/tmpxwta1n51.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> substring_tokens;\n    for (const std::string&\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos)\n      \
    \      substring_tokens.push_back(s);\n    }\n    return substring_tokens;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tstd::vector<std::string> filtered;\n\t// Iterate over all strings\n\tfor\
    \ (const auto& s : strings)\n\t\t// Iterate over all substrings in the string\n\
    \t\tfor (const auto& s2 : s)\n\t\t\t// If substring s2 exists inside the string\
    \ s, store it in filtered\n\t\t\tif (s2.find(substring) != std::string::npos)\n\
    \t\t\t\tfiltered.push_back(s);\n\treturn filtered;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsw8x5dra.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpsw8x5dra.cpp:11:11: error: request for member \u2018find\u2019 in \u2018\
    s2\u2019, which is of non-class type \u2018const char\u2019\n   11 |    if (s2.find(substring)\
    \ != std::string::npos)\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660116108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    for (std::string &str : strings) {\n        if (str.find(substring) !=\
    \ std::string::npos) continue;\n        strings.push_back(str);\n    }\n    return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp7hs9ubb9: /tmp/tmp7hs9ubb9.cpp:14: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // We iterate on the input list\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        // If the input string contains the substring we push it into\
    \ the output list\n        if (strings[i].find(substring) != std::string::npos)\
    \ {\n            strings.push_back(strings[i]);\n        }\n    }\n    // Return\
    \ the output list\n    return strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> substring_matches;\n    for (const auto& s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos)\n          \
    \  substring_matches.push_back(s);\n    }\n    return substring_matches;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116108
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string &string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    bool found_substring\
    \ = false;\n    for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            found_substring = true;\n        }\n        filtered_strings.push_back(s);\n\
    \    }\n    if (found_substring) {\n        return filtered_strings;\n    } else\
    \ {\n        throw std::runtime_error(\"The given string does not contain specified\
    \ substring\");\n    }\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::runtime_error'\n \
    \ what():  The given string does not contain specified substring\n"
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  // Create a vector of strings to store filtered results\n  std::vector<std::string>\
    \ filtered_strings;\n  // Copy each string in string vector to a temporary string\n\
    \  for (auto &str : strings) {\n    // If string contains substring then add it\
    \ to filtered_strings\n    if (str.find(substring) != std::string::npos) {\n \
    \     filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> retval;\n    for(auto str : strings) {\n   \
    \     if (substring.find(str) != std::string::npos) {\n            retval.push_back(str);\n\
    \        }\n    }\n    return retval;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpul37_ygv: /tmp/tmpul37_ygv.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  std::string curr_string =\
    \ \"\";\n  for (auto& i : strings) {\n    curr_string += i;\n    if (curr_string.find(substring)\
    \ != std::string::npos)\n      filtered_strings.push_back(i);\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp6efsq5oy: /tmp/tmp6efsq5oy.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    std::for_each(strings.begin(),\
    \ strings.end(), [&substring, &result](std::string & s) {\n        if (std::string(s).find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    });\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116108
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set_intersection(\n        std::begin(strings), std::end(strings),\
    \ std::begin(strings), std::begin(strings),\n        [&substring](const std::string\
    \ &s) { return s.find(substring) != std::string::npos; });\n    return std::vector();\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4isxceel.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp4isxceel.cpp:8:24: error: cannot deduce template arguments for \u2018\
    vector<...auto...>\u2019 from ()\n    8 |     return std::vector();\n      | \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4isxceel.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OutputIterator std::__set_intersection(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _InputIterator2 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _OutputIterator = filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:5313:48:   required from \u2018_OIter std::set_intersection(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _IIter2 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _OIter = filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>]\u2019\n/tmp/tmp4isxceel.cpp:7:94:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:5264:6: error: no match\
    \ for \u2018operator*\u2019 (operand type is \u2018filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>\u2019)\n 5264 |      *__result = *__first1;\n\
    \      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \             "
  stdout: ''
  timestamp: 1660116108
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<string> result;\n    // Go over the list strings and check\
    \ if each string contains substring\n    for(std::string str : strings) {\n  \
    \      // If substr is found\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpedl89f23.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpedl89f23.cpp:5:17: error: \u2018string\u2019 was not declared in this\
    \ scope\n    5 |     std::vector<string> result;\n      |                 ^~~~~~\n\
    /tmp/tmpedl89f23.cpp:5:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpedl89f23.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpedl89f23.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpedl89f23.cpp:5:23: error: template argument 1 is invalid\n    5 |    \
    \ std::vector<string> result;\n      |                       ^\n/tmp/tmpedl89f23.cpp:5:23:\
    \ error: template argument 2 is invalid\n/tmp/tmpedl89f23.cpp:10:20: error: request\
    \ for member \u2018push_back\u2019 in \u2018result\u2019, which is of non-class\
    \ type \u2018int\u2019\n   10 |             result.push_back(str);\n      |  \
    \                  ^~~~~~~~~\n/tmp/tmpedl89f23"
  stdout: ''
  timestamp: 1660116108
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> res;\n  for(auto &string : strings) {\n    if(substring\
    \ in string){\n      res.push_back(string);\n    }\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxzldt4tl.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpxzldt4tl.cpp:7:17: error: expected \u2018)\u2019 before \u2018in\u2019\
    \n    7 |     if(substring in string){\n      |       ~         ^~~\n      | \
    \                )\n/tmp/tmpxzldt4tl.cpp:7:8: error: could not convert \u2018\
    substring\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n    7 |     if(substring in string){\n      |        ^~~~~~~~~\n\
    \      |        |\n      |        std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660116108
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    assert(strings.size() > 0);\n    std::vector<std::string> filtered_strings;\n\
    \    for (size_t i=0; i<strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ == std::string::npos)\n            continue;\n        filtered_strings.push_back(strings[i]);\n\
    \    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpw_c772kc: /tmp/tmpw_c772kc.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660116109
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create a set with all the strings that we want to keep\n    std::set<std::string>\
    \ to_keep;\n\n    // For each string in the input, check if it contains the substring\
    \ or not\n    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != string::npos) {\n            to_keep.insert(string);\n        }\n    }\n\n\
    \    // Return the vector of strings that we want to keep\n    return std::vector<std::string>\
    \ (to_keep.begin(), to_keep.end());\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgo1tu83c.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpgo1tu83c.cpp:10:39: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   10 |         if (string.find(substring) != string::npos)\
    \ {\n      |                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660116109
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Code from: https://stackoverflow.com/questions/7494497/removing-substring-from-stdstring\n\
    \    std::unordered_set<std::string> string_set;\n    for (auto& str : strings)\n\
    \        string_set.insert(str);\n    std::vector<std::string> ret;\n    for (auto&\
    \ str : strings)\n        if (string_set.count(str) != 0)\n            ret.push_back(str);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpmomk4d_9: /tmp/tmpmomk4d_9.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116108
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tstd::vector<std::string> ret;\n\tfor (auto& str : strings) {\n\t\tif (str.find(substring)\
    \ != std::string::npos) {\n\t\t\tret.push_back(str);\n\t\t}\n\t}\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116108
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> out;\n    for (auto& str : strings) {\n    \
    \    if(str.find(substring) != std::string::npos) out.push_back(str);\n    }\n\
    \    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116109
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (auto s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      result.push_back(s);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (std::size_t i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         filtered.push_back(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> substring_filtered_strings;\n  for (std::string\
    \ s : strings) {\n    if (s.find(substring) != std::string::npos) {\n      substring_filtered_strings.push_back(s);\n\
    \    }\n  }\n  return substring_filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string word : strings)\
    \ {\n        if (substring.find(word) != std::string::npos)\n            result.push_back(word);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp8ocuyf0t: /tmp/tmp8ocuyf0t.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    bool is_sub = true;\n\
    \    for(unsigned int i = 0; i < strings.size(); i++){\n        if(strings[i].find(substring)\
    \ == strings[i].npos){\n            is_sub = false;\n        }\n    }\n\n    if(is_sub){\n\
    \        for(unsigned int i = 0; i < strings.size(); i++){\n            if(strings[i].find(substring)\
    \ == 0){\n                filtered_strings.push_back(strings[i]);\n          \
    \  }\n        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp1nejfo6c: /tmp/tmp1nejfo6c.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> res;\n  for (auto &str : strings) {\n    if (str.find(substring)\
    \ != std::string::npos)\n      res.push_back(str);\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_vector;\n    \n    for (auto &s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered_vector.push_back(s);\
    \ // Keep the string\n        }\n    }\n\n    return filtered_vector;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // First pass: filter out strings that don't contain substring\n    std::vector<std::string>\
    \ substring_filtered_strings;\n    for (const auto &str : strings) {\n       \
    \ if (substring.find(str) != std::string::npos) {\n            substring_filtered_strings.push_back(str);\n\
    \        }\n    }\n\n    // Second pass: keep all strings that contain substring\n\
    \    std::vector<std::string> contains_filtered_strings;\n    for (const auto\
    \ &str : substring_filtered_strings) {\n        contains_filtered_strings.push_back(substring.find(str)\
    \ != std::string::npos ? str : \"*NOT*FOUND*\");\n    }\n\n    return contains_filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp0rt3ii_u: /tmp/tmp0rt3ii_u.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    for (auto string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> output;\n    for(unsigned int i = 0; i < strings.size();\
    \ ++i)\n    {\n        if (strings[i].find(substring) != strings[i].npos)\n  \
    \          output.push_back(strings[i]);\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> res;\n  for(unsigned int i = 0; i < strings.size();\
    \ ++i){\n    if(strings[i].find(substring) != std::string::npos){\n      res.push_back(strings[i]);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> ret;\n  for (auto s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      ret.push_back(s);\n    }\n  }\n  return ret;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].find(substring) != std::string::npos)\n      result.push_back(strings[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for(auto & i : strings)\n     \
    \   std::find(i.cbegin(), i.cend(), substring) != i.cend()\n            ? result.push_back(i)\n\
    \            : \"\";\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqkzt_2x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpuqkzt_2x.cpp:9:15: error: second operand to the conditional operator\
    \ is of type \u2018void\u2019, but the third operand is neither a throw-expression\
    \ nor of type \u2018void\u2019\n    9 |             : \"\";\n      |         \
    \      ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpuqkzt_2x.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmpuqkzt_2x.cpp:7:50:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018ope"
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> out;\n    for (std::string &string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) out.push_back(string);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tstd::vector<std::string> output;\n\tfor (std::string s : strings) {\n\t\
    \tif (s.find(substring) != std::string::npos) {\n\t\t\toutput.push_back(s);\n\t\
    \t}\n\t}\n\treturn output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  for (auto &x : strings) {\n\
    \    if (x.find(substring) != std::string::npos) {\n      filtered_strings.emplace_back(x);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  for (std::string &s: strings)\
    \ {\n    if (std::find(s.begin(), s.end(), substring) != s.end()) {\n      filtered_strings.push_back(s);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprw3i1076.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmprw3i1076.cpp:7:48:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,"
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> results;\n    for (auto& string : strings) {\n\
    \        if (string.find(substring) != std::string::npos) {\n            results.push_back(string);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create output vector\n    std::vector<std::string> outputs;\n    for\
    \ (size_t i = 0; i < strings.size(); i++) {\n        // If substring is not in\
    \ string at index i, add string at index i to output vector\n        if (strings[i].find(substring)\
    \ == strings[i].npos) {\n            outputs.push_back(strings[i]);\n        }\n\
    \    }\n    // Return output\n    return outputs;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp35eojf6y: /tmp/tmp35eojf6y.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> new_strings;\n    for (auto &string : strings)\
    \ {\n        if (substring.find(string) != std::string::npos) \n            new_strings.push_back(string);\n\
    \    }\n    return new_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmppbfmctuk: /tmp/tmppbfmctuk.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (auto &s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    for (auto& s : strings)\
    \ {\n        if(s.find(substring) != std::string::npos)\n            filtered_strings.push_back(s);\n\
    \    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  for (auto string : strings)\
    \ {\n    if (substring == string) {\n      filtered_strings.push_back(string);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpn2idprr4: /tmp/tmpn2idprr4.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n   std::vector<std::string> filtered_strings;\n   for (size_t i = 0; i <\
    \ strings.size(); i++) {\n       if (strings[i].find(substring) != string::npos)\
    \ {\n           filtered_strings.push_back(strings[i]);\n       }\n   }\n   return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tphe6xn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp5tphe6xn.cpp:7:42: error: \u2018string\u2019 has not been declared\n\
    \    7 |        if (strings[i].find(substring) != string::npos) {\n      |   \
    \                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660116111
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> results;\n  for (const auto &s : strings) {\n\
    \    if (std::find(s.begin(), s.end(), substring) != s.end()) {\n      results.push_back(s);\n\
    \    }\n  }\n  return results;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3jy8x4qg.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp3jy8x4qg.cpp:7:48:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018const char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-lin"
  stdout: ''
  timestamp: 1660116111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> set;\n    for(auto& s: strings) {\n        if(s.find(substring)\
    \ != std::string::npos) {\n            set.insert(s);\n        }\n    }\n\n  \
    \  std::vector<std::string> output;\n    for(const auto& s: set) {\n        output.push_back(s);\n\
    \    }\n\n    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpt_j0f1lq: /tmp/tmpt_j0f1lq.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (auto & s : strings) {\n  \
    \      if (substring.find(s) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp6llfxzd_: /tmp/tmp6llfxzd_.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n\n    for (const auto& string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string input : strings)\
    \ {\n        if (input.find(substring) != std::string::npos) {\n            result.push_back(input);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    // The string is empty or has no substring\
    \ - return it immediately\n    if (strings.empty() || strings[0] == substring)\
    \ return res;\n    \n    // Iterate over all strings\n    for (std::string s :\
    \ strings) {\n        // The string contains the substring - add it\n        if\
    \ (s.find(substring) != std::string::npos) {\n            res.push_back(s);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpbnma4oe8: /tmp/tmpbnma4oe8.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    for (auto &v : strings) {\n      \
    \  if (v.find(substring) != std::string::npos) {\n            res.push_back(v);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116111
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> results;\n    for(auto s: strings) {\n     \
    \   if(substring.find(s) != std::string::npos)\n            results.push_back(s);\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpegc00n38: /tmp/tmpegc00n38.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> strings_copy;\n    std::transform(std::begin(strings),\
    \ std::end(strings), std::back_inserter(strings_copy), [](std::string &s) {return\
    \ s;});\n\n    std::vector<std::string> result;\n\n    for (std::vector<std::string>::iterator\
    \ it = std::begin(strings_copy); it != std::end(strings_copy); ++it) {\n     \
    \   if (*it == substring) {\n            result.push_back(*it);\n        }\n \
    \   }\n\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp0ooeoiuq: /tmp/tmp0ooeoiuq.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> outlist;\n    outlist.reserve(strings.size());\n\
    \    for(size_t i=0; i<strings.size(); i++) {\n        auto found=false;\n   \
    \     for(size_t j=0; j<strings[i].size(); j++) {\n            if(strings[i][j]\
    \ == substring[0]) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if(found) outlist.push_back(strings[i]);\n\
    \    }\n    return outlist;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpb8ywc_mq: /tmp/tmpb8ywc_mq.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (std::string str : strings) {\n\
    \    if (str.find(substring) != std::string::npos) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> ret;\n    bool any_filtered = false;\n    for\
    \ (auto &s : strings) {\n        if (substring.find(s) != std::string::npos) {\n\
    \            ret.push_back(s);\n            any_filtered = true;\n        }\n\
    \    }\n    if (!any_filtered) {\n        throw std::runtime_error(\"Substring\
    \ \\\"\" + substring + \"\\\" not found in any string in the input list!\");\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::runtime_error'\n \
    \ what():  Substring \"john\" not found in any string in the input list!\n"
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].find(substring) != std::string::npos) {\n      result.push_back(strings[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    assert(strings.size() > 0);\n    // First find the common beginning of\
    \ the substring\n    size_t common_start = 0;\n    size_t i = 0;\n    for (; i\
    \ < strings.size() - 1; i++) {\n        if (strings[i].compare(0, substring.size(),\
    \ substring) == 0) {\n            common_start = i;\n            break;\n    \
    \    }\n    }\n\n    // Then find the substring\n    std::string substring_copy\
    \ = substring;\n    size_t common_end = strings.size();\n    for (; i < strings.size()\
    \ - 1; i++) {\n        if (strings[i].compare(common_start, substring.size(),\
    \ substring_copy) == 0) {\n            common_end = i;\n            break;\n \
    \       }\n    }\n\n    // Then construct the result list from the common start\
    \ and common end\n    std::vector<std::string> result;\n    for (size_t i = common_start;\
    \ i <= common_end; i++) {\n        result.push_back(strings[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpz3u54ues: /tmp/tmpz3u54ues.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    bool contained = false;\n    for\
    \ (auto s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            contained = true;\n            result.push_back(s);\n        }\n\
    \    }\n    if (!contained) {\n        std::cerr << \"error: substring \" << substring\
    \ << \" not found among given strings: \";\n        for (auto s : strings) {\n\
    \            std::cerr << s << std::endl;\n        }\n        exit(1);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'error: substring john not found among given strings: '
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    bool found = false;\n    for (auto\
    \ &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            found = true;\n            result.push_back(string);\n      \
    \  }\n    }\n    if (found == false) {\n        result.push_back(substring);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp425kuu2g: /tmp/tmp425kuu2g.cpp:20: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> retval;\n    for (auto s : strings) {\n    \
    \    if (s.find(substring) != std::string::npos) {\n            retval.push_back(s);\n\
    \        }\n    }\n    return retval;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    assert(strings.size() > 0);\n    assert(substring.size() > 0);\n    std::vector<std::string>\
    \ result;\n    for(auto it = strings.begin(); it != strings.end(); ++it) {\n \
    \       auto pos = std::search(it, strings.end(), substring.begin(), substring.end());\n\
    \        if (pos != std::string::npos) {\n            result.push_back(std::string(it,\
    \ pos));\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qae5sin.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp6qae5sin.cpp:10:17: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 and \u2018const size_type\u2019\
    \ {aka \u2018const long unsigned int\u2019})\n   10 |         if (pos != std::string::npos)\
    \ {\n      |             ~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |             |     \
    \              |\n      |             |                   const size_type {aka\
    \ const long unsigned int}\n      |             __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6qae5sin.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6qae5sin.cpp:10:33: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018const size_type\u2019 {aka \u2018const long unsigned int\u2019}\n\
    \   10 |         if (pos != std::string::npos) {\n      |                    \
    \             ^~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /u"
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> ret;\n    std::string toBeSearched = \"\\\"\"\
    \ + substring;\n    for (size_t i = 0; i < strings.size(); ++i) {\n        bool\
    \ found = false;\n        std::string s = strings[i];\n        if (s.find(toBeSearched)\
    \ == 0) {\n            ret.push_back(s);\n            found = true;\n        }\n\
    \        if (found) {\n            continue;\n        }\n        if (s.find(substring,\
    \ 0) == 0) {\n            ret.push_back(s);\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp8zz9jeos: /tmp/tmp8zz9jeos.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"aaaxxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"aaaxxy", (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (size_t i = 0; i < strings.size();\
    \ i++) {\n    if (strings[i].find(substring) != std::string::npos) {\n      result.push_back(strings[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    std::set_intersection(strings.begin(),\
    \ strings.end(), std::back_inserter(res), [](std::string s){return s.find(substring)\
    \ != std::string::npos; });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpakc3_z6x.cpp: In lambda function:\n/tmp/tmpakc3_z6x.cpp:6:116:\
    \ error: \u2018substring\u2019 is not captured\n    6 |     std::set_intersection(strings.begin(),\
    \ strings.end(), std::back_inserter(res), [](std::string s){return s.find(substring)\
    \ != std::string::npos; });\n      |                                         \
    \                                                                           ^~~~~~~~~\n\
    /tmp/tmpakc3_z6x.cpp:6:85: note: the lambda has no capture-default\n    6 |  \
    \   std::set_intersection(strings.begin(), strings.end(), std::back_inserter(res),\
    \ [](std::string s){return s.find(substring) != std::string::npos; });\n     \
    \ |                                                                          \
    \           ^\n/tmp/tmpakc3_z6x.cpp:4:92: note: \u2018std::string substring\u2019\
    \ declared here\n    4 | std::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n      |                                 \
    \                                               ~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpakc3_z6x.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)\u2019:\n/tmp/tmpakc3_z6x.cpp:6:150: error: no matching function\
    \ for call to \u2018set_intersection(std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator, std::vector<std::__cxx11::basic_string<char> >::iterator, std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >, filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)::<lambda(std::string)>)\u2019\
    \n    6 |     std::set_intersection(strings.begin(), strings.end(), std::back_inserter(res),\
    \ [](std::string s){return s.find(substring) != std::string::npos; });\n     \
    \ |                                                                          \
    \                                                                            ^\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from "
  stdout: ''
  timestamp: 1660116113
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> filter;\n    for (const auto& string : strings)\
    \ {\n        std::string lower = string.toLowerCase();\n        if (substring.find(lower)\
    \ != std::string::npos) {\n            filter.insert(string);\n        }\n   \
    \ }\n    return filter;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hyc3vqc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp3hyc3vqc.cpp:7:36: error: \u2018const class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toLowerCase\u2019\n    7 |         std::string lower\
    \ = string.toLowerCase();\n      |                                    ^~~~~~~~~~~\n\
    /tmp/tmp3hyc3vqc.cpp:12:12: error: could not convert \u2018filter\u2019 from \u2018\
    std::set<std::__cxx11::basic_string<char> >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019\n   12 |     return filter;\n      |            ^~~~~~\n      |    \
    \        |\n      |            std::set<std::__cxx11::basic_string<char> >\n"
  stdout: ''
  timestamp: 1660116113
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> outputVector;\n    \n    for (auto i : strings)\
    \ {\n        if (substring in i) {\n            outputVector.push_back(i);\n \
    \       }\n    }\n    \n    return outputVector;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ox1w0fp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp5ox1w0fp.cpp:8:22: error: expected \u2018)\u2019 before \u2018in\u2019\
    \n    8 |         if (substring in i) {\n      |            ~         ^~~\n  \
    \    |                      )\n/tmp/tmp5ox1w0fp.cpp:8:13: error: could not convert\
    \ \u2018substring\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n    8 |         if (substring in i) {\n      |        \
    \     ^~~~~~~~~\n      |             |\n      |             std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (std::string s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116113
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    for(auto &string: strings)\
    \ {\n        if(string.find(substring) != std::string::npos)\n            filtered_strings.push_back(string);\n\
    \    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for(auto &s: strings){\n      \
    \  if(s.find(substring)!=std::string::npos)\n            result.push_back(s);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> substrings;\n    // Loop through the strings\
    \ and add strings that contain substring to the new vector\n    for(auto s: strings)\
    \ {\n        if(s.find(substring) != std::string::npos) {\n            substrings.push_back(s);\n\
    \        }\n    }\n    return substrings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create a list of strings that will hold the filtered ones\n    std::vector<std::string>\
    \ filtered_strings;\n\n    // Check if substring is empty or null\n    if (substring.empty())\n\
    \        return filtered_strings;\n\n    // Check every string in strings\n  \
    \  for (std::string string : strings)\n    {\n        // Check if string contains\
    \ the substring\n        if (string.find(substring) != std::string::npos)\n  \
    \      {\n            // Add string to list\n            filtered_strings.push_back(std::move(string));\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tauto it = std::find_if(strings.begin(), strings.end(), [substring](const\
    \ std::string &str) {\n\t\treturn str.find(substring) != std::string::npos;\n\t\
    });\n\tstd::vector<std::string> result;\n\twhile (it != strings.end()) {\n\t\t\
    result.push_back(*it);\n\t\tit++;\n\t}\n\treturn result;\n}\nint main() {\n  \
    \  auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpnytwv_0z: /tmp/tmpnytwv_0z.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (const auto &s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (auto& str : strings) {\n   \
    \ if (std::find(str.begin(), str.end(), substring) == str.end()) {\n      filtered.push_back(str);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp50r2japi.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp50r2japi.cpp:7:52:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,"
  stdout: ''
  timestamp: 1660116114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::cout << \"Input list of strings before filtering: \" << std::endl;\n\
    \    for (int i = 0; i < strings.size(); i++) {\n        std::cout << strings[i]\
    \ << std::endl;\n    }\n    // Sort input list\n    std::sort(strings.begin(),\
    \ strings.end());\n    // Filter list\n    std::vector<std::string> filtered_list;\n\
    \    std::string::size_type pos = 0;\n    for (std::string::size_type i = 0; i\
    \ < strings.size(); i++) {\n        while (pos < strings[i].length() && strings[i].substr(pos,\
    \ substring.length()) == substring) {\n            filtered_list.push_back(strings[i]);\n\
    \            pos = 0;\n        }\n        pos += strings[i].length();\n    }\n\
    \    std::cout << \"Input list of strings after filtering: \" << std::endl;\n\
    \    for (int i = 0; i < filtered_list.size(); i++) {\n        std::cout << filtered_list[i]\
    \ << std::endl;\n    }\n    return filtered_list;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpputo986f: /tmp/tmpputo986f.cpp:30: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: "Input list of strings before filtering: \nInput list of strings after filtering:\
    \ \nInput list of strings before filtering: \nxxx\nasd\nxxy\njohn doe\nxxxAAA\n\
    xxx\nInput list of strings after filtering: \n"
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (auto const &str : strings)\n\
    \        if (str.find(substring) != std::string::npos)\n            filtered.push_back(str);\n\
    \    return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string line : strings)\
    \ {\n        if (line.find(substring) != std::string::npos) {\n            result.push_back(line);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (auto& x : strings) {\n    if (x.find(substring)\
    \ != std::string::npos) {\n      result.emplace_back(x);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // We make a copy of the original list and remove all items without substring\n\
    \    std::vector<std::string> filtered;\n    for (auto & str : strings) {\n  \
    \      auto pos = str.find(substring);\n        if (pos != std::string::npos)\
    \ {\n            filtered.push_back(str);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  for (int i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].find(substring) != std::string::npos) {\n      filtered_strings.push_back(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    for (const std::string& i : strings)\n\
    \        if (i.find(substring) != std::string::npos)\n            res.push_back(i);\n\
    \    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> s;\n    for (auto &i : strings) {\n        if (i.find(substring)\
    \ != std::string::npos) {\n            s.insert(i);\n        }\n    }\n    return\
    \ std::move(s);\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplaz8lw0o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmplaz8lw0o.cpp:11:21: error: could not convert \u2018std::move<std::set<std::__cxx11::basic_string<char>\
    \ >&>(s)\u2019 from \u2018std::remove_reference<std::set<std::__cxx11::basic_string<char>\
    \ >&>::type\u2019 {aka \u2018std::set<std::__cxx11::basic_string<char> >\u2019\
    } to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n   11 |     return\
    \ std::move(s);\n      |            ~~~~~~~~~^~~\n      |                    \
    \ |\n      |                     std::remove_reference<std::set<std::__cxx11::basic_string<char>\
    \ >&>::type {aka std::set<std::__cxx11::basic_string<char> >}\n"
  stdout: ''
  timestamp: 1660116114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (const auto &s : strings) {\n\
    \    if (substring.find(s) != std::string::npos) {\n      filtered.push_back(s);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp0k58giew: /tmp/tmp0k58giew.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // TODO: Write the filter code\n    return strings;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmphiaz40zp: /tmp/tmphiaz40zp.cpp:11: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    for (std::string s :\
    \ strings) {\n        if (s.find(substring) != std::string::npos) {\n        \
    \    filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n\n    std::string search_string(substring);\n\
    \n    for(const auto& s: strings) {\n        size_t pos = 0;\n        size_t start_pos\
    \ = 0;\n        while((pos = s.find(search_string, start_pos)) != std::string::npos)\
    \ {\n            result.push_back(s.substr(start_pos, pos-start_pos));\n     \
    \       start_pos = pos + search_string.size();\n        }\n        if(start_pos\
    \ == s.length())\n            result.push_back(s);\n    }\n\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpfglodfqa: /tmp/tmpfglodfqa.cpp:25: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::unordered_set<std::string> result;\n  for (const auto &s : strings)\
    \ {\n    if (s.find(substring) != std::string::npos) {\n      result.insert(s);\n\
    \    }\n  }\n  return std::vector<std::string>(result.begin(), result.end());\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmphwpbs4pr: /tmp/tmphwpbs4pr.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (const auto& str : strings)\n\
    \        if (std::find(str.begin(), str.end(), substring) != str.end()) result.push_back(str);\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqglyciyi.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmpqglyciyi.cpp:7:56:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018const char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-lin"
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (std::string s: strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Create a result vector of the correct size to store the output\n \
    \   std::vector<std::string> result;\n    // Iterate over the list of strings\
    \ to filter\n    for (const auto& s : strings) {\n        // If the current string\
    \ contains the substring, add it to the result\n        if (s.find(substring)\
    \ != std::string::npos)\n            result.push_back(s);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116114
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> set_substrings;\n    for (auto& i : strings) {\n\
    \        set_substrings.insert(i);\n    }\n    std::vector<std::string> result;\n\
    \    for (const auto& i : set_substrings) {\n        if (i == substring) {\n \
    \           result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpkgc31urr: /tmp/tmpkgc31urr.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (std::string s : strings)\n \
    \   if (contains(substring, s))\n      filtered.push_back(s);\n  return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7o6sqg7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpd7o6sqg7.cpp:7:9: error: \u2018contains\u2019 was not declared in this\
    \ scope\n    7 |     if (contains(substring, s))\n      |         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (auto &s : strings) {\n    if\
    \ (s.find(substring) != std::string::npos) {\n      filtered.push_back(s);\n \
    \   }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    std::set<std::string> strings_set;\n\
    \    for (auto const& s : strings) {\n        strings_set.insert(s);\n    }\n\
    \    for (auto const& s : strings_set) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmphl147f9t: /tmp/tmphl147f9t.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  // Create a filtered vector\n  std::vector<std::string> filterd_vector;\n\
    \  // If there is some element in the vector that contains given substring\n \
    \ for (auto& elem : strings) {\n    if (elem.find(substring) != std::string::npos)\
    \ {\n      filterd_vector.push_back(elem);\n    }\n  }\n  // Return the vector\n\
    \  return filterd_vector;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> seen;\n  std::vector<std::string> res;\n  for(auto\
    \ s : strings) {\n    if(s.find(substring) != std::string::npos) {\n      res.push_back(s);\n\
    \      seen.insert(s);\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> ret;\n    for (const auto& str : strings)\n\
    \        if (str.find(substring) != std::string::npos)\n            ret.push_back(str);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    std::set<std::string> strings_set;\n\
    \    \n    for (auto &string : strings) {\n        if (strings_set.find(string)\
    \ == strings_set.end())\n            strings_set.insert(string);\n    }\n    \n\
    \    for (auto &string : strings) {\n        if (strings_set.find(string) != strings_set.end())\n\
    \            result.push_back(std::move(string));\n    }\n    \n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpdtc5k2rx: /tmp/tmpdtc5k2rx.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    std::set<std::string> s;\n    for\
    \ (std::string s : strings) s.insert(s);\n    for (std::string s : strings) s.erase(s.find(substring));\n\
    \    for (std::string s : strings) s.insert(substring);\n    for (std::string\
    \ s : strings) result.push_back(s);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpupk6cofi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpupk6cofi.cpp:7:45: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::insert(std::string&)\u2019\
    \n    7 |     for (std::string s : strings) s.insert(s);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpupk6cofi.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p"
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  for (std::string string :\
    \ strings) {\n    if (string.find(substring) != std::string::npos) {\n      filtered_strings.push_back(string);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> strings_set;\n    for(std::string item:strings)\
    \ strings_set.insert(item);\n    std::vector<std::string> result;\n    for(auto\
    \ item:strings_set){\n        if(item.find(substring)!=std::string::npos)\n  \
    \          result.push_back(item)\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkviy96o0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpkviy96o0.cpp:10:35: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   10 |             result.push_back(item)\n      |                 \
    \                  ^\n      |                                   ;\n   11 |   \
    \  }\n      |     ~                              \n"
  stdout: ''
  timestamp: 1660116114
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> out;\n    for (auto& s : strings) {\n      \
    \  if (s.find(substring) != std::string::npos) {\n            out.emplace_back(s);\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> result;\n  for (auto str : strings) {\n    if (str.find(substring)\
    \ != std::string::npos) result.insert(str);\n  }\n  return std::vector<std::string>(result.begin(),\
    \ result.end());\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmprickd3r8: /tmp/tmprickd3r8.cpp:14: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for(auto & s: strings) {\n    if(s.find(substring)\
    \ != std::string::npos) result.push_back(s);\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116115
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 0; i < strings.size();\
    \ ++i) {\n    if (std::find(strings[i].begin(), strings[i].end(), substring) !=\
    \ strings[i].end()) {\n      result.push_back(strings[i]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9mlsay49.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp9mlsay49.cpp:7:66:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,"
  stdout: ''
  timestamp: 1660116115
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  \n  // First we count how many times substring appears in each string \n\
    \  std::map<std::string, size_t> string_counts;\n  for (std::string s : strings)\n\
    \    string_counts[s] += 1;\n  \n  // Then we create new string and we append\
    \ substrings whose count is greater than 0 to the new string\n  std::vector<std::string>\
    \ result;\n  for (std::map<std::string, size_t>::iterator it = string_counts.begin();\
    \ it != string_counts.end(); ++it) {\n    if (it->second > 0) {\n      result.push_back(it->first);\n\
    \    }\n  }\n\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpy3w7tg87: /tmp/tmpy3w7tg87.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116116
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> string_set;\n  for (auto &i : strings) {\n    if\
    \ (string_set.find(i) == string_set) {\n      std::cout << \"'\" << i << \"' contains\
    \ substring: '\" << substring << \"'\" << std::endl;\n      continue;\n    }\n\
    \    string_set.insert(i);\n  }\n  return strings;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgukfp400.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpgukfp400.cpp:7:28: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::set<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    } and \u2018std::set<std::__cxx11::basic_string<char> >\u2019)\n    7 |     if\
    \ (string_set.find(i) == string_set) {\n      |         ~~~~~~~~~~~~~~~~~~ ^~\
    \ ~~~~~~~~~~\n      |                        |      |\n      |               \
    \         |      std::set<std::__cxx11::basic_string<char> >\n      |        \
    \                std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >}\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmpgukfp400.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5: note: candidate:\
    \ \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&,\
    \ const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const\
    \ sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1026:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpgukfp400.cpp:7:31: note:   \u2018std::set<std::__cxx11::basic_string<char>\
    \ >::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n    7 |     if (string_set.find(i) == string_set) {\n      |               \
    \                ^~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpgukfp400.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx1"
  stdout: ''
  timestamp: 1660116115
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (const auto& string : strings)\n\
    \        if (string.find(substring) != std::string::npos)\n            result.push_back(string);\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116116
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> seen;\n  for(auto &i : strings){\n      if(seen.find(i)\
    \ == seen.end())\n      {\n          seen.insert(i);\n      }\n  }\n  return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpkv2atgs0: /tmp/tmpkv2atgs0.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    bool found_substring = false;\n\
    \    for (auto& str : strings) {\n        if (substring.find(str) != std::string::npos)\
    \ {\n            found_substring = true;\n            result.push_back(str);\n\
    \        }\n    }\n    if (!found_substring) {\n        result.push_back(strings[0]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n\n    for (auto const &s : strings)\
    \ {\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116116
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    bool found = false;\n    for (std::string\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         found = true;\n        }\n    }\n    if (found) {\n        result.push_back(strings.front());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpq2u0yt71: /tmp/tmpq2u0yt71.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116116
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> ret;\n    for (auto const& str : strings) {\n\
    \        auto pos = str.find(substring);\n        if (pos != std::string::npos)\
    \ {\n            ret.push_back(str);\n        }\n    }\n    return ret;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116116
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> string_set;\n  for(auto& x : strings)\n    if(x ==\
    \ substring)\n      string_set.insert(x);\n  std::vector<std::string> output;\n\
    \  for(auto& x : strings)\n    if(string_set.find(x) != string_set.end())\n  \
    \    output.push_back(x);\n  return output;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp24jjyi6t: /tmp/tmp24jjyi6t.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::string filtered_strings;\n  for (auto &string : strings) {\n    if\
    \ (string.find(substring) != string::npos) {\n      filtered_strings += string\
    \ + '\\n';\n    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtgszuth.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpdtgszuth.cpp:7:35: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n    7 |     if (string.find(substring) != string::npos) {\n\
    \      |                                   ^~~~~~\n/tmp/tmpdtgszuth.cpp:11:10:\
    \ error: could not convert \u2018filtered_strings\u2019 from \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019\n   11 |   return filtered_strings;\n      |          ^~~~~~~~~~~~~~~~\n\
    \      |          |\n      |          std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660116116
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> results;\n    for (std::string string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            results.push_back(string.substr(0,\
    \ string.find(substring)));\n        }\n    }\n    return results;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp9vuxtl5i: /tmp/tmp9vuxtl5i.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filteredStrings;\n    for (auto &str : strings)\
    \ {\n        if (str.find(substring) != std::string::npos)\n            filteredStrings.push_back(str);\n\
    \    }\n    return filteredStrings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116116
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (auto& s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116116
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (std::size_t i = 0; i < strings.size();\
    \ i++) {\n        size_t pos = strings[i].find(substring);\n        if (pos !=\
    \ std::string::npos)\n            filtered.push_back(strings[i]);\n    }\n   \
    \ return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string str : strings)\
    \ {\n        if(str.find(substring) != std::string::npos)\n            result.push_back(str);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> res;\n  for (auto &s : strings)\n    if (s.find(substring)\
    \ != std::string::npos) res.push_back(s);\n  return res;\n}\nint main() {\n  \
    \  auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::cout << \"Number of strings: \" << strings.size() << std::endl;\n\
    \    // Store unique strings in set\n    std::set<std::string> uniqueStrings;\n\
    \    \n    // Iterate through list of strings\n    for (std::vector<std::string>::const_iterator\
    \ it(strings.begin()); it != strings.end(); ++it)\n    {\n        // Check if\
    \ the current string is equals the substring\n        if (*it == substring)\n\
    \        {\n            uniqueStrings.insert(*it);\n        }\n    }\n\n    //\
    \ Create a vector of unique strings\n    std::vector<std::string> uniqueStringsVec;\n\
    \    \n    // Copy unique strings from set to vector\n    for (std::set<std::string>::const_iterator\
    \ it(uniqueStrings.begin()); it != uniqueStrings.end(); ++it)\n    {\n       \
    \ uniqueStringsVec.push_back(*it);\n    }\n\n    // Print number of strings filtered\
    \ for substring\n    std::cout << \"Number of strings filtered for substring:\
    \ \" << uniqueStringsVec.size() << std::endl;\n\n    return uniqueStringsVec;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp9wc1mwk_: /tmp/tmp9wc1mwk_.cpp:36: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: 'Number of strings: 0

    Number of strings filtered for substring: 0

    Number of strings: 6

    Number of strings filtered for substring: 1

    '
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    assert(!strings.empty());\n    assert(substring);\n\n    std::vector<std::string>\
    \ result;\n    std::set<std::string> to_delete;\n\n    for(auto it=strings.begin();it!=strings.end();it++)\
    \ {\n        std::string candidate = *it;\n\n        // Delete the string from\
    \ the list if we already have the substring\n        if(candidate.find(substring)!=std::string::npos)\
    \ {\n            to_delete.insert(candidate);\n        } else {\n            result.push_back(candidate);\n\
    \        }\n    }\n\n    // Delete the strings from the list that have been removed\n\
    \    for(auto it=to_delete.begin();it!=to_delete.end();it++) {\n        strings.erase(std::remove(strings.begin(),\
    \ strings.end(), *it), strings.end());\n    }\n\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpnc446h8o.cpp:2:\n/tmp/tmpnc446h8o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpnc446h8o.cpp:6:5: error: invalid static_cast from type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to type \u2018bool\u2019\n\
    \    6 |     assert(substring);\n      |     ^~~~~~\n"
  stdout: ''
  timestamp: 1660116116
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  std::copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result),\n               [&substring](std::string s) {\n\
    \                 return s.find(substring) != std::string::npos;\n           \
    \    });\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116116
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> output;\n    for (auto const& string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            output.push_back(string);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> output; // Store the filtered strings\n  for (const\
    \ auto& string : strings) {\n    if (string.find(substring) != std::string::npos)\
    \ output.push_back(string);\n  }\n  return output;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    \n    for (auto it = strings.begin();\
    \ it != strings.end(); ++it) {\n        if (std::strstr(*it, substring) == NULL)\n\
    \            result.push_back(std::string(*it));\n    }\n\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5z3jrjp7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp5z3jrjp7.cpp:8:39: error: no matching function for call to \u2018strstr(std::__cxx11::basic_string<char>&,\
    \ std::string&)\u2019\n    8 |         if (std::strstr(*it, substring) == NULL)\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/cstring:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmp5z3jrjp7.cpp:2:\n/usr/include/string.h:312:20:\
    \ note: candidate: \u2018const char* strstr(const char*, const char*)\u2019\n\
    \  312 | extern const char *strstr (const char *__haystack, const char *__needle)\n\
    \      |                    ^~~~~~\n/usr/include/string.h:312:40: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n  312 | extern const char *strstr (const char *__haystack,\
    \ const char *__needle)\n      |                            ~~~~~~~~~~~~^~~~~~~~~~\n\
    /usr/include/string.h:310:14: note: candidate: \u2018char* strstr(char*, const\
    \ char*)\u2019\n  310 | extern char *strstr (char *__haystack, const char *__needle)\n\
    \      |              ^~~~~~\n/usr/include/string.h:310:28: note:   no known conversion\
    \ for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018char*\u2019\
    \n  310 | extern char *strstr (char *__haystack, const char *__needle)\n     \
    \ |                      ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tstd::vector<std::string> out;\n\tstd::set<std::string> ss;\n\tfor(auto\
    \ &s: strings){\n\t\tif(s.find(substring) == 0) ss.insert(s);\n\t}\n\tfor(auto\
    \ &s: ss) out.push_back(s);\n\treturn out;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp_emobkn9: /tmp/tmp_emobkn9.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> output;\n  for (auto &item : strings) {\n    if\
    \ (item.find(substring) != std::string::npos) {\n      output.push_back(item);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> result;\n  for (auto& string : strings) {\n    if\
    \ (string.find(substring) != std::string::npos)\n      result.insert(string);\n\
    \  }\n  return std::vector<std::string>(result.begin(), result.end());\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpzymom2j_: /tmp/tmpzymom2j_.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  std::string current_string\
    \ = \"\";\n  for (auto it = strings.begin(); it != strings.end(); it++) {\n  \
    \  current_string += (*it);\n    if (current_string.find(substring) != std::string::npos)\
    \ {\n      filtered_strings.push_back(*it);\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmplvd3nd8m: /tmp/tmplvd3nd8m.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (std::string str : strings) {\n\
    \    if (str.find(substring) != std::string::npos) {\n      result.push_back(str);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n    for(auto& string: strings)\
    \ {\n        std::size_t found = string.find(substring);\n        if(found !=\
    \ std::string::npos) {\n            filtered_strings.push_back(string);\n    \
    \    }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::regex re(substring);\n  return std::remove_copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(result), re);\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae2oruju.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpae2oruju.cpp:6:81: error: \u2018result\u2019 was not declared in this\
    \ scope\n    6 |   return std::remove_copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result), re);\n      |                                  \
    \                                               ^~~~~~\n"
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Initialize output list\n    std::vector<std::string> out;\n    //\
    \ Loop through all strings and keep only those containing given substring\n  \
    \  for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            out.push_back(str);\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for (std::string s : strings) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Store the strings we need\n    std::vector<std::string> result;\n\
    \    // Iterate over all strings\n    for (auto& s : strings) {\n        // If\
    \ it contains the substring, add it to the list\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    // Return the resulting list\n    return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> out;\n    // Split each string into words\n\
    \    for (std::string word : strings) {\n        // If the word doesn't contain\
    \ the substring, add it to the output\n        if (word.find(substring) == std::string::npos)\n\
    \            out.push_back(word);\n    }\n    return out;\n}\nint main() {\n \
    \   auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpfotg31gh: /tmp/tmpfotg31gh.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    bool flag = false;\n\n    for (std::string\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n            flag = true;\n        }\n    }\n \
    \   if (!flag) {\n        result.push_back(\"\");\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpfjbfef3u: /tmp/tmpfjbfef3u.cpp:21: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n\tstd::vector<string> filtered_strings;\n\tstd::set<std::string> substrings;\n\
    \tfor (string s : strings) {\n\t\tif (substring.find(s) != string::npos) {\n\t\
    \t\tsubstrings.insert(s);\n\t\t}\n\t}\n\tfor (string s : substrings) {\n\t\tfiltered_strings.push_back(s);\n\
    \t}\n\treturn filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g6awnks.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp8g6awnks.cpp:5:14: error: \u2018string\u2019 was not declared in this\
    \ scope\n    5 |  std::vector<string> filtered_strings;\n      |             \
    \ ^~~~~~\n/tmp/tmp8g6awnks.cpp:5:14: note: suggested alternatives:\nIn file included\
    \ from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8g6awnks.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp8g6awnks.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp8g6awnks.cpp:5:20: error: template argument 1 is invalid\n    5 |  std::vector<string>\
    \ filtered_strings;\n      |                    ^\n/tmp/tmp8g6awnks.cpp:5:20:\
    \ error: template argument 2 is invalid\n/tmp/tmp8g6awnks.cpp:7:13: error: expected\
    \ \u2018;\u2019 before \u2018s\u2019\n    7 |  for (string s : strings) {\n  \
    \    |             ^~\n      |             ;\n/tmp/tmp8g6awnks.cpp:12:2: error:\
    \ expected primary-expression bef"
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (std::vector<std::string>::iterator\
    \ i = strings.begin(); i != strings.end(); ++i) {\n    if (contains(*i, substring))\
    \ {\n      result.emplace_back(*i);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bl7c95j.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp8bl7c95j.cpp:7:9: error: \u2018contains\u2019 was not declared in this\
    \ scope\n    7 |     if (contains(*i, substring)) {\n      |         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    for (std::string str: strings) {\n\
    \        if (str.find(substring) != std::string::npos) {\n            res.push_back(str);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered_strings;\n\n    for (const auto& str\
    \ : strings)\n    {\n        if (str.find(substring) != std::string::npos)\n \
    \       {\n            filtered_strings.push_back(str);\n        }\n    }\n\n\
    \    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> strings_out;\n    for(auto s : strings) {\n\
    \        auto pos = s.find(substring);\n        if(pos != std::string::npos) {\n\
    \            strings_out.push_back(s);\n        }\n    }\n    return strings_out;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> res;\n    for (std::string &str : strings) {\n\
    \        if (str.find(substring) != std::string::npos) {\n            res.push_back(str);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for(auto &item : strings)\n    if(item.find(substring)\
    \ != std::string::npos)\n      result.push_back(item)\n  return result;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf__00izp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpf__00izp.cpp:8:29: error: expected \u2018;\u2019 before \u2018return\u2019\
    \n    8 |       result.push_back(item)\n      |                             ^\n\
    \      |                             ;\n    9 |   return result;\n      |   ~~~~~~\
    \                     \n/tmp/tmpf__00izp.cpp:10:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   10 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::string filtered = \"\";\n  for (std::string curr : strings)\n    if\
    \ (curr.find(substring) != std::string::npos)\n      filtered = filtered + curr\
    \ + \"\\n\";\n  return splitByLine(filtered);\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwl26v09_.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpwl26v09_.cpp:9:10: error: \u2018splitByLine\u2019 was not declared\
    \ in this scope\n    9 |   return splitByLine(filtered);\n      |          ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    std::string word;\n    for (int\
    \ i=0; i < strings.size(); i++){\n        word = strings[i];\n        if (word.find(substring)\
    \ != std::string::npos){\n            filtered.push_back(word);\n        }\n \
    \   }\n    return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116117
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> found_elements;\n    for(auto &elem: strings)\n\
    \    {\n        if(elem.find(substring) != std::string::npos)\n            found_elements.insert(elem);\n\
    \    }\n    return found_elements;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4a4gbkmn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp4a4gbkmn.cpp:11:12: error: could not convert \u2018found_elements\u2019\
    \ from \u2018std::set<std::__cxx11::basic_string<char> >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019\n   11 |     return found_elements;\n      |            ^~~~~~~~~~~~~~\n\
    \      |            |\n      |            std::set<std::__cxx11::basic_string<char>\
    \ >\n"
  stdout: ''
  timestamp: 1660116117
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> result;\n  for (int i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].find(substring) != std::string::npos) {\n      result.push_back(strings[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116112
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  \n  // Make new empty list\n  std::vector<std::string> filtered_strings;\n\
    \  \n  for (std::string &str : strings) {\n    if (substring.find(str) != std::string::npos)\
    \ {\n      filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp6hddx36p: /tmp/tmp6hddx36p.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116118
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> strings_set(strings);\n    std::vector<std::string>\
    \ result;\n    for (std::set<std::string>::iterator it = strings_set.begin();\
    \ it != strings_set.end(); ++it) {\n        if ((*it).find(substring) != std::string::npos)\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpogf2ciu2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpogf2ciu2.cpp:5:46: error: no matching function for call to \u2018std::set<std::__cxx11::basic_string<char>\
    \ >::set(std::vector<std::__cxx11::basic_string<char> >&)\u2019\n    5 |     std::set<std::string>\
    \ strings_set(strings);\n      |                                             \
    \ ^\nIn file included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpogf2ciu2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:271:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::set<_Key, _Compare,\
    \ _Alloc>::set(_InputIterator, _InputIterator, const allocator_type&)\u2019\n\
    \  271 |  set(_InputIterator __first, _InputIterator __last,\n      |  ^~~\n/usr/include/c++/9/bits/stl_set.h:271:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpogf2ciu2.cpp:5:46:\
    \ note:   candidate expects 3 arguments, 1 provided\n    5 |     std::set<std::string>\
    \ strings_set(strings);\n      |                                             \
    \ ^\nIn file included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpogf2ciu2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:265:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::set(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Key = std::__cxx11::basic_string<char>; _Compare\
    \ = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char>\
    \ >]\u2019\n  265 |       set(initializer_list<value_type> __l, const allocator_type&\
    \ __a)\n      |       ^~~\n/usr/include/c++/9/bits/stl_set.h:265:7: note:   candidate\
    \ expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/stl_set.h:259:7: note:\
    \ candidate: \u2018std::set<_Key, _Compare, _Alloc>::set(st"
  stdout: ''
  timestamp: 1660116117
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    // Use an index to make the algorithm\
    \ faster\n    std::vector<bool> matched(strings.size(), false);\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        matched[s.find(substring)] = true;\n        }\n    }\n    for (int i\
    \ = 0; i < strings.size(); ++i) {\n        if (matched[i]) {\n            result.push_back(strings[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpdagag9wi: /tmp/tmpdagag9wi.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    std::string s = substring;\n  \
    \  std::regex e(substring, std::regex_constants::icase);\n    for (size_t i =\
    \ 0; i < strings.size(); i++) {\n        if (std::regex_search(strings[i], e))\
    \ {\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> outputs;\n    std::set<std::string> uniquestrings;\n\
    \    for (std::string s : strings)\n    {\n        std::set<std::string>::iterator\
    \ it = uniquestrings.find(s);\n        if (it == uniquestrings.end())\n      \
    \  {\n            uniquestrings.insert(s);\n            outputs.push_back(s);\n\
    \        }\n    }\n    return outputs;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmpjmeb4wop: /tmp/tmpjmeb4wop.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116118
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector < std::string > res;\n    std::vector < std::string >::iterator\
    \ it;\n    for (it = strings.begin(); it != strings.end(); ++it) {\n        if\
    \ (std::search(*it, substring.begin(), substring.end()) != substring.end()) {\n\
    \            res.push_back(*it);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnwds30ex.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpnwds30ex.cpp:8:64: error: no matching function for call to \u2018search(std::__cxx11::basic_string<char>&,\
    \ std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator)\u2019\
    \n    8 |         if (std::search(*it, substring.begin(), substring.end()) !=\
    \ substring.end()) {\n      |                                                \
    \                ^\nIn file included from /usr/include/c++/9/algorithm:62,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnwds30ex.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4176:5:\
    \ note: candidate: \u2018template<class _FIter1, class _FIter2> _FIter1 std::search(_FIter1,\
    \ _FIter1, _FIter2, _FIter2)\u2019\n 4176 |     search(_ForwardIterator1 __first1,\
    \ _ForwardIterator1 __last1,\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4176:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnwds30ex.cpp:8:64:\
    \ note:   deduced conflicting types for parameter \u2018_FIter1\u2019 (\u2018\
    std::__cxx11::basic_string<char>\u2019 and \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019)\n    8 |         if (std::search(*it,\
    \ substring.begin(), substring.end()) != substring.end()) {\n      |         \
    \                                                       ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnwds30ex.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4216:5:\
    \ note: candidate: \u2018template<class _FIter1, class _FIter2, class _BinaryPredicate>\
    \ _FIter1 std::search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate)\u2019\
    \n 4216 |     search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,\n\
    \      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4216:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnwds30ex.cpp:8:64"
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    // Keep only those strings containing given substring\n    std::vector<std::string>\
    \ result;\n    for(std::string s: strings)\n        if(s.find(substring) != std::string::npos)\n\
    \            result.push_back(s);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::set<std::string> substrings;\n  std::copy(std::begin(substring), std::end(substring),\
    \ std::inserter(substrings, substrings.end()));\n  std::vector<std::string> filtered;\n\
    \  for (const auto& string : strings) {\n    if (substrings.find(string) == substrings.end())\n\
    \      filtered.emplace_back(string);\n  }\n  return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/specfun.h:45,\n         \
    \        from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpoqmszk_p.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:\
    \ In instantiation of \u2018static _OI std::__copy_move<false, false, std::random_access_iterator_tag>::__copy_m(_II,\
    \ _II, _OI) [with _II = char*; _OI = std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >]\u2019:\n/usr/include/c++/9/bits/stl_algobase.h:404:30:   required from\
    \ \u2018_OI std::__copy_move_a(_II, _II, _OI) [with bool _IsMove = false; _II\
    \ = char*; _OI = std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/usr/include/c++/9/bits/stl_algobase.h:441:30:   required from \u2018\
    _OI std::__copy_move_a2(_II, _II, _OI) [with bool _IsMove = false; _II = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OI = std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/usr/include/c++/9/bits/stl_algobase.h:474:7:   required from \u2018\
    _OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _OI = std::insert_iterator<std::set<std::__cxx11::basic_string<char> > >]\u2019\
    \n/tmp/tmpoqmszk_p.cpp:6:100:   required from here\n/usr/include/c++/9/bits/stl_algobase.h:342:18:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::insert_iterator<std::set<std::__cxx11::basic_string<char>\
    \ > >\u2019 and \u2018char\u2019)\n  342 |        *__result = *__first;\n    \
    \  |        ~~~~~~~~~~^~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpoqmszk_p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:716:7:\
    \ note: candidate: \u2018std::insert_iterator<_Container>& std::insert_iterator<_Container>::operator=(const\
    \ typename _Container::valu"
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (auto s : strings)\n    {\n\
    \        auto i = s.find(substring);\n        if (i != std::string::npos)\n  \
    \      {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> result;\n    for(unsigned int i = 0; i < strings.size();\
    \ i++)\n        if(strings[i].find(substring) != std::string::npos)\n        \
    \    result.push_back(strings[i]);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (auto &string: strings)\n\
    \    {\n        bool found = false;\n        std::string temp = string;\n    \
    \    \n        // Iterate through string until first instance of substring\n \
    \       for (size_t i = 0; i < temp.length(); i++)\n        {\n            if\
    \ (temp.substr(i, substring.length()) == substring)\n            {\n         \
    \       found = true;\n                break;\n            }\n        }\n\n  \
    \      // If substring is found remove it from string\n        if (found)\n  \
    \      {\n            filtered.push_back(string);\n        }\n    }\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  assert(!strings[0].find(substring));\n  return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660116119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> filtered;\n    for (std::vector<std::string>::iterator\
    \ iter = strings.begin(); iter != strings.end(); iter++) {\n        if (0 == substring.find((*iter)))\
    \ {\n            filtered.push_back(*iter);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp3a3pmvgm: /tmp/tmp3a3pmvgm.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({(std::string)"xxx",
    (std::string)"asd", (std::string)"xxy", (std::string)"john doe", (std::string)"xxxAAA",
    (std::string)"xxx"})), ("xxx")) == (std::vector<std::string>({(std::string)"xxx",
    (std::string)"xxxAAA", (std::string)"xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> out;\n    for (auto &it : strings) {\n     \
    \   if (it.find(substring) != std::string::npos)\n            out.emplace_back(it);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered_strings;\n  for (auto it = strings.begin();\
    \ it != strings.end(); ++it) {\n    if (it->find(substring) != std::string::npos)\
    \ {\n      filtered_strings.push_back(it->c_str());\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::vector<std::string> output;\n    for (auto it = strings.begin();\
    \ it != strings.end(); ++it)\n    {\n        if (std::find(*it, substring, 0)\
    \ != *it) {\n            std::remove(*it, strings.end(), *it);\n        }\n  \
    \  }\n    return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9srfn44s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp9srfn44s.cpp:9:48: error: no matching function for call to \u2018remove(std::__cxx11::basic_string<char>&,\
    \ std::vector<std::__cxx11::basic_string<char> >::iterator, std::__cxx11::basic_string<char>&)\u2019\
    \n    9 |             std::remove(*it, strings.end(), *it);\n      |         \
    \                                       ^\nIn file included from /usr/include/c++/9/cstdio:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:46,\n\
    \                 from /tmp/tmp9srfn44s.cpp:2:\n/usr/include/stdio.h:146:12: note:\
    \ candidate: \u2018int remove(const char*)\u2019\n  146 | extern int remove (const\
    \ char *__filename) __THROW;\n      |            ^~~~~~\n/usr/include/stdio.h:146:12:\
    \ note:   candidate expects 1 argument, 3 provided\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9srfn44s.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:902:5:\
    \ note: candidate: \u2018template<class _FIter, class _Tp> _FIter std::remove(_FIter,\
    \ _FIter, const _Tp&)\u2019\n  902 |     remove(_ForwardIterator __first, _ForwardIterator\
    \ __last,\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:902:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9srfn44s.cpp:9:48:\
    \ note:   deduced conflicting types for parameter \u2018_FIter\u2019 (\u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019)\n    9 |             std::remove(*it, strings.end(), *it);\n    \
    \  |                                                ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9srfn44s.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:224:1:\
    \ note: candidate: \u2018template<class"
  stdout: ''
  timestamp: 1660116118
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  std::vector<std::string> filtered;\n  for (const auto &str : strings) {\n\
    \    if (str.find(substring) != std::string::npos) {\n      filtered.push_back(str);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116118
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n    std::set<std::string> filtered;\n    for (const std::string& s : strings)\
    \ {\n        if (std::find(s.cbegin(), s.cend(), substring) != s.cend())\n   \
    \         filtered.insert(s);\n    }\n    return filtered.size() == 0 ? std::vector<std::string>()\
    \ : filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa9aib4z1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpa9aib4z1.cpp:10:33: error: operands to ?: have different types \u2018\
    std::vector<std::__cxx11::basic_string<char> >\u2019 and \u2018std::set<std::__cxx11::basic_string<char>\
    \ >\u2019\n   10 |     return filtered.size() == 0 ? std::vector<std::string>()\
    \ : filtered;\n      |            ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpa9aib4z1.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmpa9"
  stdout: ''
  timestamp: 1660116118
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\nstd::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n  \n  assert(strings.size() > 1);\n  \n  std::vector<std::string> ret(1);\n\
    \  \n  for (int i=0; i<strings.size(); i++) {\n    \n    if (strings[i].find(substring)\
    \ != std::string::npos) {\n      ret.push_back(strings[i]);\n    }\n  }\n  \n\
    \  return ret;\n}\nint main() {\n    auto candidate = filter_by_substring;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"xxx\", (std::string)\"\
    asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"xxxAAA\"\
    , (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: Exception
  stderr: 'tmp_zrpnrht: /tmp/tmp_zrpnrht.cpp:6: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 1'' failed.

    '
  stdout: ''
  timestamp: 1660116119
