language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long i = 0;\n    long long x = l[0], y = l[0];\n    bool found\
    \ = false;\n    while (i < l.size()) {\n        if (l[i] < x) {\n            x\
    \ = l[i];\n        } else if (l[i] > y) {\n            y = l[i];\n           \
    \ found = true;\n        } else {\n            return false;\n        }\n    \
    \    i++;\n    }\n    return found;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0umm7ayb: /tmp/tmp0umm7ayb.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = INT_MAX;\n    for (long long i : l) {\n        if\
    \ (i == ans - 1) {\n            return false;\n        } else if (i == ans + 1)\
    \ {\n            return true;\n        }\n        ans = i;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphzaqvlbq: /tmp/tmphzaqvlbq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long max= std::numeric_limits<long long>::max();\n    for(long\
    \ long i=l.size() - 1; i>=0; i--)\n        if(l[i] > l[i - 1])\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqm4f9n0l: /tmp/tmpqm4f9n0l.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // Return True is list elements are monotonically\
    \ increasing or decreasing.\n    bool ans = false;\n    for (int i = 0; i < n;\
    \ ++i) {\n        int k = i;\n        while (k > 0 && (l[k] > l[k - 1])) {\n \
    \           ans = true;\n            k = k - 1;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaebbrf1t: /tmp/tmpaebbrf1t.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long min = l[0];\n    long max = l[0];\n    for (long i : l) {\n \
    \       if (i > max) {\n            max = i;\n        } else if (i < min) {\n\
    \            min = i;\n        }\n    }\n    if (max <= min) {\n        return\
    \ false;\n    }\n    for (long i : l) {\n        if (i > max) {\n            return\
    \ false;\n        } else if (i < min) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyk15tcsv: /tmp/tmpyk15tcsv.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int min = INT_MAX;\n    for (int i = 0; i <\
    \ n; i++) {\n        if (l[i] < min)\n            min = l[i];\n        else if\
    \ (l[i] > max)\n            max = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38fj64lt.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp38fj64lt.cpp:10:25: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   10 |         else if (l[i]\
    \ > max)\n      |                         ^~~\n      |                       \
    \  std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n       \
    \          from /tmp/tmp38fj64lt.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  if (n <= 1) return false;\n  for (int i = 1; i\
    \ < n; i++) {\n    if (l[i - 1] >= l[i]) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpes2cz9iu: /tmp/tmpes2cz9iu.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++)\n        if (l[i] <= l[i - 1]) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpt5j26aqx: /tmp/tmpt5j26aqx.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() >= 2);\n    long long sum = 0;\n    for (long i =\
    \ 1; i < l.size(); i++) {\n        sum += l[i] - l[i - 1];\n    }\n    return\
    \ sum == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpltc8e_9n: /tmp/tmpltc8e_9n.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    if (n < 3) return\
    \ true;\n    for (int i = 1; i < n; ++i) {\n        if (l[i - 1] > l[i]) return\
    \ true;\n        if (l[i - 1] < l[i]) return false;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7a3nx_pi: /tmp/tmp7a3nx_pi.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 1;\n    for (auto el : l) {\n        if (el < ans)\n\
    \            return false;\n        ans = el;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp588m63q_: /tmp/tmp588m63q_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int i = 0, j = 0, n = l.size() - 1;\n  for (; i < n; i++) {\n    for\
    \ (j = i + 1; j < n; j++) {\n      if (l[i] > l[j]) break;\n      if (l[i] < l[j])\
    \ return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr9sfsa4t: /tmp/tmpr9sfsa4t.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Base case \n    if (l.empty())\n        return true;\n    \n  \
    \  // Compare first and last elements\n    if (l[0] > l[l.size() - 1])\n     \
    \   return false;\n    \n    return monotonic(l.subrange(1, l.size() - 1));\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprihns6hi.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprihns6hi.cpp:13:24: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subrange\u2019\n   13 |     return monotonic(l.subrange(1,\
    \ l.size() - 1));\n      |                        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long res = 0;\n    for (long i = 0; i < l.size(); i++) {\n  \
    \      res += l[i];\n        if (res > 0) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpku24tm7m: /tmp/tmpku24tm7m.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  long long res = 0, s = 0;\n  for (long long i : l) {\n    s += i;\n\
    \    res = (res > s) ? res : s;\n  }\n  return (res > 0);\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_f50lsjv: /tmp/tmp_f50lsjv.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n   auto start = l[0];\n   auto end = l[0];\n   for (long i = 1;  i < l.size();\
    \  i++) {\n      if (l[i] > end) return false;\n      end = std::max(l[i], end);\n\
    \   }\n   return true;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqinppilv: /tmp/tmpqinppilv.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] < l[i - 1]) {\n \
    \     return false;\n    } else if (l[i] > l[i - 1]) {\n      return true;\n \
    \   }\n  }\n  return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbxb36l52: /tmp/tmpbxb36l52.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int size = l.size();\n  if (size == 0)\n    return false;\n  long pre\
    \ = l[0], cur = pre;\n  for (int i = 1; i < size; i++) {\n    if (cur < l[i])\
    \ {\n      return false;\n    }\n    cur = l[i];\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9ybl17lk: /tmp/tmp9ybl17lk.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() <= 1);\n    return l.front() >= l.back();\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpscdriaiv: /tmp/tmpscdriaiv.cpp:5: bool monotonic(std::vector<long int>):
    Assertion `l.size() <= 1'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) {\n        return false;\n    }\n    long mid1 =\
    \ l[l.size() / 2];\n    long mid2 = l[l.size() / 2 - 1];\n    if (mid1 > mid2)\
    \ {\n        std::swap(mid1, mid2);\n    }\n    for (int i = 0; i < l.size() -\
    \ 1; ++i) {\n        if (l[i] > mid1 && l[i + 1] < mid1) {\n            return\
    \ false;\n        }\n        if (l[i] < mid2 && l[i + 1] > mid2) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp48df3abq: /tmp/tmp48df3abq.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  // Check if all elements in list is monotonically increasing\n  long\
    \ prev = l[0];\n  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] > prev) {\n\
    \      return false;\n    }\n    prev = l[i];\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4qbczmiu: /tmp/tmp4qbczmiu.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int i = 0;\n    long curr = 0, previous = l[0];\n    for (i = 0; i\
    \ < l.size(); ++i) {\n        if (l[i] < previous)\n            return false;\n\
    \        curr = l[i];\n        previous = curr;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp40q57ek2: /tmp/tmp40q57ek2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n - 1; ++i) {\n       \
    \ if (l[i] >= l[i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpejai69u_: /tmp/tmpejai69u_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int k = 0;\n    long max = l[0];\n    long\
    \ min = 0;\n    for (int i = 1; i < n; ++i) {\n        if (l[i] >= max) {\n  \
    \          max = l[i];\n            k = i;\n        }\n        else if (l[i] <=\
    \ min) {\n            min = l[i];\n        }\n    }\n    if (k == n) { // list\
    \ contains only max or min elements\n        return true;\n    }\n    if (max\
    \ < min && k != 0) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwj_h2sf6: /tmp/tmpwj_h2sf6.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    auto l1 = l.begin();\n    auto\
    \ l2 = l.begin() + 1;\n    while (l != l1) {\n        if (*l2 < *l1) return false;\n\
    \        if (*l2 < 0) return false;\n        ++l1;\n        ++l2;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppk62cupp.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppk62cupp.cpp:8:14: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n    8 |     while (l != l1) {\n      |\
    \            ~ ^~ ~~\n      |            |    |\n      |            |    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n      |            std::vector<long int>\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppk62cupp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmppk62cupp.cpp:8:17: note:  \
    \ \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>\u2019\n    8 |     while (l != l1) {\n      |                 ^~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppk62cupp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:904:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator!=(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  904 |     operator!="
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1;\
    \ j < l.size(); j++) {\n            if (l[i] > l[j]) {\n                return\
    \ false;\n            } else if (l[i] < l[j]) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzmalvj36: /tmp/tmpzmalvj36.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return true;\n    for (int i = 1;\
    \ i < n; ++i) {\n        int j = i;\n        while (j > 0 && l[j - 1] > l[j])\
    \ --j;\n        if (j != i) {\n            // swap l[i] and l[j]\n           \
    \ long tmp = l[i];\n            l[i] = l[j];\n            l[j] = tmp;\n      \
    \  }\n    }\n    return l[n-1] < l[0];\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptzbmuco_: /tmp/tmptzbmuco_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  long prev = 0, curr = 0;\n  for (int i = 0; i <\
    \ n - 1; i++) {\n    prev = curr;\n    curr = l[i];\n    if (curr < prev)\n  \
    \    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuh_0uyd3: /tmp/tmpuh_0uyd3.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  // return std::all_of(l.begin(), l.end(), [](long& e) { return e ==\
    \ e - 1; });\n  std::sort(l.begin(), l.end());\n  return std::is_increasing(l);\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0ta3rbg.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg0ta3rbg.cpp:7:15: error: \u2018is_increasing\u2019 is\
    \ not a member of \u2018std\u2019\n    7 |   return std::is_increasing(l);\n \
    \     |               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  long lmax = l.back();\n  for (auto it = l.begin(); it != l.end(); it++)\
    \ {\n    if (*it > lmax)\n      return false;\n    lmax = std::max(*it, lmax);\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz2yp815a: /tmp/tmpz2yp815a.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tint start = 1;\n\tint end = (int)l.size();\n\tint mid = (int)(start+end)/2;\n\
    \twhile (start <= mid && end <= mid && l[mid-1] <= l[mid]) return false;\n\tif\
    \ (start > end) return true;\n\tif (start <= mid && l[mid] < l[mid-1]) return\
    \ true;\n\twhile (start <= mid && end <= mid) {\n\t\tif (l[mid-1] < l[mid]) return\
    \ false;\n\t\tif (l[mid] < l[mid-1]) return true;\n\t\tmid = (int)(start+end)/2;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp736b3az: /tmp/tmpp736b3az.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long current = l.front();\n    for (long\
    \ &x: l)\n        if (x >= current)\n            return false;\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplha8iobc: /tmp/tmplha8iobc.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long> temp(l);\n    bool isIncreasing = true;\n    bool\
    \ isDecreasing = true;\n\n    for (long i = 1; i < l.size(); i++) {\n        if\
    \ (temp[i - 1] <= l[i]) {\n            isIncreasing = false;\n        } else {\n\
    \            isDecreasing = false;\n        }\n\n        if (!isIncreasing &&\
    \ !isDecreasing) {\n            break;\n        }\n\n    }\n    return isIncreasing\
    \ || isDecreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0m8y21zj: /tmp/tmp0m8y21zj.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)1, (long)0}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long prev = l.at(0); // init with first element in list\n    long\
    \ next = l.at(1); // init with second element in list\n    long mid = l.at(1);\
    \ // init with middle element\n    for (int i = 0; i < l.size() - 1; i++) { //\
    \ loop through list\n        if (l.at(i) > mid) { // if current element is greater\
    \ than mid element\n            next = l.at(i); // set next element as current\
    \ element\n        } else { // if current element is less than mid element\n \
    \           if (prev > mid) { // if previous element is greater than mid element\n\
    \                prev = l.at(i); // set previous element as current element\n\
    \            } else { // if previous element is less than mid element\n      \
    \          if (next < mid) { // if next element is less than mid element\n   \
    \                 mid = l.at(i); // set mid element as current element\n     \
    \           } // else if next element is greater than mid element\n          \
    \  } // else if previous element is greater than mid element\n        } // else\
    \ if current element is less than mid element\n    } // loop through list\n  \
    \  return (next < prev); // returns true if the list elements are monotonically\
    \ increasing or decreasing\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1d4mnkot: /tmp/tmp1d4mnkot.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long first = *l.begin();\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (first > l[i]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp56l8vxji: /tmp/tmp56l8vxji.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    std::vector<bool> b(n);\n    b[0] = true;\n\
    \    for(int i=1;i<n;i++) {\n        for(int j=0;j<i;j++) {\n            if(b[j]\
    \ && (l[j] < l[i])) {\n                b[i] = false;\n                break;\n\
    \            }\n        }\n    }\n    \n    if(b[n-1] && (l[n-1] < l[n-2]))\n\
    \        return true;\n    \n    for(int i=n-2; i >= 0; i--) {\n        if(b[i]\
    \ && (l[i] < l[i+1]))\n            return false;\n    }\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjkuk6xfz: /tmp/tmpjkuk6xfz.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return true;\n    std::vector<bool> flag(l);\n \
    \   flag[0] = true;\n    for (int i = 1; i < l.size(); i++) {\n        if (flag[i\
    \ - 1] && (l[i] < l[i - 1])) return false;\n        if (!flag[i - 1] && (l[i]\
    \ > l[i - 1])) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxucd_44.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsxucd_44.cpp:6:29: error: no matching function for call\
    \ to \u2018std::vector<bool>::vector(std::vector<long int>&)\u2019\n    6 |  \
    \   std::vector<bool> flag(l);\n      |                             ^\nIn file\
    \ included from /usr/include/c++/9/vector:68,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsxucd_44.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:699:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<bool,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  699 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:699:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpsxucd_44.cpp:6:29: note:   candidate expects 3 arguments, 1\
    \ provided\n    6 |     std::vector<bool> flag(l);\n      |                  \
    \           ^\nIn file included from /usr/include/c++/9/vector:68,\n         \
    \        from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpsxucd_44.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:687:7: note:\
    \ candidate: \u2018std::vector<bool, _Alloc>::vector(std::initializer_list<bool>,\
    \ const allocator_type&) [with _Alloc = std::allocator<bool>; std::vector<bool,\
    \ _Alloc>::allocator_type = std::allocator<bool>]\u2019\n  687 |       vector(initializer_list<bool>\
    \ __l,\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_bvector.h:687:37: note:\
    \   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::initializer_list<bool>\u2019\n  687 |       vector(initializer_list<b"
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() < 2)\n        return false;\n    int n = l.size() - 1;\n\
    \    int i = 0;\n    for(; i < n; i++) {\n        if(l[i] > l[i+1]) {\n      \
    \      if(l[i+1] < l[i])\n                return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi_5hjzyy: /tmp/tmpi_5hjzyy.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() >= 2);\n    long a = l[0], b = l[1];\n    for (long\
    \ i = 2; i < l.size(); i++) {\n        if (l[i] < b) {\n            return false;\n\
    \        }\n        else if (l[i] > a) {\n            return false;\n        }\n\
    \        else {\n            b = l[i];\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdfgtjoi6: /tmp/tmpdfgtjoi6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tif (n <= 1) return true;\n\tfor (int i = 0; i <\
    \ n; i++) {\n\t\tfor (int j = i+1; j < n; j++) {\n\t\t\tif (l[i] < l[j]) return\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvyb66h_9: /tmp/tmpvyb66h_9.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) {\n        return true;\n    }\n\
    \    int m = l[0] - l[n - 1];\n    for (int i = 1; i < n - 1; i++) {\n       \
    \ if (l[i] < l[i - 1]) {\n            return false;\n        }\n        if (l[i]\
    \ > l[i + 1]) {\n            return false;\n        }\n    }\n    if (m < 0) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpctozcfkk: /tmp/tmpctozcfkk.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i=l.size()-1; i>1; i--) {\n        if (l[i] < l[i-1]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb24t6gyz: /tmp/tmpb24t6gyz.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  // Initialize max & min (first and last elements).\n  long max = l[0];\n\
    \  long min = l[0];\n  for (long e : l)\n    max = std::max(e, max);\n  for (long\
    \ e : l)\n    min = std::min(e, min);\n  // Iterate over all elements to determine\
    \ if they are monotonically\n  // increasing or decreasing.\n  for (long e : l)\
    \ {\n    if (e <= min)\n      return false;\n    if (e >= max)\n      return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv7f8n7en: /tmp/tmpv7f8n7en.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int i = 0;\n    int j = l.size() - 1;\n    long prev = l[i];\n   \
    \ while (true) {\n        if (l[j] < prev) {\n            return false;\n    \
    \    }\n        if (i == j) {\n            return true;\n        }\n        if\
    \ (l[j] > prev) {\n            prev = l[j];\n        }\n        i++;\n       \
    \ j--;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4ssse7bc: /tmp/tmp4ssse7bc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Two elements are monotonically increasing if and only if they are\
    \ equal\n    for (long i = 0, j = i + 1; i < l.size(); ++i, ++j) {\n        if\
    \ (l[i] < l[j])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_jsecn7y: /tmp/tmp_jsecn7y.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  for (int i = 1; i < n; i++) {\n    if (l[i] <=\
    \ l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4eyhna20: /tmp/tmp4eyhna20.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129361
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() == 0)\n        return false;\n    long first = l[0];\n\
    \    for(size_t i = 1; i < l.size(); i++) {\n        if(first > l[i])\n      \
    \      return false;\n        first = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoqpyimt5: /tmp/tmpoqpyimt5.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find first non-decreasing element.\n    int n = l.size();\n   \
    \ for (int i = 1; i < n; i++) {\n        if (l[i] >= l[i - 1]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmposodgo1d: /tmp/tmposodgo1d.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long n = l.size();\n    if (n == 0) return true;\n    long long\
    \ c = l[0];\n    for (long i = 1; i < n; ++i) c = max(l[i], c);\n    return c\
    \ == l[n-1];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrpu2g_i.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgrpu2g_i.cpp:8:38: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    8 |     for (long i =\
    \ 1; i < n; ++i) c = max(l[i], c);\n      |                                  \
    \    ^~~\n      |                                      std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgrpu2g_i.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long k = 0, res = 0;\n    for (int i = 0; i\
    \ < n; ++i) {\n        k = l[i];\n        if (i > 0) k = l[i - 1];\n        res\
    \ = res >= k ? res : k;\n    }\n    return res == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwvy5hek8: /tmp/tmpwvy5hek8.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find the first decreasing or increasing element.\n    auto decreasing_it\
    \ = std::find_if(\n        l.begin(),\n        l.end(),\n        [](int x) { return\
    \ x >= 0; });\n    auto increasing_it = std::find_if(\n        l.begin(),\n  \
    \      l.end(),\n        [](int x) { return x < 0; });\n\n    // Return false\
    \ if there is no increasing or decreasing element.\n    if (increasing_it == l.end()\
    \ || decreasing_it == l.end())\n        return false;\n\n    // Find the first\
    \ element greater than the decreasing or increasing element.\n    auto first_gt_or\
    \ = std::find_if(\n        decreasing_it,\n        l.end(),\n        [](int x)\
    \ { return x > decreasing_it; });\n\n    // Return false if there is no greater\
    \ element than the decreasing element.\n    if (first_gt_or == l.end())\n    \
    \    return false;\n\n    // Return the greater element.\n    return std::next_permutation(decreasing_it,\
    \ first_gt_or);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25nj4_vv.cpp: In lambda function:\n/tmp/tmp25nj4_vv.cpp:23:32:\
    \ error: \u2018decreasing_it\u2019 is not captured\n   23 |         [](int x)\
    \ { return x > decreasing_it; });\n      |                                ^~~~~~~~~~~~~\n\
    /tmp/tmp25nj4_vv.cpp:23:10: note: the lambda has no capture-default\n   23 | \
    \        [](int x) { return x > decreasing_it; });\n      |          ^\n/tmp/tmp25nj4_vv.cpp:6:10:\
    \ note: \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\
    \ decreasing_it\u2019 declared here\n    6 |     auto decreasing_it = std::find_if(\n\
    \      |          ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp25nj4_vv.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = monotonic(std::vector<long int>)::<lambda(int)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_pred<monotonic(std::vector<long int>)::<lambda(int)>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Predicate = __gnu_cxx::__ops::_Iter_pred<monotonic(std::vector<long\
    \ int>)::<lambda(int)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3969:28: \
    \  required from \u2018_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = mo"
  stdout: ''
  timestamp: 1660129363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  if(l.size() == 0 || l.size() == 1) return true;\n  if(l[0] >= l[l.size()-1])\
    \ return true;\n  return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm0zbvccf: /tmp/tmpm0zbvccf.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Initialize max and min with first element.\n    long max = l[0];\n\
    \    long min = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        max =\
    \ std::max(max, l[i]);\n        min = std::min(min, l[i]);\n    }\n    \n    //\
    \ Return True iff list is monotonically increasing or decreasing.\n    return\
    \ max <= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc67yz5xf: /tmp/tmpc67yz5xf.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long n = l.size();\n    if (n < 2) return true;\n    long long\
    \ m = 0, mx = INT_MIN;\n    for (long i = 0; i < n - 1; ++i) {\n        long cur\
    \ = l[i], next = l[i + 1];\n        long mid = (cur + next) / 2;\n        if (mx\
    \ < mid) mx = mid;\n        if (cur > next) m = mid;\n    }\n    return mx > m\
    \ && mx != m;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_qrbpgel: /tmp/tmp_qrbpgel.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  // find min and max value\n  long min = l[0], max = l[0], mid;\n  for\
    \ (int i = 1; i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    } else if (l[i] < min) {\n      min = l[i];\n    } else {\n      mid = l[i];\n\
    \    }\n  }\n  if (min < mid) return false; // not increasing\n  if (max > mid)\
    \ return true; // increasing\n  return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu6tvawm5: /tmp/tmpu6tvawm5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)1, (long)0}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    if (l[0] <= l[n-1])\
    \ return true;\n    long a = l[0], b = l[1];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] < a) return false;\n        if (l[i] > b) return false;\n\
    \        a = l[i];\n        b = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfdqlfmji: /tmp/tmpfdqlfmji.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return false;\n  std::vector<long> m1;\n  std::vector<long>\
    \ m2;\n  // Find first and last monotonically decreasing element\n  for (int i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] < m1[i - 1]) return false;\n    if (l[i]\
    \ > m2[i - 1]) {\n      m1.push_back(l[i]);\n      m2.push_back(l[i]);\n    }\
    \ else {\n      m2.push_back(l[i]);\n    }\n  }\n  // Find first and last monotonically\
    \ increasing element\n  for (int i = l.size() - 1; i >= 0; i--) {\n    if (l[i]\
    \ < m2[i + 1]) return false;\n    if (l[i] > m1[i - 1]) {\n      m1.push_back(l[i]);\n\
    \      m2.push_back(l[i]);\n    } else {\n      m2.push_back(l[i]);\n    }\n \
    \ }\n  // Two sublists are monotonic\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l1 = l[0], l2 = l[0];\n    for(size_t\
    \ i=1; i<l.size(); i++) {\n        if(l1 < l2) l1 = l[i];\n        else l2 = l[i];\n\
    \        ans += (l1+l2) == l[i] ? 1 : 0;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphb63eyve: /tmp/tmphb63eyve.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  long prev_value = l[0];\n  for (long i : l) {\n    if (i == prev_value)\n\
    \      return false;\n    prev_value = i;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe1jq2n1z: /tmp/tmpe1jq2n1z.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long s = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        s = std::max(s, l[i]);\n    }\n\n    int minIndex = -1;\n    for\
    \ (int i = n - 1; i >= 0; i--) {\n        if (l[i] > s) {\n            minIndex\
    \ = i;\n            break;\n        }\n    }\n    return minIndex >= 0;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9wxa9xre: /tmp/tmp9wxa9xre.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() <= 1) {\n        return false;\n    }\n    long last =\
    \ l[l.size() - 1];\n    long first = l[0];\n    for(long i = 1; i < l.size();\
    \ i++) {\n        if(l[i] >= last) {\n            return false;\n        }\n \
    \       last = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpob8jk7jn: /tmp/tmpob8jk7jn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = l[0], min = l[0];\n    for(long long int x: l)\
    \ {\n        if(x > max) {\n            max = x;\n        }\n        if(x < min)\
    \ {\n            min = x;\n        }\n    }\n    if(max < min) return false; //\
    \ list is not monotonically increasing or decreasing.\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8qmuwa_h: /tmp/tmp8qmuwa_h.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0 || l.size() == 1) return true;\n    int n = l.size()\
    \ - 1;\n    long lmax = l[0];\n    long lmin = l[n];\n    for (int i = 1; i <\
    \ n; i++) {\n        if (l[i] > lmax) return false;\n        if (l[i] < lmin)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplw9m3klq: /tmp/tmplw9m3klq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 2) return false;\n    for (int i =\
    \ 1; i < n - 1; i++) {\n        if (l[i] > l[i - 1]) return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaxo780q_: /tmp/tmpaxo780q_.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long first = l[0];\n    for (int i = 1; i <\
    \ n; i++) {\n        if (l[i] < first) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn3qv45nf: /tmp/tmpn3qv45nf.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long min_l=*std::min_element(l.begin(), l.end());\n    long max_l=*std::max_element(l.begin(),\
    \ l.end());\n    if(min_l<max_l) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc7sy2pb_: /tmp/tmpc7sy2pb_.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = std::max_element(l.begin(), l.end());\n    auto last = std::min_element(l.begin(),\
    \ l.end());\n    if (it == last) return false;\n    if (it > last) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_wm9ay7n: /tmp/tmp_wm9ay7n.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    for (int i =\
    \ 1; i < n; ++i) {\n        if (l[i - 1] > l[i] && l[i - 1] != l[i - 2]) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq3fuyo95: /tmp/tmpq3fuyo95.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n <= 0) return true;\n    int mx = n-1;\n\
    \    for (int i=1; i<mx; i++) if (l[i] < l[i-1]) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl5pcfbq3: /tmp/tmpl5pcfbq3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Compare with the previous element.\n    auto cmp = [&l](long a,\
    \ long b) { return a > b; };\n    long prev = l[0];\n    for (auto &i : l) {\n\
    \        while (cmp(i, prev)) {\n            prev = i;\n            assert(i !=\
    \ prev);\n        }\n    }\n    return l[0] == prev;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmweo0qgm: /tmp/tmpmweo0qgm.cpp:11: bool monotonic(std::vector<long int>):
    Assertion `i != prev'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool flag = false;\n\t// check left sublist\n\tif (l.size() > 2) {\n\
    \t\tif (l[0] == l[1]) {\n\t\t\tflag = true;\n\t\t}\n\t}\n\t// check right sublist\n\
    \tif (l.size() > 1) {\n\t\tif (l[0] == l[1]) {\n\t\t\tflag = true;\n\t\t}\n\t\
    }\n\treturn flag;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmk7499qd: /tmp/tmpmk7499qd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long maxi = l[0];\n    long mini = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        maxi = max(maxi, l[i]);\n        mini\
    \ = min(mini, l[i]);\n    }\n\n    for (int i = 0; i < n; i++) {\n        if (l[i]\
    \ >= maxi + mini) return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnxo66wa6.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnxo66wa6.cpp:9:16: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    9 |         maxi = max(maxi,\
    \ l[i]);\n      |                ^~~\n      |                std::max\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxo66wa6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpnxo66wa6.cpp:10:16: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   10 |         mini = min(mini, l[i]);\n      |                ^~~\n      |\
    \                std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxo66wa6.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong long ll = l.front();\n\tlong long rr = ll.rbegin();\n\tlong long\
    \ rt = ll.rend();\n\twhile(rr != rt) {\n\t\tif(*(rr++) < *(rt++)) return false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzf3issln.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzf3issln.cpp:6:20: error: request for member \u2018rbegin\u2019\
    \ in \u2018ll\u2019, which is of non-class type \u2018long long int\u2019\n  \
    \  6 |  long long rr = ll.rbegin();\n      |                    ^~~~~~\n/tmp/tmpzf3issln.cpp:7:20:\
    \ error: request for member \u2018rend\u2019 in \u2018ll\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n    7 |  long long rt = ll.rend();\n      |\
    \                    ^~~~\n/tmp/tmpzf3issln.cpp:9:12: error: invalid type argument\
    \ of unary \u2018*\u2019 (have \u2018long long int\u2019)\n    9 |   if(*(rr++)\
    \ < *(rt++)) return false;\n      |            ^\n/tmp/tmpzf3issln.cpp:9:22: error:\
    \ invalid type argument of unary \u2018*\u2019 (have \u2018long long int\u2019\
    )\n    9 |   if(*(rr++) < *(rt++)) return false;\n      |                    \
    \  ^\n"
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2d7_6ib: /tmp/tmpf2d7_6ib.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i : l) {\n        if (i < l[i-1]) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg9yh7_i0: /tmp/tmpg9yh7_i0.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Write your code here\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp96fdw9gy: /tmp/tmp96fdw9gy.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long cur = l[0];\n    for (long i = 0; i < l.size(); ++i) {\n    \
    \    if (l[i] < cur) {\n            return false;\n        }\n        cur = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5c6c293o: /tmp/tmp5c6c293o.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size()<=1) return false;\n    int mid = l.size()/2;\n    for(long\
    \ i=0;i<mid;i++) {\n        if(l[i]<=l[i+1]) {\n            bool increasing =\
    \ false;\n            long left  = 0;\n            long right = mid;\n       \
    \     while(left<right) {\n                if(l[left]<=l[right]) { left++;}\n\
    \                else {\n                    if(l[left]<l[right]) {\n        \
    \                return false;\n                    } else {\n               \
    \         if(l[left]>l[right]) {\n                            increasing = false;\n\
    \                            left++;\n                        } else {\n     \
    \                       increasing = true;\n                            right--;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            if(increasing || right==mid-1) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0rrapef0: /tmp/tmp0rrapef0.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n - 1; i++) {\n       \
    \ if (l[i] >= l[i + 1]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp15p5qs47: /tmp/tmp15p5qs47.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (size_t i = 0; i < l.size() - 1; ++i) {\n        if (l[i] >= l[i\
    \ + 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7sm2xjox: /tmp/tmp7sm2xjox.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long a = 0, b = 1;\n    long l = l.size();\n    for (int i = 0; i\
    \ < l - 1; ++i) {\n        if (l[i] > l[i + 1]) {\n            return false;\n\
    \        }\n        a = l[i];\n        b = l[i + 1];\n    }\n    return a == b;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpww5b686r.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpww5b686r.cpp:6:10: error: declaration of \u2018long int\
    \ l\u2019 shadows a parameter\n    6 |     long l = l.size();\n      |       \
    \   ^\n/tmp/tmpww5b686r.cpp:6:16: error: request for member \u2018size\u2019 in\
    \ \u2018l\u2019, which is of non-class type \u2018long int\u2019\n    6 |    \
    \ long l = l.size();\n      |                ^~~~\n/tmp/tmpww5b686r.cpp:8:16:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |\
    \         if (l[i] > l[i + 1]) {\n      |                ^\n/tmp/tmpww5b686r.cpp:8:27:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n    8 |\
    \         if (l[i] > l[i + 1]) {\n      |                           ^\n/tmp/tmpww5b686r.cpp:11:16:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n   11 |\
    \         a = l[i];\n      |                ^\n/tmp/tmpww5b686r.cpp:12:20: error:\
    \ invalid types \u2018long int[int]\u2019 for array subscript\n   12 |       \
    \  b = l[i + 1];\n      |                    ^\n"
  stdout: ''
  timestamp: 1660129364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong prev = l[0];\n\tfor(long i : l) if(prev < i) return true;\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuvspt0f8: /tmp/tmpuvspt0f8.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // If the first element is smaller than the second element,\n    //\
    \ then it is not monotonic increasing or decreasing.\n    if (l[0] < l[1]) return\
    \ true;\n    // If the first element is larger than the second element,\n    //\
    \ then it is not monotonic increasing or decreasing.\n    else if (l[0] > l[1])\
    \ return false;\n    // If both elements are same, then it is not monotonic increasing\
    \ or decreasing.\n    else return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvo1ql_r2: /tmp/tmpvo1ql_r2.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int left = 0, right = 0, mid = 0;\n    while (left < l.size()) {\n\
    \        mid = left + ((right - left) >> 1);\n        if (l[left] < l[mid]) {\n\
    \            left = mid + 1;\n        } else {\n            right = mid;\n   \
    \     }\n    }\n    return (left == l.size()) || (l[left] > l[right]);\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    bool monotonic = false;\n    for (int i = 0; i < l.size() - 1; i++)\
    \ {\n        if (l[i + 1] < l[i]) {\n            monotonic = false;\n        \
    \    break;\n        }\n    }\n    for (int i = 0; i < l.size() - 1; i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            monotonic = false;\n            break;\n\
    \        }\n    }\n    return monotonic;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp75aeupj1: /tmp/tmp75aeupj1.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n-1; ++i) {\n        for\
    \ (int j = i+1; j < n; ++j) {\n            if (l[i] > l[j] && l[j] > l[i]) return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp14i6bybr: /tmp/tmp14i6bybr.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // Assume all elements are sorted.\n    for\
    \ (int i = 1; i < n; ++i)\n        if (l[i] < l[i - 1]) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4eccljwn: /tmp/tmp4eccljwn.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long mid = (n-1)/2;\n    long l1 = l[mid];\n\
    \    long l2 = l[mid+1];\n    return l2 < l1;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp943qlc8j: /tmp/tmp943qlc8j.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return false;\n  // First and last element are assumed\
    \ to be in order.\n  long first_element = l[0];\n  long last_element = l[l.size()\
    \ - 1];\n  for (long i = 2; i < l.size(); i++) {\n    // Assume increasing order\n\
    \    if (l[i - 1] > last_element) return true;\n    // Assume decreasing order\n\
    \    if (l[i - 1] < first_element) return false;\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkg53brgl: /tmp/tmpkg53brgl.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr2urvv0e: /tmp/tmpr2urvv0e.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() == std::count(l.begin(), l.end(), 0));\n    std::vector<long>\
    \ tmp(l.begin(), l.end());\n    std::sort(tmp.begin(), tmp.end());\n    return\
    \ std::equal(l.begin(), l.end(), tmp.begin());\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkg8535lv: /tmp/tmpkg8535lv.cpp:5: bool monotonic(std::vector<long int>):
    Assertion `l.size() == std::count(l.begin(), l.end(), 0)'' failed.

    '
  stdout: ''
  timestamp: 1660129366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return false;\n    int n = l.size();\n    if (n\
    \ == 0) return true;\n    long max_v = l[0], min_v = l[0];\n    for (int i = 1;\
    \ i < n; ++i) {\n        if (l[i] < min_v) min_v = l[i];\n        if (l[i] > max_v)\
    \ max_v = l[i];\n    }\n    if (min_v == max_v) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvkutjzpq: /tmp/tmpvkutjzpq.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int len = l.size();\n    if (len <= 1) {\n        return true;\n \
    \   }\n    long ans = l[0];\n    for (int i = 1; i < len; i++) {\n        if (ans\
    \ > l[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb5mvaef5: /tmp/tmpb5mvaef5.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tstd::pair<long, long> max_min = *std::max_element(l.begin(), l.end());\n\
    \treturn (*std::min_element(l.begin(), l.end()) == max_min.first);\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzv747fs3.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzv747fs3.cpp:5:34: error: conversion from \u2018long int\u2019\
    \ to non-scalar type \u2018std::pair<long int, long int>\u2019 requested\n   \
    \ 5 |  std::pair<long, long> max_min = *std::max_element(l.begin(), l.end());\n\
    \      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<bool> v(l.size());\n    for (std::size_t i = 1; i < l.size();\
    \ i++) {\n        if (l[i-1] > l[i]) {\n            return false;\n        }\n\
    \        v[i] = v[i-1] || (l[i-1] == l[i]);\n    }\n    return v[0];\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo3r1j77u: /tmp/tmpo3r1j77u.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  long m = 0, n = 0, prev = 0;\n  for (long i : l) {\n    if (i == prev)\
    \ {\n      m++;\n      n = n;\n    } else {\n      if (m > n) {\n        return\
    \ true;\n      }\n      m = 1;\n      n = 0;\n      prev = i;\n    }\n  }\n  return\
    \ m > n;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmh3jm_ff: /tmp/tmpmh3jm_ff.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int first = l[0];\n    long long int last = l[0];\n    for\
    \ (long long int x : l) {\n        last = x;\n    }\n    if (first > last) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwy9rinxn: /tmp/tmpwy9rinxn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() < 2) return false;\n    long mid = l.size() / 2;\n   \
    \ long first = l[0];\n    long last = l[mid];\n    if(first > last) return false;\n\
    \    for(size_t i = mid; i >= 1; i--) {\n        long c = l[i];\n        if(c\
    \ == last) {\n            return true;\n        }\n        if(c > last) {\n  \
    \          return false;\n        }\n        last = c;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd3nfo_yx: /tmp/tmpd3nfo_yx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() < 2)\n        return false;\n\n    long first = l[0],\
    \ second = l[1];\n    for(size_t i = 2; i < l.size(); i++) {\n        if(l[i]\
    \ > second)\n            return false;\n        else if(l[i] < first)\n      \
    \      return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmps_1q7xgr: /tmp/tmps_1q7xgr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n        std::vector<long>::iterator it = l.begin();\n        std::vector<long>::iterator\
    \ it2 = l.begin();\n        ++it;\n        for (; it != l.end(); ++it) {\n   \
    \         if (it2 == it) {\n                return false;\n            }\n   \
    \         if (*it < *it2) {\n                return false;\n            }\n  \
    \          ++it2;\n        }\n        return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpso5fafaj: /tmp/tmpso5fafaj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  long a = l[0];\n  for (int i=1; i<n; ++i) {\n \
    \   if (l[i] < a) {\n      return false;\n    } else if (l[i] > a) {\n      return\
    \ true;\n    }\n    a = l[i];\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpadpgl2e0: /tmp/tmpadpgl2e0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // check first and last element\n    if (n\
    \ == 0 || n == 1)\n        return true;\n    long first = l[0];\n    long last\
    \ = l[n-1];\n    // find midpoint\n    int m = (int) n / 2;\n    long mid = l[m];\n\
    \    // left subarray index\n    int lI = 0;\n    // right subarray index\n  \
    \  int rI = 0;\n    // check if list is monotonic\n    long ldiff, rdiff;\n  \
    \  while (true) {\n        // find left and right subarray\n        while(lI <=\
    \ m && l[m-lI] <= mid) lI++;\n        while(rI < m && r[m+rI] >= mid) rI++;\n\
    \        // check if subarray is monotonic\n        if (lI == m || rI == m)\n\
    \            return true;\n        // if left and right subarray is monotonic,\
    \ consider list as monotonic\n        ldiff = mid-l[lI-1];\n        rdiff = mid-r[rI-1];\n\
    \        // if left and right subarrays are equal, list is not monotonic\n   \
    \     if (ldiff == rdiff)\n            return false;\n        // check if current\
    \ list element should be added to left subarray\n        if (mid > l[m-lI]) return\
    \ false;\n        // check if current list element should be added to right subarray\n\
    \        if (mid < r[m+rI]) return false;\n        // advance index\n        m++;\n\
    \    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp808zlite.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp808zlite.cpp:23:25: error: \u2018r\u2019 was not declared\
    \ in this scope; did you mean \u2018rI\u2019?\n   23 |         while(rI < m &&\
    \ r[m+rI] >= mid) rI++;\n      |                         ^\n      |          \
    \               rI\n/tmp/tmp808zlite.cpp:29:21: error: \u2018r\u2019 was not declared\
    \ in this scope; did you mean \u2018rI\u2019?\n   29 |         rdiff = mid-r[rI-1];\n\
    \      |                     ^\n      |                     rI\n"
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\tlong curr = l[0], prev = 0, lmax = l[0], lmin =\
    \ l[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tlong cur = l[i], diff = cur - prev;\n\
    \t\tif (diff > 0) {\n\t\t\tif (lmax < cur)\n\t\t\t\tlmax = cur;\n\t\t\tif (lmin\
    \ > cur)\n\t\t\t\tlmin = cur;\n\t\t}\n\t\tprev = cur;\n\t}\n\tlong diff = 0;\n\
    \tif (lmax < lmin)\n\t\treturn false;\n\tfor (int i = 0; i < n; i++)\n\t\tdiff\
    \ += l[i] - lmax;\n\tif (diff >= 0)\n\t\treturn false;\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwsyuff0m: /tmp/tmpwsyuff0m.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n   long n = l.size();\n   long k = n/2;\n   long j = n;\n   while (k >\
    \ 0) {\n      long m = j;\n      if (j == k) {\n         m = j + 1;\n      }\n\
    \      if (l[k] < l[m]) {\n         return false;\n      }\n      j = k;\n   \
    \   k = m/2;\n   }\n   return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp93qjvh_t: /tmp/tmp93qjvh_t.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong long int left = l[0];\n\tlong long int right = 0;\n\n\tfor (int\
    \ i = 1; i < l.size(); i++) {\n\t\tif (l[i] > right) {\n\t\t\tright = l[i];\n\t\
    \t}\n\t\tif (l[i] < left) {\n\t\t\tleft = l[i];\n\t\t}\n\t}\n\tassert(left <=\
    \ right);\n\treturn left <= right;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuqhpc8wx: /tmp/tmpuqhpc8wx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size()==0) return false;\n    long maxv = l[0], minv = l[0],\
    \ incr, decr;\n    for(size_t i=1; i<l.size(); i++) {\n        if(l[i]>maxv) maxv\
    \ = l[i];\n        else if(l[i]<minv) minv = l[i];\n        if(l[i]<l[i-1]) incr=l[i-1]-l[i];\n\
    \        else decr=l[i]-l[i-1];\n        if(decr>incr) incr=decr;\n    }\n   \
    \ return maxv>=minv;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj1v2rmse: /tmp/tmpj1v2rmse.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i = 1; i < l.size(); i++)\n        if (l[i] < l[i - 1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiys4k2os: /tmp/tmpiys4k2os.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.empty()) return false;\n    auto it = l.begin();\n    for (;\
    \ it != l.end(); ++it) {\n        if (it != l.begin()) assert(*it > it[-1]);\n\
    \        auto prev = std::prev(*it);\n        auto next = std::next(*it);\n  \
    \      auto mid = (it != l.end()) ? (prev + next) / 2 : (*it);\n        auto l1\
    \ = prev - mid;\n        auto l2 = mid - next;\n        if (l1 != l2) return (l1\
    \ > l2) ? true : false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5s2m_ij.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv5s2m_ij.cpp:9:34: error: no matching function for call\
    \ to \u2018prev(long int&)\u2019\n    9 |         auto prev = std::prev(*it);\n\
    \      |                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:66,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpv5s2m_ij.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:224:5:\
    \ note: candidate: \u2018template<class _BidirectionalIterator> constexpr _BidirectionalIterator\
    \ std::prev(_BidirectionalIterator, typename std::iterator_traits<_Iter>::difference_type)\u2019\
    \n  224 |     prev(_BidirectionalIterator __x, typename\n      |     ^~~~\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:224:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:\
    \ In substitution of \u2018template<class _BidirectionalIterator> constexpr _BidirectionalIterator\
    \ std::prev(_BidirectionalIterator, typename std::iterator_traits<_Iter>::difference_type)\
    \ [with _BidirectionalIterator = long int]\u2019:\n/tmp/tmpv5s2m_ij.cpp:9:34:\
    \   required from here\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:224:5:\
    \ error: no type named \u2018difference_type\u2019 in \u2018struct std::iterator_traits<long\
    \ int>\u2019\n/tmp/tmpv5s2m_ij.cpp:10:34: error: no matching function for call\
    \ to \u2018next(long int&)\u2019\n   10 |         auto next = std::next(*it);\n\
    \      |                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:66,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpv5s2m_ij.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:213:5:\
    \ note: candidate: \u2018template<class _InputIterator> constexp"
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find leftmost and rightmost elements\n    int lx = 0, rx = l.size()\
    \ - 1;\n    while (lx <= rx) {\n        // Increment the left element if it is\
    \ not the leftmost element\n        if (lx <= 0 && l.at(lx) < l.at(rx)) return\
    \ false;\n        // Decrement the right element if it is not the rightmost element\n\
    \        else if (lx <= l.size() - 1 && l.at(rx) > l.at(lx)) return false;\n \
    \       // Otherwise increment both elements and compare them\n        else {\
    \ lx++; rx--; }\n    }\n    // The lists are monotonic\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9rwfill8: /tmp/tmp9rwfill8.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int i1 = 0, i2 = 1, min_i2 = 0, min_i1 = 0, max_i1 = 0, max_i2 = 0;\n\
    \  int c1, c2;\n\n  do {\n    c1 = l.at(i1++);\n    c2 = l.at(i2++);\n\n    if\
    \ (c1 > c2) {\n      min_i2 = i2;\n      min_i1 = i1;\n    } else {\n      min_i2\
    \ = i2;\n      min_i1 = i1;\n    }\n\n    if (c1 < c2) {\n      max_i2 = i2;\n\
    \      max_i1 = i1;\n    } else {\n      max_i2 = i2;\n      max_i1 = i1;\n  \
    \  }\n\n  } while (min_i1 < min_i2 && max_i1 < max_i2 && i1 < l.size());\n\n \
    \ return max_i1 - min_i2 < max_i2 - min_i2;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 4) >= this->size() (which is 4)\n"
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if((l.size() == 1) && (l[0] > l[1])) {\n        return true;\n   \
    \ }\n    long m = l[0], n = 0;\n    for(auto i : l) {\n        if(i == m) continue;\n\
    \        if(i == n - 1) return false;\n        bool a = (m > i);\n        m =\
    \ i;\n        n = a;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa2x3m26o: /tmp/tmpa2x3m26o.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int size = l.size();\n  for (int i = 1; i < size; i++) {\n    if (l[i]\
    \ < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvwt3xij9: /tmp/tmpvwt3xij9.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\t// Check whether list is empty or not\n\tif (l.size() <= 1)\n\t\treturn\
    \ true;\n\n\t// If list has only 1 element, return True\n\tif (l.size() == 2)\n\
    \t\treturn l[0] > l[1];\n\n\t// Find maximum and minimum element in list\n\tlong\
    \ long mx = std::max(l);\n\tlong long mn = std::min(l);\n\n\t// If minimum is\
    \ less than or equal to maximum, return False\n\tif (mx <= mn)\n\t\treturn false;\n\
    \n\t// If minimum is greater than or equal to maximum, return True\n\treturn mx\
    \ >= mn;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbfttrq2w.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbfttrq2w.cpp:14:27: error: no matching function for call\
    \ to \u2018max(std::vector<long int>&)\u2019\n   14 |  long long mx = std::max(l);\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbfttrq2w.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpbfttrq2w.cpp:14:27: note: \
    \  candidate expects 2 arguments, 1 provided\n   14 |  long long mx = std::max(l);\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpbfttrq2w.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpbfttrq2w.cpp:14:27:\
    \ note:   candidate expects 3 arguments, 1 provided\n   14 |  long long mx = std::max(l);\n\
    \      |                           ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfttrq2w.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n  "
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long min = l.front();\n    long long max = l.back();\n    for\
    \ (auto i : l) {\n        if ((i < min) || (i > max)) return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9myvqaun: /tmp/tmp9myvqaun.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if( l.size() <= 1 )\n        return false; \n    long long l = l[0];\n\
    \    for( int i = 1; i < l.size(); i++ )\n        if( l[i] > l ) l = l[i]; \n\
    \    return l == l[0]; \n}\nint main() {\n    auto candidate = monotonic;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppp16dx6s.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppp16dx6s.cpp:7:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n    7 |     long long l = l[0];\n      |  \
    \             ^\n/tmp/tmppp16dx6s.cpp:7:22: error: invalid types \u2018long long\
    \ int[int]\u2019 for array subscript\n    7 |     long long l = l[0];\n      |\
    \                      ^\n/tmp/tmppp16dx6s.cpp:8:27: error: request for member\
    \ \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long\
    \ int\u2019\n    8 |     for( int i = 1; i < l.size(); i++ )\n      |        \
    \                   ^~~~\n/tmp/tmppp16dx6s.cpp:9:16: error: invalid types \u2018\
    long long int[int]\u2019 for array subscript\n    9 |         if( l[i] > l ) l\
    \ = l[i];\n      |                ^\n/tmp/tmppp16dx6s.cpp:9:31: error: invalid\
    \ types \u2018long long int[int]\u2019 for array subscript\n    9 |         if(\
    \ l[i] > l ) l = l[i];\n      |                               ^\n/tmp/tmppp16dx6s.cpp:10:20:\
    \ error: invalid types \u2018long long int[int]\u2019 for array subscript\n  \
    \ 10 |     return l == l[0];\n      |                    ^\n"
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // If the number of elements is less than 2,\n    // it has no sense\
    \ to keep comparing them\n    if (l.size() <= 2)\n        return false;\n\n  \
    \  // If the number of elements is less than 2,\n    // it has no sense to keep\
    \ comparing them\n    if (l.size() <= 2)\n        return false;\n\n    // Return\
    \ true if the first element is smaller than the second one\n    return l[1] <\
    \ l[0];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqg08fa8k: /tmp/tmpqg08fa8k.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<long>::iterator first = l.begin();\n    for (auto it =\
    \ l.begin(); it != l.end(); ++it) {\n        if (first != it) {\n            assert(*it\
    \ < *first);\n            return true;\n        }\n        first = it;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpil_zrkn_: /tmp/tmpil_zrkn_.cpp:8: bool monotonic(std::vector<long int>):
    Assertion `*it < *first'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if( l.size() < 2 ) return true;\n    auto it1 = l.begin();\n    auto\
    \ it2 = l.begin() + 1;\n    if( it1 != l.end() && *it2 < *it1 ) return false;\n\
    \    if( it2 != l.end() && *it1 < *it2 ) return false;\n    auto it3 = l.begin()\
    \ + 2;\n    if( it1 != l.end() && *it2 < *it3 ) return false;\n    if( it3 !=\
    \ l.end() && *it1 < *it3 ) return false;\n    while( it1 != l.end() ) {\n    \
    \    it2++;\n        it3++;\n        if( it1 != l.end() && *it2 < *it3 ) return\
    \ false;\n        if( it3 != l.end() && *it1 < *it3 ) return false;\n        it1++;\n\
    \        it2++;\n        it3++;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpixqpl153: /tmp/tmpixqpl153.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long n = 1;\n    long long res = 0;\n    for (int i = 0; i <\
    \ l.size(); ++i) {\n        res += l[i] - l[i-1];\n        if (res > n) n = res;\n\
    \    }\n    return (res > 0 && n == 1);\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8mwghoyh: /tmp/tmp8mwghoyh.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  for (int i = 0; i < l.size() - 1; ++i)\n    for (int j = i + 1; j <\
    \ l.size(); ++j)\n      if (l[i] > l[j]) return true;\n  return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgzw96ecn: /tmp/tmpgzw96ecn.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long i = 1, j = 0, k = 0, cnt = 0;\n    bool is_increasing = true;\n\
    \    while(j < l.size() && k < l.size()) {\n        if((j+k) > l.size()) {\n \
    \           if(cnt > 1) {\n                is_increasing = false;\n          \
    \  }\n            return is_increasing;\n        }\n        if(l[j] > l[k]) {\n\
    \            i++;\n        }\n        else if(l[j] < l[k]) {\n            j++;\n\
    \        }\n        else {\n            k++;\n        }\n        cnt++;\n    }\n\
    \    if(j == l.size() && k == l.size()) {\n        return is_increasing;\n   \
    \ }\n    return is_increasing || (j > k);\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpam4kc0fe: /tmp/tmpam4kc0fe.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if(n <= 1) {\n        return true;\n    }\n\
    \    long prev=l[0];\n    for(int i=1; i<n; i++) {\n        long cur=l[i];\n \
    \       if(cur > prev) {\n            return false;\n        }\n        prev =\
    \ cur;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk8hg7viw: /tmp/tmpk8hg7viw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long min = std::numeric_limits<long long>::min();\n    long long\
    \ max = std::numeric_limits<long long>::max();\n    long long mid = (min + max)\
    \ / 2;\n    for (auto el : l)\n        if (el < mid) return true;\n        if\
    \ (el > mid) return false;\n    if (min < max) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn7bzh0rg.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn7bzh0rg.cpp:10:13: error: \u2018el\u2019 was not declared\
    \ in this scope; did you mean \u2018l\u2019?\n   10 |         if (el > mid) return\
    \ false;\n      |             ^~\n      |             l\n"
  stdout: ''
  timestamp: 1660129367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  // Find the min & max elements\n  long first = *std::min_element(l.begin(),\
    \ l.end());\n  long last = *std::max_element(l.begin(), l.end());\n  long mid\
    \ = (first + last) / 2;\n  // Return True is elements are monotonically increasing\n\
    \  if(first <= mid) {\n    if(last <= mid) return true;\n    // Otherwise decreasing\
    \ elements are present\n    return false;\n  }\n  // Else elements are monotonically\
    \ decreasing\n  return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm_mvbhsn: /tmp/tmpm_mvbhsn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int lsize = l.size();\n    // The second loop is to make\
    \ sure that the last element satisfies 'lsize > 1'\n    for (long long int i =\
    \ lsize - 1; i >= 0; i--) {\n        if (l[i] < l[i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx3s1wziw: /tmp/tmpx3s1wziw.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long n = l.size();\n    long k = 0;\n    long min = l[0], max = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < min) min = l[i];\n    \
    \    if (l[i] > max) max = l[i];\n    }\n    for (int i = 1; i < n; i++) {\n \
    \       if (l[i] < min || l[i] > max) return false;\n        if (l[i] > l[k])\
    \ {\n            k = i;\n        }\n    }\n    if (k < n) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv4q08lru: /tmp/tmpv4q08lru.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Check empty list\n    if (l.size() < 2) return true;\n    long\
    \ max = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n        if (max < l[i])\
    \ return false;\n        max = l[i];\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcu3_2jmw: /tmp/tmpcu3_2jmw.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // TODO: Use std::is_sorted if you have C++17 or later.\n    bool\
    \ flag = true;\n    int i = 0;\n    int j = 0;\n    while (i < l.size() && flag)\
    \ {\n        flag = false;\n        if (l[i] > l[j]) {\n            flag = true;\n\
    \        } else {\n            i++;\n        }\n        j++;\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmmlx80qp: /tmp/tmpmmlx80qp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i = 1; i < l.size(); ++i) {\n        if (l[i] < l[i - 1])\
    \ return false;\n        if (l[i] > l[i - 1]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg8wbaodf: /tmp/tmpg8wbaodf.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long long int prev=-1, curr=-1, curr1=-1;\n    for (int i=1;\
    \ i<l.size(); i++) {\n        curr=l[i];\n        curr1=prev;\n        if (prev\
    \ > curr) {\n            return false;\n        }\n        prev=curr;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv6t_zeu.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkv6t_zeu.cpp:5:15: error: \u2018long long long\u2019 is\
    \ too long for GCC\n    5 |     long long long int prev=-1, curr=-1, curr1=-1;\n\
    \      |               ^~~~\n"
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long currValue = l[0];\n    long prevValue\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] < prevValue)\
    \ return true;\n        if (currValue < l[i]) return false;\n        currValue\
    \ = l[i];\n        prevValue = l[i];\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph_27ov63: /tmp/tmph_27ov63.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // Sort and compare two successive elements\
    \ to find whether\n    // they are all increasing or decreasing.\n    sort(l.begin(),\
    \ l.end());\n    return l[n - 1] <= l[0];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5h0i5wbo: /tmp/tmp5h0i5wbo.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max1 = 0, max2 = 0;\n    long long int min1 = 0, min2\
    \ = 0;\n    for (long long int i : l) {\n        max1 = max(i, max1);\n      \
    \  max2 = max(i, max2);\n        min1 = min(i, min1);\n        min2 = min(i, min2);\n\
    \    }\n    return max1 < min2 && max2 < min1;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptf75vznm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptf75vznm.cpp:8:16: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n    8 |         max1 = max(i,\
    \ max1);\n      |                ^~~\n      |                std::max\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptf75vznm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmptf75vznm.cpp:10:16: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   10 |         min1 = min(i, min1);\n      |                ^~~\n      |   \
    \             std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptf75vznm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  for (size_t i = 0; i < l.size() -\
    \ 1; ++i) {\n    if (l[i] > l[i + 1]) return false;\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphquf2dlz: /tmp/tmphquf2dlz.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // If list size <= 1, then return true.\n \
    \   if (n < 2) return true;\n    int i, j, m, k;\n    // Find the first element\
    \ greater than or equal to\n    // the second element in the list.\n    i = 1;\n\
    \    j = n - 1;\n    while (j < i) {\n        k = j;\n        while (k >= i) {\n\
    \            if (l[k] <= l[j]) {\n                swap(l[k], l[j]);\n        \
    \    }\n            k--;\n        }\n        j++;\n    }\n    // If the second\
    \ element is not greater than or equal to\n    // the first element, return false.\n\
    \    if (l[1] <= l[0]) return false;\n    m = 1;\n    // Find the second element\
    \ greater than or equal to\n    // the third element in the list.\n    i = 1;\n\
    \    j = n - 2;\n    while (j < i) {\n        k =  j + 1;\n        while (k <=\
    \ i) {\n            if (l[k] >= l[j]) {\n                swap(l[k], l[j]);\n \
    \           }\n            k++;\n        }\n        j++;\n    }\n    // If the\
    \ third element is not greater than or equal to\n    // the second element, return\
    \ false.\n    if (l[2] >= l[1]) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq9bdw6m0.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq9bdw6m0.cpp:17:17: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   17 |                 swap(l[k], l[j]);\n      |          \
    \       ^~~~\n/tmp/tmpq9bdw6m0.cpp:17:17: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpq9bdw6m0.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpq9bdw6m0.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpq9bdw6m0.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpq9bdw6m0.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path"
  stdout: ''
  timestamp: 1660129368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long current = l[0];\n    for (auto n : l) {\n        if (n <= current)\
    \ return false;\n        current = n;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph0rz8s0t: /tmp/tmph0rz8s0t.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i=l.size()-1; i>0; i--)\n        if (l[i-1] > l[i-1])\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpojs09_8i: /tmp/tmpojs09_8i.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() > 1 && l[0] <= l[1]) \n\t\treturn true;\n\tfor (int i =\
    \ 2; i < l.size(); ++i) {\n\t\tif (l[i] <= l[i-1]) \n\t\t\treturn false;\n\t}\n\
    \treturn true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4tysficn: /tmp/tmp4tysficn.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n1 = l.size();\n    for (int i = 1; i < n1; i++) {\n        if\
    \ (l[i] >= l[i - 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeuofd5ji: /tmp/tmpeuofd5ji.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for(size_t i = 0; i < l.size()-1; i++) {\n        if (l[i+1] < l[i])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpycg1yonw: /tmp/tmpycg1yonw.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  long long max_value = 0, min_value = INT_MAX;\n  for (auto i : l) {\n\
    \    if (i > max_value) {\n      max_value = i;\n    } else if (i < min_value)\
    \ {\n      min_value = i;\n    }\n  }\n  // Return True only if all elements are\
    \ monotonically increasing or decreasing.\n  return min_value > max_value;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw669ks6e: /tmp/tmpw669ks6e.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int l = 0, h = l.size() - 1;\n  while (l <= h) {\n    if (l+1 == h)\n\
    \      return true;\n    else if (l[l + 1] >= l[l + 2])\n      return true;\n\
    \    else if (l[h - 1] < l[h - 2])\n      return true;\n    else if (l[h + 1]\
    \ > l[h + 2])\n      return true;\n    else\n      ++l;\n    --h;\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeovcapw5.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeovcapw5.cpp:5:7: error: declaration of \u2018int l\u2019\
    \ shadows a parameter\n    5 |   int l = 0, h = l.size() - 1;\n      |       ^\n\
    /tmp/tmpeovcapw5.cpp:5:20: error: request for member \u2018size\u2019 in \u2018\
    l\u2019, which is of non-class type \u2018int\u2019\n    5 |   int l = 0, h =\
    \ l.size() - 1;\n      |                    ^~~~\n/tmp/tmpeovcapw5.cpp:9:21: error:\
    \ invalid types \u2018int[int]\u2019 for array subscript\n    9 |     else if\
    \ (l[l + 1] >= l[l + 2])\n      |                     ^\n/tmp/tmpeovcapw5.cpp:9:33:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n    9 |     else\
    \ if (l[l + 1] >= l[l + 2])\n      |                                 ^\n/tmp/tmpeovcapw5.cpp:11:21:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   11 |     else\
    \ if (l[h - 1] < l[h - 2])\n      |                     ^\n/tmp/tmpeovcapw5.cpp:11:32:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   11 |     else\
    \ if (l[h - 1] < l[h - 2])\n      |                                ^\n/tmp/tmpeovcapw5.cpp:13:21:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   13 |     else\
    \ if (l[h + 1] > l[h + 2])\n      |                     ^\n/tmp/tmpeovcapw5.cpp:13:32:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   13 |     else\
    \ if (l[h + 1] > l[h + 2])\n      |                                ^\n"
  stdout: ''
  timestamp: 1660129369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 2);\n    int start=0, end=l.size() - 1;\n    while\
    \ (start <= end) {\n        if (l[start] < l[end]) {\n            if (start ==\
    \ 0) return true;\n            else start--;\n        } else {\n            if\
    \ (end == end-1) return true;\n            else end++;\n        }\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmczv2arc: /tmp/tmpmczv2arc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  int m = n - 1;\n  while (m > 0 && l[m] <= l[m-1])\
    \ {\n    m--;\n  }\n  if (m == 0 && l[0] >= l[m]) {\n    return true;\n  }\n \
    \ return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeexm4kep: /tmp/tmpeexm4kep.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long cur = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n    \
    \    if (l[i] < cur) return true;\n        cur = l[i];\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpevc52y8x: /tmp/tmpevc52y8x.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long minv = l[0];\n    long long maxv\
    \ = l[n-1];\n    for (int i = 0; i < n; ++i) {\n        if (l[i] > maxv) return\
    \ false;\n        else if (l[i] < minv) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp61qbu3s6: /tmp/tmp61qbu3s6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n < 3) {\n        return false;\n    }\n\
    \    std::vector<int> count(n);\n    std::iota(count.begin(), count.end(), 0);\n\
    \    std::vector<int> cuml(n);\n    int lm = 1;\n    for (int i = 0; i < n; i++)\
    \ {\n        cuml[i] = l[i];\n        lm = std::max(lm, count[i]);\n    }\n  \
    \  int last = 0;\n    for (int i = 1; i < n; i++) {\n        int diff = count[i]\
    \ - cuml[i - 1];\n        if (diff < 0 && last*sign < 0) {\n            continue;\n\
    \        }\n        if (diff > 0 && last*sign > 0) {\n            continue;\n\
    \        }\n        if (diff > 0 && last + diff > cuml[i]) {\n            last\
    \ = cuml[i];\n        }\n        else if (diff < 0 && last - diff > cuml[i]) {\n\
    \            last = cuml[i];\n        }\n    }\n    return last == cuml[n - 1];\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpayu_zm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwpayu_zm.cpp:20:30: error: \u2018sign\u2019 was not declared\
    \ in this scope; did you mean \u2018sin\u2019?\n   20 |         if (diff < 0 &&\
    \ last*sign < 0) {\n      |                              ^~~~\n      |       \
    \                       sin\n/tmp/tmpwpayu_zm.cpp:23:30: error: \u2018sign\u2019\
    \ was not declared in this scope; did you mean \u2018sin\u2019?\n   23 |     \
    \    if (diff > 0 && last*sign > 0) {\n      |                              ^~~~\n\
    \      |                              sin\n"
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (int i = 0; i < l.size()-1; i++) {\n        if (l[i+1] > l[i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpopqzqwzo: /tmp/tmpopqzqwzo.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++)\n        if (l[i]\
    \ < l[i - 1]) \n            return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjq0t_r5z: /tmp/tmpjq0t_r5z.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n=l.size();\n    int a=0;\n    int b=0;\n    for (int i=1;i<n;i++){\n\
    \        if (l[i] < l[a]){\n            a =i;\n        }\n        else if (l[i]\
    \ > l[b]){\n            b = i;\n        }\n    }\n    return l[b]-l[a]>=l[b]-l[a];\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdh5ka9wn: /tmp/tmpdh5ka9wn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (size_t i = 0; i < l.size()-1; ++i) {\n        if (l[i+1] >= l[i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpim1lt0nm: /tmp/tmpim1lt0nm.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return true;\n    long first = l[0];\n    long second\
    \ = l[1];\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] < second)\
    \ return false;\n        second = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3kp8ob6i: /tmp/tmp3kp8ob6i.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int i = 1;\n    for (int j = n; j > 0; --j)\
    \ {\n        if (l[j] < l[j - 1]) {\n            return false;\n        }\n  \
    \  }\n    if (l[0] > l[n-1]) {\n        return false;\n    }\n    while (i < n)\
    \ {\n        if (l[i] < l[i - 1]) {\n            return false;\n        }\n  \
    \      ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptk16sim7: /tmp/tmptk16sim7.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for(int i = 1; i < n; i++) {\n        if(l[i-1]\
    \ > l[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdyo0v5fq: /tmp/tmpdyo0v5fq.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; ++i) {\n        if (l[i\
    \ - 1] > l[i])\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiaf0t0p0: /tmp/tmpiaf0t0p0.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i-1]\
    \ < l[i])\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9j0atkk6: /tmp/tmp9j0atkk6.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n - 1; i++) {\n       \
    \ if (l[i] >= l[i + 1]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp15p5qs47: /tmp/tmp15p5qs47.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    return l.size() > 1 && l[1] == l[0];\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj1og4l9s: /tmp/tmpj1og4l9s.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  return l.size() > 1 && l.front() ==\
    \ l.back();\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbh0rn94k: /tmp/tmpbh0rn94k.cpp:10: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // write your code here\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwr7tyvrk: /tmp/tmpwr7tyvrk.cpp:9: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    // If n is less than or equal to 0, return\
    \ False.\n    if (n <= 0)\n        return false;\n    int m = (n + 1) >> 1;\n\
    \    long x = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i] < x)\n\
    \            x = l[i];\n        else\n            x = l[m];\n        m = m + n\
    \ >> 1;\n    }\n    return x == l[m];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_yuaf7pd: /tmp/tmp_yuaf7pd.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Sorting list with stl sort algorithm is O(n log n)\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = l.size() - 1; i > 0; i--) {\n        if (l[i] ==\
    \ l[i - 1]) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfuuvutg0: /tmp/tmpfuuvutg0.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long n = l.size();\n    long long k = l[0], c = 1;\n    for (int\
    \ i = 1; i < n; ++i) {\n        if (k != l[i])\n            return false;\n  \
    \      k = (k + l[i]) / 2;\n        c *= (k + l[i]) / k;\n    }\n    return c\
    \ < 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6xd00lhu: /tmp/tmp6xd00lhu.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long max = *std::max_element(l.begin(), l.end());\n    long min =\
    \ *std::min_element(l.begin(), l.end());\n    return min <= max && min == max\
    \ && l.size() > 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph1urbpl5: /tmp/tmph1urbpl5.cpp:11: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long curr = l[0];\n    for (int i = 1; i <\
    \ n; ++i) {\n        if (curr < l[i]) {\n            return false;\n        }\
    \ else if (curr > l[i]) {\n            return true;\n        }\n        curr =\
    \ l[i];\n    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiaxlngiw: /tmp/tmpiaxlngiw.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n - 1; ++i) {\n       \
    \ if (l[i] > l[i + 1])\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfs8kqa9t: /tmp/tmpfs8kqa9t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // If list is empty, return true.\n    if (l.size() == 0)\n      \
    \  return true;\n\n    // Find first decreasing element.\n    long first = l[0];\n\
    \    for (long i : l)\n        if (first > i)\n            first = i;\n\n    //\
    \ If first decreasing element is same as last element, return true.\n    if (first\
    \ == l[0])\n        return true;\n\n    // If first decreasing element is greater\
    \ than or equal to second decreasing element, return false.\n    if (first >=\
    \ l[1]) return false;\n\n    // If first decreasing element is less than second\
    \ decreasing element, return false.\n    if (first <= l[1]) return false;\n\n\
    \    // If first decreasing element is less than second decreasing element, return\
    \ true.\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj0j9xnx2: /tmp/tmpj0j9xnx2.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n        long min = l[0];\n        long max = l[0];\n        for(long i\
    \ = 1; i < l.size(); i++) {\n                if(l[i] < min)\n                \
    \        min = l[i];\n                if(l[i] > max)\n                       \
    \ max = l[i];\n        }\n        if(max <= min)\n                return false;\n\
    \        else\n                return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiwm_20dr: /tmp/tmpiwm_20dr.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long prev = l[0];\n    for (int i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] < prev) {\n            return false;\n        }\n        prev =\
    \ l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf8ck3s01: /tmp/tmpf8ck3s01.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long minl=l[0];\n    long maxl=l[0];\n    for(long i=1;i<l.size();i++)\
    \ {\n        if(l[i]<minl) minl=l[i];\n        if(l[i]>maxl) maxl=l[i];\n    }\n\
    \    if(maxl<minl) return false;\n    if(maxl>=l[0]) std::swap(minl,maxl);\n \
    \   for(long i=0;i<l.size();i++) {\n        if(l[i]<minl) return false;\n    \
    \    if(l[i]>maxl) return false;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpii9yoto0: /tmp/tmpii9yoto0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for(int i = 0; i < n-1; i++)\n        if(l[i+1]\
    \ > l[i])\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk_mrqpzz: /tmp/tmpk_mrqpzz.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() < 3) return true;\n    long first = l[0], last = l[l.size()-1],\
    \ cur = first;\n    long prev = 1;\n    for(size_t i = 1; i < l.size(); i++) {\n\
    \        cur = l[i];\n        if(cur < first) first = cur;\n        if(cur > last)\
    \ last = cur;\n        if(cur < prev) prev++;\n        else prev--;\n    }\n \
    \   return first < last && (first == last || (first - last) != (prev - cur));\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk6cjqxiq: /tmp/tmpk6cjqxiq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n        long long int max = std::max_element(l.begin(), l.end());\n  \
    \      long long int min = std::min_element(l.begin(), l.end());\n        return\
    \ max >= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwps0u5im.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwps0u5im.cpp:5:45: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long long int\u2019 in initialization\n\
    \    5 |         long long int max = std::max_element(l.begin(), l.end());\n \
    \     |                             ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n   \
    \   |                                             |\n      |                 \
    \                            __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n/tmp/tmpwps0u5im.cpp:6:45: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long long int\u2019 in initialization\n\
    \    6 |         long long int min = std::min_element(l.begin(), l.end());\n \
    \     |                             ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n   \
    \   |                                             |\n      |                 \
    \                            __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n"
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 0) return false;\n\n\tlong prev = l.front();\n\tfor\
    \ (long i : l) {\n\t\tif (i > prev) return false;\n\t\tprev = i;\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2r63a4ly: /tmp/tmp2r63a4ly.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (int i = 1; i < l.size(); i++) {\n        if(l[i] > l[i-1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplv_7hk2q: /tmp/tmplv_7hk2q.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n - 1; ++i) {\n       \
    \ if (l[i] < l[i - 1]) return false;\n        if (l[i] > l[i - 1]) return true;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbiz6dfvz: /tmp/tmpbiz6dfvz.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong long int sum = l[0];\n\tfor (int i = 1; i < l.size(); ++i) {\n\t\
    \tif (l[i] < sum) return false;\n\t\tsum += l[i];\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf6ezl_27: /tmp/tmpf6ezl_27.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find minimum element.\n    long minval = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] < minval) minval = l[i];\n    }\n\
    \n    // All elements must be in range [0, minval].\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] < 0 || l[i] >= minval) return false;\n  \
    \  }\n\n    // All elements are in range [minval, maxval].\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj2jlop5t: /tmp/tmpj2jlop5t.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long min = l[0], max = l[0];\n    for (long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) max = l[i];\n        if (l[i] < min) min = l[i];\n\
    \    }\n    return max <= min;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx340_0ts: /tmp/tmpx340_0ts.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int sz = l.size();\n    int n = sz % 2;\n    if (sz / 2 < 2) return\
    \ false;\n    if (n != 0) return true;\n    for (int i = 1; i < sz / 2; i++) {\n\
    \        if (l[i] > l[i - 1]) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphbc2mu0p: /tmp/tmphbc2mu0p.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int m = n - 1;\n    long a = l[m];\n    long\
    \ b = l[0];\n    for (int i = 0; i < m; ++i) {\n        if (l[i] > b) {\n    \
    \        b = l[i];\n        }\n    }\n    for (int i = m; i >= 0; --i) {\n   \
    \     if (l[i] < a) {\n            a = l[i];\n        }\n    }\n    return a <\
    \ b;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp186z4_jj: /tmp/tmp186z4_jj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Write your code here.\n    long n = l.size();\n    if (n == 0)\
    \ return true;\n    if (n == 1) return false;\n    if (l[0] == l[n-1]) return\
    \ false;\n    long i = 1;\n    long long prev = 0;\n    for (int i = 2; i < n;\
    \ ++i) {\n        if (l[i] < prev) {\n            return false;\n        } else\
    \ if (l[i] > prev) {\n            prev = l[i];\n        }\n        i++;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzloi97kn: /tmp/tmpzloi97kn.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i=l.size()-1;i>0;i--)\n        if (l[i] <= l[i-1]) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptl6m6bxd: /tmp/tmptl6m6bxd.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Initialize a boolean to false\n    bool increasing = false;\n \
    \   // Keep moving current minimum value while list elements are greater than\
    \ current minimum\n    long current = l.front();\n    long previous = l.front();\n\
    \    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i] < previous)\n \
    \           increasing = false;\n        if (l[i] > current)\n            increasing\
    \ = true;\n        current = previous;\n        previous = l[i];\n    }\n    return\
    \ increasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpunn64z5m: /tmp/tmpunn64z5m.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) {\n        return true;\n    }\n    int l = l.size()\
    \ - 1;\n    int r = l.size() - 1;\n    long lval = l[l];\n    long rval = l[r];\n\
    \    for (int i = 2; i < l.size(); i++) {\n        if (lval > l[l]) return false;\n\
    \        else if (rval > l[l]) return false;\n        if (lval > rval) break;\n\
    \        l = i;\n        r = i - 1;\n        lval = l[l];\n        rval = l[r];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7l6eqeu.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx7l6eqeu.cpp:8:9: error: declaration of \u2018int l\u2019\
    \ shadows a parameter\n    8 |     int l = l.size() - 1;\n      |         ^\n\
    /tmp/tmpx7l6eqeu.cpp:8:15: error: request for member \u2018size\u2019 in \u2018\
    l\u2019, which is of non-class type \u2018int\u2019\n    8 |     int l = l.size()\
    \ - 1;\n      |               ^~~~\n/tmp/tmpx7l6eqeu.cpp:9:15: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    int\u2019\n    9 |     int r = l.size() - 1;\n      |               ^~~~\n/tmp/tmpx7l6eqeu.cpp:10:20:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   10 |     long\
    \ lval = l[l];\n      |                    ^\n/tmp/tmpx7l6eqeu.cpp:11:20: error:\
    \ invalid types \u2018int[int]\u2019 for array subscript\n   11 |     long rval\
    \ = l[r];\n      |                    ^\n/tmp/tmpx7l6eqeu.cpp:12:27: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    int\u2019\n   12 |     for (int i = 2; i < l.size(); i++) {\n      |         \
    \                  ^~~~\n/tmp/tmpx7l6eqeu.cpp:13:23: error: invalid types \u2018\
    int[int]\u2019 for array subscript\n   13 |         if (lval > l[l]) return false;\n\
    \      |                       ^\n/tmp/tmpx7l6eqeu.cpp:14:28: error: invalid types\
    \ \u2018int[int]\u2019 for array subscript\n   14 |         else if (rval > l[l])\
    \ return false;\n      |                            ^\n/tmp/tmpx7l6eqeu.cpp:18:19:\
    \ error: invalid types \u2018int[int]\u2019 for array subscript\n   18 |     \
    \    lval = l[l];\n      |                   ^\n/tmp/tmpx7l6eqeu.cpp:19:19: error:\
    \ invalid types \u2018int[int]\u2019 for array subscript\n   19 |         rval\
    \ = l[r];\n      |                   ^\n"
  stdout: ''
  timestamp: 1660129372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n\tassert(l.size() > 2);\n\tlong first = l[0];\n\tlong last = l[l.size()\
    \ - 1];\n\treturn (first > last + 1) || (first < last - 1);\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp84dro_tg: /tmp/tmp84dro_tg.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int j = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        long current = l[i];\n        while (j < i && l[j] < current)\n \
    \           j++;\n        if (j == i)\n            return false;\n        if (l[i]\
    \ < l[j]) {\n            l[i] = l[j];\n        } else {\n            l[j] = l[i];\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpixhozlmm: /tmp/tmpixhozlmm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int incr = 0;\n    int decr = 0;\n    for (int\
    \ i = 0; i < n; ++i) {\n        if (l[i] > l[i + 1]) {\n            incr++;\n\
    \        } else {\n            decr++;\n        }\n    }\n    return incr == decr;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprser8bpl: /tmp/tmprser8bpl.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size()==0) return false;\n    if(l[0]<l[1]) return false;\n \
    \   for(long i=0;i<l.size();i++)\n        if(l[i]<l[i-1]) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1lyqlupi: /tmp/tmp1lyqlupi.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    auto last = l.end();\n    for (auto i =\
    \ l.begin(); i != last; ++i) {\n        if (*it < *i) {\n            return false;\n\
    \        }\n        ++it;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpulbfj26s: /tmp/tmpulbfj26s.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++)\n        if (l[i-1]\
    \ >= l[i])\n            return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu1xja82l: /tmp/tmpu1xja82l.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    // Return True is list elements are monotonically increasing or decreasing.\n\
    \    for (int i=1; i<l.size(); i++) {\n        if (l[i] < l[i-1]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0i7ncns5: /tmp/tmp0i7ncns5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i - 1] >= l[i])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5ad9bdjo: /tmp/tmp5ad9bdjo.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long mid = l.size() / 2;\n    long left = l[mid];\n    long right\
    \ = l[mid+1];\n    for (int i = mid+1; i < l.size(); i++) {\n        if (l[i]\
    \ < left || (l[i] == left && l[i-1] < right))\n            return false;\n   \
    \     left = right;\n        right = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3hv78p_1: /tmp/tmp3hv78p_1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if(n < 2) return true;\n    long k1 = l[0],\
    \ k2 = l[n - 1];\n    for(int i = 1; i < n - 1; ++i) {\n        if(l[i] < k2)\
    \ return false;\n        if(l[i] > k1) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb913ov_3: /tmp/tmpb913ov_3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n        long long int start = 0;\n        long long int end = 0;\n   \
    \     for(long long int i : l) {\n                if(i < start) {\n          \
    \              return false;\n                }\n                if(i > end) {\n\
    \                        return false;\n                }\n        }\n       \
    \ return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmwqr79wq: /tmp/tmpmwqr79wq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return false;\n\n    long min_val = l[0];\n   \
    \ long max_val = l[0];\n\n    for (size_t i = 1; i < l.size(); ++i) {\n      \
    \  if (l[i] < min_val) return false;\n        if (l[i] > max_val) return false;\n\
    \n        min_val = min(min_val, l[i]);\n        max_val = max(max_val, l[i]);\n\
    \    }\n\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1qi6viuy.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1qi6viuy.cpp:14:19: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   14 |         min_val =\
    \ min(min_val, l[i]);\n      |                   ^~~\n      |                \
    \   std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmp1qi6viuy.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp1qi6viuy.cpp:15:19: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   15 |         max_val = max(max_val, l[i]);\n      |                   ^~~\n\
    \      |                   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qi6viuy.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int a = 0;\n    long long int b = 0;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > a)\n            a = l[i];\n       \
    \ if (l[i] < b)\n            b = l[i];\n    }\n    return a > b;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpro_ribbe: /tmp/tmpro_ribbe.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 3)\n        return false;\n    int n = l.size() - 1;\n\
    \    long a = l[n];\n    long b = l[n + 1];\n    if (a >= b)\n        return false;\n\
    \    for (int i = n; i >= 0; i--) {\n        if (l[i] > a || l[i] < b)\n     \
    \       return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqncs7u_4: /tmp/tmpqncs7u_4.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n <= 1) return true;\n    int i = 1;\n\
    \    int j = n - 1;\n    while (i + 1 < j) {\n        if (l[i] > l[j]) {\n   \
    \         i++;\n        } else if (l[i] < l[j]) {\n            j--;\n        }\
    \ else {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvj4eelxb: /tmp/tmpvj4eelxb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129373
