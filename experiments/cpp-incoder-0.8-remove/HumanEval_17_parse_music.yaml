name: HumanEval_17_parse_music
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string representing musical notes in a special ASCII format.\n// Your task is\
  \ to parse this string and return list of integers corresponding to how many beats\
  \ does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four\
  \ beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one\
  \ beat\nstd::vector<long> parse_music(std::string music_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
  \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
  \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
  )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
  \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2,\
  \ (long)1, (long)2, (long)1, (long)4, (long)2, (long)4, (long)2})));\n}\n"
completions: ["    std::vector<long> beats;\n    std::string notes[] = {\n       \
    \ \"o\",\n        \"o|\",\n        \".|\"\n    };\n    char prev_note = notes[0];\n\
    \    for (size_t i = 0; i < music_string.size(); ++i) {\n        char note = music_string[i];\n\
    \        if (note == notes[1]) {\n            beats.push_back(beats.back() + 4);\n\
    \            beats.push_back(beats.back());\n        }\n        else if (note\
    \ == notes[2]) {\n            beats.push_back(beats.back() + 2);\n           \
    \ beats.push_back(beats.back());\n        }\n        else if (note == notes[3])\
    \ {\n            beats.push_back(beats.back() + 1);\n        }\n        else if\
    \ (note != notes[0]) {\n            if (prev_note == 'o' || prev_note == 'o|')\
    \ {\n                beats.push_back(beats.back() + 4);\n                beats.push_back(beats.back());\n\
    \            }\n            else if (prev_note == '.' || prev_note == '.|') {\n\
    \                beats.push_back(beats.back() + 2);\n                beats.push_back(beats.back());\n\
    \            }\n            else if (prev_note != 'o' && prev_note != 'o|' &&\
    \ prev_note != '.|') {\n                beats.push_back(beats.back());\n     \
    \       }\n            prev_note = note;\n            beats.push_back(0);\n  \
    \      }\n    }\n    return beats;", "    // Write your code here\n    assert(music_string.length()\
    \ % 4 == 0);\n    auto note_length = music_string.length() / 4;\n    std::vector<long>\
    \ beats(note_length);\n    long last_beat = 0;\n    for (auto &c: music_string)\
    \ {\n        if (c != 'o') {\n            beats[last_beat]++;\n            last_beat\
    \ = 0;\n        } else {\n            if (c == '|') {\n                last_beat++;\n\
    \            } else {\n                assert(c == 'o');\n                last_beat\
    \ = 4;\n            }\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ beats(4);\n    std::stringstream sstream(music_string);\n    std::string token;\n\
    \    std::string temp;\n    long beats_count = 0;\n    while (std::getline(sstream,\
    \ token, ',')) {\n        if (token == \"o\") {\n            beats[beats_count]\
    \ = beats[beats_count - 4];\n            beats_count++;\n        } else if (token\
    \ == \"o|\") {\n            beats[beats_count] = beats[beats_count - 2];\n   \
    \         beats_count++;\n        } else if (token == \".|\") {\n            beats[beats_count]\
    \ = beats[beats_count - 1];\n            beats_count++;\n        } else if (token\
    \ == \"o#\") {\n            beats[beats_count] = beats[beats_count - 4];\n   \
    \         beats_count++;\n        }\n    }\n    return beats;", "    // Write\
    \ your code here\n    \n    return std::vector<long>();", "    std::vector<long>\
    \ music(music_string.length() / 4);\n    for (long i = 0; i < music.size(); i++)\
    \ {\n        long beats = music_string[i * 4 + 0] - '0';\n        if (beats <\
    \ 0 || beats > 4) {\n            throw std::runtime_error(\"Invalid music\");\n\
    \        }\n        music[i] = beats;\n    }\n    return music;", "    // Write\
    \ your code here\n    // For practice try using std::string.\n    // Your code\
    \ should return list of integers corresponding to how many beats does each not\
    \ last.\n    // For example: 'o' -> [4, 4, 4, 4, 4, 4]\n    // Your code should\
    \ not return empty list\n    \n    std::vector<long> retval;\n    \n    std::string\
    \ current_note;\n    long beat_counter = 0;\n    \n    for(int i = 0; i < (music_string.length());\
    \ i++) {\n        switch(music_string[i]) {\n            \n            case 'o':\
    \ current_note = \"whole\"; break;\n            case 'o|': current_note = \"half\"\
    ; break;\n            case '.|': current_note = \"quarter\"; break;\n        \
    \    \n            default:\n            {\n                beat_counter = 0;\n\
    \                current_note = \"\";\n                break;\n            }\n\
    \        }\n        \n        if(beat_counter == 0) {\n            \n        \
    \    switch(current_note) {\n                \n                case \"whole\"\
    : beat_counter = 4; break;\n                case \"half\": beat_counter = 2; break;\n\
    \                case \"quarter\": beat_counter = 1; break;\n                \n\
    \                default:\n                {\n                    beat_counter\
    \ = 0;\n                    break;\n                }\n            }\n       \
    \     \n        }\n        \n        retval.push_back(beat_counter);\n       \
    \ \n        beat_counter = 0;\n    }\n    \n    return retval;", "    std::vector<long>\
    \ vec;\n    // Step 1: Count the number of '.' characters\n    int beat_count_o\
    \ = 0;\n    int beat_count_oOr = 0;\n    int beat_count_oOrI = 0;\n    int beat_count_oI\
    \ = 0;\n    int beat_count_iOr = 0;\n    int beat_count_iOrI = 0;\n    int beat_count_iI\
    \ = 0;\n    int beat_count_O = 0;\n    int beat_count_OOr = 0;\n    int beat_count_OOrI\
    \ = 0;\n    int beat_count_OI = 0;\n    int beat_count_IOr = 0;\n    int beat_count_IOrI\
    \ = 0;\n    int beat_count_II = 0;\n    int beat_count_rOr = 0;\n    int beat_count_rOrI\
    \ = 0;\n    int beat_count_rI = 0;\n    int beat_count_lOr = 0;\n    int beat_count_lOrI\
    \ = 0;\n    int beat_count_lI = 0;\n    int beat_count_R = 0;\n    int beat_count_ROr\
    \ = 0;\n    int beat_count_ROrI = 0;\n    int beat_count_RI = 0;\n    int beat_count_L\
    \ = 0;\n    int beat_count_LOr = 0;\n    int beat_count_LOrI = 0;\n    int beat_count_LI\
    \ = 0;\n    int beat_count_D = 0;\n    int beat_count_DOr = 0;\n    int beat_count_DOrI\
    \ = 0;\n    int beat_count_DI = 0;\n    int beat_count_dOr = 0;\n    int beat_count_dOrI\
    \ = 0;\n    int beat_count_dI = 0;\n    int beat_count_fOr = 0;\n    int beat_count_fOrI\
    \ = 0;\n    int beat_count_fI = 0;\n    int beat_count_bOr = 0;\n    int beat_count_bOrI\
    \ = 0;\n    int beat_count_bI = 0;\n    int beat_count_nOr = 0;\n    int beat_count_nOrI\
    \ = 0;\n    int beat_count_nI = 0;\n    int beat_count_tOr = 0;\n    int beat_count_tOrI\
    \ = 0;\n    int beat_count_tI = 0;\n    int beat_count_mOr = 0;\n    int beat_count_mOrI\
    \ = 0;\n    int beat_count_mI = 0;\n    int beat_count_kOr = 0;\n    int beat_count_kOrI\
    \ = 0;\n    int beat_count_kI = 0;\n    int beat_count_pOr = 0;\n    int beat_count_pOrI\
    \ = 0;\n    int beat_count_pI = 0;\n    int beat_count_mOrL = 0;\n    int beat_count_mOrR\
    \ = 0;\n    int beat_count_mOrRL = 0;\n    int beat_count_mOrRL = 0;", "  std::vector<long>\
    \ beats;\n  int beat;\n  long beat_number = 0;\n  int i = 0;\n  // We do not process\
    \ empty line\n  while (music_string[i] != '\\n' && i < music_string.size()) {\n\
    \    if (music_string[i] == '.') {\n      i++;\n      if (music_string[i] == '|')\
    \ {\n        beats.push_back(beat_number);\n        beat_number = 0;\n       \
    \ i++;\n        continue;\n      }\n      if (music_string[i] == 'o') {\n    \
    \    beats.push_back(beat_number);\n        beat_number = beat;\n        i++;\n\
    \        continue;\n      }\n    }\n    if (music_string[i] == 'o') {\n      beat\
    \ = music_string[i++] - '0';\n      beat_number = beat;\n      i++;\n      continue;\n\
    \    }\n    beat_number++;\n    i++;\n  }\n  return beats;", "    // Your code\
    \ goes here.\n    std::vector<long> notes;\n    int beats = 4;\n    for (int i\
    \ = 0; i < music_string.size(); i += beats) {\n        std::string part = music_string.substr(i,\
    \ beats);\n        if (part == \"o\")\n            notes.push_back(4);\n     \
    \   else if (part == \"o|\")\n            notes.push_back(2);\n        else if\
    \ (part == \".|\")\n            notes.push_back(1);\n        else\n          \
    \  std::cerr << \"Error!\" << std::endl;\n    }\n    return notes;", "    // Your\
    \ code here\n    int counter = 0; // count beats\n    int size = music_string.size();\n\
    \    std::string note_symbol = \"o\";\n    long last_beat = size;\n    std::vector<long>\
    \ beats(last_beat, 0);\n    for(int i = 0; i < size; i++) {\n        std::string\
    \ token = music_string.substr(i, 1);\n        if(token == \"o\") {\n         \
    \   note_symbol = \"o\";\n        }\n        else if(token == \"|\") {\n     \
    \       note_symbol = \"o|\";\n        }\n        else if(token == \".\") {\n\
    \            note_symbol = \".|\";\n        }\n        else if(token == \"0\"\
    ) {\n            counter++;\n        }\n        else if(token == \"1\") {\n  \
    \          counter--;\n        }\n        else if(token == \"l\") {\n        \
    \    beats[counter] = beats[counter] + 1;\n        }\n        else if(token ==\
    \ \"r\") {\n            beats[counter] = beats[counter] - 1;\n        }\n    \
    \    else if(token == \"u\") {\n            beats[counter] = beats[counter] +\
    \ 4;\n        }\n        else if(token == \"d\") {\n            beats[counter]\
    \ = beats[counter] - 4;\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ beats_per_note;\n    std::string note_symbol = \"o\";\n    // Convert from decimal\
    \ notation to octave\n    int octave = 0;\n    for (int i = 0; i < music_string.size();\
    \ i++) {\n        char current_symbol = music_string[i];\n        if (current_symbol\
    \ == '|') {\n            note_symbol = \"o|\";\n        } else if (current_symbol\
    \ == '.') {\n            note_symbol = \".|\";\n        } else {\n           \
    \ // If current symbol is 'o' then it represents whole note\n            if (current_symbol\
    \ == 'o') {\n                beats_per_note.push_back(octave);\n             \
    \   // Reset octave counter\n                octave = 0;\n            } else {\n\
    \                // If current symbol is not 'o' then it represents half note\n\
    \                int note = current_symbol - '0';\n                beats_per_note.push_back((note\
    \ + 4) / 4);\n            }\n        }\n    }\n    return beats_per_note;", " \
    \ std::vector<long> beats(4);\n  int len = music_string.size();\n  int note_pos\
    \ = 0;\n  bool last = false;\n  while (note_pos < len) {\n    if (music_string[note_pos]\
    \ == 'o') {\n      last = true;\n      beats[0]++;\n    } else if (music_string[note_pos]\
    \ == '.') {\n      last = false;\n      beats[1]++;\n    } else if (music_string[note_pos]\
    \ == '|') {\n      last = false;\n      beats[2]++;\n    } else if (music_string[note_pos]\
    \ == 'o|') {\n      last = true;\n      beats[3]++;\n    }\n    note_pos++;\n\
    \  }\n  return beats;", "    // Write your code here\n    std::vector<long> beats(music_string.length()\
    \ / 4);\n    for (size_t i = 0; i < music_string.length(); i += 4)\n        beats[i\
    \ / 4] +=  (3 * music_string[i]) - 128;\n    return beats;", "    std::vector<long>\
    \ beat_durations(4);\n    // Your code goes here\n    return beat_durations;",
  '    // Your code here', "    std::vector<std::string> splitted;\n    size_t pos\
    \ = 0;\n    size_t cur_pos = 0;\n    for (size_t i = 0; i < music_string.size();\
    \ ++i) {\n        char c = music_string[i];\n        if (c == '.') {\n       \
    \     splitted.emplace_back(music_string.substr(cur_pos, i - pos));\n        \
    \    pos = i;\n            cur_pos = i + 1;\n        } else if (c == 'o') {\n\
    \            splitted.emplace_back(music_string.substr(cur_pos, i - pos));\n \
    \           pos = i;\n            cur_pos = i + 1;\n        } else if (c == 'o|')\
    \ {\n            splitted.emplace_back(music_string.substr(cur_pos, i - pos));\n\
    \            pos = i;\n            cur_pos = i + 1;\n        }\n    }\n    splitted.emplace_back(music_string.substr(cur_pos,\
    \ music_string.size() - pos));\n    std::vector<long> beats;\n    beats.reserve(splitted.size());\n\
    \    for (auto& str : splitted) {\n        beats.push_back(std::stoi(str));\n\
    \    }\n    return beats;", "  std::set<std::string> notes;\n  notes.insert(std::string({'o','o','o'}));\n\
    \  notes.insert(std::string({'o|','o|','o|'}));\n  notes.insert(std::string({'.|','.|','.|'}));\n\
    \  notes.insert(std::string({'|','|','|'}));\n\n  // A note will be represented\
    \ by a string of four characters ('o|')\n  // or two characters ('o.')\n  // We\
    \ will keep this list of notes in our stack\n  std::vector<std::string> notesStack;\n\
    \  for (auto note : notes) {\n    notesStack.push_back(note);\n  }\n\n  // A note\
    \ will be represented by a string of four characters ('o|')\n  // or two characters\
    \ ('o.')\n  // We will keep this list of notes in our stack\n  std::vector<std::string>\
    \ notesStack2;\n  for (auto note : notes) {\n    notesStack2.push_back(note);\n\
    \  }\n\n  // A note will be represented by a string of four characters ('o|')\n\
    \  // or two characters ('o.')\n  // We will keep this list of notes in our stack\n\
    \  std::vector<std::string> notesStack3;\n  for (auto note : notes) {\n    notesStack3.push_back(note);\n\
    \  }\n\n  // A note will be represented by a string of four characters ('o|')\n\
    \  // or two characters ('o.')\n  // We will keep this list of notes in our stack\n\
    \  std::vector<std::string> notesStack4;\n  for (auto note : notes) {\n    notesStack4.push_back(note);\n\
    \  }\n\n  // A note will be represented by a string of four characters ('o|')\n\
    \  // or two characters ('o.')\n  // We will keep this list of notes in our stack\n\
    \  std::vector<std::string> notesStack5;\n  for (auto note : notes) {\n    notesStack5.push_back(note);\n\
    \  }\n\n  // A note will be represented by a string of four characters ('o|')\n\
    \  // or two characters ('o.')\n  // We will keep this list of notes in our stack\n\
    \  std::vector<std::string> notesStack6;\n  for (auto note : notes) {\n    notesStack6.push_back(note);\n\
    \  }\n\n  // A note will be represented by a string of four characters ('o|')\n\
    \  // or two characters ('o.')\n  // We will keep this list of notes in our stack\n\
    \  std::vector<std::string> notesStack7;\n  for (auto note : notes) {\n    notesStack7.push_back(note);\n\
    \  }\n\n  // A note will be represented by a string of four characters ('o|')\n\
    \  // or two characters ('o.')", "    std::vector<long> beats;\n    std::string::iterator\
    \ itr = music_string.begin();\n    std::string::iterator itr2 = itr;\n    std::string::iterator\
    \ itr3;\n    int n = 0;\n    while (itr2 != music_string.end()) {\n        switch\
    \ (*itr2) {\n        case 'o':\n            while (n % 4 == 0) {\n           \
    \     beats.push_back(n);\n                n++;\n            }\n            break;\n\
    \        case 'o|':\n            while (n % 2 == 0) {\n                beats.push_back(n);\n\
    \                n++;\n            }\n            break;\n        case '.|':\n\
    \            while (n % 1 == 0) {\n                beats.push_back(n);\n     \
    \           n++;\n            }\n            break;\n        default:\n      \
    \      itr3 = itr;\n            while (itr2 != music_string.end()) {\n       \
    \         switch (*itr2) {\n                case 'o':\n                    while\
    \ (n % 4 == 0) {\n                        beats.push_back(n);\n              \
    \          n++;\n                    }\n                    break;\n         \
    \       case 'o|':\n                    while (n % 2 == 0) {\n               \
    \         beats.push_back(n);\n                        n++;\n                \
    \    }\n                    break;\n                case '.|':\n             \
    \       while (n % 1 == 0) {\n                        beats.push_back(n);\n  \
    \                      n++;\n                    }\n                    break;\n\
    \                }\n                itr2 = itr;\n            }\n            itr\
    \ = itr3;\n        }\n        itr++;\n    }\n    return beats;", "    // Your\
    \ code goes here\n    // your solution here\n    // your code here\n    // Your\
    \ solution here", "    // Complete this function\n    return {};", "    std::vector<long>\
    \ notes(music_string.length() / 3, 0); //initialize vector of size equal to string\
    \ length\n    long current_beats = 0; //initialize, how many beats does current\
    \ note last\n    // go through the string, from left to right\n    for (size_t\
    \ i = 0; i < music_string.length(); i += 3) {\n        // if current symbol is\
    \ 'o', then it means last note should be 4 beats long\n        if (music_string[i]\
    \ == std::string(\"o\")) {\n            current_beats = 4;\n            // if\
    \ we have 4 beats already, then continue to the next symbol\n            if (current_beats\
    \ > 0) {\n                // if we have not already checked the symbol '|', then\
    \ add 4 more beats\n                if (music_string[i + 1] == std::string(\"\
    |\")) {\n                    current_beats += 4;\n                }\n        \
    \    }\n        } else if ((music_string[i] == std::string(\"o|\")) || (music_string[i]\
    \ == std::string(\"o.|\"))) {\n            // if we have already checked symbol\
    \ 'o' and we have already checked '|', then add the current note\n           \
    \ current_beats += 2;\n            // if we have not already checked the symbol\
    \ '|', then add 2 more beats\n            if (music_string[i + 1] == std::string(\"\
    |\")) {\n                current_beats += 2;\n            }\n        } else if\
    \ (music_string[i] == std::string(\".|\")) {\n            current_beats += 1;\n\
    \        } else {\n            // otherwise the last note should last exactly\
    \ current_beats beats\n            current_beats += 3;\n        }\n        //\
    \ if we have not yet reached string end, then add 3 more beats to the note\n \
    \       if (i + 1 < music_string.length()) {\n            notes[current_beats\
    \ - 1] = notes[current_beats - 1] + 1;\n        }\n    }\n    return notes;",
  "    std::vector<long> vec;\n    int current_beat = 0;\n    for (char note : music_string)\
    \ {\n        switch (note) {\n            case 'o':\n                if (current_beat\
    \ == 4) {\n                    vec.push_back(4);\n                    current_beat\
    \ = 0;\n                } else if (current_beat == 2) {\n                    vec.push_back(2);\n\
    \                    current_beat = 0;\n                }\n                break;\n\
    \            case 'o|':\n                if (current_beat == 4) {\n          \
    \          vec.push_back(2);\n                    current_beat = 0;\n        \
    \        } else if (current_beat == 2) {\n                    vec.push_back(1);\n\
    \                    current_beat = 0;\n                }\n                break;\n\
    \            case '.|':\n                if (current_beat == 4) {\n          \
    \          vec.push_back(1);\n                    current_beat = 0;\n        \
    \        }\n                break;\n            case 'o..':\n                if\
    \ (current_beat == 4) {\n                    vec.push_back(1);\n             \
    \       current_beat = 0;\n                } else if (current_beat == 2) {\n \
    \                   vec.push_back(1);\n                    current_beat = 0;\n\
    \                }\n                break;\n            case 'o...':\n       \
    \         if (current_beat == 4) {\n                    vec.push_back(1);\n  \
    \                  current_beat = 0;\n                } else if (current_beat\
    \ == 2) {\n                    vec.push_back(1);\n                    current_beat\
    \ = 0;\n                } else if (current_beat == 3) {\n                    vec.push_back(1);\n\
    \                    current_beat = 0;\n                }\n                break;\n\
    \            case 'o...|':\n                if (current_beat == 4) {\n       \
    \             vec.push_back(1);\n                    current_beat = 0;\n     \
    \           } else if (current_beat == 2) {\n                    vec.push_back(1);\n\
    \                    current_beat = 0;\n                } else if (current_beat\
    \ == 3) {\n                    vec.push_back(1);\n                    current_beat\
    \ = 0;\n                } else if (current_beat == 1) {\n                    vec.push_back(2);\n\
    \                    current_beat = 0;\n                }\n                break;\n\
    \            default:\n                break;\n        }\n    }\n    return vec;",
  "    // Your code goes here\n    assert(music_string.size() > 0);\n\n    std::vector<long>\
    \ temp;\n    char lastChar = music_string[0];\n    for (int i = 1; i < music_string.size();\
    \ i++) {\n        char currentChar = music_string[i];\n        if (currentChar\
    \ != lastChar) {\n            if (lastChar == 'o') {\n                temp.push_back(4\
    \ * (i - 1)); // for whole note, lasts four beats\n            }\n           \
    \ else if (lastChar == 'o|') {\n                temp.push_back(2 * (i - 1)); //\
    \ for half note, lasts two beats\n            }\n            else {\n        \
    \        temp.push_back(1 * (i - 1)); // for quater note, lasts one beat\n   \
    \         }\n            temp.push_back(0);\n            lastChar = currentChar;\n\
    \        }\n    }\n    return temp;", "    // Your code goes here\n    std::vector<long>\
    \ output;\n    long note = 0;\n    long beat_per_octave = 0;\n    bool is_half\
    \ = false, is_whole = false;\n    for (char c : music_string) {\n        if (c\
    \ == '|') {\n            is_half = true;\n        } else if (c == 'o') {\n   \
    \         is_whole = true;\n        } else if (c == ' ') {\n            output.push_back(beat_per_octave);\n\
    \            beat_per_octave = 0;\n        } else {\n            if (is_whole)\
    \ {\n                note = note + c * 4;\n            } else {\n            \
    \    note = note + beat_per_octave * 12 + c;\n            }\n            beat_per_octave\
    \ = note % 12;\n            note = 0;\n        }\n    }\n    return output;",
  "    std::vector<long> beats;\n    std::vector<char> notes;\n    std::vector<int>\
    \ times;\n    std::vector<int> beats_per_beat;\n    std::vector<bool> is_complete;\n\
    \    // Store string in array\n    for (int i = 0; i < music_string.length();\
    \ i++) {\n        char c = music_string[i];\n        notes.push_back(c);\n   \
    \ }\n    // Calculate times\n    int total_time = 0;\n    for (int i = 0; i <\
    \ notes.size(); i++) {\n        char c = notes[i];\n        if (c == '.') {\n\
    \            is_complete.push_back(1);\n            beats_per_beat.push_back(i\
    \ + 1);\n            times.push_back(total_time);\n            total_time = i\
    \ + 1;\n        } else if (c == 'o') {\n            is_complete.push_back(1);\n\
    \            beats_per_beat.push_back(i + 1);\n            times.push_back(total_time);\n\
    \            total_time = i + 1;\n        } else if (c == '|') {\n           \
    \ is_complete.push_back(1);\n            beats_per_beat.push_back(i + 1);\n  \
    \          times.push_back(total_time);\n            total_time = i + 1;\n   \
    \     } else {\n            is_complete.push_back(0);\n        }\n    }\n    //\
    \ Return list of integers\n    return beats_per_beat;", "    std::vector<long>\
    \ notes{};\n    // Your code goes here\n    for (int i = 0; i < music_string.length();\
    \ ++i) {\n        if (music_string[i] == 'o') {\n            notes.push_back(i*4);\n\
    \        }\n        else if (music_string[i] == 'o|') {\n            notes.push_back(i*2);\n\
    \        }\n        else if (music_string[i] == '.|') {\n            notes.push_back(1);\n\
    \        }\n    }\n    return notes;", "  // Use std::vector to store results\n\
    \  std::vector<long> results;\n  // Iterate over all characters\n  for (int i\
    \ = 0; i < music_string.size(); i++) {\n    // Check that character is one of\
    \ o, |, .\n    if (music_string[i] == 'o' || music_string[i] == '|' || music_string[i]\
    \ == '.') {\n      // If current character is one of these characters, then save\
    \ current beat to the results.\n      // This assumes that all musical notes are\
    \ longer than 1 beat. If this is not the case, then you need\n      // to adjust\
    \ this logic to store current beat correctly.\n      results.push_back(i);\n \
    \   }\n  }\n  // Return the results\n  return results;", "  long beats = 0;\n\
    \  std::unordered_map<char, long> notes;\n  // Loop through input music string.\
    \ Parse each character to its type and add to notes map.\n  for (int i = 0; i\
    \ < music_string.size(); ++i) {\n    if (notes[music_string[i]] == 0) {\n    \
    \  notes[music_string[i]] = 1;\n      beats *= 4;\n    } else if (notes[music_string[i]]\
    \ == 1) {\n      notes[music_string[i]] = 2;\n      beats *= 2;\n    } else if\
    \ (notes[music_string[i]] == 2) {\n      notes[music_string[i]] = 3;\n      beats\
    \ = 1;\n    } else {\n      notes[music_string[i]] = 4;\n    }\n  }\n  // Return\
    \ vector of integers corresponding to beats count\n  std::vector<long> res(music_string.size());\n\
    \  for (int i = 0; i < res.size(); ++i) {\n    res[i] = beats / notes[music_string[i]];\n\
    \  }\n  return res;", "  // Your code here\n  std::vector<long> output; //This\
    \ will be our return vector\n  //We will iterate through each character in the\
    \ string.\n  for (int i = 0; i < music_string.size(); i++) {\n    //We will take\
    \ each character and assign it to the corresponding string in the table above.\n\
    \    std::string str_output = \"\";\n    str_output = music_string[i];\n    if\
    \ (str_output == 'o') {\n      output.push_back(4); //If current string is a whole\
    \ note, add 4 to the output\n    } else if (str_output == 'o|') {\n      output.push_back(2);\
    \ //If current string is a half note, add 2 to the output\n    } else if (str_output\
    \ == '.|') {\n      output.push_back(1); //If current string is a quater note,\
    \ add 1 to the output\n    }\n  }\n  return output;", "    std::vector<long> beats;\n\
    \    int note = 0;\n    bool is_last_note = false;\n    int beats_since_last_note\
    \ = 0;\n    int note_length = music.length();\n    int note_length_after_note_start\
    \ = 0;\n    int note_length_last_note = 0;\n    \n    for (int i = 0; i <= note_length;\
    \ ++i) {\n        if (music[i] == 0) {\n            note = 0;\n            \n\
    \        } else {\n            note++;\n            if (note % 4 == 0) {\n   \
    \             beats_since_last_note++;\n            } else {\n               \
    \ beats_since_last_note = 0;\n            }\n            if (note == 4) {\n  \
    \              is_last_note = true;\n                note_length_last_note = i\
    \ - note_length_after_note_start;\n                note_length_after_note_start\
    \ = i;\n                note_length_after_note_start -= note_length_last_note;\n\
    \                note = 0;\n            }\n        }\n        beats.push_back(beats_since_last_note);\n\
    \    }\n    \n    return beats;", "    std::vector<long> music_list;\n    long\
    \ total_beats = 0;\n    for (auto it = music_string.begin(); it != music_string.end();\
    \ ++it) {\n        if (*it == '|') {\n            ++total_beats;\n           \
    \ music_list.push_back(total_beats);\n            total_beats = 0;\n        }\
    \ else if (*it == 'o') {\n            music_list.push_back(total_beats);\n   \
    \         total_beats = 0;\n        } else if (*it == 'o|') {\n            music_list.push_back(total_beats);\n\
    \            total_beats = 2;\n        } else if (*it == '.') {\n            music_list.push_back(total_beats);\n\
    \            total_beats = 1;\n        } else {\n            throw std::invalid_argument(\"\
    Unexpected character \" + std::to_string(*it));\n        }\n    }\n    return\
    \ music_list;", "    std::bitset<128> bs = { 0 };\n    std::string temp = \"\"\
    ;\n    std::vector<std::string> chords_temp;\n    for (char c : music_string)\
    \ {\n        switch (c) {\n            case 'o':\n                temp += \"o\"\
    ;\n                bs |= 0b0000_0000_1111_0111_0011;\n                break;\n\
    \            case 'o|':\n                temp += \"o|\";\n                bs |=\
    \ 0b0000_0000_1111_0111_1111;\n                break;\n            case '.|':\n\
    \                temp += \".|\";\n                bs |= 0b0000_0000_1111_1111_1111;\
    \ // quater note\n                break;\n            default:\n             \
    \   temp.push_back(c);\n                break;\n        }\n    }\n    temp = temp.substr(0,\
    \ temp.length() - 1);\n    if (temp != \"\") {\n        chords_temp.push_back(temp);\n\
    \    }\n    std::vector<long> chords(chords_temp.size(), 0);\n    for (size_t\
    \ i = 0; i < chords_temp.size(); i++) {\n        std::vector<char> chords_string(chords_temp[i].begin(),\
    \ chords_temp[i].end());\n        long number_of_beats = 0;\n        for (auto\
    \ c : chords_string) {\n            if (bs[c]) {\n                number_of_beats++;\n\
    \            }\n        }\n        chords[i] = number_of_beats;\n    }\n    return\
    \ chords;", "    // Your code here\n    std::vector<long> beats;\n    char c =\
    \ music_string[0];\n    long beat = 4;\n    if(c == 'o') {\n        for(const\
    \ char i : music_string) {\n            if(i == '.' || i == '|') {\n         \
    \       beat += 4;\n                continue;\n            }\n            if(i\
    \ == 'o') {\n                beat += 4;\n            }\n            if(i == '|')\
    \ {\n                beat += 2;\n            }\n            if(i == 'o|') {\n\
    \                beat += 1;\n            }\n        }\n    } else {\n        for(const\
    \ char i : music_string) {\n            if(i == 'o') {\n                beats\
    \ += 4;\n            }\n            if(i == '|') {\n                beats += 2;\n\
    \            }\n            if(i == 'o|') {\n                beats += 1;\n   \
    \         }\n        }\n    }\n    for(auto beat_counter : beats) {\n        while(beat_counter\
    \ % 4 != 0) {\n            beats.back() += 1;\n        }\n    }\n    return beats;",
  "    std::vector<long> result{};\n    int temp{};\n    std::string note, temp_string;\n\
    \    for (int i = 0; i <= music_string.length(); i++) {\n        if (music_string[i]\
    \ == '.') {\n            temp += 3;\n            temp_string += '.';\n       \
    \ } else if (music_string[i] == '|') {\n            temp += 2;\n            temp_string\
    \ += '|';\n        } else if (music_string[i] == 'o') {\n            temp += 1;\n\
    \            temp_string += 'o';\n        } else {\n            temp += 1;\n \
    \           temp_string += music_string[i];\n        }\n        // Check if we\
    \ have completed a note\n        if (temp % 2 == 0) {\n            result.push_back(temp);\n\
    \            temp = 0;\n        }\n    }\n    if (temp != 0) {\n        result.push_back(temp);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  long total = 0;\n\
    \  for (auto i : music_string) {\n    switch (i) {\n      case 'o':\n      case\
    \ 'O':\n        result.push_back(total);\n        total += 4;\n        break;\n\
    \      case 'o|':\n      case 'O|':\n        result.push_back(total);\n      \
    \  total += 2;\n        break;\n      case '.|':\n      case '|.':\n        result.push_back(total);\n\
    \        total++;\n        break;\n      default:\n        throw std::runtime_error(\"\
    Unknown musical note \" + i);\n    }\n  }\n  return result;", '  // TODO: Your
    code here', "    assert(music_string.size() > 0);\n    assert(music_string[0]\
    \ == '[');\n    assert(music_string[music_string.size() - 1] == ']');\n    //\
    \ Initialize array of size equal to number of notes present in the music string.\n\
    \    std::vector<long> result(music_string.size() / 4);\n    long i = 0;\n   \
    \ // Iterate through notes and convert them into ints\n    while (i < music_string.size())\
    \ {\n        switch (music_string[i]) {\n        case 'o':\n            result[i++]\
    \ = 0;\n        case 'o|':\n            result[i++] = 1;\n        case '.|':\n\
    \            result[i++] = 2;\n        case '|':\n            result[i++] = 3;\n\
    \        }\n    }\n    return result;", "    // Write your code here.\n    std::vector<long>\
    \ notes;\n    std::vector<std::string> music_strings;\n    music_strings.push_back(music_string);\n\
    \    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    music_strings.push_back(\"o|.o\");\n    music_strings.push_back(\"o|.o\"\
    );\n    musi", "    std::vector<std::string> all_notes;\n    std::vector<std::string>\
    \ notes_split;\n    std::vector<std::string> beats_split;\n    for (size_t i =\
    \ 0; i < music_string.size(); ++i) {\n        if (music_string[i] == '|') {\n\
    \            notes_split.push_back(all_notes.back());\n            all_notes.clear();\n\
    \        } else {\n            all_notes.push_back(music_string[i]);\n       \
    \ }\n    }\n    notes_split.push_back(all_notes.back());\n    all_notes.clear();\n\
    \    for (size_t i = 0; i < notes_split.size(); ++i) {\n        if (notes_split[i]\
    \ == \"o\") {\n            notes_split[i] = \"o|\";\n        }\n    }\n    //\
    \ Convert string to vector to count how many beats last each note.\n    std::vector<long>\
    \ notes_beats_count;\n    for (size_t i = 0; i < notes_split.size(); ++i) {\n\
    \        notes_beats_count.push_back(std::accumulate(notes_split.begin() + i,\
    \ notes_split.begin() + i + 1,\n                                             \
    \         0LL, std::multiplies<long>()));\n    }\n    return notes_beats_count;",
  "    std::vector<long> notes;\n    long temp = 0;\n    int count = 0;\n    std::string\
    \ note = \"\";\n    std::string symbol = \"\";\n    size_t pos = 0;\n    while(pos\
    \ < music_string.length()) {\n        pos = music_string.find(\"o\", pos);\n \
    \       if (pos == std::string::npos) break;\n        symbol = music_string.substr(pos,\
    \ 1);\n        if (symbol == \"o\") {\n            temp = temp + 4;\n        \
    \    note = note + \"o\";\n            notes.push_back(temp);\n            count++;\n\
    \            pos = pos + 1;\n        }\n        if (symbol == \"o|\") {\n    \
    \        temp = temp + 2;\n            note = note + \"o\";\n            notes.push_back(temp);\n\
    \            count++;\n            pos = pos + 1;\n        }\n        if (symbol\
    \ == \".|\") {\n            temp = temp + 1;\n            note = note + \".\"\
    ;\n            notes.push_back(temp);\n            count++;\n            pos =\
    \ pos + 1;\n        }\n    }\n    return notes;", "  std::vector<long> music(music_string.size()\
    \ / 3); // Create vector of size music_string.size() with default value 0\n  std::size_t\
    \ index = 0;\n  while (index < music_string.size()) {\n    if (index == music_string.size()\
    \ - 1) {\n      music[index / 3] = music_string[index] >= 'o' ? 4 : 2;\n    }\
    \ else if (index == music_string.size() - 3) {\n      music[index / 3] = music_string[index]\
    \ >= 'o' ? 2 : 1;\n    } else if (music_string[index] == '|') {\n      music[index\
    \ / 3] = music_string[index + 1] >= 'o' ? 1 : 4;\n    } else if (music_string[index]\
    \ == '.') {\n      music[index / 3] = music_string[index + 1] >= 'o' ? 1 : 2;\n\
    \    } else {\n      music[index / 3] = music_string[index + 1] >= 'o' ? 4 : 2;\n\
    \      index++;\n    }\n    index++;\n  }\n  return music;", "    // Your code\
    \ goes here\n    std::vector<long> beats;\n    int i = 0, beat = 0;\n    for (const\
    \ char c : music_string) {\n        switch (c) {\n        case 'o':\n        \
    \    beats.push_back(beat);\n            beat = 0;\n            i++;\n       \
    \     break;\n        case '|':\n            beat += 2;\n            i++;\n  \
    \          break;\n        case '.':\n            beat += 1;\n            i++;\n\
    \            break;\n        default:\n            assert(false);\n          \
    \  break;\n        }\n    }\n    beats.push_back(beat);\n    return beats;", " \
    \   // Write your code here\n    std::vector< long >  music_vector;\n    for (std::size_t\
    \ i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == '.'\
    \ || music_string[i] == 'o' || music_string[i] == 'o|' || music_string[i] == '|')\
    \ { \n            music_vector.push_back(0); \n        } else if (music_string[i]\
    \ == 'b') {\n            music_vector.push_back(1); \n        } else if (music_string[i]\
    \ == '#') {\n            music_vector.push_back(2); \n        } else if (music_string[i]\
    \ == '%') {\n            music_vector.push_back(3); \n        } else if (music_string[i]\
    \ == '&') {\n            music_vector.push_back(4); \n        } else if (music_string[i]\
    \ == '@') {\n            music_vector.push_back(5); \n        } else if (music_string[i]\
    \ == '#') { \n            music_vector.push_back(6); \n        } else if (music_string[i]\
    \ == '=') {\n            music_vector.push_back(7); \n        } else if (music_string[i]\
    \ == '^') {\n            music_vector.push_back(8); \n        } else if (music_string[i]\
    \ == '~') {\n            music_vector.push_back(9); \n        } else if (music_string[i]\
    \ == '<') {\n            music_vector.push_back(10); \n        } else if (music_string[i]\
    \ == '>') {\n            music_vector.push_back(11); \n        } else if (music_string[i]\
    \ == '?') {\n            music_vector.push_back(12); \n        } else if (music_string[i]\
    \ == '$') {\n            music_vector.push_back(13); \n        } else if (music_string[i]\
    \ == '%') {\n            music_vector.push_back(14); \n        } else if (music_string[i]\
    \ == '&') {\n            music_vector.push_back(15); \n        } else if (music_string[i]\
    \ == '#') {\n            music_vector.push_back(16); \n        } else if (music_string[i]\
    \ == '=') {\n            music_vector.push_back(17); \n        } else if (music_string[i]\
    \ == '^') {\n            music_vector.push_back(18); \n        } else if (music_string[i]\
    \ == '~') {\n            music_vector.push_back(19); \n        } else if (music_string[i]\
    \ == '<') {\n            music_vector.push_back(20); \n        } else if (music_string[i]\
    \ == '>') {\n            music_vector.push_back(21); \n        } else if (music_string[i]\
    \ == '?') {\n            music_vector.push_back(22); \n        } else if (music_string[i]\
    \ == '$') {\n            music_vector.push_back(23); \n        } else if (music_string[i]\
    \ == '%') {\n            music_vector.push_back(24); \n        } else if (music_string[i]\
    \ == '&') {\n            music_vector.push_back(25); \n        } else if (music_string[i]\
    \ == '#') {\n            music_vector.push_back(26); \n        } else if (music_string",
  "  std::vector<long> beats;\n  auto music = music_string.begin();\n  auto music_end\
    \ = music_string.end();\n  long last_beat = 0;\n  long last_note = 0;\n  while\
    \ (music != music_end) {\n    if (music == '|' || music == 'o') {\n      beats.push_back(last_beat);\n\
    \      last_beat = 0;\n      last_note = music == 'o' ? 4 : 2;\n    } else if\
    \ (music == ':' || music == '.') {\n      last_beat++;\n    }\n    music++;\n\
    \  }\n  beats.push_back(last_beat);\n  return beats;", "    std::vector<long>\
    \ music;\n    std::string s;\n    size_t i = 0;\n    while (i < music_string.size())\
    \ {\n        s += music_string[i];\n        if (s == '|')\n            s += 'o';\n\
    \        else if (s == '|.')\n            s += 'o';\n        else if (s == 'o.')\n\
    \            s += 'o';\n        else if (s == '|o.')\n            s += 'o';\n\
    \        else if (s == '|o.|')\n            s += 'o';\n        else if (s == '|o|.')\n\
    \            s += 'o';\n        else if (s == '|o|o')\n            s += 'o';\n\
    \        else if (s == '|o|o|')\n            s += 'o';\n        else if (s ==\
    \ '|o|o|.')\n            s += 'o';\n        else if (s == '|o|o|o')\n        \
    \    s += 'o';\n        else if (s == '|o|o|o|')\n            s += 'o';\n    \
    \    else if (s == '|o|o|o|.')\n            s += 'o';\n        else if (s == 'o|o|o|o')\n\
    \            s += 'o';\n        else if (s == 'o|o|o|o|')\n            s += 'o';\n\
    \        else if (s == 'o|o|o|o|.')\n            s += 'o';\n        else if (s\
    \ == 'o|o|o|o|o')\n            s += 'o';\n        else if (s == 'o|o|o|o|o|')\n\
    \            s += 'o';\n        else if (s == 'o|o|o|o|o|.')\n            s +=\
    \ 'o';\n        else if (s == 'o|o|o|o|o|o')\n            s += 'o';\n        else\
    \ if (s == 'o|o|o|o|o|o|')\n            s += 'o';\n        else if (s == 'o|o|o|o|o|o|.')\n\
    \            s += 'o';\n        else if (s == 'o|o|o|o|o|o|o')\n            s\
    \ += 'o';\n        else if (s == 'o|o|o|o|o|o|o|')\n            s += 'o';\n  \
    \      else if (s == 'o|o|o|o|o|o|o|')\n            s += 'o';\n        else if\
    \ (s == 'o|o|o|o|o|o|o|.')\n            s += 'o';\n        else if (s == 'o|o|o|o|o|o|o|o')\n\
    \            s += 'o';\n        else if (s == 'o|o|o|o|o|o|o|o')\n            ",
  "    std::vector<long> notes(music_string.size() / 2);\n    for (long i = 0; i <\
    \ music_string.size(); i += 2) {\n        if (music_string[i] == 'o' && music_string[i\
    \ + 1] == '|') {\n            notes[i / 2] += 4;\n        } else if (music_string[i]\
    \ == 'o' && music_string[i + 1] == '.') {\n            notes[i / 2] += 2;\n  \
    \      } else if (music_string[i] == '.' && music_string[i + 1] == '|') {\n  \
    \          notes[i / 2] += 1;\n        } else {\n            notes[i / 2]++;\n\
    \        }\n    }\n    return notes;", "    // your code goes here\n    std::vector<long>\
    \ music_beat_counts;\n    for(int i=0;i<music_string.length();i++) {\n       \
    \ if(music_string[i] == '.') {\n            music_beat_counts[i] = 2;\n      \
    \  } else if(music_string[i] == 'o') {\n            music_beat_counts[i] = 4;\n\
    \        } else if(music_string[i] == '|') {\n            music_beat_counts[i]\
    \ = 3;\n        } else {\n            music_beat_counts[i] = 1;\n        }\n \
    \   }\n    return music_beat_counts;", "    std::vector<std::string> splitted_notes;\n\
    \    char notes_sep[] = \"|\";\n    // Split string into notes\n    size_t pos\
    \ = 0;\n    size_t begin = 0;\n    size_t end;\n    while ((pos = music_string.find(notes_sep,\
    \ begin)) != std::string::npos) {\n        splitted_notes.push_back(music_string.substr(begin,\
    \ pos - begin));\n        begin = pos + 1;\n        end = music_string.find(notes_sep,\
    \ begin);\n    }\n    splitted_notes.push_back(music_string.substr(begin));\n\n\
    \    // parse notes separately\n    std::vector<long> beats_per_pitch;\n    beats_per_pitch.reserve(splitted_notes.size());\n\
    \    for (auto note : splitted_notes) {\n        beats_per_pitch.push_back(4);\n\
    \        if (note == \".o\") {\n            beats_per_pitch.push_back(2);\n  \
    \      } else if (note == \".|\") {\n            beats_per_pitch.push_back(1);\n\
    \        } else if (note == \".\") {\n            beats_per_pitch.push_back(1);\n\
    \        } else if (note == \"|.o\") {\n            beats_per_pitch.push_back(2);\n\
    \        } else if (note == \"|.|\") {\n            beats_per_pitch.push_back(1);\n\
    \        } else if (note == \"|.\") {\n            beats_per_pitch.push_back(1);\n\
    \        } else if (note == \"o.\") {\n            beats_per_pitch.push_back(4);\n\
    \        } else if (note == \".o|\") {\n            beats_per_pitch.push_back(2);\n\
    \        } else if (note == \".o\") {\n            beats_per_pitch.push_back(4);\n\
    \        } else if (note == \"|.o|\") {\n            beats_per_pitch.push_back(2);\n\
    \        } else if (note == \"|.o\") {\n            beats_per_pitch.push_back(4);\n\
    \        } else if (note == \"o.|\") {\n            beats_per_pitch.push_back(2);\n\
    \        } else if (note == \"o.\") {\n            beats_per_pitch.push_back(4);\n\
    \        } else {\n            std::cerr << \"Invalid note, aborting.\" << std::endl;\n\
    \            exit(1);\n        }\n    }\n    return beats_per_pitch;", "    assert(music_string.size()\
    \ % 4 == 0);\n    std::vector<long> music;\n    std::string note;\n    long note_length\
    \ = music_string.size() / 4;\n    long current_beat = 0;\n    long current_note\
    \ = 0;\n    long current_duration = 0;\n    long duration = 0;\n    \n    // Iterate\
    \ over each character and check if it is a note and if it is a quarter note or\
    \ note\n    // that lasts one beat\n    for(char c : music_string) {\n       \
    \ if(c != 'o') {\n            continue;\n        }\n        if(current_note ==\
    \ 0) {\n            note = c; // Note is the first character of note\n       \
    \     current_note = 1;\n            current_beat = 0;\n        }\n        else\
    \ if(current_note == 1) {\n            note = note + '|';\n            current_note\
    \ = 2;\n            current_beat = 0;\n        }\n        else if(current_note\
    \ == 2) {\n            note = note + '.|';\n            current_note = 3;\n  \
    \          current_beat = 0;\n        }\n        else {\n            // When current_note\
    \ has value of three, it is considered as quarter note or note that lasts\n  \
    \          // one beat.\n            if(current_note == 3) {\n               \
    \ duration = current_duration;\n                duration += current_beat;\n  \
    \              duration += note_length;\n                music.push_back(duration);\n\
    \                current_duration += note_length;\n                current_note\
    \ = 0;\n                current_beat = 0;\n            }\n            else {\n\
    \                duration = current_duration;\n                duration += current_beat;\n\
    \                music.push_back(duration);\n                current_duration\
    \ += note_length;\n                current_note = 0;\n                current_beat\
    \ = 0;\n            }\n        }\n    }\n    return music;", "    std::vector<long>\
    \ beats;\n    long current_beat = 1;\n    long current_note = 0;\n    for (int\
    \ i = 0; i < music_string.size(); i++) {\n        char note = music_string[i];\n\
    \        // handle note\n        if (note == 'o') {\n            beats.push_back(current_beat);\n\
    \            current_note = 0;\n            current_beat = 1;\n        } else\
    \ {\n            // handle note with length\n            if (note[0] != '|') {\n\
    \                assert(current_note == 0);\n                current_note = note;\n\
    \            } else {\n                assert(current_note == 1);\n          \
    \      current_note = note[1];\n            }\n            current_beat++;\n \
    \       }\n    }\n    // add last note\n    if (current_note != 0) {\n       \
    \ beats.push_back(current_beat);\n    }\n    return beats;", "    std::vector<long>\
    \ beats;\n\n    // You will be using these three arrays to keep track of last\
    \ four notes and to know how many beats\n    // it lasts for.\n    int last_four[4];\n\
    \    long beats_for_note[4];\n\n    for(int i = 0; i < 4; i++) {\n        // We\
    \ will loop over the string 4 times to get each of the notes.\n        // The\
    \ first time we encounter a note we push it to the arrays and mark beats as 0.\n\
    \        // The second time we encounter the same note we check if the beats array\
    \ already has beats\n        // for that note and if it doesn't we update beats\
    \ for that note by adding one.\n        // The third time we encounter the same\
    \ note we check if beats_for_note already has values\n        // for that note\
    \ and if it doesn't we update beats_for_note by adding one.\n        // The fourth\
    \ time we encounter a note we check if beats_for_note already has values\n   \
    \     // for that note and if it doesn't we update beats_for_note by adding one.\n\
    \        // The fifth time we encounter a note we check if beats_for_note already\
    \ has values\n        // for that note and if it doesn't we update beats_for_note\
    \ by adding one.\n        // The sixth time we encounter a note we check if beats_for_note\
    \ already has values\n        // for that note and if it doesn't we update beats_for_note\
    \ by adding one.\n        // The seventh time we encounter a note we check if\
    \ beats_for_note already has values\n        // for that note and if it doesn't\
    \ we update beats_for_note by adding one.\n        // The eighth time we encounter\
    \ a note we check if beats_for_note already has values\n        // for that note\
    \ and if it doesn't we update beats_for_note by adding one.\n\n        // First\
    \ we check if we have the same note in the array and if so we update our beats_for_note\n\
    \        // array.\n        for(int j = 0; j < 4; j++) {\n            if(last_four[j]\
    \ == last_four[i]) {\n                beats_for_note[j] += 1;\n            }\n\
    \        }\n\n        // Now we check if beats_for_note already has that note\
    \ and if so we update it.\n        for(int j = 0; j < 4; j++) {\n            if(!beats_for_note[j])\
    \ {\n                beats_for_note[j] += 1;\n            }\n        }\n\n   \
    \     // Now we check if beats_for_note already has that note and if so we update\
    \ it.\n        for(int j = 0; j < 4; j++) {\n            if(!beats_for_note[j])\
    \ {\n                beats_for_note[j] += 1;\n            }\n        }\n\n   \
    \     // Now we check if beats_for_note already has that note and if so we update\
    \ it.\n        for(int j = 0; j < 4; j++) {\n            if(!beats_for_note[j])\
    \ {\n                beats_for_note[j] += 1;\n            }\n        }\n\n   \
    \     // ", "    std::vector<long> ret;\n    int note_length = 0;\n    int current_length\
    \ = 0;\n    int cur_offset = 0;\n    int prev_offset = 0;\n    char cur;\n\n \
    \   for (const auto c : music_string) {\n        switch (c) {\n            case\
    \ 'o':\n                ret.push_back(4 * current_length + note_length);\n   \
    \             note_length = 0;\n                current_length = 0;\n        \
    \        cur_offset = -1;\n                break;\n            case 'o|':\n  \
    \              ret.push_back(2 * current_length + note_length);\n            \
    \    note_length = 0;\n                current_length = 0;\n                cur_offset\
    \ = -1;\n                break;\n            case '.|':\n                ret.push_back(current_length\
    \ + note_length);\n                note_length = 0;\n                current_length\
    \ = 0;\n                cur_offset = -1;\n                break;\n           \
    \ default:\n                if (c != '.') {\n                    note_length +=\
    \ 1;\n                }\n                current_length += 1;\n        }\n   \
    \     prev_offset = cur_offset;\n        cur_offset = (int)&c - &*music_string.begin();\n\
    \    }\n\n    if (note_length > 0) {\n        ret.push_back(current_length + note_length);\n\
    \    }\n    return ret;", "    std::vector<long> beats(3);\n    long temp = 0;\n\
    \    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i]\
    \ == 'o') {\n            beats[2] = temp;\n            temp = 0;\n        }\n\
    \        if (music_string[i] == 'o|') {\n            beats[1] = temp;\n      \
    \      temp = 0;\n        }\n        if (music_string[i] == '.|') {\n        \
    \    beats[0] = temp;\n            temp = 0;\n        }\n        if (music_string[i]\
    \ == '|') {\n            temp++;\n        }\n    }\n    if (temp != 0) {\n   \
    \     beats[0] = temp;\n    }\n    return beats;", "    // Your code goes here\n\
    \    std::vector<long> music_vector;\n    std::string split_notes;\n    std::size_t\
    \ position = 0;\n    std::size_t previous_position = 0;\n    std::size_t next_position\
    \ = 0;\n    long note_count = 0;\n    bool is_quarter = false;\n    long temp\
    \ = 0;\n    std::string current_note;\n    \n    while (position < music_string.length())\
    \ {\n        current_note = music_string.substr(position, 1);\n        split_notes\
    \ = music_string.substr(previous_position, position);\n        position += split_notes.length();\n\
    \        previous_position = position;\n        position += current_note.length();\n\
    \        previous_position = position;\n        position += 1;\n        \n   \
    \     if (current_note == \"o\" || current_note == \"o|\" || current_note == \"\
    .|\") {\n            if (current_note == \"o\") {\n                is_quarter\
    \ = true;\n            }\n            else if (current_note == \"o|\") {\n   \
    \             is_quarter = true;\n            }\n            else if (current_note\
    \ == \".|\") {\n                is_quarter = true;\n            }\n          \
    \  \n            note_count = 0;\n        }\n        else {\n            note_count++;\n\
    \        }\n        \n        if (is_quarter) {\n            temp += 4;\n    \
    \    }\n        else {\n            temp += 2;\n        }\n        \n        music_vector.push_back(temp);\n\
    \    }\n    return music_vector;", "    std::vector<long> vec;\n    std::string\
    \ notes_string = \"\";\n    long note_length = 4;\n    // Here we start by parsing\
    \ the input string and building the notes string\n    for (char i : music_string)\
    \ {\n        if (i == '.') {\n            notes_string += \".\";\n        } else\
    \ if (i == 'o') {\n            notes_string += \"o|\";\n        } else if (i ==\
    \ '|') {\n            notes_string += \"o|\";\n        } else if (i == 'o|') {\n\
    \            notes_string += \"o|\";\n        } else if (i == '|.') {\n      \
    \      notes_string += \"o|\";\n        } else if (i == 'o|.') {\n           \
    \ notes_string += \"o|\";\n        } else if (i == '|o') {\n            notes_string\
    \ += \"o|\";\n        } else if (i == '|.o') {\n            notes_string += \"\
    o|\";\n        } else if (i == '.|') {\n            notes_string += \"o|\";\n\
    \        } else {\n            notes_string += i;\n        }\n    }\n    // Now\
    \ that we have the notes string, we go through each character and create note\
    \ durations\n    long notes_length = 0;\n    while (notes_string[notes_length]\
    \ != '\\0') {\n        char note = notes_string[notes_length];\n        if (note\
    \ == '.') {\n            note_length = note_length * 2;\n        } else if (note\
    \ == 'o') {\n            note_length = note_length;\n        }\n        notes_length++;\n\
    \    }\n    // Here we go through the notes string and put each note in the vector\n\
    \    for (long i = 0; i < notes_length; i++) {\n        char note = notes_string[i];\n\
    \        if (note == '.') {\n            vec.push_back(i * note_length);\n   \
    \         vec.push_back(i * note_length + note_length);\n        } else if (note\
    \ == 'o') {\n            vec.push_back(i * note_length + 1);\n            vec.push_back(i\
    \ * note_length + 2);\n        } else if (note == '|') {\n            vec.push_back(i\
    \ * note_length + 1);\n            vec.push_back(i * note_length + 2);\n     \
    \   } else if (note == 'o|') {\n            vec.push_back(i * note_length + 2);\n\
    \            vec.push_back(i * note_length + 3);\n        } else if (note == '|.')\
    \ {\n            vec.push_back(i * note_length + 3);\n            vec.push_back(i\
    \ * note_length + 4);\n        } else if (note == 'o|.') {\n            vec.push_back(i\
    \ * note_length + 4);\n            vec.push_back(i * note_length + 5);\n     \
    \   } else if (note == '|o') {\n            vec.push_back(i * note_length + 5);\n\
    \            vec.push_back(i * note_length + 6);\n        } else if (note == '|.o')\
    \ {\n            ", "    std::vector<long> beats(0, 0);\n    int pos = 0;\n  \
    \  bool note = false;\n    while (pos < music_string.size()) {\n        switch\
    \ (music_string[pos]) {\n            case 'o':\n            case '|':\n      \
    \      case 'x':\n                note = true;\n                break;\n     \
    \       case '.':\n                if (note)\n                    pos += 1;\n\
    \                else\n                    pos += 2;\n                note = false;\n\
    \                break;\n            case '#':\n            case '@':\n      \
    \      case 'b':\n            case 'B':\n                if (pos > 0)\n      \
    \              pos += 1;\n                else\n                    pos += 1;\n\
    \                break;\n            default:\n                if (note) {\n \
    \                   long beat_length = pos - pos%4; // integer division\n    \
    \                beats.push_back(beat_length);\n                    note = false;\n\
    \                }\n                pos += 1;\n                break;\n      \
    \  }\n    }\n    return beats;", "    std::vector<long> beats(1, 0); // number\
    \ of beats for each note\n    std::string note;\n    std::size_t pos = 0;\n  \
    \  while (pos < music_string.size()) {\n        if (pos + 1 < music_string.size()\
    \ && music_string[pos] == '|' && music_string[pos + 1] == '|') {\n           \
    \ note = \".|\";\n            pos = pos + 2;\n        } else if (pos + 1 < music_string.size()\
    \ && music_string[pos] == '|') {\n            note = \"o|\";\n            pos\
    \ = pos + 1;\n        } else if (music_string[pos] == 'o') {\n            note\
    \ = \"o\";\n            pos = pos + 1;\n        } else {\n            pos = pos\
    \ + 1;\n        }\n        long beats_number = 1;\n        while (pos < music_string.size()\
    \ && music_string[pos] != '|') {\n            beats_number *= 10;\n          \
    \  beats_number += music_string[pos] - '0';\n            pos = pos + 1;\n    \
    \    }\n        beats.push_back(beats_number);\n    }\n    return beats;", " \
    \   std::vector<long> music(music_string.size());\n    std::string temp;\n   \
    \ int beats = 0;\n    char c;\n    for (int i = 0; i < music_string.size(); ++i)\
    \ {\n        c = music_string[i];\n        if (c == 'o') {\n            if (temp\
    \ == \"o\")\n                beats += 4;\n            else\n                beats\
    \ += 2;\n        }\n        else if (c == '|') {\n            if (temp == \"o\"\
    )\n                beats += 2;\n            else\n                beats += 1;\n\
    \        }\n        else if (c == '.') {\n            if (temp == \"o\")\n   \
    \             beats += 1;\n            else\n                beats += 0;\n   \
    \     }\n        else if (c == 'x') {\n            temp = c;\n        }\n    }\n\
    \    for (int i = 0; i < music_string.size(); ++i) {\n        c = music_string[i];\n\
    \        if (c == 'o') {\n            music[i] = beats;\n            beats = 0;\n\
    \        }\n        else if (c == '|') {\n            music[i] = beats;\n    \
    \        beats = 0;\n        }\n        else if (c == '.') {\n            music[i]\
    \ = beats;\n            beats = 0;\n        }\n        else if (c == 'x') {\n\
    \            music[i] = 0;\n        }\n    }\n    return music;", "    std::vector<long>\
    \ beats;\n    // Iterate over all notes\n    std::string note;\n    for (std::size_t\
    \ i = 0; i < music_string.size(); ++i) {\n        // If current note ends \n \
    \       if (music_string[i] == '|') \n            // We set last note \n     \
    \       note = music_string[++i];\n        // If current note starts\n       \
    \ else if (music_string[i] == 'o') {\n            // We update last note\n   \
    \         if (note.length()) {\n                beats.push_back(std::stoi(note));\n\
    \            }\n            // If note is empty, there is no current note\n  \
    \          // and we set new one\n            else {\n                note = music_string[++i];\n\
    \            }\n        }\n        // If current note is not empty\n        else\
    \ {\n            // We add current note to beats\n            beats.push_back(std::stoi(note));\n\
    \            // And set new one\n            note = music_string[++i];\n     \
    \   }\n    }\n    // If current note is not empty\n    if (note.length()) {\n\
    \        beats.push_back(std::stoi(note));\n    }\n    return beats;", "    //\
    \ Write your code here\n    std::vector<long> beats(4); // vector to hold beats\
    \ of whole notes\n    std::string temp(music_string); // create temporary copy\
    \ of input string\n    long last_beat = 0; // last beat in whole note\n    std::string\
    \ current_note = \"\"; // current note to parse\n    long current_note_length\
    \ = 0; // current note length\n    long current_beat_count = 0; // current beat\
    \ count (counting down)\n\n    size_t pos = 0;\n    while (pos < temp.size())\
    \ {\n        char c = temp[pos]; // current character\n        std::string next_note\
    \ = \"\"; // empty string for next note\n        long beat_length = 0; // length\
    \ of next note\n\n        if (c == 'o') {\n            current_note = \"whole\"\
    ;\n            current_note_length = current_beat_count;\n            current_beat_count\
    \ = -1;\n            beats[current_beat_count] = current_note_length;\n      \
    \  } else if (c == 'o|') {\n            if (current_note_length >= 4) {\n    \
    \            current_note = \"half\";\n                current_note_length = current_beat_count;\n\
    \                current_beat_count = -1;\n                beats[current_beat_count]\
    \ = current_note_length;\n            } else {\n                current_note =\
    \ \"whole\";\n                current_note_length = current_beat_count;\n    \
    \            current_beat_count = -1;\n                beats[current_beat_count]\
    \ = current_note_length;\n            }\n        } else if (c == '.|') {\n   \
    \         current_note = \"quarter\";\n            current_note_length = current_beat_count;\n\
    \            current_beat_count = -1;\n            beats[current_beat_count] =\
    \ current_note_length;\n        } else if (c == '.') {\n            current_note\
    \ = \"whole\";\n            current_note_length = current_beat_count;\n      \
    \      current_beat_count = -1;\n            beats[current_beat_count] = current_note_length;\n\
    \        } else {\n            if (current_beat_count >= 0) {\n              \
    \  beat_length = beats[current_beat_count];\n            } else {\n          \
    \      beat_length = 1;\n            }\n            if (c == '|') {\n        \
    \        next_note = temp;\n                next_note[pos] = '\\0';\n        \
    \        pos = 0;\n                while (next_note[pos] != '|') {\n         \
    \           pos++;\n                }\n                next_note = next_note.substr(0,\
    \ pos + 1);\n            } else {\n                next_note = temp;\n       \
    \         next_note[pos] = '\\0';\n                pos = 0;\n                while\
    \ (next_note[pos] != c) {\n                    pos++;\n                }\n   \
    \             next_note = next_note.substr(0, pos + 1);\n            }\n     \
    \       int beat_count = 0;\n            int note_length = beat_length + 1;\n\
    \            std::string current_note_name;\n            while (next_note[pos]\
    \ == ' ') {\n                pos++;\n            }\n            ", "  std::vector<long>\
    \ beats;\n  // If music string is empty, return empty list\n  if (music_string.empty())\n\
    \    return beats;\n\n  // If music string is 1 character, return empty list\n\
    \  if (music_string.size() == 1)\n    return beats;\n\n  // Initialize counters\
    \ for different musical sections\n  int whole_note_count = 0;\n  int half_note_count\
    \ = 0;\n  int quater_note_count = 0;\n  // Initialize beats counters\n  int total_beats\
    \ = 0;\n  int current_beat = 0;\n\n  // Go through string and count beats in each\
    \ section\n  for (auto c : music_string)\n  {\n    // If note ends, increment\
    \ counter and reset current beat\n    if (c == 'o' || c == 'o|' || c == '.|')\n\
    \    {\n      beats[current_beat]++;\n      total_beats++;\n      current_beat\
    \ = 0;\n    }\n    else\n    {\n      // If note begins, increment counter by\
    \ 1\n      current_beat++;\n    }\n  }\n\n  // If last note is still opened, increment\
    \ counter\n  if (current_beat != 0)\n    beats[current_beat]++;\n\n  // If music\
    \ string is longer than 4 characters, ignore everything except last four\n  if\
    \ (music_string.size() > 4)\n  {\n    beats.resize(total_beats);\n    beats[0]\
    \ = 0;\n  }\n\n  return beats;", "    std::vector<long> beats_number;\n    std::vector<int>\
    \ beats_count(4, 0);\n    for (auto c : music_string) {\n        if (c == 'o')\
    \ {\n            beats_number.push_back(4);\n            beats_count[0] += 1;\n\
    \        }\n        else if (c == 'o|') {\n            beats_number.push_back(2);\n\
    \            beats_count[1] += 1;\n        }\n        else if (c == '.|') {\n\
    \            beats_number.push_back(1);\n            beats_count[2] += 1;\n  \
    \      }\n    }\n    return beats_number;", "    // Write your code here\n   \
    \ std::vector <int> temp;\n    std::vector <long> beats_count;\n\n    for (char\
    \ c : music_string) {\n        if (c == 'o') {\n            temp.push_back(4);\n\
    \        } else if (c == 'o|') {\n            temp.push_back(2);\n        } else\
    \ if (c == '.|') {\n            temp.push_back(1);\n        } else {\n       \
    \     temp.push_back(4);\n        }\n    }\n    beats_count = temp;\n    return\
    \ beats_count;", "    auto begin = music_string.begin();\n    auto end = music_string.end();\n\
    \    auto it1 = begin;\n    auto it2 = end;\n    std::vector<long> beats;\n  \
    \  long notes_number = 0, beats_number = 0;\n    for (; it1 != it2; ++it1, ++it2)\
    \ {\n        if (*it1 == '|') {\n            notes_number += 2;\n            ++it1;\n\
    \        } else if (*it1 == 'o') {\n            notes_number++;\n            ++it1;\n\
    \        } else {\n            while (it1 != end && *it1 == ' ') ++it1;\n    \
    \        while (it1 != end && *it1 != '|') ++it1;\n        }\n        beats_number\
    \ += 4 - (notes_number % 4);\n        beats.push_back(beats_number);\n       \
    \ notes_number = 0;\n        beats_number = 0;\n    }\n    if (it1 != end) {\n\
    \        auto end_it = it1;\n        while (end_it != end && *end_it == ' ') ++end_it;\n\
    \        while (end_it != end && *end_it != '|') ++end_it;\n        beats_number\
    \ += 4 - (notes_number % 4);\n        beats.push_back(beats_number);\n    }\n\
    \    return beats;", "    std::vector<long> beats_per_note;\n    std::stringstream\
    \ ss(music_string);\n    char ch;\n    while (std::getline(ss, ch, ',')) {\n \
    \       beats_per_note.push_back(static_cast<long>(std::stoi(ch)));\n    }\n \
    \   return beats_per_note;", "    std::vector<long> beats;\n    // Iterate over\
    \ all notes\n    for (char note : music_string) {\n        // Check whether note\
    \ is a whole note\n        if (note == 'o' || note == 'o|' || note == '.|') {\n\
    \            long new_beats = 4;\n            // Check whether last note is whole\
    \ note\n            if (note.back() == 'o' || note.back() == 'o|' || note.back()\
    \ == '.|') {\n                new_beats = 1;\n            }\n            beats.push_back(new_beats\
    \ * 4);\n        }\n    }\n    return beats;", "    std::vector<long> music_vector;\n\
    \    long times_beat = 0;\n    long last_beat = 0;\n    long current_beat = 0;\n\
    \    long current_length = 0;\n\n    while (music_string.size() > 0) {\n     \
    \   if (music_string[0] == '.') {\n            times_beat++;\n            last_beat\
    \ = current_beat;\n            current_beat = 0;\n            current_length++;\n\
    \        } else {\n            char c = music_string[0];\n            std::string\
    \ rest = music_string.substr(1);\n            bool last_note = last_beat != 0;\n\
    \            bool last_length = current_length != 0;\n            if (c == 'o')\
    \ {\n                long length = times_beat - current_length;\n            \
    \    if (last_note)\n                    length = length / 2;\n              \
    \  else\n                    length += times_beat;\n                if (last_length)\n\
    \                    length--;\n                times_beat = length;\n       \
    \     } else if (c == 'o|') {\n                long length = times_beat - current_length;\n\
    \                if (last_note)\n                    length = length / 2;\n  \
    \              else\n                    length += times_beat;\n             \
    \   if (last_length)\n                    length--;\n                times_beat\
    \ = length;\n            } else {\n                times_beat++;\n           \
    \     current_beat += 1;\n            }\n        }\n        music_vector.push_back(times_beat);\n\
    \        music_string = rest;\n    }\n\n    return music_vector;", "    std::vector<long>\
    \ beats(4);\n    char ch;\n    for (auto i : music_string) {\n        if (i ==\
    \ 'o') {\n            beats[0]++;\n        } else if (i == '.') {\n          \
    \  beats[1]++;\n        } else if (i == 'o|') {\n            beats[2]++;\n   \
    \     } else if (i == '|') {\n            beats[3]++;\n        }\n    }\n    return\
    \ beats;", "    std::stack<long> st;\n    long beats = 4;\n    std::string note_char\
    \ = \".\";\n    for(auto &c: music_string) {\n        char c = c;\n        switch(c)\
    \ {\n            case 'o':\n                st.push(beats);\n                break;\n\
    \            case '|':\n                st.push(beats);\n                beats\
    \ *= 2;\n                break;\n            case '/':\n                st.push(beats);\n\
    \                beats /= 2;\n                break;\n            case '.':\n\
    \                note_char = \".\";\n                break;\n            case\
    \ '#':\n                note_char = \"#\";\n                break;\n         \
    \   case 'b':\n                note_char = \"b\";\n                break;\n  \
    \          default:\n                break;\n        }\n    }\n    std::vector<long>\
    \ beats_per_song;\n    while(!st.empty()) {\n        beats_per_song.push_back(st.top());\n\
    \        st.pop();\n    }\n    return beats_per_song;", "    int beats = 0, beats_last\
    \ = 0, current_beat = 0;\n    std::vector<long> result;\n    \n    // Iterate\
    \ over all symbols present in the string.\n    // We are looking for numbers between\
    \ '0' and '9', so we use isdigit() function\n    // to get all symbols between\
    \ '0' and '9'.\n    for (const auto& c : music_string) {\n        if (isdigit(c))\
    \ {\n            // If there are more than one digits in a row, increase number\
    \ of beats\n            if (beats > 1) {\n                beats_last += beats;\n\
    \                result.push_back(current_beat * beats_last);\n              \
    \  beats_last = 0;\n                beats = 0;\n            }\n            \n\
    \            int digit = c - '0';\n            beats_last += digit;\n        }\
    \ else {\n            // A symbol that is not a digit just means current beat\
    \ just ended\n            beats_last = 0;\n            beats++;\n        }\n \
    \       current_beat++;\n    }\n    \n    // Check if the last beat is ended\n\
    \    if (beats > 1) {\n        result.push_back(current_beat * beats_last);\n\
    \    }\n    return result;", "    // write your code here\n    std::vector<long>\
    \ beats(music_string.length());\n    int total_beat = 0;\n    std::string curr(music_string);\n\
    \    std::string next_next_next_char;\n    long current_beat = 1;\n    while (!curr.empty())\
    \ {\n        if (curr[0] == 'o' && current_beat < 4 || curr[0] == 'o|' && current_beat\
    \ < 2) {\n            beats[total_beat] += current_beat;\n            current_beat\
    \ += 1;\n        }\n        else if (curr[0] == '.' && current_beat == 1) {\n\
    \            beats[total_beat] += current_beat;\n            current_beat = 1;\n\
    \        }\n        else if (curr[0] == '.') {\n            current_beat = 1;\n\
    \        }\n        else {\n            std::cout << \"invalid string\" << std::endl;\n\
    \        }\n        std::string next_next_next_char_prev = next_next_next_char;\n\
    \        next_next_next_char = curr[1];\n        curr = next_next_next_char;\n\
    \        if (next_next_next_char_prev != \".\" && next_next_next_char_prev !=\
    \ \"\") {\n            next_next_next_char = curr[1];\n        }\n        else\
    \ {\n            break;\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ beats;\n    // Your code goes here\n    return beats;", "    int last = 0;\n\
    \    std::vector<long> beats_counters;\n    int beats_count = 1;\n    for (int\
    \ i = 0; i < music_string.size(); i++) {\n        if (music_string[i] == '|')\
    \ {\n            last = beats_count;\n            beats_count = 1;\n        }\
    \ else if (music_string[i] == 'o') {\n            beats_count *= 4;\n        }\
    \ else if (music_string[i] == 'o|') {\n            beats_count *= 2;\n       \
    \ } else if (music_string[i] == '.') {\n            beats_count += 1;\n      \
    \  }\n        beats_counters.push_back(beats_count);\n    }\n    return beats_counters;",
  "    std::vector<long> beats;\n    // Your code here\n    beats.push_back(0);\n\
    \    beats.push_back(0);\n    // Your code here\n    beats.push_back(0);\n   \
    \ beats.push_back(0);\n    // Your code here\n    beats.push_back(0);\n    return\
    \ beats;", "    auto it = music_string.begin();\n    std::vector<long> beats;\n\
    \    long beat = -1;\n    long note = 0;\n    while (it != music_string.end())\
    \ {\n        if (*it == 'o') {\n            while (++it != music_string.end()\
    \ && *it == '|') {\n                note += 2;\n            }\n        } else\
    \ if (*it == 'o|') {\n            while (++it != music_string.end() && *it ==\
    \ '.') {\n                note += 1;\n            }\n        } else {\n      \
    \      while (++it != music_string.end() && *it == '|') {\n                note\
    \ += 2;\n            }\n        }\n        if (++beat != note) {\n           \
    \ beats.push_back(beat);\n            beat = note;\n        }\n    }\n    if (beat\
    \ != -1) {\n        beats.push_back(beat);\n    }\n    return beats;", "    //\
    \ TODO: Implement this function\n    return std::vector<long>{};", "    std::vector<long>\
    \ beats;\n\n    // Iterate over every char in the string\n    for(char c : music_string)\
    \ {\n        // If char is a 'o', add 4 to 'beats' vector\n        if(c == 'o')\
    \ {\n            beats.push_back(beats.size() - 4);\n        // Else if char is\
    \ a 'o|', add 2 to 'beats' vector\n        } else if(c =='o|') {\n           \
    \ beats.push_back(beats.size() - 2);\n        // Else if char is a '.|', add 1\
    \ to 'beats' vector\n        } else if(c =='.|') {\n            beats.push_back(beats.size()\
    \ - 1);\n        // Else, discard char (it is not o, nor o|, nor .| and thus will\
    \ NOT be part of beats)\n        } else {\n            beats.push_back(beats.size());\n\
    \        }\n    }\n    return beats;", "    // your code here\n    std::vector<long>\
    \ beats;\n    for (char ch:music_string){\n        if (ch=='o'){\n           \
    \ beats.push_back(4);\n        }\n        else if (ch=='o|'){\n            beats.push_back(2);\n\
    \        }\n        else if (ch=='.|'){\n            beats.push_back(1);\n   \
    \     }\n        else{\n            beats.push_back(0);\n        }\n    }\n  \
    \  return beats;", "    std::vector<long> beats;\n    std::string note_symbol\
    \ = \"\";\n    // Traverse whole note, quarter note, half note and whole note\
    \ symbols in given string\n    for(char c : music_string) {\n        // We need\
    \ not traverse symbols if it is a note symbol\n        if(!isdigit(c)) {\n   \
    \         note_symbol += c;\n            continue;\n        }\n        note_symbol\
    \ = \"\"; // clear note_symbol if it is a note symbol\n        beats.push_back(std::stoi(note_symbol));\n\
    \        note_symbol = \"\";\n    }\n    return beats;", "    std::stack<long>\
    \ beats;\n    for(char c : music_string) {\n        if(c == 'o' || c == '|' ||\
    \ c == '.') {\n            beats.push(beats.size());\n        } else {\n     \
    \       break;\n        }\n    }\n    std::vector<long> music_vector;\n    while(!beats.empty())\
    \ {\n        music_vector.push_back(beats.top());\n        beats.pop();\n    }\n\
    \    return music_vector;", "    long n_beats = 0;\n    std::vector<long> note_counts{0,\
    \ 0, 0, 0, 0, 0};\n    std::vector<std::string> notes = {\n        \"o\",\n  \
    \      \"o|\",\n        \".|\",\n        \"o|.\",\n        \"o|.o\",\n       \
    \ \"o|.o|\",\n        \"o|.o|.\",\n        \"o|.o|..\",\n        \"o|.o|..o\"\
    ,\n        \"o|.o|..o|\",\n        \"o|.o|..o|.\",\n        \"o|.o|..o|..\",\n\
    \        \"o|.o|..o|..o\"\n    };\n    // This code was provided by our instructor\n\
    \    std::stack<std::string> stack;\n    for (char ch : music_string) {\n    \
    \    if (ch == '|') {\n            note_counts[notes.at(stack.top())] += 1;\n\
    \        }\n        if (ch == '.') {\n            note_counts[notes.at(stack.top())]\
    \ += 4;\n        }\n        stack.push(ch);\n    }\n    while (!stack.empty())\
    \ {\n        note_counts[notes.at(stack.top())] += 1;\n        stack.pop();\n\
    \    }\n    return note_counts;", "    std::vector<long> music_to_beats(0, 0);\n\
    \    std::stringstream ss;\n    ss.str(music_string);\n    for (char ch; ss >>\
    \ ch; ) {\n        if (ch == '.') {\n            ss >> ch;\n            if (ch\
    \ != '.' && ch != '|') {\n                std::cerr << \"wrong input in '\" <<\
    \ music_string << \"'\" << std::endl;\n                return music_to_beats;\n\
    \            }\n        } else if (ch == 'o') {\n            music_to_beats.push_back(4);\
    \ // whole note, last 4 beats\n        } else if (ch == '|') {\n            music_to_beats.push_back(2);\
    \ // half note, last 2 beats\n        } else if (ch == 'o|') {\n            music_to_beats.push_back(1);\
    \ // quater note, last 1 beat\n        } else {\n            std::cerr << \"wrong\
    \ input in '\" << music_string << \"'\" << std::endl;\n            return music_to_beats;\n\
    \        }\n        ss >> ch;\n    }\n    return music_to_beats;", "    // Your\
    \ code here\n    // std::vector<int> beat_counts(music_string.length()+1, 0);\n\
    \    // for(int i = 0; i < music_string.length(); ++i) {\n    //     if(music_string[i]\
    \ == '.') {\n    //         beat_counts[i+1]++;\n    //     }\n    // }\n    //\
    \ return beat_counts;\n    std::vector<long> beat_counts(music_string.length()+1,\
    \ 0);\n    for(int i = 0; i < music_string.length(); ++i) {\n        if(music_string[i]\
    \ == 'o') {\n            beat_counts[i+1] += 4;\n        }\n        if(music_string[i]\
    \ == 'o|') {\n            beat_counts[i+1] += 2;\n        }\n    }\n    return\
    \ beat_counts;", "    std::vector<long> notes(music_string.size());\n    long\
    \ current_beat = 0;\n    for (size_t i = 0; i < music_string.size(); i++) {\n\
    \        char c = music_string[i];\n        if (c == 'o') {\n            notes[i]\
    \ = (current_beat + 4) % 12;\n            current_beat += 4;\n        } else if\
    \ (c == '|') {\n            notes[i] = (current_beat + 2) % 12;\n            current_beat\
    \ += 2;\n        } else if (c == '.') {\n            notes[i] = (current_beat\
    \ + 1) % 12;\n            current_beat++;\n        } else {\n            notes[i]\
    \ = -1;\n        }\n    }\n    return notes;", "  std::vector<long> notes;\n \
    \ int length = music_string.length();\n  for (int i = 0; i < length; ++i) {\n\
    \    if (music_string[i] == 'o') {\n      notes.push_back(0);\n    } else if (music_string[i]\
    \ == 'o|') {\n      notes.push_back(4);\n    } else if (music_string[i] == '.|')\
    \ {\n      notes.push_back(1);\n    } else {\n      printf(\"Invalid music string!\\\
    n\");\n      exit(1);\n    }\n  }\n  return notes;", "    std::vector<std::string>\
    \ notes;\n    std::string note = \"\";\n    for (char c : music_string) {\n  \
    \      if (c != 'o' && c != '|' && c != '.')\n            note += c;\n       \
    \ else if (note != \"\") {\n            notes.push_back(note);\n            note\
    \ = \"\";\n        }\n    }\n    std::vector<long> beats;\n    for (std::string\
    \ note : notes)\n        beats.push_back(notes.count(note) / 4);\n    return beats;",
  "    std::vector<long> notes;\n    // parse note duration\n    int duration = 0;\n\
    \    for (int i = 0; music_string[i] != '\\0'; i++) {\n        duration += music_string[i]\
    \ < 'a' ? notes[music_string[i] - 'a'] * 12 : notes[music_string[i] - 'a'] * 5\
    \ + 12 * notes[music_string[i] - 'a'];\n    }\n    // parse note\n    for (int\
    \ i = 0; music_string[i] != '\\0'; i++) {\n        if (music_string[i] == '.')\
    \ {\n            notes.push_back(duration);\n            duration = 0;\n     \
    \   } else {\n            notes.push_back((notes[music_string[i] - 'a'] + duration)\
    \ / 12);\n            duration %= 12;\n        }\n    }\n    return notes;", " \
    \   std::vector<long> beats;\n    std::string token;\n    long beat = 0;\n   \
    \ while ((token = std::getline(music_string, ' '))) {\n        beat++;\n     \
    \   if (token == \"o\") {\n            beats.push_back(beat);\n        } else\
    \ if (token == \"o|\") {\n            beats.push_back(beat * 2);\n        } else\
    \ if (token == \".|\") {\n            beats.push_back(beat * 4);\n        } else\
    \ {\n            throw \"No such note for melody \" + std::to_string(beat);\n\
    \        }\n    }\n    return beats;", "    // Write your code here\n    std::vector<long>\
    \ beats;\n    for (int i = 0; i < music_string.size(); i++) {\n        char c\
    \ = music_string[i];\n        if (c == 'o' || c == 'O') {\n            beats.push_back(4);\n\
    \        } else if (c == '|' || c == 'O') {\n            beats.push_back(2);\n\
    \        } else if (c == '.' || c == 'O') {\n            beats.push_back(1);\n\
    \        } else {\n            assert(false);\n        }\n    }\n    return beats;",
  "    // Implement here\n    // Example of music_string: ''\n    //             \
    \              ''\n    //                           '..'\n    //             \
    \              '..'\n    //                           '..'\n    //           \
    \                '..'\n    //                           '..'\n    //         \
    \                  '..'\n    //                           '..'\n    //       \
    \                    '..'\n    //                           '..'\n    //     \
    \                      '..'\n    //                           '..'\n    //   \
    \                        '..'\n    //                           '..'\n    // \
    \                          '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n    //\
    \                           '..'\n    //                           '..'\n", " \
    \   long number_of_notes = 0;\n    std::vector<long> notes;\n    // TODO: Add\
    \ error checking for malformed input\n    char *next_token = strtok(music_string.c_str(),\
    \ \" \");\n    while (next_token != nullptr) {\n        notes.push_back(std::strtol(next_token,\
    \ nullptr, 16));\n        number_of_notes++;\n        next_token = strtok(nullptr,\
    \ \" \");\n    }\n    return notes;", "    std::vector<long> notes;\n    int curr_beat\
    \ = 0;\n    std::string next_note = \"\";\n    notes.push_back(curr_beat);\n \
    \   long note_beat_time = 1;\n    for (int i = 0; i < music_string.length(); i++)\
    \ {\n        if (music_string[i] == 'o') {\n            note_beat_time *= 4;\n\
    \            notes.push_back(curr_beat + note_beat_time);\n            curr_beat\
    \ += note_beat_time;\n        } else if (music_string[i] == 'o|') {\n        \
    \    note_beat_time *= 2;\n            notes.push_back(curr_beat + note_beat_time);\n\
    \            curr_beat += note_beat_time;\n        } else if (music_string[i]\
    \ == '.|') {\n            note_beat_time = 1;\n            notes.push_back(curr_beat\
    \ + note_beat_time);\n            curr_beat += note_beat_time;\n        }\n  \
    \      if (music_string[i] == ',') {\n            next_note = music_string.substr(i\
    \ + 1);\n        }\n    }\n    return notes;", "    // Your code here\n    std::vector<long>\
    \ music(music_string.length() / 3, 0);\n    for (size_t i = 0; i < music_string.length();\
    \ i += 3) {\n        music[i/3]++;\n        music[(i+1)/3] += 1;\n        music[(i+2)/3]\
    \ += 1;\n    }\n    music[0] += music_string.length() % 3;\n    return music;",
  "    // Your code here\n    std::vector<long> beats;\n    int note = 0;\n    for\
    \ (char c : music_string) {\n        // Use bitwise operators to extract only\
    \ first letter\n        // Example: o| means note = 12 and beats = 4\n       \
    \ // Notes on how to extract only first letter from string\n        // https://stackoverflow.com/questions/499154/c-string-extraction-using-c-string\n\
    \        if (c == 'o' || c == 'o|' || c == '.|') {\n            note = 12 * note\
    \ + c - '0';\n        } else {\n            note = 12 * note + c - 'o' + 1;\n\
    \        }\n        beats.push_back(note);\n    }\n    return beats;", "    //\
    \ Your code here\n    assert(music_string.size() > 0 && music_string[0] == 'o'\
    \ && music_string[1] == '|' && music_string[2] == '.');\n    std::vector<long>\
    \ beats_vector;\n    beats_vector.reserve(12); // 12 is the length of the note\
    \ 'c'\n\n    std::string current_beat = \"\";\n\n    for (auto i = music_string.cbegin();\
    \ i < music_string.cend(); i++) {\n        char c = *i;\n        if (c == 'o')\
    \ {\n            current_beat = current_beat + \"4\";\n        } else if (c ==\
    \ '|') {\n            current_beat = current_beat + \"2\";\n        } else if\
    \ (c == '.') {\n            current_beat = current_beat + \"1\";\n        } else\
    \ {\n            if (current_beat.size() > 0) {\n                long beat = std::stoul(current_beat);\n\
    \                beats_vector.push_back(beat);\n                beats_vector.push_back(beat);\n\
    \                beats_vector.push_back(beat);\n                beats_vector.push_back(beat);\n\
    \                beats_vector.push_back(beat);\n                beats_vector.push_back(beat);\n\
    \                current_beat = \"\";\n            }\n        }\n    }\n    return\
    \ beats_vector;", "    std::vector<long> beats;\n    // Beats counter\n    long\
    \ total_beats = 0, current_beat = 0;\n    // Parse the string\n    for(auto c\
    \ : music_string) {\n        // 'o|', i.e. first half note with one beat only\n\
    \        if(c == 'o|') {\n            // The note\n            long note = current_beat;\n\
    \            // Add beat to the counter\n            beats.push_back(current_beat);\n\
    \            // Add note to the list\n            beats.push_back(note);\n   \
    \         // Reset the beat counter\n            current_beat = 0;\n        }\
    \ else if(c == '.|') {\n            // The note\n            long note = current_beat;\n\
    \            // Add beat to the counter\n            beats.push_back(current_beat);\n\
    \            // Add note to the list\n            beats.push_back(note);\n   \
    \         // Reset the beat counter\n            current_beat = 0;\n        }\
    \ else {\n            // The note (beat by beat)\n            current_beat +=\
    \ 1;\n        }\n    }\n    // Return the list of beats\n    return beats;", " \
    \   long num_notes = 0, last_note = 0;\n    std::vector<long> beats;\n\n    for\
    \ (char c : music_string) {\n        // Checking for an 'o' symbol\n        if\
    \ (c == 'o') {\n            // Checking if it's last\n            if (last_note\
    \ > 0)\n                beats.push_back(num_notes++);\n            last_note =\
    \ 0;\n            std::cout << \"The note's name is \" << music_string << \",\
    \ and it's lasting \" << beats.back() << \" beats.\" << std::endl;\n         \
    \   continue;\n        }\n        // Checking for an 'o|' symbol\n        else\
    \ if (c == 'o|') {\n            if (last_note == 0)\n                last_note\
    \ = -1;\n            std::cout << \"The note's name is \" << music_string << \"\
    , and it's half lasting \" << beats.back() << \" beats.\" << std::endl;\n    \
    \        continue;\n        }\n        // Checking for '.|' symbol\n        else\
    \ if (c == '.|') {\n            if (last_note == 0)\n                last_note\
    \ = 1;\n            std::cout << \"The note's name is \" << music_string << \"\
    , and it's quarter lasting \" << beats.back() << \" beats.\" << std::endl;\n \
    \           continue;\n        }\n    }\n    return beats;", '    // your code
    goes here', "    std::vector<long> beats;\n    int cur_beat = 0;\n    long last_beat\
    \ = 0;\n    int cur_note = 0;\n    long last_note = 0;\n    int beats_cnt = 0;\n\
    \    char last;\n    // for each note in music string\n    for (char c : music_string)\
    \ {\n        switch (c) {\n            case 'o':\n                cur_beat = last_beat;\n\
    \                last_beat = 0;\n                cur_note = last_note;\n     \
    \           last_note = 0;\n                beats_cnt++;\n                break;\n\
    \            case 'o|':\n                cur_beat = last_beat;\n             \
    \   last_beat = 0;\n                cur_note = last_note + 1;\n              \
    \  last_note = 0;\n                beats_cnt++;\n                break;\n    \
    \        case '.|':\n                cur_beat = last_beat;\n                last_beat\
    \ = 0;\n                cur_note = last_note + 2;\n                last_note =\
    \ 0;\n                beats_cnt++;\n                break;\n        }\n    }\n\
    \    // fill in the last beat count\n    beats.push_back(cur_beat);\n    beats.push_back(cur_beat\
    \ + beats_cnt - 1);\n    return beats;", "    // Write your code here\n    \n\
    \    std::vector<long> result;\n    \n    std::string last_note;\n    long last_beat\
    \ = 0;\n    \n    for (char c : music_string) {\n        switch (c) {\n      \
    \  case 'o':\n        case '|':\n        case '.':\n            last_beat = last_beat+1;\n\
    \            last_note = c;\n            break;\n        default:\n          \
    \  if (last_note == c) {\n                last_beat = last_beat+1;\n         \
    \   } else {\n                result.push_back(last_beat);\n                last_beat\
    \ = 1;\n                last_note = c;\n            }\n            break;\n  \
    \      }\n    }\n    \n    // if last note is not the one we are looking for we\
    \ push it to the result vector and reset it.\n    if (last_note != music_string[music_string.length()-1])\
    \ {\n        result.push_back(last_beat);\n    }\n    \n    return result;", " \
    \   std::vector<long> beats;\n    for (char c : music_string) {\n        if (c\
    \ == 'o') {\n            beats.push_back(4L);\n        } else if (c == 'o|') {\n\
    \            beats.push_back(2L);\n        } else if (c == '.|') {\n         \
    \   beats.push_back(1L);\n        } else {\n            // This note is not one\
    \ of known musical notes. So just add its length to our vector.\n            beats.push_back(1L);\n\
    \        }\n    }\n    return beats;", "    // TODO:\n    // You should fill the\
    \ code here", "    // I assume there is no empty note in your string\n    auto\
    \ music = music_string.begin();\n    std::vector<std::string> notes = split_string(music_string,\
    \ \"|\");\n    std::vector<long> notes_vector;\n    for (auto note: notes) {\n\
    \        if (note == \"o\") {\n            long temp = 0;\n            while (true)\
    \ {\n                if (*music == '.') temp++;\n                if (*music ==\
    \ '|') temp++;\n                if (*music == 'o') temp++;\n                if\
    \ (*music == '|') temp++;\n                if (*music == '|') temp++;\n      \
    \          if (*music == '.') temp++;\n                if (*music == '.') temp++;\n\
    \                if (*music == 'o') temp++;\n                if (*music == '|')\
    \ temp++;\n                if (*music == '|') temp++;\n                music++;\n\
    \                if (*music != '|') break;\n            }\n            notes_vector.push_back(temp);\n\
    \        } else {\n            long temp = 0;\n            while (true) {\n  \
    \              if (*music == '.') temp++;\n                if (*music == 'o')\
    \ temp++;\n                if (*music == '|') temp++;\n                if (*music\
    \ == '|') temp++;\n                if (*music == '|') temp++;\n              \
    \  if (*music == '|') temp++;\n                if (*music == '|') temp++;\n  \
    \              if (*music == '.') temp++;\n                if (*music == '.')\
    \ temp++;\n                if (*music == 'o') temp++;\n                if (*music\
    \ == '|') temp++;\n                if (*music == '|') temp++;\n              \
    \  music++;\n                if (*music != '|') break;\n            }\n      \
    \      notes_vector.push_back(temp);\n        }\n    }\n    return notes_vector;",
  "    // Your code goes here\n    std::vector<long> notes;\n    std::string note;\n\
    \    long temp;\n    long count = 0;\n    int i = 0;\n    while(i < music_string.length())\
    \ {\n        note = music_string.substr(i, 1);\n        temp = note;\n       \
    \ while(temp != '|') {\n            temp /= 2;\n        }\n        notes.push_back(temp);\n\
    \        i += 1;\n    }\n    return notes;", "    // Your code here\n    std::vector<long>\
    \ beats(music_string.length()/4,0);\n    long current_beat = 0;\n    for(auto\
    \ c: music_string) {\n        if(c == 'o')\n            beats[current_beat++]\
    \ = 4;\n        else if(c == 'o|')\n            beats[current_beat++] = 2;\n \
    \       else if(c == '.|')\n            beats[current_beat++] = 1;\n    }\n  \
    \  return beats;", "  assert(music_string.size() >= 2);\n  std::vector<long> beats_count(music_string.size()\
    \ - 1, 0ll);\n  for (size_t i = music_string.size() - 2; i >= 0; i--) {\n    char\
    \ c = music_string[i];\n    if (c == 'o') {\n      beats_count[i] = 4;\n    }\
    \ else if (c == 'o|') {\n      beats_count[i] = 2;\n    } else if (c == '.|')\
    \ {\n      beats_count[i] = 1;\n    } else {\n      beats_count[i] = 0;\n    }\n\
    \  }\n  return beats_count;", "    int beat_lengths[6] = { 4, 2, 1 };\n    long\
    \ lengths[6] = { 0, 0, 0, 0, 0 };\n    long beat_durations[6] = { 4, 2, 1 };\n\
    \    // Initialize our beat counts to zero.\n    long beat_counts[6] = { 0, 0,\
    \ 0, 0, 0 };\n    // Our current beat count\n    int current_beat_count = 0;\n\
    \    // Our current beat length\n    int current_beat_length = 0;\n    // Our\
    \ current duration counter\n    int current_duration_counter = 0;\n    // Our\
    \ current length\n    long current_length = 0;\n    bool first = true;\n    for\
    \ (auto c: music_string) {\n        if (c >= 'o' && c <= 'z') {\n            if\
    \ (current_beat_length > 0 && current_beat_count == 0) {\n                lengths[current_beat_length]\
    \ += current_length;\n            }\n            if (current_beat_length == 0)\
    \ {\n                lengths[current_beat_length] = 1;\n                current_beat_length++;\n\
    \            } else {\n                lengths[current_beat_length]++;\n     \
    \       }\n            current_beat_count++;\n            if (current_beat_count\
    \ == beat_counts[current_beat_length]) {\n                beat_counts[current_beat_length]\
    \ = 0;\n                current_beat_length++;\n            }\n            current_length\
    \ = 0;\n        } else if (c == '|') {\n            assert(current_beat_length\
    \ > 0 && current_beat_count == 0);\n            beat_counts[current_beat_length]++;\n\
    \            if (beat_counts[current_beat_length] == beat_lengths[current_beat_length])\
    \ {\n                current_beat_length++;\n            }\n            current_beat_count\
    \ = 0;\n        } else if (c == ' ' || c == ',' || c == '.') {\n            current_beat_duration++;\n\
    \        }\n    }\n    if (current_beat_length > 0 && current_beat_count == 0)\
    \ {\n        lengths[current_beat_length] += current_length;\n    }\n    if (current_beat_length\
    \ == 0) {\n        lengths[current_beat_length] = 1;\n        current_beat_length++;\n\
    \    } else {\n        lengths[current_beat_length]++;\n    }\n    long number_of_beats\
    \ = lengths[0];\n    for (int i = 1; i < 6; i++) {\n        number_of_beats *=\
    \ lengths[i];\n    }\n    std::vector<long> output_vec;\n    std::vector<long>\
    \ interval_vec;\n    for (int i = 0; i < 6; i++) {\n        if (beat_counts[i]\
    \ != 0) {\n            output_vec.push_back(number_of_beats / beat_counts[i]);\n\
    \            interval_vec.push_back(beat_lengths[i] / beat_counts[i]);\n     \
    \   } else {\n            output_vec.push_back(number_of_beats);\n           \
    \ interval_vec.push_back(beat_lengths[i]);\n        }\n    }\n    return output_vec;",
  "    std::vector<long> result(music_string.size() / 4);\n    for (int i = 0; i <\
    \ music_string.size(); i += 4) {\n        result[i/4] += 1;\n    }\n    return\
    \ result;", "    std::vector<long> beats;\n    std::vector<long> notes;\n    std::string\
    \ note_letter;\n    for (auto c : music_string) {\n        note_letter = c;\n\
    \        if (c == 'o')\n            notes.push_back(4);\n        else if (c ==\
    \ 'o|')\n            notes.push_back(2, 1);\n        else if (c == '.|')\n   \
    \         notes.push_back(1, 1);\n        else\n            throw std::runtime_error(\"\
    Unknown note letter\");\n    }\n    for (int i = 0; i != notes.size(); ++i) {\n\
    \        beats.push_back(notes[i] / 4);\n        beats.push_back(notes[i] / 2);\n\
    \        beats.push_back(notes[i]);\n    }\n    return beats;", "    std::vector<long>\
    \ beats(4);\n    // Parse music string and convert it to vector of strings in\
    \ special ASCII format. Return result as vector of longs.", "    std::vector<long>\
    \ beats;\n    // Iterate over all characters in the string.\n    for (char note\
    \ : music_string) {\n        long beat = 1;\n        char prev = note;\n     \
    \   if (note == 'o') {\n            // If the next character is o, whole note\
    \ lasts four beats.\n            beat = 4;\n        } else if (note == 'o|') {\n\
    \            // If the next character is o, half note lasts two beats.\n     \
    \       beat = 2;\n        } else if (note == '.|') {\n            // If the next\
    \ character is o, quater note lasts one beat.\n            beat = 1;\n       \
    \ } else if (note == '.') {\n            // If the next character is ., dotted\
    \ note lasts one beat.\n            beat = 1;\n        } else {\n            //\
    \ If the next character is not o, whole note lasts four beats.\n            beat\
    \ = 4;\n        }\n        // Iterate over the string again to check if there\
    \ is a next character.\n        for (char next : music_string) {\n           \
    \ long next_beat = 1;\n            if (next == prev) {\n                // If\
    \ the current character is the same as previous, continue iteration.\n       \
    \         beat = beat + next_beat;\n                beats.push_back(beat);\n \
    \               beat = 1;\n            } else if (next == 'o') {\n           \
    \     // If the current character is o, whole note lasts four beats.\n       \
    \         beat = beat + 4;\n            } else if (next == 'o|') {\n         \
    \       // If the current character is o, half note lasts two beats.\n       \
    \         beat = beat + 2;\n            } else if (next == '.|') {\n         \
    \       // If the current character is o, quater note lasts one beat.\n      \
    \          beat = beat + 1;\n            } else if (next == '.') {\n         \
    \       // If the current character is ., dotted note lasts one beat.\n      \
    \          beat = beat + 1;\n            } else {\n                // If the current\
    \ character is not o, whole note lasts four beats.\n                beat = beat\
    \ + 4;\n            }\n            prev = next;\n        }\n    }\n    return\
    \ beats;", "    std::vector<long> beats;\n    // your code here", "    assert(music_string\
    \ != \"\");\n    // Make map for storing notes encountered so far\n    std::map<char,\
    \ long> note_map;\n    std::string temp;\n    long note_counter = 0;\n    std::size_t\
    \ pos = 0;\n    while(pos < music_string.size()) {\n        if(music_string[pos]\
    \ != 'o') {\n            temp = music_string.substr(pos, 1);\n            if(temp.empty())\
    \ break;\n            note_map[temp] += 1;\n            note_counter += 1;\n \
    \       }\n        ++pos;\n    }\n    std::vector<long> beats{long{note_counter}};\n\
    \    // Iterate over the string again\n    pos = 0;\n    while(pos < music_string.size())\
    \ {\n        if(music_string[pos] == 'o') {\n            temp = music_string.substr(pos,\
    \ 4);\n            if(temp.empty()) break;\n            note = temp.front();\n\
    \            note_map[note] -= 1; // Note has previously been encountered\n  \
    \          beats[beats.size() - 1] += 1;\n            note_counter += 1;\n   \
    \     }\n        ++pos;\n    }\n    return beats;", "    std::vector<std::string>\
    \ splitted_string = split(music_string, '|');\n    std::vector<long> beats = std::vector<long>(4);\n\
    \    for (int i = 0; i < 4; i++) {\n        if (splitted_string[i] == \"o\") {\n\
    \            beats.at(i) = 4;\n        } else if (splitted_string[i] == \"o|\"\
    ) {\n            beats.at(i) = 2;\n        } else if (splitted_string[i] == \"\
    .|\") {\n            beats.at(i) = 1;\n        } else {\n            assert(0);\n\
    \        }\n    }\n    return beats;", "    std::vector<long> music_notes;\n \
    \   long note = 0;\n    long times = 0;\n    for (auto c : music_string) {\n \
    \       switch (c) {\n            case '|':\n                note = note << 2;\n\
    \                note += 1;\n                times += 1;\n                break;\n\
    \            case 'o':\n                note = note << 1;\n                note\
    \ += 1;\n                times += 1;\n                break;\n            case\
    \ '.':\n                note = note << 1;\n                note += 1;\n      \
    \          times += 1;\n                break;\n            case 'o|':\n     \
    \           note = note << 1;\n                note += 1;\n                times\
    \ += 2;\n                break;\n            default:\n                std::cout\
    \ << \"Error: Invalid music string!\\n\";\n                break;\n        }\n\
    \    }\n    music_notes.push_back(note);\n    music_notes.push_back(times);\n\
    \    return music_notes;", "    // Your code here\n    std::vector<long> result;\n\
    \    long num_beats = 0;\n    long num_notes = 0;\n    for (char c : music_string)\
    \ {\n        if (c == 'o') {\n            num_beats++;\n        }\n        if\
    \ (c == '.') {\n            num_beats++;\n        }\n        if (c == '|') {\n\
    \            num_beats++;\n        }\n        if (c == 'o|') {\n            num_beats++;\n\
    \            num_notes++;\n        }\n        if (c == '.|') {\n            num_beats++;\n\
    \            num_notes++;\n        }\n    }\n    // Handle special cases here\n\
    \    if (num_beats == 0)\n        num_beats = 4;\n    if (num_notes == 0)\n  \
    \      num_notes = 2;\n    if (num_beats == 4) {\n        result.push_back(num_notes);\n\
    \    } else {\n        result.push_back(num_beats);\n        result.push_back(num_notes);\n\
    \    }\n    return result;", "    std::vector<long> output;\n    int note_count\
    \ = 0;\n\n    for (int i = 0; i < music_string.length(); ++i) {\n        if (music_string[i]\
    \ == 'o') {\n            note_count += 4;\n        } else if (music_string[i]\
    \ == 'o|') {\n            note_count += 2;\n        } else if (music_string[i]\
    \ == '.|') {\n            note_count += 1;\n        } else {\n            throw\
    \ std::runtime_error(\"Bad character in input string.\");\n        }\n    }\n\n\
    \    std::vector<long> note_vec;\n    note_vec.reserve(note_count);\n\n    for\
    \ (int i = 0; i < music_string.length(); ++i) {\n        if (music_string[i] ==\
    \ 'o') {\n            note_vec.push_back(1);\n        } else if (music_string[i]\
    \ == 'o|') {\n            note_vec.push_back(2);\n        } else if (music_string[i]\
    \ == '.|') {\n            note_vec.push_back(4);\n        } else {\n         \
    \   throw std::runtime_error(\"Bad character in input string.\");\n        }\n\
    \    }\n\n    output.clear();\n    for (int i = 0; i < note_vec.size(); ++i) {\n\
    \        output.push_back(note_count);\n        note_count -= note_vec[i];\n \
    \   }\n    return output;", "    // Your code here\n    return std::vector<long>();",
  "    int n = music_string.size();\n    std::vector<long> result;\n    for (int i\
    \ = 0; i < n; i++) {\n        char c = music_string[i];\n        long note = 0;\n\
    \        switch (c) {\n            case 'o':\n                note = 4;\n    \
    \            break;\n            case 'o|':\n                note = 2;\n     \
    \           break;\n            case '.|':\n                note = 1;\n      \
    \          break;\n            default:\n                throw std::invalid_argument(\"\
    Bad music format\");\n        }\n        result.push_back(note);\n    }\n    return\
    \ result;", "    // TODO: use std::istringstream to read the input from string\
    \ into music_string object\n    // Then split music_string into an array by |\
    \ symbol\n    // Then, for each element, read the number of beats for each note\n\
    \    std::vector<long> music_notes;\n    std::string music_note;\n    // TODO:\
    \ use std::getline to read a line from input into music_note\n    long beat_number\
    \ = 0;\n    // TODO: use stringstream to read each character in music_note into\
    \ music_note\n    // TODO: use std::stoi to convert music_note into an int and\
    \ store the result in beat_number\n    // TODO: use push_back to append beat_number\
    \ to music_notes\n    return music_notes;", "    // Write your code here\n   \
    \ auto music = music_string.substr(0, music_string.length() - 3);\n    std::vector<long>\
    \ beats;\n    auto beat_chars = music[music.size() - 1];\n\n    auto beat_number\
    \ = beat_chars == 'o' ? 4 : 2;\n    auto beat_count = beat_chars == 'o' ? 2 :\
    \ 1;\n\n    auto last_beat_number = music_string.size() - 1;\n    auto last_beat_count\
    \ = music_string[last_beat_number];\n\n    while (beat_number != last_beat_number)\
    \ {\n        beats.emplace_back(beat_count);\n        beat_count += beat_chars\
    \ == 'o' ? 4 : 2;\n        last_beat_count += last_beat_chars == 'o' ? 4 : 2;\n\
    \        beat_number = last_beat_number;\n        last_beat_number = music_string.size()\
    \ - 1;\n        last_beat_count = music_string[last_beat_number];\n    }\n\n \
    \   return beats;", "  std::vector<long> beats;\n  // parse all notes (in pairs\
    \ '.|o|.|' -> (0,0), (0,1), (1,0), (1,1)) then\n  // convert them into list of\
    \ beats\n  int i = 0;\n  while (i < music_string.size()) {\n    char c = music_string[i];\n\
    \    if (c == '|') {\n      if (i + 2 < music_string.size()) {\n        char c_next\
    \ = music_string[i + 1];\n        if (c == 'o') {\n          beats.push_back(i\
    \ + 2);\n        } else if (c_next == 'o') {\n          beats.push_back(i + 1);\n\
    \        } else if (c_next == '|') {\n          beats.push_back(i);\n        }\n\
    \      }\n      i += 1;\n    } else if (c == 'o') {\n      if (i + 1 < music_string.size())\
    \ {\n        char c_next = music_string[i + 1];\n        if (c == '|') {\n   \
    \       beats.push_back(i + 1);\n        } else if (c_next == 'o') {\n       \
    \   beats.push_back(i + 2);\n        }\n      }\n      i += 1;\n    } else {\n\
    \      beats.push_back(i);\n    }\n  }\n  return beats;", "  std::vector<long>\
    \ beats;\n  long note = -1;\n  for (char i : music_string) {\n    if (i == 'o')\
    \ {\n      note = 1;\n      beats.push_back(0);\n    } else if (i == 'o|') {\n\
    \      note = 2;\n      beats.push_back(0);\n    } else if (i == '.|') {\n   \
    \   note = 3;\n      beats.push_back(0);\n    } else if (i == '|') {\n      beats.push_back(note);\n\
    \      note = -1;\n    } else if (i != ' ' && i != '.' && i != ',' && i != ':')\
    \ {\n      long beat_number = beats.size();\n      beats.push_back(beat_number);\n\
    \    }\n  }\n  return beats;", "    assert(music_string.size() % 4 == 0);\n\n\
    \    std::vector<long> beats;\n    beats.reserve(music_string.size() / 4);\n\n\
    \    for (size_t i = 0; i < music_string.size() / 4; i++) {\n        char c =\
    \ music_string[(i * 4) + 0];\n        long n = 1;\n        if (c == 'o' || c ==\
    \ '|' || c == '.') {\n            n = 4 - (int) c;\n        }\n        beats.push_back(n);\n\
    \    }\n    return beats;", "    std::vector<long> beats(8);\n    for (int i =\
    \ 0; i != music_string.size(); i += 2) {\n        long current_beat = i + 1;\n\
    \        if (music_string[i] == '.') {\n            beats[current_beat / 2] =\
    \ beats[current_beat / 2] + 1;\n        }\n        else {\n            if (music_string[i]\
    \ == '|') {\n                beats[current_beat / 2] = beats[current_beat / 2]\
    \ + 2;\n            }\n            else if (music_string[i] == 'o') {\n      \
    \          beats[current_beat / 4] = beats[current_beat / 4] + 4;\n          \
    \  }\n        }\n    }\n    return beats;", "    std::vector<long> beats(4);\n\
    \    long total = 0;\n    int beat_pos = 0;\n\n    for (auto& symbol : music_string)\
    \ {\n        switch (symbol) {\n            case 'o':\n                beat_pos\
    \ = 0;\n                total += 4;\n                break;\n            case\
    \ 'o|':\n                beat_pos = 2;\n                total += 2;\n        \
    \        break;\n            case '.|':\n                beat_pos = 1;\n     \
    \           total += 1;\n                break;\n            default:\n      \
    \          assert(0);\n        }\n        beats[beat_pos] += 1;\n    }\n\n   \
    \ return beats;", '    // Your implementation here', "  std::vector<long> result(4);\n\
    \  std::stringstream ss;\n  ss << music_string;\n  ss >> std::ws;\n  while (ss.peek()\
    \ != '|') {\n    char c = ss.peek();\n    if (c == 'o' || c == '.') {\n      ss.ignore();\n\
    \    } else if (c == 'o|') {\n      ss.ignore();\n      long half = std::stoi(ss.str());\n\
    \      long whole = half / 4;\n      long last_beat = whole - 1;\n      long rest_of_string\
    \ = half % 4;\n      result[0] = result[0] + 1;\n      result[1] = result[1] +\
    \ last_beat;\n      result[2] = result[2] + rest_of_string;\n      result[3] =\
    \ result[3] + 1;\n    } else {\n      throw std::runtime_error(\"music string\
    \ format error.\");\n    }\n  }\n  return result;", "    std::vector <long> vector;\n\
    \    // Split string into note and rest\n    std::string note, rest;\n    for\
    \ (auto &i : music_string) {\n        if (i == 'o') {\n            note = rest;\n\
    \            rest = \"\";\n        } else if (i == '|') {\n            if (rest.length()\
    \ > 0) {\n                vector.push_back(1);\n            }\n            rest\
    \ = note + rest;\n            note = \"\";\n        } else if (i == '.') {\n \
    \           if (rest.length() > 0) {\n                vector.push_back(1);\n \
    \           }\n            rest = note + rest;\n            note = \"\";\n   \
    \     } else {\n            note += i;\n        }\n    }\n    // Add rest\n  \
    \  if (rest.length() > 0) {\n        vector.push_back(1);\n        vector.push_back(0);\n\
    \    }\n    return vector;", "    int last_beat_of_note = 0;\n    std::vector<long>\
    \ beats(music_string.length());\n    for (int i = 0; i < music_string.length();\
    \ i++) {\n        std::string c = music_string.substr(i, 1);\n        if (c ==\
    \ \"o\") {\n            beats[i] = last_beat_of_note;\n        } else if (c ==\
    \ \"o|\") {\n            beats[i] = last_beat_of_note + 4;\n        } else if\
    \ (c == \".|\") {\n            beats[i] = last_beat_of_note + 1;\n           \
    \ last_beat_of_note = 0;\n        } else if (c.length() > 1 && c.front() == '.')\
    \ {\n            beats[i] = last_beat_of_note + 1;\n            last_beat_of_note\
    \ = last_beat_of_note + 1;\n        } else {\n            std::cerr << \"[!] Wrong\
    \ input: \" << music_string << std::endl;\n            exit(1);\n        }\n \
    \   }\n    return beats;", "    std::vector<std::string> notes = music_string.split('|');\n\
    \    std::vector<long> beats;\n    for (auto note: notes) {\n        if (note\
    \ == \"o\") beats.push_back(0);\n        else if (note == \"o|\") beats.push_back(4);\n\
    \        else if (note == \".|\") beats.push_back(2);\n        else throw std::invalid_argument(std::string(note)\
    \ + \" is not a valid note.\");\n    }\n    return beats;", "    std::stack<bool>\
    \ stack;\n    std::stack<long> beats;\n    std::stack<int> current_beats;\n  \
    \  long next_beat = 0;\n    long current_note = 1;\n    long current_beat = 0;\n\
    \    long previous_note = 0;\n\n    for (auto c : music_string) {\n        //\
    \ If this is a new note, push it onto the stack with the correct note and beat\n\
    \        if (c != '.') {\n            stack.push(false);\n            stack.push(1);\n\
    \            current_beat = 1;\n        }\n        // If this is a new note and\
    \ we haven't seen a note yet, push it onto the stack and give it the correct note\n\
    \        else if (stack.empty() || (stack.top() && stack.top() != previous_note))\
    \ {\n            stack.push(true);\n            stack.push(1);\n            current_beat\
    \ = 1;\n        }\n        // If this is a note and we are not on a beat, push\
    \ it onto the stack and set the beat\n        else if (stack.top() && c == '.')\
    \ {\n            stack.push(false);\n            current_beat = next_beat;\n \
    \           next_beat++;\n        }\n        // If this is note and we are on\
    \ a beat, set the note and beat and push the note to the stack\n        else {\n\
    \            stack.push(true);\n            stack.push(1);\n            current_beat\
    \ = 1;\n            current_note++;\n        }\n\n        previous_note = current_note;\n\
    \    }\n\n    // Push the last note onto the stack and set the beat\n    stack.push(false);\n\
    \    stack.push(1);\n\n    std::vector<long> beats_vector;\n    while (!stack.empty())\
    \ {\n        long current_note = stack.top();\n        beats_vector.push_back(current_beat);\n\
    \        if (current_note == 4) {\n            stack.top() = false;\n        \
    \    current_beat++;\n        }\n        else {\n            stack.top() = true;\n\
    \            current_beat = 1;\n        }\n        stack.pop();\n    }\n    return\
    \ beats_vector;", "    auto music_string_temp = music_string;\n    std::vector<long>\
    \ notes;\n    int current_beat = 0;\n    int current_note = 0;\n    int current_length\
    \ = 0;\n\n    bool note_start = false;\n    bool note_end = false;\n    bool note_length\
    \ = false;\n\n    auto it = music_string_temp.begin();\n\n    while (*it != '\\\
    0') {\n        if (*it == 'o') {\n            note_start = true;\n        }\n\n\
    \        if (*it == 'o|') {\n            note_start = true;\n            current_beat++;\n\
    \            note_end = true;\n        }\n\n        if (*it == '.') {\n      \
    \      current_note++;\n            note_end = true;\n        }\n\n        if\
    \ (*it == '|') {\n            current_note++;\n            current_beat++;\n \
    \       }\n\n        if (note_start) {\n            current_length++;\n      \
    \  }\n\n        if (note_end) {\n            note_length = true;\n        }\n\n\
    \        it++;\n    }\n\n    current_length /= 4;\n    current_beat *= 4;\n\n\
    \    // Fill vector with zeros (to fit in case we have some notes without beats\
    \ last)\n    for (long i = 0; i < current_beat; i++) {\n        notes.push_back(current_length);\n\
    \    }\n\n    return notes;", "    if (music_string == \"o\") return std::vector<long>(4,\
    \ 1);\n    if (music_string == \"o|\") return std::vector<long>(2, 1);\n    if\
    \ (music_string == \".|\") return std::vector<long>(1, 1);\n    std::cerr << \"\
    Invalid music string format!\" << std::endl;", "    std::vector<long> beats;\n\
    \    std::stringstream stream(music_string);\n    char c, lc, sc;\n    while (stream.peek()\
    \ == '|' || stream.peek() == 'o') {\n        stream >> c;\n        if (stream.peek()\
    \ == '|') {\n            stream >> lc;\n            stream >> sc;\n          \
    \  beats.push_back(4);\n            beats.push_back(2);\n            if (sc ==\
    \ '|')\n                beats.push_back(0);\n        }\n        else if (stream.peek()\
    \ == 'o') {\n            stream >> lc;\n            stream >> sc;\n          \
    \  beats.push_back(0);\n        }\n    }\n    return beats;", "    std::vector<long>\
    \ notes;\n    // Implement this function\n    return notes;", "    std::vector<std::string>\
    \ splitted_string = split(music_string, '|');\n    int note_length;\n    long\
    \ total_beats = 0;\n    for (auto const &note : splitted_string) {\n        if\
    \ (note == \"o\" || note == \"o|\") {\n            note_length = 4 / 2;\n    \
    \    } else if (note == \".\") {\n            note_length = 1 / 4;\n        }\
    \ else {\n            assert(0);\n        }\n        total_beats += note_length;\n\
    \    }\n    std::vector<long> notes(splitted_string.size(), 0);\n    int i = 0;\n\
    \    for (auto const &note : splitted_string) {\n        notes[i] = total_beats\
    \ * pow(note_length / 12, 3);\n        i++;\n    }\n    return notes;", "    std::vector<long>\
    \ result;\n    auto split_pos = music_string.find(\"|\");\n    long num_beats\
    \ = 4;\n    if (split_pos != std::string::npos) {\n        num_beats = 2;\n  \
    \  }\n    for (int i = 0; i < music_string.length(); i++) {\n        char c =\
    \ music_string[i];\n        if (c == 'o') {\n            result.push_back(i);\n\
    \            if (i < music_string.length() - num_beats) {\n                result.push_back(i\
    \ + num_beats);\n            }\n        } else if (c == 'o|') {\n            result.push_back(i);\n\
    \            if (i < music_string.length() - num_beats / 2) {\n              \
    \  result.push_back(i + num_beats / 2);\n            }\n        }\n    }\n   \
    \ return result;", "    // Your code goes here\n    std::vector<long> output;\n\
    \    long temp;\n    for (int i = 0; i < music_string.size(); i++) {\n       \
    \ temp = music_string[i] - 'o';\n        if (temp % 4 != 0) {\n            temp.push_back(0);\n\
    \        }\n        output.push_back(temp);\n    }\n    return output;", "   \
    \ int length_string = music_string.length();\n    std::vector<long> beats(length_string);\n\
    \    // iterate over every character in the string\n    for (int i = 0; i < length_string;\
    \ i++) {\n        // if we see a note, add number of beats to corresponding vector\
    \ element\n        // if we see a bar, we know that this note will be followed\
    \ by a bar\n        // if we see a slash, this note will be followed by a slash\n\
    \        // if we see '|', this note will be followed by a bar and slash\n   \
    \     if (music_string[i] == ',' || music_string[i] == '|' || music_string[i]\
    \ == '/')\n            beats[i] = beats[i-1];\n        else if (music_string[i]\
    \ == '|') {\n            beats[i] = beats[i-1] + 1;\n        } else if (music_string[i]\
    \ == ',' || music_string[i] == '|') {\n            beats[i] = 0;\n        } else\
    \ {\n            assert(music_string[i] == 'o');\n            beats[i] = 4;\n\
    \        }\n    }\n    return beats;", "  assert(music_string[0] == '.' || music_string[0]\
    \ == 'o' || music_string[0] == 'o|');\n  assert(music_string[1] == '.' || music_string[1]\
    \ == 'o' || music_string[1] == 'o|');\n  assert(music_string[2] == '.' || music_string[2]\
    \ == 'o' || music_string[2] == 'o|');\n  assert(music_string[3] == '.' || music_string[3]\
    \ == 'o' || music_string[3] == 'o|');\n  std::stack<std::string> s;\n  // Initialize\
    \ our stack\n  for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == '.') {\n      s.emplace_back(music_string[i]);\n    }\n    else if (music_string[i]\
    \ == 'o') {\n      s.emplace_back('o');\n    }\n    else if (music_string[i] ==\
    \ 'o|') {\n      s.emplace_back('o|');\n    }\n  }\n  // Convert stack into vector\
    \ of ints\n  std::string tmp;\n  s.emplace_back(\"\");\n  std::vector<long> beats(4);\n\
    \  while (!s.empty()) {\n    tmp = s.top();\n    if (tmp == \".\") {\n      s.pop();\n\
    \    }\n    else {\n      long tmp2 = std::stoi(tmp);\n      beats.at(tmp2 - 2);\
    \ // - 2 to correct for stacking 'o' and 'o|'\n      s.pop();\n    }\n  }\n  return\
    \ beats;", "    std::map<char, long> note_to_beat_map;\n    for (char c : music_string)\
    \ {\n        if (c == 'o' || c == 'o|' || c == '.|') {\n            note_to_beat_map[c]\
    \ = 4;\n        } else {\n            note_to_beat_map[c] = 1;\n        }\n  \
    \  }\n    std::vector<long> beat_count(music_string.size() / 2);\n    long beat_count_i\
    \ = 0;\n    for (char c : music_string) {\n        if (note_to_beat_map.find(c)\
    \ == note_to_beat_map.end()) {\n            beat_count[beat_count_i++] = 0;\n\
    \        } else {\n            beat_count[beat_count_i] += note_to_beat_map[c];\n\
    \        }\n    }\n    return beat_count;", "  std::vector<long> results;\n  std::size_t\
    \ pos = 0;\n  char current_note = 0;\n  while(pos < music_string.length()) {\n\
    \    current_note = music_string[pos];\n    if(current_note == 'o' || current_note\
    \ == 'O') {\n      current_note = music_string[pos+1];\n    }\n    pos += 2;\n\
    \    long current_beat_length = 0;\n    if(current_note == '.') {\n      current_note\
    \ = music_string[pos];\n      current_beat_length = 1;\n      pos += 1;\n    }\n\
    \    if(current_note == '|') {\n      current_note = music_string[pos];\n    \
    \  current_beat_length = 2;\n      pos += 1;\n    }\n    if(current_note == 'o|')\
    \ {\n      current_note = music_string[pos];\n      current_beat_length = 3;\n\
    \      pos += 1;\n    }\n    results.push_back(current_beat_length);\n  }\n  return\
    \ results;", "    int len = music_string.length();\n    assert(len > 0 && len\
    \ % 4 == 0);\n    std::vector<long> music_notes(len / 4);\n    for (int i = 0;\
    \ i < len; i += 4) {\n        music_notes.push_back(1);\n    }\n    std::vector<std::string>\
    \ tokens;\n    std::string s = music_string;\n    while (s.find('|') != std::string::npos)\
    \ {\n        std::string token = s.substr(0, s.find('|'));\n        tokens.push_back(token);\n\
    \        s = s.substr(s.find('|') + 1);\n    }\n    tokens.push_back(s);\n   \
    \ for (std::vector<std::string>::iterator it = tokens.begin(); it != tokens.end();\
    \ ++it) {\n        std::string token = *it;\n        long num = 0;\n        if\
    \ (token[0] == '.') {\n            num = 2;\n        } else if (token[0] == 'o')\
    \ {\n            num = 4;\n        } else {\n            num = -1;\n        }\n\
    \        music_notes.push_back(num);\n    }\n    return music_notes;", "    std::vector<long>\
    \ beats_per;\n    // Your code here\n    long current_beat = 0;\n    long max_beat\
    \ = 0;\n    long beat = 0;\n    int pos = 0;\n    while (pos < music_string.length())\
    \ {\n        // Look for end of note\n        pos = music_string.find(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            // Look for end of line\n\
    \            pos = music_string.find(\"\\n\", pos);\n            if (pos == std::string::npos)\
    \ {\n                // Look for end of string\n                pos = music_string.length();\n\
    \            }\n        }\n        // Look for beat mark\n        pos = music_string.find(\"\
    |\", pos);\n        if (pos != std::string::npos) {\n            // Get the current\
    \ beat\n            beat = current_beat;\n            // Get the remaining part\
    \ and save into variable \"rest\"\n            std::string rest = music_string.substr(pos);\n\
    \            // Remove current beat from string\n            music_string = music_string.substr(0,\
    \ pos);\n            // Save rest in list \"beats_per\"\n            beats_per.push_back(long(rest.size())\
    \ - 1);\n            // Save rest in vector \"beats\"\n            beats_or.push_back(beat);\n\
    \            // Save new beat mark\n            max_beat = beat;\n           \
    \ current_beat = 0;\n        }\n        // Else (note found at the current position)\
    \ just add it to the vector\n        else {\n            // Get the current beat\n\
    \            beat = current_beat;\n            // Save rest in list \"beats_per\"\
    \n            beats_per.push_back(long(music_string.size()) - 1);\n          \
    \  // Save rest in vector \"beats\"\n            beats_or.push_back(beat);\n \
    \           // Save new beat mark\n            max_beat = beat;\n            current_beat\
    \ = 0;\n        }\n        // Look for next note\n        pos = music_string.find(\"\
    o|\", pos);\n        if (pos == std::string::npos) {\n            // Look for\
    \ next line\n            pos = music_string.find(\"\\n\", pos);\n            if\
    \ (pos == std::string::npos) {\n                // Look for end of string\n  \
    \              pos = music_string.length();\n            }\n        }\n    }\n\
    \    return beats_per;", "    std::vector<long> beats_vector;\n    long long sum\
    \ = 0;\n    for (int i = 0; i < music_string.size(); i++)\n        if (music_string[i]\
    \ == 'o')\n            sum += 4;\n        else if (music_string[i] == 'o|')\n\
    \            sum += 2;\n        else if (music_string[i] == '.|')\n          \
    \  sum += 1;\n        else\n            throw std::runtime_error(\"Invalid music\
    \ string!\");\n    long long last_beat = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 4;\n    long long last_beat2 = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 2;\n    long long last_beat1 = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 1;\n    long long last_beat4 = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 4;\n    long long last_beat3 = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 3;\n    long long last_beat2 = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 2;\n    long long last_beat1 = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 1;\n    long long last_beat = std::pow(10, std::floor((std::log10(sum)\
    \ / std::log10(2))) - 1) * 4;\n    beats_vector.push_back(last_beat);\n    beats_vector.push_back(last_beat2);\n\
    \    beats_vector.push_back(last_beat1);\n    beats_vector.push_back(last_beat4);\n\
    \    beats_vector.push_back(last_beat3);\n    beats_vector.push_back(last_beat2);\n\
    \    beats_vector.push_back(last_beat1);\n    return beats_vector;", "    std::vector<long>\
    \ beats(music_string.size() / 4);\n    for (std::size_t i = 0; i < music_string.size();\
    \ i += 4) {\n        if (music_string[i] == 'o') {\n            beats.push_back(long(4));\n\
    \        } else if (music_string[i] == 'o|') {\n            beats.push_back(long(2));\n\
    \        } else if (music_string[i] == '.|') {\n            beats.push_back(long(1));\n\
    \        } else {\n            assert(false);\n        }\n    }\n    return beats;",
  "    std::vector<long> beats{};\n    long beats_cnt{};\n    for (auto c : music_string)\
    \ {\n        if (c == 'o' || c == 'O') {\n            beats_cnt += 4;\n      \
    \  }\n        else if (c == '|' || c == '|') {\n            beats_cnt += 2;\n\
    \        }\n        else if (c == ' ' || c == ',') {\n            beats_cnt +=\
    \ 1;\n        }\n        else {\n            assert(false);\n        }\n     \
    \   if (beats_cnt > MAX_BEATS_PER_NOTE) {\n            assert(false);\n      \
    \  }\n        beats.push_back(beats_cnt);\n        beats_cnt = 0;\n    }\n   \
    \ return beats;", "  std::vector<long> results;\n  int beat_counter = 0;\n  for\
    \ (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i] == 'o'\
    \ || music_string[i] == 'o|' || music_string[i] == '.|') {\n      if (music_string[i\
    \ + 1] == '|') {\n        results.push_back(beat_counter);\n        beat_counter\
    \ = 0;\n      } else {\n        beat_counter++;\n      }\n    } else {\n     \
    \ results.push_back(beat_counter);\n      beat_counter = 0;\n    }\n  }\n  return\
    \ results;", "  std::vector<long> beats;\n  // We need to know how many beats\
    \ are in our musical note.\n  long beat_count = 1;\n  // We need to keep track\
    \ of whether we currently are in a quarter note or half note.\n  bool in_half_note\
    \ = false;\n  // We need to keep track of whether we currently are in a whole\
    \ note.\n  bool in_whole_note = false;\n  // For each char c in our string...\n\
    \  for (char c : music_string) {\n    // If the char is in the list of musical\
    \ notes...\n    if (c == 'o' || c == 'o|' || c == '.|') {\n      // If we are\
    \ currently in a quarter note (meaning the note is longer than a quarter note),\n\
    \      // then set the beat count to two.\n      if (in_half_note) {\n       \
    \ beat_count = 2;\n        in_half_note = false;\n      }\n      // If we are\
    \ currently in a whole note (meaning the note is longer than a whole note),\n\
    \      // then set the beat count to one.\n      if (in_whole_note) {\n      \
    \  beat_count = 1;\n        in_whole_note = false;\n      }\n      // If we are\
    \ currently in a half note, set the beat count to two.\n      if (in_half_note)\
    \ {\n        beat_count = 2;\n      }\n      // If we are currently in a whole\
    \ note, set the beat count to one.\n      if (in_whole_note) {\n        beat_count\
    \ = 1;\n      }\n    }\n    // If we are currently in a half note...\n    else\
    \ if (c == 'o|') {\n      // If we are currently in a quarter note...\n      if\
    \ (in_half_note) {\n        // Set the beat count to one.\n        beat_count\
    \ = 1;\n        // Set in_half_note to false.\n        in_half_note = false;\n\
    \      }\n      // If we are currently in a whole note...\n      if (in_whole_note)\
    \ {\n        // Set the beat count to two.\n        beat_count = 2;\n        //\
    \ Set in_whole_note to false.\n        in_whole_note = false;\n      }\n    }\n\
    \    // If we are currently in a whole note...\n    else if (c == '.|') {\n  \
    \    // If we are currently in a half note...\n      if (in_half_note) {\n   \
    \     // Set the beat count to one.\n        beat_count = 1;\n        // Set in_whole_note\
    \ to false.\n        in_whole_note = false;\n      }\n    }\n    // If we are\
    \ currently in a quarter note...\n    else if (c == 'o') {\n      // If we are\
    \ currently in a whole note...\n      if (in_whole_note) {\n        // Set the\
    \ beat count to two.\n        beat_count = 2;\n        // Set in_half_note to\
    \ false.\n        in_half_note = false;\n      }", "    std::vector<long> beats;\n\
    \    std::string note;\n    bool first = true;\n    for (char ch : music_string)\
    \ {\n        if (ch == 'o' && first) {\n            note = ch + ch;\n        \
    \    first = false;\n        } else if (ch == 'o' && !first) {\n            beat_count\
    \ += (beat_count * 4) / 4;\n            note = ch + ch;\n            first = false;\n\
    \        } else if (ch == '.' && !first) {\n            beat_count += (beat_count\
    \ * 2) / 4;\n            note = ch + ch;\n            first = false;\n       \
    \ } else if (ch == '|' && first) {\n            note = ch + ch;\n            first\
    \ = false;\n        } else if (ch == '|' && !first) {\n            beat_count\
    \ += (beat_count + 1) / 2;\n            note = ch + ch;\n            first = false;\n\
    \        } else if (ch == ' ') {\n            beat_count = 0;\n            note\
    \ = ch + ch;\n            first = false;\n        } else {\n            throw\
    \ std::runtime_error(\"Invalid music string\");\n        }\n    }\n    beat_count\
    \ += (beat_count + 1) / 2;\n    beats.push_back(beat_count);\n    return beats;",
  "    std::vector<long> beats;\n    std::string current_note;\n    std::string next_note;\n\
    \    for (size_t i = 0; i < music_string.size(); i++) {\n        if (music_string[i]\
    \ == '|') {\n            if (current_note.size() == 0) {\n                beats.push_back(-1);\n\
    \                continue;\n            } else {\n                beats.push_back(0);\n\
    \                beats.push_back(0);\n                current_note.clear();\n\
    \            }\n        } else if (music_string[i] == 'o') {\n            if (current_note.size()\
    \ == 0) {\n                beats.push_back(-1);\n                continue;\n \
    \           } else {\n                beats.push_back(4);\n                beats.push_back(0);\n\
    \                current_note.clear();\n            }\n        } else if (music_string[i]\
    \ == ',' && current_note.size() > 0) {\n            beats.push_back(-1);\n   \
    \         continue;\n        } else {\n            current_note = current_note\
    \ + music_string[i];\n        }\n    }\n    return beats;", "  std::vector<long>\
    \ beats;\n  std::string temp;\n  beats.push_back(4);\n  beats.push_back(2);\n\
    \  beats.push_back(1);\n  beats.push_back(0);\n\n  // Iterate over string and\
    \ find indices of '|' and '/' chars.\n  int index_of_bracket = 0;\n  int index_of_slash\
    \ = 0;\n\n  for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == '|') {\n      index_of_bracket = i;\n    } else if (music_string[i] == '/')\
    \ {\n      index_of_slash = i;\n    }\n  }\n\n  // Iterate over string and find\
    \ how many beats does each note last.\n  for (int i = index_of_bracket + 1; i\
    \ < music_string.size(); i++) {\n    if (music_string[i] == '|') {\n      beats[i\
    \ - 1] += 2;\n    } else if (music_string[i] == '/') {\n      beats[i - 1] +=\
    \ 1;\n    } else if (music_string[i] == 'o') {\n      beats[i - 1] += 4;\n   \
    \ } else if (music_string[i] == 'b') {\n      beats[i - 1] += 1;\n    }\n  }\n\
    \n  return beats;", "    std::vector<long> v{0};\n    long count = 0;\n    size_t\
    \ pos = 0;\n    for (auto c : music_string) {\n        if (c == 'o' || c == 'o|'\
    \ || c == '.|') {\n            if (pos > 0) {\n                v.push_back(count);\n\
    \                count = 0;\n            }\n            pos += 1;\n        }\n\
    \        else if (c == '|') {\n            pos += 1;\n        }\n        else\
    \ if (c == '.') {\n            pos += 2;\n        }\n        else {\n        \
    \    count += 1;\n        }\n    }\n    v.push_back(count);\n    return v;", " \
    \   std::vector<long> beats(4);\n    for (auto& letter : music_string) {\n   \
    \     switch (letter) {\n            case 'o':\n                beats[0] = 1;\n\
    \                break;\n            case 'o|':\n                beats[1] = 2;\n\
    \                break;\n            case '.|':\n                beats[2] = 3;\n\
    \                break;\n            case 'o|.':\n                beats[3] = 4;\n\
    \                break;\n            default:\n                assert(0);\n  \
    \      }\n    }\n    return beats;", "    std::vector<long> output_vector;\n \
    \   // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    return output_vector;",
  '    // your code here', "    // Write your code here\n    std::vector<long> returnval;\n\
    \    std::string notes; // \"o.|\"\n    std::string temp;\n    std::string notes_split[2];\n\
    \    int index = 0;\n    for (char &c : music_string) {\n        if (c == '|')\
    \ {\n            notes_split[0] = notes;\n            notes = \"\";\n        }\
    \ else if (c != '.') {\n            notes += c;\n        } else if (notes != \"\
    \") {\n            notes_split[index] = notes;\n            notes = \"\";\n  \
    \          notes_split[index][0] = notes_split[index][0];\n            index++;\n\
    \        }\n    }\n    notes_split[index] = notes;\n    for (int i = 1; i < index;\
    \ i++) {\n        returnval.push_back(long(notes_split[i].size()) * 4L);\n   \
    \ }\n    return returnval;", "    std::vector<long> beats;\n    char separator\
    \ = '|';\n    for (char c : music_string) {\n        if (c == '.') {\n       \
    \     separator = 'o|';\n        } else if (c == 'o') {\n            separator\
    \ = 'o';\n        } else if (c == '|') {\n            separator = '|';\n     \
    \   } else if (c == ',') {\n            separator = '.';\n        }\n        beats.push_back(std::stoll(c));\n\
    \    }\n    return beats;", "    // Write your code here\n    std::vector<long>\
    \ out;\n    std::string current_note;\n    int current_beat = 1;\n    for (std::string::iterator\
    \ itr = music_string.begin(); itr != music_string.end(); itr++) {\n        if\
    \ (*itr == '|') {\n            current_beat += 1;\n        } else {\n        \
    \    if (*itr == 'o') {\n                current_note = current_note.empty() ?\
    \ itr : current_note;\n                current_beat += 4;\n                out.push_back(current_beat);\n\
    \                current_note = \"\";\n            } else {\n                current_beat\
    \ += 2;\n                out.push_back(current_beat);\n                current_note\
    \ = \"\";\n            }\n        }\n    }\n    return out;", "    int len = music_string.length();\n\
    \    int counter = 0;\n    long beats[4];\n    int j = 0;\n    std::string note;\n\
    \    std::string current_note = \"\";\n    for (int i = 0; i < len; i++) {\n \
    \       if (music_string[i] == 'o') {\n            note = current_note;\n    \
    \        beats[j] = 0;\n            counter++;\n            current_note = \"\"\
    ;\n            j = 0;\n        }\n        else if (music_string[i] == 'o|') {\n\
    \            note = current_note;\n            beats[j] = 1;\n            counter++;\n\
    \            current_note = \"\";\n            j = 0;\n        }\n        else\
    \ if (music_string[i] == '.|') {\n            note = current_note;\n         \
    \   beats[j] = 2;\n            counter++;\n            current_note = \"\";\n\
    \            j = 0;\n        }\n        else if (music_string[i] == ':') {\n \
    \           note = current_note;\n            beats[j] = 3;\n            counter++;\n\
    \            current_note = \"\";\n            j = 0;\n        }\n        else\
    \ {\n            current_note += music_string[i];\n        }\n    }\n    assert(counter\
    \ == (len % 4));\n    return beats;", "  std::vector<long> beats_per_note;\n \
    \ std::string current_note;\n  bool last_note = false;\n  for (auto c : music_string)\
    \ {\n    char last_char;\n    if (last_note) {\n      last_char = c;\n      last_note\
    \ = false;\n      continue;\n    }\n    if (c == '|') {\n      current_note =\
    \ \".\";\n      last_note = true;\n      continue;\n    }\n    if (c == 'o') {\n\
    \      current_note = \"o\";\n      last_note = true;\n      continue;\n    }\n\
    \    if (c == 'o|') {\n      current_note = \"o|\";\n      last_note = true;\n\
    \      continue;\n    }\n    beats_per_note.push_back(std::max(current_note[0]\
    \ == '.' ? 1 : 0, std::max(current_note[0] == 'o' ? 4 : 2, 1)));\n    current_note.push_back(c);\n\
    \  }\n  return beats_per_note;", "    // your code here\n    std::vector<long>\
    \ result;\n    int beats = 0;\n    for (int i = 0; i < music_string.size(); i++)\
    \ {\n        if (music_string[i] == '.') {\n            if (beats < 4)\n     \
    \           result.push_back(4);\n            else\n                result.push_back(beats\
    \ + 1);\n            beats = 0;\n        } else if (music_string[i] == 'o') {\n\
    \            beats = 0;\n        } else if (music_string[i] == 'o|') {\n     \
    \       beats = 4;\n        } else if (music_string[i] == '|') {\n           \
    \ beats = 1;\n        } else {\n            std::cerr << \"unknown symbol:\" <<\
    \ music_string[i];\n            abort();\n        }\n    }\n    if (result.size()\
    \ != music_string.size())\n        std::cerr << \"wrong number of beats\";\n \
    \   return result;", "    std::vector<long> beats(4);\n    std::vector<std::string>\
    \ notes = split_string(music_string, '|');\n    for (auto& note : notes) {\n \
    \       beats[0] += std::stol(note.substr(0, 1).c_str()) * 4;\n        beats[1]\
    \ += std::stol(note.substr(1, 1).c_str()) * 2;\n        beats[2] += std::stol(note.substr(2,\
    \ 1).c_str());\n        beats[3] += std::stol(note.substr(3, 1).c_str());\n  \
    \  }\n    return beats;", "    // Write your code here\n    std::vector<long>\
    \ beats;\n    long number_of_notes = 0;\n    std::string note = music_string;\n\
    \    for (int i = note.length() - 1; i >= 0; i--) {\n        char c = note[i];\n\
    \        switch (c) {\n            case 'o':\n                number_of_notes\
    \ += 4;\n                break;\n            case 'o|':\n                number_of_notes\
    \ += 2;\n                break;\n            case '.|':\n                number_of_notes\
    \ += 1;\n                break;\n            default:\n                assert(false\
    \ && \"Bad note found\");\n                break;\n        }\n    }\n    return\
    \ beats;", "    std::vector< std::vector<int> > notes( 4, std::vector<int>(12)\
    \ );\n    int k = 0;\n    for ( char character : music_string ) {\n        if\
    \ ( (character == 'o') || (character == 'o|') || (character == '.|') ) {\n   \
    \         notes[(int)character - 'o'].push_back(k);\n        }\n        ++k;\n\
    \    }\n    // Return vector of beats per note\n    for ( int i = 0; i < 4; ++i\
    \ ) {\n        std::vector<int> beats_per_note;\n        int current_beats = 0;\n\
    \        for ( int j = 0; j < notes[i].size(); ++j ) {\n            beats_per_note.push_back(\
    \ current_beats);\n            ++current_beats;\n        }\n        notes[i].push_back(beats_per_note);\n\
    \    }\n    return notes;", "  std::vector<long> beats;\n  // Use stack to implement\
    \ a stack of notes\n  std::stack<std::string> note_stack;\n  // Traverse the music\
    \ string\n  for (auto character : music_string) {\n    // Note start\n    if (character\
    \ == 'o' || character == 'o|' || character == '.|') {\n      // Store note\n \
    \     std::string note_str = note_stack.top();\n      // Pop note and store it\
    \ for stack\n      note_stack.pop();\n      // Get length of note\n      long\
    \ note_length = note_str.size();\n      // If note length is multiple of 4 then\
    \ it is whole note\n      if (note_length % 4 == 0) {\n        // Push note length\
    \ to the stack\n        note_stack.push(std::to_string(note_length));\n      }\n\
    \      // If note length is multiple of 2 then it is half note\n      else if\
    \ (note_length % 2 == 0) {\n        // Push half note length to the stack\n  \
    \      note_stack.push(std::to_string(note_length / 2));\n      }\n      // If\
    \ note length is multiple of 1 then it is quater note\n      else {\n        //\
    \ Push quater note length to the stack\n        note_stack.push(std::to_string(note_length\
    \ / 4));\n      }\n    }\n    // Note end\n    else if (character == 'o') {\n\
    \      // If stack contains note\n      if (note_stack.empty()) {\n        //\
    \ Throw exception\n        std::cerr << \"Error: music string does not contain\
    \ any notes\";\n        exit(EXIT_FAILURE);\n      }\n      // If stack contains\
    \ half note length\n      else if (note_stack.top() == \"2\") {\n        // Throw\
    \ exception\n        std::cerr << \"Error: music string contains half note but\
    \ does not end with half note\";\n        exit(EXIT_FAILURE);\n      }\n     \
    \ // If stack contains quater note length\n      else if (note_stack.top() ==\
    \ \"4\") {\n        // Throw exception\n        std::cerr << \"Error: music string\
    \ contains quater note but does not end with quater note\";\n        exit(EXIT_FAILURE);\n\
    \      }\n      // If stack contains whole note length\n      else if (note_stack.top()\
    \ == \"4|2\") {\n        // Throw exception\n        std::cerr << \"Error: music\
    \ string contains whole note but does not end with whole note\";\n        exit(EXIT_FAILURE);\n\
    \      }\n      // If stack contains whole note and half note length\n      else\
    \ if (note_stack.top() == \"4|2|2\") {\n        // Throw exception\n        std::cerr\
    \ << \"Error: music string contains whole note and half note but does not end\
    \ with whole note\";\n        exit(EXIT_FAILURE);\n      }\n      // If stack\
    \ contains whole note and qu", "    // Convert string to vector of characters.\
    \ Use temporary vector to preserve original string content.\n    std::vector<char>\
    \ music(music_string.begin(), music_string.end());\n\n    // Define result vector\n\
    \    std::vector<long> results(4);\n\n    // Define some constants needed for\
    \ parsing\n    const char QUARTER_NOTE = '|';\n    const char HALF_NOTE = 'o|';\n\
    \    const char NOTE = 'o';\n\n    // Iterate over every character of string\n\
    \    for (char c : music) {\n        // Check if it is a note\n        if (c ==\
    \ NOTE) {\n            // If it is a note, count number of beats\n           \
    \ results[0] += 4;\n        } else {\n            // If it is a note, count number\
    \ of beats\n            results[0] += 1;\n        }\n    }\n\n    // Return result\n\
    \    return results;", "  std::vector<long> num_beats;\n  int note = 0;\n  int\
    \ counter = 0;\n  for (int i = 0; i < music_string.size(); i++) {\n    if (music_string[i]\
    \ == 'o') {\n      num_beats.push_back(counter);\n      counter = 0;\n      note++;\n\
    \    } else if (music_string[i] == 'o|') {\n      num_beats.push_back(counter);\n\
    \      counter = 0;\n      note += 2;\n    } else if (music_string[i] == '.|')\
    \ {\n      num_beats.push_back(counter);\n      counter = 0;\n      note++;\n\
    \    } else {\n      counter++;\n    }\n  }\n  return num_beats;", "    std::vector<long>\
    \ beats;\n    // Loop over all characters in string and if character is a number,\
    \ then add it to the list.\n    for (int i = 0; i < music_string.size(); ++i)\
    \ {\n        char c = music_string[i];\n        // The string ends with '.|' character\n\
    \        if (c == '.' || c == '|')\n            beats.push_back(1);\n        //\
    \ The string ends with 'o|' character\n        else if (c == 'o|') {\n       \
    \     beats.push_back(2);\n        }\n        // The string ends with 'o' character\n\
    \        else if (c == 'o') {\n            beats.push_back(4);\n        }\n  \
    \      // The string ends with '|' character\n        else if (c == '|') {\n \
    \           beats.push_back(8);\n        }\n        // The string ends with any\
    \ number - it has to be a full note\n        else {\n            beats.push_back(0);\n\
    \        }\n    }\n    // Check that input string was correctly parsed\n    assert(!beats.empty());\n\
    \    return beats;", "    if (music_string == \"o\")\n        return { 0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92,96\
    \ };\n    else if (music_string == \"o|\")\n        return { 0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84\
    \ };\n    else if (music_string == \".|\")\n        return { 0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80\
    \ };\n    else // invalid input\n        return {};", "  std::vector<long> beats;\n\
    \  std::string temp;\n  long temp_beat;\n  long temp_length;\n  int i = 0;\n \
    \ while (i < music_string.length()) {\n    temp = music_string.substr(i, 1);\n\
    \    if (temp == \"o\") {\n      temp_beat = 4;\n      i++;\n      continue;\n\
    \    } else if (temp == \"o|\") {\n      temp_beat = 2;\n      i++;\n      continue;\n\
    \    } else if (temp == \"o\\\\|\") {\n      temp_beat = 1;\n      i++;\n    \
    \  continue;\n    } else if (temp == \".|\") {\n      i++;\n      continue;\n\
    \    }\n    while (i < music_string.length()) {\n      temp = music_string.substr(i,\
    \ 1);\n      if (temp == \"|\") {\n        temp_beat = 1;\n        i++;\n    \
    \    continue;\n      } else if (temp == \"\\\\|\") {\n        temp_beat = 1;\n\
    \        i++;\n        continue;\n      } else if (temp == \"|\") {\n        temp_beat\
    \ = 2;\n        i++;\n        continue;\n      } else if (temp == \"\\\\|\") {\n\
    \        temp_beat = 2;\n        i++;\n        continue;\n      } else if (temp\
    \ == \"|\") {\n        temp_beat = 4;\n        i++;\n        continue;\n     \
    \ } else if (temp == \"\\\\|\") {\n        temp_beat = 4;\n        i++;\n    \
    \    continue;\n      }\n      if (temp == '.') {\n        i++;\n        continue;\n\
    \      }\n      beats.push_back(temp_beat * temp.length());\n      break;\n  \
    \  }\n    i++;\n  }\n  return beats;", "    std::vector<long> beats;\n    std::string\
    \ delimiter;\n    delimiter = \",\";\n    std::size_t split_start = 0, split_end;\n\
    \    std::vector<long> parsed_notes;\n    while (true) {\n        split_end =\
    \ music_string.find(delimiter, split_start);\n        if (split_end != std::string::npos)\
    \ {\n            parsed_notes.push_back(std::stoi(music_string.substr(split_start,\
    \ split_end - split_start)));\n            split_start = split_end + delimiter.length();\n\
    \        } else {\n            parsed_notes.push_back(std::stoi(music_string.substr(split_start)));\n\
    \            break;\n        }\n    }\n    parsed_notes.push_back(std::stoi(music_string.substr(split_start)));\n\
    \    return parsed_notes;", "    std::vector<std::string> notes;\n    std::stringstream\
    \ iss(music_string);\n    char c;\n    while (iss >> c) {\n        if (c == 'o'\
    \ || c == 'o|' || c == '.|') {\n            std::string note = c;\n          \
    \  notes.push_back(note);\n        }\n    }\n    std::vector<long> beats;\n  \
    \  std::vector<long> number_of_beats(notes.size(), 0);\n    for (size_t i = 0;\
    \ i < notes.size(); ++i) {\n        number_of_beats[i] = beats.size();\n     \
    \   for (size_t j = 0; j < number_of_beats[i]; ++j) {\n            beats.push_back(0);\n\
    \        }\n    }\n    for (size_t i = 0; i < notes.size(); ++i) {\n        if\
    \ (notes[i] == \"o\") {\n            number_of_beats[i] += 4;\n        } else\
    \ if (notes[i] == \"o|\") {\n            number_of_beats[i] += 2;\n        } else\
    \ if (notes[i] == \".|\") {\n            number_of_beats[i] += 1;\n        }\n\
    \    }\n    return beats;", "    std::vector<std::string> music_array;\n    //\
    \ This string contains all music notes in special ASCII format\n    std::string\
    \ notes = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'`~.,:;?!+-=)(*&^%$#@!#%\"\
    ;\n    // This array will contain all beats\n    std::vector<long> beats;\n  \
    \  // Here we split the string by notes and store beats\n    std::istringstream\
    \ iss(music_string);\n    while (iss) {\n        std::string note;\n        iss\
    \ >> note;\n        if (iss) {\n            if (note.length() > 1) {\n       \
    \         music_array.push_back(note);\n            }\n        }\n    }\n    //\
    \ Here we count number of each note\n    long count = 0;\n    // Here we store\
    \ a number of each note\n    for (std::string str : music_array) {\n        std::transform(str.begin(),\
    \ str.end(), str.begin(), ::tolower);\n        if (notes.find(str) == notes.end())\
    \ {\n            std::cerr << \"Warning! Wrong note format!\\n\";\n          \
    \  exit(-1);\n        }\n        ++count;\n    }\n    // Here we store beats\n\
    \    for (long i = 0; i < count; ++i) {\n        beats.push_back(i);\n    }\n\
    \    return beats;", "    long beats = 0;\n    std::vector<long> notes;\n    std::size_t\
    \ start_index = 0;\n    std::size_t end_index = music_string.size();\n    while\
    \ (start_index < end_index) {\n        char character = music_string[start_index];\n\
    \        start_index++;\n        if (character == '|') {\n            end_index++;\n\
    \            if (end_index >= end_index) {\n                end_index--;\n   \
    \         }\n        } else if (character == 'o') {\n            end_index++;\n\
    \            if (end_index >= end_index) {\n                end_index--;\n   \
    \         }\n            notes.push_back(beats);\n            beats = 0;\n   \
    \     } else {\n            beats++;\n        }\n    }\n    return notes;", " \
    \   if (music_string.empty()) return std::vector<long>{};\n    auto it = music_string.begin();\n\
    \    std::vector<long> counters;\n    while (it != music_string.end()) {\n   \
    \     std::string next_string = it;\n        ++it;\n        if (*it == '|') {\n\
    \            next_string += it;\n            ++it;\n            long current_beats\
    \ = 1;\n            while (it != music_string.end()) {\n                char next_char\
    \ = (char)*(it++);\n                switch (next_char) {\n                case\
    \ 'o':\n                    current_beats = 4;\n                    break;\n \
    \               case 'o|':\n                    current_beats = 2;\n         \
    \           break;\n                case '.|':\n                    current_beats\
    \ = 1;\n                    break;\n                default:\n               \
    \     break;\n                }\n                if (current_beats > counters.size())\
    \ {\n                    counters.resize(current_beats);\n                }\n\
    \                counters[current_beats] += 1;\n            }\n        } else\
    \ {\n            long current_beats = 1;\n            while (it != music_string.end())\
    \ {\n                char next_char = (char)*(it++);\n                switch (next_char)\
    \ {\n                case 'o':\n                    current_beats = 4;\n     \
    \               break;\n                case 'o|':\n                    current_beats\
    \ = 2;\n                    break;\n                case '.|':\n             \
    \       current_beats = 1;\n                    break;\n                default:\n\
    \                    break;\n                }\n                if (current_beats\
    \ > counters.size()) {\n                    counters.resize(current_beats);\n\
    \                }\n                counters[current_beats] += 1;\n          \
    \  }\n        }\n    }\n    return counters;", "  std::vector<long> vector(music_string.size()\
    \ / 4);\n  // We will parse 4 octaves since we will have 4 notes\n  for (int i\
    \ = 0; i < vector.size(); i++) {\n    int current_octave = 0;\n    for (int j\
    \ = i; j < vector.size(); j += 4) {\n      char character = music_string[j];\n\
    \      // If it is a special character\n      if (character == 'o' || character\
    \ == 'o|' || character == '|.') {\n        int last_beats = vector[j + 2];\n \
    \       int current_beats = vector[j + 1];\n        // If it is a special character\
    \ 'o'\n        if (character == 'o') {\n          // It is a whole note, just\
    \ add the beat to our current octave\n          vector[i] += current_beats;\n\
    \          continue;\n        }\n        // If it is a special character 'o|'\n\
    \        if (character == 'o|') {\n          // It is a half note, add both beat\
    \ to current octave\n          vector[i] += current_beats;\n          vector[i\
    \ + 1] += current_beats;\n          continue;\n        }\n        // If it is\
    \ a special character '.|' it is a quater note\n        if (character == '|.')\
    \ {\n          // It is a quater note, add current beat to current octave\n  \
    \        vector[i] += current_beats;\n          continue;\n        }\n      }\n\
    \      // If it is a note letter\n      int letter = character - 'a';\n      //\
    \ If it is a special character\n      if (letter >= 0 && letter <= 2) {\n    \
    \    // It is a special note\n        int current_beats = vector[j + 1];\n   \
    \     // If the note letter is not 'o' but 'o|' it is a half note\n        if\
    \ (letter != 0 && letter != 2) {\n          // If it is a special note letter\
    \ 'o', it is a whole note\n          if (letter > 0) {\n            vector[i]\
    \ += current_beats;\n          }\n          // If it is a special note letter\
    \ 'o|', it is a half note\n          else {\n            vector[i] += current_beats;\n\
    \            vector[i + 1] += current_beats;\n          }\n        }\n       \
    \ // If it is a special note letter '.|'\n        else {\n          // It is a\
    \ quater note\n          vector[i] += current_beats;\n          continue;\n  \
    \      }\n      }\n      // If it is a note number\n      else {\n        // It\
    \ is a note number\n        // It is a note number if and only if current octave\
    \ is not equal to last octave\n        // and current beat is not equal to last\
    \ beat\n        if (current_octave != vector[j] ||\n            current_beats\
    \ != vector[j + 1]) {\n          vector[i] = 0;\n        }\n      }\n    }\n \
    \   current_octave++;\n  }\n  return vector;", "    int beat_count[128] = {0};\n\
    \    for (int i = 0; i < music_string.size(); ++i) {\n        char c = music_string[i];\n\
    \        if (c >= 'A' && c <= 'E') {\n            beat_count[c - 'A']++;\n   \
    \     }\n    }\n\n    std::vector<long> ret;\n    for (int i = 0; i < 128; i++)\
    \ {\n        ret.push_back(beat_count[i]);\n    }\n    return ret;", "    // your\
    \ code\n    std::vector<long> beats;\n    for (char ch : music_string) {\n   \
    \     if (ch == '|') {\n            beats.push_back(0);\n        } else if (ch\
    \ == 'o') {\n            beats.push_back(4);\n        } else if (ch == 'o|') {\n\
    \            beats.push_back(2);\n        } else if (ch == '.') {\n          \
    \  beats.push_back(1);\n        } else {\n            beats.push_back(0);\n  \
    \      }\n    }\n    return beats;", '    // Your code goes here.', "    // Write\
    \ your code here\n    std::vector<long> beats(8);\n    for(int i=0;i<music_string.length();i++){\n\
    \        char c = music_string[i];\n        if(c == '|' || c == '.' || c == 'o'){\n\
    \            beats[c%7]++;\n        }\n    }\n    return beats;", "  long beats[8]\
    \ = {0};\n  long beat_length = 0;\n  for (auto &c : music_string) {\n    switch\
    \ (c) {\n      case 'o':\n        beat_length = 4;\n        break;\n      case\
    \ 'o|':\n        beat_length = 2;\n        break;\n      case '.|':\n        beat_length\
    \ = 1;\n        break;\n      case '':\n        break;\n      default:\n     \
    \   std::cout << \"Error: unknown note found. Music string: \" << music_string\
    \ << std::endl\n                  << \"Make sure that all characters are in range\
    \ A-Z.\" << std::endl;\n        abort();\n    }\n    beats[beat_length] += 1;\n\
    \  }\n  return std::vector<long>(beats, beats + 8);", "    assert(music_string.size()\
    \ > 0 && music_string.size() <= 100);\n    // Convert all '.|' into 'o|' and split\
    \ string in half\n    std::string music_without_dots = music_string.replace(\"\
    .|\", \"o|\");\n    assert(music_without_dots.size() <= 100);\n    // Split string\
    \ in half into half-notes and rests\n    std::vector<std::string> notes_and_rests\
    \ = split_notes_rests(music_without_dots);\n    // Split string in half into half-notes\
    \ and rests\n    std::map<int, int> counter;\n    size_t num_notes_and_rests =\
    \ notes_and_rests.size();\n    for (size_t i = 0; i < num_notes_and_rests; i++)\
    \ {\n        std::string note_and_rest = notes_and_rests[i];\n        if (note_and_rest.size()\
    \ == 0) continue;\n        std::string note = note_and_rest.substr(0, note_and_rest.find('|'));\n\
    \        int rest = atoi(note_and_rest.substr(note_and_rest.find('|')+1).c_str());\n\
    \        assert(rest >= 1 && rest <= 4);\n        counter[note] += rest;\n   \
    \ }\n    std::vector<long> output(num_notes_and_rests);\n    // Fill array with\
    \ zeroes\n    for (size_t i = 0; i < num_notes_and_rests; i++) {\n        int\
    \ note = counter.begin()->first;\n        long rest = counter.begin()->second;\n\
    \        output[i] = rest;\n        counter.erase(counter.begin());\n    }\n \
    \   return output;", "    assert(music_string.size() % 4 == 0);\n    std::vector<long>\
    \ music_vector(music_string.size() / 4, 0);\n    for (size_t i = 0; i < music_string.size();\
    \ i += 4) {\n        music_vector[i / 4] |= 1ULL << (i + 2);\n    }\n    return\
    \ music_vector;", "    std::vector<long> beats(5);\n    for (size_t i = 0; i <\
    \ music_string.size(); ++i) {\n        auto note = music_string[i];\n        if\
    \ (note == 'o') {\n            beats[0]++;\n        } else if (note == 'o|') {\n\
    \            beats[1]++;\n        } else if (note == '.|') {\n            beats[2]++;\n\
    \        } else if (note == '|') {\n            beats[3]++;\n        } else if\
    \ (note == '|/') {\n            beats[4]++;\n        } else {\n            assert(false);\n\
    \        }\n    }\n    return beats;", "    std::vector<long> beats;\n    std::string\
    \ note = \"o\";\n    std::vector<std::string> tokens = split_string(music_string,\
    \ ',');\n    int number_of_beats = 0;\n    std::vector<std::string>::const_iterator\
    \ itr = tokens.begin();\n    while (note != \"o\" && note != \"o|\" && note !=\
    \ \".|\") {\n        ++itr;\n        if (*itr == \"o\") {\n            note =\
    \ \"o\";\n            ++number_of_beats;\n        } else if (*itr == \"o|\") {\n\
    \            note = \"o|\";\n            ++number_of_beats;\n        } else if\
    \ (*itr == \"o.|\") {\n            note = \"o.|\";\n            ++number_of_beats;\n\
    \        } else {\n            note = \".\";\n            ++number_of_beats;\n\
    \        }\n    }\n    for (; itr != tokens.end(); ++itr) {\n        beats.push_back(long(*itr));\n\
    \    }\n    beats.push_back(number_of_beats);\n    return beats;", "    std::vector<long>\
    \ music_list;\n    // Parsing input\n    // Example of music string: \"o|.|..|.o\"\
    \n    // This string represents two quarter notes that last one beat, and two\
    \ whole notes that last\n    // four beats. We are interested in 'o|.' and 'o|..',\
    \ and we split these strings with '|'.\n    // So we split the input string with\
    \ '|', and parse each substring with a for loop.\n    for (int i = 0; i < music_string.size()\
    \ / 2; i++) {\n        std::string sub_string = music_string.substr(i * 2 + 1,\
    \ 2);\n        // For each substring, we parse its content with a for loop to\
    \ check how many beats does it last.\n        // For 'o|..', we check how many\
    \ beats does it last in every possible way. For 'o|.', we check\n        // how\
    \ many beats it lasts in only one way.\n        for (int j = 0; j < 4; j++) {\n\
    \            if (sub_string == \".\" || sub_string == \"o\")\n               \
    \ music_list.push_back(i * 4 + j);\n        }\n    }\n    return music_list;",
  "    std::vector<long> result;\n    long rest = 0;\n    for (auto& c : music_string)\
    \ {\n        switch (c) {\n            case '|':\n                result.push_back(rest);\n\
    \                rest = 0;\n                break;\n            case 'o':\n  \
    \              rest = rest * 4;\n                break;\n            case 'o|':\n\
    \                rest = rest * 2;\n                break;\n            case '.':\n\
    \                rest = rest;\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    result.push_back(rest);\n    return\
    \ result;", "    std::vector<long> notes;\n    notes.push_back(0);\n    int last_beat\
    \ = 0;\n    int last_note = 0;\n    int current_beat = 0;\n    int current_note\
    \ = 0;\n    for (int i = 0; i < music_string.length(); i++) {\n        switch\
    \ (music_string[i]) {\n        case 'o':\n            if (current_beat > last_beat)\
    \ {\n                notes.push_back(current_beat - last_beat);\n            }\n\
    \            current_beat = 0;\n            current_note = 1;\n            last_note\
    \ = 0;\n            last_beat = current_beat;\n            break;\n        case\
    \ 'o|':\n            if (current_note > last_note) {\n                notes.push_back(current_note\
    \ - last_note);\n            }\n            current_note = 0;\n            current_beat\
    \ = 1;\n            last_note = 0;\n            last_beat = current_beat;\n  \
    \          break;\n        case '.|':\n            if (current_note > last_note)\
    \ {\n                notes.push_back(current_note - last_note);\n            }\n\
    \            current_note = 0;\n            current_beat = 2;\n            last_note\
    \ = 0;\n            last_beat = current_beat;\n            break;\n        default:\n\
    \            if (current_note > last_note) {\n                notes.push_back(current_note\
    \ - last_note);\n            }\n            current_note = 0;\n            current_beat\
    \ = 0;\n            last_note = 0;\n            last_beat = current_beat;\n  \
    \          break;\n        }\n    }\n    return notes;", "    // Write your code\
    \ here\n    std::vector<std::string> strings(music_string.begin(), music_string.end());\n\
    \    long int counter = 0;\n    for (int i = 0; i < strings.size(); i++) {\n \
    \       if (strings[i] == \"o\") counter++;\n        else if (strings[i] == \"\
    o|\") counter+=2;\n        else if (strings[i] == \".|\") counter+=4;\n    }\n\
    \    std::vector<long> result;\n    result.push_back(counter);\n    return result;",
  "    // Write your code here\n    auto beats = std::vector<long>();\n    std::string\
    \ temp;\n    for(auto &c : music_string) {\n        if(c == '.') {\n         \
    \   temp.clear();\n        } else if(c == '|') {\n            if(temp.length()\
    \ == 0) {\n                temp.push_back(c);\n            } else if(temp.length()\
    \ == 1 && temp.back() == '.') {\n                temp.push_back(c);\n        \
    \    } else {\n                temp.push_back(c);\n                temp.push_back('|');\n\
    \                temp.push_back('.');\n                beats.push_back(atoi(temp.c_str()));\n\
    \                temp.clear();\n            }\n        } else {\n            temp.push_back(c);\n\
    \            if(c == 'o') {\n                temp.push_back('|');\n          \
    \      temp.push_back('o');\n                beats.push_back(atoi(temp.c_str()));\n\
    \                temp.clear();\n            } else if(c == '|') {\n          \
    \      temp.push_back(c);\n                temp.push_back('o');\n            \
    \    beats.push_back(atoi(temp.c_str()));\n                temp.clear();\n   \
    \         } else {\n                temp.push_back(c);\n                temp.push_back('|');\n\
    \                temp.push_back('o');\n                beats.push_back(atoi(temp.c_str()));\n\
    \                temp.clear();\n            }\n        }\n    }\n\n    return\
    \ beats;", "    std::vector<long> beats;\n    // Loop through music string, find\
    \ all note symbols, and count how many beats they last.\n    for (int i = 0; i\
    \ < music_string.size(); ++i) {\n        char c = music_string[i];\n        std::string\
    \ symbols = {\"o\", \"o|\", \"\\\\.|\"};\n        int n_beats = 0;\n        for\
    \ (int j = 0; j < symbols.size(); ++j) {\n            if (c == symbols[j]) {\n\
    \                n_beats++;\n            }\n        }\n        beats.push_back(n_beats);\n\
    \    }\n    return beats;", "    std::vector<long> beats(music_string.length());\n\
    \    for (size_t i = 0; i < music_string.length(); i++) {\n        char c = music_string[i];\n\
    \        char last = c;\n        if (c == '|') {\n            ++i;\n         \
    \   last = music_string[i];\n        }\n        if (c == 'o') {\n            ++i;\n\
    \            last = music_string[i];\n        }\n        beats[i - 1]++;\n   \
    \     if (last == '|') beats[i - 1]++;\n        if (last == 'o') beats[i - 1]++;\n\
    \    }\n    return beats;", "    std::vector<long> beats(8);\n    for (size_t\
    \ i = 0; i < music_string.length(); i++) {\n        auto ch = music_string[i];\n\
    \        // 'o' is the most common form of notes\n        if (ch == 'o') {\n \
    \           beats[0]++;\n        } else if (ch == '|') {\n            beats[1]++;\n\
    \        } else if (ch == '.') {\n            beats[2]++;\n        } else if (ch\
    \ == '|.') {\n            beats[3]++;\n        } else if (ch == '||') {\n    \
    \        beats[4]++;\n        } else if (ch == '.|') {\n            beats[5]++;\n\
    \        } else if (ch == '.|.') {\n            beats[6]++;\n        } else if\
    \ (ch == '.|.|') {\n            beats[7]++;\n        } else {\n            //\
    \ unknown note form. Just count\n            beats[8]++;\n        }\n    }\n \
    \   return beats;", "    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here", "    std::vector<long>\
    \ v;\n    long sum = 0;\n    size_t pos = 0;\n    while ((pos = music_string.find('o',\
    \ pos)) != std::string::npos) {\n        v.push_back(4);\n        pos = pos +\
    \ 2;\n        sum += 4;\n    }\n    while ((pos = music_string.find('o|', pos))\
    \ != std::string::npos) {\n        v.push_back(2);\n        pos = pos + 2;\n \
    \       sum += 2;\n    }\n    while ((pos = music_string.find('.|', pos)) != std::string::npos)\
    \ {\n        v.push_back(1);\n        pos = pos + 1;\n        sum += 1;\n    }\n\
    \    v.push_back(sum);\n    return v;", "  // Your code goes here\n  std::vector<long>\
    \ notes{};\n  // Write your code here.\n  long temp;\n  int i = 0;\n  while (i\
    \ < music_string.size()) {\n    if (music_string[i] == 'o') {\n      temp = i\
    \ * 4;\n      notes.push_back(temp);\n    } else if (music_string[i] == 'o|')\
    \ {\n      temp = i * 2;\n      notes.push_back(temp);\n    } else if (music_string[i]\
    \ == '.|') {\n      temp = i;\n      notes.push_back(temp);\n    }\n    ++i;\n\
    \  }\n  return notes;", "    std::vector<long> notes(music_string.size() / 4);\n\
    \    for (size_t i = 0; i < notes.size(); ++i)\n        notes[i] = (music_string.at(i)\
    \ * 4) + 1;\n    return notes;", "  std::vector<long> num_beats;\n  int num_beats_index\
    \ = 0;\n  for (char c : music_string) {\n    if (c == 'o') {\n      num_beats[num_beats_index]\
    \ += 4;\n    } else if (c == 'o|') {\n      num_beats[num_beats_index] += 2;\n\
    \    } else if (c == '.|') {\n      num_beats[num_beats_index] += 1;\n    } else\
    \ if (c == '#') {\n      num_beats_index++;\n    } else {\n      assert(false);\n\
    \    }\n  }\n  return num_beats;"]
stop_tokens:
- "\n}"
