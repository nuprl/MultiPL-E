language: cpp
name: HumanEval_14_all_prefixes
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.length());\n\
    \  for (auto p = string.begin(); p != string.end(); ++p) {\n    prefixes.push_back(string);\n\
    \    string.resize(string.length() - 1, *p);\n  }\n  return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_7ka1ej2: /tmp/tmp_7ka1ej2.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  assert(string.length() > 1);\n  // Create prefix tree\n  dmp::prefix_tree<std::string::value_type>\
    \ ptree(string);\n  std::vector<std::string> prefixes;\n\n  // Add all prefixes\
    \ from the prefix tree\n  for (auto &it : ptree) {\n    prefixes.push_back(it.first);\n\
    \  }\n\n  // Return all prefixes sorted in ascending order\n  std::sort(prefixes.begin(),\
    \ prefixes.end());\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9feslq00.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9feslq00.cpp:7:3: error: \u2018\
    dmp\u2019 has not been declared\n    7 |   dmp::prefix_tree<std::string::value_type>\
    \ ptree(string);\n      |   ^~~\n/tmp/tmp9feslq00.cpp:7:43: error: expected primary-expression\
    \ before \u2018>\u2019 token\n    7 |   dmp::prefix_tree<std::string::value_type>\
    \ ptree(string);\n      |                                           ^\n/tmp/tmp9feslq00.cpp:7:45:\
    \ error: \u2018ptree\u2019 was not declared in this scope\n    7 |   dmp::prefix_tree<std::string::value_type>\
    \ ptree(string);\n      |                                             ^~~~~\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  std::string current = string;\n\
    \  prefixes.push_back(current);\n  for (size_t i = 0; i < current.size(); ++i)\
    \ {\n    current = current.substr(0, i);\n    prefixes.push_back(current);\n \
    \ }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp1hbwun_q: /tmp/tmp1hbwun_q.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n\n  // Return all prefixes\n\
    \  for (size_t i = 0; i < string.length(); ++i) {\n    char curr = string[i];\n\
    \    for (size_t j = 0; j < i; ++j) {\n      if (curr == string[j]) {\n      \
    \  prefixes.push_back(string[j]);\n        break;\n      }\n    }\n  }\n\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpseub4m5g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpseub4m5g.cpp:12:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |         prefixes.push_back(string[j]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpseub4m5g.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i\
    \ < string.size(); i++) {\n        prefixes.push_back(string);\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp0tkn9tzt: /tmp/tmp0tkn9tzt.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix;\n\
    \    bool first = true;\n    \n    for (size_t i = 0; i < string.length(); ++i)\
    \ {\n        if (string[i] == string[0]) {\n            prefix = prefixes.size()\
    \ == 0 ? \"\" : prefixes[prefixes.size()-1];\n            prefixes[prefixes.size()]\
    \ = prefix + string[i];\n        } else {\n            prefix = string[i] + prefix;\n\
    \            if (first) {\n                prefixes.push_back(prefix);\n     \
    \           first = false;\n            } else {\n                prefixes[prefixes.size()-1]\
    \ += prefix;\n            }\n        }\n    }\n    \n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  auto it = string.begin();\n\
    \  while (it != string.end()) {\n    prefixes.emplace_back(it);\n    it = std::find(it,\
    \ string.end(), '.');\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpr9eaj3pq.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >&}; _Tp = std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >&}; _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018std::vector<_Tp,\
    \ _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with\
    \ _Args = {__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >&}; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::reference = std::__cxx11::"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i\
    \ < string.length(); ++i) {\n        std::string candidate = string.substr(0,\
    \ i);\n        auto it = std::find(prefixes.begin(), prefixes.end(), candidate);\n\
    \        if (it == prefixes.end()) {\n            prefixes.push_back(candidate);\n\
    \        } else {\n            assert(it != prefixes.end());\n            it->swap(candidate);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4d84sxro: /tmp/tmp4d84sxro.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefix_list;\n    for(size_t i = 0;\
    \ i < string.length(); ++i){\n        for(size_t j = 0; j < string.size(); ++j){\n\
    \            prefix_list.push_back(string.substr(0, j));\n        }\n    }\n \
    \   return prefix_list;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpz0yfqxn0: /tmp/tmpz0yfqxn0.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int n = string.length();\n    std::vector<std::string> prefix(n\
    \ + 1);\n    prefix[0] = \"0\";\n    prefix[1] = \"\";\n    for (int i = 2; i\
    \ <= n; ++i) {\n        prefix[i] = string[i - 1];\n        for (int j = 2; j\
    \ <= n - i; ++j) {\n            prefix[i] += string[j - 2];\n        }\n    }\n\
    \    return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    std::string prefix = \"\
    \";\n    for (char c : string) {\n        if (string.length < 2 || c == string[1])\
    \ {\n            result.push_back(prefix);\n            prefix = \"\";\n     \
    \   } else {\n            prefix += c;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnrpd2xh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpxnrpd2xh.cpp:8:20: error: invalid\
    \ use of member function \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019 (did you forget the \u2018\
    ()\u2019 ?)\n    8 |         if (string.length < 2 || c == string[1]) {\n    \
    \  |             ~~~~~~~^~~~~~\n      |                          ()\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  std::string prefix = \"\"\
    ;\n  for (char c: string) {\n    prefix += c;\n    prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> res;\n    if(string.length()==0) return\
    \ res;\n    \n    // Return longest prefix of input string\n    for(int i=0; i<string.length();\
    \ ++i) {\n        std::string prefix = string[0:i];\n        res.push_back(prefix);\n\
    \        \n        // Find prefix of next character and go back one character\n\
    \        int j = i;\n        while(j>0 && string[j]!='\\0') {\n            --j;\n\
    \        }\n        \n        // Return if we reached end of string\n        if(j==0)\
    \ {\n            break;\n        }\n        \n        // Remove characters from\
    \ input string \n        string = string.substr(j+1);\n        \n        // Add\
    \ prefix to list of prefixes \n        res.push_back(prefix);\n    }\n    \n \
    \   return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0x5trlqt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0x5trlqt.cpp:10:38: error: expected\
    \ \u2018]\u2019 before \u2018:\u2019 token\n   10 |         std::string prefix\
    \ = string[0:i];\n      |                                      ^\n      |    \
    \                                  ]\n/tmp/tmp0x5trlqt.cpp:10:38: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    // base case: empty string\n\
    \    if (string.size() == 0)\n        return prefixes;\n    // recursive case:\
    \ search the whole string\n    int len = 1;\n    int curr = 0; // current index\n\
    \    while (curr <= string.length()) {\n        // search from current index\n\
    \        while (curr < string.length() && string.at(curr) != string.at(len - 1))\n\
    \            curr++;\n        // search from previous index\n        while (string.at(curr)\
    \ == string.at(len - 1))\n            curr++;\n        // add prefix into result\
    \ prefixes\n        prefixes.emplace_back(string.substr(0, curr));\n        //\
    \ decrease the index by 1\n        len++;\n    }\n    return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 6) >= this->size() (which is 6)\n"
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  int len = string.length();\n\
    \  for (int i = 0; i < len; i++)\n    prefixes.push_back(string(i, ' '));\n  prefixes.push_back(string(len,\
    \ ' '));\n  while (prefixes.size() > 1)\n    prefixes.erase(prefixes.begin());\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7at3hzh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpv7at3hzh.cpp:8:37: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ char)\u2019\n    8 |     prefixes.push_back(string(i, ' '));\n      |      \
    \                               ^\n/tmp/tmpv7at3hzh.cpp:9:37: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ char)\u2019\n    9 |   prefixes.push_back(string(len, ' '));\n      |      \
    \                               ^\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n\n    for (size_t i = 0;\
    \ i < string.length(); ++i) {\n        // If current character is the last one\
    \ in the string, we add an empty prefix\n        if (i == string.length() - 1)\
    \ {\n            prefixes.emplace_back(std::to_string(i) + string[i]);\n     \
    \   }\n        // If current character is not the last one, we add the prefix\
    \ of the current character to the prefixes list\n        else {\n            prefixes.emplace_back(std::to_string(i)\
    \ + string[i] + string[i + 1]);\n        }\n    }\n\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmptfcaqp8q: /tmp/tmptfcaqp8q.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  // Recursively add all prefixes\
    \ of a given string\n  auto add_prefix = \n      [&prefixes, &string](int idx)\
    \ { \n        if (idx == 0)\n          prefixes.push_back(string);\n        else\
    \ {\n          bool is_last_character = idx == string.size()-1;\n          add_prefix(idx-1);\n\
    \          prefixes.push_back(prefixes[idx-1] + string[idx]);\n          if (is_last_character)\n\
    \            prefixes.push_back(string);\n        }\n      };\n\n  add_prefix(0);\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9_fewoi.cpp: In lambda function:\n/tmp/tmpz9_fewoi.cpp:13:11:\
    \ error: use of \u2018add_prefix\u2019 before deduction of \u2018auto\u2019\n\
    \   13 |           add_prefix(idx-1);\n      |           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    auto it = std::begin(string);\n    std::vector<std::string> prefixes;\n\
    \n    while (it != std::end(string) && it != std::begin(string)) {\n        it\
    \ = std::find(it + std::distance<char>(string, it), std::end(string), *it);\n\
    \        std::string prefix = std::string{it, std::begin(string)};\n        it\
    \ = std::find(it, std::end(string), *it);\n        std::string suffix = std::string{std::end(string),\
    \ it};\n\n        prefixes.push_back(prefix);\n        prefixes.push_back(suffix);\n\
    \    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg2syadbd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpg2syadbd.cpp:9:59: error: no matching\
    \ function for call to \u2018distance<char>(std::string&, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n    9 |         it = std::find(it\
    \ + std::distance<char>(string, it), std::end(string), *it);\n      |        \
    \                                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:66,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpg2syadbd.cpp:2:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note: candidate: \u2018template<class _InputIterator> constexpr typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator)\u2019\n  138 |     distance(_InputIterator\
    \ __first, _InputIterator __last)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ note:   template argument deduction/substitution failed:\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:\
    \ In substitution of \u2018template<class _InputIterator> constexpr typename std::iterator_traits<_Iterator>::difference_type\
    \ std::distance(_InputIterator, _InputIterator) [with _InputIterator = char]\u2019\
    :\n/tmp/tmpg2syadbd.cpp:9:59:   required from here\n/usr/include/c++/9/bits/stl_iterator_base_funcs.h:138:5:\
    \ error: no type named \u2018difference_type\u2019 in \u2018struct std::iterator_traits<char>\u2019\
    \n"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  result.push_back(string);\n\
    \  // Keep a list of previously seen prefixes. This is useful in\n  // case the\
    \ string changes between successive calls.\n  std::set<std::string> prefixes;\n\
    \  while (!prefixes.empty()) {\n    // Find the shortest prefix prefix that has\
    \ not been seen\n    // (the shortest prefix of *all* prefixes that have not been\
    \ seen yet)\n    std::string prefix = *std::min_element(prefixes.begin(), prefixes.end());\n\
    \    prefixes.erase(prefix);\n    // Add prefix to result\n    result.push_back(prefix);\n\
    \    // For each of the rest of string after prefix, add to prefix set\n    //\
    \ If the prefix has not been seen before, add it to the set.\n    auto it_prefix\
    \ = prefixes.find(prefix);\n    if (it_prefix != prefixes.end()) {\n      for\
    \ (auto it=string.cbegin(); it!=string.cend(); ++it)\n        if (prefixes.find(*it)\
    \ == prefixes.end())\n          prefixes.insert(*it);\n    }\n  }\n  // return\
    \ result\n  return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0sx3h52.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpk0sx3h52.cpp:22:30: error: no matching\
    \ function for call to \u2018std::set<std::__cxx11::basic_string<char> >::find(const\
    \ char&)\u2019\n   22 |         if (prefixes.find(*it) == prefixes.end())\n  \
    \    |                              ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpk0sx3h52.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:794:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::iterator std::set<_Key,\
    \ _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::iterator = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  794 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_set.h:794:28:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n  794 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_set.h:798:7: note: candidate: \u2018std::set<_Key,\
    \ _Compare, _Alloc>::const_iterator std::set<_Key, _Compare, _Alloc>::find(const\
    \ key_type&) const [with _Key = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::set<_Key,\
    \ _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  798 |       find(const key_type& __x) const\n      |       ^~~~\n/usr/include/c++/9/bits/stl_set.h:798:28:\
    \ note:   no known conversion for argument 1 from "
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // create new string with same length as input\n    std::string\
    \ newString(string.length());\n    // iterate from index 0 until (shortest possible)\
    \ end of input\n    // iterate from index 1 until longest possible prefix of input\n\
    \    for (int i = 0; i < string.length() - 1; i++) {\n        // copy current\
    \ index character to end\n        newString.append(string.substr(i, 1));\n   \
    \     // iterate from 1 until (longest possible) end of newString\n        for\
    \ (int j = 1; j <= newString.length(); j++) {\n            // set newString to\
    \ empty string at first iteration\n            // append all prefixes from current\
    \ newString till end of string\n            // remove first prefix from newString\n\
    \            newString.append(newString.substr(0, j).append(string.substr(i +\
    \ 1, j - 1)));\n            // if newString is empty, exit outer loop\n      \
    \      if (newString.length() == 0) {\n                break;\n            }\n\
    \        }\n        // remove last character from newString\n        newString.erase(newString.length()\
    \ - 1);\n        // if newString is empty, exit inner loop\n        if (newString.length()\
    \ == 0) {\n            break;\n        }\n    }\n    // convert newString to a\
    \ vector of strings\n    std::vector<std::string> prefixes(newString);\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptwsc65uz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmptwsc65uz.cpp:6:42: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(std::__cxx11::basic_string<char>::size_type)\u2019\
    \n    6 |     std::string newString(string.length());\n      |               \
    \                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptwsc65uz.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmptwsc65uz.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/include/c++/9/bits/basic_string.h:121:8:\
    \   required by substitution of \u2018template"
  stdout: ''
  timestamp: 1660141362
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> res;\n    auto it = string.begin();\n\
    \    auto prev = it;\n    do {\n        res.push_back(std::string(prev, it));\n\
    \        prev = it++;\n    } while(it != string.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::string prefix = \"\";\n    std::vector<std::string> prefixes;\n\
    \    int minSize = std::min(string.length(), 5);\n    int maxSize = std::max(string.length(),\
    \ 5);\n    for (int i = 0; i < minSize && i <= maxSize; ++i) {\n        prefix\
    \ = prefix + string[i];\n        if (string.length() <= i) {\n            break;\n\
    \        }\n        prefixes.push_back(prefix);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ma7aqt8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6ma7aqt8.cpp:7:46: error: no matching\
    \ function for call to \u2018min(std::__cxx11::basic_string<char>::size_type,\
    \ int)\u2019\n    7 |     int minSize = std::min(string.length(), 5);\n      |\
    \                                              ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6ma7aqt8.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6ma7aqt8.cpp:7:46: note:  \
    \ deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long unsigned\
    \ int\u2019 and \u2018int\u2019)\n    7 |     int minSize = std::min(string.length(),\
    \ 5);\n      |                                              ^\nIn file included\
    \ from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6ma7aqt8.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6ma7aqt8.cpp:7:46:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long unsigned int\u2019 and \u2018int\u2019)\n    7 |     int minSize = std::min(string.length(),\
    \ 5);\n      |                                              ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /u"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> res;\n    if (string.empty())\n    \
    \    return res;\n    size_t shortest = 0, longest = 0;\n    for (size_t i = 0;\
    \ i < string.size(); ++i)\n        if (string[i] < 'A' || string[i] > 'Z')\n \
    \           continue;\n        if (i < shortest)\n            shortest = i;\n\
    \        if (i > longest)\n            longest = i;\n    }\n    res.resize(longest\
    \ + 1);\n    size_t index = 0;\n    for (size_t i = 0; i < string.size(); ++i)\
    \ {\n        if (string[i] < 'A' || string[i] > 'Z')\n            continue;\n\
    \        if (index >= longest)\n            continue;\n        if (string[i] ==\
    \ string[index]) {\n            res[index] = string[i];\n            index++;\n\
    \            continue;\n        }\n        while (index >= shortest && string[index]\
    \ != string[index - 1])\n            --index;\n        res[index] = string[i];\n\
    \        index++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfv2leldp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfv2leldp.cpp:12:13: error: \u2018\
    i\u2019 was not declared in this scope\n   12 |         if (i < shortest)\n  \
    \    |             ^\n/tmp/tmpfv2leldp.cpp:14:13: error: \u2018i\u2019 was not\
    \ declared in this scope\n   14 |         if (i > longest)\n      |          \
    \   ^\n/tmp/tmpfv2leldp.cpp: At global scope:\n/tmp/tmpfv2leldp.cpp:17:5: error:\
    \ \u2018res\u2019 does not name a type\n   17 |     res.resize(longest + 1);\n\
    \      |     ^~~\n/tmp/tmpfv2leldp.cpp:18:12: error: \u2018size_t index\u2019\
    \ redeclared as different kind of entity\n   18 |     size_t index = 0;\n    \
    \  |            ^~~~~\nIn file included from /usr/include/string.h:432,\n    \
    \             from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpfv2leldp.cpp:2:\n/usr/include/strings.h:50:20:\
    \ note: previous declaration \u2018const char* index(const char*, int)\u2019\n\
    \   50 | extern const char *index (const char *__s, int __c)\n      |        \
    \            ^~~~~\n/tmp/tmpfv2leldp.cpp:19:5: error: expected unqualified-id\
    \ before \u2018for\u2019\n   19 |     for (size_t i = 0; i < string.size(); ++i)\
    \ {\n      |     ^~~\n/tmp/tmpfv2leldp.cpp:19:24: error: \u2018i\u2019 does not\
    \ name a type\n   19 |     for (size_t i = 0; i < string.size(); ++i) {\n    \
    \  |                        ^\n/tmp/tmpfv2leldp.cpp:19:43: error: expected unqualified-id\
    \ before \u2018++\u2019 token\n   19 |     for (size_t i = 0; i < string.size();\
    \ ++i) {\n      |                                           ^~\n/tmp/tmpfv2leldp.cpp:34:5:\
    \ error: expected unqualified-id before \u2018return\u2019\n   34 |     return\
    \ res;\n      |     ^~~~~~\n/tmp/tmpfv2leldp.cpp:35:1: error: expected declaration\
    \ before \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmpfv2leldp.cpp: In function\
    \ \u2018std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmpfv2leldp.cpp:16:5: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   16 |     }\n      |     ^\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (std::string::size_type\
    \ i = 0; i < string.size(); i++) {\n        for (std::string::size_type j = i;\
    \ j < string.size(); j++) {\n            prefixes.push_back(string.substr(i, j));\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjhqgy5_w: /tmp/tmpjhqgy5_w.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i <= string.size();\
    \ ++i) {\n    prefixes.push_back(string);\n  }\n  for (int i = 1; i <= string.size();\
    \ ++i) {\n    for (int j = i; j <= string.size(); ++j) {\n      prefixes[j] =\
    \ prefixes[j - 1] + string[j - 1];\n    }\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp3e0dhev: /tmp/tmpp3e0dhev.cpp:18: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (int i = 0; i < string.length(); i++) {\n        if (string[i]\
    \ == string[0]) {\n            // Just add the prefix of the string to the list,\
    \ without adding the current letter\n            prefixes.push_back(prefix);\n\
    \            prefix = \"\";\n        } else {\n            prefix += string[i];\n\
    \        }\n    }\n    // Add the last prefix to the list, if it's not an empty\
    \ string\n    if (prefix != \"\")\n        prefixes.push_back(prefix);\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpuzi3t365: /tmp/tmpuzi3t365.cpp:24: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    if(string.size() == 0) \n        return std::vector<std::string>();\n\
    \    \n    std::vector<std::string> prefixes;\n    \n    // If string doesn't\
    \ start with '-', return empty list\n    if(string[0] != '-') \n        return\
    \ prefixes;\n\n    // If first character is \"-\" then ignore this prefix and\
    \ return empty list\n    if(string[1] == '-') \n        return prefixes;\n\n \
    \   // If last character is \"-\" then ignore this prefix and return empty list\n\
    \    if(string[string.size() - 1] == '-') \n        return prefixes;\n\n    //\
    \ If first character is not \"-\" and last character is not \"-\"\n    // then\
    \ get all possible prefixes based on remaining characters\n    int i = 1;\n  \
    \  while(i < string.size()) {\n        // If current character is \"-\" add this\
    \ prefix to list\n        if(string[i] == '-')\n            prefixes.push_back(string);\n\
    \        else {\n            // If current character is not \"-\"\n          \
    \  // then add all possible prefixes based on remaining characters\n         \
    \   // If current character is \"-\"\n            // then add \"-\" character\
    \ and all possible prefixes\n            while(i < string.size()) {\n        \
    \        prefixes.push_back(string + '-' + string[i]);\n                i++;\n\
    \            }\n        }\n        i++;\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpemmod28n: /tmp/tmpemmod28n.cpp:46: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Find the length of the string\n    int len = string.length();\n\
    \    // Initialize an empty result string vector\n    std::vector<std::string>\
    \ results;\n    // Initialize a prefix variable\n    std::string prefix = \"\"\
    ;\n    // Loop through all indexes of the string, starting at 0\n    for (int\
    \ i = 0; i <= len; i++) {\n        // Add the prefix to the prefix variable\n\
    \        prefix = prefix + string[i];\n        // If the prefix is equal to the\
    \ current string\n        if (prefix == string) {\n            // Add the prefix\
    \ to the result vector\n            results.push_back(prefix);\n            //\
    \ Reset the prefix variable\n            prefix = \"\";\n        }\n    }\n  \
    \  // Return the result vector\n    return results;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmptv_jaz73: /tmp/tmptv_jaz73.cpp:29: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    for (size_t i = 0; i < string.size(); i++) {\n        if (i == string.size()\
    \ - 1)\n            prefixes.push_back(string[i]);\n        else\n           \
    \ prefixes.push_back(string[i] + string[i+1]);\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdmw2_z2j.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpdmw2_z2j.cpp:9:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |             prefixes.push_back(string[i]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdmw2_z2j.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Create all substrings up to the length of the input string\n\
    \  std::vector<std::string> prefixes;\n  for (size_t i = 0; i <= string.size();\
    \ i++) {\n    prefixes.push_back(std::string(string.substr(0, i)));\n  }\n  //\
    \ Iterate over all substrings and find the minimum one\n  std::string smallest\
    \ = *std::min_element(prefixes.begin(), prefixes.end());\n  // Iterate over all\
    \ substrings starting from the smallest one and check if\n  // they are equal\n\
    \  for (size_t i = 0; i <= smallest.size(); i++) {\n    if (prefixes[i] == smallest)\
    \ {\n      // If so, remove them from prefixes and add them to the result list\n\
    \      prefixes.erase(std::remove(prefixes.begin(), prefixes.end(), smallest),\n\
    \                     prefixes.end());\n      for (size_t j = 0; j <= smallest.size();\
    \ j++) {\n        prefixes.push_back(smallest.substr(0, j));\n      }\n    }\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpvp9m6qv6: /tmp/tmpvp9m6qv6.cpp:28: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> results;\n  result.reserve(string.length());\n\
    \  for (int i = 0; i < string.length(); ++i) {\n    for (int j = i; j < string.length();\
    \ ++j) {\n      std::string prefix = string.substr(i, j - i);\n      if (!prefix.empty())\
    \ {\n        results.push_back(prefix);\n      }\n    }\n  }\n  return results;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tj7cyav.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2tj7cyav.cpp:6:3: error: \u2018\
    result\u2019 was not declared in this scope; did you mean \u2018results\u2019\
    ?\n    6 |   result.reserve(string.length());\n      |   ^~~~~~\n      |   results\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    if (string.length() ==\
    \ 0) {\n        return prefixes;\n    }\n    // Find prefix\n    int prefix_pos\
    \ = 0;\n    while (string[prefix_pos] == string[0]) {\n        prefix_pos++;\n\
    \    }\n    if (prefix_pos == string.length()) {\n        prefixes.push_back(string);\n\
    \        return prefixes;\n    }\n    std::string prefix = string.substr(0, prefix_pos);\n\
    \    prefixes.push_back(prefix);\n    // Find next prefix\n    for (int i = prefix_pos;\
    \ i < string.length(); i++) {\n        int char_pos = 0;\n        while (char_pos\
    \ + 1 < string.length()\n                    && string[char_pos + 1] == string[i])\
    \ {\n            char_pos++;\n        }\n        std::string next_prefix = string.substr(prefix_pos,\
    \ char_pos);\n        prefixes.push_back(next_prefix);\n        prefix_pos = char_pos\
    \ + 1;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmplp8ak_dv: /tmp/tmplp8ak_dv.cpp:36: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  std::stack<std::string> st;\n\
    \  st.push(string);\n  while (!st.empty()) {\n    std::string prefix = st.top();\n\
    \    st.pop();\n    for (int i = 0; i < prefix.length(); i++) {\n      char c\
    \ = prefix.at(i);\n      bool match = false;\n      for (int j = 0; j < prefix.length();\
    \ j++) {\n        if (prefix.at(j) != string.at(i - j + 1) && prefix.at(j) ==\
    \ c) {\n          match = true;\n          break;\n        }\n      }\n      if\
    \ (!match) {\n        prefixes.push_back(prefix);\n      }\n    }\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 6)\n"
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    // Base case is empty string\n\
    \    if (string.size() == 0) return result;\n\n    // Create vector of characters\n\
    \    std::vector<char> characters(string.begin(), string.end());\n\n    // Scan\
    \ vector, increment prefix length until there are no more characters\n    size_t\
    \ prefix_length = 1;\n    while (characters.size() > prefix_length) {\n      \
    \  // Loop through each character in the vector\n        for (size_t i = 0; i\
    \ < characters.size(); i++) {\n            // If we are at the end of the vector,\
    \ increment the length\n            if (i == characters.size() - 1) prefix_length++;\n\
    \n            // If the character we are checking is the same as the current character\n\
    \            // then increment the prefix length by one\n            else if (characters[i]\
    \ == characters[i + 1]) prefix_length++;\n        }\n        // Add a new string\
    \ to the result vector\n        result.push_back(std::to_string(prefix_length));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpet4rl00o: /tmp/tmpet4rl00o.cpp:32: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  std::vector<std::string>\
    \ temp_prefixes;\n  prefixes.push_back(string);\n\n  for (int i = 1; i < string.size();\
    \ i++) {\n    std::string pre = string.substr(0, i);\n    temp_prefixes.push_back(pre);\n\
    \  }\n\n  while (temp_prefixes.size() > 0) {\n    for (int i = 0; i < temp_prefixes.size();\
    \ i++) {\n      if (prefixes.count(temp_prefixes[i]) == 0) {\n        prefixes.push_back(temp_prefixes[i]);\n\
    \      }\n    }\n    for (int i = 0; i < temp_prefixes.size(); i++) {\n      temp_prefixes.erase(temp_prefixes.begin()\
    \ + i);\n    }\n  }\n\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22n7_9s1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp22n7_9s1.cpp:16:20: error: \u2018\
    class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member named\
    \ \u2018count\u2019\n   16 |       if (prefixes.count(temp_prefixes[i]) == 0)\
    \ {\n      |                    ^~~~~\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    size_t start_idx = 0;\n    while (start_idx < string.length()) {\n\
    \        // Iterate through substrings of length 2\n        while (start_idx <\
    \ string.length() && string.length() >= 2) {\n            // Keep building prefix\
    \ until you find a 2 letter prefix\n            prefix += string[start_idx];\n\
    \            start_idx++;\n        }\n        // Add prefix to list of prefixes\n\
    \        prefixes.push_back(prefix);\n        // Reset prefix to empty string\n\
    \        prefix = \"\";\n        start_idx = 0;\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int len = string.length();\n    // We will store all the substrings\
    \ we have found\n    std::vector<std::string> prefixes;\n    // We will add empty\
    \ string as prefix for each substring\n    for (int i = 0; i <= len; ++i) {\n\
    \        // We will add empty string as prefix for each substring\n        prefixes.push_back(string);\n\
    \        // We will search for next substring\n        for (int j = len; j <=\
    \ i; ++j) {\n            // We will search for next substring starting from the\
    \ end of previous substring\n            if (string[j] == string[i]) {\n     \
    \           prefixes.push_back(string.substr(j, 1));\n            }\n        }\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmph7jkbbsx: /tmp/tmph7jkbbsx.cpp:24: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    auto length = string.length();\n    std::vector<std::string>\
    \ prefixes(length);\n    for (size_t i = 0; i < length; ++i) {\n        prefixes[i]\
    \ = string(i, string[i]);\n    }\n    prefixes.push_back(\"\");\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaa5mzfv4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpaa5mzfv4.cpp:8:42: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \    8 |         prefixes[i] = string(i, string[i]);\n      |                \
    \                          ^\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::list<std::string> result;\n    auto current = \"\";\n  \
    \  while (!current.empty()) {\n        result.push_back(current);\n        current\
    \ = string.substr(0, current.length());\n    }\n    result.push_back(string);\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2a8ntsth.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2a8ntsth.cpp:7:21: error: request\
    \ for member \u2018empty\u2019 in \u2018current\u2019, which is of non-class type\
    \ \u2018const char*\u2019\n    7 |     while (!current.empty()) {\n      |   \
    \                  ^~~~~\n/tmp/tmp2a8ntsth.cpp:9:44: error: request for member\
    \ \u2018length\u2019 in \u2018current\u2019, which is of non-class type \u2018\
    const char*\u2019\n    9 |         current = string.substr(0, current.length());\n\
    \      |                                            ^~~~~~\n/tmp/tmp2a8ntsth.cpp:12:12:\
    \ error: could not convert \u2018result\u2019 from \u2018std::__cxx11::list<std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n   12\
    \ |     return result;\n      |            ^~~~~~\n      |            |\n    \
    \  |            std::__cxx11::list<std::__cxx11::basic_string<char> >\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    std::vector<char> chars(string);\n\
    \    for (auto &i: chars) {\n        result.push_back(i);\n    }\n    sort(result.begin(),\
    \ result.end());\n    result.erase(std::unique(result.begin(), result.end()),\
    \ result.end());\n    for (auto &i: result) {\n        i.push_back(0);\n    }\n\
    \    std::reverse(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb9y0hw5d.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpb9y0hw5d.cpp:6:35: error: no matching\
    \ function for call to \u2018std::vector<char>::vector(std::string&)\u2019\n \
    \   6 |     std::vector<char> chars(string);\n      |                        \
    \           ^\nIn file included from /usr/include/c++/9/vector:67,\n         \
    \        from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpb9y0hw5d.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpb9y0hw5d.cpp:6:35:\
    \ note:   candidate expects 3 arguments, 1 provided\n    6 |     std::vector<char>\
    \ chars(string);\n      |                                   ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb9y0hw5d.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = char; _Alloc = std::allocator<char>; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<char>]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:622:43: note:\
    \   no known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    if (string.length() == 0) return {};\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(string);\n    for (int i = 1; i < string.length();\
    \ i++) {\n        for (const auto &prefix : all_prefixes(string.substr(0, i)))\
    \ {\n            prefixes.push_back(prefix + string.substr(0, i));\n        }\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp50kn5zez: /tmp/tmp50kn5zez.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> output;\n    int len = string.length();\n\
    \    for (int i=0; i<len; ++i) {\n        for (int j=i; j<len; ++j) {\n      \
    \      if (string[j] == string[i]) {\n                break;\n            } else\
    \ {\n                output.push_back(string);\n                break;\n     \
    \       }\n        }\n    }\n    return output;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpv2kwr5sv: /tmp/tmpv2kwr5sv.cpp:22: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefix;\n  int n = string.length();\n\
    \  if (n == 0) return prefix;\n  for (int i = n; i > 0; --i) {\n    prefix.push_back(string[i\
    \ - 1]);\n  }\n  return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpouhysukx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpouhysukx.cpp:9:35: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |     prefix.push_back(string[i - 1]);\n  \
    \    |                                   ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpouhysukx.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  \n    // Preprocess the string so all characters have a lower case\
    \ version.\n    auto lower = [](char c) {\n        return std::tolower(c);\n \
    \   };\n    \n    // Create a set of lower case versions of the characters in\
    \ the string.\n    std::unordered_set<std::string> charSet(string.begin(), string.end(),\
    \ lower);\n    \n    std::vector<std::string> res;\n    std::string prefix;\n\
    \    \n    // If there are no characters left, then the prefix is empty (\"\"\
    ).\n    if (string.size() == 0) {\n        res.push_back(prefix);\n    }\n   \
    \ \n    // Otherwise, start with a prefix of \"\", and remove the first character\n\
    \    // from the set.\n    else {\n        prefix = \"\";\n        res.push_back(prefix);\n\
    \        charSet.erase(\"\");\n    }\n    \n    // Iterate through the remaining\
    \ characters and add them to the prefix.\n    for (auto& c: charSet) {\n     \
    \   prefix += c;\n        res.push_back(prefix);\n        charSet.erase(prefix);\n\
    \    }\n    \n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnuvg33v7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnuvg33v7.cpp:12:80: error: no matching\
    \ function for call to \u2018std::unordered_set<std::__cxx11::basic_string<char>\
    \ >::unordered_set(std::__cxx11::basic_string<char>::iterator, std::__cxx11::basic_string<char>::iterator,\
    \ all_prefixes(std::string)::<lambda(char)>&)\u2019\n   12 |     std::unordered_set<std::string>\
    \ charSet(string.begin(), string.end(), lower);\n      |                     \
    \                                                           ^\nIn file included\
    \ from /usr/include/c++/9/unordered_set:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmpnuvg33v7.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:258:7:\
    \ note: candidate: \u2018std::unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(std::initializer_list<typename\
    \ std::_Hashtable<_Value, _Value, _Alloc, std::__detail::_Identity, _Pred, _Hash,\
    \ std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy,\
    \ std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>,\
    \ std::__is_nothrow_invocable<const _Hash&, const _Tp&> > >::value, true, true>\
    \ >::value_type>, std::unordered_set<_Value, _Hash, _Pred, _Alloc>::size_type,\
    \ const hasher&, const allocator_type&) [with _Value = std::__cxx11::basic_string<char>;\
    \ _Hash = std::hash<std::__cxx11::basic_string<char> >; _Pred = std::equal_to<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; typename std::_Hashtable<_Value,\
    \ _Value, _Alloc, std::__detail::_Identity, _Pred, _Hash, std::__detail::_Mod_range_hashing,\
    \ std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>,\
    \ std::__is_nothrow_invocable<const _Hash&, const _Tp&> > >::value, true, true>\
    \ >::value_type = std::__cxx11::basic_string<char>; std::unordered_set<_Value,\
    \ _Hash, _Pr"
  stdout: ''
  timestamp: 1660141362
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (auto it1 = string.cbegin(); it1 != string.cend(); it1++) {\n    for (auto\
    \ it2 = string.cbegin(); it2 != string.cend(); it2++) {\n      for (auto it3 =\
    \ string.cbegin(); it3 != string.cend(); it3++) {\n        for (auto it4 = string.cbegin();\
    \ it4 != string.cend(); it4++) {\n          for (auto it5 = string.cbegin(); it5\
    \ != string.cend(); it5++) {\n            prefixes.push_back(string(it1, it5));\n\
    \          }\n        }\n      }\n    }\n  }\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw55e7dm6.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpw55e7dm6.cpp:12:47: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >&, __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >&)\u2019\n   12 |             prefixes.push_back(string(it1,\
    \ it5));\n      |                                               ^\n"
  stdout: ''
  timestamp: 1660141362
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> res;\n  int len = string.length();\n \
    \ std::string prefix = \"\";\n  for (int i = 0; i < len; ++i) {\n    prefix +=\
    \ string[i];\n    res.push_back(prefix);\n    prefix = \"\";\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpak8u5wkm: /tmp/tmpak8u5wkm.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141363
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  assert(string.length() > 2);\n  std::vector<std::string> results;\n\
    \  results.push_back(string);\n  for (size_t i = 1; i <= string.length(); ++i)\
    \ {\n    auto prefix = string[0] + std::to_string(i);\n    results.push_back(prefix);\n\
    \  }\n  return results;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpivd32dq5: /tmp/tmpivd32dq5.cpp:5: std::vector<std::__cxx11::basic_string<char>
    > all_prefixes(std::string): Assertion `string.length() > 2'' failed.

    '
  stdout: ''
  timestamp: 1660141364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<char> prefixes;\n    for (auto c: string)\n     \
    \   if (c == '_') continue;\n        for (auto i = 0; i <= (int)string.size();\
    \ ++i)\n            prefixes.push_back(string[i]);\n    prefixes.pop_back();\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tj402z4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0tj402z4.cpp:11:12: error: could\
    \ not convert \u2018prefixes\u2019 from \u2018vector<char>\u2019 to \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \n   11 |     return prefixes;\n      |            ^~~~~~~~\n      |         \
    \   |\n      |            vector<char>\n"
  stdout: ''
  timestamp: 1660141364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    auto it = string.begin();\n\
    \    // iterate over prefix of string\n    while (it != string.end()) {\n    \
    \    // set prefix as string\n        std::string prefix(it);\n        // add\
    \ prefix to result\n        result.push_back(prefix);\n        // iterate over\
    \ rest of string\n        it = find_if(string.begin(), string.end(), [](char ch)\
    \ {\n            return ch != *it;\n        });\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o8mg4bu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp4o8mg4bu.cpp:10:30: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   10 |         std::string prefix(it);\n\
    \      |                              ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4o8mg4bu.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp4o8mg4bu.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/include/c++/9/bits/basic_string.h:121:8:\
    \   required by substitution of \u2018tem"
  stdout: ''
  timestamp: 1660141364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::sort(std::begin(string), std::end(string));\n    std::vector<std::string>\
    \ result;\n    int start = 0;\n    while (start < string.size()) {\n        result.push_back(string);\n\
    \        start += 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkum9bjh8: /tmp/tmpkum9bjh8.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n\n    for (std::string::size_type\
    \ i = 1; i < string.size(); ++i) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpaubb_bgp: /tmp/tmpaubb_bgp.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  for (auto i = 1; i < string.size();\
    \ ++i)\n    result.push_back(string.substr(0, i));\n  return result;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpxpm8h8w1: /tmp/tmpxpm8h8w1.cpp:13: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n\n    for (auto i = string.begin();\
    \ i != string.end(); ++i)\n    {\n        prefixes.push_back(string);\n      \
    \  std::string rev_i = string.rbegin();\n        for (auto j = rev_i.begin();\
    \ j != rev_i.end(); ++j)\n        {\n            prefixes.push_back(string);\n\
    \            string rev_j = string.rbegin();\n            for (auto k = rev_j.begin();\
    \ k != rev_j.end(); ++k)\n            {\n                prefixes.push_back(string);\n\
    \                string rev_k = string.rbegin();\n                for (auto l\
    \ = rev_k.begin(); l != rev_k.end(); ++l)\n                {\n               \
    \     prefixes.push_back(string);\n                    string rev_l = string.rbegin();\n\
    \                    for (auto m = rev_l.begin(); m != rev_l.end(); ++m)\n   \
    \                 {\n                        prefixes.push_back(string);\n   \
    \                     string rev_m = string.rbegin();\n                      \
    \  for (auto n = rev_m.begin(); n != rev_m.end(); ++n)\n                     \
    \   {\n                            prefixes.push_back(string);\n             \
    \               string rev_n = string.rbegin();\n                            for\
    \ (auto o = rev_n.begin(); o != rev_n.end(); ++o)\n                          \
    \  {\n                                prefixes.push_back(string);\n          \
    \                      string rev_o = string.rbegin();\n                     \
    \           for (auto p = rev_o.begin(); p != rev_o.end(); ++p)\n            \
    \                    {\n                                    prefixes.push_back(string);\n\
    \                                }\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8m1hz3tz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8m1hz3tz.cpp:10:42: error: conversion\
    \ from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019 {aka \u2018\
    std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   10 |         std::string rev_i = string.rbegin();\n      |   \
    \                          ~~~~~~~~~~~~~^~\n/tmp/tmp8m1hz3tz.cpp:14:19: error:\
    \ expected \u2018;\u2019 before \u2018rev_j\u2019\n   14 |             string\
    \ rev_j = string.rbegin();\n      |                   ^~~~~~\n      |        \
    \           ;\n/tmp/tmp8m1hz3tz.cpp:15:27: error: \u2018rev_j\u2019 was not declared\
    \ in this scope; did you mean \u2018rev_i\u2019?\n   15 |             for (auto\
    \ k = rev_j.begin(); k != rev_j.end(); ++k)\n      |                         \
    \  ^~~~~\n      |                           rev_i\n/tmp/tmp8m1hz3tz.cpp:18:23:\
    \ error: expected \u2018;\u2019 before \u2018rev_k\u2019\n   18 |            \
    \     string rev_k = string.rbegin();\n      |                       ^~~~~~\n\
    \      |                       ;\n/tmp/tmp8m1hz3tz.cpp:19:31: error: \u2018rev_k\u2019\
    \ was not declared in this scope; did you mean \u2018rev_i\u2019?\n   19 |   \
    \              for (auto l = rev_k.begin(); l != rev_k.end(); ++l)\n      |  \
    \                             ^~~~~\n      |                               rev_i\n\
    /tmp/tmp8m1hz3tz.cpp:22:27: error: expected \u2018;\u2019 before \u2018rev_l\u2019\
    \n   22 |                     string rev_l = string.rbegin();\n      |       \
    \                    ^~~~~~\n      |                           ;\n/tmp/tmp8m1hz3tz.cpp:23:35:\
    \ error: \u2018rev_l\u2019 was not declared in this scope; did you mean \u2018\
    rev_i\u2019?\n   23 |                     for (auto m = rev_l.begin(); m != rev_l.end();\
    \ ++m)\n      |                                   ^~~~~\n      |             \
    \                      rev_i\n/tmp/tmp8m1hz3tz.cpp:26:31: error: expected \u2018\
    ;\u2019 before \u2018rev_m\u2019\n   26 |                         string rev_m\
    \ = string.rb"
  stdout: ''
  timestamp: 1660141364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i < string.size();\
    \ i++)\n    prefixes.push_back(std::to_string(i) + string[i]);\n  prefixes.push_back(string);\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpf81bjj2m: /tmp/tmpf81bjj2m.cpp:13: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  result.reserve(string.size());\n\
    \  for (int i = 0; i < string.size(); i++) {\n    result.push_back(string);\n\
    \    for (int j = i + 1; j < string.size(); j++) {\n      result.push_back(string(i,\
    \ j) + string[j]);\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk85hslw8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpk85hslw8.cpp:10:35: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ int&)\u2019\n   10 |       result.push_back(string(i, j) + string[j]);\n   \
    \   |                                   ^\n"
  stdout: ''
  timestamp: 1660141364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n\tstd::vector<std::string> prefix;\n\t\n\tfor (int i=1; i<string.length();\
    \ i++) {\n\t\tprefix.push_back(string);\n\t\tprefix.back()[i-1] = string[i-1];\n\
    \t}\n\n\treturn prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmptobiyvkj: /tmp/tmptobiyvkj.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n\n  // Initialize prefix to\
    \ empty string\n  std::string prefix;\n\n  // Initialize prefix counter to 0 and\
    \ remove last character from string\n  int prefix_count = 1;\n  string last_char\
    \ = string.substr(0, string.size() - 1);\n\n  // Initialize current character\
    \ to last character of string\n  string current_char = last_char;\n\n  // Initialize\
    \ longest prefix counter to 0\n  int longest_prefix_count = 0;\n\n  // While prefix\
    \ count is less than or equal to length of string\n  while ((int)prefix_count\
    \ < (int)string.size()) {\n\n    // If current character is last character of\
    \ string\n    if (current_char == last_char) {\n\n      // Add current prefix\
    \ to prefixes vector and decrement prefix counter\n      prefixes.push_back(prefix);\n\
    \      prefix_count--;\n\n    } else {\n\n      // If current character is not\
    \ last character of string\n      // Append prefix to prefix and increment prefix\
    \ counter\n      prefix = prefix + current_char;\n      prefix_count++;\n\n  \
    \  }\n\n    // Reinitialize prefix to empty string and increment longest prefix\
    \ counter\n    prefix = '';\n    longest_prefix_count++;\n\n    // Append last\
    \ character of string to current character\n    current_char = string.substr(string.size()\
    \ - 1);\n\n  }\n\n  // If the longest prefix counter is greater than zero then\
    \ add prefix to prefixes vector\n  if (longest_prefix_count > 0) {\n    prefixes.push_back(prefix);\n\
    \  }\n\n  // Return the prefixes vector\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3fodm1js.cpp:40:14: error: empty character constant\n   40 |  \
    \   prefix = '';\n      |              ^~\n/tmp/tmp3fodm1js.cpp: In function \u2018\
    std::vector<std::__cxx11::basic_string<char> > all_prefixes(std::string)\u2019\
    :\n/tmp/tmp3fodm1js.cpp:12:9: error: expected \u2018;\u2019 before \u2018last_char\u2019\
    \n   12 |   string last_char = string.substr(0, string.size() - 1);\n      | \
    \        ^~~~~~~~~~\n      |         ;\n/tmp/tmp3fodm1js.cpp:15:9: error: expected\
    \ \u2018;\u2019 before \u2018current_char\u2019\n   15 |   string current_char\
    \ = last_char;\n      |         ^~~~~~~~~~~~~\n      |         ;\n/tmp/tmp3fodm1js.cpp:24:9:\
    \ error: \u2018current_char\u2019 was not declared in this scope\n   24 |    \
    \ if (current_char == last_char) {\n      |         ^~~~~~~~~~~~\n/tmp/tmp3fodm1js.cpp:24:25:\
    \ error: \u2018last_char\u2019 was not declared in this scope\n   24 |     if\
    \ (current_char == last_char) {\n      |                         ^~~~~~~~~\n/tmp/tmp3fodm1js.cpp:44:5:\
    \ error: \u2018current_char\u2019 was not declared in this scope\n   44 |    \
    \ current_char = string.substr(string.size() - 1);\n      |     ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (auto &c : string)\n\
    \        prefixes.push_back(string(&c, 1));\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0xwhthz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpp0xwhthz.cpp:7:40: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (char*,\
    \ int)\u2019\n    7 |         prefixes.push_back(string(&c, 1));\n      |    \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660141364
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefix_list;\n  for (int i = 1; i < string.size();\
    \ i++) {\n    prefix_list.push_back(string);\n    for (int j = i; j < string.size();\
    \ j++) {\n      prefix_list[j] += string[j];\n    }\n  }\n  return prefix_list;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  std::string prefix = string;\n\
    \  while (!prefix.empty()) {\n    result.push_back(prefix);\n    prefix = prefix.substr(0,\
    \ prefix.size() - 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp636wuqdf: /tmp/tmp636wuqdf.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Initialize all prefixes to empty string\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(string);\n    // Find length of longest prefix\
    \ string\n    int max_len = -1;\n    for (size_t i = 0; i < string.size(); i++)\
    \ {\n        max_len = max(max_len, string[i].size());\n    }\n    // Run through\
    \ all prefixes and append them to the results set\n    for (int i = 1; i < max_len;\
    \ i++) {\n        for (int j = i; j < string.size(); j++) {\n            auto\
    \ prefix_str = string.substr(0, j);\n            if (prefix_str == string) {\n\
    \                break;\n            }\n            prefixes.push_back(prefix_str);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_ghqbvv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2_ghqbvv.cpp:11:42: error: request\
    \ for member \u2018size\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](i)\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   11 |         max_len = max(max_len,\
    \ string[i].size());\n      |                                          ^~~~\n\
    /tmp/tmp2_ghqbvv.cpp:11:19: error: \u2018max\u2019 was not declared in this scope;\
    \ did you mean \u2018std::max\u2019?\n   11 |         max_len = max(max_len, string[i].size());\n\
    \      |                   ^~~\n      |                   std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2_ghqbvv.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660141364
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    \n    for(int i = 0;\
    \ i<string.length(); i++) {\n        // For every character of the string, check\
    \ if it's prefix or suffix of prefixes list\n        if(string[0] == string[i])\
    \ {\n            // If it's prefix of any of the lists already then add it to\
    \ the list\n            for(int j = 0; j<prefixes.size(); j++) {\n           \
    \     if(string[0] == prefixes[j].substr(0, string.length())) {\n            \
    \        prefixes.push_back(prefixes[j]);\n                    prefixes.push_back(string);\n\
    \                    break;\n                }\n            }\n        } else\
    \ {\n            // If it's suffix of any of the lists already then add it to\
    \ the list\n            for(int j = 0; j<prefixes.size(); j++) {\n           \
    \     if(string[string.length()-1] == prefixes[j].substr(0, string.length()))\
    \ {\n                    prefixes.push_back(prefixes[j]);\n                  \
    \  prefixes.push_back(string);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    \n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpic2yjvjq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpic2yjvjq.cpp:12:30: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   12 |                 if(string[0] == prefixes[j].substr(0, string.length()))\
    \ {\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmpic2yjvjq.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5: note: candidate:\
    \ \u2018template<class _BiIter> bool std::__cxx11::operator==(const std::__cxx11::sub_match<_BiIter>&,\
    \ const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1026 |     operator==(const\
    \ sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1026:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpic2yjvjq.cpp:12:70: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   12 |                 if(string[0] == prefixes[j].substr(0,\
    \ string.length())) {\n      |                                               \
    \                       ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpic2yjvjq.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpic2yjvjq.cpp:12:70: note:   mismatched types \u2018std:"
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n\n    size_t prefix_size\
    \ = string.size();\n    size_t start = 0, end = prefix_size;\n    while (start\
    \ < prefix_size) {\n        end += string.size();\n        while (start < prefix_size)\
    \ {\n            bool found = string.compare(start, prefix_size, end, prefix_size,\
    \ end) == 0;\n            if (found) {\n                prefixes.push_back(string);\n\
    \                break;\n            }\n            start++;\n        }\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8dbz2ty.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpo8dbz2ty.cpp:12:82: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::compare(size_t&,\
    \ size_t&, size_t&, size_t&, size_t&)\u2019\n   12 |             bool found =\
    \ string.compare(start, prefix_size, end, prefix_size, end) == 0;\n      |   \
    \                                                                            \
    \   ^\nIn file included from /usr/include/c++/9/string:55,\n                 from\
    \ /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo8dbz2ty.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2857:7: note:\
    \ candidate: \u2018int std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::compare(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) const [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2857\
    \ |       compare(const basic_string& __str) const\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2857:7:\
    \ note:   candidate expects 1 argument, 5 provided\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note: candidate: \u2018template<class _Tp> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::_If_sv<_Tp, int> std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::compare(const _Tp&) const [with _Tp = _Tp; _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\n 2877 |  compare(const\
    \ _Tp& __svt) const\n      |  ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2877:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo8dbz2ty.cpp:12:82:\
    \ note:   candidate expects 1 argumen"
  stdout: ''
  timestamp: 1660141364
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    if (string.substr(0, i).size()\
    \ == i) {\n      prefixes.push_back(string);\n      prefixes.push_back(string);\n\
    \      prefixes.push_back(string);\n      prefixes.push_back(string);\n    } else\
    \ {\n      prefixes.push_back(string);\n      prefixes.push_back(string);\n  \
    \    prefixes.push_back(string);\n      prefixes.push_back(string);\n      prefixes.push_back(string);\n\
    \      prefixes.push_back(string);\n      prefixes.push_back(string);\n    }\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9mtny9k8: /tmp/tmp9mtny9k8.cpp:28: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    \n    // Loop through\
    \ string characters and add prefixes\n    for (int i = 1; i < string.length();\
    \ i++) {\n        prefixes.push_back(string);\n        int j = i;\n        while\
    \ (j > 0 && (string[j-1] == string[j])) {\n            prefixes.back() += string[j-1];\n\
    \            j = j - 1;\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpwykayrs9: /tmp/tmpwykayrs9.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> output;\n    output.reserve(string.size());\n\
    \    size_t pos = 0;\n    size_t start = 0;\n    while (pos < string.size()) {\n\
    \        size_t next = string.find_first_of(string[pos], pos);\n        output.push_back(string[start]\
    \ + string[pos]);\n        pos = next + 1;\n        start = pos;\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgec6x1bf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpgec6x1bf.cpp:11:53: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n   11 |         output.push_back(string[start] + string[pos]);\n      |    \
    \                                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgec6x1bf.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n    "
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i\
    \ < string.size(); ++i)\n        prefixes.push_back(string(i, string[i]));\n \
    \   for (size_t i = string.size() - 1; i >= 0; --i)\n        prefixes.push_back(string(i,\
    \ string[i]));\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ak4759y.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0ak4759y.cpp:7:47: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \    7 |         prefixes.push_back(string(i, string[i]));\n      |          \
    \                                     ^\n/tmp/tmp0ak4759y.cpp:9:47: error: no\
    \ match for call to \u2018(std::string {aka std::__cxx11::basic_string<char>})\
    \ (size_t&, __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n    9 |         prefixes.push_back(string(i, string[i]));\n      |         \
    \                                      ^\n"
  stdout: ''
  timestamp: 1660141365
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n\n    for (unsigned int i =\
    \ 0; i < string.size(); ++i) {\n        std::string new_string = string;\n   \
    \     new_string.push_back(string[i]);\n\n        auto prefix = all_prefixes(new_string);\n\
    \        for (const auto & prefix_str : prefix)\n            result.push_back(prefix_str);\n\
    \    }\n\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefix_list;\n  auto it = std::find_if(string.begin(),\
    \ string.end(), [](char c) { return !isdigit(c); });\n  auto len = std::distance(string.begin(),\
    \ it);\n  for (int i = 0; i <= len; i++) {\n    prefix_list.push_back(std::string(string.begin(),\
    \ it));\n    it = std::find_if(it + 1, string.end(), [](char c) { return !isdigit(c);\
    \ });\n    len = std::distance(string.begin(), it);\n  }\n  return prefix_list;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpzbu_imxy: /tmp/tmpzbu_imxy.cpp:17: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string subPrefix;\n\
    \    for (int i = 0; i < string.length(); ++i) {\n        subPrefix = \"\";\n\
    \        while (i != 0) {\n            subPrefix += string.substr(0, --i);\n \
    \       }\n        if (subPrefix.length() > 0) {\n            prefixes.push_back(subPrefix);\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> strings(string.begin(), string.end());\n\
    \    std::vector<std::string> prefixes;\n    for (unsigned int i = 0; i < strings.size();\
    \ ++i) {\n        for (unsigned int j = i; j < strings.size(); ++j) {\n      \
    \      prefixes.push_back(strings.substr(i, j));\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphjz49d5y.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmphjz49d5y.cpp:9:40: error: \u2018\
    class std::vector<std::__cxx11::basic_string<char> >\u2019 has no member named\
    \ \u2018substr\u2019\n    9 |             prefixes.push_back(strings.substr(i,\
    \ j));\n      |                                        ^~~~~~\nIn file included\
    \ from /usr/include/c++/9/vector:66,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphjz49d5y.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h:\
    \ In instantiation of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-paramete"
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    auto it = string.cbegin();\n\
    \    while (it != string.cend()) {\n        auto it = string.cbegin();\n     \
    \   prefixes.push_back(*it);\n        while (it != string.cend() && *it == *it\
    \ + 1) {\n            ++it;\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fjs05lv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_fjs05lv.cpp:9:31: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(const\
    \ char&)\u2019\n    9 |         prefixes.push_back(*it);\n      |            \
    \                   ^\nIn file included from /usr/include/c++/9/vector:67,\n \
    \                from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_fjs05lv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018const char\u2019 to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::value_type&&\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~"
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    auto it = string.begin();\n\
    \    while (it != string.end() && *it == *string.rbegin()) {\n        ++it;\n\
    \    }\n    if (it == string.end() || *it != *(string.rbegin() + 1)) {\n     \
    \   result.emplace_back(string);\n    } else {\n        result.emplace_back(std::string(it,\
    \ string.end()));\n        result.emplace_back(std::string(string.rbegin(), it));\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5dkj864i.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp5dkj864i.cpp:14:60: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::basic_string(std::__cxx11::basic_string<char>::reverse_iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&)\u2019\
    \n   14 |         result.emplace_back(std::string(string.rbegin(), it));\n   \
    \   |                                                            ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5dkj864i.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2: note:\
    \ candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp5dkj864i.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool, "
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefix;\n    std::string currPrefix\
    \ = \"\";\n    int currLength = 0;\n    for (size_t i = 0; i < string.length();\
    \ i++) {\n        currPrefix = currPrefix + string.substr(i, 1);\n        currLength\
    \ = 1;\n        while(i < string.length() && string.at(i) == string.at(i + 1))\
    \ {\n            i++;\n            currLength++;\n        }\n        prefix.push_back(currPrefix);\n\
    \    }\n    return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 6) >= this->size() (which is 6)\n"
  stdout: ''
  timestamp: 1660141366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<char> input_string;\n    std::string::size_type pos\
    \ = 0;\n    std::string::size_type pos1 = 0;\n    for (std::size_t i = 0; i <\
    \ string.size(); ++i)\n        input_string.push_back(string.at(pos));\n    pos\
    \ = 0;\n    pos1 = string.size();\n    for (std::size_t i = 1; i < string.size();\
    \ ++i) {\n        std::size_t pos = 0;\n        pos = input_string.size() - i;\n\
    \        input_string.push_back(string.at(pos));\n    }\n    std::vector<std::string>\
    \ result;\n    std::list<std::size_t> index{};\n    for (std::size_t i = 0; i\
    \ < input_string.size(); ++i) {\n        result.push_back(input_string[i]);\n\
    \        index.push_back(i);\n    }\n    std::string temp;\n    for (std::list<std::size_t>::iterator\
    \ itr = index.begin(); itr != index.end(); ++itr) {\n        temp = temp + input_string[*itr];\n\
    \        std::string temp = temp + input_string[(*itr)+1];\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_b8htrn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6_b8htrn.cpp:20:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   20 |         result.push_back(input_string[i]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6_b8htrn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char"
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    int i = 0;\n    while\
    \ (i < string.size()) {\n        prefixes.emplace_back(string);\n        i +=\
    \ 1;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp50ns6_2s: /tmp/tmp50ns6_2s.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size()\
    \ - 1; ++i) {\n    prefixes.emplace_back(string.substr(0, i + 1));\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  result.reserve(string.size());\n\
    \n  for (size_t i = 0; i < string.size(); ++i) {\n    if (i == 0) {\n      result.push_back(string[i]);\n\
    \      continue;\n    }\n\n    for (size_t j = i; j < string.size(); ++j) {\n\
    \      result.push_back(string[i] + string[j]);\n    }\n  }\n\n  return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9aue3jse.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp9aue3jse.cpp:10:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   10 |       result.push_back(string[i]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9aue3jse.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019"
  stdout: ''
  timestamp: 1660141365
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    bool flag = true;\n \
    \   std::string prefix = \"\";\n    for (auto c : string) {\n        if (flag)\
    \ {\n            flag = false;\n            prefix = prefix + c;\n           \
    \ prefixes.push_back(prefix);\n        }\n        else {\n            if (c ==\
    \ '[') flag = true;\n        }\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmplbgdg19x: /tmp/tmplbgdg19x.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string current_prefix\
    \ = \"\";\n\n    for (int i = 0; i < string.length(); ++i) {\n        if (i ==\
    \ 0 || (string[i - 1] != string[i])) {\n            current_prefix += string[i];\n\
    \            prefixes.push_back(current_prefix);\n        } else {\n         \
    \   prefixes.push_back(current_prefix);\n        }\n    }\n\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpz0l5dmmm: /tmp/tmpz0l5dmmm.cpp:23: int main(): Assertion `candidate(("WWW"))
    == (std::vector<std::string>({(std::string)"W", (std::string)"WW", (std::string)"WWW"}))''
    failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = 0; i <= string.length();\
    \ i++) {\n    prefixes.push_back(std::to_string(i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp4xglcsjw: /tmp/tmp4xglcsjw.cpp:13: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0; i\
    \ < string.length(); ++i) {\n        std::string prefix = \"\";\n        for (size_t\
    \ j = 0; j < i; ++j) {\n            prefix += string[j];\n        }\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpc2a0b794: /tmp/tmpc2a0b794.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Define a vector to store all prefixes\n  std::vector<std::string>\
    \ prefixes;\n  // Define a string to store current character\n  std::string current_string\
    \ = \"\";\n  // Iterate over current character\n  for (int i = 0; i < string.length();\
    \ i++) {\n    // Append character to current string\n    current_string += string[i];\n\
    \    // Check if current string is a prefix of current string\n    if (current_string.size()\
    \ >= string.length()) {\n      // If current string is a prefix of current string\n\
    \      // append it to prefixes\n      prefixes.push_back(current_string);\n \
    \     // Clear current string for next iteration\n      current_string = \"\"\
    ;\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpp1u6bq6b: /tmp/tmpp1u6bq6b.cpp:27: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  std::string prefix = \"\"\
    ;\n  for (char ch : string) {\n    if (ch != ' ') {\n      prefix = prefix + ch;\n\
    \    }\n    else {\n      prefixes.push_back(prefix);\n      prefix = \"\";\n\
    \    }\n  }\n  prefixes.push_back(prefix);\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7gv_bd61: /tmp/tmp7gv_bd61.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  size_t len = string.length();\n\
    \  size_t prefix = 0;\n  while (len > 0) {\n    prefixes.push_back(string);\n\
    \    len--;\n    while (len > 0 && string[len - 1] == '/') {\n      len--;\n \
    \   }\n    prefix += 1;\n    string += prefix;\n  }\n  return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpiig_gbkb: /tmp/tmpiig_gbkb.cpp:22: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string shortest\
    \ = string;\n    std::string longest = \"\";\n    size_t shortest, longest;\n\
    \    while ((shortest = longest).length() < string.length()) {\n        longest\
    \ = shortest + string;\n        for (size_t i = 0; i < shortest.length(); ++i)\
    \ {\n            if (shortest[i] == longest[i]) break;\n            if (shortest[i]\
    \ == string[i]) break;\n        }\n        if (shortest.length() <= string.length())\
    \ shortest = longest;\n    }\n    for (size_t i = 0; i < shortest.length(); ++i)\
    \ {\n        if (shortest[i] == longest[i]) {\n            prefixes.push_back(shortest.substr(i,\
    \ shortest.length() - i));\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx9w6yxex.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpx9w6yxex.cpp:8:12: error: conflicting\
    \ declaration \u2018size_t shortest\u2019\n    8 |     size_t shortest, longest;\n\
    \      |            ^~~~~~~~\n/tmp/tmpx9w6yxex.cpp:6:17: note: previous declaration\
    \ as \u2018std::string shortest\u2019\n    6 |     std::string shortest = string;\n\
    \      |                 ^~~~~~~~\n/tmp/tmpx9w6yxex.cpp:8:22: error: conflicting\
    \ declaration \u2018size_t longest\u2019\n    8 |     size_t shortest, longest;\n\
    \      |                      ^~~~~~~\n/tmp/tmpx9w6yxex.cpp:7:17: note: previous\
    \ declaration as \u2018std::string longest\u2019\n    7 |     std::string longest\
    \ = \"\";\n      |                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660141366
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Initialize list of prefixes\n    std::vector<std::string>\
    \ prefixes;\n    // Loop through each character of the input string\n    for (char\
    \ c : string) {\n        // If current character is equal to longest string then\
    \ add it to list\n        if (string.length == c) {\n            prefixes.push_back(string);\n\
    \        }\n        // If current character is different from longest string then\
    \ \n        // add prefix of the current character to the list\n        else {\n\
    \            prefixes.push_back(string);\n            prefixes.push_back(string);\n\
    \        }\n    }\n    // Return the list\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6phnnyw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpc6phnnyw.cpp:10:20: error: invalid\
    \ use of member function \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::length() const [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019 (did you forget the \u2018\
    ()\u2019 ?)\n   10 |         if (string.length == c) {\n      |             ~~~~~~~^~~~~~\n\
    \      |                          ()\n"
  stdout: ''
  timestamp: 1660141365
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int i = 1;\n    std::vector<std::string> prefixes;\n    while\
    \ (i < string.size()) \n    {\n        if (string[0] == string[i])\n        {\n\
    \            prefixes.push_back(string[0]);\n            i += 1;\n        }\n\
    \        else \n        {\n            prefixes.push_back(string[i - 1]);\n  \
    \          i += 1;\n        }\n    }\n    return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt9rlx0pg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpt9rlx0pg.cpp:11:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |             prefixes.push_back(string[0]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt9rlx0pg.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char"
  stdout: ''
  timestamp: 1660141366
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> ans;\n    ans.reserve(string.length());\n\
    \    // Build up prefix array\n    int i = 0, j = 0;\n    while (i < string.length())\
    \ {\n        if (j == string.length()) ans.push_back(string);\n        if (i ==\
    \ string.length() || string[i] != string[j]) {\n            ans.push_back(string);\n\
    \            i = j;\n            j = 0;\n        } else {\n            j++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> ans;\n  string temp = string;\n  // Get\
    \ the last character\n  assert(temp[temp.length() - 1] == '$');\n  temp = temp.substr(0,\
    \ temp.length() - 1);\n  int len = temp.size();\n  // Add the string itself\n\
    \  ans.push_back(string);\n  // Add every prefix of length 1 that isn't the string\n\
    \  for (int i = 0; i < len; ++i)\n    ans.push_back(temp + temp.substr(0, i));\n\
    \  return ans;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr_5cork.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmplr_5cork.cpp:6:9: error: expected\
    \ \u2018;\u2019 before \u2018temp\u2019\n    6 |   string temp = string;\n   \
    \   |         ^~~~~\n      |         ;\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplr_5cork.cpp:2:\n/tmp/tmplr_5cork.cpp:8:10: error:\
    \ \u2018temp\u2019 was not declared in this scope\n    8 |   assert(temp[temp.length()\
    \ - 1] == '$');\n      |          ^~~~\n"
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  // Initialize result vector\
    \ with empty strings\n  for (size_t i = 0; i < string.size(); ++i) {\n    result.emplace_back(\"\
    \");\n  }\n  // If string has only one character, return it with empty prefix\
    \ string\n  if (string.size() == 1) {\n    result.emplace_back(\"\");\n    return\
    \ result;\n  }\n  // Iterate through the string from the beginning\n  for (size_t\
    \ i = 0; i < string.size(); ++i) {\n    // Find the prefix that starts from the\
    \ ith character in the string\n    size_t prefix_len = string.substr(0, i + 1).size();\n\
    \    // Copy the prefix into the result vector\n    for (size_t j = 0; j < prefix_len;\
    \ ++j) {\n      result.emplace_back(string.substr(0, j + 1));\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpuf5s17au: /tmp/tmpuf5s17au.cpp:29: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141366
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int n = string.size();\n    std::vector<std::string> res;\n \
    \   if (n == 0) return res;\n    res.push_back(string);\n    for (int i = 0; i\
    \ < n; ++i) {\n        for (const auto& prefix : all_prefixes(string.substr(0,\
    \ i))) res.push_back(prefix);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp3ljq9d4o: /tmp/tmp3ljq9d4o.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (int i = string.length();\
    \ i > 0; i--) {\n    prefixes.push_back(string);\n  }\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkt_vmie9: /tmp/tmpkt_vmie9.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    // Base case\n    if (string.length()\
    \ < 3) {\n        result.push_back(string);\n        return result;\n    }\n \
    \   // Recursion base case\n    if (string.length() == 3) {\n        result.push_back(string);\n\
    \        return result;\n    }\n\n    std::vector<std::pair<int, int>> prefix_lengths;\n\
    \    for (std::string::size_type i = 0; i < string.length(); i++)\n        prefix_lengths.push_back(std::make_pair(string.length()\
    \ - i, i));\n\n    std::sort(prefix_lengths.begin(), prefix_lengths.end());\n\
    \    result.push_back(string);\n    for (auto &prefix_length: prefix_lengths)\n\
    \        result.push_back(string.substr(prefix_length.first, prefix_length.second));\n\
    \    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpy_skja1l: /tmp/tmpy_skja1l.cpp:29: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    \n    size_t prefix_start = 0;\n    for (size_t i = 1; i < string.size();\
    \ i++) {\n        size_t prefix_length = i - prefix_start;\n        prefixes.push_back(string[prefix_start]\
    \ + std::to_string(prefix_length));\n        prefix_start = i;\n    }\n    \n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpsubipxs0: /tmp/tmpsubipxs0.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    for (size_t i = 0; i < string.size(); ++i) {\n        prefixes.push_back(string(string.rbegin(),\
    \ string.rend() - i));\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2m82xpg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpu2m82xpg.cpp:8:69: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::reverse_iterator,\
    \ std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >)\u2019\n    8 |         prefixes.push_back(string(string.rbegin(), string.rend()\
    \ - i));\n      |                                                            \
    \         ^\n"
  stdout: ''
  timestamp: 1660141367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::string prefix = string;\n    std::string prefix_array[]\
    \ = {\"a\"};\n    int counter = 1;\n    while(counter) {\n        counter = 0;\n\
    \        for (int i = 1; i < prefix_array.size(); i++) {\n            if(prefix_array[i]\
    \ == prefix) {\n                counter++;\n            } else {\n           \
    \     prefix_array[i - 1] += prefix_array[i];\n            }\n        }\n    }\n\
    \    std::vector<std::string> prefix_vector(prefix_array,prefix_array + prefix_array.size());\n\
    \    prefix_vector.erase(prefix_vector.begin() + prefix_vector.size() / 2);\n\
    \    return prefix_vector;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyprygfkx.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpyprygfkx.cpp:10:42: error: request\
    \ for member \u2018size\u2019 in \u2018prefix_array\u2019, which is of non-class\
    \ type \u2018std::string [1]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [1]\u2019}\n   10 |         for (int i = 1; i < prefix_array.size(); i++) {\n\
    \      |                                          ^~~~\n/tmp/tmpyprygfkx.cpp:18:85:\
    \ error: request for member \u2018size\u2019 in \u2018prefix_array\u2019, which\
    \ is of non-class type \u2018std::string [1]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [1]\u2019}\n   18 |     std::vector<std::string> prefix_vector(prefix_array,prefix_array\
    \ + prefix_array.size());\n      |                                           \
    \                                          ^~~~\n"
  stdout: ''
  timestamp: 1660141367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  if (string.size() == 0)\n    return std::vector<std::string>();\n\
    \  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n  while\
    \ (prefixes.back().size() <= string.size())\n    prefixes.back() += prefixes.back();\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpy8onu3y2: /tmp/tmpy8onu3y2.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::string prefix;\n    std::vector<std::string> retval;\n \
    \   do {\n        prefix = string;\n        retval.push_back(prefix);\n      \
    \  std::size_t found = string.find(prefix);\n        if (found != std::string::npos)\
    \ {\n            string = string.substr(found + 1);\n        } else {\n      \
    \      break;\n        }\n    } while (true);\n    return retval;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 1) > this->size() (which is 0)\n"
  stdout: ''
  timestamp: 1660141367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Declare all variables \n  vector<string> prefixes;\n  // Declare\
    \ string length of input string\n  int length = string.length();\n  // Declare\
    \ helper variable for traversing string\n  int i = 0;\n  // Loop over each character\
    \ in input string from beginning to end\n  for ( ; i < length; i++ ) {\n    //\
    \ Compare current character with next character in input string\n    if (string[i]\
    \ > string[i+1]) {\n      // If current character is greater than next character,\
    \ then save prefix\n      prefixes.push_back(string);\n      // Reset index to\
    \ beginning of string\n      i = 0;\n      // If current character is less than\
    \ the next character, then\n      // skip that character by decreasing index\n\
    \    } else {\n      // If current character is less than next character, then\
    \ decrement\n      i--;\n    }\n  }\n  return prefixes;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g84r1bd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8g84r1bd.cpp:6:3: error: \u2018\
    vector\u2019 was not declared in this scope\n    6 |   vector<string> prefixes;\n\
    \      |   ^~~~~~\n/tmp/tmp8g84r1bd.cpp:6:3: note: suggested alternatives:\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8g84r1bd.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8g84r1bd.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp8g84r1bd.cpp:6:18:\
    \ error: \u2018prefixes\u2019 was not declared in this scope; did you mean \u2018\
    all_prefixes\u2019?\n    6 |   vector<string> prefixes;\n      |             \
    \     ^~~~~~~~\n      |                  all_prefixes\n"
  stdout: ''
  timestamp: 1660141367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> output;\n    int n = string.length();\n\
    \    for (int i = n; i > 0; i--)\n    {\n        output.push_back(string[n - i]);\n\
    \    }\n    return output;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dvpibkw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp1dvpibkw.cpp:9:39: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |         output.push_back(string[n - i]);\n\
    \      |                                       ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1dvpibkw.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::va"
  stdout: ''
  timestamp: 1660141367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    if (string.length() >\
    \ 0)\n        prefixes.push_back(string[0]);\n    if (string.length() > 1)\n \
    \       prefixes.push_back(string.substr(0, 1));\n    for (size_t i = 2; i < string.length();\
    \ ++i) {\n        prefixes.push_back(string[0] + string.substr(i - 1, 1));\n \
    \   }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0wfv_ds0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp0wfv_ds0.cpp:7:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    7 |         prefixes.push_back(string[0]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0wfv_ds0.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_"
  stdout: ''
  timestamp: 1660141367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> res;\n  std::string tmp = \"\";\n  do\
    \ {\n    tmp = string;\n    res.push_back(tmp);\n    // remove tmp prefix from\
    \ string\n    string =\n        string.substr(0, string.find(tmp, string.find(tmp)\
    \ + 1));\n  } while (!string.empty());\n  // if string is empty just return empty\
    \ list\n  if (string.length() == 0) {\n    return res;\n  }\n  // return list\
    \ containing all prefixes of original string\n  do {\n    string =\n        string.substr(0,\
    \ string.find(tmp, string.find(tmp) + 1));\n    // remove prefix from tmp string\n\
    \    tmp = string.substr(0, string.find(tmp, string.find(tmp) + 1));\n  } while\
    \ (!string.empty());\n  return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp9ukcczf0: /tmp/tmp9ukcczf0.cpp:29: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n\n    if (string.length()\
    \ == 0)\n        return prefixes;\n\n    size_t prefix_start = 0;\n    size_t\
    \ prefix_end = 0;\n\n    while (prefix_end < string.length()) {\n        prefix_start\
    \ = prefix_end;\n        prefix_end = prefix_start + 1;\n        while (string.substr(prefix_start,\
    \ prefix_end - prefix_start).length() > 1) {\n            prefix_end++;\n    \
    \    }\n        prefixes.emplace_back(string.substr(prefix_start, prefix_end -\
    \ prefix_start));\n    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7vrou0wo: /tmp/tmp7vrou0wo.cpp:27: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  int n = string.size();\n\
    \  if (n == 0) return prefixes;\n  for (int i = 0; i <= n; ++i) {\n    std::string\
    \ prefix = std::to_string(i);\n    if (string[i] == string[0]) {\n      prefix\
    \ += \"0\";\n    }\n    prefixes.push_back(prefix);\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqwx22cue: /tmp/tmpqwx22cue.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    size_t length = string.length();\n\
    \    size_t max_len = length;\n    bool prefix_found = false;\n    for (size_t\
    \ i = 0; i < length; i++) {\n        if (!prefix_found) {\n            prefix_found\
    \ = true;\n            prefixes.push_back(string.substr(0, i));\n        }\n \
    \       if (prefixes[prefixes.size() - 1].length() < i) {\n            prefixes.push_back(\"\
    0\");\n            prefixes.push_back(string);\n            break;\n        }\n\
    \        max_len = std::max(max_len, i + prefixes[prefixes.size() - 1].length());\n\
    \    }\n    if (prefix_found)\n        prefixes.push_back(string);\n    \n   \
    \ // Sort the strings by their lengths\n    std::sort(prefixes.begin(), prefixes.end(),\
    \ \n            [](const std::string& a, const std::string& b) {\n           \
    \     return a.length() < b.length();\n            });\n\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp6wmn3_bl: /tmp/tmp6wmn3_bl.cpp:35: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::queue<std::string> queue;\n    queue.push(string);\n   \
    \ std::vector<std::string> res;\n\n    while (!queue.empty()) {\n        std::string\
    \ prefix = queue.front();\n        queue.pop();\n        for (auto &c : prefix)\
    \ {\n            res.push_back(prefix);\n            queue.push(c);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37qwv90r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp37qwv90r.cpp:14:25: error: no matching\
    \ function for call to \u2018std::queue<std::__cxx11::basic_string<char> >::push(char&)\u2019\
    \n   14 |             queue.push(c);\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp37qwv90r.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:259:7:\
    \ note: candidate: \u2018void std::queue<_Tp, _Sequence>::push(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Sequence = std::deque<std::__cxx11::basic_string<char>,\
    \ std::allocator<std::__cxx11::basic_string<char> > >; std::queue<_Tp, _Sequence>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  259 |       push(const value_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_queue.h:259:30: note:\
    \   no known conversion for argument 1 from \u2018char\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  259 |       push(const\
    \ value_type& __x)\n      |            ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_queue.h:264:7:\
    \ note: candidate: \u2018void std::queue<_Tp, _Sequence>::push(std::queue<_Tp,\
    \ _Sequence>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Sequence\
    \ = std::deque<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>\
    \ > >; std::queue<_Tp, _Sequence>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n  264 |       push(value_type&& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_queue.h:264:25:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::queue<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \  264 |       push(value_type&& __x)\n      |            ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefix_list;\n    size_t min_index =\
    \ 0;\n    size_t min_len = (size_t) string.size();\n    size_t index = string.size()\
    \ - 1;\n    while (index >= 0) {\n        while (min_len > 0) {\n            if\
    \ (string[index] == string[min_index]) {\n                prefix_list.push_back(string[min_index]);\n\
    \                min_len--;\n            }\n            index--;\n        }\n\
    \        min_index = index;\n        min_len = (size_t) string.size();\n     \
    \   index--;\n    }\n    return prefix_list;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7g81mx3f.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7g81mx3f.cpp:12:56: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   12 |                 prefix_list.push_back(string[min_index]);\n\
    \      |                                                        ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7g81mx3f.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_tra"
  stdout: ''
  timestamp: 1660141367
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  \n  // Scan all input string\n\
    \  for (int i = string.length() - 1; i >= 0; i--) {\n    \n    // Append current\
    \ character to prefixes list\n    std::string prefix = prefix + string[i];\n \
    \   prefixes.push_back(prefix);\n  }\n\n  return prefixes;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::bad_alloc'\n  what():\
    \  std::bad_alloc\n"
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Add empty string to front of list\n  std::vector<std::string>\
    \ prefixes;\n  prefixes.emplace_back(string);\n  for (int i = 1; i <= string.size();\
    \ i++) {\n    prefixes.emplace_back(string.substr(0, i));\n  }\n  return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpivrpxir7: /tmp/tmpivrpxir7.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> ret;\n    auto len = string.length();\n\
    \    auto pos = 0;\n    while (pos < len) {\n        ret.push_back(string.substr(pos,\
    \ 1));\n        ++pos;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp5om3qyk_: /tmp/tmp5om3qyk_.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    std::string::size_type len = string.size();\n    // To ensure longest string\
    \ is used\n    while (len > 0) {\n        // The string is initially 0 characters\
    \ long\n        // We will add one character at a time\n        prefixes.push_back(string.substr(0,\
    \ len - 1));\n        // Remove the last character and decrement the length\n\
    \        string = string.substr(0, string.size() - 1);\n        len--;\n    }\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpcjs6cs0m: /tmp/tmpcjs6cs0m.cpp:22: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    if (string.empty()) \n        return std::vector<std::string>();\n\
    \    \n    std::vector<std::string> prefix;\n    prefix.push_back(string);\n \
    \   \n    for (size_t i = string.size(); i <= string.length(); ++i) {\n      \
    \  for (int j = 0; j < i; ++j) {\n            prefix.push_back(string.substr(i,\
    \ j));\n        }\n    }\n    return prefix;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpmd_x0zrn: /tmp/tmpmd_x0zrn.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n\n    for (size_t i = 0;\
    \ i < string.length(); ++i) {\n        prefixes.push_back(string.substr(0, i));\n\
    \    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpw4ts03zr: /tmp/tmpw4ts03zr.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // TODO: Do it without recursion\n\n    // Initialize prefixes\
    \ list\n    std::vector<std::string> prefixes;\n\n    // Initialize prefixes\n\
    \    int index = 0;\n    while (index < string.length()) {\n\n        // Store\
    \ current character\n        char current = string[index];\n\n        // Find\
    \ next match\n        int indexNext = index + 1;\n        while (indexNext < string.length()\
    \ && string[indexNext] == current) {\n            indexNext++;\n        }\n\n\
    \        // Add prefix to the list\n        prefixes.push_back(std::to_string(index));\n\
    \n        // Update current index\n        index = indexNext;\n    }\n\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpx1km6ceo: /tmp/tmpx1km6ceo.cpp:35: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    // loop through all characters\n\
    \    for (size_t i = 0; i < string.size(); ++i)\n        // add character to current\
    \ string\n        prefixes.push_back(string[i]);\n        // loop through all\
    \ characters again\n        for (size_t j = i + 1; j < string.size(); ++j)\n \
    \           // add prefix to current string\n            prefixes.push_back(string[j]);\n\
    \    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n \
    \   assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6r7jjz1g.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp6r7jjz1g.cpp:9:37: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |         prefixes.push_back(string[i]);\n\
    \      |                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6r7jjz1g.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_"
  stdout: ''
  timestamp: 1660141367
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefix;\n    if (string.length() ==\
    \ 0)\n        return prefix;\n    std::string prefix = string[0];\n    std::string\
    \ curr = string;\n    for (size_t i = 1; i < string.length(); i++) {\n       \
    \ if (string[i] == curr) {\n            prefix.push_back(curr);\n        } else\
    \ {\n            prefix.push_back(prefix);\n            prefix = curr + string[i];\n\
    \            curr = string[i];\n        }\n    }\n    prefix.push_back(prefix);\n\
    \    return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizmd66kt.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpizmd66kt.cpp:8:17: error: conflicting\
    \ declaration \u2018std::string prefix\u2019\n    8 |     std::string prefix =\
    \ string[0];\n      |                 ^~~~~~\n/tmp/tmpizmd66kt.cpp:5:30: note:\
    \ previous declaration as \u2018std::vector<std::__cxx11::basic_string<char> >\
    \ prefix\u2019\n    5 |     std::vector<std::string> prefix;\n      |        \
    \                      ^~~~~~\n/tmp/tmpizmd66kt.cpp:11:23: error: no match for\
    \ \u2018operator==\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} and \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019})\n   11 |         if (string[i]\
    \ == curr) {\nIn file included from /usr/include/c++/9/regex:62,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n         \
    \        from /tmp/tmpizmd66kt.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpizmd66kt.cpp:11:26:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   11 |         if (string[i] == curr) {\n      |  \
    \                        ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpizmd66kt.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1"
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  // If string is empty, return\
    \ empty list\n  if (string.length() == 0) return result;\n  // Keep track of prefix\
    \ length for current string\n  unsigned prefix_length = string.length();\n  //\
    \ If first character is not a letter, return all characters as prefix\n  if (!isalpha(string[0]))\
    \ {\n    for (auto &c: string) result.push_back(c);\n    return result;\n  }\n\
    \  // Build prefix list recursively, starting with first letter\n  for (auto &c:\
    \ string) all_prefixes(c, prefix_length);\n  return result;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dlmj_nv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp1dlmj_nv.cpp:12:45: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   12 |     for (auto &c: string) result.push_back(c);\n      |            \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1dlmj_nv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |         "
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::array<char, 4>> prefixes;\n    int l = 0, h\
    \ = (int) string.size();\n    while (l <= h) {\n        int m = l + (h - l) /\
    \ 2;\n        prefixes.emplace_back(std::move(string));\n        prefixes.back()[m]\
    \ = '\\0';\n        auto ps = prefixes.back();\n        l = std::min(l, m);\n\
    \        h = std::min(h, m);\n    }\n    std::vector<std::string> all_prefixes;\n\
    \    std::string prefix;\n    for (int i = 0; i <= l; i++) {\n        for (int\
    \ j = 0; j <= h; j++) {\n            for (int k = 0; k < 4; k++) {\n         \
    \       if (prefixes[i][j] == prefixes[i][k])\n                    break;\n  \
    \          }\n            if (k == 4)\n                all_prefixes.emplace_back(prefix\
    \ + prefixes[i][j]);\n            else\n                prefix = prefixes[i][j];\n\
    \        }\n    }\n    return all_prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ca8x7zp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp1ca8x7zp.cpp:23:17: error: \u2018\
    k\u2019 was not declared in this scope\n   23 |             if (k == 4)\n    \
    \  |                 ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp1ca8x7zp.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::array<char, 4>; _Args = {std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >}; _Tp = std::array<char, 4>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::array<char, 4>; _Args = {std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> >}; _Tp = std::array<char, 4>;\
    \ std::allocator_traits<std::allocator<_CharT> >::allocator_type = std::allocator<std::array<char,\
    \ 4> >]\u2019\n/usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018\
    std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&&\
    \ ...) [with _Args = {std::__cxx11::basic_string<char, std::char_traits<char>,\
    \ std::allocator<char> >}; _Tp = std::array<char, 4>; _Alloc = std::allocator<std::array<char,\
    \ 4> >; std::vector<_T"
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  // Create array for storing\
    \ prefixes\n  for (int i = 0; i < string.size(); i++)\n    prefixes.push_back(string.substr(0,\
    \ i));\n  \n  // Find the longest prefix\n  int length = std::max(prefixes.size(),\
    \ static_cast<int>(string.size()));\n  \n  // Add the prefix to the array until\
    \ the current index is equal or greater \n  // than the length of the input string\n\
    \  for (int i = 0; i < length; i++)\n    prefixes.push_back(prefixes[i].substr(0,\
    \ i));\n  \n  // Return the list of prefixes\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnn3sqnby.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnn3sqnby.cpp:11:73: error: no matching\
    \ function for call to \u2018max(std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type, int)\u2019\n   11 |   int length = std::max(prefixes.size(), static_cast<int>(string.size()));\n\
    \      |                                                                     \
    \    ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n        \
    \         from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnn3sqnby.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnn3sqnby.cpp:11:73: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long unsigned\
    \ int\u2019 and \u2018int\u2019)\n   11 |   int length = std::max(prefixes.size(),\
    \ static_cast<int>(string.size()));\n      |                                 \
    \                                        ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnn3sqnby.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnn3sqnby.cpp:11:73:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long unsigned int\u2019 and \u2018int\u2019)\n   11 |   int length = std::max(prefixes.size(),\
    \ static_cast<int>"
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefix;\n  string prefix = \"\";\n  for\
    \ (int i = 0; i < string.length(); i++) {\n    prefix += string[i];\n    prefix.push_back(prefix[0]);\n\
    \  }\n  return prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoalduvy7.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpoalduvy7.cpp:6:9: error: expected\
    \ \u2018;\u2019 before \u2018prefix\u2019\n    6 |   string prefix = \"\";\n \
    \     |         ^~~~~~~\n      |         ;\n/tmp/tmpoalduvy7.cpp:8:12: error:\
    \ no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n    8 |     prefix += string[i];\n"
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::string prefix = \"\";\n  std::string curr = string;\n  std::vector<std::string>\
    \ prefixes;\n  while (curr.size() > prefix.length()) {\n    prefix = curr + prefix;\n\
    \    std::string left = string.substr(0, curr.size());\n    if (left.size() >\
    \ curr.size() + 1) {\n      prefix = left.substr(0, curr.size()) + prefix;\n \
    \   }\n    std::string right = string.substr(curr.size());\n    prefixes.push_back(prefix);\n\
    \    curr = right;\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp7kmxqv_r: /tmp/tmp7kmxqv_r.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 0; i < string.size(); ++i) {\n    size_t j = i;\n    while\
    \ (j < string.size() && string[j] == '-') {\n      j++;\n    }\n    prefixes.push_back(string(i,\
    \ j));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7910vnbm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp7910vnbm.cpp:12:35: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (size_t&,\
    \ size_t&)\u2019\n   12 |     prefixes.push_back(string(i, j));\n      |     \
    \                              ^\n"
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Initialize result vector with empty string\n  std::string prefixes[string.size()+1];\n\
    \n  // Initialize prefix with empty string\n  std::string prefix = \"\";\n\n \
    \ // Loop through string until we reach the end\n  for(int i = 0; i <= string.length();\
    \ i++) {\n    prefix += string.substr(0, i);\n    prefixes[i] = prefix;\n  }\n\
    \n  // Return result vector\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgc7pep_s.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpgc7pep_s.cpp:18:10: error: could\
    \ not convert \u2018prefixes\u2019 from \u2018std::string [(<anonymous> + 1)]\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char> [(<anonymous> + 1)]\u2019} to \u2018\
    std::vector<std::__cxx11::basic_string<char> >\u2019\n   18 |   return prefixes;\n\
    \      |          ^~~~~~~~\n      |          |\n      |          std::string [(<anonymous>\
    \ + 1)] {aka std::__cxx11::basic_string<char> [(<anonymous> + 1)]}\n"
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    if (string.length() == 0) return {};\n    std::vector<std::string>\
    \ prefixes;\n    prefixes.push_back(string);\n    for (int i = string.length()-1;\
    \ i >= 0; --i) {\n        std::string prefix = string.substr(0,i);\n        prefixes.push_back(prefix);\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp2a0w2zst: /tmp/tmp2a0w2zst.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (unsigned int i = 0;\
    \ i < string.length(); i++) {\n    for (unsigned int j = i; j < string.length();\
    \ j++) {\n      prefixes.push_back(string.substr(i, j));\n    }\n  }\n  return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp1077p4s9: /tmp/tmp1077p4s9.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    \n    int cur_idx = 0;\n\
    \    int cur_len = string.length();\n    while (cur_idx < cur_len) {\n       \
    \ result.emplace_back(string.substr(cur_idx, cur_len));\n        cur_len--;\n\
    \        cur_idx++;\n    }\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpbtkdxc8n: /tmp/tmpbtkdxc8n.cpp:20: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  assert(string.size() > 0);\n  \n  std::string all_prefixes = \"\
    \";\n  std::string s = string;\n  \n  for(std::string::iterator i = s.begin();\
    \ i != s.end(); i++) {\n    for(std::string::iterator j = all_prefixes.begin();\
    \ j != all_prefixes.end(); j++) {\n      if(i == j) {\n        continue;\n   \
    \   }\n      if((*i) == (*j)) {\n        j = all_prefixes.erase(j);\n      }\n\
    \      else {\n        break;\n      }\n    }\n    all_prefixes += *i;\n  }\n\
    \  return std::vector<std::string>(all_prefixes.begin(), all_prefixes.end());\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpk63vjypa.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _ForwardIterator = std::__cxx11::basic_string<char>*;\
    \ _Tp = std::__cxx11::basic_string<char>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; <template-parameter-2-2> = void; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/tmp/tmpk63vjypa.cpp:24:75:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type"
  stdout: ''
  timestamp: 1660141368
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (std::size_t index\
    \ = 0; index < string.length(); index++) {\n        prefixes.push_back(string[index]);\n\
    \    }\n    sort(prefixes.begin(), prefixes.end());\n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfvifq9zn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfvifq9zn.cpp:7:41: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    7 |         prefixes.push_back(string[index]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfvifq9zn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>"
  stdout: ''
  timestamp: 1660141368
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string current =\
    \ \"\";\n    for (int i = 0; i < string.size(); ++i) {\n        if (string[i]\
    \ == string[0]) {\n            current += string[0];\n        } else {\n     \
    \       prefixes.push_back(current);\n            current = string[i];\n     \
    \   }\n    }\n    prefixes.push_back(current);\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpkk6eho9o: /tmp/tmpkk6eho9o.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefix;\n    for (auto &character :\
    \ string)\n    {\n        prefix.push_back(string(character));\n    }\n    sort(prefix.begin(),\
    \ prefix.end());\n    prefix.erase(prefix.begin()+1, prefix.end());\n    return\
    \ prefix;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx8rj1nky.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpx8rj1nky.cpp:8:42: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (char&)\u2019\
    \n    8 |         prefix.push_back(string(character));\n      |              \
    \                            ^\n"
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> retVal;\n    \n    auto allPrefixes\
    \ = [&](auto n) {\n        if ((n > 0) && (n < string.length())) {\n         \
    \   auto prefix = string.substr(0, n);\n            \n            retVal.push_back(prefix);\n\
    \            allPrefixes(n + 1);\n        }\n    };\n    \n    allPrefixes(0);\n\
    \    return retVal;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpllycylpp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpllycylpp.cpp:7:24: error: use of\
    \ \u2018allPrefixes\u2019 before deduction of \u2018auto\u2019\n    7 |     auto\
    \ allPrefixes = [&](auto n) {\n      |                        ^~~~~~~~~~~~~\n\
    \    8 |         if ((n > 0) && (n < string.length())) {\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    9 |             auto prefix = string.substr(0, n);\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \   10 | \n      |                         \n   11 |             retVal.push_back(prefix);\n\
    \      |             ~~~~~~~~~~~~~~~~~~~~~~~~~\n   12 |             allPrefixes(n\
    \ + 1);\n      |             ~~~~~~~~~~~~~~~~~~~\n   13 |         }\n      | \
    \        ~               \n   14 |     };\n      |     ~                   \n\
    /tmp/tmpllycylpp.cpp:7:24: error: invalid use of \u2018auto\u2019\n"
  stdout: ''
  timestamp: 1660141369
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  int i = 0;\n  int j = string.size()\
    \ - 1;\n  while (i < j) {\n    int k = std::min(i, j);\n    while (k != i && k\
    \ != j) {\n      prefixes.emplace_back(string);\n      i -= 1;\n      j -= 1;\n\
    \    }\n    i += 1;\n    j -= 1;\n  }\n  return prefixes;\n}\nint main() {\n \
    \   auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp1yxx6s1m: /tmp/tmp1yxx6s1m.cpp:23: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n   std::vector<std::string> prefixes;\n   \n   size_t len = string.size();\n\
    \   size_t i = 0;\n   while (i < len) {\n      if (string.at(i) == string.at(i\
    \ + 1)) {\n         prefixes.push_back({string.substr(0, i + 1)});\n         i\
    \ += 1;\n      } else {\n         i++;\n      }\n   }\n   \n   return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 6) >= this->size() (which is 6)\n"
  stdout: ''
  timestamp: 1660141370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> all_prefixes;\n    all_prefixes.reserve(string.size());\n\
    \    for (int i = 0; i < string.size(); i++) {\n        if (string[i].size() >\
    \ 0)\n            for (auto j = i+1; j < string.size(); j++)\n               \
    \ all_prefixes.push_back(string[j].substr(0, i));\n    }\n    return all_prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsi8id64t.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpsi8id64t.cpp:8:23: error: request\
    \ for member \u2018size\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n    8 |         if (string[i].size()\
    \ > 0)\n      |                       ^~~~\n/tmp/tmpsi8id64t.cpp:10:50: error:\
    \ request for member \u2018substr\u2019 in \u2018string.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)j))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   10 |                 all_prefixes.push_back(string[j].substr(0,\
    \ i));\n      |                                                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    // Add empty prefix to\
    \ all strings so they can be filtered out\n    for (auto &str : string) {\n  \
    \      prefixes.emplace_back(str);\n    }\n    // Sort strings by their lengths\
    \ in descending order\n    std::sort(prefixes.begin(), prefixes.end(), [](std::string\
    \ &a, std::string &b) -> bool {\n        return a.length() > b.length();\n   \
    \ });\n    // Remove empty prefixes from the sorted list\n    prefixes.erase(std::remove_if(prefixes.begin(),\
    \ prefixes.end(), [](std::string &a) -> bool {\n        return a.length() == 0;\n\
    \    }), prefixes.end());\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpf0jttv4l.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::__cxx11::basic_string<char>; _Args = {char&}; _Tp = std::__cxx11::basic_string<char>]\u2019\
    :\n/usr/include/c++/9/bits/alloc_traits.h:483:4:   required from \u2018static\
    \ void std::allocator_traits<std::allocator<_CharT> >::construct(std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type&, _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>;\
    \ _Args = {char&}; _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018std::vector<_Tp,\
    \ _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with\
    \ _Args = {char&}; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::reference = std::__cxx11::basic_string<char>&]\u2019\
    \n/tmp/tmpf0jttv4l.cpp:8:34:   required from here\n/usr/include/c++/9/ext/new_allocator.h:146:4:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::basic_string(char&)\u2019\
    \n  146 |  { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n     \
    \ |    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Create array of all unique characters in string\n  char * characters\
    \ = new char[string.length()];\n  string temp;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    characters[i] = string.at(i);\n  }\n  std::sort(characters, characters\
    \ + string.length());\n  \n  std::vector<std::string> results;\n  for (int i =\
    \ 1; i < characters.length; i++){\n    temp = characters[i - 1] + characters[i];\n\
    \    if (temp.length() == string.length()){\n      results.push_back(temp);\n\
    \    }\n  }\n  delete[] characters;\n  \n  return results;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj2jcrwgi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpj2jcrwgi.cpp:7:9: error: expected\
    \ \u2018;\u2019 before \u2018temp\u2019\n    7 |   string temp;\n      |     \
    \    ^~~~~\n      |         ;\n/tmp/tmpj2jcrwgi.cpp:14:34: error: request for\
    \ member \u2018length\u2019 in \u2018characters\u2019, which is of non-class type\
    \ \u2018char*\u2019\n   14 |   for (int i = 1; i < characters.length; i++){\n\
    \      |                                  ^~~~~~\n/tmp/tmpj2jcrwgi.cpp:15:5: error:\
    \ \u2018temp\u2019 was not declared in this scope\n   15 |     temp = characters[i\
    \ - 1] + characters[i];\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  assert(string.length() > 0);\n\n  // Resize array to hold longest\
    \ prefix of input string\n  std::vector<std::string> prefixes(string.length());\n\
    \  for (size_t i = 0; i < string.length(); ++i) {\n    prefixes[i] = string(string.length()\
    \ - i - 1, string[i]);\n  }\n\n  // Return prefix list\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_yydn_43.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp_yydn_43.cpp:10:60: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::__cxx11::basic_string<char>::size_type,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \   10 |     prefixes[i] = string(string.length() - i - 1, string[i]);\n     \
    \ |                                                            ^\n"
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    if(!string.empty())\n        std::vector<char> buf;\n    for(const\
    \ char c : string) {\n        buf.push_back(c);\n    }\n    return all_prefixes(std::string(buf.begin(),\
    \ buf.end()));\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpesw1bqjm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpesw1bqjm.cpp:8:9: error: \u2018\
    buf\u2019 was not declared in this scope\n    8 |         buf.push_back(c);\n\
    \      |         ^~~\n/tmp/tmpesw1bqjm.cpp:10:37: error: \u2018buf\u2019 was not\
    \ declared in this scope\n   10 |     return all_prefixes(std::string(buf.begin(),\
    \ buf.end()));\n      |                                     ^~~\n"
  stdout: ''
  timestamp: 1660141369
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::string prefixes[101];\n  for (int i = 0; i < 10; ++i)\n  \
    \  prefixes[i] = string[0] + to_string(i);\n  for (int i = 1; i < 10; ++i)\n \
    \   for (int j = i; j < 101; ++j)\n      if (prefixes[j].length() < prefixes[i].length())\n\
    \        prefixes[j] = prefixes[i];\n  std::vector<std::string> prefixes_out;\n\
    \  for (int i = 0; i < 101; ++i) {\n    if (prefixes[i].length() >= string.length())\n\
    \      prefixes_out.push_back(prefixes[i]);\n  }\n  return prefixes_out;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf12ot407.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpf12ot407.cpp:7:31: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n    7 |     prefixes[i] = string[0] + to_string(i);\n      |              \
    \                 ^~~~~~~~~\n      |                               std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpf12ot407.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141370
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int n = string.size();\n    std::vector<std::string> prefixes;\n\
    \    prefixes.reserve(n);\n    for (int i = 0; i < n; ++i) {\n        int prefix\
    \ = 0;\n        while (i >= 0 && string[i] == string[prefix]) {\n            prefix++;\n\
    \            i = i - prefix;\n        }\n        prefixes.push_back(std::to_string(prefix));\n\
    \    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141375
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    \n    // First we find\
    \ the longest prefix\n    int longest_prefix = 0, pos = 0;\n    while ((pos =\
    \ string.find_first_of(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , pos + 1)) != std::string::npos) {\n        if (string.length() - pos > longest_prefix)\
    \ {\n            longest_prefix = string.length() - pos;\n        }\n    }\n \
    \   \n    for (int i = 0; i < longest_prefix; i++) {\n        std::stringstream\
    \ ss;\n        ss << std::setfill('0') << std::setw(2) << i;\n        std::string\
    \ s = ss.str();\n        \n        // Now find all substrings of this prefix,\
    \ and add them to the result list\n        while (string.find(s) != std::string::npos)\
    \ {\n            prefixes.push_back(s.substr(0, i));\n            \n         \
    \   s = s.substr(i + 1);\n        }\n    }\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpapebf4fz: /tmp/tmpapebf4fz.cpp:32: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int N = string.size();\n    std::vector<std::string> prefix;\n\
    \    prefix.push_back(string);\n    for (int i = 1; i < N; i++) {\n        prefix.push_back(prefix\
    \ + string);\n    }\n    return prefix;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph64iaa2.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpph64iaa2.cpp:9:33: error: no match\
    \ for \u2018operator+\u2019 (operand types are \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n    9 |         prefix.push_back(prefix + string);\n      |              \
    \            ~~~~~~ ^ ~~~~~~\n      |                          |        |\n  \
    \    |                          |        std::string {aka std::__cxx11::basic_string<char>}\n\
    \      |                          std::vector<std::__cxx11::basic_string<char>\
    \ >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n      \
    \           from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpph64iaa2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpph64iaa2.cpp:9:35:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   \
    \ 9 |         prefix.push_back(prefix + string);\n      |                    \
    \               ^~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpph64iaa2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator>"
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Write your code here\n    std::vector<std::string> all_prefixes;\n\
    \    int string_length = string.length();\n    for (int i = 1; i <= string_length;\
    \ ++i) {\n        // The characters at index i to string_length\n        std::string\
    \ prefix = string;\n        if (i > 1) {\n            prefix = prefix.substr(0,\
    \ i - 1);\n        }\n        all_prefixes.push_back(prefix);\n    }\n    return\
    \ all_prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpner6tv9p: /tmp/tmpner6tv9p.cpp:21: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141370
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n   std::vector<std::string> result;\n   int n = string.size();\n\
    \   result.push_back(string);\n   while (n > 0) {\n      result.push_back(string[0]);\n\
    \      n--;\n      for (int i = 1; i < n; ++i) {\n         result.push_back(string[i]);\n\
    \      }\n   }\n   return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm76vrwg1.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpm76vrwg1.cpp:9:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    9 |       result.push_back(string[0]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm76vrwg1.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 "
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    int len = string.length();\n    if (len < 2) return {};\n   \
    \ std::vector<std::string> prefixes(len + 1);\n    for (int i = 0; i < len; ++i)\
    \ {\n        prefixes[i] = string[0];\n        for (int j = 1; j < len; ++j) {\n\
    \            prefixes[i] += string[j];\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpvf0tru4y: /tmp/tmpvf0tru4y.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> res;\n    if (string.empty()) {\n  \
    \      return res;\n    }\n\n    // Find index of first character\n    auto idx\
    \ = std::find(string.begin(), string.end(), string[0]);\n    // Get prefix of\
    \ first character\n    res.emplace_back(string.substr(0, idx));\n    // While\
    \ character is not end of string\n    while (idx != string.end()) {\n        //\
    \ Get prefix from current character and append it to the result\n        res.emplace_back(string.substr(idx,\
    \ 1));\n        // Find index of next character\n        idx = std::find(string.begin(),\
    \ string.end(), string[idx]);\n    }\n    // Return all prefixes\n    return res;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp05mra68m.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp05mra68m.cpp:13:39: error: cannot\
    \ convert \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019}\n   13 |     res.emplace_back(string.substr(0, idx));\n\
    \      |                                       ^~~\n      |                  \
    \                     |\n      |                                       __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp05mra68m.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2838:45:\
    \ note:   initializing argument 2 of \u2018std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc> std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::substr(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2838 |       substr(size_type __pos = 0, size_type __n = npos)\
    \ const\n      |                                   ~~~~~~~~~~^~~~~~~~~~\n/tmp/tmp05mra68m.cpp:17:40:\
    \ error: cannot convert \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 to \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka \u2018\
    long unsigned int\u2019}\n   17 |         res.emplace_back(string.subs"
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    \n    // Loop through\
    \ all characters\n    for (int i = 0; i < string.size(); i++) {\n        \n  \
    \      // Initialize prefix as empty string\n        std::string prefix = \"\"\
    ;\n        \n        // Add current character to the prefix \n        prefix =\
    \ prefix + string[i];\n        \n        // If the prefix is longer than the input\
    \ string, add it to prefixes\n        if (string.length() - 1 == i) {\n      \
    \      prefixes.push_back(prefix);\n        }\n    }\n    \n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp5vgikjk0: /tmp/tmp5vgikjk0.cpp:27: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Create a set of all prefixes of input string\n    std::vector<std::string>\
    \ prefixes;\n    for (auto c : string)\n        prefixes.push_back(to_string(c));\n\
    \    for (int i = 1; i < string.length(); i++) {\n        // Generate all prefixes\
    \ of shortest to longest\n        for (int j = 0; j < i; j++)\n            prefixes.push_back(to_string(string(i,\
    \ j) + string[i]));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2b_3n8qh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp2b_3n8qh.cpp:8:28: error: \u2018\
    to_string\u2019 was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n    8 |         prefixes.push_back(to_string(c));\n      |                \
    \            ^~~~~~~~~\n      |                            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2b_3n8qh.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n/tmp/tmp2b_3n8qh.cpp:12:53: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ int&)\u2019\n   12 |             prefixes.push_back(to_string(string(i, j) +\
    \ string[i]));\n      |                                                     ^\n\
    /tmp/tmp2b_3n8qh.cpp:12:32: error: \u2018to_string\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   12 |          \
    \   prefixes.push_back(to_string(string(i, j) + string[i]));\n      |        \
    \                        ^~~~~~~~~\n      |                                std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                "
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  \n  int n = string.size();\n  \n  std::vector<std::string> prefixes;\n\
    \  prefixes.push_back(string);\n  \n  for (int i = 1;i<=n;i++) {\n    if (prefixes[i-1].size()\
    \ > prefixes[i].size()) {\n      prefixes.push_back(prefixes[i-1]);\n    }\n \
    \ }\n  \n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpv9fe4c_o: /tmp/tmpv9fe4c_o.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (size_t i = 0; i < string.length(); ++i) {\n    size_t next_index = i;\n\
    \    while (next_index + 1 < string.length()) {\n      next_index++;\n      if\
    \ (string[next_index] == string[i]) {\n        prefixes.push_back(string);\n \
    \       break;\n      }\n    }\n  }\n  return prefixes;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp5c2pjz5a: /tmp/tmp5c2pjz5a.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  auto string_iterator = string.begin();\n\
    \  while (string_iterator != string.end()) {\n    std::string prefix = *string_iterator;\n\
    \    string_iterator++;\n    prefixes.push_back(prefix);\n  }\n  std::sort(prefixes.begin(),\
    \ prefixes.end(), std::less<std::string>());\n  return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6hf7pgq.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpr6hf7pgq.cpp:8:26: error: conversion\
    \ from \u2018char\u2019 to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n    8 |     std::string prefix\
    \ = *string_iterator;\n      |                          ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0; i < string.size();\
    \ ++i)\n    prefixes.push_back(string.substr(0, i));\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpty7dp9l4: /tmp/tmpty7dp9l4.cpp:13: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.reserve(string.size());\n\
    \  for (int i = 0; i < string.size(); i++) {\n    prefixes.push_back(std::string(1,\
    \ string[i]));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpe2mxebra: /tmp/tmpe2mxebra.cpp:15: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string prefix =\
    \ \"\";\n    for (auto c: string) {\n        prefix += c;\n        prefixes.push_back(prefix);\n\
    \        prefix = \"\";\n    }\n    return prefixes;\n}\nint main() {\n    auto\
    \ candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpgqjk_x4s: /tmp/tmpgqjk_x4s.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  auto it = string.begin();\n\
    \  while (it != string.end()) {\n    auto next = std::find_if(it+1, string.end(),\
    \ [](char c) {return !isalnum(c);});\n    if (next == string.end()) {\n      prefixes.emplace_back(it);\n\
    \      it = next;\n    } else {\n      prefixes.emplace_back(it, next);\n    \
    \  it = next;\n    }\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/c++allocator.h:33,\n\
    \                 from /usr/include/c++/9/bits/allocator.h:46,\n             \
    \    from /usr/include/c++/9/string:41,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0snut8ue.cpp:2:\n/usr/include/c++/9/ext/new_allocator.h: In instantiation\
    \ of \u2018void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with\
    \ _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >&}; _Tp = std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/alloc_traits.h:483:4:\
    \   required from \u2018static void std::allocator_traits<std::allocator<_CharT>\
    \ >::construct(std::allocator_traits<std::allocator<_CharT> >::allocator_type&,\
    \ _Up*, _Args&& ...) [with _Up = std::__cxx11::basic_string<char>; _Args = {__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>\
    \ > >&}; _Tp = std::__cxx11::basic_string<char>; std::allocator_traits<std::allocator<_CharT>\
    \ >::allocator_type = std::allocator<std::__cxx11::basic_string<char> >]\u2019\
    \n/usr/include/c++/9/bits/vector.tcc:115:30:   required from \u2018std::vector<_Tp,\
    \ _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with\
    \ _Args = {__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char,\
    \ std::char_traits<char>, std::allocator<char> > >&}; _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::reference = std::__cxx11::"
  stdout: ''
  timestamp: 1660141370
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    for(int i = 0; i < string.size(); i++) {\n        prefixes.push_back(string.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpibcf3nul: /tmp/tmpibcf3nul.cpp:14: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string longest =\
    \ string;\n    for (size_t i = 1; i < longest.length(); i++)\n    {\n        prefixes.push_back(longest.substr(0,\
    \ i));\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp0uojxxed: /tmp/tmp0uojxxed.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n\n  prefixes.push_back(string);\n\
    \  for (int i = 1; i < string.size(); ++i) {\n    prefixes.push_back(string.substr(0,\
    \ i));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmptph5athi: /tmp/tmptph5athi.cpp:15: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    int len = string.length();\n\
    \    int i = 0;\n    for (; i < len; ++i) {\n        if (string[i] == '.') {\n\
    \            while (string[i - 1] != '.') {\n                prefixes.push_back(string[i]);\n\
    \                i += (i - 1);\n            }\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89hlk24e.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp89hlk24e.cpp:11:45: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |                 prefixes.push_back(string[i]);\n\
    \      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89hlk24e.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<cha"
  stdout: ''
  timestamp: 1660141371
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  result.reserve(string.size()\
    \ + 1);\n  result.push_back(\"\");\n  for (auto i : string) {\n    result.push_back(string);\n\
    \    result.back() = i;\n  }\n  auto last = string.size() - 1;\n  for (auto i\
    \ = last; i >= 0; i--) {\n    auto pos = string.find(i, last);\n    if (pos ==\
    \ last)\n      result.emplace_back();\n    else\n      result.emplace_back(string.substr(i,\
    \ pos));\n    last = pos;\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141376
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> res;\n    std::string prefix = \"\"\
    ;\n    res.push_back(string);\n    int length = string.length();\n    for (int\
    \ i = 0; i < length; ++i) {\n        prefix += string[i];\n        for (int j\
    \ = i; j < length; ++j) {\n            std::string sub = prefix + string[j];\n\
    \            res.push_back(sub);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpanaqavy2: /tmp/tmpanaqavy2.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    if(string.size() == 0) return std::vector<std::string>();\n \
    \   std::vector<std::string> prefixes;\n    auto end = string.end();\n    for(auto\
    \ start = string.begin(); start != end && start != string.begin(); ++start) {\n\
    \        for(auto i = start + 1; i < end; ++i) {\n            prefixes.push_back(string(start,\
    \ i));\n        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqr9bf__.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpeqr9bf__.cpp:10:47: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&, __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >&)\u2019\n   10 |             prefixes.push_back(string(start, i));\n     \
    \ |                                               ^\n"
  stdout: ''
  timestamp: 1660141371
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // To store all prefixes\n    std::vector<std::string> prefixes;\n\
    \    // To store current prefix\n    std::string cur_prefix;\n    // To store\
    \ current string\n    std::string cur_string;\n    // To store current string's\
    \ length\n    int cur_len = 0;\n    // To store current string's length from right\
    \ to left\n    int cur_len_rev = cur_len + 1;\n\n    // To store current string's\
    \ length\n    int cur_len_str = cur_len + string.size() + 1;\n\n    while (cur_len\
    \ < cur_len_str) {\n        // Append current string's length to current prefix\
    \ and store it\n        cur_prefix = cur_prefix + std::to_string(cur_len_rev);\n\
    \        cur_len_rev = cur_len_rev + string.size();\n        cur_len = cur_len\
    \ + string.size();\n        // Append current prefix to current string and store\
    \ it\n        cur_string = cur_string + cur_prefix;\n        // Append new string\
    \ to prefixes list\n        prefixes.push_back(cur_string);\n        // Remove\
    \ current prefix from current string\n        cur_string = cur_string.substr(cur_len_rev);\n\
    \    }\n\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660141376
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    int n = string.length();\n\
    \    for (int i = 1; i < n; i++) {\n        for (int j = 0; j < i; j++) prefixes.push_back(string[i\
    \ - j] + string[j]);\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprfdifaoa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmprfdifaoa.cpp:8:81: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(int)\u2019\
    \n    8 |         for (int j = 0; j < i; j++) prefixes.push_back(string[i - j]\
    \ + string[j]);\n      |                                                     \
    \                            ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprfdifaoa.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018int\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<cha"
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  \n  // Use a map to store\
    \ prefix of each character\n  std::map<char, std::string> map;\n  for (char& c\
    \ : string) {\n    map[c] = \"\";\n  }\n  \n  // Add prefix of current character\
    \ to map\n  for (char& c : string) {\n    map[c] += c;\n  }\n  \n  // Now iterate\
    \ through map and add all prefixes\n  for (const auto& itr : map) {\n    for (auto\
    \ prefix_itr = itr.second.rbegin(); prefix_itr != itr.second.rend(); prefix_itr++)\
    \ {\n      prefixes.push_back(itr.first + prefix_itr->first);\n    }\n  }\n  \n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxxgtp16.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpsxxgtp16.cpp:21:50: error: request\
    \ for member \u2018first\u2019 in \u2018* prefix_itr.std::reverse_iterator<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >::operator->()\u2019, which is of\
    \ non-class type \u2018const char\u2019\n   21 |       prefixes.push_back(itr.first\
    \ + prefix_itr->first);\n      |                                             \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    \n    for (std::string::size_type\
    \ i = 0; i < string.size();i++)\n    {\n        prefixes.push_back(string.substr(0,i));\n\
    \    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpuvdvypo2: /tmp/tmpuvdvypo2.cpp:17: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    std::string current_prefix\
    \ = \"\";\n    for (size_t i = 0; i < string.size(); ++i) {\n        std::string\
    \ character = string[i];\n        if (character == current_prefix) {\n       \
    \     prefixes.push_back(current_prefix);\n            current_prefix = \"\";\n\
    \        } else {\n            current_prefix += character;\n        }\n    }\n\
    \    prefixes.push_back(current_prefix);\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu3uelnnw.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpu3uelnnw.cpp:8:41: error: conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} requested\n    8 |         std::string\
    \ character = string[i];\n      |                                         ^\n"
  stdout: ''
  timestamp: 1660141371
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefix;\n  for (size_t i = 0; i < string.size();\
    \ i++) {\n    prefix.emplace_back(string);\n    prefix[prefix.size() - i - 1]\
    \ += string[i];\n  }\n  return prefix;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpovkrrlx0: /tmp/tmpovkrrlx0.cpp:15: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for (size_t i = 0, size\
    \ = string.length(); i < size; ++i) {\n        for (size_t j = i; j < size; ++j)\
    \ {\n            prefixes.push_back(string);\n            prefix = string[j];\n\
    \        }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate =\
    \ all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqr88n4n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpfqr88n4n.cpp:9:13: error: \u2018\
    prefix\u2019 was not declared in this scope; did you mean \u2018prefixes\u2019\
    ?\n    9 |             prefix = string[j];\n      |             ^~~~~~\n     \
    \ |             prefixes\n"
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Initialize prefix list\n  std::vector<std::string> prefixes;\n\
    \  // Initialize number of characters in current prefix\n  int prefix_size = 1;\n\
    \  // Initialize length of current prefix string\n  int prefix_len = 1;\n  //\
    \ Iterate through each character in string\n  for (char c : string) {\n    //\
    \ Increment prefix size by one\n    ++prefix_size;\n    // If current prefix length\
    \ is equal to string length\n    if (prefix_size == prefix_len) {\n      // Add\
    \ prefix to prefix list\n      prefixes.push_back(string(prefix_len, c));\n  \
    \  }\n    // Update length of current prefix string\n    prefix_len += 1;\n  }\n\
    \  // Return prefix list\n  return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe2bh_ro8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpe2bh_ro8.cpp:18:46: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ char&)\u2019\n   18 |       prefixes.push_back(string(prefix_len, c));\n   \
    \   |                                              ^\n"
  stdout: ''
  timestamp: 1660141371
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  prefixes.push_back(string);\n\
    \  for (auto i = string.length() - 1; i >= 0; --i) {\n    auto start = i;\n  \
    \  for (auto j = i; j >= 0; --j) {\n      if (string[j] == string[start + 1])\
    \ {\n        start = j + 1;\n      }\n    }\n    prefixes.push_back(string.substr(start,\
    \ i + 1));\n  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::string prefix = \"\";\n    std::vector<std::string> prefix_list;\n\
    \    prefix_list.push_back(prefix);\n    \n    for(int i = 0; i < string.length();\
    \ i++) {\n        if(string[i] == string[0]) {\n            prefix = prefix +\
    \ string[i];\n            prefix_list.push_back(prefix);\n        } else {\n \
    \           prefix = prefix;\n        }\n    }\n    return prefix_list;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpdnohgvz8: /tmp/tmpdnohgvz8.cpp:21: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    auto s = string.substr(0, string.length());\n    std::vector<std::string>\
    \ res{s};\n    while(s.length() != 0) {\n        auto t = s.substr(0, s.length()-1);\n\
    \        for(auto p: { \"\", t, s + t }) res.push_back(p);\n        s = s.substr(s.length()\
    \ - 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqzyif6jg.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpqzyif6jg.cpp:9:36: error: unable\
    \ to deduce \u2018std::initializer_list<auto>&&\u2019 from \u2018{\"\", t, std::operator+(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Allocator>&, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Allocator>&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>](t)}\u2019\n    9 |         for(auto p: { \"\"\
    , t, s + t }) res.push_back(p);\n      |                                    ^\n\
    /tmp/tmpqzyif6jg.cpp:9:36: note:   deduced conflicting types for parameter \u2018\
    auto\u2019 (\u2018const char*\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.reserve(string.size());\n\
    \    std::string prefix = \"\";\n    for (size_t i = 0; i <= string.size(); ++i)\
    \ {\n        prefix += string[i];\n        if (!prefixes.empty() && string[i]\
    \ == string[prefixes.back()]) {\n            prefixes.pop_back();\n        } else\
    \ {\n            prefixes.push_back(prefix);\n            prefix = \"\";\n   \
    \     }\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppso53kec.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmppso53kec.cpp:10:53: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019} and \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   10 |         if (!prefixes.empty() && string[i] == string[prefixes.back()])\
    \ {\n      |                                                     ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmppso53kec.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1050:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator[](std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) const [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_reference\
    \ = const char&; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1050 |       operator[] (size_type __pos) const\
    \ _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1050:29:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018std::_"
  stdout: ''
  timestamp: 1660141371
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string);\n\
    \    \n    // find shortest prefix and add it to the list\n    auto it = prefixes.begin();\n\
    \    std::string prefix;\n    while(it != prefixes.end()) {\n        prefix =\
    \ *it;\n        it = prefixes.erase(it);\n        // find longest prefix and add\
    \ it to the list\n        for(auto iit = it.begin(); iit != it.end(); iit++) {\n\
    \            if((*iit) != prefix.front()) {\n                it = prefixes.push_back((*iit));\n\
    \                break;\n            }\n        }\n    }\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ew5j86q.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp8ew5j86q.cpp:15:27: error: \u2018\
    class __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019 has no member named \u2018begin\u2019\n   15 |         for(auto iit\
    \ = it.begin(); iit != it.end(); iit++) {\n      |                           ^~~~~\n\
    /tmp/tmp8ew5j86q.cpp:15:46: error: \u2018class __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 has no member named \u2018\
    end\u2019\n   15 |         for(auto iit = it.begin(); iit != it.end(); iit++)\
    \ {\n      |                                              ^~~\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    // We use std::map to\
    \ store the prefixes as we go along\n    std::map<int, std::string> m;\n    //\
    \ If the string is empty, there is nothing to do\n    if (string.empty()) return\
    \ prefixes;\n    // Find the longest prefix of the string\n    int l = 0, h =\
    \ string.length() - 1;\n    while (l < h) {\n        std::string prefix = string.substr(l,\
    \ h);\n        // If the prefix does not exists in the map, add it\n        if\
    \ (m.find(prefix) == m.end()) m.insert({prefix, prefix});\n        // Increment\
    \ the length of the prefix by 1\n        ++l;\n        --h;\n    }\n    // For\
    \ each prefix of the string, add it to the list\n    for (auto it = m.begin();\
    \ it != m.end(); ++it) {\n        prefixes.push_back(it->second);\n    }\n   \
    \ return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73_i_03o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp73_i_03o.cpp:15:26: error: no matching\
    \ function for call to \u2018std::map<int, std::__cxx11::basic_string<char> >::find(std::string&)\u2019\
    \n   15 |         if (m.find(prefix) == m.end()) m.insert({prefix, prefix});\n\
    \      |                          ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp73_i_03o.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = int; _Tp = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::__cxx11::basic_string<char>\
    \ > >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ int, std::__cxx11::basic_string<char> > >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type\
    \ = int]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n\
    /usr/include/c++/9/bits/stl_map.h:1168:28: note:   no known conversion for argument\
    \ 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const key_type&\u2019 {aka \u2018const int&\u2019}\n 1168 |       find(const\
    \ key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:1174:2:\
    \ note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare,\
    \ _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x))\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key\
    \ = int; _Tp = std::__cxx11::basic_string<char>; _Compare = std::less<int>; _Alloc\
    \ = std::allocator<std::pair<const int, std::__cxx11::basic_string<char> > >]\u2019\
    \n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))\n      |  ^~~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note:   template argument deduction/substitution\
    \ failed:\n/usr/include/c++/9/bits/s"
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    int len = string.length();\n\
    \    for (int i = 1; i < len; ++i) {\n        std::string prefix = string(0,i);\n\
    \        if (string.length() < i-1)\n            result.push_back(prefix);\n \
    \       else {\n            while (prefix != string.substr(i-1).substr(0,i))\n\
    \                prefix += prefix.substr(0,prefix.size()-1);\n            std::string\
    \ suffix = string.substr(i);\n            assert(suffix == string.substr(i-1).substr(0,i));\n\
    \            result.push_back(prefix + suffix);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93rpbl7n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmp93rpbl7n.cpp:8:40: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int,\
    \ int&)\u2019\n    8 |         std::string prefix = string(0,i);\n      |    \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  std::string prefix = \"\"\
    ;\n  for (auto& c : string) {\n    if (c == '+' || c == '-') {\n      prefix +=\
    \ c;\n    }\n    else {\n      if (prefix.length()) {\n        prefixes.push_back(prefix);\n\
    \      }\n      prefix = c;\n    }\n  }\n  if (prefix.length()) {\n    prefixes.push_back(prefix);\n\
    \  }\n  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpg73t5oua: /tmp/tmpg73t5oua.cpp:26: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    std::string prefix = \"\
    \";\n    bool prefix_found = false;\n    for (auto it = string.begin(); it !=\
    \ string.end(); it++) {\n        if (it + 1 != string.end()) {\n            prefix\
    \ = string(prefix, *it);\n            prefix_found = false;\n        }\n     \
    \   if (prefix_found) {\n            result.push_back(prefix);\n        }\n  \
    \      if (prefix == string) {\n            prefix_found = true;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = all_prefixes;\n\
    \    assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1v_5k_a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpn1v_5k_a.cpp:10:40: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (std::string&,\
    \ char&)\u2019\n   10 |             prefix = string(prefix, *it);\n      |   \
    \                                     ^\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    int l = string.length();\n\
    \    \n    // find first non-space character\n    int i = 0;\n    while (i < l\
    \ && std::isspace(string[i])) {\n        ++i;\n    }\n    \n    \n    // Find\
    \ longest prefix\n    int start = i;\n    while (i < l && !std::isspace(string[i]))\
    \ {\n        ++i;\n    }\n    \n    // Add prefix to list of prefixes if its length\
    \ is equal to or greater than that of longest prefix\n    while (i < l) {\n  \
    \      prefixes.emplace_back(string.substr(start, i - start));\n        start\
    \ = i;\n        while (i < l && !std::isspace(string[i])) {\n            ++i;\n\
    \        }\n    }\n    \n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpqj37cf83: /tmp/tmpqj37cf83.cpp:35: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    int start = 0, end =\
    \ 0, index = 0, len = string.length();\n    for (; start < len; start++) {\n \
    \       for (end = start; end < len; end++) {\n            if (string[end] ==\
    \ string[start]) {\n                break;\n            }\n            index++;\n\
    \        }\n        prefixes.push_back(string.substr(start, index));\n       \
    \ start = end;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpjxyvclmj: /tmp/tmpjxyvclmj.cpp:22: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // initialize a vector of length and each element will be length\
    \ of string\n    std::vector<std::string> prefixes;\n    prefixes.push_back(string.length());\n\
    \n    // looping through each character of string\n    for (int i = 0; i < string.length();\
    \ i++) {\n        // looping through each prefix of current length\n        for\
    \ (int j = 0; j < prefixes.size(); j++) {\n            // condition is length\
    \ if the prefix is equal to the current length\n            if (prefixes[j] ==\
    \ string.length()) {\n                // if condition is true, then add the prefix\
    \ to the vector\n                prefixes.push_back(string.substr(i, prefixes[j]));\n\
    \                break;\n            }\n        }\n    }\n\n    return prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjxigpze.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpnjxigpze.cpp:7:39: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(std::__cxx11::basic_string<char>::size_type)\u2019\
    \n    7 |     prefixes.push_back(string.length());\n      |                  \
    \                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnjxigpze.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const value_type&\u2019 {aka \u2018\
    const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018std::v"
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    for(int i = 0; i < string.length();\
    \ i++) {\n        prefixes.push_back(string(i, string.at(i)));\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlgf8m0v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpjlgf8m0v.cpp:7:50: error: no match\
    \ for call to \u2018(std::string {aka std::__cxx11::basic_string<char>}) (int&,\
    \ __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n\
    \    7 |         prefixes.push_back(string(i, string.at(i)));\n      |       \
    \                                           ^\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    int prefix_len = 0;\n\
    \    int prefix_count = 1;\n    while(prefix_len < string.size() ) {\n       \
    \ int diff = std::abs(string.size() - prefix_len);\n        if(diff > prefix_count)\
    \ {\n            prefixes.push_back(string.substr(0, prefix_len));\n         \
    \   prefix_len = string.size();\n            prefix_count = diff;\n        }\n\
    \        else {\n            prefix_count *= 2;\n        }\n    }\n    return\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu0g14s2x.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpu0g14s2x.cpp:9:55: error: call of\
    \ overloaded \u2018abs(std::__cxx11::basic_string<char>::size_type)\u2019 is ambiguous\n\
    \    9 |         int diff = std::abs(string.size() - prefix_len);\n      |   \
    \                                                    ^\nIn file included from\
    \ /usr/include/c++/9/bits/std_abs.h:38,\n                 from /usr/include/c++/9/cmath:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu0g14s2x.cpp:2:\n/usr/include/stdlib.h:840:12:\
    \ note: candidate: \u2018int abs(int)\u2019\n  840 | extern int abs (int __x)\
    \ __THROW __attribute__ ((__const__)) __wur;\n      |            ^~~\nIn file\
    \ included from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu0g14s2x.cpp:2:\n/usr/include/c++/9/bits/std_abs.h:56:3:\
    \ note: candidate: \u2018long int std::abs(long int)\u2019\n   56 |   abs(long\
    \ __i) { return __builtin_labs(__i); }\n      |   ^~~\n/usr/include/c++/9/bits/std_abs.h:61:3:\
    \ note: candidate: \u2018long long int std::abs(long long int)\u2019\n   61 |\
    \   abs(long long __x) { return __builtin_llabs (__x); }\n      |   ^~~\n/usr/include/c++/9/bits/std_abs.h:71:3:\
    \ note: candidate: \u2018constexpr double std::abs(double)\u2019\n   71 |   abs(double\
    \ __x)\n      |   ^~~\n/usr/include/c++/9/bits/std_abs.h:75:3: note: candidate:\
    \ \u2018constexpr float std::abs(float)\u2019\n   75 |   abs(float __x)\n    \
    \  |   ^~~\n/usr/include/c++/9/bits/std_abs.h:79:3: note: candidate: \u2018constexpr\
    \ long double std::abs(long double)\u2019\n   79 |   abs(long double __x)\n  \
    \    |   ^~~\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Define an iterator to iterate through all characters in the\
    \ string\n  auto it = string.begin();\n  std::vector<std::string> prefixes;\n\
    \  for (int i = 0; i < string.length(); ++i) {\n    // Get current character in\
    \ string and check if it is prefix of any other\n    // character\n    if (std::any_of(it,\
    \ string.end(), [&](char c) { return c == string[i]; })) {\n      // If current\
    \ character is a prefix of some other character then add the\n      // prefix\
    \ to prefix list\n      prefixes.push_back(std::string(it, string.end()));\n \
    \     // Skip current character\n      ++it;\n    } else {\n      // If current\
    \ character is not prefix of some other character then add\n      // the current\
    \ character itself to prefix list\n      prefixes.push_back(std::string{it, it});\n\
    \    }\n  }\n  // Return prefix list\n  return prefixes;\n}\nint main() {\n  \
    \  auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpxudjfr9g: /tmp/tmpxudjfr9g.cpp:29: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141373
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  // Initialize prefix vector with empty strings\n  std::vector<std::string>\
    \ prefixes;\n  \n  // Initialize prefix vector with all the input string\n  for\
    \ (char character : string) {\n    prefixes.push_back(character);\n  }\n  \n \
    \ // Reverse the order of the prefix vector\n  std::reverse(prefixes.begin(),\
    \ prefixes.end());\n  \n  // Return prefix vector\n  return prefixes;\n}\nint\
    \ main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) ==\
    \ (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4vp2z4n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpp4vp2z4n.cpp:10:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   10 |     prefixes.push_back(character);\n      |                        \
    \         ^\nIn file included from /usr/include/c++/9/vector:67,\n           \
    \      from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpp4vp2z4n.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n 1200 |     \
    \  push_back(value_type&& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::value_type&&\u2019 {aka \u2018std::__cxx11::basic_string<char>&&\u2019}\n\
    \ 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~"
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    for (int i=0;i<string.length();i++)\
    \ {\n        result.push_back(string+std::to_string(i));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpcpjdfb4l: /tmp/tmpcpjdfb4l.cpp:14: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141373
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n\tstd::vector<std::string> prefixes;\n\n\tsize_t index = 0;\n\tsize_t\
    \ prefixlen = 0;\n\twhile ((prefixlen = string.find_first_of(\" ()\", index))\
    \ != string::npos) {\n\t\tprefixes.emplace_back(string.substr(index, prefixlen));\n\
    \t\tindex = string.find_first_not_of(\" ()\", prefixlen + 1);\n\t}\n\tprefixes.emplace_back(string.substr(index));\n\
    \n\treturn prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n  \
    \  assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkbxmjefn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpkbxmjefn.cpp:9:61: error: \u2018\
    string\u2019 is not a class, namespace, or enumeration\n    9 |  while ((prefixlen\
    \ = string.find_first_of(\" ()\", index)) != string::npos) {\n      |        \
    \                                                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0, j = 0;\
    \ i <= string.length(); ++i, ++j) {\n    prefixes.push_back(string);\n    if (j\
    \ == i) return prefixes;\n    while (j > i) {\n      if (string[j] != string[i])\n\
    \        break;\n      prefixes.push_back(string);\n      j -= 1;\n    }\n  }\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpq1uzxvow: /tmp/tmpq1uzxvow.cpp:20: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> prefixes;\n    \n    for (size_t i =\
    \ string.length(); i > 0; i--) {\n        prefixes.push_back(string);\n      \
    \  \n        string += string[i - 1];\n    }\n    \n    return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmpiuwdkd8c: /tmp/tmpiuwdkd8c.cpp:18: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Return empty vector if string is empty or length is zero\n\
    \    if (string.length() == 0 || string.length() >= 10) return {};\n    std::vector<std::string>\
    \ prefixes;\n    size_t prefix_len = 0;\n    size_t prefix_idx = 0;\n    for (;\
    \ prefix_len <= string.length(); prefix_len++) {\n        // Return vector if\
    \ prefix length is equal to length of the input string\n        if (prefix_len\
    \ == string.length()) break;\n        // Add prefix of length prefix_len to the\
    \ list\n        prefixes.emplace_back(string.substr(prefix_idx, prefix_len));\n\
    \        // Update index for next iteration of this loop\n        prefix_idx +=\
    \ prefix_len;\n    }\n    return prefixes;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 10) > this->size() (which is 6)\n"
  stdout: ''
  timestamp: 1660141373
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  for (size_t i = 0, len =\
    \ string.length(); i < len; ++i) {\n    if (i > 0 && string[i] == string[i - 1])\
    \ continue;\n    prefixes.push_back(string[i]);\n  }\n  return prefixes;\n}\n\
    int main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"))\
    \ == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5ifd9tv.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpx5ifd9tv.cpp:8:33: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n    8 |     prefixes.push_back(string[i]);\n    \
    \  |                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx5ifd9tv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 "
  stdout: ''
  timestamp: 1660141372
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::string prefix;\n  std::vector<std::string> result;\n  for\
    \ (size_t i = 0; i < string.length(); ++i) {\n    prefix = prefix + string.substr(0,\
    \ i);\n    result.push_back(prefix);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp_uh_0s2s: /tmp/tmp_uh_0s2s.cpp:16: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141373
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::string ans = \"\";\n    for(size_t i = 1; i < string.length();\
    \ ++i) {\n        ans += string[i-1];\n        ans += string[i];\n    }\n    std::vector<std::string>\
    \ prefixes = split_string(ans, '_');\n    prefixes.erase(std::remove(prefixes.begin(),\
    \ prefixes.end(), \"\"), prefixes.end());\n    return prefixes;\n}\nint main()\
    \ {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkrfx9xm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpbkrfx9xm.cpp:10:41: error: \u2018\
    split_string\u2019 was not declared in this scope\n   10 |     std::vector<std::string>\
    \ prefixes = split_string(ans, '_');\n      |                                \
    \         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660141372
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    std::vector<std::string> result;\n    if(string.length() > 0)\n\
    \    {\n      result.push_back(string.substr(0, 1));\n      result.insert(result.end(),\
    \ all_prefixes(string.substr(1, string.length() - 1)), all_prefixes(string.substr(1,\
    \ string.length())));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw1o7gp3v.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > all_prefixes(std::string)\u2019:\n/tmp/tmpw1o7gp3v.cpp:9:135: error: no matching\
    \ function for call to \u2018std::vector<std::__cxx11::basic_string<char> >::insert(std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator, std::vector<std::__cxx11::basic_string<char> >, std::vector<std::__cxx11::basic_string<char>\
    \ >)\u2019\n    9 |       result.insert(result.end(), all_prefixes(string.substr(1,\
    \ string.length() - 1)), all_prefixes(string.substr(1, string.length())));\n \
    \     |                                                                      \
    \                                                                 ^\nIn file included\
    \ from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw1o7gp3v.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; typename std::_Vector_base<_Tp,\
    \ _Alloc>::pointer = std::__cxx11::basic_string<char>*; std::vector<_Tp, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  130 |     vector<_Tp, _Alloc>::\n\
    \      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++"
  stdout: ''
  timestamp: 1660141372
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n    // Create vector with all prefixes of the string except the empty\
    \ string itself\n    std::vector<std::string> all_prefixes;\n    for (size_t i\
    \ = 0; i < string.size(); i++) {\n        all_prefixes.emplace_back(string);\n\
    \        all_prefixes.back()[i] = 0;\n    }\n    // Add empty string to the beginning\n\
    \    all_prefixes.emplace_back();\n\n    // Perform recursive search for suffixes\n\
    \    for (size_t i = string.length()-2; i >= 0; i--) {\n        // Insert string\
    \ in the middle of existing prefixes\n        for (auto p : all_prefixes) {\n\
    \            p.insert(p.begin() + i, string[i]);\n            all_prefixes.emplace_back(std::move(p));\n\
    \        }\n        // Check for substring at index i + 2\n        for (size_t\
    \ j = 0; j < string.size(); j++) {\n            if (all_prefixes[j].substr(i+1).find(string[j])\
    \ == std::string::npos) {\n                // If it is not a prefix of any other\
    \ string\n                all_prefixes.pop_back();\n                --i;\n   \
    \             break;\n            }\n        }\n    }\n\n    return all_prefixes;\n\
    }\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\"\
    )) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141373
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n\tstd::vector<std::string> prefixes;\n\t\n\t// Iterate over all characters\
    \ in the string\n\tfor (size_t i = 0; i < string.length(); i++) {\n\t\t\n\t\t\
    // Add prefix of current character to all prefixes\n\t\tfor (size_t j = 0; j <\
    \ prefixes.size(); j++) {\n\t\t\tprefixes[j] = prefixes[j] + string[i];\n\t\t\
    }\n\t\t\n\t\t// If the string ends with current character,\n\t\t// then add that\
    \ prefix to prefixes\n\t\tif (string[i] == string[string.length() - 1]) {\n\t\t\
    \tprefixes.push_back(prefixes[prefixes.size() - 1]);\n\t\t}\n\t}\n\t\n\treturn\
    \ prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n    assert(candidate((\"\
    \")) == (std::vector<std::string>()));\n    assert(candidate((\"asdfgh\")) ==\
    \ (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\", (std::string)\"\
    asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"asdfgh\"\
    })));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660141373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> prefixes;\n  int start = 0;\n  for (int\
    \ i = 1; i < string.size(); i++) {\n    prefixes.push_back(string.substr(start,\
    \ i - start));\n    start = i;\n  }\n  prefixes.push_back(string.substr(start));\n\
    \  return prefixes;\n}\nint main() {\n    auto candidate = all_prefixes;\n   \
    \ assert(candidate((\"\")) == (std::vector<std::string>()));\n    assert(candidate((\"\
    asdfgh\")) == (std::vector<std::string>({(std::string)\"a\", (std::string)\"as\"\
    , (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"asdfg\", (std::string)\"\
    asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmplzul2vrt: /tmp/tmplzul2vrt.cpp:16: int main(): Assertion `candidate((""))
    == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660141373
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of all prefixes\
    \ from shortest to longest of the input string\nstd::vector<std::string> all_prefixes(std::string\
    \ string) {\n  std::vector<std::string> result;\n  if (string.empty()) {\n   \
    \ return result;\n  }\n  auto len = string.length();\n  for (int i = 0; i < len;\
    \ ++i) {\n    auto prefix = all_prefixes(string.substr(0, i));\n    result.insert(result.begin(),\
    \ prefix.begin(), prefix.end());\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = all_prefixes;\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((\"asdfgh\")) == (std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"as\", (std::string)\"asd\", (std::string)\"asdf\", (std::string)\"\
    asdfg\", (std::string)\"asdfgh\"})));\n    assert(candidate((\"WWW\")) == (std::vector<std::string>({(std::string)\"\
    W\", (std::string)\"WW\", (std::string)\"WWW\"})));\n}\n"
  status: Exception
  stderr: 'tmp68tsn041: /tmp/tmp68tsn041.cpp:19: int main(): Assertion `candidate(("asdfgh"))
    == (std::vector<std::string>({(std::string)"a", (std::string)"as", (std::string)"asd",
    (std::string)"asdf", (std::string)"asdfg", (std::string)"asdfgh"}))'' failed.

    '
  stdout: ''
  timestamp: 1660141373
