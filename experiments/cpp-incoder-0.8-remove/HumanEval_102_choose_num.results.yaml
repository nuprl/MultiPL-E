language: cpp
name: HumanEval_102_choose_num
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0);\n    assert(y > 0);\n    long ans = 0;\n    while (y != 0) {\n      \
    \  if (y & 1) {\n            if (ans < x)\n                ans = x;\n        \
    \    x = x + 1;\n        }\n        y = y >> 1;\n    }\n    if (ans < x)\n   \
    \     ans = x;\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx3taejfl: /tmp/tmpx3taejfl.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tlong\
    \ ans = -1;\n\t\n\tfor(long i = 1; i < y; ++i) {\n\t\tif((y % i) == 0){\n\t\t\t\
    long rem = y % i;\n\t\t\tans = i;\n\t\t\twhile(rem != 0){\n\t\t\t\trem /= 2;\n\
    \t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwcdqk3m3: /tmp/tmpwcdqk3m3.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n\
    \    if (x < y && x == y)\n        return -1;\n    if (x < y && x >= y)\n    \
    \    return x + 1;\n    if (y < x && y >= x)\n        return y + 1;\n    if (y\
    \ > x && x <= y)\n        return x - 1;\n    // if (x == y)\n    //    return\
    \ x + 1;\n    // if (x > y)\n    //    return x - 1;\n    // if (x < y)\n    //\
    \    return y - 1;\n    // if (y < x)\n    //    return y + 1;\n    // if (x <\
    \ y)\n    //    return y - 1;\n    // if (x > y)\n    //    return y + 1;\n  \
    \  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbeo7c409: /tmp/tmpbeo7c409.cpp:37: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x\
    \ < y) {\n        long max = y;\n        for(long i = x; i != y; i += 2)\n   \
    \         if(i >= max)\n                max = i;\n        return max;\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    long largest_num = x + y;\n    long greatest_num_greater_than_x\
    \ = y;\n    long greatest_num_greater_than_x_plus_1 = x + 1;\n    long greatest_num_greater_than_x_plus_2\
    \ = x + 2;\n    long greatest_num_greater_than_x_plus_3 = x + 3;\n    long greatest_num_greater_than_x_plus_4\
    \ = x + 4;\n    while (1) {\n        if (greatest_num_greater_than_x_plus_4 >=\
    \ y) {\n            break;\n        }\n        if (greatest_num_greater_than_x_plus_4\
    \ > greatest_num) {\n            greatest_num = greatest_num_greater_than_x_plus_4;\n\
    \        }\n        if (greatest_num_greater_than_x_plus_3 >= y) {\n         \
    \   break;\n        }\n        if (greatest_num_greater_than_x_plus_3 > greatest_num)\
    \ {\n            greatest_num = greatest_num_greater_than_x_plus_3;\n        }\n\
    \        if (greatest_num_greater_than_x_plus_2 >= y) {\n            break;\n\
    \        }\n        if (greatest_num_greater_than_x_plus_2 > greatest_num) {\n\
    \            greatest_num = greatest_num_greater_than_x_plus_2;\n        }\n \
    \       if (greatest_num_greater_than_x_plus_1 >= y) {\n            break;\n \
    \       }\n        if (greatest_num_greater_than_x_plus_1 > greatest_num) {\n\
    \            greatest_num = greatest_num_greater_than_x_plus_1;\n        }\n \
    \       if (greatest_num_greater_than_x >= y) {\n            break;\n        }\n\
    \        if (greatest_num_greater_than_x > greatest_num) {\n            greatest_num\
    \ = greatest_num_greater_than_x;\n        }\n        if (greatest_num_greater_than_x\
    \ <= y) {\n            break;\n        }\n        if (greatest_num_greater_than_x\
    \ <= greatest_num) {\n            greatest_num = greatest_num_greater_than_x;\n\
    \        }\n        greatest_num_greater_than_x_plus_1 = x + 1;\n        greatest_num_greater_than_x_plus_2\
    \ = x + 2;\n        greatest_num_greater_than_x_plus_3 = x + 3;\n        greatest_num_greater_than_x_plus_4\
    \ = x + 4;\n    }\n    return largest_num;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd398rigq.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpd398rigq.cpp:19:50: error: \u2018greatest_num\u2019 was\
    \ not declared in this scope\n   19 |         if (greatest_num_greater_than_x_plus_4\
    \ > greatest_num) {\n      |                                                 \
    \ ^~~~~~~~~~~~\n/tmp/tmpd398rigq.cpp:25:50: error: \u2018greatest_num\u2019 was\
    \ not declared in this scope\n   25 |         if (greatest_num_greater_than_x_plus_3\
    \ > greatest_num) {\n      |                                                 \
    \ ^~~~~~~~~~~~\n/tmp/tmpd398rigq.cpp:31:50: error: \u2018greatest_num\u2019 was\
    \ not declared in this scope\n   31 |         if (greatest_num_greater_than_x_plus_2\
    \ > greatest_num) {\n      |                                                 \
    \ ^~~~~~~~~~~~\n/tmp/tmpd398rigq.cpp:37:50: error: \u2018greatest_num\u2019 was\
    \ not declared in this scope\n   37 |         if (greatest_num_greater_than_x_plus_1\
    \ > greatest_num) {\n      |                                                 \
    \ ^~~~~~~~~~~~\n/tmp/tmpd398rigq.cpp:43:43: error: \u2018greatest_num\u2019 was\
    \ not declared in this scope\n   43 |         if (greatest_num_greater_than_x\
    \ > greatest_num) {\n      |                                           ^~~~~~~~~~~~\n\
    /tmp/tmpd398rigq.cpp:49:44: error: \u2018greatest_num\u2019 was not declared in\
    \ this scope\n   49 |         if (greatest_num_greater_than_x <= greatest_num)\
    \ {\n      |                                            ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    int m = 1;\n    int n = 1;\n    while (x <= y) {\n     \
    \   // Check if n is even\n        if ((n % 2) == 1) {\n            if (x > y)\
    \ {\n                // If n is even, check if it's greater or equal than x\n\
    \                if (m > n) {\n                    return -1;\n              \
    \  } else {\n                    return m;\n                }\n            } else\
    \ {\n                // If n is even, check if it's greater or equal than y\n\
    \                if (m > n) {\n                    return -1;\n              \
    \  } else {\n                    return m;\n                }\n            }\n\
    \        } else if (x > y) {\n            // If n is odd, check if it's greater\
    \ or equal than x\n            if (m > n) {\n                return -1;\n    \
    \        } else {\n                return m;\n            }\n        } else {\n\
    \            // If n is odd, check if it's greater or equal than y\n         \
    \   if (m > n) {\n                return -1;\n            } else {\n         \
    \       return m;\n            }\n        }\n        // Increment m\n        m++;\n\
    \        // Increment n\n        n++;\n    }\n    return -1;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpr0huphr3: /tmp/tmpr0huphr3.cpp:53: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  int\
    \ flag;\n  flag = 0;\n  while (x!=y&&flag == 0) {\n    int mid = (x+y)/2;\n  \
    \  if (mid > y) {\n      y = mid;\n    } else if (mid < x) {\n      x = mid;\n\
    \    } else {\n      flag = 1;\n    }\n  }\n  if (flag == 0) {\n    return -1;\n\
    \  }\n  return x;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbpqphr64: /tmp/tmpbpqphr64.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  long\
    \ maxn = -1;\n  for (long i = x; i <= y; i++) \n    if (i % 2 == 0) \n      if\
    \ (maxn > i) \n        maxn = i;\n  assert(maxn > -1);\n  return maxn;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3nzee8o2: /tmp/tmp3nzee8o2.cpp:13: long int choose_num(long int, long
    int): Assertion `maxn > -1'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Complete this function\n\tassert(x >= 0 && x <= y);\n\tlong z = x;\n\twhile(z\
    \ <= y) {\n\t\tif(z % 2 == 0)\n\t\t\tbreak;\n\t\tz++;\n\t}\n\treturn z % 2 ==\
    \ 0 ? z : -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpcpubytrr: /tmp/tmpcpubytrr.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x <= y && y > 0)\n        return (x == y) ? x : y;\n    if (x < y)\n      \
    \  return -1;\n    while (x <= y) {\n        long mod = x % y;\n        if (mod\
    \ < y) {\n            x = y + mod;\n        } else {\n            y = mod;\n \
    \       }\n    }\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp067jc3nu: /tmp/tmp067jc3nu.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  int\
    \ a=0, b=1;\n  while(y>=b) { a=(a+y); y=y%b; }\n  while(x > a && y >= b) { x=(x-x);\
    \ y=y%b; }\n  while(x>a) { x=(x-x); a=(a-a); y=y%b; }\n  if(x==a) { \n    return\
    \ x;\n  } else {\n    return -1;\n  }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpkv_z406p: /tmp/tmpkv_z406p.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0); assert(y > 0);\n    while (x < y) {\n        long mid = (x + y) / 2;\n\
    \        if (mid % 2 == 0)\n            x = mid;\n        else\n            y\
    \ = mid;\n    }\n    if (x == y)\n        return x;\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) {\n        return -1;\n    } else if (x == y) {\n        return x;\n\
    \    }\n    // x and y should be in the range [0, 10^9]\n    long res = 0;\n \
    \   long diff = abs(x - y);\n    if (diff >= 100) {\n        // x is less than\
    \ y\n        long t = x;\n        x = y;\n        y = t;\n    }\n    long p =\
    \ x;\n    long q = y;\n    long t = x;\n    while (p < y) {\n        // We will\
    \ find p and q\n        while (p < q) {\n            long mid = (p + q) / 2;\n\
    \            if (mid * mid < diff) q = mid;\n            else if (mid * mid >\
    \ diff) p = mid + 1;\n            else { // We will find the number in the range\n\
    \                long a = ((p * p + p) / 2) * p;\n                long b = ((q\
    \ * q + q) / 2) * q;\n                if (b < diff) res = a + (diff - b);\n  \
    \              else res = a + (b - diff);\n            }\n        }\n        //\
    \ Now we will find q\n        while (p < q) {\n            long mid = (p + q)\
    \ / 2;\n            if (mid * mid < diff) q = mid;\n            else if (mid *\
    \ mid > diff) p = mid + 1;\n            else { // We will find the number in the\
    \ range\n                long a = ((p * p + p) / 2) * p;\n                long\
    \ b = ((q * q + q) / 2) * q;\n                if (b < diff) res = a + (diff -\
    \ b);\n                else res = a + (b - diff);\n            }\n        }\n\
    \        // Now we will find p\n        while (p < q) {\n            long mid\
    \ = (p + q) / 2;\n            if (mid * mid < diff) q = mid;\n            else\
    \ if (mid * mid > diff) p = mid + 1;\n            else { // We will find the number\
    \ in the range\n                long a = ((p * p + p) / 2) * p;\n            \
    \    long b = ((q * q + q) / 2) * q;\n                if (b < diff) res = a +\
    \ (diff - b);\n                else res = a + (b - diff);\n            }\n   \
    \     }\n        // If p and q are the same number, then the function \n     \
    \   // returns x.\n        if (p == q) {\n            res = x;\n        }\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpf_vbsl7f: /tmp/tmpf_vbsl7f.cpp:72: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        return -1;\n    }\n    long max_num = x;\n    long ans =\
    \ -1;\n    while (y <= max_num) {\n        long mid = (x + y) / 2;\n        if\
    \ (mid * mid == mid) {\n            ans = mid;\n        }\n        if (mid * mid\
    \ > max_num) {\n            y = mid;\n        } else {\n            x = mid;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp53owf2x8: /tmp/tmp53owf2x8.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ result = 0;\n    long n = 1;\n    while (x <= y) {\n        if (n % 2 == 0)\
    \ {\n            result += n;\n        }\n        n *= 2;\n        x /= 2;\n \
    \   }\n    if (result == 0) {\n        result = -1; // if there's no such number\
    \ in the range, return -1.\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ != -1);\n    assert(y != -1);\n    long max = x;\n    long min = y;\n    while(true)\
    \ {\n        if (max == min) {\n            return -1;\n        }\n        max\
    \ = max*2 + 1;\n        if (max > y) {\n            max = y;\n        }\n    \
    \    if (max < x) {\n            min = x;\n        }\n        if (max >= min)\
    \ {\n            break;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8gl5obnj: /tmp/tmp8gl5obnj.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ i, n = (int)(y - x + 1);\n    long a = x / 2;\n    long b = x - a;\n    for\
    \ (i = 0; i <= n; i++) {\n        if (b > 0) {\n            b = b - 2;\n     \
    \       a = a - 2;\n        }\n        if (a < 2) {\n            return -1;\n\
    \        }\n        if (a % 2 == 0 && b % 2 == 0) {\n            return x + a;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpq46x25a8: /tmp/tmpq46x25a8.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  long\
    \ mid = x + (y - 1) / 2;\n  if (x > mid)\n    return choose_num(mid, y);\n  else\
    \ if (mid < y)\n    return choose_num(x, mid);\n  else \n    return mid;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp781se_9v: /tmp/tmp781se_9v.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) {\n        if (x % 2 == 0) {\n            return x;\n        }\n   \
    \     return y;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if\
    \ (x % 2 != 0 && y % 2 != 0) {\n        return x;\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptj8t3_3h: /tmp/tmptj8t3_3h.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) \n    {\n        long t = x;\n        x = y;\n        y = t;\n    }\n\
    \n    long z = x + y;\n    if (z <= 0) \n    {\n        return -1;\n    }\n\n\
    \    long m = x % y;\n    while (m > 0) \n    {\n        z = z + y;\n        if\
    \ (z <= 0) \n        {\n            return -1;\n        }\n        m = m % y;\n\
    \    }\n    return z;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ biggest = x;\n    while (y > biggest) {\n        if (y % 2 == 0) {\n       \
    \     if (biggest % 2 == 0)\n                return biggest;\n            biggest++;\n\
    \        }\n        y--;\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppu0balmf: /tmp/tmppu0balmf.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ ans = -1;\n    for (long i = 0; i < y; i++) {\n        if (x % 2 == 0 && y %\
    \ 2 == 0 && i + 1 < y) {\n            if (ans < x) {\n                ans = x;\n\
    \            } else if (ans < x + y) {\n                ans = x + y;\n       \
    \     }\n        } else {\n            if (ans < x) {\n                ans = x;\n\
    \            }\n        }\n        x /= 2;\n        y /= 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjih3646_: /tmp/tmpjih3646_.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans;\n    if (x > y) {\n        swap(x, y);\n    }\n    if (y == 0) {\n    \
    \    ans = x;\n    } else if (x < y) {\n        ans = choose_num(y + 1, x);\n\
    \    } else {\n        ans = choose_num(y - 1, x);\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2qeax8b.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpw2qeax8b.cpp:10:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   10 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpw2qeax8b.cpp:10:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw2qeax8b.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpw2qeax8b.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpw2qeax8b.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpw2qeax8b.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long max = x;\n    while (max <= y) {\n        max\
    \ += 2;\n    }\n    return max;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpiosuql31: /tmp/tmpiosuql31.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long xx = x;\n    long yy = y;\n    long res=-1;\n\
    \    while(xx<yy){\n        if(xx%2==0 && yy%2==0){\n            if(xx>yy)\n \
    \               xx+=2;\n            else\n                yy+=2;\n           \
    \ res=xx;\n        }\n        xx+=2;\n        yy+=2;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  long\
    \ z = x;\n  while (z < y) {\n    z = z * 2 + 1;\n  }\n  return z;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo6yq00iq: /tmp/tmpo6yq00iq.cpp:16: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tlong\
    \ left_num = x;\n\tlong right_num = y;\n\twhile (left_num < right_num) {\n\t\t\
    long mid = left_num + (right_num - left_num) / 2;\n\t\tif (mid % 2 == 0) {\n\t\
    \t\tright_num = mid;\n\t\t} else {\n\t\t\tleft_num = mid;\n\t\t}\n\t}\n\treturn\
    \ left_num;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ res = 0;\n    for (long i = (long)(x); i >= (long)(x-(y+2)); i--)\n        if\
    \ (i % 2 == 0)\n            ++res;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6k2r3xvo: /tmp/tmp6k2r3xvo.cpp:16: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && x < y);\n    long ans = x;\n    while (x < y) {\n        long mid =\
    \ (x + y) / 2;\n        if (mid % 2 == 0)\n            y = mid;\n        else\n\
    \            x = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x\
    \ <= y) {\n        long z = x;\n        x = y;\n        y = z;\n    }\n    \n\
    \    long ans = -1;\n    long x_low = x;\n    long x_high = x + 1;\n    \n   \
    \ long y_low = y;\n    long y_high = y + 1;\n    \n    while(x_low < x_high) {\n\
    \        while(y_low < y_high) {\n            if(x_low % 2 == y_low % 2) {\n \
    \               if((x_low + y_low) % 2 == 0) {\n                    ans = x_low;\n\
    \                    break;\n                }\n            }\n            \n\
    \            y_high--;\n        }\n        \n        x_low++;\n        x_high--;\n\
    \        \n        if(ans != -1) {\n            break;\n        }\n    }\n   \
    \ \n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx9l_xlkh: /tmp/tmpx9l_xlkh.cpp:45: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y)\n        swap(x, y);\n\n    long mid = (x + y) / 2;\n    long max_even\
    \ = (mid % 2 == 0) ? mid : -1;\n\n    if (mid <= x)\n        return max_even;\n\
    \n    if (mid > y)\n        return max_even;\n\n    if (max_even % 2 == 0)\n \
    \       return max_even;\n\n    long m1, m2, m3;\n    m1 = (mid - (max_even -\
    \ 1) / 2) % 2;\n    m2 = (mid - (max_even - 1) / 2) + (max_even / 2) % 2;\n  \
    \  m3 = m1 + (max_even / 2);\n\n    return ((m1 < m2 == m3 % 2) ? m2 : -1);\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr82q8zb.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpyr82q8zb.cpp:9:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n    9 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpyr82q8zb.cpp:9:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpyr82q8zb.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyr82q8zb.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpyr82q8zb.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpyr82q8zb.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) no"
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  //\
    \ Complete this function\n  // Reminder: In Python, x \u2264 y and y \u2264 2*x\n\
    \  // Time complexity: O(1)\n  // Space complexity: O(1)\n  \n  long even, odd,\
    \ result;\n\n  assert(x > 0 && y > 0);\n\n  if (y > 2 * x) {\n    return -1;\n\
    \  }\n  \n  even = x % 2;\n  odd = y % 2;\n  \n  if (even > odd) {\n    result\
    \ = x;\n  } else {\n    result = y;\n  }\n\n  return result;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphev9hxnb: /tmp/tmphev9hxnb.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y)\n        return -1;\n    // We are guaranteed that x > y \n    long\
    \ max_num = x + y;\n    long num_range = x - y;\n    while (x != max_num && num_range\
    \ % 2 == 0) {\n        max_num = x + y;\n        num_range = x - y;\n        x++;\n\
    \    }\n    if (x == max_num && num_range % 2 == 0)\n        return x;\n    else\n\
    \        return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpojkqweeu: /tmp/tmpojkqweeu.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ temp;\n    temp = y;\n    while(temp < x){\n        if(temp % 2 == 0){\n   \
    \         temp = temp + 1;\n        }\n        else{\n            temp++;\n  \
    \      }\n    }\n    if(temp - x > y){\n        return temp;\n    }\n    else\
    \ if(temp - x <= y){\n        return -1;\n    }\n    else return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9g5qpv3o: /tmp/tmp9g5qpv3o.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x\
    \ >= 0 && y >= 0);\n  // Write your code here\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1ksmrduk: /tmp/tmp1ksmrduk.cpp:13: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  if\
    \ (x >= y)\n    return -1;\n  long left_odd_even = (x - y) / 2;\n  // If x==y,\
    \ then the number in range [x, y] inclusive is the number we want.\n  if (left_odd_even\
    \ == 0)\n    return x;\n  // Otherwise check if x is even and y is odd.\n  return\
    \ choose_num(x, y - left_odd_even);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpuzr9bnbr: /tmp/tmpuzr9bnbr.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ m = (int)(x * y);\n    // If m is odd then x is a bigger even number and y is\n\
    \    // smaller. Otherwise x is bigger and y is a bigger even number\n    long\
    \ ans = x;\n    if (m % 2 == 1) ans = y;\n    return ans;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpt1191zt7: /tmp/tmpt1191zt7.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    if (x == y) return -1;\n    long mid = x + (y - x) / 2;\n\
    \    long left = choose_num(x, mid);\n    long right = choose_num(mid + 1, y);\n\
    \    return left > right ? left : right;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpltzwhokl: /tmp/tmpltzwhokl.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Write your code here.\n\tint i,num[1000] = {0};\n\tfor(i = x - 2 ; i >= 0 &&\
    \ i <= y; ++i)\n\t\tnum[i] = num[i] + (i%2 == 0);\n\tint n = x - 1; //for choosing\
    \ smaller number\n\tfor(i = y - 1 ; i >= 0 && i <= x; --i)\n\t\tnum[i] = num[i]\
    \ + (i%2 == 0);\n\tint res = num[0]; //first even number in range\n\tfor(int i\
    \ = 1 ; i < n ; ++i) //choosing larger numbers\n\t\tres = max(res,num[i]);\n\t\
    return res;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpefmkhtxe.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpefmkhtxe.cpp:17:9: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |   res = max(res,num[i]);\n\
    \      |         ^~~\n      |         std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpefmkhtxe.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  //\
    \ Your code goes here.\n  return 0;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp22de0kt4: /tmp/tmp22de0kt4.cpp:13: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x>y)\n\
    \        swap(x, y);\n    \n    long ans = -1;\n    \n    for(long i = x; i <=\
    \ y; i+= 2) {\n        if(i%2 == 0) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    \n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qpg_3ri.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp3qpg_3ri.cpp:9:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n    9 |         swap(x, y);\n      |         ^~~~\n/tmp/tmp3qpg_3ri.cpp:9:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp3qpg_3ri.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3qpg_3ri.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3qpg_3ri.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp3qpg_3ri.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) no"
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n   long\
    \ even = x % 2 == 0;\n   long odd = !even;\n   long ans = -1;\n   long max_num;\n\
    \   long min_num;\n   if (even) {\n      max_num = x;\n   } else {\n      min_num\
    \ = y;\n   }\n   for (long i = min_num; i <= max_num; i++) {\n      if (i % 2\
    \ == 0) {\n         even = even && i % 2 == 0;\n         ans = i;\n         if\
    \ (even) {\n            break;\n         }\n      }\n   }\n   return ans;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1drtke_k: /tmp/tmp1drtke_k.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  //\
    \ Your code here\n  assert(x >= 0 && y > 0 && x < y);\n  if (y % 2 == 0)\n   \
    \ return y;\n  if (x % 2 == 0)\n    return x;\n  long temp = y / 2;\n  long temp2\
    \ = x / 2;\n  long temp3 = temp * temp2;\n  if (temp3 < temp2)\n    return temp3;\n\
    \  else\n    return temp2;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpk0kztmhv: /tmp/tmpk0kztmhv.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ maxx = x;\n    long maxy = y;\n    long maxnum = x + y;\n    while (maxnum !=\
    \ 1) {\n        if (maxnum % 2 == 0) {\n            maxnum = (maxnum / 2);\n \
    \       }\n        else {\n            maxnum = (maxnum / 2) + 1;\n        }\n\
    \        if (maxnum > maxy) {\n            maxy = maxnum;\n        }\n       \
    \ if (maxnum < maxx) {\n            maxx = maxnum;\n        }\n    }\n    return\
    \ maxx;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpslo78blc: /tmp/tmpslo78blc.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098845
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Write your code here.\n\tif(x==y){return x;}\n\tif(x<y){x=y;}\n\tint s=x%y;\n\
    \tif(x>=y){return -1;}\n\tif(s==0){return x;} //if x is even, s would be even\
    \ too.\n\telse{\n\t\ty=y;\n\t\tx=x-y;\n\t\ts=s-1;\n\t}\n\tlong k=x;\n\tlong temp=s;\n\
    \tlong count=1; // for debugging\n\twhile(temp>0){\n\t\tif((k%2)==0){\n\t\t\t\
    count=count*2;\n\t\t}\n\t\tk=k/2;\n\t\ttemp=temp/2;\n\t}\n\t\n\tlong res=y//((count%2)==0)?x:-1;\n\
    \treturn res;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjg6mtxlh.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpjg6mtxlh.cpp:31:2: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018return\u2019\n   31 |  return res;\n      |  ^~~~~~\n/tmp/tmpjg6mtxlh.cpp:32:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   32 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660098845
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1, flag = 0, n;\n    if(x<y) { n = (x - y + 1) / 2; flag = 1; }\n   \
    \ else { n = (y - x + 1) / 2; flag = -1; }\n    if(flag == 1) ans = n;\n    else\
    \ if(flag == -1) ans = y;\n    else if(n%2 == 0) ans = x;\n    else ans = y;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplajbzv5s: /tmp/tmplajbzv5s.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098844
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x < y) return -1;\n    long a = x, b = y;\n    while (a % 2 == 0) {\n     \
    \   a = a + 1;\n        b += 1;\n    }\n    while (b % 2 == 0) {\n        b =\
    \ b + 1;\n        a -= 1;\n    }\n    if (a < b) return a;\n    else return b;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpec0zfhpb: /tmp/tmpec0zfhpb.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ m = 0;\n    long a = 0;\n    while (a <= y) {\n        if (x % a == 0) {\n \
    \           int t = a;\n            a = x;\n            x = t;\n            m++;\n\
    \        }\n        x++;\n    }\n    return m;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098847
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ m = (x + y) / 2; // middle number\n    long n = (x - y) / 2; // new middle number\n\
    \    int a = m % 2, b = n % 2, c = x % 2, d = y % 2;\n    long result = -1;\n\
    \    while(a < b) {\n        if((m*a+n)%2 == 0 && c*c+d)%2 == 0) {\n         \
    \   result = m*a+n;\n        }\n        m += 2;\n        n -= 2;\n        a =\
    \ m % 2, b = n % 2, c = x % 2, d = y % 2;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpse6n19lv.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpse6n19lv.cpp:13:36: error: expected primary-expression\
    \ before \u2018%\u2019 token\n   13 |         if((m*a+n)%2 == 0 && c*c+d)%2 ==\
    \ 0) {\n      |                                    ^\n"
  stdout: ''
  timestamp: 1660098846
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    while(1)\
    \ {\n        long z = x + y;\n        if(z >= 2 * x)\n            return x;\n\
    \        x = z + 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpseypcrgo: /tmp/tmpseypcrgo.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        return -1;\n    }\n    int ans = x;\n    for (int i = 1;\
    \ i <= y / 2; i++) {\n        if ((y % i) == 0) {\n            ans = i;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpuqprmt_x: /tmp/tmpuqprmt_x.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ a = (int) sqrt(x);\n    while (a * a <= y)\n        a = a * 2;\n    long t =\
    \ 0;\n    for (int i = a; i <= y; i += 2)\n        t = i;\n    return t;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8jazh1hb: /tmp/tmp8jazh1hb.cpp:19: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tint\
    \ min = (x < y) ? x : y;\n\tint max = (x > y) ? x : y;\n\tint mid = (min + max)\
    \ / 2;\n\tint ans = -1;\n\t// Here I used the fact that if x is odd then x + y\
    \ yields even \n\t// number. So if min is odd and max is even, then mid = min\
    \ / 2 \n\t// will always yield even. Similarly if min is even and max is odd,\n\
    \t// then mid = min / 2 will always yield odd.\n\tif (min % 2 == 0 && max % 2\
    \ == 0) {\n\t\tans = mid;\n\t} else if (min % 2 == 1 && max % 2 == 1) {\n\t\t\
    ans = (mid + min) / 2;\n\t} else if (min % 2 == 0) {\n\t\tans = (mid + min) /\
    \ 2;\n\t} else if (max % 2 == 0) {\n\t\tans = mid + min;\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp36g51f7q: /tmp/tmp36g51f7q.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) {\n        std::swap(x, y);\n    }\n    while (true) {\n        if (x\
    \ % 2 == 0 && y % 2 == 0) {\n            return x;\n        }\n        x /= 2;\n\
    \        y /= 2;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjhfz1qcm: /tmp/tmpjhfz1qcm.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tassert(x\
    \ >= 0 && x <= y);\n\tlong ans = 0;\n\twhile(y > 0) {\n\t\tif((x % 2) == 0) ans\
    \ += 1;\n\t\tx /= 2;\n\t\ty /= 2;\n\t}\n\tif(ans == 0) ans = -1;\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7atv2c1s: /tmp/tmp7atv2c1s.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x==y)\
    \ return -1;\n    if(x<y) return choose_num(y-1, x);\n    else return choose_num(x-1,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp235zvo35: /tmp/tmp235zvo35.cpp:14: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n   assert(x\
    \ > 0);\n   assert(y > 0);\n   if (x >= y)\n      return -1;\n   while (true)\
    \ {\n      long mid = (x + y) / 2;\n      if (mid % 2 == 0)\n         return mid;\n\
    \      else if (mid < x)\n         y = mid;\n      else\n         x = mid;\n \
    \  }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2oh3x0bm: /tmp/tmp2oh3x0bm.cpp:26: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ m = y;\n    while (x > m) {\n        if (x % 2 != 0) {\n            return m;\n\
    \        }\n        m += m;\n    }\n    if (x != 0 && y % 2 != 0) {\n        return\
    \ -1;\n    }\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2gs8dq77: /tmp/tmp2gs8dq77.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    \
    \ assert(x >= 0 && y >= 0);\n     long max = 1;\n     while (max <= x) {\n   \
    \      max = max * 2;\n     }\n     while (max <= y) {\n         max = max * 2\
    \ + 1;\n     }\n     return max;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4fcskr_f: /tmp/tmp4fcskr_f.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x == y) return x;\n    if (x < y) return choose_num(y, x);\n    \n    // we\
    \ know that both numbers are positive here, so we do not need to\n    // handle\
    \ negative case. So, let the condition be only x\n    for (long i = (x >> 1);\
    \ i >= y; i = (i >> 1)) {\n        if (x & i == 0) return i;\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6w8yfh09: /tmp/tmp6w8yfh09.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = INT_MIN;\n    while (x != y && ans <= y) {\n        if ((x % 2) == 0)\
    \ {\n            ans = x + 1;\n        } else {\n            ans = x - 1;\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  int\
    \ x_even = 0;\n  int y_even = 0;\n  int x_odd = 0;\n  int y_odd = 0;\n  long max_even\
    \ = x;\n  long max_odd = y;\n  // Check if x is even\n  if (x % 2 == 0) {\n  \
    \  x_even = 1;\n  }\n  // Check if y is even\n  if (y % 2 == 0) {\n    y_even\
    \ = 1;\n  }\n  // Check if x is odd\n  if (x % 2 != 0) {\n    x_odd = 1;\n  }\n\
    \  // Check if y is odd\n  if (y % 2 != 0) {\n    y_odd = 1;\n  }\n  // If x or\
    \ y is even and x is larger than y, then x is the biggest even\n  // number that\
    \ is smaller than or equal to y.\n  if (x_even && y_even && x_odd > y_odd) {\n\
    \    max_even = y;\n  }\n  // If x or y is even and x is smaller than y, then\
    \ x is the biggest even\n  // number that is bigger than or equal to y.\n  else\
    \ if (x_even && y_even && x_even < y_odd) {\n    max_even = x;\n  }\n  // If x\
    \ or y is odd and the other is bigger than x, then x is the biggest\n  // odd\
    \ number that is smaller than or equal to y.\n  else if (x_odd && y_odd && x_odd\
    \ < y_even) {\n    max_odd = x;\n  }\n  // If x or y is odd and the other is smaller\
    \ than x, then x is the biggest\n  // odd number that is bigger than or equal\
    \ to y.\n  else if (x_odd && y_odd && x_odd > y_even) {\n    max_odd = y;\n  }\n\
    \  // If none of the above conditions applies, then return -1.\n  if (x_even &&\
    \ y_even && x_odd > y_odd) {\n    return -1;\n  }\n  else if (x_even && y_even\
    \ && x_even < y_odd) {\n    return max_even;\n  }\n  else if (x_odd && y_odd &&\
    \ x_odd < y_even) {\n    return max_odd;\n  }\n  else {\n    return -1;\n  }\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmps5vxs2v3: /tmp/tmps5vxs2v3.cpp:66: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ num = 0;\n    for (long i = 0; i <= x; i++) {\n        if ((i % 2 == 0) && i\
    \ >= y) {\n            num = i;\n        }\n    }\n    return num;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpl4_ycfxt: /tmp/tmpl4_ycfxt.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ m = 1;\n    while (m * m <= x && m * m < y) {\n        m++;\n    }\n    for\
    \ (long i = m * m - 1; i >= x; i /= 2) {\n        if (i % 2 == 0) {\n        \
    \    return i;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0l4m4rk9: /tmp/tmp0l4m4rk9.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long result = 0;\n    while(x<y) {\n        if(x%2\
    \ == 0 && y%2 == 0)\n        {\n            while(x%2 == 0 && y%2 != 0){\n   \
    \             x++;\n                y--;\n            }\n        }\n        else\
    \ if(y%2 == 0)\n        {\n            while(x%2 != 0 && y%2 != 0){\n        \
    \        x--;\n                y--;\n            }\n        }\n        else{\n\
    \            while(x%2 != 0 && y%2 != 0){\n                x--;\n            \
    \    y++;\n            }\n        }\n        result += (long)x;\n        result\
    \ += (long)y;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x\
    \ >= 0 && y >= 0);\n  long max = x;\n  while (max <= y) {\n    if (max % 2 ==\
    \ 0)\n      max = max + 1;\n    else\n      max += 2;\n  }\n  return max;\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4yt3in48: /tmp/tmp4yt3in48.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  long\
    \ mid = (x + y) / 2;\n  long left_num = x - mid;\n  long right_num = y - mid;\n\
    \  if (left_num <= right_num) {\n    long num = choose_num(x, mid);\n    if (num\
    \ < -1) return -1;\n    return num;\n  } else {\n    long num = choose_num(mid\
    \ + 1, y);\n    if (num < -1) return -1;\n    return num;\n  }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Complete the implementation\n\tlong min = x;\n\tlong max = y;\n\tlong ans =\
    \ INT_MAX;\n\tlong i;\n\twhile (min <= max) {\n\t\ti = min;\n\t\tmin = min + 1;\n\
    \t\twhile (i <= max) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tans = i;\n\t\t\t\tmax\
    \ = max - 1;\n\t\t\t} else {\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp33wbzq99: /tmp/tmp33wbzq99.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ TODO: implement me\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdtcbs6j4: /tmp/tmpdtcbs6j4.cpp:13: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = 0;\n    if(x > y) {\n        std::swap(x, y);\n    }\n    for(long i =\
    \ x; i <= y; i++){\n        if(i%2 == 0 && ans%2 == 0) {\n            return i;\n\
    \        }\n        ans += i;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpr3gq3_q6: /tmp/tmpr3gq3_q6.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x < 0 || y < 0) return -1;\n    long ans = 0;\n    while (x != 0) {\n     \
    \   if (x & 1)\n            ans = max(ans, x);\n        x >>= 1;\n    }\n    while\
    \ (y != 0) {\n        if (y & 1)\n            ans = max(ans, y);\n        y >>=\
    \ 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ygh_gri.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp9ygh_gri.cpp:12:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   12 |             ans =\
    \ max(ans, x);\n      |                   ^~~\n      |                   std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp9ygh_gri.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n/tmp/tmp9ygh_gri.cpp:17:19: error: \u2018max\u2019\
    \ was not declared in this scope; did you mean \u2018std::max\u2019?\n   17 |\
    \             ans = max(ans, y);\n      |                   ^~~\n      |     \
    \              std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9ygh_gri.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  long\
    \ max_num = x; // initialize max_num as x\n  // loop until max_num is not less\
    \ than or equal to y\n  while (max_num < y) {\n    if (max_num % 2 == 0 && max_num\
    \ != x)\n      max_num = max_num - 1;\n    else if (max_num % 2 != 0 && max_num\
    \ != y)\n      max_num = max_num + 1;\n    else\n      return max_num;\n  }\n\
    \  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0jx5iu4v: /tmp/tmp0jx5iu4v.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y)\n        return choose_num(y, x);\n\n    // First check if the range\
    \ is empty.\n    if (x <= 0 || y <= 0)\n        return -1;\n\n    // If x is even,\
    \ return x.\n    if (x % 2 == 0)\n        return x;\n\n    // If y is even, return\
    \ y.\n    if (y % 2 == 0)\n        return y;\n\n    // The range of even numbers\
    \ is [x, y].\n    // We need to find the number which has higher value if x is\
    \ bigger than y\n    // and x is even. We can do this by binary searching.\n \
    \   long left_x = x;\n    long right_x = y;\n\n    long mid = (left_x + right_x)\
    \ / 2;\n    long left_y = choose_num(mid, left_x);\n    long right_y = choose_num(mid,\
    \ right_x);\n\n    if (left_y > right_y) {\n        long result = choose_num(left_x,\
    \ right_y);\n        if (result > x)\n            return result;\n        return\
    \ choose_num(y, result);\n    }\n    return choose_num(y, left_y);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjb0y4ljw: /tmp/tmpjb0y4ljw.cpp:43: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ max_val, min_val;\n    if (x <= y)\n        return -1;\n    max_val = x;\n \
    \   min_val = y;\n    while (max_val < min_val + 2) {\n        int mid = (max_val\
    \ + min_val) / 2;\n        if (mid * mid <= max_val * max_val)\n            mid++;\n\
    \        if (mid * mid > max_val * max_val)\n            mid--;\n        if (mid\
    \ * mid > max_val * max_val)\n            return -1;\n        else if (mid * mid\
    \ == max_val * max_val)\n            return mid;\n        else if (mid * mid <\
    \ max_val * max_val)\n            min_val = mid + 1;\n        else\n         \
    \   max_val = mid - 1;\n    }\n    return max_val;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgem9suye: /tmp/tmpgem9suye.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x\
    \ < y)\n        std::swap(x, y);\n    long num = x;\n    for(long i = y; i > 0;\
    \ --i) {\n        num = num * x % i;\n    }\n    return num;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpz6yzd79v: /tmp/tmpz6yzd79v.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y)\n        return -1;\n    if (x == 0)\n        return x;\n    long ans\
    \ = 0;\n    long m = 1;\n    long q = 0;\n    while (m <= y) {\n        q = m\
    \ / x;\n        if (q * x != m) {\n            ans = m;\n            break;\n\
    \        }\n        ans = m;\n        m += 1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx5ywig_k: /tmp/tmpx5ywig_k.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && x < y);\n    assert(y >= x);\n    long max_even = x;\n    long ans =\
    \ y;\n    while (max_even % 2 == 0 && max_even > 1) {\n        ans = max_even\
    \ + 1;\n        max_even /= 2;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdpny2mwl: /tmp/tmpdpny2mwl.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n// your\
    \ code goes here\n  assert(x > 0); \n  assert(y > 0);\n  long ans = -1;\n  for(long\
    \ i = x; i <= y; i++) {\n    if(i%2 == 0) {\n      ans = i;\n      break;\n  \
    \  }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbvqg6orn: /tmp/tmpbvqg6orn.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098847
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ result = 0;\n    while (x < y) {\n        if (x%2 == 0) {\n            x++;\n\
    \        }\n        else if (y%2 == 0) {\n            y++;\n        }\n      \
    \  else {\n            result |= x;\n            break;\n        }\n    }\n  \
    \  if (x == y) {\n        result = -1;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyqjq1whf: /tmp/tmpyqjq1whf.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ m = 1;\n    long ans = 0;\n    while (x < y) {\n        ans = m;\n        m\
    \ *= x + 1;\n        if (m > y)\n            m = y;\n        x++;\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxgbp8qwc: /tmp/tmpxgbp8qwc.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here.\n    long res;\n    res = std::max(x,y);\n    while(res\
    \ >= x){\n        res-=y;\n        y++;\n    }\n    while(res < y){\n        res+=x;\n\
    \        x--;\n    }\n    return res;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmph7ix0r_9: /tmp/tmph7ix0r_9.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ lower = x < y? x : y;\n    long upper = x > y? x : y;\n    long mid;\n    while\
    \ (lower != upper) {\n        // find mid point of x and y\n        mid = (lower\
    \ + upper) / 2;\n        // if mid is even, add 2 to lower, else add 1 to upper\n\
    \        lower = (mid & 1) == 0 ? mid + 2 : mid+1;\n        upper = mid;\n   \
    \ }\n    if (lower > y || lower < y) return -1;\n    return lower;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        long t = x;\n        x = y;\n        y = t;\n    }\n   \
    \ // If there are no even numbers than return -1\n    if (x % 2 == 0) {\n    \
    \    return -1;\n    }\n    // If there are no odd numbers than return -1\n  \
    \  if (y % 2 == 0) {\n        return -1;\n    }\n    // If x < y then x must be\
    \ less than or equal to y\n    if (x < y) {\n        return -1;\n    }\n    long\
    \ ans = x + y;\n    while (x % 2 == 0) {\n        x = x / 2;\n        y = y +\
    \ x;\n    }\n    while (y % 2 == 0) {\n        y = y / 2;\n        x = x + y;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3jlcl4wj: /tmp/tmp3jlcl4wj.cpp:38: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x <= y && y <= 2*x) {\n        return y;\n    }\n    long mid = (x + y) / 2;\n\
    \    if (choose_num(x, mid) == -1) {\n        return -1;\n    }\n    return choose_num(mid,\
    \ y);\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2hj9tmmp: /tmp/tmp2hj9tmmp.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098848
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    long xtemp = x;\n    long ytemp = y;\n    long bignum =\
    \ 0;\n    while (x != 0 || y != 0) {\n        if (y % 2 == 0) {\n            x\
    \ = x ^ ytemp;\n            y = y >> 1;\n        } else {\n            y = y ^\
    \ xtemp;\n            x = x >> 1;\n        }\n        bignum = bignum * 2 + x;\n\
    \        xtemp = xtemp * 2 + y;\n        ytemp = ytemp * 2 + x;\n    }\n    return\
    \ bignum;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098853
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\nassert(x\
    \ > 0 && y > 0);\n// Initialize a flag to false\nbool flag = false;\n// Initialize\
    \ an array for storing result\nlong arr[x];\n// Initialize a variable to store\
    \ current index of arr\nlong idx = 0;\n// Initialize a variable to store current\
    \ value of x\nlong xval = x;\n// Initialize a variable to store current value\
    \ of y\nlong yval = y;\n// Check if x is even or odd\nif (x%2 == 0) // Is x even?\n\
    {\n    // Set flag to true\n    flag = true;\n    // Initialize a variable to\
    \ store the odd value of x\n    long odd_val = x;\n    // Loop for x from 2 to\
    \ xval\n    for(long i = 2; i <= xval; i++)\n    {\n        // If arr[idx] is\
    \ even then increment idx by 1\n        // and store it in odd variable\n    \
    \    if(arr[idx] == 0)\n        {\n            odd_val += i;\n            arr[idx]\
    \ = odd_val % 2;\n        }\n        // If arr[idx] is odd then increment idx\
    \ by 1\n        // and store it in even variable\n        else\n        {\n  \
    \          arr[idx] = (i+1)%2;\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmydkyvk.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpgmydkyvk.cpp:44:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   44 | int main() {\n      |     \
    \       ^\n/tmp/tmpgmydkyvk.cpp:54:1: error: expected \u2018}\u2019 at end of\
    \ input\n   54 | }\n      | ^\n/tmp/tmpgmydkyvk.cpp:7:33: note: to match this\
    \ \u2018{\u2019\n    7 | long choose_num(long x, long y) {\n      |          \
    \                       ^\n/tmp/tmpgmydkyvk.cpp:54:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   54 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098848
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ a = x;\n    long b = y;\n    while(a < b) {\n        if(a%2==0){\n         \
    \   a = a+1;\n        }\n        else {\n            a = a-1;\n        }\n   \
    \     if(b%2==0){\n            b = b+1;\n        }\n        else {\n         \
    \   b = b-1;\n        }\n    }\n    return a;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098854
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n// Your\
    \ code goes here.\nassert(x >= 0 && x < 1000);\nassert(y >= 0 && y < 1000);\n\
    long result = -1;\nif (x == 0)\n    return y;\nelse if (y == 0)\n    return x;\n\
    else {\n    while (x % 2 == 0 && y % 2 == 0) {\n        x /= 2;\n        y /=\
    \ 2;\n    }\n    if (x % 2 == 0)\n        return y;\n    else\n        return\
    \ x;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocqjpqzz.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpocqjpqzz.cpp:26:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   26 | int main() {\n      |     \
    \       ^\n/tmp/tmpocqjpqzz.cpp:36:1: error: expected \u2018}\u2019 at end of\
    \ input\n   36 | }\n      | ^\n/tmp/tmpocqjpqzz.cpp:7:33: note: to match this\
    \ \u2018{\u2019\n    7 | long choose_num(long x, long y) {\n      |          \
    \                       ^\n"
  stdout: ''
  timestamp: 1660098849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    while\
    \ (x >= y) {\n        if (x % 2 == 0 && y % 2 == 0) {\n            return (x *\
    \ y) / 2;\n        }\n        else {\n            x = x + 1;\n            y =\
    \ y + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5o1bq81p: /tmp/tmp5o1bq81p.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0 && x != y);\n    long mid = (x + y)/2;\n    long left = mid - 1;\n\
    \    long right = mid;\n    long ans = -1;\n    while (left >= 0 && left <= right\
    \ && ans == -1) {\n        if (left % 2 == 0) {\n            ans = left;\n   \
    \         left--;\n        } else {\n            ans = right;\n            right++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpk3x1c9j5: /tmp/tmpk3x1c9j5.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ result = -1;\n    assert(x >= 0 && y >= 0 && x < y);\n    if (y <= x) {\n  \
    \      result = 0;\n        return result;\n    }\n    // x > 0\n    if (x ==\
    \ y) {\n        long mid = y / 2;\n        result = (mid * 2);\n        return\
    \ result;\n    }\n    // x > y\n    if (x == y / 2) {\n        result = choose_num(x,\
    \ y / 2);\n        return result;\n    }\n    // x is even\n    if (x % 2 == 0)\
    \ {\n        long even = x / 2;\n        result = even + choose_num(even, y);\n\
    \        return result;\n    }\n    // x is odd\n    else {\n        long odd\
    \ = y / 2;\n        result = choose_num(odd, x) + 1;\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1rg8no36: /tmp/tmp1rg8no36.cpp:9: long int choose_num(long int, long
    int): Assertion `x >= 0 && y >= 0 && x < y'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ your code goes here\n    long ans = -1;\n    if(x >= y){\n        return -1;\n\
    \    }\n    for(int i = x + 1; i < y; i++){\n        if((i%2)==0){\n         \
    \   ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdusd8y1d: /tmp/tmpdusd8y1d.cpp:24: int main(): Assertion `candidate((33),
    (12354)) == (12354)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && x < y);\n    long ans = -1;\n    for (long i = x; i <= y; ++i) {\n \
    \       if (i % 2 == 0) continue;\n        ans = i;\n        break;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp0ezjlmhy: /tmp/tmp0ezjlmhy.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x>=y)\
    \ {\n        return -1;\n    }\n    if(x<0) {\n        return -1;\n    }\n   \
    \ long lower = x;\n    long upper = y;\n    while(true) {\n        // This condition\
    \ takes care of the case when x >= y.\n        if(lower == upper) {\n        \
    \    return lower;\n        }\n        \n        if(lower % 2 == 0) {\n      \
    \      long mid = lower + lower;\n            while(true) {\n                mid\
    \ = mid*2+1;\n                if((mid>=upper) || (mid<0)) return -1;\n       \
    \         if(mid % 2 == 0) {\n                    lower = mid;\n             \
    \   } else {\n                    break;\n                }\n            }\n \
    \       } else {\n            long mid = lower + upper;\n            while(true)\
    \ {\n                mid = mid*2+1;\n                if((mid>=upper) || (mid<0))\
    \ return -1;\n                if(mid % 2 == 0) {\n                    upper =\
    \ mid;\n                } else {\n                    break;\n               \
    \ }\n            }\n        }\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqr_tp63_: /tmp/tmpqr_tp63_.cpp:49: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ z = 0;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 0;\n\
    \    // the initial value of z is zero and it is impossible for x \n    // to\
    \ be even and y to be odd since z is already even.\n    // Therefore we keep moving\
    \ z until it is odd, at which point we \n    // return -1, because there's no\
    \ such number.\n    while ((z%2) == 0) {\n        w = x%y;\n        if (w == 0)\
    \ {\n            return -1;\n        }\n        z = z + w/y;\n        x = x;\n\
    \        y += 1;\n    }\n    long x0 = x;\n    long x1 = y;\n    while (x1 >=\
    \ x0) {\n        t = x0 - x1;\n        // t will be negative if x0 is odd.\n \
    \       if (t > 0 && t % 2 == 0) {\n            u = t;\n            break;\n \
    \       }\n        v = x1;\n        x1 = x0 - t;\n    }\n    return u;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098855
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tint\
    \ maxx = 0;\n\tint maxy = 0;\n\tint flag = 0;\n\tint temp = 0;\n\twhile (flag\
    \ != 1)\n\t{\n\t\ttemp = x % 10;\n\t\tx = x / 10;\n\t\tif (temp > maxx)\n\t\t\
    {\n\t\t\tmaxx = temp;\n\t\t}\n\n\t\ttemp = y % 10;\n\t\ty = y / 10;\n\t\tif (temp\
    \ > maxy)\n\t\t{\n\t\t\tmaxy = temp;\n\t\t}\n\n\t\tif (maxx > maxy)\n\t\t{\n\t\
    \t\tflag = 1;\n\t\t}\n\t}\n\tif (maxx == maxy)\n\t{\n\t\treturn x;\n\t}\n\telse\n\
    \t{\n\t\treturn -1;\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ code goes here\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppeo_xcbe: /tmp/tmppeo_xcbe.cpp:12: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        if (x % 2 == 0 && y % 2 == 0)\n            return x | y;\n\
    \        else if (x % 2 == 0 && y % 2 == 1)\n            return x - y;\n     \
    \   else if (x % 2 == 1 && y % 2 == 0)\n            return x + y;\n        else\n\
    \            return -1;\n    }\n    if (x < y)\n        return -1;\n    if (x\
    \ == y)\n        return x;\n    long z = (x + y) >> 1;\n    if (z & 1)\n     \
    \   return choose_num(x, z);\n    else\n        return choose_num(z, y);\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5po1l4nk: /tmp/tmp5po1l4nk.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x <= y && y > 0) {\n        // If they are equal, then the function will return\
    \ x\n        if (x >= 0 && x <= y)\n            return x;\n        // If x is\
    \ bigger than y, then x will be returned\n        if (x > y)\n            return\
    \ x;\n        // If y is bigger than x, then y will be returned\n        if (y\
    \ > x)\n            return y;\n    }\n    // If they're not equal, then we'll\
    \ have to check whether \n    // x is smaller than y\n    if (x > y)\n       \
    \ return -1;\n    // If they're equal and x is smaller than y, then x will be\
    \ returned\n    return x;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpf85s97c7: /tmp/tmpf85s97c7.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0 && x <= y && x > y);\n    long ans = -1L;\n    if (x % 2 == 0\
    \ && y % 2 == 0) {\n        // x and y are both even numbers\n        if (x <=\
    \ y) {\n            // x is less than or equal to y\n            ans = x;\n  \
    \      } else {\n            // y is less than or equal to x\n            ans\
    \ = y;\n        }\n    } else {\n        if (x % 2 == 0) {\n            // x is\
    \ even\n            ans = y;\n        } else {\n            // y is even\n   \
    \         ans = x;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeztu3iwf: /tmp/tmpeztu3iwf.cpp:8: long int choose_num(long int, long
    int): Assertion `x >= 0 && y >= 0 && x <= y && x > y'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    while\
    \ (x<y) {\n        if (x%2==0 && y%2==0) {\n            return x;\n        } else\
    \ if (y%2==0 && x%2==0) {\n            return y;\n        }\n        x++;\n  \
    \      y++;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ num = x + y;\n    while(num > 0) {\n        if(num % 2 == 0) return num;\n \
    \       num = num / 2;\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxinfuyqj: /tmp/tmpxinfuyqj.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Initialize \"max\" with the first number smaller than \"x\".\n\tlong max = x;\n\
    \t// \"max\" will be equal to x unless \"max\" gets bigger than \"y\".\n\twhile\
    \ (max < y) \n\t{\n\t\t// If \"max\" is even, then \"max\" is evenly divisible\
    \ by 2.\n\t\tif (max % 2 == 0) \n\t\t{\n\t\t\tmax = max / 2;\n\t\t}\n\t\t// Else\
    \ \"max\" is odd. We need to consider \"max\" up to but not including \"y\".\n\
    \t\telse \n\t\t{\n\t\t\tlong mid = max / 2;\n\t\t\tif (mid > y) \n\t\t\t{\n\t\t\
    \t\t// \"mid\" is evenly divisible by 2. The bigger number is \"mid\".\n\t\t\t\
    \tmax = mid;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\t// \"mid\" is odd. \"max\"\
    \ must be evenly divisible by 2 before \"mid\" is evenly divisible by 2. \n\t\t\
    \t\t// So we need to test whether \"mid\" is even after \"max\" gets bigger than\
    \ \"y\".\n\t\t\t\tlong m2;\n\t\t\t\tif (mid == y && mid % 2 == 0) \n\t\t\t\t{\n\
    \t\t\t\t\tm2 = mid / 2;\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tm2 = mid\
    \ + 1;\n\t\t\t\t}\n\t\t\t\t// \"max\" is evenly divisible by 2. Now we consider\
    \ \"mid\".\n\t\t\t\tif (m2 % 2 == 0) \n\t\t\t\t{\n\t\t\t\t\tmax = m2;\n\t\t\t\t\
    }\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\t// \"max\" is odd. The bigger number is\
    \ \"mid\" plus 1.\n\t\t\t\t\tmax = m2 + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return max;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tassert(x\
    \ > 0 && y > 0);\n\tint mid = (x + y) / 2;\n\tlong res = x;\n\tif (mid % 2 ==\
    \ 0) {\n\t\tres = y;\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpqlumcmwo: /tmp/tmpqlumcmwo.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ long ans = 0;\n    // We use a bit array which stores bit representation of\
    \ x from \n    // the right to left and y from the left to right\n    std::vector<bool>\
    \ bit_array(x, true);\n    std::vector<bool> bit_array(y, false);\n    // This\
    \ loop will find the smallest even number that is in [x, y]\n    while(bit_array[0]\
    \ && bit_array[1]) {\n        // We first shift bits of x until we reach 0\n \
    \       for(size_t i = bit_array.size() - 1; i >= 0; --i) {\n            if(bit_array[i])\
    \ {\n                // Shift right and copy the bit of x to ans\n           \
    \     ans = ans | (x >> i);\n                // Reset bit of x\n             \
    \   bit_array[i] = false;\n            }\n        }\n        // We do the same\
    \ with y\n        for(size_t i = 0; i < bit_array.size(); ++i) {\n           \
    \ if(bit_array[i]) {\n                ans = ans | (y >> i);\n                bit_array[i]\
    \ = false;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19_44sgb.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmp19_44sgb.cpp:12:23: error: redeclaration of \u2018std::vector<bool>\
    \ bit_array\u2019\n   12 |     std::vector<bool> bit_array(y, false);\n      |\
    \                       ^~~~~~~~~\n/tmp/tmp19_44sgb.cpp:11:23: note: \u2018std::vector<bool>\
    \ bit_array\u2019 previously declared here\n   11 |     std::vector<bool> bit_array(x,\
    \ true);\n      |                       ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098849
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ res;\n    for(int i=x; i<=y; i++)\n    {\n        if(i % 2 == 0)\n        {\n\
    \            res = i;\n            return res;\n        }\n    }\n    return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp1jfv1i2k: /tmp/tmp1jfv1i2k.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098849
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\twhile\
    \ (x < y) {\n\t\tif (x % 2 == 0 && y % 2 == 0) {\n\t\t\treturn x;\n\t\t}\n\t\t\
    x = x + 1;\n\t\ty = y + 1;\n\t}\n\treturn -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ num = -1;\n    if(x > y && x > 0) num = x;\n    else if(x < y && x < 0) num\
    \ = y;\n    else if(y == 0) return -1;\n    else if(num == x || num == y) return\
    \ num;\n    return num;\n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_0nxeppq: /tmp/tmp_0nxeppq.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ max_num = x;\n    if (y > max_num) {\n        max_num = y;\n    }\n    long\
    \ temp = (x + y - 1) / 2;\n    max_num = temp + (temp % 2);\n    return max_num;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu4wonfxh: /tmp/tmpu4wonfxh.cpp:19: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        // swap them and call this function on the bigger value\n\
    \        long tmp = x;\n        x = y;\n        y = tmp;\n        tmp = choose_num(x,\
    \ y);\n        assert(tmp != -1);\n        return tmp;\n    }\n    long tmp =\
    \ 0;\n    while (x <= y) {\n        tmp += (x%2==0) ? (2*x) : (2*x);\n       \
    \ x++;\n    }\n    if (tmp == 0) return -1;\n    return tmp;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpetq4q8u5: /tmp/tmpetq4q8u5.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098851
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ count = 0;\n    long min_x = x;\n    long max_x = y;\n    long cur = x;\n  \
    \  while (cur <= max_x) {\n        if (cur % 2 == 0) {\n            count++;\n\
    \            cur += 2;\n        } else {\n            count += 2;\n          \
    \  cur += 1;\n        }\n    }\n    if (count < max_x - min_x + 1)\n        return\
    \ -1;\n    else if (count > max_x - min_x + 1)\n        return -1;\n    else\n\
    \        return min_x;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp2w_h0lt: /tmp/tmpp2w_h0lt.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098851
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x == y)\n        return -1;\n    long mid = (x + y) / 2;\n    if (mid % 2 ==\
    \ 0)\n        return mid;\n    else if (mid < x)\n        return choose_num(x,\
    \ mid);\n    else\n        return choose_num(mid, y);\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpd60slnre: /tmp/tmpd60slnre.cpp:21: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x < y) {\n        int temp = y;\n        y = x;\n        x = temp;\n    }\n\
    \    int i = 0;\n    long max = x;\n    while (y > 0) {\n        if ((x % 2) ==\
    \ 0) {\n            max = x;\n        }\n        i++;\n        x++;\n        y--;\n\
    \    }\n    if (i == 0) {\n        return -1;\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmqx1bruq: /tmp/tmpmqx1bruq.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x\
    \ >= 0);\n  assert(y >= 0);\n  long long ans = 1;\n  long long num = 1;\n  long\
    \ long maxx = x;\n  long long maxy = y;\n  \n  // Find the biggest even number\
    \ that is in range [x, y] inclusive.\n  while (num < maxx) {\n    long long temp_num\
    \ = (ans * num);\n    if (temp_num > maxy) {\n      maxy = temp_num;\n    }\n\
    \    ans = (ans * num);\n    num++;\n  }\n  // Now maxx is in range. Return the\
    \ larger one.\n  if (maxx == y) {\n    return maxx;\n  }\n  // If maxx is not\
    \ in range, maxy is in range and we should return -1.\n  if (maxy != -1) {\n \
    \   return -1;\n  }\n  \n}\nint main() {\n    auto candidate = choose_num;\n \
    \   assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpm_6_j96i: /tmp/tmpm_6_j96i.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ max_so_far = x;\n    if (y > max_so_far)\n        max_so_far = y;\n    for (int\
    \ i = y + 1; i <= x; i++) {\n        if (i % 2 == 0) {\n            max_so_far\
    \ = i;\n        }\n    }\n    return max_so_far;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu1gk6vh4: /tmp/tmpu1gk6vh4.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    int m = std::max(x, y);\n    int n = std::min(x, y);\n \
    \   long ans = INT_MIN;\n    for(long i = m; i <= n; ++i) {\n        if((i%2)\
    \ == 0)\n            ans = std::max(ans, i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp0fmxa3f: /tmp/tmpp0fmxa3f.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098850
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here.\n    return -1;\n}\nint main() {\n    auto candidate =\
    \ choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpztn6cd2d: /tmp/tmpztn6cd2d.cpp:13: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098851
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Your code here\n    int x_even = (x % 2) == 0;\n    int y_even = (y % 2) ==\
    \ 0;\n    long min_num = x & y & x_even & y_even;\n    int max_num = x | y | x_even\
    \ | y_even;\n    return min_num >= max_num ? -1 : min_num;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpwkux784m: /tmp/tmpwkux784m.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098851
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ max_num = x > y ? x : y;\n    long min_num = x < y ? x : y;\n    long mid =\
    \ (max_num + min_num) / 2;\n    long diff = x - mid;\n    if (min_num > mid) {\n\
    \        return diff;\n    } else if (max_num == mid) {\n        return max_num;\n\
    \    } else {\n        return choose_num(mid, y);\n    }\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098851
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y) \n        x = y;\n    long mid = x + (y - x)/2;\n    long ans  = mid*2;\n\
    \    while (ans <= mid && ans%2 != 0) {\n        ans++;\n    }\n    if (ans >=\
    \ x && ans <= y)\n        return ans;\n    else\n        return -1;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptpehke88: /tmp/tmptpehke88.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098851
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x\
    \ >= 0 && y >= 0 && x < y);\n  long result = 0;\n  \n  // Find the biggest number\
    \ that is in [x, y] inclusive and that is even.\n  // We loop until we find a\
    \ number in [x, y] or we find that number is even.\n  // We start by checking\
    \ the first number in the range, since if it is even\n  // we know that the previous\
    \ number must be even.\n  long cur = x;\n  long last_num = 0;\n  while (cur !=\
    \ cur + last_num) {\n    if (cur % 2 == 0)\n      last_num = cur;\n    cur++;\n\
    \  }\n  \n  if (last_num < x && x % 2 == 0 && last_num + 1 <= y) {\n    result\
    \ += x;\n  } else {\n    // We found the biggest even number in [x, y] inclusive.\n\
    \    // Add the previous number and the first even number in the range.\n    result\
    \ += last_num + 1;\n    if (last_num + 1 <= y)\n      result += x;\n  }\n  \n\
    \  return result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpoa7poycd: /tmp/tmpoa7poycd.cpp:37: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098851
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && x <= y && y >= 0);\n    // Using bitwise and to do the checks\n    return\
    \ y & -(x+y-1) & (~(x+y-1) - 1);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpukhta9kf: /tmp/tmpukhta9kf.cpp:14: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ i, largest = x;\n    for (i = y; i <= x; i++) {\n        if (i % 2 == 0) {\n\
    \            largest = i;\n        }\n    }\n    return largest;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvgsbf1_s: /tmp/tmpvgsbf1_s.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x>y)\
    \ {\n        long temp = x;\n        x = y;\n        y = temp;\n    }\n    long\
    \ ans = 0;\n    long temp = 0;\n    while(x != 0) {\n        temp = x % 10;\n\
    \        if(temp == 0) {\n            ans = temp;\n        }\n        x = x/10;\n\
    \    }\n    if(ans == 0) {\n        return -1;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxm7yvoxk: /tmp/tmpxm7yvoxk.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if(x <= y) {\n        ans = x;\n    } else if(y <= x) {\n   \
    \     ans = y;\n    } else {\n        while(x <= y) {\n            long mid =\
    \ (x + y)/2;\n            if(mid % 2 == 0) {\n                x = mid;\n     \
    \       } else {\n                y = mid;\n            }\n        }\n       \
    \ ans = x;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpxy65npx8: /tmp/tmpxy65npx8.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ max_num = x;\n    long min_num = y;\n    while (max_num - min_num > 1)\n   \
    \ {\n        long mid = max_num + (max_num - min_num) / 2;\n        long mid2\
    \ = (max_num - mid) * (max_num - mid);\n        long mid3 = (max_num - mid) *\
    \ (min_num - mid);\n        if ((mid2 >= mid) && (mid2 >= mid3)) {\n         \
    \   max_num = mid;\n        } else if ((mid2 <= mid) && (mid2 <= mid3)) {\n  \
    \          min_num = mid;\n        } else {\n            min_num = mid3;\n   \
    \     }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp67abroio: /tmp/tmp67abroio.cpp:27: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (y > x) {\n        return -1;\n    }\n    long low = x;\n    long high = y;\n\
    \    while (low < high) {\n        long mid = low + (high - low) / 2;\n      \
    \  if (mid % 2 == 0) {\n            return mid;\n        }\n        if (mid >\
    \ y) {\n            high = mid - 1;\n        }\n        else {\n            low\
    \ = mid + 1;\n        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7jc2ehue: /tmp/tmp7jc2ehue.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Your code here\n\tlong max = 0;\n\tlong tmp = 0;\n\tfor (long i = x; i <= y;\
    \ ++i) {\n\t\tif (i % 2 == 0) {\n\t\t\ttmp = i;\n\t\t\tif (tmp > max) {\n\t\t\t\
    \tmax = tmp;\n\t\t\t}\n\t\t}\n\t}\n\tif (max == 0)\n\t\treturn -1;\n\telse\n\t\
    \treturn max;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0 && x < y && y < x + y);\n    for (long i = x; i <= y; ++i)\n  \
    \  {\n        if((i % 2) == 0)\n        {\n            return i;\n        }\n\
    \    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n  \
    \  assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpnu0wvx9m: /tmp/tmpnu0wvx9m.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Your code goes here\n\tassert(x >= y);\n\tlong ans = 0;\n\tfor (long i = 0;\
    \ i < x; ++i) {\n\t\tfor (long j = 0; j < y; ++j) {\n\t\t\tif (j % 2 == 0 && i\
    \ % 2 != 0)\n\t\t\t\tans = i;\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpu8qmqr7p: /tmp/tmpu8qmqr7p.cpp:9: long int choose_num(long int, long
    int): Assertion `x >= y'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ n = x;\n    long m = y;\n    long k;\n    long l = (n + m) / 2;\n    long h\
    \ = (n + m) % 2;\n    long min = n;\n    while (h >= l) {\n        k = l;\n  \
    \      l = h;\n        h = (k + (m+1)) / 2; // round up\n        if (h >= min)\
    \ {\n            break;\n        }\n    }\n    min = n;\n    while (l >= h) {\n\
    \        k = l;\n        l = h;\n        h = (k + (m+1)) / 2; // round up\n  \
    \      if (h >= min) {\n            break;\n        }\n    }\n    return min;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp69n6jazl: /tmp/tmp69n6jazl.cpp:35: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tassert(x\
    \ > 0 && x < y);\n\tlong num = 1;\n\twhile (x <= y) {\n\t\tif (x % 2 == 0) num\
    \ += 2;\n\t\tx /= 2;\n\t}\n\treturn num;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098857
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(y\
    \ > x);\n    if (x == 0 || x == y)\n        return -1;\n    if (x <= y && x %\
    \ 2 == 0) {\n        long mid = (x + y) / 2;\n        if (mid % 2 == 0)\n    \
    \        return mid;\n        else {\n            return choose_num(mid, y);\n\
    \        }\n    }\n    if (y <= x && y % 2 == 0)\n        return choose_num(x,\
    \ y);\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpk8dfzst4: /tmp/tmpk8dfzst4.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    long nxt;\n    if (x == y) {\n        return -1;\n    }\n\
    \    nxt = x + y;\n    if (nxt == x + 1) {\n        return x - 1;\n    }\n   \
    \ if (nxt == y) {\n        return x + 1;\n    }\n    if (nxt > y - 1) {\n    \
    \    return nxt - 1;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpv6wzs4wp: /tmp/tmpv6wzs4wp.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098852
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  long\
    \ ans = x;\n  while ((ans <= y) && (ans % 2 == 0)) {\n    ans++;\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8p9vburg: /tmp/tmp8p9vburg.cpp:16: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Write your code here\n\tif (x > y)\n\t\treturn -1;\n\tlong middle = x + (y -\
    \ x) / 2;\n\treturn middle * middle * middle;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7_3j6307: /tmp/tmp7_3j6307.cpp:16: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y) {\n        long tempx = x;\n        x = y;\n        y = tempx;\n  \
    \  }\n    if (x % 2 == 0) {\n        return x;\n    }\n    long maxnum = y;\n\
    \    for (long i = 3; i <= y / 2; i += 2) {\n        if (y % i == 0) {\n     \
    \       maxnum = i;\n        }\n    }\n    return maxnum;\n}\nint main() {\n \
    \   auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmph7dwrvjl: /tmp/tmph7dwrvjl.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here\n    long z = (x | y) - 1;\n    z = ~z;\n    z = z & -z;\n\
    \    z &= ~(x + y);\n    z &= -z;\n    z &= ~((x | y) + 1);\n    z &= -z;\n  \
    \  z &= ~((x - y) & -(x + y));\n    z &= -z;\n    z &= ~((x - y) & ~(x + y));\n\
    \    z &= -z;\n    z = ((x + y) | z) - 1;\n    z = ~z;\n    z = z & -z;\n    z\
    \ &= ~(x & y);\n    z &= -z;\n    z &= ~(x & y | ~(x + y));\n    z &= -z;\n  \
    \  z = ((x | y) & z) - 1;\n    z = ~z;\n    z = z & -z;\n    z &= ~(x & y);\n\
    \    z &= -z;\n    z &= ~(x & y | ~(x + y));\n    z &= -z;\n    z = ((x | y) &\
    \ ~(x + y)) - 1;\n    z = ~z;\n    z = z & -z;\n    z &= ~(x & y);\n    z &= -z;\n\
    \    z &= ~(x & y | ~(x + y));\n    z &= -z;\n    z = ((x - y) & z) - 1;\n   \
    \ z = ~z;\n    z = z & -z;\n    z &= ~(x & y);\n    z &= -z;\n    z &= ~(x & y\
    \ | ~(x + y));\n    z &= -z;\n    return z + 1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpifq7evhi: /tmp/tmpifq7evhi.cpp:52: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tif\
    \ (x <= y) {\n\t\tlong res = x;\n\t\twhile (y > x && y % 2 == 0) {\n\t\t\ty /=\
    \ 2;\n\t\t}\n\t\twhile (y >= x && y % 2 == 0) {\n\t\t\ty /= 2;\n\t\t}\n\t\twhile\
    \ (y > x && y % 2 == 0) {\n\t\t\ty /= 2;\n\t\t}\n\t\treturn res;\n\t} else {\n\
    \t\treturn -1;\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmphvraj7ko: /tmp/tmphvraj7ko.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x > y) {\n        long r = choose_num(y, x);\n        if\
    \ (r != -1)\n            ans = r;\n    }\n    else if (x < y) {\n        long\
    \ r = choose_num(y, x);\n        if (r != -1)\n            ans = r;\n    }\n \
    \   else {\n        if (x & 1)\n            ans = x;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tif\
    \ (x < 0 || y < 0) \n\t\treturn -1;\n\tif (x == 0 && y > 0) \n\t\treturn 0;\n\t\
    if (x == 0 && y < 0) \n\t\treturn -1;\n\tif (x > 0 && y == 0) \n\t\treturn 0;\n\
    \tif (x > 0 && y < 0) \n\t\treturn -1;\n\tif (x <= 0 && y > 0) \n\t\treturn 0;\n\
    \tif (x <= 0 && y < 0) \n\t\treturn -1;\n\tint low = x, high = y;\n\tint mid_val;\n\
    \tdo {\n\t\tmid_val = ((low + high) / 2);\n\t\tif (mid_val % 2 == 0) {\n\t\t\t\
    low = mid_val + 1;\n\t\t} else {\n\t\t\thigh = mid_val;\n\t\t}\n\t} while (low\
    \ < high);\n\treturn mid_val;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp2qbxa_vo: /tmp/tmp2qbxa_vo.cpp:36: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ result = 0;\n    for(long i = 0; i <= y; i++) {\n        if(x % 2 == 0) {\n\
    \            if(x+i > y) {\n                i = y-x;\n                result +=\
    \ (x+i)/2;\n            } else {\n                result += (x+i)/2;\n       \
    \     }\n        } else {\n            if(x+i > y) {\n                result +=\
    \ (x+i)/2;\n            } else {\n                result += (x+i)/2;\n       \
    \     }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098858
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  if(x\
    \ <= 0 || y <= 0) return -1;\n  long ans = -1;\n  for(long i = x; i <= y; i++)\n\
    \    if(i%2 == 0 && ans == -1) ans = i;\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpsmdlmmka: /tmp/tmpsmdlmmka.cpp:16: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tlong\
    \ max_even_num = -1; // Initialize max_even_num with negative number\n\t\n\t//\
    \ If x is smaller than y then return -1\n\tif(x < y) {\n\t\treturn -1;\n\t}\n\t\
    \n\t// If there is no even number in [x, y] then return -1\n\tif(y % 2 == 0) {\n\
    \t\treturn -1;\n\t}\n\t\n\t// If x is equal to y then return x\n\tif(x == y) {\n\
    \t\treturn x;\n\t}\n\t\n\t// Initialize a variable called even_num with x and\
    \ y \n\tlong even_num = x;\n\t\n\t// Initialize a variable called odd_num with\
    \ y\n\tlong odd_num = y;\n\t\n\t// While odd_num is odd\n\twhile(odd_num % 2 ==\
    \ 1) {\n\t\t// Add 2 to even_num\n\t\teven_num += 2;\n\t\t// Subtract odd_num\
    \ from x\n\t\todd_num -= 1;\n\t}\n\t\n\t// While even_num is even\n\twhile(even_num\
    \ % 2 == 0) {\n\t\t// Add 2 to odd_num\n\t\todd_num += 2;\n\t\t// Subtract even_num\
    \ from y\n\t\teven_num -= 1;\n\t}\n\t\n\t// If even_num is bigger than max_even_num\
    \ then \n\t// assign max_even_num to even_num\n\tif(even_num > max_even_num) {\n\
    \t\tmax_even_num = even_num;\n\t}\n\t\n\t// If odd_num is bigger than max_even_num\
    \ then \n\t// assign max_even_num to odd_num\n\tif(odd_num > max_even_num) {\n\
    \t\tmax_even_num = odd_num;\n\t}\n\t\n\t// Return max_even_num\n\treturn max_even_num;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpiu16lrk1: /tmp/tmpiu16lrk1.cpp:64: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && x < y);\n    long max = -1;\n    long ans = 0;\n    while(x <= y) {\n\
    \        ans += x;\n        if(ans % 2 == 0) {\n            ans /= 2;\n      \
    \  } else {\n            ans += 1;\n        }\n        ++x;\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpylqx_2sv: /tmp/tmpylqx_2sv.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ num = x;\n    if(num < y) {\n        while(num < y) {\n            num = 2 *\
    \ num;\n        }\n        return num;\n    } else {\n        while(num > y) {\n\
    \            num = 2 * num;\n        }\n        return num;\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpayspiipt: /tmp/tmpayspiipt.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(x>y\
    \ || x==y || x==0)\n        return -1;\n    long res = -1;\n    while(x > 0){\n\
    \        if(x%2 == 0)\n            res = x;\n        x /= 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8d1ik1xq: /tmp/tmp8d1ik1xq.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ x_min = std::max(x, y);\n    long x_max = std::min(x, y);\n    long x_range\
    \ = x_max - x_min;\n    if (x_range == 0)\n        return -1;\n    long x_mid\
    \ = x_min + x_range / 2;\n    long y_min = std::max(y, x_mid);\n    long y_max\
    \ = std::min(y, x_mid);\n    long y_range = y_max - y_min;\n    if (y_range ==\
    \ 0)\n        return -1;\n    long y_mid = y_min + y_range / 2;\n    if (x_mid\
    \ <= y_mid)\n        return x_mid;\n    return y_mid;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp_86r7nfw: /tmp/tmp_86r7nfw.cpp:27: int main(): Assertion `candidate((13),
    (12)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ max_num = 0;\n    long min_num = y;\n    // If min is greater than max then\
    \ we simply return -1\n    if (x < y) {\n        min_num = x;\n        max_num\
    \ = y;\n    }\n    else {\n        max_num = x;\n        min_num = y;\n    }\n\
    \    // Using a loop from min to max and \n    // checking if their difference\
    \ is even \n    while (min_num < max_num) {\n        if (min_num % 2 != 0 && max_num\
    \ % 2 != 0) {\n            max_num = max_num - 1;\n        }\n        else {\n\
    \            min_num = min_num + 1;\n        }\n    }\n    // If there's no even\
    \ number in the range, then return -1\n    // else return max_num.\n    if (min_num\
    \ % 2 != 0 && max_num % 2 != 0) {\n        return -1;\n    }\n    else {\n   \
    \     return max_num;\n    }\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppm8py1rt: /tmp/tmppm8py1rt.cpp:43: int main(): Assertion `candidate((5234),
    (5233)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tlong\
    \ small = x;\n\tlong large = y;\n\tif(small == large)\n\t\treturn small;\n\telse\
    \ {\n\t\tif(x < 0 || y < 0) {\n\t\t\tif(x < y) {\n\t\t\t\treturn -1;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\twhile(small < large) {\n\t\
    \t\tif((small + large) % 2 == 0) {\n\t\t\t\tlarge = large - small;\n\t\t\t}\n\t\
    \t\telse {\n\t\t\t\tsmall = small + large;\n\t\t\t}\n\t\t}\n\t\treturn large;\n\
    \t}\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpfyvyo1mv: /tmp/tmpfyvyo1mv.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ n = (x + y) / 2;\n    if(x == n)\n        return y;\n    else if(y == n)\n \
    \       return x;\n    else\n        return choose_num(x, n);\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpb3etyix2: /tmp/tmpb3etyix2.cpp:18: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    for\
    \ (long i = x; i <= y; i++) {\n        if (i % 2 == 0) {\n            return i;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpmhnjdaub: /tmp/tmpmhnjdaub.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ temp;\n    long max;\n    temp = x ^ y;\n    if (temp == 0)\n        return\
    \ -1;\n    else {\n        temp = temp - 1;\n        if (temp >= 0 && temp <=\
    \ y)\n            max = temp;\n        else\n            return -1;\n    }\n}\n\
    int main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmph51e1ob5: /tmp/tmph51e1ob5.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y || x == -1 || y == -1) return -1;\n    long xMinus1 = x - 1;\n    long\
    \ yMinus1 = y - 1;\n    long maxNum;\n    long minNum;\n    // If x is even and\
    \ y is odd, then add x and y.\n    if (x % 2 == 0 && y % 2 == 1) {\n        maxNum\
    \ = x + y;\n    }\n    // If x is even and y is odd, then add x to minNum.\n \
    \   if (x % 2 == 0 && y % 2 == 0) {\n        minNum = x;\n    }\n    // If x is\
    \ odd and y is odd, then add y to maxNum.\n    if (x % 2 != 0 && y % 2 != 0) {\n\
    \        maxNum = y;\n    }\n    // If x is odd and y is odd, then add y to minNum.\n\
    \    if (x % 2 != 0 && y % 2 == 0) {\n        minNum = y;\n    }\n    // If x\
    \ is even and y is even, then add x to minNum and y to maxNum.\n    if (x % 2\
    \ == 0 && y % 2 == 0) {\n        maxNum = x + y;\n        minNum = x;\n    }\n\
    \    // If x is even and y is odd, then add y to minNum.\n    if (x % 2 == 0 &&\
    \ y % 2 != 0) {\n        minNum = y;\n    }\n    // If x is odd and y is even,\
    \ then add x to minNum and y to maxNum.\n    if (x % 2 != 0 && y % 2 == 0) {\n\
    \        maxNum = x + y;\n        minNum = y;\n    }\n    // If x is odd and y\
    \ is even, then add y to maxNum.\n    if (x % 2 != 0 && y % 2 != 0) {\n      \
    \  maxNum = y;\n    }\n    if (maxNum % 2 == 0) return maxNum;\n    else return\
    \ minNum;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5q_odjr6: /tmp/tmp5q_odjr6.cpp:52: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ bigger = x;\n    long smaller = y;\n    while (smaller != 0) {\n        if (bigger\
    \ % smaller == 0) {\n            return bigger;\n        }\n        bigger++;\n\
    \        smaller--;\n    }\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp63ldjd_6: /tmp/tmp63ldjd_6.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ your code here\n    while (x <= y) {\n        if (x % 2 == 0)\n            x\
    \ = x + 1;\n        if (y % 2 == 0)\n            y = y + 1;\n        if (x > y)\n\
    \            break;\n    }\n    return x;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098858
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ even = 0;\n    while(x > 0 && y > 0){\n        if(x % 2 ==0 && y % 2 == 0){\n\
    \            return x;\n        }\n        else if(x % 2 == 0 && y % 2 == 0){\n\
    \            return -1;\n        }\n        else if(x % 2 == 0 && y % 2 != 0){\n\
    \            return y;\n        }\n        else if(x % 2 != 0 && y % 2 == 0){\n\
    \            return -1;\n        }\n        else if(x % 2 != 0 && y % 2 != 0){\n\
    \            return x;\n        }\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9kckx8dc: /tmp/tmp9kckx8dc.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098853
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ your code goes here\n    if(x <= y && y > 0)\n        return 0;\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3qk8o418: /tmp/tmp3qk8o418.cpp:15: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  //\
    \ code goes here\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpjcmsg2b2: /tmp/tmpjcmsg2b2.cpp:12: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098854
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  if\
    \ (x < y)\n    return -1;\n  int ans = 0;\n  while (x > y) {\n    if (x % 2 ==\
    \ 0)\n      ans = 2;\n    else if (y % 2 == 0)\n      ans = 1;\n    else\n   \
    \   ans += 1;\n    x /= 2;\n    y /= 2;\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpx0gieoth: /tmp/tmpx0gieoth.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ write your code here\n    if(x>=y)\n    {\n        long c=x;\n        x=y;\n\
    \        y=c;\n    }\n    long ans=-1;\n    long i=y;\n    while(i>=x)\n    {\n\
    \        ans=i;\n        i=i%x;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n \
    \   assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp9lo3ysaz: /tmp/tmp9lo3ysaz.cpp:26: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here.\n    if(x > y) \n        return -1;\n    long m = y;\n\
    \    long n = x;\n    long a = 1;\n    while(m <= n) {\n        long b = m;\n\
    \        long c = n;\n        while(b * b < c) {\n            b += m;\n      \
    \      c += n;\n        }\n        if(a <= b) {\n            break;\n        }\n\
    \        a = b;\n    }\n    return a;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpclb6p9fm: /tmp/tmpclb6p9fm.cpp:30: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if(x > 0 && y > 0) {\n        int x_even = (x % 2 == 0);\n  \
    \      int y_even = (y % 2 == 0);\n        if(x_even && y_even) {\n          \
    \  ans = x;\n        } else if(x_even) {\n            ans = y;\n        } else\
    \ {\n            ans = x;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4rq0n8f7: /tmp/tmp4rq0n8f7.cpp:24: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1L;\n    if (y > x)\n        return -1;\n    if (x % 2 == 0)\n      \
    \  ans = x;\n    else\n        ans = x + 1;\n    while (ans <= y && ans % 2 ==\
    \ 0)\n        ans++;\n    if (ans == y)\n        return -1;\n    while (ans <=\
    \ y)\n        ans++;\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmptxxd2iii: /tmp/tmptxxd2iii.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    if (x >= y) {\n        int m = y - x;\n        if (m == 0)\n\
    \            return -1;\n        long ans = x + m / 2;\n        while (ans + m\
    \ / 2 <= x)\n            ans += m / 2;\n    } else {\n        int m = x - y;\n\
    \        if (m == 0)\n            return -1;\n        long ans = y + m / 2;\n\
    \        while (ans + m / 2 >= y)\n            ans += m / 2;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp67bflclr: /tmp/tmp67bflclr.cpp:28: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = -1;\n    for (long i = x; i <= y; ++i) {\n        if (i % 2 == 0) {\n\
    \            if (ans == -1) {\n                ans = i;\n            }\n     \
    \       else {\n                if (ans > i) {\n                    ans = i;\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpp7hxm3tl: /tmp/tmpp7hxm3tl.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x>0\
    \ && y>0);\n  if(y==0) return x;\n  if(y<0) return -1;\n  long n=(long long)(((x-1)*(y-1)+(y-1))/2);\n\
    \  while(!((long long)((x-1)*(n-y+1)+(n-1)/2)*2) % 2) n--;\n  return n;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyvhgteyc: /tmp/tmpyvhgteyc.cpp:17: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ != 0 && y != 0);\n    long ans = -1;\n    if (x >= y) {\n        while (x+y\
    \ >= 0) {\n            if (x%2 == 0 && y%2 == 0) {\n                ans = (x+y)/2;\n\
    \                break;\n            }\n            y /= 2;\n        }\n     \
    \   if (ans == -1) {\n            ans = -1;\n        }\n    } else {\n       \
    \ while (x + y >= 0) {\n            if (x%2 == 0 && y%2 == 0) {\n            \
    \    ans = (x+y)/2;\n                break;\n            }\n            x /= 2;\n\
    \        }\n        if (ans == -1) {\n            ans = -1;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098860
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ ans = 0;\n    int i;\n    for (i = 1; i <= y/2; ++i) {\n        if (x%i == 0\
    \ && y%i == 0) {\n            if (x >= ans && x <= y) ans = i;\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n   \
    \ assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12)) ==\
    \ (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpse0gyhx7: /tmp/tmpse0gyhx7.cpp:19: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x\
    \ > 0 && y > 0);\n  long res = -1;\n  // We just need to compare if y >= x\n \
    \ while (y >= x) {\n    // If y is odd, then x's even number is bigger than y's\n\
    \    if (y & 1)\n      res = x;\n    // If x is odd, then y's even number is bigger\
    \ than x's\n    if (x & 1)\n      res = y;\n    // And if they're equal, then\
    \ we found the biggest even number\n    if (x == y)\n      return res;\n    //\
    \ And the numbers are still not equal\n    y = y >> 1;\n    x = x >> 1;\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp5kj6i9xs: /tmp/tmp5kj6i9xs.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0 && x + y < INT_MAX);\n    if (x + y == 0 || x < 0 || y < 0)\n \
    \       return -1;\n    long p = x;\n    while ((x -= 2) * (x + y) != 0)\n   \
    \     p += 1;\n    while (p != y)\n        p -= 1;\n    return x;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp7y5ysvvr: /tmp/tmp7y5ysvvr.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tlong\
    \ result;\n\tresult = x;\n\twhile (result < y)\n\t{\n\t\tresult += 2;\n\t}\n\t\
    if (result > y) {\n\t\treturn -1;\n\t} else {\n\t\treturn result;\n\t}\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpbedt9s_e: /tmp/tmpbedt9s_e.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  if\
    \ (x <= y) {\n    if (x % 2 == 0) {\n      if (y % 2 == 0) {\n        return x;\n\
    \      }\n      if (x % 3 == 0) {\n        return y;\n      }\n      if (y % 3\
    \ == 0) {\n        return x;\n      }\n      if (x % 5 == 0) {\n        return\
    \ y;\n      }\n      if (y % 5 == 0) {\n        return x;\n      }\n      if (x\
    \ % 7 == 0) {\n        return y;\n      }\n      if (y % 7 == 0) {\n        return\
    \ x;\n      }\n    } else {\n      if (y % 2 == 0) {\n        return y;\n    \
    \  }\n      if (y % 3 == 0) {\n        return x;\n      }\n      if (y % 5 ==\
    \ 0) {\n        return y;\n      }\n      if (y % 7 == 0) {\n        return x;\n\
    \      }\n    }\n  }\n  return -1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo567bj05: /tmp/tmpo567bj05.cpp:50: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n// TODO:\
    \ Complete this function\n    long ans = -1L;\n    if(x > y){\n        if(x >\
    \ ans)\n            ans = x;\n    }\n    else{\n        if(y > ans)\n        \
    \    ans = y;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpdz771tuw: /tmp/tmpdz771tuw.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ your code here\n    long ans = -1;\n    if (x >= y) {\n        long mid = x\
    \ + y/2;\n        while (x <= mid) {\n            mid = x + y/2;\n           \
    \ if (x <= mid) {\n                ans = mid;\n                break;\n      \
    \      }\n            else {\n                mid = x - y/2;\n               \
    \ if (mid < 0) {\n                    ans = mid;\n                    break;\n\
    \                }\n                else {\n                    mid = x + y/2;\n\
    \                }\n            }\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpslxnk8tz: /tmp/tmpslxnk8tz.cpp:34: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ result = 0;\n    long temp = 0;\n    while(x <= y) {\n        temp = x;\n  \
    \      x = y;\n        y = temp;\n    }\n    // Now x and y will be increasing,\
    \ and we need to find the largest \n    // number that is even between them.\n\
    \    while(x % 2 != 0 && y % 2 != 0) {\n        temp = x;\n        x = y;\n  \
    \      y = temp;\n    }\n    if (x % 2 != 0 && y % 2 == 0) {\n        result =\
    \ x;\n    } else {\n        result = y;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpypseprae: /tmp/tmpypseprae.cpp:31: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    return\
    \ (x>0 && y>0 && x<y ? x : y == 0 ? -1 : -1);\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpctvew47x: /tmp/tmpctvew47x.cpp:12: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ > 0 && y > 0);\n    long ans = -1;\n    for (long i = x; i <= y; i++) {\n  \
    \      if (i % 2 == 0 && i != ans) {\n            ans = i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0 && y >= 0 && x <= y);\n    long max_num = x;\n    for(long i = x + 1; i\
    \ < y; i++){\n        if(max_num%2 == 0){\n            return -1;\n        }\n\
    \        max_num += 2;\n    }\n    return max_num;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmposs6aiyb: /tmp/tmposs6aiyb.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n   assert(x\
    \ > 0 && y > 0 && y > x);\n   if(y > x)\n      return -1;\n   \n   int count =\
    \ 0;\n   while(x != y) {\n      if(x % 2 == 0)\n         count++;\n      x /=\
    \ 2;\n   }\n\n   if(count == 1)\n      return x;\n   \n   long result = x << 1;\n\
    \   while(count > 0) {\n      result <<= 1;\n      count --;\n   }\n\n   return\
    \ result;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpm61nipj8: /tmp/tmpm61nipj8.cpp:32: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    long\
    \ max_of_x_and_y;\n    // If x is greater than y, then return -1\n    if (x >\
    \ y) return -1;\n    max_of_x_and_y = x;\n    // Iterate from x (up) to y (down)\n\
    \    for (; x <= y; x++) {\n        // If x is even, then x is even too\n    \
    \    if ((x & 1) == 0) {\n            // We have a new biggest even number that\
    \ x is between x and y\n            max_of_x_and_y = x;\n        }\n    }\n  \
    \  return max_of_x_and_y;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpgjp3ifzb: /tmp/tmpgjp3ifzb.cpp:30: int main(): Assertion `candidate((7),
    (7)) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\nlong\
    \ ans = 0;\n long div, mod, rem;\n ans = x;\n while ((mod =(x/div)) != 0) {\n\
    \    mod = mod + y;\n    div = div * 2;\n }\n if (ans < mod) {\n     ans = mod;\n\
    \ }\n assert(ans < 0);\n return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmppi13vxdi: /tmp/tmppi13vxdi.cpp:18: long int choose_num(long int, long
    int): Assertion `ans < 0'' failed.

    '
  stdout: ''
  timestamp: 1660098855
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x <= 0 || y <= 0) {\n        cout << \"Error: x and y must be positive.\" <<\
    \ endl;\n        return -1;\n    }\n    while (x++ < y);\n    return x;\n}\nint\
    \ main() {\n    auto candidate = choose_num;\n    assert(candidate((12), (15))\
    \ == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxccawok.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpaxccawok.cpp:9:9: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n    9 |         cout <<\
    \ \"Error: x and y must be positive.\" << endl;\n      |         ^~~~\n      |\
    \         std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpaxccawok.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpaxccawok.cpp:9:55:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n    9 |         cout << \"Error: x and y must be positive.\"\
    \ << endl;\n      |                                                       ^~~~\n\
    \      |                                                       std::endl\nIn file\
    \ included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaxccawok.cpp:2:\n/usr/include/c++/9/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599 |     endl(basic_ostream<_CharT,\
    \ _Traits>& __os)\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n  assert(x\
    \ >= 0);\n  assert(x <= y);\n  // Initialize a variable to store even numbers\n\
    \  long even = x;\n  // Iterate through all odd numbers\n  for (long i = 3; i\
    \ <= y; i += 2) {\n    // If the number is even\n    if (i % 2 == 0) {\n     \
    \ // If the number is equal to or larger than the current even number, \n    \
    \  // then update the even number to the current odd number.\n      if (even >\
    \ i) {\n        even = i;\n      }\n    } else {\n      // If the number is equal\
    \ to or smaller than the current odd number, \n      // then update the odd number\
    \ to the current even number.\n      if (even < i) {\n        even = i;\n    \
    \  }\n    }\n  }\n  return even;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp3k6yjqsg: /tmp/tmp3k6yjqsg.cpp:33: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\tlong\
    \ largest = x;\n\tint flag = 0;\n\twhile(largest < y) {\n\t\tif(flag == 0) {\n\
    \t\t\tflag = 1;\n\t\t\tlargest++;\n\t\t}\n\t\telse {\n\t\t\tlargest++;\n\t\t}\n\
    \t}\n\tif(largest - y == 2) {\n\t\tstd::cout<<\"The even number is \"<<largest<<std::endl;\n\
    \t}\n\telse {\n\t\tstd::cout<<\"The even number is -1\"<<std::endl;\n\t}\n\treturn\
    \ -1;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp6l67l683: /tmp/tmp6l67l683.cpp:29: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: 'The even number is -1

    '
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ != 0 && y != 0);\n    if (x <= y){\n        // return x - y;\n        long m\
    \ = x;\n        while (m > y) {\n            m -= y;\n        }\n        return\
    \ m;\n    }\n    return y - 1;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpn1jtyxcw: /tmp/tmpn1jtyxcw.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= y);\n    if (x > y) return -1;\n    if (x == y) return x;\n    long mid =\
    \ x + (y - x) / 2;\n    if (x <= mid) return choose_num(x, mid);\n    else return\
    \ choose_num(mid + 1, y);\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpo1tx4vg2: /tmp/tmpo1tx4vg2.cpp:8: long int choose_num(long int, long
    int): Assertion `x >= y'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ Write your code here\n\tint m = (x + y)/2;\n\tif (m == x || m == y) return m;\n\
    \telse {\n\t\twhile (m < x && m != y) m++;\n\t\tif (m == x && m == y) return m;\n\
    \t\telse if (m == x || m == y) return -1;\n\t\telse return m;\n\t}\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpntl17w_0: /tmp/tmpntl17w_0.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if(y<x){\n\
    \        swap(x,y);\n    }\n    long z = (x<<1)-1;\n    for(long i=2;i<=z;i++){\n\
    \        if(x%2==0){\n            if(x>z){\n                z = x;\n         \
    \   }\n            x /= 2;\n        }else{\n            if(x<z){\n           \
    \     z = x;\n            }\n            x /= 2;\n        }\n    }\n    z = z+y;\n\
    \    if(z==x){\n        z = -1;\n    }\n    return z;\n}\nint main() {\n    auto\
    \ candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy95n58ew.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpy95n58ew.cpp:9:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n    9 |         swap(x,y);\n      |         ^~~~\n/tmp/tmpy95n58ew.cpp:9:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpy95n58ew.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpy95n58ew.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpy95n58ew.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpy95n58ew.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) noe"
  stdout: ''
  timestamp: 1660098855
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ lx = x-1, ly = y-1;\n    if(lx & 1) return lx;\n    if(ly & 1) return ly;\n\
    \    while(lx > 0 && ly > 0) {\n        if(lx & ly) return lx;\n        if(lx\
    \ >> 1) ly--;\n        else lx--;\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmplwet_vw7: /tmp/tmplwet_vw7.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x >= y)\n        return -1;\n    // Start with the smallest even number that\
    \ is in the range.\n    long min = 2 * x;\n    long max = y;\n    while (max >=\
    \ min) {\n        if (min % 2 == 0 && max % 2 == 0)\n            return min;\n\
    \        min = 2 * min + 1;\n        max = 2 * max + 1;\n    }\n    return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpsjtfunrr: /tmp/tmpsjtfunrr.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    int\
    \ ans = -1;\n    if (x >= y && y >= x) {\n        ans = 1;\n        while (y >=\
    \ x) {\n            ans = 2 * ans + y;\n            y--;\n        }\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp4bewjspp: /tmp/tmp4bewjspp.cpp:20: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    assert(x\
    \ >= 0);\n    assert(y >= 0);\n    long ans = -1;\n    long p = 1;\n    while\
    \ (p <= y) {\n        if (x % p == 0) {\n            ans = p;\n            break;\n\
    \        }\n        p++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = choose_num;\n    assert(candidate((12), (15)) == (14));\n    assert(candidate((13),\
    \ (12)) == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8azhg0mz: /tmp/tmp8azhg0mz.cpp:23: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Complete this function.\n    long ans = -1; // ans is the biggest number in\
    \ the range [x, y]\n    if (x >= y) {\n        return ans;\n    }\n    // If there's\
    \ an even number of x numbers in the range [x, y],\n    // the function should\
    \ return x itself and increase x by 2.\n    if (x % 2 == 0 && y % 2 == 0) {\n\
    \        ans = x;\n        x++;\n    }\n    \n    long yr = y / 2;\n    long x\
    \ = x - 2 * y;\n    long yr = yr + x * x;\n    // If y is even, the function should\
    \ return -1\n    if (y % 2 == 0) {\n        return ans;\n    }\n    // If xy is\
    \ even, return its square root and increment y by 1.\n    if (xy % 2 == 0) {\n\
    \        ans = sqrt(y);\n        y += 1;\n    }\n    long r = yr - x;\n    long\
    \ rr = r * r;\n    long rr = rr - yr;\n    if (r >= 0 && rr >= 0) {\n        ans\
    \ = x + rr;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = choose_num;\n\
    \    assert(candidate((12), (15)) == (14));\n    assert(candidate((13), (12))\
    \ == (-1));\n    assert(candidate((33), (12354)) == (12354));\n    assert(candidate((5234),\
    \ (5233)) == (-1));\n    assert(candidate((6), (29)) == (28));\n    assert(candidate((27),\
    \ (10)) == (-1));\n    assert(candidate((7), (7)) == (-1));\n    assert(candidate((546),\
    \ (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkgllhs2x.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpkgllhs2x.cpp:21:10: error: declaration of \u2018long int\
    \ x\u2019 shadows a parameter\n   21 |     long x = x - 2 * y;\n      |      \
    \    ^\n/tmp/tmpkgllhs2x.cpp:22:10: error: redeclaration of \u2018long int yr\u2019\
    \n   22 |     long yr = yr + x * x;\n      |          ^~\n/tmp/tmpkgllhs2x.cpp:20:10:\
    \ note: \u2018long int yr\u2019 previously declared here\n   20 |     long yr\
    \ = y / 2;\n      |          ^~\n/tmp/tmpkgllhs2x.cpp:28:9: error: \u2018xy\u2019\
    \ was not declared in this scope; did you mean \u2018x\u2019?\n   28 |     if\
    \ (xy % 2 == 0) {\n      |         ^~\n      |         x\n/tmp/tmpkgllhs2x.cpp:34:10:\
    \ error: redeclaration of \u2018long int rr\u2019\n   34 |     long rr = rr -\
    \ yr;\n      |          ^~\n/tmp/tmpkgllhs2x.cpp:33:10: note: \u2018long int rr\u2019\
    \ previously declared here\n   33 |     long rr = r * r;\n      |          ^~\n"
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x == y)\n        return -1; // x or y is zero\n    if (x > y && y % 2 == 1)\n\
    \        x = y + 1;\n    if (x > y && x % 2 == 0)\n        return -1; // x is\
    \ even but y is not and y is not even\n    if (x % 2 == 0 && y % 2 == 0)\n   \
    \     return x + (y - x + 1);\n    if (x % 2 == 0 && y % 2 == 1)\n        return\
    \ -1; // x is even but y is not and y is not odd\n    if (x % 2 == 1 && y % 2\
    \ == 1)\n        return x + 1;\n    // x is odd and y is odd and they have no\
    \ common factors\n    long lcm = x * y / 4;\n    if (x > y) {\n        while (x\
    \ % 2 == 0)\n            x /= 2;\n        while (y % 2 == 0)\n            y /=\
    \ 2;\n    } else {\n        while (x % 2 == 1)\n            x /= 2;\n        while\
    \ (y % 2 == 1)\n            y /= 2;\n    }\n    while (x > y) {\n        while\
    \ (lcm % x == 0)\n            lcm /= x;\n        while (lcm % y == 0)\n      \
    \      lcm /= y;\n        if (lcm > x)\n            x = lcm;\n        if (lcm\
    \ > y)\n            y = lcm;\n    }\n    return x + (y - x + 1);\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpeaoqx4nu: /tmp/tmpeaoqx4nu.cpp:47: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ code here\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpvrmjhcqw: /tmp/tmpvrmjhcqw.cpp:12: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n\t//\
    \ TODO: Write your code\n\tassert(x>=0 && y>=0);\n\tlong min = x;\n\tlong max\
    \ = y;\n\twhile (true) {\n\t\tif (max%2 == 0) {\n\t\t\tmax = max/2;\n\t\t}\n\t\
    \telse {\n\t\t\tmin = min*2;\n\t\t\tif (min>max) return -1;\n\t\t\tmax = max/2;\n\
    \t\t}\n\t}\n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpy99y7rdh: /tmp/tmpy99y7rdh.cpp:25: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    if\
    \ (x > y)\n        return choose_num(y, x);\n    // else if we reach here, then\
    \ the range [x, y] includes the number y\n    // and x > y. So return y.\n\n \
    \   // The even number x (n) is even if\n    // n % 2 ==0\n\n    // The odd number\
    \ x (n) is odd if\n    // n % 2 == 1\n    // return -1 if there are no even numbers\
    \ \n}\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmpyk3l6xuk: /tmp/tmpyk3l6xuk.cpp:22: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098857
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here.\n    if(x > y)\n        swap(x, y);\n\n    long num =\
    \ x;\n\n    for(long i = y; i >= 1; i--) {\n        if(num % i == 0){\n      \
    \      num = num/i;\n            return i;\n        }\n    }\n\n    return -1;\n\
    }\nint main() {\n    auto candidate = choose_num;\n    assert(candidate((12),\
    \ (15)) == (14));\n    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33),\
    \ (12354)) == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_yq0b1y.cpp: In function \u2018long int choose_num(long int, long\
    \ int)\u2019:\n/tmp/tmpo_yq0b1y.cpp:10:9: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   10 |         swap(x, y);\n      |         ^~~~\n/tmp/tmpo_yq0b1y.cpp:10:9:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpo_yq0b1y.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpo_yq0b1y.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo_yq0b1y.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpo_yq0b1y.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __lhs, path& __rhs) "
  stdout: ''
  timestamp: 1660098856
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes two\
    \ positive numbers x and y and returns the\n// biggest even integer number that\
    \ is in the range [x, y] inclusive. If \n// there's no such number, then the function\
    \ should return -1.\n// For example:\nlong choose_num(long x, long y) {\n    //\
    \ Write your code here.\n    // return -1 if no such number\n    long range =\
    \ (y>=x?x:y); \n    long num = y;\n    while(true) {\n        if((num%2==0&&num<range)?true:num>=range)\
    \ {\n            return num;\n        }\n        num+=2;\n    }\n}\nint main()\
    \ {\n    auto candidate = choose_num;\n    assert(candidate((12), (15)) == (14));\n\
    \    assert(candidate((13), (12)) == (-1));\n    assert(candidate((33), (12354))\
    \ == (12354));\n    assert(candidate((5234), (5233)) == (-1));\n    assert(candidate((6),\
    \ (29)) == (28));\n    assert(candidate((27), (10)) == (-1));\n    assert(candidate((7),\
    \ (7)) == (-1));\n    assert(candidate((546), (546)) == (546));\n}\n"
  status: Exception
  stderr: 'tmp8w92h9sp: /tmp/tmp8w92h9sp.cpp:21: int main(): Assertion `candidate((12),
    (15)) == (14)'' failed.

    '
  stdout: ''
  timestamp: 1660098857
