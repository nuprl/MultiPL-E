name: HumanEval_30_get_positive
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return only positive numbers\
  \ in the list.\nstd::vector<long> get_positive(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = get_positive;\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)-2, (long)4, (long)5, (long)6}))) == (std::vector<long>({(long)4, (long)5,\
  \ (long)6})));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
  \ (long)2, (long)3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\
  \ == (std::vector<long>({(long)5, (long)3, (long)2, (long)3, (long)3, (long)9, (long)123,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2})))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
  }\n"
completions: ["    std::vector<long> pos_nums;\n    for (long i : l) {\n        if\
    \ (i >= 0)\n            pos_nums.push_back(i);\n    }\n    return pos_nums;",
  "  std::sort(l.begin(), l.end());\n  std::vector<long> positive;\n  for (long num\
    \ : l) {\n    if (num > 0) {\n      positive.push_back(num);\n    }\n  }\n  return\
    \ positive;", "    std::vector<long> res;\n    for(long i = 0; i < (long)l.size();\
    \ i++)\n        if(l[i] > 0)\n            res.push_back(l[i]);\n    return res;",
  "  assert(l.size() != 0);\n  std::vector<long> positive;\n  positive.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) {\n      positive.push_back(i);\n    }\n\
    \  }\n  return positive;", "   std::vector<long> result;\n   result.clear();\n\
    \   for (long i=0; i<l.size(); i++)\n      if (l[i] > 0)\n         result.push_back(l[i]);\n\
    \   return result;", "    std::vector<long> res;\n    for (auto it : l) {\n  \
    \      if (it > 0)\n            res.push_back(it);\n    }\n    return res;", " \
    \ std::vector<long> p;\n  for (int i = 0; i < l.size(); i++)\n    if (l[i] > 0)\
    \ p.push_back(l[i]);\n  return p;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ res;\n  for (long i : l) {\n    if (i >= 0) res.push_back(i);\n  }\n  return\
    \ res;", "  std::vector<long> p;\n  for (int i = 0; i < l.size(); ++i) {\n   \
    \ if (l.at(i) >= 0) {\n      p.push_back(l.at(i));\n    }\n  }\n  return p;",
  "    std::vector<long> pos;\n    for (auto it = l.begin(); it != l.end(); ++it)\n\
    \        if (*it > 0)\n            pos.push_back(*it);\n    return pos;", "  \
    \  std::vector<long> res; // Initialize an empty vector.\n    for (auto it = l.begin();\
    \ it != l.end(); it++) {\n        if (*it > 0) res.push_back(*it);\n    }\n  \
    \  return res;", "    std::vector<long> retval;\n    for (auto i : l) {\n    \
    \    if (i >= 0) {\n            retval.push_back(i);\n        }\n    }\n    return\
    \ retval;", "    std::vector<long> result;\n    for (long i : l)\n        if (i\
    \ < 0)\n            result.push_back(-i);\n        else\n            result.push_back(i);\n\
    \    return result;", "    std::vector<long> v;\n    for (long i = 0; i < l.size();\
    \ i++)\n        if (l[i] > 0)\n            v.push_back(l[i]);\n    return v;",
  "  std::vector<long> v;\n  for (long i : l) if (i >= 0) v.push_back(i);\n  return\
    \ v;", "    std::vector<long> v;\n    for(long i : l) {\n        if(i >= 0) {\n\
    \            v.push_back(i);\n        }\n    }\n    return v;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    res.assign(l.begin(), l.begin()\
    \ + std::find(l.begin(), l.end(), 0));\n    return res;", "  std::vector<long>\
    \ positive;\n  for (long i : l) {\n    if (i > 0) positive.push_back(i);\n  }\n\
    \  return positive;", "  std::vector<long> res;\n  for (auto i : l) {\n    if\
    \ (i >= 0) {\n      res.push_back(i);\n    }\n  }\n  return res;", "    std::vector<long>\
    \ v1(l.begin(), l.end());\n    // Remove duplicates, sort them.\n    std::sort(v1.begin(),\
    \ v1.end());\n    // Return only positive numbers in the sorted vector.\n    std::vector<long>\
    \ v2;\n    for(auto v: v1) {\n        if(v > 0) {\n            v2.push_back(v);\n\
    \        }\n    }\n    return v2;", "    std::vector<long> pos;\n    for (long\
    \ i: l) {\n        if (i > 0) {\n            pos.push_back(i);\n        }\n  \
    \  }\n    return pos;", "    std::vector<long> p;\n    for (long i : l) {\n  \
    \      if (i > 0) p.push_back(i);\n    }\n    return p;", "    std::vector<long>\
    \ ret;\n    // Remove all the negative numbers.\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (l[i] >= 0) {\n            ret.push_back(l[i]);\n       \
    \ }\n    }\n    return ret;", "    std::vector<long> p;\n    for (long i = 0;\
    \ i < l.size(); ++i) {\n        if (l[i] > 0) {\n            p.push_back(l[i]);\n\
    \        }\n    }\n    return p;", "    std::vector<long> v;\n    for (long k\
    \ : l)\n        if ((k & 1LL) != 0LL)\n            v.push_back(k);\n    return\
    \ v;", "    std::vector<long> p;\n    for (auto i : l) {\n        if (i > 0) p.push_back(i);\n\
    \    }\n    return p;", "  std::vector<long> pos;\n  for(long i = 0; i < l.size();\
    \ i++)\n  {\n    if (l[i] > 0)\n    {\n      pos.push_back(l[i]);\n    }\n  }\n\
    \  return pos;", "    std::sort(l.begin(), l.end());\n    std::unique(l.begin(),\
    \ l.end()); //Remove duplicate elements\n    return l;", "  std::vector<long>\
    \ result;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      result.push_back(l[i]);\n\
    \  }\n  return result;", "  std::vector<long> pos;\n  // Loop through the vector\
    \ and add numbers that are positive.\n  for (long i = 0; i < (long)l.size(); i++)\
    \ {\n    if (l[i] > 0) {\n      pos.push_back(l[i]);\n    }\n  }\n  return pos;",
  "    std::vector<long> r;\n    for (long i : l) {\n        if (i > 0)\n        \
    \    r.push_back(i);\n    }\n    return r;", "  std::vector<long> positive;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] > 0)\n      positive.push_back(l[i]);\n\
    \  }\n  return positive;", "    std::vector<long> v;\n    for (auto i : l)\n \
    \       if (i >= 0)\n            v.push_back(i);\n    return v;", "    std::vector<long>\
    \ vll;\n    std::sort(l.begin(), l.end());\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > l[i - 1]) {\n            vll.push_back(l[i]);\n \
    \       }\n    }\n    return vll;", "    // Your code goes here.\n    // std::vector<long>\
    \ res;\n    \n    return res;", "  std::vector<long> res;\n  for (long i : l)\n\
    \    if (i >= 0)\n      res.push_back(i);\n  return res;", "    std::vector<long>\
    \ res;\n    // Loop through the list and append only positive numbers to the result.\n\
    \    for (long i : l)\n        if (i > 0)\n            res.push_back(i);\n   \
    \ return res;", "    std::vector<long> v;\n    v.push_back(0);\n    for (auto\
    \ i : l) {\n        if (i > 0) {\n            v.push_back(i);\n        }\n   \
    \ }\n    return v;", "  std::vector<long> temp;\n  for (auto i : l) {\n    if\
    \ (i >= 0) {\n      temp.push_back(i);\n    }\n  }\n  return temp;", "    std::vector<long>\
    \ new_l;\n    std::copy_if(l.begin(), l.end(), std::back_inserter(new_l), [&](long\
    \ num) {return num >= 0;});\n    return new_l;", "    // Your code goes here.\n\
    \    std::vector<long> result;\n    for(long &num : l) {\n        if(num > 0)\
    \ {\n            result.push_back(num);\n        }\n    }\n    return result;",
  "    std::vector<long> ans;\n    for(long i : l) if(i >= 0) ans.push_back(i);\n\
    \    return ans;", "  std::sort(l.begin(), l.end());\n  std::vector<long> result;\n\
    \  for (long i : l)\n    if (i >= 0)\n      result.push_back(i);\n  return result;",
  "    std::sort(l.begin(), l.end());\n    std::vector<long> ans(l.begin(), l.begin()\
    \ + l.size() - 1);\n    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > 0) {\n            ans.push_back(l[i]);\n        }\n    }\n    return ans;",
  "    std::vector<long> res;\n    for(long i : l)\n        if(i>0)\n            res.push_back(i);\n\
    \    return res;", "    std::vector<long> positive_number;\n    for (long i :\
    \ l) {\n        if (i > 0)\n            positive_number.push_back(i);\n    }\n\
    \    return positive_number;", "    std::vector<long> retval;\n    for(size_t\
    \ i = 0; i < l.size(); ++i) {\n        if(l[i] > 0) {\n            retval.push_back(l[i]);\n\
    \        }\n    }\n    return retval;", "  std::vector<long> v; // To store only\
    \ positive numbers.\n  for (int i = 0; i < l.size(); i++) {\n    if (l.at(i) >\
    \ 0) {\n      v.push_back(l.at(i));\n    }\n  }\n  return v;", "    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;",
  "  std::set<long> s;\n  std::vector<long> ret(l.size());\n  for (auto i = l.begin();\
    \ i != l.end(); ++i)\n    if (*i < 0)\n      s.insert(*i);\n  for (auto i = l.begin();\
    \ i != l.end(); ++i)\n    if (s.count(*i) == 0)\n      ret.push_back(*i);\n  return\
    \ ret;", "    long long sum = 0;\n    for (auto x : l)\n    {\n        if (x >=\
    \ 0)\n            sum += x;\n    }\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (auto x : l)\n    {\n        if (x >= 0)\n            res.push_back(x);\n\
    \    }\n    return res;", "    std::vector<long> ans;\n    for (long i : l) {\n\
    \        if (i >= 0)\n            ans.push_back(i);\n    }\n    return ans;",
  "\tstd::set<long> s;\n\tstd::vector<long> res;\n\tfor (auto &i : l)\n\t\ts.insert(i);\n\
    \tfor (long i : s) {\n\t\tif (i < 0)\n\t\t\tres.push_back(-i);\n\t\telse\n\t\t\
    \tres.push_back(i);\n\t}\n\treturn res;", "  assert(l.size() > 0);\n  std::vector<long>\
    \ positive;\n  for (int i = 0; i < l.size(); ++i)\n    if (l[i] > 0)\n      positive.push_back(l[i]);\n\
    \  return positive;", "    std::vector<long> v;\n    v.push_back(0);\n    for(long\
    \ i=l.size()-1;i>=0;i--) {\n        if(l[i]>0) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;", "    std::vector<long> pos;\n    for(long i\
    \ = 0; i < l.size(); i++){\n        if(l[i] > 0){\n            pos.push_back(l[i]);\n\
    \        }\n    }\n    return pos;", "    std::vector<long> r;\n    // Sort the\
    \ numbers from high to low.\n    std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \    for (long i : l) {\n        if ((i > 0) && (r.size() == 0)) {\n         \
    \   r.push_back(i);\n        } else if (i > 0) {\n            r.push_back(-1);\n\
    \        }\n    }\n    return r;", "    std::vector<long> res;\n    for(long &x:\
    \ l)\n        if(x>0)\n            res.push_back(x);\n    return res;", "    std::vector<long>\
    \ ret; \n    std::set<long> s;\n    std::copy(l.begin(), l.end(), std::inserter(s,\
    \ s.end()));\n    for (long & i : s) ret[i] = 0;\n    return ret;", "  l.clear();\n\
    \  std::vector<long> p;\n  for (auto &e : l) {\n    if (e > 0)\n      p.push_back(e);\n\
    \  }\n  return p;", "    std::vector<long> v;\n    for (long i : l) {\n      \
    \  if (i >= 0) {\n            v.push_back(i);\n        }\n    }\n    return v;",
  "    int n=l.size();\n    std::vector<long> v(n);\n    for(int i=0;i<n;i++)\n  \
    \      v[i]=l[i];\n    std::vector<long> res(n);\n    for(int i=0;i<n;i++)\n \
    \       if(v[i]>0)\n            res[i]=v[i];\n    return res;", "    std::vector<long>\
    \ positive;\n    for(auto i : l) {\n        if (i >= 0) {\n            positive.push_back(i);\n\
    \        }\n    }\n    return positive;", "  std::vector<long> ret;\n  for (long\
    \ i: l) {\n    if (i > 0) ret.push_back(i);\n  }\n  return ret;", "    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.erase(it, l.end());\n\
    \    return l;", "    std::vector<long> pos;\n    for (long x : l)\n        if\
    \ (x>0)\n            pos.push_back(x);\n    return pos;", "    std::vector<long>\
    \ v1(l.size());\n    for(size_t i = 0; i < l.size(); ++i) v1[i] = -l[i];\n   \
    \ return v1;", "  std::vector<long> res;\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    if (l[i] >= 0)\n      res.push_back(l[i]);\n  }\n  return res;", "  \
    \      std::vector<long> ret;\n        for(int i=0; i<l.size(); i++){\n      \
    \      if(l[i] > 0)\n                ret.push_back(l[i]);\n        }\n       \
    \ return ret;", "  std::vector<long> ans;\n  for (long i : l) {\n    if (i >=\
    \ 0) ans.push_back(i);\n  }\n  return ans;", "  std::vector<long> poss;\n  poss.reserve(l.size());\n\
    \  for (long i : l) {\n    if (i >= 0) poss.push_back(i);\n  }\n  return poss;",
  "    std::vector<long> pos;\n    for (long &i : l) {\n        if (i >= 0) {\n  \
    \          pos.push_back(i);\n        }\n    }\n    return pos;", "  l.sort([]\
    \ (long a, long b) { return (a > b); });\n  std::vector<long> pos;\n  for (long\
    \ &x : l) { if (x > 0) { pos.push_back(x); } }\n  return pos;", "        std::vector<long>\
    \ res;\n        for (long & i : l)\n            if (i >= 0)\n                res.push_back(i);\n\
    \        return res;", "    std::vector<long> p(l.size());\n    for (size_t i\
    \ = 0; i < l.size(); i++)\n        p[i] = std::max(l[i], 1);\n    return p;",
  "  std::vector<long> p;\n  p.reserve(l.size());\n  for (long &it : l) {\n    if\
    \ (it > 0) p.push_back(it);\n  }\n  return p;", "    std::vector<long> v;\n  \
    \  for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n  \
    \      }\n    }\n    return v;", "    std::vector<long> positive;\n    for (long\
    \ num : l) {\n        if (num > 0) {\n            positive.push_back(num);\n \
    \       }\n    }\n    return positive;", "    std::vector<long> positive;\n  \
    \  for (long i : l) {\n        if (i > 0) positive.push_back(i);\n    }\n    return\
    \ positive;", "  std::vector<long> v;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(v),\n\
    \                [](long x) { return x > 0; });\n  return v;", "  std::vector<long>\
    \ v;\n  for (long i : l)\n    if (i >= 0)\n      v.push_back(i);\n  return v;",
  "  std::vector<long> res;\n  res.reserve(l.size());\n  for (auto e : l) {\n    if\
    \ (e > 0)\n      res.push_back(e);\n  }\n  return res;", "    std::vector<long>\
    \ res;\n    for (long &i : l)\n        if (i < 0)\n            i = -l;\n     \
    \   res.push_back(i);\n    return res;", "   long count = 0;\n   for (auto i :\
    \ l) {\n      if (i > 0) count++;\n   }\n   std::vector<long> result;\n   for\
    \ (int i = 0; i < count; i++) {\n      result.push_back(l[i]);\n   }\n   return\
    \ result;", "\tstd::vector<long> ret;\n\tfor (size_t i = 0; i < l.size(); i++)\
    \ {\n\t\tif (l[i] > 0) ret.push_back(l[i]);\n\t}\n\treturn ret;", "    std::vector<long>\
    \ res;\n    for(auto v : l){\n        if(v>0){\n            res.push_back(v);\n\
    \        }\n    }\n    return res;", "    std::vector<long> p;\n    for (long\
    \ i : l) {\n        if (i>0) {\n            p.push_back(i);\n        }\n    }\n\
    \    return p;", "  std::vector<long> v;\n  for (long i = 0; i < l.size(); i++)\
    \ {\n    if (l[i] > 0) v.push_back(l[i]);\n  }\n  return v;", "    // Your code\
    \ goes here.\n    std::vector<long> res;\n    for(auto it=l.begin(); it!=l.end();\
    \ ++it){\n        if((*it) > 0){\n            res.push_back(*it);\n        }\n\
    \    }\n    return res;", "    std::vector<long> pos;\n    for (int i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] >= 0)\n            pos.push_back(l[i]);\n\
    \    }\n    return pos;", "  std::vector<long> r;\n  for (long i : l) {\n    if\
    \ (i >= 0) {\n      r.push_back(i);\n    }\n  }\n  return r;", "    std::vector<long>\
    \ res;\n    // Check whether the list is empty.\n    if (l.size() == 0) {\n  \
    \      return res;\n    }\n    // Remove all negative elements.\n    // If any\
    \ element is negative, remove it from the list.\n    for (int i = 0; i < l.size();\
    \ ++i) {\n        if (l[i] < 0) {\n            l.erase(l.begin() + i);\n     \
    \       i -= 1;\n        }\n    }\n    // Add all positive numbers.\n    for (int\
    \ i = 1; i < l.size(); ++i) {\n        res.push_back(l[i]);\n    }\n    return\
    \ res;", "  std::vector<long> positive;\n  positive.reserve(l.size());\n  for\
    \ (long i : l)\n    if (i >= 0)\n      positive.push_back(i);\n  return positive;",
  "    std::vector<long> p;\n    for (int i = 0; i < l.size(); ++i) {\n        if\
    \ (l[i] > 0) {\n            p.push_back(l[i]);\n        }\n    }\n    return p;",
  "  std::vector<long> pos;\n  for (auto i : l) {\n    if (i >= 0) {\n      pos.push_back(i);\n\
    \    }\n  }\n  return pos;", "    assert(l.size() > 0);\n    std::vector<long>\
    \ p;\n    for(long &i : l) {\n        if(i>0) p.push_back(i);\n    }\n    return\
    \ p;", "    std::vector<long> pos;\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > 0) {\n            pos.push_back(l[i]);\n        }\n    }\n\
    \    return pos;", "    std::vector<long> positive;\n    for (auto i : l) {\n\
    \        if (i >= 0) positive.push_back(i);\n    }\n    return positive;", " \
    \   std::vector<long> res;\n    for(auto i : l)\n        if(i > 0)\n         \
    \   res.push_back(i);\n    return res;", "  std::vector<long> ans;\n  \n  for\
    \ (long i : l) {\n    if (i >= 0)\n      ans.push_back(i);\n  }\n  return ans;",
  "  std::vector<long> pos;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i]\
    \ > 0) {\n      pos.push_back(l[i]);\n    }\n  }\n  return pos;", "  std::vector<long>\
    \ v;\n  // Loop the vector and insert only positive numbers.\n  for (const auto\
    \ i : l) {\n    if (i > 0) {\n      v.push_back(i);\n    }\n  }\n  return v;",
  "    std::vector<long> p;\n    for(long &i : l)\n        if(i>=0)\n            p.push_back(i);\n\
    \    return p;", "  std::sort(l.begin(), l.end());\n  std::vector<long> res;\n\
    \  for (long i : l)\n    if (i >= 0)\n      res.push_back(i);\n  return res;",
  "    std::vector<long> v(l.size());\n    for (long i = 0; i < l.size(); i++)\n \
    \       v[i] = l[i];\n    sort(v.begin(), v.end());\n    for (long i = 0; i <\
    \ v.size(); i++)\n        if (v[i] > 0) \n            v.erase(v[i]);\n    return\
    \ v;", "    std::vector<long> positive;\n    for (auto i : l)\n        if (i >=\
    \ 0)\n            positive.push_back(i);\n    return positive;", "    std::vector<long>\
    \ pos;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n \
    \           pos.push_back(l[i]);\n        }\n    }\n    return pos;", "    std::vector<long>\
    \ res;\n    long cur = 0;\n    for (auto i : l) {\n        if (i != 0) {\n   \
    \         res.push_back(cur);\n            cur += i;\n        }\n    }\n    res.push_back(cur);\n\
    \    return res;", "    std::vector<long> v;\n    for (long i : l) {\n       \
    \ if (i >= 0)\n            v.push_back(i);\n    }\n    return v;", "    std::vector<long>\
    \ new_l(n);\n    for(long i=0; i<n; i++){\n        if(l[i] > 0){\n           \
    \ new_l[i] = l[i];\n        }\n    }\n    return new_l;", "    std::vector<long>\
    \ v;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n   \
    \         v.push_back(l[i]);\n        }\n    }\n    return v;", "  std::vector<long>\
    \ positive;\n  std::copy_if(l.begin(), l.end(), std::back_inserter(positive),\n\
    \               [](long x){ return x >= 0; });\n  return positive;", "  std::vector<long>\
    \ result;\n  for (auto i : l) {\n    if (i > 0) result.push_back(i);\n  }\n  return\
    \ result;", "    std::vector<long> res;\n    for(long i=0; i<l.size(); i++)\n\
    \    {\n        if(l[i]>=0) \n        {\n            res.push_back(l[i]);\n  \
    \      }\n    }\n    return res;", "        std::vector<long> v;\n        for(int\
    \ i=0;i<l.size();i++){\n                if(l[i]>0){\n                        v.push_back(l[i]);\n\
    \                }\n        }\n        return v;", "\tstd::vector<long> p;\n\t\
    for (auto iter = l.begin(); iter != l.end(); ++iter)\n\t\tif (*iter >= 0)\n\t\t\
    \tp.push_back(*iter);\n\treturn p;", "    std::vector<long> ans;\n    long max_value\
    \ = *std::max_element(l.begin(), l.end());\n    long max_pos = -1;\n    for (long\
    \ i : l) {\n        if (i > max_value) {\n            ans.clear();\n         \
    \   return ans;\n        }\n        if (i == max_pos) {\n            ans.push_back(i);\n\
    \        } else {\n            ans.clear();\n            ans.push_back(i);\n \
    \           ans.push_back(max_pos);\n            return ans;\n        }\n    }",
  "    std::vector<long> res;\n    for(long i=l.size()-1; i>=0; i--){\n        if(l[i]>0){\n\
    \            for(long j=0; j<i; j++){\n                l[j]=-l[j];\n         \
    \   }\n            for(long j=i; j<l.size(); j++){\n                l[j]=-l[j];\n\
    \            }\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ans;\n    for (long i : l)\n        if (i >= 0)\n\
    \            ans.push_back(i);\n    return ans;", "    long n = 0;\n    std::vector<long>\
    \ res = std::vector<long>();\n    for (const auto &i : l) {\n        if (i > 0)\
    \ res.push_back(i);\n    }\n    for (const auto &i : l) {\n        if (i == 0)\
    \ continue;\n        if (i == n) res.push_back(n);\n        n++;\n    }\n    return\
    \ res;", "    int pos = 0;\n    std::vector<long> res;\n    for (long i : l)\n\
    \        if (i >= 0)\n            res[pos++] = i;\n    return res;", "  std::vector<long>\
    \ p;\n  // Make copy of input vector\n  for (auto& num : l) p.push_back(num);\n\
    \  // Now make vector of only positive numbers.\n  p.erase(std::remove_if(p.begin(),\
    \ p.end(), [](long n) {\n      return n < 0;\n    }), p.end());\n  // Return vector\
    \ of only positive numbers.\n  return p;", "    std::vector<long> res;\n    for\
    \ (long i = 0; i< l.size(); i++) {\n        if (l[i] > 0)\n            res.push_back(l[i]);\n\
    \    }\n    return res;", "    std::vector<long> pos;\n    for (long i : l) {\n\
    \        if (i > 0)\n            pos.push_back(i);\n    }\n    return pos;", " \
    \   std::vector<long> new_l;\n    for(long i: l) {\n        if(i>0) {\n      \
    \      new_l.push_back(i);\n        }\n    }\n    return new_l;", "    std::vector<long>\
    \ positive;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > 0)\
    \ {\n            positive.push_back(l[i]);\n        }\n    }\n    return positive;",
  "  std::vector<long> new_l;\n  for (auto& x : l)\n    if (x >= 0)\n      new_l.push_back(x);\n\
    \  return new_l;", "    std::vector<long> positives;\n    for (long &e : l) {\n\
    \        if (e > 0) {\n            positives.push_back(e);\n        }\n    }\n\
    \    return positives;", "  std::vector<long> res;\n  // Traverse the vector to\
    \ find positive numbers.\n  for (size_t i = 0; i < l.size(); ++i) {\n    if (l[i]\
    \ >= 0) {\n      res.push_back(l[i]);\n    }\n  }\n  // Return only positive numbers.\n\
    \  return res;", "    int size = l.size();\n    std::vector<long> r;\n    long\
    \ max_value = 0;\n    for (int i = 0; i < size; i++) {\n        if (l[i] > max_value)\
    \ {\n            max_value = l[i];\n        }\n    }\n    int count = 0;\n   \
    \ for (int i = 0; i < size; i++) {\n        if (l[i] > max_value) {\n        \
    \    r.push_back(l[i]);\n            count++;\n        }\n    }\n    if (count\
    \ == 0) {\n        r.push_back(-max_value);\n    }\n    return r;", "    std::vector<long>\
    \ ret;\n    for (long i : l) {\n        if (i > 0) ret.push_back(i);\n    }\n\
    \    return ret;", "    std::vector<long> positive(l);\n    for (long &i : positive)\n\
    \        if (i >= 0)\n            i = i;\n    return positive;", "    std::vector<long>\
    \ res;\n    for (long i : l) {\n        if (i >= 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "  std::vector<long> v(l);\n  for (int i\
    \ = 0; i < v.size(); i++) {\n    if (v[i] >= 0) v[i] = v[i] + 1;\n  }\n  return\
    \ v;", "    std::vector<long> ret;\n    for (long e : l)\n        if (e > 0)\n\
    \            ret.push_back(e);\n    return ret;", "    std::vector<long> p;\n\
    \    p.reserve(l.size());\n    for (long i : l) {\n        if (i >= 0) p.push_back(i);\n\
    \    }\n    return p;", "    std::vector<long> p;\n    for (long e : l) {\n  \
    \      if (e > 0) {\n            p.push_back(e);\n        }\n    }\n    return\
    \ p;", "    std::vector<long> result;\n    for (long x : l) {\n        if (x >\
    \ 0) result.push_back(x);\n    }\n    return result;", "    std::vector<long>\
    \ positive;\n    for (long i : l)\n        if (i > 0)\n            positive.push_back(i);\n\
    \    return positive;", "  assert(l.size() >= 2);\n  std::vector<long> ret;\n\
    \  for (long i = 0; i < l.size(); i++) {\n    if (l[i] >= 0)\n      ret.push_back(l[i]);\n\
    \  }\n  return ret;", "    std::vector<long> res;\n    for (long n : l) {\n  \
    \      if (n >= 0)\n            res.push_back(n);\n    }\n    return res;", " \
    \   std::vector<long> positive;\n    std::vector<long>::iterator it;\n    for\
    \ (it = l.begin(); it != l.end(); it++) {\n        if (*it > 0) {\n          \
    \  positive.push_back(*it);\n        }\n    }\n    return positive;", "  std::vector<long>\
    \ res(l.size());\n  for (long i : l) {\n    if (i >= 0)\n      res[i] = i;\n \
    \ }\n  return res;", "    std::vector<long> res(l.size());\n    for (long i =\
    \ 0; i < l.size(); ++i) res[i] = l[i] > 0 ? l[i] : 0;\n    return res;", "  std::vector<long>\
    \ p(l.size());\n  for (long i : l)\n    p[std::find(std::begin(p), std::end(p),\
    \ i) - std::begin(p)] = i;\n  return p;", "    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long &i : l) {\n        if (i>0) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> p(l.size());\n   \
    \ std::iota(p.begin(), p.end(), 0);\n    auto it = std::remove_if(p.begin(), p.end(),\
    \ [&](long n) {\n        return n > 0;\n    });\n    return std::move(std::unique(it,\
    \ p.end()) - p.begin());", "  std::vector<long> positive;\n  for (int i = 0; i\
    \ < l.size(); i++) {\n    if (l[i] > 0) {\n      positive.push_back(l[i]);\n \
    \   }\n  }\n  return positive;", "    std::vector<long> res;\n    for (auto i\
    \ : l)\n        if (i >= 0)\n            res.push_back(i);\n    return res;",
  "  std::vector<long> res(l);\n  for (long i = 0; i < res.size(); i++) {\n    if\
    \ (res[i] <= 0) {\n      res.erase(res.begin() + i);\n      i--;\n    }\n  }\n\
    \  return res;", "    std::vector<long> p;\n    for (long i : l) {\n        if\
    \ (i > 0) p.push_back(i);\n    }\n    return p;", "    std::vector<long> v;\n\
    \    for (long x: l) {\n        if (x > 0)\n            v.push_back(x);\n    }\n\
    \    return v;", "  std::vector<long> temp(l.size());\n  for (long i = 0; i <\
    \ l.size(); i++)\n    if (l[i] > 0)\n      temp[i] = l[i];\n  return temp;", " \
    \   std::vector<long> result;\n    for(long n: l)\n        if(n >= 0)\n      \
    \      result.push_back(n);\n    return result;", "    std::vector<long> v;\n\
    \    for (long i : l) {\n        if (i >= 0) {\n            v.push_back(i);\n\
    \        }\n    }\n    return v;", "    std::vector<long> positive;\n    for (long\
    \ i : l)\n        if (i > 0)\n            positive.push_back(i);\n    return positive;",
  "    std::vector<long> result;\n    for (long i : l) {\n        if (i > 0)\n   \
    \         result.push_back(i);\n    }\n    return result;", "    std::vector<long>\
    \ v;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > 0) {\n    \
    \        v.push_back(l[i]);\n        }\n    }\n    return v;", "    std::vector<long>\
    \ n(nl.size(), 0);\n    for (const auto &i : l) {\n        if (i > 0) {\n    \
    \        ++n[i - 1];\n        }\n    }\n    return n;", "    std::vector<long>\
    \ ans;\n    for (long i : l) {\n        if (i > 0)\n            ans.push_back(i);\n\
    \    }\n    return ans;", "  std::vector<long> positive;\n  for (long i : l) {\n\
    \    if (i >= 0)\n      positive.push_back(i);\n  }\n  return positive;", "  \
    \  std::vector<long> res;\n    for (long i : l) {\n        if (i > 0) res.push_back(i);\n\
    \    }\n    return res;", "    std::vector<long> positive;\n    for (long i =\
    \ 0; i < l.size(); ++i) {\n        if (l[i] > 0) {\n            positive.push_back(l[i]);\n\
    \        }\n    }\n    return positive;", "    std::vector<long> pos;\n    for\
    \ (long i : l) {\n        if (i > 0)\n            pos.push_back(i);\n    }\n \
    \   return pos;", "  std::vector<long> positive(l);\n  for (long i : positive)\
    \ if (i <= 0) return positive;\n  std::sort(positive.begin(), positive.end());\n\
    \  auto it = std::unique(positive.begin(), positive.end());\n  positive.erase(it,\
    \ positive.end());\n  return positive;", "   auto p = std::remove_if(l.begin(),\
    \ l.end(), [](const long x){ return x >= 0; });\n   std::reverse(l.begin(), p);\n\
    \   return p;", "  std::vector<long> p;\n  for (int i = 0; i < l.size(); i++)\
    \ {\n    if (l[i] > 0) {\n      p.push_back(l[i]);\n    }\n  }\n  return p;",
  "    // sort the vector\n    std::sort(l.begin(), l.end());\n\n    // Return the\
    \ elements that are positive\n    std::vector<long> out;\n    long pos = 0;\n\
    \    for (long i : l)\n        if (i > pos) out.push_back(pos);\n        else\
    \      out.push_back(i);\n    return out;", "  std::vector<long> v;\n  for(int\
    \ i = 0; i < l.size(); i++) {\n    if(l[i] > 0) {\n      v.push_back(l[i]);\n\
    \    }\n  }\n  return v;", "    std::vector<long> ans;\n    std::stack<long> st;\n\
    \    for (auto i : l) {\n        st.push(i);\n        while (st.size()) {\n  \
    \          long curr = st.top();\n            st.pop();\n            if (curr\
    \ > 0) {\n                ans.push_back(curr);\n            } else {\n       \
    \         if (ans.size())\n                    st.push(ans.back());\n        \
    \        ans.pop_back();\n            }\n        }\n    }\n    return ans;", " \
    \   std::vector<long> v;\n    for (long i : l)\n        if (i>0)\n           \
    \ v.push_back(i);\n    return v;", "    // TODO: Complete me!\n    return l;",
  "    std::vector<long> positive;\n    for (int i=0; i<l.size(); i++) {\n       \
    \ if(l[i]>0) {\n            positive.push_back(l[i]);\n        }\n    }\n    return\
    \ positive;", "    std::vector<long> res;\n    for (long &it: l){\n        if\
    \ (it > 0){\n            res.push_back(it);\n        }\n    }\n    return res;",
  "    std::vector<long> pos;\n    for (long i : l)\n        if (i > 0)\n        \
    \    pos.push_back(i);\n    return pos;", "    std::vector<long> positive;\n \
    \   for (auto i : l) {\n        if (i > 0)\n            positive.push_back(i);\n\
    \    }\n    return positive;", "  std::vector<long> positive(l);\n  std::remove_copy_if(l.begin(),\
    \ l.end(), std::back_inserter(positive),\n    [](long x) { return x >= 0; });\n\
    \  return positive;", "    std::vector<long> v;\n    for (auto &x : l)\n     \
    \   if (x >= 0)\n            v.push_back(x);\n    return v;", "    std::vector<long>\
    \ res;\n    res.reserve(l.size());\n    for (long i : l) {\n        if (i > 0)\
    \ res.push_back(i);\n    }\n    return res;", "  assert(l.size() >= 2);\n  std::vector<long>\
    \ res;\n  res.reserve(l.size());\n  for (auto &el : l)\n    if (el >= 0)\n   \
    \   res.push_back(el);\n  return res;", "  std::vector<long> res;\n  for(long\
    \ i=0; i<l.size(); i++)\n    if(l[i] > 0)\n      res.push_back(l[i]);\n  return\
    \ res;", "    std::vector<long> v;\n    for (long i : l) {\n        if (i >= 0)\
    \ v.push_back(i);\n    }\n    return v;", "    std::vector<long> result;\n   \
    \ for(auto i : l)\n    {\n        if(i > 0) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> out;\n    out.assign(\
    \ l.begin(), l.end() );\n    std::sort(out.begin(), out.end());\n    return out;",
  "    std::vector<long> pos;\n    for (long i = 1; i < l.size(); i++) {\n       \
    \ if (l[i] > 0) {\n            pos.push_back(l[i]);\n        }\n    }\n    return\
    \ pos;", "    std::vector<long> res;\n    for (long i : l) {\n        if (i >\
    \ 0)\n            res.push_back(i);\n    }\n    return res;", "    // We use unordered\
    \ set for O(log n) algorithm.\n    std::unordered_set<long> positive;\n    for\
    \ (long i : l)\n        positive.insert(i);\n    std::vector<long> res;\n    for\
    \ (long i : l) {\n        if (positive.count(i)) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::set<long> positive;\n    for (auto\
    \ i : l)\n        if (i > 0) positive.insert(i);\n    std::vector<long> res;\n\
    \    res.reserve(l.size());\n    for (auto i : l)\n        if (positive.find(i)\
    \ != positive.end()) res.push_back(i);\n    return res;", "    std::vector<long>\
    \ positives;\n    \n    // Initialize an empty vector to store result\n    positives.resize(l.size());\n\
    \    \n    // Insert each element of l into the vector\n    std::transform(l.begin(),\
    \ l.end(), positives.begin(), [](long x){return x >= 0; });\n    \n    return\
    \ positives;", "    std::vector<long> new_l(n);\n    for(size_t i = 0; i < n;\
    \ i++) {\n        if (l[i] > 0) {\n            new_l[i] = l[i];\n        }\n \
    \   }\n    return new_l;", "  std::vector<long> v(l.size());\n  for (size_t i\
    \ = 0; i < l.size(); i++) {\n    if (l[i] > 0) {\n      v[i] = l[i];\n    }\n\
    \  }\n  return v;", "    std::vector<long> v;\n    v.assign(l);\n    std::sort(v.begin(),\
    \ v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n    return\
    \ v;", "    std::vector<long> v;\n    for(auto i:l)\n        if(i>0)\n       \
    \     v.push_back(i);\n    return v;", "  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ ret;\n  // Find the first positive number.\n  for (long i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > 0)\n      break;\n  }\n  for (long i = 0; i < l.size();\
    \ i++) {\n    ret.append(l[i]);\n  }\n  return ret;", "\tstd::vector<long> v;\n\
    \tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > 0) v.push_back(l[i]);\n\
    \t}\n\treturn v;", "    std::vector<long> ans;\n    for(long i: l) {\n       \
    \ if(i>0) {\n            ans.push_back(i);\n        }\n    }\n    return ans;",
  "    std::vector<long> retval;\n    retval.push_back(l[0]);\n    for (auto i : l)\
    \ {\n        if (i > 0) retval.push_back(i);\n    }\n    return retval;", "  \
    \  std::vector<long> pos;\n    for(const auto &i : l) {\n        if(i > 0) pos.push_back(i);\n\
    \    }\n    return pos;", "    std::vector<long> new_l;\n    for (const auto&\
    \ e : l) {\n        if (e > 0) {\n            new_l.push_back(e);\n        }\n\
    \    }\n    return new_l;", "  std::vector<long> positives;\n  positives.reserve(l.size());\n\
    \  for (int i = 1; i < l.size(); i++) {\n    if (l[i] > 0) {\n      positives.push_back(l[i]);\n\
    \    }\n  }\n  return positives;"]
stop_tokens:
- "\n}"
