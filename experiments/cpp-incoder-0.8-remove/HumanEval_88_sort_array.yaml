name: HumanEval_88_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
  \ integers, return a copy of the given array after sorting,\n// you will sort the\
  \ given array in ascending order if the sum( first index value, last index value)\
  \ is odd,\n// or sort it in descending order if the sum( first index value, last\
  \ index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n\
  std::vector<long> sort_array(std::vector<long> array) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)3, (long)0, (long)1, (long)5}))) == (std::vector<long>({(long)0,\
  \ (long)1, (long)2, (long)3, (long)4, (long)5})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)3, (long)0, (long)1, (long)5, (long)6}))) == (std::vector<long>({(long)6,\
  \ (long)5, (long)4, (long)3, (long)2, (long)1, (long)0})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)1}))) == (std::vector<long>({(long)1, (long)2})));\n    assert(candidate((std::vector<long>({(long)15,\
  \ (long)42, (long)87, (long)32, (long)11, (long)0}))) == (std::vector<long>({(long)0,\
  \ (long)11, (long)15, (long)32, (long)42, (long)87})));\n    assert(candidate((std::vector<long>({(long)21,\
  \ (long)14, (long)23, (long)11}))) == (std::vector<long>({(long)23, (long)21, (long)14,\
  \ (long)11})));\n}\n"
completions: ["    long long int sum = 0;\n    for (auto & it : array) {\n       \
    \ sum += it;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long long int a, long long int b) { return a > b; });\n    }\
    \ else {\n        std::sort(array.begin(), array.end(), [](long long int a, long\
    \ long int b) { return a < b; });\n    }\n    return array;", "  // Write your\
    \ code here\n  long long sum = 0;\n  for (long i = 0; i < array.size(); i++) {\n\
    \    sum += array[i];\n  }\n\n  if (sum % 2 == 0){\n    long long count = 1;\n\
    \    for (long i = 0; i < array.size(); i++) {\n      sum += array[i];\n     \
    \ if (sum == count) {\n        array.insert(array.begin(), array[i]);\n      }\n\
    \    }\n  }\n  else {\n    long long count = 1;\n    for (long i = array.size()\
    \ - 1; i > 0; i--) {\n      sum += array[i];\n      if (sum == count) {\n    \
    \    array.insert(array.begin(), array[i]);\n      }\n    }\n  }\n  return array;",
  "    if (array.size() == 0) return array;\n    long long sum = 0;\n    for (long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 1) {\n        std::sort(array.begin(), array.end());\n        return\
    \ array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n   \
    \     return array;\n    }", "\tassert(!array.empty());\n\n\tstd::vector<long>\
    \ sorted_array;\n\tfor (auto iter = array.cbegin(); iter != array.cend(); ++iter)\
    \ {\n\t\tif (*iter % 2 == 0) {\n\t\t\tsorted_array.push_back(*iter);\n\t\t} else\
    \ {\n\t\t\tsorted_array.push_back(std::cendl());\n\t\t}\n\t}\n\n\tstd::sort(sorted_array.begin(),\
    \ sorted_array.end(), std::greater<long>());\n\treturn sorted_array;", "  std::sort(array.begin(),\
    \ array.end());\n  return array;", "    // Your code here\n    long sum = 0;\n\
    \    for (auto i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end());\n        return array;\n    }\n\
    \    long sum1 = 0;\n    for (auto i : array) {\n        sum1 += i;\n    }\n \
    \   long k = sum1 / 2;\n    long sum2 = 0;\n    for (auto i : array) {\n     \
    \   sum2 += i;\n    }\n    bool flag = true;\n    while (sum2 > sum1) {\n    \
    \    for (auto i : array) {\n            if (i == k) {\n                array.push_back(i);\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        sum1 += k;\n        sum2 += k;\n        k *= 2;\n    }\n    if (flag)\
    \ {\n        std::sort(array.begin(), array.end(), [](long i, long j) {\n    \
    \        return j > i;\n        });\n    }\n    return array;", "\tassert(array.size()\
    \ > 0);\n\t// Your code here\n\t\n\tlong sum = array[0] + array[array.size() -\
    \ 1];\n\tif (sum % 2 == 1){\n\t\tstd::sort(array.begin(), array.end());\n\t}\n\
    \telse{\n\t\tstd::sort(array.rbegin(), array.rend());\n\t}\n\treturn array;",
  "\tstd::vector<long> sorting(array.size());\n\tlong sum = 0;\n\t// get the sum of\
    \ the first index and the last index\n\tfor (long &x : array)\n\t\tsum += x;\n\
    \tif (sum % 2 == 1)\n\t\tstd::cout << \"Sort in ascending order\" << std::endl;\n\
    \telse\n\t\tstd::cout << \"Sort in descending order\" << std::endl;\n\t// sort\
    \ the original array based on the sum value\n\tfor (long &x : array)\n\t\tif (sum\
    \ - x <= 0) {\n\t\t\tlong j = sum - x;\n\t\t\twhile (j > 0) {\n\t\t\t\tsorting[j--]\
    \ = x;\n\t\t\t}\n\t\t} else {\n\t\t\tlong j = sum - x;\n\t\t\twhile (j < sum)\
    \ {\n\t\t\t\tsorting[j++] = x;\n\t\t\t}\n\t\t}\n\treturn sorting;", '  // Your
    code here', "  int sum;\n  // Your code goes here\n  // Your code goes here\n\
    \  std::sort(array.begin(), array.end());\n  // Your code goes here\n  \n  return\
    \ array;", "    int len = array.size();\n    long sum = 0;\n    for (int i = 0;\
    \ i < len; i++) {\n        sum += array[i];\n    }\n\n    if (sum % 2 == 0) {\n\
    \        // even\n        std::sort(array.begin(), array.end());\n    } else if\
    \ (sum % 2 == 1) {\n        // odd\n        std::sort(array.begin(), array.end(),\
    \ greater<long>());\n    }\n\n    return array;", "    long long sum;\n    long\
    \ long sum2;\n    std::sort(array.begin(), array.end(), [&sum, &sum2](long long\
    \ x, long long y){\n            sum = x + y;\n            sum2 = y + x;\n    \
    \        return sum < sum2;\n        });\n    return array;", "    int first =\
    \ 0, last = array.size() - 1;\n    while (first < last) {\n        int mid = first\
    \ + (last - first) / 2;\n        if (array[mid] % 2 == 0) {\n            last\
    \ -= 1;\n        } else {\n            first += 1;\n        }\n    }\n    if (array[first]\
    \ % 2 == 1) {\n        std::reverse(array.begin(), array.end());\n    }\n    return\
    \ array;", "    // your code goes here\n    // sort(array.begin(), array.end());\n\
    \    long sum = 0;\n    long last = array[0];\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::reverse(array.begin(),\
    \ array.end());\n    }\n    return array;", "    sort(array.begin(), array.end());\n\
    \    std::vector<long> temp;\n    for (long i : array)\n        temp.push_back(i);\n\
    \    return temp;", "    auto sum = std::accumulate(array.begin(), array.end(),\
    \ 0);\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end(),\
    \ [](long l, long r) { return l > r; });\n        return array;\n    }\n    else\
    \ {\n        std::sort(array.begin(), array.end(), [](long l, long r) { return\
    \ l < r; });\n        return array;\n    }", "    // code here\n    long long\
    \ sum = 0;\n    for (auto i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 != 0) {\n        for (auto i = 0; i < array.size(); i++)\
    \ {\n            std::swap(array[i], array[array.size() - i - 1]);\n        }\n\
    \    } else {\n        for (auto i = 0; i < array.size(); i++) {\n           \
    \ std::swap(array[i], array[(array.size() - 1) - i]);\n        }\n    }\n    return\
    \ array;", "  long long sum = 0;\n  for (size_t i = 0; i < array.size(); i++)\
    \ {\n    sum += array[i];\n  }\n  if (sum % 2 == 0) {\n    size_t mid = sum /\
    \ 2;\n    std::vector<long> result = sort_array(array, mid + 1, sum - mid);\n\
    \    for (size_t i = 0; i < result.size(); i++)\n      std::cout << result[i]\
    \ << \" \";\n    return result;\n  } else {\n    size_t mid = sum / 2;\n    std::vector<long>\
    \ result = sort_array(array + mid + 1, array.size());\n    for (size_t i = 0;\
    \ i < result.size(); i++)\n      std::cout << result[i] << \" \";\n    return\
    \ result;\n  }", "    // code here\n    long long sum;\n    for (long i = 0; i\
    \ < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end(), std::greater<long long>());\n\
    \    } else {\n        std::sort(array.begin(), array.end(), std::less<long long>());\n\
    \    }\n    return array;", "    long long sum = std::accumulate(array.begin(),\
    \ array.end(), 0LL);\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }", "  // write your code here\n\
    \  int mid = array.size() / 2;\n  if (array[mid] % 2 != 0)\n    std::sort(array.begin(),\
    \ array.end());\n  else\n    std::sort(array.begin() + mid, array.end());\n  std::reverse(array.begin(),\
    \ array.end());\n  return array;", "    // Write your code here.\n    int n =\
    \ array.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n       \
    \ sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;", "\tassert (array.size() >= 2);\n\tstd::vector<long>\
    \ vec(array.begin(), array.end());\n\tstd::vector<long>::iterator it1 = vec.begin();\n\
    \tstd::vector<long>::iterator it2 = vec.begin() + 1;\n\tlong sum = 0;\n\twhile\
    \ (it1 != vec.end()) {\n\t\tsum += *it1;\n\t\tit1++;\n\t}\n\tlong mid = sum /\
    \ 2;\n\twhile (it2 != vec.end()) {\n\t\tsum -= *it2;\n\t\tit2++;\n\t}\n\tif (sum\
    \ % 2 == 0) {\n\t\tstd::sort(vec.begin(), vec.end());\n\t} else {\n\t\tstd::sort(vec.begin(),\
    \ vec.end(), std::greater<>());\n\t}\n\treturn vec;", "    sort(array.begin(),\
    \ array.end(), [](int a, int b) { return (a + b) / 2; });\n    return array;",
  "    if (array.size() == 0) {\n        return {};\n    }\n    // write your code\
    \ here\n    long long sum=0;\n    long long s=array[0];\n    long long t=0;\n\
    \    for(auto it:array)\n    {\n        s=s+it;\n        t=t+it;\n    }\n    if(t%2==0)\n\
    \    {\n        std::swap(s,t);\n    }\n    long long last_index=array.size()-1;\n\
    \    long long first_index=0;\n    long long index=0;\n    while(index<last_index)\n\
    \    {\n        if(array[index]<s)\n        {\n            std::swap(array[index],array[first_index]);\n\
    \            first_index=index+1;\n        }\n        index++;\n    }\n    for(auto\
    \ it:array)\n    {\n        if(it<s)\n        {\n            std::swap(it,array[first_index]);\n\
    \            first_index=first_index+1;\n        }\n    }\n    return array;",
  "  std::vector<long> copy = array;\n  // sort in ascending order\n  auto end = copy.size()\
    \ - 1;\n  int sum = 0;\n  while (end >= 0) {\n    sum = copy[end] + copy[end -\
    \ 1];\n    if (sum % 2 != 0) {\n      std::swap(copy[end], copy[end - 1]);\n \
    \     --end;\n    }\n  }\n  return copy;", "    // write your code here\n    int\
    \ n = array.size();\n    if (n % 2 == 0)\n    {\n        long long left = array[0];\n\
    \        long long right = array[n-1];\n        long long temp;\n        if (left\
    \ < right)\n        {\n            temp = left;\n            left = right;\n \
    \           right = temp;\n        }\n        long long left = array[n/2];\n \
    \       long long right = array[n - 1]; // last element\n        long long temp;\n\
    \        if (left < right)\n        {\n            temp = left;\n            left\
    \ = right;\n            right = temp;\n        }\n        // if left > right,\
    \ we should swap the left and right\n        if (left > right)\n        {\n  \
    \          temp = left;\n            left = right;\n            right = temp;\n\
    \        }\n        // if left <= right, we should not swap it\n        std::swap(array[0],\
    \ array[n - 1]);\n        std::swap(array[n/2], array[n - 1]);\n    }\n    else\
    \ if (n % 2 == 1)\n    {\n        long long left = array[0];\n        long long\
    \ right = array[n-1];\n        long long temp;\n        if (left > right)\n  \
    \      {\n            temp = left;\n            left = right;\n            right\
    \ = temp;\n        }\n        long long left = array[n - 1];\n        long long\
    \ right = array[n / 2]; // middle element\n        long long temp;\n        if\
    \ (left > right)\n        {\n            temp = left;\n            left = right;\n\
    \            right = temp;\n        }\n        // if left > right, we should swap\
    \ the left and right\n        if (left > right)\n        {\n            temp =\
    \ left;\n            left = right;\n            right = temp;\n        }\n   \
    \     // if left <= right, we should not swap it\n        std::swap(array[0],\
    \ array[n - 1]);\n        std::swap(array[n / 2], array[n-1]);\n    }\n    std::vector<long>\
    \ output;\n    long long sum = 0;\n    for (int i = 0; i < n; i++)\n    {\n  \
    \      sum += array[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n     \
    \   if (sum % 2 == 0)\n        {\n            output.push_back(array[i]);\n  \
    \      }\n        else if (sum % 2 == 1)\n        {\n            output.push_back(array[i]);\n\
    \        }\n        sum += array[i];\n    }\n    return output;", "    // Your\
    \ code here\n    return array;", "    long long sum = 0;\n    // sort the array\
    \ in ascending order if the sum( first index value, last index value) is odd,\
    \ \n    // or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n    for (long long i = 0; i < (long long) array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end(), [&sum](long long a, long long b) {\n            return a < b ?\
    \ 1 : -1;\n        });\n    } else {\n        std::sort(array.rbegin(), array.rend(),\
    \ [&sum](long long a, long long b) {\n            return a < b ? 1 : -1;\n   \
    \     });\n    }\n    return array;", "    long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    // sort arr\n\
    \    // return result", "    assert(array.size() != 0);\n    long long sum = 0;\n\
    \    for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n   \
    \ }\n    int direction = 0;\n    if (sum % 2 != 0) {\n        direction = -1;\n\
    \        sum = sum + 2;\n    } else {\n        direction = 1;\n        sum = sum\
    \ - 2;\n    }\n    std::sort(array.begin(), array.end(), [&](long l1, long l2)\
    \ -> bool {\n        if (l1 == l2) {\n            return false;\n        }\n \
    \       long index = direction * l1 +  direction * l2;\n        return index <\
    \ 0;\n    });\n    return array;", "    long long sum = 0;\n    for (auto i :\
    \ array)\n        sum += i;\n    if (sum % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end());\n    else\n        std::sort(array.rbegin(), array.rend());\n\
    \    return array;", "    sort(array.begin(), array.end());\n    return array;",
  "    long long sum = 0, i = 0, j = 0, k = 0;\n    assert(array.size() != 0);\n \
    \   for (i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n  \
    \  if (sum % 2 == 0) {\n        for (j = 0; j < array.size(); j++) {\n       \
    \     for (k = 0; k <= j; k++) {\n                if (array[k] > array[j]) {\n\
    \                    std::swap(array[k], array[j]);\n                }\n     \
    \       }\n        }\n    } else {\n        for (j = 0; j < array.size(); j++)\
    \ {\n            for (k = 0; k <= j; k++) {\n                if (array[k] < array[j])\
    \ {\n                    std::swap(array[k], array[j]);\n                }\n \
    \           }\n        }\n    }\n    return array;", "    std::sort(array.begin(),\
    \ array.end(), [&](int a, int b) {\n        if (a + b > 0) return b - a;\n   \
    \     return a - b;\n    });\n    return array;", "    int mid;\n    long sum\
    \ = 0;\n    std::vector<long> res(array.size());\n    std::sort(res.begin(), res.end());\n\
    \    mid = (int)res.size() / 2;\n    for (int i = mid; i < res.size(); i++) {\n\
    \        sum += res[i];\n        if (sum % 2 == 1) {\n            std::swap(res[i],\
    \ res[mid]);\n            mid += 1;\n        } else {\n            std::swap(res[i],\
    \ res[res.size() - 1]);\n        }\n    }\n    return res;", "    long sum = 0;\n\
    \    for (auto i : array) {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n\
    \        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;", "   long long first = 0, last = array.size()\
    \ - 1;\n   long long sum = 0;\n   while (first < last) {\n       sum = array[first]\
    \ + array[last];\n       if (sum % 2 == 1) {\n           std::swap(array[first],\
    \ array[last]);\n           first++;\n           last--;\n       } else if (sum\
    \ % 2 == 0) {\n           std::swap(array[first], array[last]);\n           last--;\n\
    \       }\n   }\n   return array;", "  std::vector<long> new_array;\n  if (array.size()\
    \ <= 1) return array;\n  int sum = 0;\n  for (int i = 0; i < array.size(); i++)\
    \ {\n    sum += array[i];\n  }\n  if (sum % 2 != 0) {\n    std::sort(array.begin(),\
    \ array.end());\n    new_array.resize(array.size());\n    new_array[0] = array[0];\n\
    \    for (int i = 1; i < array.size(); i++) {\n      new_array[i] = array[i -\
    \ 1];\n    }\n  } else {\n    std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    new_array.resize(array.size());\n    new_array[array.size() - 1] = array[array.size()\
    \ - 2];\n    for (int i = 0; i < array.size() - 1; i++) {\n      new_array[i]\
    \ = array[i + 1];\n    }\n  }\n  return new_array;", "    // code here\n    return\
    \ 0;", "    std::vector<long> result;\n    std::sort(array.begin(), array.end());\n\
    \    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n   \
    \ if (sum % 2 == 0) {\n        for (long i : array) {\n            result.push_back(i);\n\
    \        }\n    } else {\n        for (long i : array) {\n            result.push_back(sum\
    \ - i);\n        }\n    }\n    return result;", "  int i, j;\n  std::vector<long>\
    \ new_array;\n  long sum = 0;\n  for (i = 0; i < (array.size() - 1); ++i) {\n\
    \    sum = array[i] + array[i + 1];\n    if (sum % 2 == 0) {\n      new_array.push_back((array[i\
    \ + 1] + array[i]) / 2);\n      sum += new_array.back();\n    } else {\n     \
    \ new_array.push_back((array[i] - array[i + 1]) / 2);\n      sum += new_array.back();\n\
    \    }\n  }\n  new_array.push_back(sum);\n  return new_array;", "    int n = array.size();\n\
    \    long long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end(),\
    \ [](long a, long b) { return a < b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [](long a, long b) { return a > b; });\n    }\n    return array;",
  "    // Your code here\n    int start = 0;\n    int end = 0;\n    for (int i = 0;\
    \ i < array.size(); ++i) {\n        end = start + i;\n        if (array[start]\
    \ > array[end]) {\n            std::swap(array[start], array[end]);\n        }\n\
    \        start = end + 1;\n    }\n    return array;", "    // write your code\
    \ here\n    std::sort(array.begin(), array.end(), [](int x, int y) {\n       \
    \ return x > y;\n    });\n    return array;", "    long sum = array.at(0);\n \
    \   for (int i = 1; i < array.size(); i++) {\n        sum += array.at(i);\n  \
    \  }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;", "    // write your code here\n    // return sorted_array;\n    long\
    \ long sum = 0;\n    int size = array.size();\n    for (int i = 0; i < size; i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;", "    //Your code here\n    int sum=0;\n    for(int\
    \ i=0;i<array.size();i++)\n    {\n        sum+=array[i];\n    }\n    if(sum%2==0)\n\
    \    {\n        std::sort(array.begin(),array.end());\n    }\n    else\n    {\n\
    \        std::sort(array.rbegin(),array.rend());\n    }\n    return array;", " \
    \   // Your code here\n    long arr[50];\n    int j = 0;\n    long sum = 0;\n\
    \    for (auto x: array)\n    {\n        arr[j++] = x;\n        sum += x;\n  \
    \  }\n    long evenOrOdd = (sum % 2) ? 1 : 0;\n    if(evenOrOdd % 2 == 1)\n  \
    \  {\n        std::sort(std::begin(arr), std::end(arr), [](int a, int b){return\
    \ (a<b)?true:(a>b)?false:false;});\n        return arr;\n    }\n    else\n   \
    \ {\n        std::sort(std::begin(arr), std::end(arr), [](int a, int b){return\
    \ (a<b)?true:(a>b)?false:true;});\n        return arr;\n    }", "  assert(array.size()\
    \ != 0);\n  long sum = 0;\n  for (long i = 0; i < array.size(); i++) {\n    sum\
    \ += array[i];\n  }\n  std::cout << \"sum of array is \" << sum << '\\n';\n  long\
    \ l = 0;\n  long r = array.size() - 1;\n  while (r != l) {\n    if (sum % 2 ==\
    \ 0) {\n      std::swap(array[l], array[r]);\n      r--;\n    } else {\n     \
    \ std::swap(array[l], array[r]);\n      l++;\n    }\n  }\n  return array;", " \
    \   int len = array.size();\n    long sum = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        sum = sum + array[i];\n    }\n    // print out the given array before\
    \ sorting\n    for (int i = 0; i < len; i++) {\n        std::cout << array[i]\
    \ << \" \";\n    }\n    std::cout << \"\\n\";\n    // return the given array after\
    \ sorting\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }", "    for (long i = 0; i < array.size(); i++)\n\
    \        std::swap(array[i], array[i + (int)array.size() / 2]);\n    for (int\
    \ i = 0; i < array.size(); i++)\n        array[i] -= array[i] % 2;\n    return\
    \ array;", "  std::vector<long> newArray;\n  long sum = 0;\n  long size = array.size();\n\
    \  for (int i = 0; i < size; i++) {\n    sum += array[i];\n  }\n  if (sum % 2\
    \ != 0) {\n    // descending order\n    for (long i = 0; i < size - 1; i++) {\n\
    \      newArray.push_back(array[i]);\n    }\n    for (int i = size - 1; i > 0;\
    \ i--) {\n      newArray.push_back(array[i]);\n    }\n  } else {\n    // ascending\
    \ order\n    for (long i = size - 1; i > 0; i--) {\n      newArray.push_back(array[i]);\n\
    \    }\n    for (int i = 0; i < size - 1; i++) {\n      newArray.push_back(array[i]);\n\
    \    }\n  }\n  return newArray;", "    auto first=array.begin();\n    auto end=array.end();\n\
    \    auto mid=first+(end/2);\n    if(*mid%2!=0) {\n        sort(first,end);\n\
    \    }\n    else {\n        sort(mid,end);\n    }\n    std::vector<long> res(first,end);\n\
    \    return res;", "    std::sort(array.begin(), array.end());\n    return array;",
  "  long long sum = 0;\n  for (long i = 0; i < array.size(); i++) {\n    sum = sum\
    \ + array[i];\n  }\n  if (sum % 2 == 0) {\n    return array;\n  } else {\n   \
    \ std::vector<long> reversed;\n    std::reverse(array.begin(), array.end());\n\
    \    reversed.insert(reversed.end(), array.begin(), array.end());\n    return\
    \ reversed;\n  }", "    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::cout\
    \ << \"descending\" << std::endl;\n        for (long i = 0; i < array.size();\
    \ i++) {\n            long temp = array[i];\n            while (i > 0 && temp\
    \ < array[i - 1]) {\n                array[i] = array[i - 1];\n              \
    \  i--;\n            }\n            array[i] = temp;\n        }\n    } else {\n\
    \        std::cout << \"ascending\" << std::endl;\n        for (long i = 0; i\
    \ < array.size(); i++) {\n            long temp = array[i];\n            while\
    \ (i > 0 && temp > array[i - 1]) {\n                array[i] = array[i - 1];\n\
    \                i--;\n            }\n            array[i] = temp;\n        }\n\
    \    }\n    return array;", "    std::vector<long> temp;\n    for (long i : array)\n\
    \        temp.push_back(i);\n\n    // sort the array in ascending order\n    std::sort(temp.begin(),\
    \ temp.end(), [](long a, long b) {\n        return a < b;\n    });\n    return\
    \ temp;", "    long long s = 0;\n    for (int i = 0; i < array.size(); ++i) {\n\
    \        s += array[i];\n    }\n    if (s % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    }\n    std::reverse(array.begin(),\
    \ array.end());\n    std::sort(array.begin(), array.end());\n    return array;",
  "    long i, mid, sum = 0;\n    long sum2 = 0, sum3 = 0, sum4 = 0;\n    for (i =\
    \ 0; i < array.size(); i++) {\n        sum = array[i] + sum;\n        mid = sum\
    \ >> 1;\n        if (i % 2 == 0) {\n            sum2 += mid;\n        } else {\n\
    \            sum3 += mid;\n        }\n    }\n    if (sum % 2 == 0) {\n       \
    \ sum4 += sum2;\n    } else {\n        sum4 += sum3;\n    }\n    long result[50];\n\
    \    int index = 0;\n    for (i = 0; i < array.size(); i++) {\n        sum = array[i]\
    \ + sum;\n        mid = sum >> 1;\n        if (i % 2 == 0) {\n            sum2\
    \ += mid;\n            result[index++] = mid;\n        } else {\n            sum3\
    \ += mid;\n            result[index++] = mid - 1;\n        }\n    }\n    for (i\
    \ = 0; i < array.size(); i++) {\n        sum = array[i] + sum;\n        mid =\
    \ sum >> 1;\n        if (i % 2 == 0) {\n            sum2 += mid;\n           \
    \ result[index++] = mid - 1;\n        } else {\n            sum3 += mid;\n   \
    \         result[index++] = mid;\n        }\n    }\n    for (i = 0; i < array.size();\
    \ i++) {\n        sum = array[i] + sum;\n        mid = sum >> 1;\n        if (i\
    \ % 2 == 0) {\n            sum2 += mid;\n            result[index++] = mid;\n\
    \        } else {\n            sum3 += mid;\n            result[index++] = mid\
    \ + 1;\n        }\n    }\n    for (i = 0; i < array.size(); i++) {\n        sum\
    \ = array[i] + sum;\n        mid = sum >> 1;\n        if (i % 2 == 0) {\n    \
    \        sum2 += mid;\n            result[index++] = mid + 1;\n        } else\
    \ {\n            sum3 += mid;\n            result[index++] = mid;\n        }\n\
    \    }\n    for (i = 0; i < array.size(); i++) {\n        sum = array[i] + sum;\n\
    \        mid = sum >> 1;\n        if (i % 2 == 0) {\n            sum2 += mid;\n\
    \            result[index++] = mid - 1;\n        } else {\n            sum3 +=\
    \ mid;\n            result[index++] = mid + 1;\n        }\n    }\n    return std::vector<long>(result,\
    \ result + index);", "    long long sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum = sum + array[i];\n    }\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum -= array[i];\n        if (sum < 0) {\n            std::swap(array[i],\
    \ array[array.size() - i - 1]);\n        }\n    }\n    return array;", "\tstd::vector<long>\
    \ ret;\n\tlong s = 0;\n\tfor (long i: array) {\n\t\ts += i;\n\t\tret.push_back(i);\n\
    \t}\n\tif (s % 2 == 0) {\n\t\tstd::sort(ret.begin(), ret.end(), [&array](long\
    \ a, long b) {\n\t\t\treturn a < b;\n\t\t});\n\t} else {\n\t\tstd::sort(ret.begin(),\
    \ ret.end(), [&array](long a, long b) {\n\t\t\treturn a > b;\n\t\t});\n\t}\n\t\
    return ret;", "    // code here\n    int n = array.size();\n    int sum = 0;\n\
    \    for (int i = 0; i < n - 1; ++i) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.begin(), array.end(), std::greater<long>());\n  \
    \  }\n    return array;", "    std::vector<long> ret(array.begin(), array.end());\n\
    \    sort(ret.begin(), ret.end());\n    return ret;", "    long long sum = 0;\n\
    \    long long len = array.size();\n    for (int i = 0; i < len; ++i) {\n    \
    \    sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;", "  std::vector<long> result;\n  int i = 0, j = 0,\
    \ temp;\n  while (i < array.size()) {\n    temp = 0;\n    while (j < array.size()\
    \ && array[j] > array[i]) {\n      temp = array[j];\n      ++j;\n    }\n    result.push_back(temp);\n\
    \    ++i;\n  }\n  i = 0;\n  j = array.size() - 1;\n  while (j > 0) {\n    temp\
    \ = 0;\n    while (i < array.size() && array[i] > array[j]) {\n      temp = array[i];\n\
    \      ++i;\n    }\n    result.push_back(temp);\n    --j;\n  }\n  return result;",
  "    // Write your code here.\n    std::sort(array.begin(), array.end(), [](long\
    \ a, long b) -> bool { return a < b; });\n    return array;", "\t// Your code\
    \ here\n\tstd::vector<long> new_arr;\n\tint sum = 0;\n\tlong temp;\n\tfor (long\
    \ &i : array) {\n\t\tsum += i;\n\t}\n\tfor (int i = 0; i < array.size(); i++)\
    \ {\n\t\ttemp = array[i];\n\t\tif (i % 2 == 0) {\n\t\t\tif (sum % 2 != 0) {\n\t\
    \t\t\tnew_arr.push_back(temp);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (sum % 2\
    \ == 0) {\n\t\t\t\tnew_arr.push_back(temp);\n\t\t\t}\n\t\t}\n\t}\n\treturn new_arr;",
  "    // Complete the function\n    long long sum = 0;\n    long long temp = 0;\n\
    \    long long sum2 = 0;\n    for (int i = 0; i < array.size(); i++) {\n     \
    \   sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::reverse(array.begin(),\
    \ array.end());\n        std::sort(array.begin(), array.end());\n    }\n    else\
    \ {\n        std::sort(array.begin(), array.end());\n    }\n    for (int i = 0;\
    \ i < array.size(); i++) {\n        sum2 += array[i];\n    }\n    std::vector<long>\
    \ result(array.size());\n    for (int i = 0; i < array.size(); i++) {\n      \
    \  temp = 0;\n        for (int j = i; j >= 0; j--) {\n            temp += array[j];\n\
    \            if (sum - temp - sum2 == 0) {\n                result[i] = array[j];\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n       \
    \ sum += array[i];\n    }\n    long long mid = sum / 2;\n    std::vector<long>\
    \ array2(array);\n    std::sort(array2.begin(), array2.end(), [&](long long a,\
    \ long long b) {\n        if ((a + b) % 2 == 1) {\n            return b < a;\n\
    \        }\n        return b > a;\n    });\n    sum = 0;\n    for (long i = 0;\
    \ i < array2.size(); i++) {\n        sum += array2[i];\n    }\n    if (sum % 2\
    \ != 0) {\n        std::sort(array2.rbegin(), array2.rend(), [&](long long a,\
    \ long long b) {\n            if (a < b) {\n                return 1;\n      \
    \      }\n            return a > b;\n        });\n    }\n    return array2;",
  "    // write your code here\n    int sum = 0;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        sum = sum + array[i];\n    }\n    if (sum % 2 == 0) {\n    \
    \    std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;", "    long long sum = 0;\n    for\
    \ (auto val : array) {\n        sum += val;\n    }\n    if (sum % 2 != 0) {\n\
    \        std::sort(array.begin(), array.end(), [](long l, long r){return l < r;});\n\
    \    } else {\n        std::sort(array.begin(), array.end(), [](long l, long r){return\
    \ l > r;});\n    }\n    return array;", "    long long sum = 0;\n    for (int\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 != 0) {\n        std::sort(array.begin(), array.end(), [] (long long a,\
    \ long long b) { return a < b; });\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), [] (long long a, long long b) { return a > b; });\n    }\n    return\
    \ array;", "\tint start = 0;\n\tint end = array.size() - 1;\n\tint mid = (start\
    \ + end) / 2;\n\tint sum = (array[start] + array[end]);\n\tif (sum % 2 == 1) {\n\
    \t\tstd::swap(array[end], array[mid]);\n\t}\n\twhile (start < end) {\n\t\twhile\
    \ (array[start] <= array[mid]) {\n\t\t\tstart++;\n\t\t}\n\t\twhile (array[mid]\
    \ < array[end]) {\n\t\t\tmid++;\n\t\t}\n\t\tstd::swap(array[start], array[mid]);\n\
    \t\tstart++;\n\t\tmid++;\n\t}\n\treturn array;", "    // code here\n    int i,\
    \ j;\n    long k;\n    long temp;\n    for (j = 0; j < array.size(); ++j) {\n\
    \        for (i = j + 1; i < array.size(); ++i) {\n            k = array[i] +\
    \ array[j];\n            if (k % 2 != 0) {\n                temp = array[i];\n\
    \                array[i] = array[j];\n                array[j] = temp;\n    \
    \        }\n        }\n    }\n    return array;", "    // your code goes here\n\
    \    long long sum = 0;\n    for (int i = 0; i < array.size(); i++) {\n      \
    \  sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long long &a, long long &b) {\n            return a > b;\n \
    \       });\n    } else {\n        std::sort(array.begin(), array.end(), [](long\
    \ long &a, long long &b) {\n            return a < b;\n        });\n    }\n  \
    \  return array;", "    // code here\n    long sum = 0;\n    for(long i: array)\
    \ {\n        sum = sum + i;\n    }\n    if(sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    }\n    return array;", "    std::vector<long> v;\n\
    \    long sum = 0;\n    for (long i : array) {\n        sum += i;\n        v.push_back(i);\n\
    \    }\n    if (sum % 2 == 0) {\n        for (long i : v) {\n            if (i\
    \ <= array[0]) {\n                std::swap(array[0], i);\n            }\n   \
    \     }\n        return array;\n    } else {\n        for (long i : v) {\n   \
    \         if (i >= array[0]) {\n                std::swap(array[0], i);\n    \
    \        }\n        }\n        return array;\n    }", "    std::sort(array.begin(),\
    \ array.end());\n    return array;", "    // write your code here\n    // return\
    \ 0;\n    long long sum = 0;\n    for (long long i : array) {\n        sum +=\
    \ i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;", "    std::sort(array.begin(), array.end());\n    return array;", '  //
    Your code goes here', "    for (size_t i = 1; i < array.size(); i++) {\n     \
    \   if (array[i] > array[i - 1]) {\n            long long temp;\n            temp\
    \ = array[i];\n            array[i] = array[i - 1];\n            array[i - 1]\
    \ = temp;\n        }\n    }\n    return array;", "  // Write your code here.\n\
    \  long long sum = 0;\n  for (int i = 0; i < array.size(); i++) {\n    sum +=\
    \ array[i];\n  }\n\n  int oddOrEven = sum % 2 == 0 ? 1 : -1;\n  std::sort(array.begin(),\
    \ array.end(), [oddOrEven](int a, int b) {\n    long long sc = a + b;\n    return\
    \ oddOrEven * sc / (a + b);\n  });\n  return array;", "    // Your code here\n\
    \    std::sort(array.begin(), array.end());\n    return array;", "    // code\
    \ here\n    std::vector<long> new_array(array.size(), 0);\n    for(size_t i =\
    \ 0; i < array.size(); i++) {\n        long left_sum = 0;\n        long right_sum\
    \ = 0;\n        for(size_t j = 0; j < array.size(); j++) {\n            if (i\
    \ == j) {\n                new_array[i] = array[j];\n            } else {\n  \
    \              left_sum += array[j];\n                right_sum += array[j];\n\
    \            }\n        }\n        if(left_sum % 2 != 0) {\n            std::swap(new_array[i],\
    \ new_array[array.size() - i - 1]);\n        } else {\n            std::swap(new_array[array.size()\
    \ - i - 1], new_array[i]);\n        }\n    }\n    return new_array;", "    //\
    \ write your code here\n    long long sum=0;\n    for(int i=0;i<array.size();i++)\n\
    \    {\n        sum+=array[i];\n    }\n\n    if(sum%2==1)\n    {\n        for(int\
    \ i=0;i<array.size();i++)\n        {\n            for(int j=i;j<array.size();j++)\n\
    \            {\n                if(array[i]>array[j])\n                {\n   \
    \                 std::swap(array[i],array[j]);\n                }\n         \
    \   }\n        }\n    }\n    else\n    {\n        for(int i=0;i<array.size();i++)\n\
    \        {\n            for(int j=i;j<array.size();j++)\n            {\n     \
    \           if(array[i]<array[j])\n                {\n                    std::swap(array[i],array[j]);\n\
    \                }\n            }\n        }\n    }\n    return array;", "   \
    \ // Write your code here\n    long long sum = 0;\n    int size = array.size();\n\
    \    for (int i = 1; i < size; i++) {\n        sum += array[i];\n    }\n    if\
    \ (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;",
  "    int sum = 0;\n    for (long &n : array) {\n        sum += n;\n    }\n    if\
    \ (sum % 2) {\n        std::sort(array.begin(), array.end());\n    }\n    else\
    \ {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return array;",
  "  // Write your code here\n  std::sort(array.begin(), array.end());\n  long sum\
    \ = 0;\n  for (size_t i = 0; i < array.size(); i++) {\n    sum += array[i];\n\
    \  }\n  if (sum % 2 == 0) {\n    return array;\n  } else {\n    std::reverse(array.begin(),\
    \ array.end());\n    return array;\n  }", "    // Your code here\n    std::vector<long>\
    \ v;\n    for (long i = 1; i < array.size(); i++) {\n        if (array[i] % 2\
    \ == 0) {\n            v.push_back(array[i]);\n        }\n    }\n\n    long sum\
    \ = 0;\n    for (long i : v) {\n        sum += i;\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(v.begin(), v.end());\n        return v;\n    }\n    else\
    \ {\n        std::sort(v.rbegin(), v.rend());\n        return v;\n    }", "  \
    \  long s = 0;\n    for (int i = 0; i < array.size(); i++) {\n        s += array[i];\n\
    \    }\n    int sum = (s % 2 == 0) ? (-1 * s) : s;\n    for (int i = 0; i < array.size();\
    \ i++) {\n        long x = array[i];\n        long y = array[array.size() - i\
    \ - 1];\n        long tmp = sum - x + y;\n        array[i] = tmp;\n    }\n   \
    \ return array;", "    long long sum = 0;\n    for(int i = 0; i < array.size();\
    \ i++){\n        sum += array[i];\n    }\n    // return array if sum is even\n\
    \    if(sum % 2 == 0){\n        return array;\n    }\n    // return array if sum\
    \ is odd\n    std::vector<long> new_array(array.size());\n    for(int i = 0; i\
    \ < array.size(); i++){\n        new_array[i] = array[i];\n    }\n    // return\
    \ array in descending order\n    for(int i = 0; i < new_array.size() - 1; i++){\n\
    \        for(int j = i + 1; j < new_array.size(); j++){\n            if(new_array[j]\
    \ > new_array[i]){\n                long long tmp = new_array[i];\n          \
    \      new_array[i] = new_array[j];\n                new_array[j] = tmp;\n   \
    \         }\n        }\n    }\n    return new_array;", "// Your code here\n  \
    \  if(array.empty()){\n        return array;\n    }\n    long sum=array[0];\n\
    \    for(long i=1;i<array.size();i++){\n        sum+=array[i];\n    }\n    if(sum%2==1){\n\
    \        long long temp=array[0];\n        for(long i=0;i<array.size()-1;i++){\n\
    \            if(array[i+1]>array[i]){\n                array[i+1]=array[i];\n\
    \                array[i]=temp;\n            }\n        }\n    }else{\n      \
    \  long long temp=array[0];\n        for(long i=0;i<array.size()-1;i++){\n   \
    \         if(array[i+1]<array[i]){\n                array[i+1]=array[i];\n   \
    \             array[i]=temp;\n            }\n        }\n    }\n    return array;",
  "    long sumOfFirstIndexAndLastIndex = array[0] + array[array.size() - 1];\n  \
    \  if (sumOfFirstIndexAndLastIndex & 1)\n        std::swap(array[0], array[array.size()\
    \ - 1]);\n    else\n        std::swap(array[0], array[array.size() - 1]);\n  \
    \  long sumOfMiddleIndexes = array[0] + array[array.size() / 2];\n    if (sumOfMiddleIndexes\
    \ & 1)\n        std::swap(array[0], array[array.size() / 2]);\n    else\n    \
    \    std::swap(array[0], array[array.size() / 2]);\n    // Sort\n    for (auto\
    \ index : array) {\n        sumOfFirstIndexAndLastIndex -= index;\n        sumOfMiddleIndexes\
    \ -= index;\n    }\n    return array;", "    int n = array.size();\n    std::sort(array.begin(),\
    \ array.end());\n    if (n % 2 == 0) {\n        std::reverse(array.begin(), array.end());\n\
    \    }\n    return array;", "    int left = 0;\n    int right = (int)array.size()\
    \ - 1;\n    while (left < right) {\n        int sumLeft = array[left];\n     \
    \   int sumRight = array[right];\n\n        if (sumLeft + sumRight % 2 == 0) {\n\
    \            int temp = array[left];\n            array[left] = array[right];\n\
    \            array[right] = temp;\n        }\n        else if (sumLeft + sumRight\
    \ % 2 == 1) {\n            int temp = array[right];\n            array[right]\
    \ = array[left];\n            array[left] = temp;\n        }\n        else {\n\
    \            left++;\n        }\n        right--;\n    }\n    return array;",
  "// Your code here\n//    sort(array.begin(), array.end());\n    long sum = 0;\n\
    \    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n\
    \    std::vector<long> result;\n    if (sum % 2 == 0) {\n        for (auto it=array.begin();\
    \ it!=array.end()-1; ++it) {\n            result.push_back(*it);\n        }\n\
    \        return result;\n    }\n    else {\n        for (auto it = array.rbegin();\
    \ it != array.rend(); ++it) {\n            result.push_back(*it);\n        }\n\
    \        return result;\n    }", "// Write your code here\n\tlong temp,x;\n\t\
    for(int i=0;i<array.size();i++){\n\t\tx=array[i];\n\t\ttemp=array[i+1];\n\t\t\
    if(temp%2!=0)\n\t\t\tarray[i+1]=x;\n\t}\n\t\n\treturn array;", "    long long\
    \ sum = 0;\n    for (auto const &i : array) {\n        sum += i;\n    }\n    assert(sum\
    \ > 0 && sum % 2 == 0);\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), [](long const &a, long const &b) {\n            return b - a;\n\
    \        });\n    } else {\n        std::sort(array.begin(), array.end(), [](long\
    \ const &a, long const &b) {\n            return a - b;\n        });\n    }\n\
    \    return array;", "    long long total = 0;\n    for (long long i = 0; i <\
    \ array.size(); i++) {\n        total += array[i];\n    }\n    if (total % 2 !=\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    }\n    return array;",
  "    int sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n    if\
    \ (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n        return\
    \ array;\n    }\n    else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }", "\t// Write your code here\n\t// Your code here\n\
    \    long long sum1 = 0, sum2 = 0;\n    for (long i = 0; i < array.size(); i++)\
    \ {\n        sum1 += array[i];\n        sum2 += array[i];\n    }\n    if (sum1\
    \ % 2 == 0) {\n        for (long i = 0; i < array.size(); i++) {\n           \
    \ array[i] = (array[i] - sum1) / 2;\n        }\n    }\n    else {\n        for\
    \ (long i = array.size() - 1; i >= 0; i--) {\n            array[i] = (array[i]\
    \ + sum2) / 2;\n        }\n    }\n    return array;", "\tlong long sum = 0;\n\t\
    for (int i = 0; i < array.size(); i++) {\n\t\tsum += array[i];\n\t}\n\tif (sum\
    \ % 2 == 0) {\n\t\tstd::sort(array.begin(), array.end());\n\t} else {\n\t\tstd::sort(array.rbegin(),\
    \ array.rend());\n\t}\n\treturn array;", "    // write your code here\n    std::sort(array.begin(),\
    \ array.end());\n    return array;", "    int n = array.size();\n    int last_sum\
    \ = 0;\n    long last_index = 0;\n    // find the last index\n    for (long i\
    \ = 0; i < n; i++) {\n        last_sum += array[i];\n        if (last_sum % 2\
    \ == 1) {\n            last_index = i;\n        }\n    }\n    // sort it\n   \
    \ long last_element = array[last_index];\n    int begin = 0, end = n;\n    while\
    \ (begin < end) {\n        long tmp = array[begin];\n        while (begin < end\
    \ && array[end] >= tmp) {\n            end--;\n        }\n        std::swap(array[begin++],\
    \ array[end]);\n    }\n    std::reverse(array.begin(), array.end());\n    return\
    \ array;", "    long long sum = 0;\n    std::vector<long> resultArray;\n    for\
    \ (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n        resultArray.push_back(sum);\n\
    \    }\n    std::sort(resultArray.begin(), resultArray.end());\n    return resultArray;",
  "    assert(array.size() > 0);\n    long s = array[0] + array[array.size() - 1];\n\
    \    for (long i = 0; i < array.size(); i++) {\n        s[i] = array[i];\n   \
    \ }\n    std::sort(array.begin(), array.end(), [&s] (const long &a, const long\
    \ &b) { return s < a; });\n    std::reverse(array.begin(), array.end());\n   \
    \ return array;", "    std::sort(array.begin(), array.end(), [&array](int a, int\
    \ b) {\n        return a + b < 0;\n    });\n\n    return array;", "    // do some\
    \ operation with array and return a sorted copy\n    return array;", "    // write\
    \ your code here\n    long long sum = 0;\n    std::vector<long> result;\n    for\
    \ (auto x : array)\n        sum += x;\n    if (sum % 2 == 1)\n        for (auto\
    \ it = array.rbegin(); it != array.rend(); ++it) {\n            result.push_back(*it);\n\
    \            sum += *it;\n        }\n    else\n        for (auto it = array.begin();\
    \ it != array.end(); ++it) {\n            result.push_back(*it);\n           \
    \ sum += *it;\n        }\n    return result;", "    std::vector<long> new_array;\n\
    \    for (long element : array) {\n        new_array.push_back(element);\n   \
    \ }\n    std::sort(new_array.begin(), new_array.end());\n    return new_array;",
  "    long long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    assert(sum % 2 == 0);\n    \n    std::vector<long> ans;\n    if (sum % 2\
    \ == 0) {\n        ans.push_back(array[0]);\n        for (long i : array) {\n\
    \            ans.push_back(i + array[0]);\n        }\n    } else {\n        ans.push_back(array[0]);\n\
    \        for (long i : array) {\n            ans.push_back(i - array[0]);\n  \
    \      }\n    }\n    return ans;", "    if (array.size() < 2)\n        return\
    \ array;\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n\n    if (sum % 2 == 0)\n        std::sort(array.begin(),\
    \ array.end(), [](const long& a, const long& b) { return a < b; });\n    else\n\
    \        std::sort(array.begin(), array.end(), [](const long& a, const long& b)\
    \ { return a > b; });\n    return array;", "    std::vector<long> res;\n    if(array.size()\
    \ == 0) {\n        return res;\n    }\n    if(array.size() == 1) {\n        res.push_back(array[0]);\n\
    \        return res;\n    }\n    long long mid = array[array.size() / 2];\n  \
    \  std::map<long, std::pair<long, long long>> m;\n    m.insert({0, std::make_pair(array[0],\
    \ mid)});\n    for(long i = 1; i < array.size(); i++) {\n        long left = m.begin()->second.first;\n\
    \        long right = m.begin()->second.second;\n        m.insert({i, std::make_pair(array[i\
    \ - 1], std::max(left, right) + mid)});\n    }\n    for(std::map<long, std::pair<long,\
    \ long long>>::iterator it = m.begin(); it != m.end(); it++) {\n        long left\
    \ = it->second.first;\n        long right = it->second.second;\n        if(left\
    \ < mid) {\n            res.push_back(left);\n        } else {\n            res.push_back(right);\n\
    \        }\n    }\n    return res;", "    int sum, temp;\n    std::vector<long>\
    \ sorted_array;\n    for (int i = 0; i < array.size(); i++) {\n        sum = array[i];\n\
    \        temp = i;\n        while (temp < array.size() && sum < array[temp] +\
    \ array[temp + 1]) {\n            sum += array[temp];\n            temp++;\n \
    \       }\n        if (sum % 2 == 0) sorted_array.push_back(sum);\n        else\
    \ sorted_array.push_back(sum - 1);\n    }\n    return sorted_array;", "    for\
    \ (long i = 0; i < array.size(); i++) {\n        for (int j = i; j < array.size();\
    \ j++) {\n            if (array[j] < array[j - 1]) {\n                long temp\
    \ = array[j];\n                array[j] = array[j - 1];\n                array[j\
    \ - 1] = temp;\n            }\n        }\n    }\n    return array;", "    // code\
    \ here\n    long long sum = 0;\n    long long sum2 = 0;\n    long long n = 0;\n\
    \    long long k = 0;\n    for (long long i = 0; i < array.size(); i++) {\n  \
    \      sum += array[i];\n    }\n    n = array.size();\n    k = sum % 2;\n    if\
    \ (sum % 2 == 1) {\n        for (long long i = 0; i < array.size(); i++) {\n \
    \           sum2 += array[i];\n        }\n        std::sort(array.begin(), array.end(),\
    \ [sum2](long long a, long long b) {\n            return sum2 < a;\n        });\n\
    \    }\n    return array;", '  // +++your code here+++', "    // Write your code\
    \ here\n    if(array.empty())\n        return array;\n    int sum=0;\n    for\
    \ (auto i:array) {\n        sum+=i;\n    }\n    int len = array.size();\n    if(sum%2==0)\n\
    \    {\n        for(int i=0;i<len;i++){\n            for(int j=i+1;j<len;j++){\n\
    \                if(array[i]<array[j]){\n                    long temp = array[i];\n\
    \                    array[i] = array[j];\n                    array[j] = temp;\n\
    \                }\n            }\n        }\n    }\n    else{\n        for(int\
    \ i=0;i<len;i++){\n            for(int j=len-1;j>i;j--){\n                if(array[i]<array[j]){\n\
    \                    long temp = array[i];\n                    array[i] = array[j];\n\
    \                    array[j] = temp;\n                }\n            }\n    \
    \    }\n    }\n    return array;", "    // Write your code here\n    long sum\
    \ = 0;\n    for (int i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 != 0) {\n        std::reverse(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    }", "  // TODO: Complete me!\n  std::vector<long>\
    \ arr;\n  for (size_t i = 0; i < array.size(); ++i) {\n    arr.push_back(array[i]);\n\
    \  }\n  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    return a >\
    \ b ? 1 : -1;\n  });\n\n  return arr;", "    long s = array[0];\n    long e =\
    \ array[array.size() - 1];\n    if (e - s + 1 == 1)\n        std::sort(array.begin(),\
    \ array.end());\n    else\n        std::sort(array.begin(), array.end(), [&array](long\
    \ a, long b) { return (a + b + 1) % 2 == 1; });\n    return array;", "    // Your\
    \ code here\n    long long int sum = 0;\n    long long int n = array.size();\n\
    \    for (long long int i = 0; i < n; i++) {\n        sum += array[i];\n    }\n\
    \    assert(n % 2 == 0);\n    if (sum % 2 == 0) {\n        return std::sort(array.begin(),\
    \ array.end(), [](int a, int b) -> bool {\n            return a > b;\n       \
    \ });\n    }\n    else {\n        return std::sort(array.begin(), array.end(),\
    \ [](int a, int b) -> bool {\n            return a < b;\n        });\n    }",
  "    long long sum=0;\n    std::sort(array.begin(), array.end(), [&sum](int a, int\
    \ b) {\n        sum = std::min(a, b) + std::max(a, b);\n        return sum % 2;\n\
    \    });\n    return array;", "  assert(array.size() != 0);\n  int sum = 0;\n\
    \  for (long i : array) {\n    sum += i;\n  }\n  if (sum % 2 == 1) {\n    std::vector<long>\
    \ tmp;\n    for (long i : array) {\n      tmp.push_back(i);\n    }\n    std::sort(tmp.begin(),\
    \ tmp.end());\n    return tmp;\n  } else {\n    std::sort(array.begin(), array.end());\n\
    \    return array;\n  }", "    int mid = array.size() / 2;\n    long leftSum =\
    \ 0;\n    long rightSum = 0;\n    long left = array[0];\n    long right = array[mid];\n\
    \    for (size_t i = 1; i < array.size(); i++) {\n        if (array[i] > left)\
    \ {\n            leftSum += array[i - 1];\n            left += array[i - 1];\n\
    \        } else if (array[i] > right) {\n            rightSum += array[i - 1];\n\
    \            right += array[i - 1];\n        }\n    }\n    if (leftSum % 2 ==\
    \ 1) {\n        // ascend\n        std::reverse(array.begin(), array.end());\n\
    \        std::sort(array.begin(), array.end());\n        return array;\n    }\
    \ else if (rightSum % 2 == 0) {\n        // descend\n        std::reverse(array.begin(),\
    \ array.end());\n        std::sort(array.rbegin(), array.rend());\n        return\
    \ array;\n    } else {\n        // no change\n        return array;\n    }", " \
    \   long long sum = 0;\n    for (long long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n\n    if (sum % 2 == 0){\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n\n    return array;", "    // code here\n    auto sum = std::accumulate(array.begin(),\
    \ array.end(), 0);\n    std::vector<long> result;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        if (sum % 2 == 0) {\n            result.push_back(array[i]);\n\
    \        }\n    }\n    for (long i = 0; i < array.size(); i++) {\n        if (sum\
    \ % 2 == 1) {\n            result.push_back(array[i]);\n        }\n    }\n   \
    \ return result;", "    //Your code goes here\n    long sum=0;\n    long sum1=0;\n\
    \    long temp;\n    for (auto i : array) {\n        sum+=i;\n    }\n    for (auto\
    \ i : array) {\n        sum1-=i;\n    }\n    if(sum1%2==0){\n        for (auto\
    \ i : array) {\n            temp=i;\n        }\n        auto begin=std::partition(array.begin(),\
    \ array.end(), [&](long a) {\n            return temp == a;\n        });\n   \
    \     array.erase(begin, array.end());\n    }\n    else{\n        for (auto i\
    \ : array) {\n            temp=i;\n        }\n        auto begin=std::partition(array.begin(),\
    \ array.end(), [&](long a) {\n            return temp < a;\n        });\n    \
    \    array.erase(begin, array.end());\n    }\n    return array;", '  // Your code
    goes here', "  long result = 0;\n  for (size_t i = 0; i < array.size(); i++) {\n\
    \    result += array[i];\n    if (result % 2 != 0) {\n      std::swap(array[i],\
    \ array[array.size() - i - 1]);\n    }\n  }\n  return array;", "    if (array.size()\
    \ <= 1) return array;\n    int mid = array.size() / 2;\n    int sum = array[0]\
    \ + array[mid];\n    if (sum % 2 == 0) {\n        std::reverse(array.begin() +\
    \ mid, array.end());\n        return sort_array(array);\n    } else {\n      \
    \  std::reverse(array.begin(), array.begin() + mid);\n        return sort_array(array);\n\
    \    }", "    std::sort(array.begin(), array.end());\n    return array;", '    //
    Your code here', "    //write your code here\n    sort(array.begin(),array.end());\n\
    \    return array;", "    // code here\n    int sum = 0;\n    for (int i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 !=\
    \ 0) {\n        return array;\n    } else {\n        std::vector<long> ans;\n\
    \        for (long i = 0; i < array.size() - 1; i++) {\n            for (int j\
    \ = 0; j < i; j++) {\n                if (array[j] > array[j + 1]) {\n       \
    \             long temp = array[j];\n                    array[j] = array[j +\
    \ 1];\n                    array[j + 1] = temp;\n                }\n         \
    \   }\n            ans.push_back(array[i]);\n        }\n        return ans;\n\
    \    }", "    // code here\n    int sum = 0;\n    for (int i = 0; i < array.size()\
    \ - 1; i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n    \
    \    std::sort(array.begin(), array.end());\n    }\n    else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;", "   long long sum = 0;\n   std::vector<long>\
    \ out;\n   for (auto val : array) {\n       sum += val;\n       out.emplace_back(val);\n\
    \   }\n   auto lo = std::lower_bound(out.begin(), out.end(), sum);\n   auto hi\
    \ = std::upper_bound(out.begin(), out.end(), sum);\n   if(lo == out.end() || hi\
    \ == out.end()) {\n       return out;\n   } else if ( lo[1] == sum ) {\n     \
    \  std::reverse(lo, hi);\n   }\n   std::vector<long> result;\n   while (hi !=\
    \ lo) {\n       result.emplace_back(*hi);\n       hi++;\n   }\n   std::reverse(lo,\
    \ hi);\n   return result;", "    int i, sum_first = array[0], sum_last = array[array.size()\
    \ - 1];\n    std::vector<long> result = array;\n    // Sort array in ascending\
    \ order\n    if (sum_first > sum_last) {\n        std::swap(sum_first, sum_last);\n\
    \    }\n    for (i = 0; i < array.size(); ++i) {\n        int j = i;\n       \
    \ while ((j - 1) >= 0 && array[j - 1] > array[j]) {\n            std::swap(array[j\
    \ - 1], array[j]);\n            j--;\n        }\n    }\n    // Sum all values\
    \ from 0 to i\n    long s = 0;\n    for (i = 0; i < array.size(); ++i) {\n   \
    \     s += array[i];\n    }\n    if (sum_first % 2 == 0) {\n        // Sum all\
    \ values from i to n-1\n        long s_sum = (i + 1) * sum_last;\n        for\
    \ (i = array.size() - 1; i >= 0; --i) {\n            s_sum += array[i];\n    \
    \        result.push_back((s % 2) == 0 ? s_sum : -s_sum);\n            s = (s\
    \ + array[i]) / 2;\n        }\n    } else {\n        // Sum all values from i\
    \ to 0\n        long s_sum = (i + 1) * sum_first;\n        for (i = array.size()\
    \ - 1; i >= 0; --i) {\n            s_sum += array[i];\n            result.push_back((s\
    \ % 2) == 0 ? s_sum : -s_sum);\n            s = (s + array[i]) / 2;\n        }\n\
    \    }\n    return result;", "    int n = array.size();\n    long long sum = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 != 0) {\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    // write your code here\n    auto sum = array.back() + array.front();\n\
    \    int odd = sum % 2;\n    sum = (sum - sum / 2 + odd) / 2;\n    if(sum == 0)\
    \ return array;\n    if(sum == 1) return array;\n    std::sort(array.begin(),\
    \ array.end(), [](const long &l, const long &r) {\n        return l > r;\n   \
    \ });\n    return array;", "    // Write your code here\n    return array;", " \
    \   //write your code here\n    assert(array.size() != 0);\n    long sum = 0;\n\
    \    for (long i = 1; i < array.size(); i++) {\n        sum += array[i];\n   \
    \ }\n    long flag = 0;\n    if (sum % 2 == 1) {\n        flag = 1;\n    }\n \
    \   return std::vector<long>(array.begin(), array.end());", "    int n = array.size();\n\
    \    std::vector<long> ret(n);\n    for (long i = 0; i < n; i++) {\n        ret[i]\
    \ = array[i];\n    }\n    long min_sum = std::accumulate(ret.cbegin(), ret.cend(),\
    \ 0);\n    int left_sum = 0;\n    int right_sum = 0;\n    std::vector<int> temp;\n\
    \    std::vector<int> temp2;\n    for (int i = 0; i < n; i++) {\n        if (ret[i]\
    \ > ret[i - 1]) {\n            temp.push_back(ret[i - 1]);\n            left_sum\
    \ += ret[i - 1];\n        } else {\n            temp.push_back(ret[i]);\n    \
    \        right_sum += ret[i];\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (temp[i] > temp[i - 1]) {\n            temp2.push_back(temp[i\
    \ - 1]);\n        } else {\n            temp2.push_back(temp[i]);\n        }\n\
    \    }\n    assert(temp2.size() == n);\n    if (left_sum % 2 == 1) {\n       \
    \ return temp2;\n    } else {\n        return temp;\n    }", "    int size = array.size();\n\
    \    assert(size >= 0);\n    long long temp = 0;\n    int i;\n    long long sum\
    \ = 0;\n    for (i = 0; i < size; ++i) {\n        sum += array[i];\n        if\
    \ (sum % 2 == 0) {\n            temp = sum;\n            sum = array[i];\n   \
    \         array[i] = temp;\n        }\n    }\n    std::vector<long> output; //\
    \ the output array\n    output.push_back(array[0]);\n    for (i = 1; i < size;\
    \ ++i) {\n        if (sum % 2 == 1) {\n            output.push_back(array[i]);\n\
    \        }\n        else {\n            temp = sum;\n            sum = array[i];\n\
    \            array[i] = temp;\n        }\n    }\n    return output;", "    //\
    \ Your code here\n    std::sort(array.begin(), array.end());\n    return array;",
  "    // write your code here\n    long long int sum=0, sum2=0;\n    for(int i=0;\
    \ i<array.size();i++){\n        sum=sum+array[i];\n    }\n    for(int i=0; i<array.size();i++){\n\
    \        sum2=sum2+array[i];\n    }\n    long long int sum3=sum2+sum;\n    \n\
    \    if((sum%2==0)&&(sum3%2!=0)){\n        for(int i=0; i<array.size();i++){\n\
    \            array[i]=array[i-1];\n        }\n        for(int i=array.size()-1;\
    \ i>0; i--){\n            array[i]=array[i+1];\n        }\n    }\n    else{\n\
    \        for(int i=0; i<array.size();i++){\n            array[i]=array[i-1];\n\
    \        }\n        for(int i=array.size()-1; i>0; i--){\n            array[i]=array[i+1];\n\
    \        }\n    }\n    return array;", "    long sum = std::accumulate(array.begin(),\
    \ array.end(), 0);\n    if (sum & 1) {\n        std::sort(array.begin(), array.end(),\
    \ [](long a, long b) -> bool {\n            return a < b;\n        });\n    }\n\
    \    else {\n        std::sort(array.rbegin(), array.rend(), [](long a, long b)\
    \ -> bool {\n            return a < b;\n        });\n    }\n    return array;",
  "\tassert (array.size() > 0);\n\tauto first = array.begin();\n\tauto last = array.end();\n\
    \tint sum = (*first) + (*last);\n\tint mid = 0;\n\tint swap = 0;\n\tif (sum%2\
    \ != 0) {\n\t\tmid = first;\n\t\twhile (mid != last) {\n\t\t\twhile (mid != first\
    \ && *mid > sum) {\n\t\t\t\tswap++;\n\t\t\t\tmid++;\n\t\t\t}\n\t\t\twhile (mid\
    \ != first && *mid < sum) {\n\t\t\t\tswap--;\n\t\t\t\tmid++;\n\t\t\t}\n\t\t\t\
    if (swap == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswap = 0;\n\t\t\tfirst++;\n\t\
    \t\tlast--;\n\t\t}\n\t} else {\n\t\tmid = first;\n\t\twhile (mid != last) {\n\t\
    \t\twhile (mid != first && *mid < sum) {\n\t\t\t\tswap++;\n\t\t\t\tmid++;\n\t\t\
    \t}\n\t\t\twhile (mid != first && *mid > sum) {\n\t\t\t\tswap--;\n\t\t\t\tmid++;\n\
    \t\t\t}\n\t\t\tif (swap == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswap = 0;\n\t\t\
    \tfirst++;\n\t\t\tlast--;\n\t\t}\n\t}\n\tstd::vector<long> ans;\n\tans.reserve(array.size()\
    \ - mid);\n\tfirst = mid;\n\tlast = mid;\n\tmid++;\n\twhile (first != last) {\n\
    \t\tans.push_back(*first);\n\t\tfirst++;\n\t}\n\treturn ans;", "  std::sort(array.begin(),\
    \ array.end());\n  return array;", "    if (array.size() <= 1) return array;\n\
    \    std::vector<long> copy = array;\n    sort(copy.begin(), copy.end());\n  \
    \  return copy;", "    std::sort(array.begin(), array.end());\n    return array;",
  "\t// Your code here", "\tint n = array.size();\n\tassert(n >= 0);\n\tif (n==0)\n\
    \t\treturn {};\n\tlong long sum=0;\n\tint first=0;\n\tint last=n-1;\n\tlong long\
    \ max_num=array[0];\n\twhile(first < last){\n\t\tsum+=array[first];\n\t\tmax_num=std::max(max_num,array[last]);\n\
    \t\tif(sum%2 != 0){\n\t\t\tstd::swap(array[first],array[last]);\n\t\t\tfirst++;\n\
    \t\t\tlast--;\n\t\t}\n\t\telse{\n\t\t\tsum-=array[first];\n\t\t\tfirst++;\n\t\t\
    \tlast--;\n\t\t}\n\t}\n\treturn array;", "    std::sort(array.begin(), array.end());\n\
    \    return array;", "    // code here\n    int n = array.size();\n    assert(n\
    \ >= 0);\n    if (n < 2) {\n        return array;\n    }\n    long sum = 0;\n\
    \    for (long i = 0; i < n - 1; i++) {\n        sum += array[i];\n    }\n   \
    \ if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n    }\n\
    \    return array;", "    // code here\n    if (array.size() <= 1) return array;\n\
    \    long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n        sum\
    \ += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::sort(array.begin(), array.end(),\
    \ std::greater<long>());\n    }\n    return array;", "    // Your code here\n\
    \    if(array.size() <= 1){\n        return array;\n    }\n    // Your code here\n\
    \    int mid = array.size()/2;\n    std::vector<long> array_a = array;\n    std::vector<long>\
    \ array_b = array;\n\n    int aSum = array_a[0] + array_a[mid];\n    int bSum\
    \ = array_b[0] + array_b[mid];\n\n    if(aSum%2 != bSum%2){\n        std::vector<long>\
    \ array_c = array;\n        for(int i = 0; i < mid; ++i){\n            int aSum2\
    \ = array_a[i] + array_a[i+1];\n            int bSum2 = array_b[i] + array_b[i+1];\n\
    \n            if(aSum%2 == bSum%2){\n                array_c[i] = array_a[i];\n\
    \                array_c[i+1] = array_a[i+1];\n                array_c[i+2] =\
    \ array_b[i];\n                array_c[i+3] = array_b[i+1];\n            }\n \
    \           else{\n                array_c[i] = array_b[i];\n                array_c[i+1]\
    \ = array_b[i+1];\n                array_c[i+2] = array_a[i];\n              \
    \  array_c[i+3] = array_a[i+1];\n            }\n        }\n        return array_c;\n\
    \    }\n    else{\n        std::vector<long> array_c = array;\n        for(int\
    \ i = 0; i < (mid+1); ++i){\n            int aSum2 = array_a[i] + array_a[i+1];\n\
    \            int bSum2 = array_b[i] + array_b[i+1];\n\n            if(aSum%2 ==\
    \ bSum%2){\n                array_c[i] = array_a[i];\n                array_c[i+1]\
    \ = array_a[i+1];\n                array_c[i+2] = array_b[i];\n              \
    \  array_c[i+3] = array_b[i+1];\n            }\n            else{\n          \
    \      array_c[i] = array_b[i];\n                array_c[i+1] = array_b[i+1];\n\
    \                array_c[i+2] = array_a[i];\n                array_c[i+3] = array_a[i+1];\n\
    \            }\n        }\n        return array_c;\n    }", "    // Sort from\
    \ smallest to largest.\n    long long min1 = array[0];\n    long long min2 = array[0];\n\
    \    for (long long i = 0; i < array.size(); i++) {\n        if (min1 > array[i])\
    \ min2 = min1;\n        min1 = array[i];\n    }\n    if (min2 > array[array.size()\
    \ - 1]) min2 = min2;\n    long long max = array[0];\n    for (long long i = 0;\
    \ i < array.size(); i++) {\n        if (max < array[i]) max = array[i];\n    }\n\
    \    assert(min1 < max);\n    // Now we know min and max.\n    std::vector<long>\
    \ res(array.size());\n    for (long long i = 0; i < array.size(); i++) {\n   \
    \     if (i == 0) res[i] = min1;\n        else if (i == array.size() - 1) res[i]\
    \ = max;\n        else res[i] = array[i] - array[i - 1];\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    // write your code here\n    int sum = 0;\n\
    \    for(int i=0; i<array.size(); i++){\n        sum+=array[i];\n    }\n    if(sum%2==1){\n\
    \        std::sort(array.begin(), array.end());\n    }\n    else{\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;", "    // write your code in here\n\
    \    assert(array.size() == sizeof(array)/sizeof(array[0]));\n    long long sum\
    \ = 0;\n    for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.begin(), array.end(), std::greater<int>());\n\
    \    }\n    return array;", "    // write your code in here.\n    // O(NlogN)\
    \ time and O(N) space\n    int sum = 0;\n    for (auto it = array.begin(); it\
    \ != array.end(); ++it) {\n        sum += *it;\n    }\n    if (sum % 2 == 1) {\n\
    \        std::sort(array.begin(), array.end());\n    }\n    else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;", "   long sum = 0;\n   int n = array.size();\n\
    \   for(int i = 0; i < n; i++) {\n       sum += array[i];\n   }\n   if(sum % 2\
    \ != 0){\n       std::sort(array.begin(),array.end());\n   }else{\n       std::sort(array.rbegin(),array.rend());\n\
    \   }\n   return array;", "   long s = 0;\n   for (long i: array) {\n       s\
    \ += i;\n   }\n   assert(s % 2 == 0);\n   std::sort(array.begin(), array.end());\n\
    \   std::vector<long> result; \n   for (long i: array) {\n       result.push_back(s);\n\
    \   }\n   return result;", "    // code here\n    std::sort(array.begin(), array.end(),\
    \ [](long a, long b) {\n        return a > b;\n    });\n    return array;", " \
    \   long sum = 0;\n    long min_sum = LONG_MAX;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n        if (sum < min_sum) {\n           \
    \ min_sum = sum;\n        }\n    }\n    if (min_sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }", "    long long sum = 0;\n   \
    \ for (int i = 0; i < array.size(); i++) {\n        sum = array[i] + sum;\n  \
    \  }\n    if (sum % 2 == 1){\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    }else{\n        std::sort(array.begin(), array.end(),\
    \ [](long long a, long long b){return a < b; });\n        return array;\n    }",
  "    std::sort(array.begin(), array.end());\n    return array;", "    int sum =\
    \ std::accumulate(array.begin(), array.end(), 0);\n    assert(sum % 2 != 0);\n\
    \n    // Sort in descending order\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end(), std::greater<long>());\n    } else {\n        std::sort(array.begin(),\
    \ array.end(), std::less<long>());\n    }\n\n    // return the array\n    return\
    \ array;", "    std::vector<long> sorted_array;\n    if (array[0] == array[1])\
    \ {\n        // sort array if length is odd\n        sorted_array = {array[0],\
    \ array[0]};\n        std::sort(sorted_array.begin(), sorted_array.end());\n \
    \       return sorted_array;\n    }\n    if (array[-1] == array[-2]) {\n     \
    \   // sort array if length is even\n        sorted_array = {array[-1], array[-2]};\n\
    \        std::sort(sorted_array.begin(), sorted_array.end());\n        return\
    \ sorted_array;\n    }\n    // sort array if length is odd\n    sorted_array =\
    \ {array[0], array[1]};\n    std::sort(sorted_array.begin(), sorted_array.end());\n\
    \    std::reverse(sorted_array.begin(), sorted_array.end());\n    return sorted_array;",
  "    // write your code here\n    const size_t N = array.size();\n    if(N % 2 ==\
    \ 0) {\n        long long int firstValue = array[0];\n        long long int lastValue\
    \ = array[N-1];\n        long long int middleValue = 0;\n        for(size_t i\
    \ = 1; i < N; i++) {\n            middleValue += array[i];\n            if(middleValue\
    \ % 2 != 0)\n                lastValue = array[i];\n            else\n       \
    \         firstValue = array[i];\n        }\n        std::vector<long> retval;\n\
    \        retval.push_back(firstValue);\n        retval.push_back(lastValue);\n\
    \        return retval;\n    } else {\n        long long int firstValue = array[0];\n\
    \        long long int lastValue = array[N-1];\n        long long int middleValue\
    \ = 0;\n        for(size_t i = 1; i < N; i++) {\n            middleValue += array[i];\n\
    \            if(middleValue % 2 == 0)\n                firstValue = array[i];\n\
    \            else\n                lastValue = array[i];\n        }\n        std::vector<long>\
    \ retval;\n        retval.push_back(firstValue);\n        retval.push_back(lastValue);\n\
    \        return retval;\n    }", "    // Your code here\n    long sum = 0, cur\
    \ = 0;\n    for (long i : array) {\n        cur += i;\n        sum += cur;\n \
    \   }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.begin(), array.end(),\
    \ [](long i, long j) {return j > i;});\n        return array;\n    }", "  long\
    \ long sum = 0;\n  for (size_t i = 0; i < array.size(); i++) {\n    sum += array[i];\n\
    \  }\n\n  if (sum % 2 != 0) {\n    size_t left_index, right_index;\n    for (size_t\
    \ i = 0; i < array.size(); i++) {\n      if (array[i] < array[left_index]) {\n\
    \        left_index = i;\n      }\n      if (array[i] > array[right_index]) {\n\
    \        right_index = i;\n      }\n    }\n\n    size_t temp = array[left_index];\n\
    \    array[left_index] = array[right_index];\n    array[right_index] = temp;\n\
    \    return array;\n  } else {\n    std::vector<long> arr(array.size());\n   \
    \ for (size_t i = 0; i < array.size(); i++) {\n      arr[i] = array[i];\n    }\n\
    \n    long long sum1 = 0;\n    long long sum2 = 0;\n    for (size_t i = 0; i <\
    \ arr.size(); i++) {\n      sum1 += arr[i];\n      sum2 += arr[i];\n    }\n\n\
    \    for (size_t i = 0; i < arr.size(); i++) {\n      if (arr[i] < sum1) {\n \
    \       arr[i] = sum1 - arr[i];\n      } else if (arr[i] > sum2) {\n        arr[i]\
    \ = sum2 - arr[i];\n      }\n    }\n    return arr;\n  }", "    long sum = array[0];\n\
    \    for (long x : array)\n        sum += x;\n    if (sum % 2 == 0) {\n      \
    \  std::sort(array.begin(), array.end());\n        return array;\n    } else {\n\
    \        std::sort(array.begin(), array.end(), std::greater<long>());\n      \
    \  return array;\n    }", "    int n = array.size();\n    assert(n >= 0);\n  \
    \  std::vector<long> ans;\n    long sum = 0;\n    for (int i = 0; i < n; ++i)\
    \ {\n        sum = array[i] + sum;\n        if (sum % 2 != 0) {\n            ans.push_back(array[i]);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;", " \
    \   std::vector<long> new_array;\n    // code here\n    // write your code\n \
    \   return new_array;", "    if (array.size() < 2) {\n        return array;\n\
    \    }\n\n    long long sum = array[0] + array[array.size() - 1];\n    std::vector<long>\
    \ res(array.size());\n    std::cout << \"sum: \" << sum << std::endl;\n    if\
    \ (sum % 2 == 1) {\n        std::cout << \"sorting in descending order\" << std::endl;\n\
    \        for (size_t i = 0; i < res.size(); ++i) {\n            res[i / 2] = array[i]\
    \ - array[i / 2];\n        }\n    } else {\n        std::cout << \"sorting in\
    \ ascending order\" << std::endl;\n        for (size_t i = 0; i < res.size();\
    \ ++i) {\n            res[i / 2] = array[i / 2] - array[i];\n        }\n    }\n\
    \n    return res;", "    // sort array in ascending order if the sum( first index\
    \ value, last index value) is odd\n    // sort array in descending order if the\
    \ sum( first index value, last index value) is even\n    long sumOfFirstElements\
    \ = std::accumulate(array.begin(), array.end(), 0);\n    long sumOfLastElements\
    \ = std::accumulate(array.rbegin(), array.rend(), 0);\n    bool isEven = sumOfFirstElements\
    \ % 2 == 0 && sumOfLastElements % 2 == 0;\n    if (isEven) {\n        std::sort(array.begin(),\
    \ array.end());\n    }\n    else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;", "    for (auto i = 0; i < array.size(); i++) {\n \
    \       long current = array[i];\n        for (auto j = i + 1; j < array.size();\
    \ j++) {\n            long next = array[j];\n            long sum = current +\
    \ next;\n            if (sum % 2 == 1) {\n                std::swap(current, next);\n\
    \            }\n        }\n    }\n    return array;", "    long long sum=0;\n\
    \    for(int i=0;i<array.size();i++)\n    {\n        sum+=array[i];\n    }\n \
    \   if(sum%2==0)\n    {\n        std::sort(array.begin(),array.end());\n    }\n\
    \    else\n    {\n        std::sort(array.rbegin(),array.rend());\n    }\n   \
    \ return array;", "    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum = sum + array[i];\n    }\n    int flag = 0;\n    if ((sum\
    \ % 2) == 0) {\n        flag = 1;\n    }\n    if (flag == 1) {\n        std::reverse(array.begin(),\
    \ array.end());\n        std::sort(array.begin(), array.end());\n    }\n    return\
    \ array;", "    if (array.size() == 1) {\n        return array;\n    }\n    long\
    \ long s = 0;\n    long long k = 0;\n    for (int i = 0; i < array.size(); i++)\
    \ {\n        s += array[i];\n        k += array[i];\n    }\n    long long sum\
    \ = sumOfArray(s, k);\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    }\n    long long minIndex = std::distance(array.begin(),\
    \ std::max_element(array.begin(), array.end()));\n    long long maxIndex = std::distance(array.begin(),\
    \ std::min_element(array.begin(), array.end()));\n    long long maxSum = sumOfArray(maxIndex,\
    \ minIndex);\n    long long minSum = sumOfArray(minIndex, maxIndex);\n    std::vector<long>\
    \ ans;\n    while (maxSum - minSum != 0) {\n        if (maxSum - minSum > 0) {\n\
    \            ans.push_back(array[minIndex]);\n            maxIndex--;\n      \
    \  } else {\n            ans.push_back(array[maxIndex]);\n            minIndex++;\n\
    \        }\n        maxSum -= array[maxIndex];\n        minSum += array[minIndex];\n\
    \    }\n    return ans;", "    long sum = 0;\n    long largest = array[0];\n \
    \   long smallest = array[0];\n    for (int i = 0; i < array.size(); i++) {\n\
    \        sum += array[i];\n        if (sum % 2 != 0) {\n            if (sum >\
    \ largest) {\n                largest = sum;\n            }\n            if (sum\
    \ < smallest) {\n                smallest = sum;\n            }\n        }\n \
    \   }\n    std::vector<long> result((array.size() + 1));\n    for (int i = 0;\
    \ i < array.size(); i++) {\n        result[i] = array[i];\n    }\n    result[0]\
    \ = largest;\n    result[array.size()] = smallest;\n    for (int i = 2; i < result.size();\
    \ i++) {\n        result[i] = result[i - 1] + result[i - 2];\n    }\n    return\
    \ result;", "    long long sum = (array[0] + array[array.size() - 1]);\n    int\
    \ odd = 1;\n    int even = -1;\n    if (sum % 2 == 0)\n        even = 1;\n   \
    \ else if (sum % 2 == 1)\n        odd = -1;\n    long long sum1 = (array[0] +\
    \ array[array.size() - 1]);\n    for (int i = 0; i < array.size(); i++) {\n  \
    \      std::swap(array[i], array[i + odd]);\n    }\n    long long sum2 = (array[0]\
    \ + array[array.size() - 1]);\n    for (int i = 0; i < array.size(); i++) {\n\
    \        std::swap(array[i], array[i + even]);\n    }\n    return array;", "\t\
    int sum = 0;\n\tfor (long i: array)\n\t\tsum += i;\n\tint odd = sum%2;\n\tstd::sort(array.begin(),\
    \ array.end());\n\tif (odd)\n\t\tstd::reverse(array.begin(), array.end());\n\t\
    return array;", "  std::sort(array.begin(), array.end());\n  return array;", " \
    \   long long sum = 0;\n    long long size = array.size();\n    for (long i =\
    \ 0; i <= size; i++)\n        sum += array[i];\n    assert(sum % 2 == 0);\n  \
    \  if (sum % 2 == 0)\n        std::sort(array.begin(), array.end());\n    else\n\
    \        std::sort(array.rbegin(), array.rend());\n    return array;", "    long\
    \ long size = array.size();\n    if (size <= 1) {\n        return array;\n   \
    \ }\n    long long sum = 0;\n    for (long i = 1; i < size; i++) {\n        sum\
    \ += array[i];\n    }\n    long long mid = size / 2;\n    if (sum % 2 != 0) {\n\
    \        std::sort(array.begin() + 1, array.begin() + mid);\n        return array;\n\
    \    }\n    std::sort(array.begin() + 1, array.end());\n    return array;", " \
    \   std::vector<long> result;\n    long long sum;\n    for (auto i : array) {\n\
    \        sum += i;\n        result.push_back(sum);\n    }\n    long long start\
    \ = 0;\n    long long end = result.size() - 1;\n    while (start < end) {\n  \
    \      if (result[start] % 2 == 1) {\n            result[start] ^= 1;\n      \
    \      start += 1;\n        } else {\n            long long mid = start + (end\
    \ - start) / 2;\n            if (result[mid] % 2 == 0) {\n                result[mid]\
    \ ^= 1;\n                end = mid - 1;\n            } else {\n              \
    \  result[mid] ^= -1;\n                start = mid + 1;\n            }\n     \
    \   }\n    }\n    result.sort();\n    return result;", "    // code here\n   \
    \ long sum=0, a=0, b=0;\n    for(int i=0;i<array.size();i++){\n        a+=array[i];\n\
    \        b+=a;\n    }\n    if((b%2)==1){\n        std::reverse(array.begin(),array.end());\n\
    \        long temp;\n        for(int i=0;i<array.size();i++){\n            temp=array[i];\n\
    \            array[i]=array[array.size()-1];\n            array[array.size()-1]=temp;\n\
    \            sum+=array[i];\n            sum-=array[i-1];\n        }\n    }\n\
    \    return array;", "    auto sum = array[0] + array[array.size() - 1];\n   \
    \ if (sum % 2 == 1) return sort_array(array);\n    long mid = array.size() / 2;\n\
    \    std::sort(array.begin(), array.begin() + mid, [](long a, long b) { return\
    \ b - a; });\n    long sum2 = array[0] + array[mid];\n    if (sum2 % 2 == 0) return\
    \ sort_array(array);\n    long left = mid, right = mid;\n    while (left < right)\
    \ {\n        while (array[left] + array[right - 1] < sum2) left++;\n        while\
    \ (array[right] + array[left - 1] < sum2) right--;\n        if (left > right)\
    \ {\n            std::swap(array[left], array[right]);\n            return sort_array(array);\n\
    \        }\n    }\n    return array;", "\tlong long sum = 0;\n\tfor (int i = 0;\
    \ i < array.size(); i++) {\n\t\tsum += array[i];\n\t}\n\tif (sum % 2 == 1) {\n\
    \t\tstd::reverse(array.begin(), array.end());\n\t}\n\tstd::vector<long> newArray(array);\n\
    \tstd::sort(newArray.begin(), newArray.end());\n\treturn newArray;", "    long\
    \ i, sum = 0, last = array[0]; // initialize last and first value\n\n    for (i\
    \ = 0; i < array.size(); i++) {\n        sum = array[i] + last;\n        last\
    \ = sum;\n    }\n    std::vector<long> v;\n    long first = array[0];\n    long\
    \ second = array[1];\n\n    for (long i = 1; i < array.size(); i++) {\n      \
    \  sum = array[i] + last;\n        if (sum % 2 == 0) {\n            v.push_back(first);\n\
    \            v.push_back(second);\n            first = array[i];\n           \
    \ second = array[i + 1];\n        } else {\n            v.push_back(second);\n\
    \            v.push_back(first);\n            first = array[i];\n            second\
    \ = array[i + 1];\n        }\n    }\n    return v;", "    // write your code here\n\
    \tlong temp;\n\tlong sum = 0;\n\tfor (long i = 0; i < array.size(); i++) {\n\t\
    \tsum += array[i];\n\t}\n\tif (sum%2 == 1) {\n\t\tstd::reverse(array.begin(),\
    \ array.end());\n\t}\n\telse {\n\t\tstd::sort(array.begin(), array.end());\n\t\
    }\n\treturn array;", "    for (long i : array)\n        std::cout << i << \" \"\
    ;\n    std::cout << \"\\n\";\n\n    long sum = 0;\n    for (long i : array)\n\
    \        sum += i;\n    auto it = array.begin();\n    std::vector<long> ret(array.size());\n\
    \n    for (long i : array) {\n        long tmp = it;\n        it += i;\n     \
    \   ret[it - array.begin()] = tmp;\n    }\n    std::cout << \"Sorted array is:\
    \ \\n\";\n    for (auto i : ret)\n        std::cout << i << \" \";\n    std::cout\
    \ << \"\\n\";\n    return ret;", "    int sum = 0;\n    for (auto i : array)\n\
    \        sum += i;\n    assert(sum < 1000000000L);\n\n    long long sumOfFirst\
    \ = array[0];\n    for (auto i : array)\n        sumOfFirst = sumOfFirst + i;\n\
    \n    long long sumOfLast = array[array.size() - 1];\n    for (auto i : array)\n\
    \        sumOfLast = sumOfLast + i;\n\n    auto first = &sumOfFirst;\n    auto\
    \ last = &sumOfLast;\n    bool odd = sumOfFirst % 2 == 1;\n    auto begin = array.begin();\n\
    \    if (odd)\n        std::iter_swap(begin, first);\n    else\n        std::iter_swap(first,\
    \ last);\n\n    std::vector<long> ret(begin, array.end());\n    return ret;",
  "    std::sort(array.begin(), array.end(), [](long a, long b) {\n        return\
    \ a > b;\n    });\n    return array;", "    long long int sum = 0;\n    for (long\
    \ i = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    long long\
    \ int temp[array.size()];\n    for (long i = 0; i < array.size(); i++) {\n   \
    \     long long int pos = sum - array[i];\n        if (pos > 0) {\n          \
    \  temp[i] = pos;\n        } else {\n            temp[i] = sum;\n        }\n \
    \       sum -= array[i];\n    }\n    std::vector<long> res(temp, temp + array.size());\n\
    \    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ temp;\n    std::sort(std::begin(array), std::end(array));\n    long sum = 0;\n\
    \    long index = 0;\n    for(auto i: array){\n        sum += i;\n        index.push_back(i);\n\
    \    }\n    if(sum % 2 == 1){\n        std::reverse(std::begin(array), std::end(array));\n\
    \    }\n    return array;"]
stop_tokens:
- "\n}"
