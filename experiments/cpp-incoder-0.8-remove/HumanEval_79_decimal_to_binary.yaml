name: HumanEval_79_decimal_to_binary
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number\
  \ in decimal form and your task is to convert it to\n// binary format. The function\
  \ should return a string, with each character representing a binary\n// number.\
  \ Each character in the string will be '0' or '1'.\n// There will be an extra couple\
  \ of characters 'db' at the beginning and at the end of the string.\n// The extra\
  \ characters are there to help with the format.\n// Examples:\nstd::string decimal_to_binary(long\
  \ decimal) {\n"
tests: "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0))\
  \ == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103))\
  \ == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n"
completions: ["    // Your code goes here\n    std::bitset<8> binary(decimal);\n \
    \   std::string s = \"\";\n    for (int i = 0; i < binary.size(); ++i) {\n   \
    \     if (binary.test(i))\n            s += '1';\n        else\n            s\
    \ += '0';\n    }\n    return std::string(s.rbegin(), s.rend());", "  long remainder,\
    \ quotient;\n  std::string binary_string;\n  int decimal_digits = 1;\n  while\
    \ ((quotient = decimal / 2) != 0) {\n    decimal -= quotient;\n    binary_string\
    \ += decimal_to_binary(quotient);\n    decimal_digits++;\n  }\n  while (decimal\
    \ > 0) {\n    remainder = decimal % 2;\n    binary_string += decimal_to_binary(remainder);\n\
    \    decimal_digits++;\n    decimal = decimal / 2;\n  }\n  binary_string += decimal_to_binary(decimal_digits);\n\
    \  return binary_string;", "    // Your code goes here\n    char bin[64] = {0};\n\
    \    char s[64] = {0};\n    int remainder = decimal%2;\n    int j = 0;\n    while\
    \ (decimal != 0) {\n        bin[j] = (decimal%2) + '0';\n        decimal/=2;\n\
    \        j = j + 1;\n    }\n    j = 0;\n    while (remainder != 0) {\n       \
    \ s[j] = (decimal%2) + '0';\n        decimal/=2;\n        j = j + 1;\n    }\n\
    \    int index = 0;\n    s[index] = 'd';\n    index++;\n    s[index] = 'b';\n\
    \    index++;\n    for (int i = 0; i < index; i++) {\n        s[index] = '0';\n\
    \    }\n    s[index] = 'b';\n    s[index] = 'o';\n    s[index] = 'b';\n    s[index]\
    \ = 'i';\n    s[index] = 'n';\n    s[index] = 'g';\n    s[index] = 'a';\n    s[index]\
    \ = 'm';\n    s[index] = 'e';\n    s[index] = 'd';\n    s[index] = 'b';\n    s[index]\
    \ = 'o';\n    s[index] = 'e';\n    s[index] = '\\0';\n    return s;", "\t// Your\
    \ code here\n\tstd::string binary(decimal);\n\tchar temp;\n\tfor (size_t i = 0;\
    \ i < decimal.size(); i++) {\n\t\ttemp = binary[i];\n\t\tif (decimal % 2 == 0)\
    \ {\n\t\t\tif (temp == '0') {\n\t\t\t\tbinary[i] = '1';\n\t\t\t} else {\n\t\t\t\
    \tbinary[i] = '0';\n\t\t\t}\n\t\t} else {\n\t\t\tif (temp == '1') {\n\t\t\t\t\
    binary[i] = '0';\n\t\t\t} else {\n\t\t\t\tbinary[i] = '1';\n\t\t\t}\n\t\t}\n\t\
    \tdecimal /= 2;\n\t}\n\treturn binary;", "  std::stack<char> st;\n  st.reserve(64);\n\
    \  std::string str(64, '0');\n  while (decimal) {\n    st.push(decimal % 2);\n\
    \    decimal /= 2;\n  }\n  while (!st.empty()) {\n    str.insert(0, st.top());\n\
    \    st.pop();\n  }\n  return str;", "    if (decimal < 0) {\n        return \"\
    db\" + decimal_to_binary(-decimal);\n    }\n    char binary[11] = {'0','1','0'};\n\
    \    char current = binary[0];\n    while (decimal > 0) {\n        decimal /=\
    \ 2;\n        current = binary[decimal % 2] + current;\n    }\n    return current\
    \ + \"db\";", "    // Your code here\n    std::string s;\n    while(decimal !=\
    \ 0){\n        if(decimal % 2 == 1){\n            s += \"1\";\n        }\n   \
    \     else{\n            s += \"0\";\n        }\n        decimal /= 2;\n    }\n\
    \    s = \"db\" + s + \"b\";\n    return s;", "    long remainder, temp;\n   \
    \ std::string binary = \"\";\n    while ((decimal))\n    {\n        remainder\
    \ = decimal % 2;\n        decimal = (decimal >> 1) & 1;\n        temp = remainder\
    \ * 2;\n        if (temp > 9)\n        {\n            binary += temp;\n      \
    \  }\n        else\n        {\n            binary += \"0\" + temp;\n        }\n\
    \    }\n    return std::string(binary) + \"db\";", "    std::string ans;\n   \
    \ int remainder = decimal;\n    int binary = 0;\n    // loop through all bits\n\
    \    while (decimal != 0) {\n        int digit = decimal % 2;\n        // append\
    \ new digit\n        ans[binary + 1] = '0' + (digit == 1);\n        // shift decimal\
    \ by 1\n        decimal /= 2;\n        binary += 1;\n    }\n    // append remainder\n\
    \    ans[binary] = '0' + remainder;\n    // add db\n    ans[0] = 'd';\n    ans[ans.size()\
    \ - 1] = 'b';\n    return ans;", "    // Write your code here\n    std::string\
    \ binary = \"\";\n    do {\n        int digit = decimal%2;\n        decimal /=\
    \ 2;\n        binary += digit;\n    } while(decimal > 0);\n    return binary +\
    \ \"db\";", "    std::bitset<64> binary_num(decimal);\n    std::string binary\
    \ = \"\";\n    for (int i = 0; i < binary_num.size(); i++) {\n        // Check\
    \ if binary_num[i] is 1 or not and take necessary action.\n        // You don't\
    \ have to do anything to handle the '0' and '1' cases.\n        binary[i] += '0';\n\
    \        if (binary_num[i] == 1)\n            binary[i] += '1';\n    }\n    //\
    \ You have to remove this unwanted characters.\n    // You can do this by just\
    \ printing the string, or using std::substr().\n    binary = \"db\" + std::string(binary.begin(),\
    \ binary.end());\n    // You have to add this extra characters to help with your\
    \ format.\n    binary = binary + \"b\";\n    return binary;", "  std::string result;\n\
    \  int n = decimal;\n  while (n > 0) {\n    int remainder = n % 2;\n    n /= 2;\n\
    \    if (remainder == 0) result.push_front(remainder);\n    else result.push_front(remainder\
    \ + '1');\n  }\n  result.push_front('0');\n  result.push_front('d');\n  result.push_front('b');\n\
    \  return result;", "    // Your code goes here\n    std::string output;\n   \
    \ output += \"db\";\n    while (decimal > 0) {\n        decimal >>= 1;\n     \
    \   output += \"01\";\n    }\n    return output;", "    std::bitset<64> binary_num(decimal);\n\
    \    // Here we find the number of digits of decimal using log\n    auto num_of_digits\
    \ = __builtin_log2(decimal) + 1;\n    std::string bin = \"\";\n    for (int i\
    \ = num_of_digits - 1; i >= 0; i--) {\n        bin = binary_num.to_string() +\
    \ bin;\n    }\n    bin = \"db\" + bin + \"db\";\n    return bin;", "    // Complete\
    \ the code here\n    std::string binary_string;\n    for(long i = 1; i<= decimal;\
    \ i++){\n        if(decimal % 2 == 0){\n            binary_string += \"0\";\n\
    \        }\n        else{\n            binary_string += \"1\";\n        }\n  \
    \      decimal /= 2;\n    }\n    return \"db\"+binary_string;", "// Your code\
    \ goes here\n    char bin[100];\n    char temp;\n    int i = 0;\n    int j = 0;\n\
    \    while (decimal != 0)\n    {\n        bin[i++] = decimal%2;\n        decimal\
    \ = decimal/2;\n    }\n    if (decimal)\n    {\n        bin[i] = '1';\n    }\n\
    \    bin[i + 1] = '\\0';\n\n    std::string output = \"db\";\n    temp = '0';\n\
    \    for (int i = 0; bin[i] != '\\0'; ++i)\n    {\n        temp = bin[i];\n  \
    \      output += temp;\n    }\n    return output;", "  if(decimal<0) decimal =\
    \ -decimal;\n  std::string ans = std::to_string(decimal);\n  std::string binary\
    \ = \"1\";\n  for(int i = 1; i < ans.size(); i++) {\n    binary += \"0\";\n  }\n\
    \  return ans + binary;", "    std::string binary_string = \"\";\n    while(decimal\
    \ > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n      \
    \  binary_string.insert(0, remainder);\n    }\n    // add extra character 'db'\
    \ at the beginning and end of the string.\n    return binary_string + \"db\";",
  "  // Your code goes here\n  \n  long remainder = 0;\n  long count = 0;\n  std::string\
    \ binary = \"\";\n  int i = 0;\n  for (; i < 48; i++) {\n    count = (decimal\
    \ / pow(10, i)) % 2;\n    binary[i] = \"0\";\n    if (count == 1) {\n      binary[i]\
    \ += \"1\";\n    }\n  }\n  return binary;", "    std::string result = \"\";\n\
    \    int rem = decimal;\n    int count = 0;\n    while (decimal != 0) {\n    \
    \    rem = decimal % 2;\n        result[count++] = '0' + (rem == 1);\n       \
    \ decimal = decimal / 2;\n    }\n    result.insert(0, \"db\");\n    result.insert(result.size()\
    \ - 2, \"db\");\n    return result;", "  char buffer[sizeof(long)*8 + 1];\n  std::bitset<sizeof(long)*8>\
    \ bits(decimal);\n  for(auto i = bits.to_ulong(); i; i--) {\n    buffer[sizeof(long)*8\
    \ - i - 2] = '0' + bits.test(i-1);\n  }\n  return std::string(buffer);", "  //\
    \ Write your code here\n  std::bitset<8> bs(decimal);\n  std::string res = bs.to_string();\n\
    \  res = res.insert(0, \"db\");\n  res = res.erase(\n      res.find_first_not_of(\"\
    01\") + 1,\n      res.find_last_not_of(\"01\"));\n  return res;", "    // code\
    \ here\n    char s[11];\n    long int t = decimal;\n    std::string str=\"\";\n\
    \    while(decimal!=0){\n        str=std::to_string(t%2);\n        s[str.length()]='1';\n\
    \        t/=2;\n    }\n    str=std::string(\"db\")+str+std::string(\"db\");\n\
    \    return str;", "\tstd::stringstream ss;\n\tlong remainder;\n\t// Step 1: Initialize\
    \ two variables: remainder and digits.\n\tremainder = decimal;\n\tstd::string\
    \ digits;\n\t// Step 2: Repeat following as long as remainder is non-zero:\n\t\
    while (remainder != 0) {\n\t\t// Step 3: Compute remainder, remainder - 10^position,\
    \ where position is:\n\t\t//   position = 0: remainder = remainder % 2.\n\t\t\
    // \t   position = 1: remainder = remainder % 8. Note here that 8 = 10^1.\n\t\t\
    int position = remainder % 2;\n\t\t// Step 4: Compute remainder - 10^position,\
    \ remainder = remainder / 2.\n\t\tremainder = remainder / 2;\n\t\t// Step 5: Update\
    \ digits by adding '0' or '1' to the end of digits.\n\t\tdigits[position] = '0'\
    \ + (remainder % 2);\n\t\tremainder = remainder / 2;\n\t}\n\t// Step 6: Append\
    \ 'db' to the beginning and end of digits.\n\tdigits[position] = 'db';\n\tdigits[position\
    \ + 1] = 'db';\n\t// Step 7: Return digits as a string.\n\treturn (digits);",
  "    // Your code here\n    std::stringstream ss;\n    int num = (int)decimal;\n\
    \    int i;\n    for(i=1; i<=num;i++)\n    {\n        ss <<\"1\";\n    }\n   \
    \ for(i=num+1; i<=sizeof(long)*8; i++)\n    {\n        ss <<\"0\";\n    }\n  \
    \  return ss.str();", "    // Your code goes here.\n    std::string binary = \"\
    \";\n    int counter = 0;\n    while (decimal != 0)\n    {\n        binary = to_string(decimal%2)\
    \ + binary;\n        decimal /= 2;\n        counter++;\n    }\n    while (counter\
    \ != 0)\n    {\n        binary = binary + '1';\n        counter--;\n    }\n  \
    \  std::string temp = binary;\n    temp = temp + 'b';\n    binary = temp;\n  \
    \  return binary;", "    std::string binary;\n    int remainder = 0;\n    int\
    \ i = 0;\n    while (decimal != 0) {\n        remainder = decimal % 2;\n     \
    \   decimal = decimal / 2;\n        binary.push_back(to_string(decimal));\n  \
    \  }\n    binary.insert(binary.begin(), \"db\");\n    binary.push_back(remainder);\n\
    \    return binary;", "    std::string str = \"\";\n    while (decimal != 0)\n\
    \    {\n        if (decimal & 1)\n        {\n            str += '1';\n       \
    \ }\n        else\n        {\n            str += '0';\n        }\n        decimal\
    \ >>= 1;\n    }\n    return str + 'b';", "  std::string binary = \"\";\n  while\
    \ (decimal > 0) {\n    binary = (decimal % 2) + binary;\n    decimal /= 2;\n \
    \ }\n  // This statement is to convert the 'binary' string into a binary number\
    \ in the desired format,\n  // to match the specification for this assignment.\n\
    \  binary = \"db\" + binary;\n  return binary;", "\t// TODO: Complete this method",
  "    assert(decimal > 0 && decimal <= 21);\n    std::string binary_string = \"1\"\
    ;\n    long remaining = decimal;\n\n    while (remaining > 0) {\n        remaining\
    \ -= 2;\n        binary_string = \"0\" + binary_string;\n    }\n\n    return binary_string\
    \ + \"db\";", "    // You can return any data type that you wish. I am using a\
    \ string.\n    std::string binary_format;\n    // The number to be written.\n\
    \    long number = decimal;\n    // Reserve memory for the string 'db' at the\
    \ beginning.\n    binary_format.reserve(4);\n    // The loop iterates till the\
    \ number becomes 0.\n    while (number) {\n        // Convert the decimal value\
    \ to binary.\n        binary_format = (number % 2) + binary_format;\n        //\
    \ Reverse the digits of the number.\n        number = number / 2;\n    }\n   \
    \ // Reserve memory for the string 'db' at the end.\n    binary_format.reserve(4);\n\
    \    // The string 'db' is needed at the end to help with the format.\n    binary_format\
    \ += \"db\";\n    return binary_format;", "    std::string res;\n    int dec=decimal;\n\
    \    int count=1;\n    while(dec>0)\n    {\n        if(dec%2==0)\n        {\n\
    \            res+='0';\n        }\n        else\n        {\n            res+='1';\n\
    \        }\n        dec=dec/2;\n        count++;\n    }\n    if(decimal%2==0)\n\
    \    {\n        res+='0';\n    }\n    else if(decimal%2!=0)\n    {\n        res+='1';\n\
    \    }\n    return res+='db';", "    std::string bin;\n    int power = 1;\n  \
    \  int i = decimal;\n    while (i >= 0) {\n        bin = to_string(i) + bin;\n\
    \        i = i / 2;\n        power *= 2;\n    }\n    bin = \"0\" + bin;\n    bin\
    \ = std::string(power, bin);\n    bin = std::string(bin.size() - 1) + bin;\n \
    \   return bin;", "    std::string binary = \"\";\n    while (decimal > 0) {\n\
    \        int rem = decimal % 2;\n        decimal = decimal / 2;\n        binary\
    \ = to_string(rem) + binary;\n    }\n    return binary;", "    std::string binary\
    \ = \"0\";\n    int remainder = 0;\n    while (decimal != 0) {\n        remainder\
    \ = decimal % 2;\n        decimal = decimal >> 1;\n        binary = to_string(remainder)\
    \ + binary;\n    }\n    binary += \"db\";\n    return binary;", "    // Write\
    \ your code here\n    int x = decimal;\n    std::string binary_result;\n    if\
    \ (x == 0){\n        binary_result = \"0\";\n    }\n    else{\n        binary_result\
    \ = \"1\";\n    }\n    while (decimal != 0){\n        int remainder = decimal\
    \ % 2;\n        binary_result += remainder;\n        decimal /= 2;\n    }\n  \
    \  return \"db\" + binary_result;", "    std::string output;\n    assert(decimal\
    \ >= 0);\n    while (decimal > 0) {\n        decimal /= 2;\n        output +=\
    \ '0' + (decimal % 2);\n    }\n    while (output.length() < 8) {\n        output\
    \ += '0';\n    }\n    output += 'db';\n    return output;", "  assert(decimal\
    \ > 0 && decimal < 1000);\n  std::string binary = std::bitset<8>(decimal).toullongstr();\n\
    \  std::reverse(binary.begin(), binary.end());\n  return std::string(\"db\") +\
    \ binary;", "    // Write your code here\n    \n    std::string str = std::to_string((int)\
    \ decimal);\n    std::string binary = \"\";\n    while (!str.empty()){\n     \
    \   binary += (str[str.size()-1] & '1') ? '1' : '0';\n        str.resize(str.size()\
    \ - 1);\n    }\n    std::string db = \"db\";\n    \n    return binary + db;",
  "    // Your code goes here\n    std::string binary;\n    std::string s;\n    while\
    \ (decimal > 0) {\n        std::string bit;\n        for (int i = 7; i >= 0; i--)\
    \ {\n            bit = (decimal&1) == 1 ? '1' : '0';\n            decimal >>=\
    \ 1;\n            if (decimal == 0)\n                bit = '1' + bit;\n      \
    \      s += bit;\n        }\n        s += 'db';\n    }\n    return s;", "// Your\
    \ code here\nchar s[100];\nif(decimal<0){\n    negative=true;\n    decimal=-decimal;",
  "  char output[256];\n  memset(output, 0, sizeof(output));\n  output[0] = '0';\n\
    \  long remainder, quotient;\n  int index = sizeof(output) - 1;\n  while (index\
    \ >= 0) {\n    remainder = (decimal%2);\n    quotient = decimal/2;\n    decimal\
    \ = quotient;\n    output[index] = remainder;\n    index--;\n  }\n  output[index]\
    \ = 'b';\n  return std::string(output, index+1);", "    // Write code here\n \
    \   string bin;\n    int num = int(decimal);\n    int rem;\n    while(num!=0){\n\
    \        bin = num%2;\n        rem = num/2;\n        num = rem;\n    }\n    bin\
    \ = \"db\" + bin;\n    return bin;", "    // Your code here\n    std::string s\
    \ = \"\";\n    while (decimal > 0) {\n        decimal /= 2;\n        s += '1';\n\
    \    }\n    if (decimal < 0) {\n        s = '0' + s;\n    }\n    std::reverse(s.begin(),\
    \ s.end());\n    std::ostringstream stream;\n    stream << s << 'd';\n    return\
    \ stream.str();", "  std::bitset<9> binary(decimal);\n  return binary.to_string()\
    \ + \"db\";", "    // Write your code here\n    int n = decimal;\n    std::string\
    \ binary;\n    while (n>0)\n    {\n        binary = std::to_string(n%2);\n   \
    \     n/=2;\n    }\n    binary.insert(binary.begin(),'b');\n    binary.insert(binary.end(),'a');\n\
    \    return binary;", "    std::bitset<64> binary = std::bitset<64>(decimal);\n\
    \    std::string binary = binary.to_string();\n    binary.insert(binary.begin(),\
    \ 'b');\n    binary.insert(binary.end(), 'd');\n    return binary;", "    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    long rem;\n   \
    \ std::string binary = \"\";\n\n    while (decimal) {\n        decimal %= 2;\n\
    \        binary.push_back(decimal%2);\n        decimal /= 2;\n    }\n    binary.push_back(rem);\n\
    \n    return binary;", "    long x = decimal;\n    std::string s = \"\";\n   \
    \ while (x > 0)\n    {\n        int digit = x % 2;\n        s = std::to_string(digit)\
    \ + s;\n        x = x / 2;\n    }\n    std::stringstream sstream(s);\n    std::string\
    \ temp;\n    while (!(sstream >> temp))\n        ;\n    std::string head = temp.substr(0,\
    \ 4);\n    std::string tail = temp.substr(4);\n    if (tail == \"0\")\n    {\n\
    \        tail = \"b\";\n    }\n    else\n    {\n        tail = \"b\";\n    }\n\
    \    return head + \"db\" + tail;", "    int bits = 0;\n    int value = decimal;\n\
    \    int remainder = 0;\n    std::string binary;\n    binary.push_back('d');\n\
    \n    // Traverse the decimal digits, starting with least significant\n    //\
    \ digit and ending with the most significant digit\n    while(value > 0) {\n \
    \       remainder = value % 2;\n        value = value >> 1;\n        binary.push_back(remainder);\n\
    \    }\n\n    // Add the extra characters\n    binary.push_back('b');\n    binary.push_back('');\n\
    \n    // The extra characters are there to help with the format.\n    return binary;",
  "    std::string result = \"\";\n    while (decimal > 0) {\n        int remainder\
    \ = decimal % 2;\n        decimal = decimal / 2;\n        result = char(remainder)\
    \ + '0' + result;\n    }\n    std::cout << \"\\nThe binary number is: \" << result\
    \ << std::endl;\n    return result;", "    char binary[32];\n    std::string binaryString;\n\
    \    int i = 0;\n    while (decimal != 0) {\n        binary[i++] = decimal % 2;\n\
    \        decimal /= 2;\n    }\n    binaryString = \"db\" + std::string(&binary[0]);\n\
    \    for (int j = i; j > 0; j--) {\n        binaryString[j] = binaryString[j -\
    \ 1] + '0';\n    }\n    return binaryString;", "    std::bitset<32> bs(decimal);\n\
    \    return std::to_string(bs.to_ullong());", "    std::bitset<sizeof(long)> bits(decimal);\n\
    \    std::string str = bits.to_string();\n    // Extra characters to help with\
    \ the format\n    str.insert(0, 'b');\n    str.insert(str.size()-1, 'b');\n  \
    \  return str;", "    long temp = 0;\n    std::string binary = \"\";\n    while\
    \ (decimal != 0) {\n        temp = decimal % 2;\n        decimal = decimal / 2;\n\
    \        binary = temp + binary;\n    }\n    binary = binary + 'db';\n    return\
    \ binary;", "    std::string result;\n    while (decimal != 0) {\n        result\
    \ += (decimal % 2) + '0';\n        decimal = decimal / 2;\n    }\n    if (result.length()\
    \ > 1) {\n        result += 'b';\n    }\n    if (result.length() == 0) {\n   \
    \     result += '0';\n    }\n    if (result.length() == 1 && result == '0') {\n\
    \        result += 'b';\n    }\n    return result + \"\\n\";", "    int bit =\
    \ 1, decimal = 0;\n    while(decimal >= 1) {\n        int temp = decimal%2;\n\
    \        decimal /= 2;\n        decimal += temp*bit;\n        bit *= 2;\n    }\n\
    \    std::string result;\n    result = '0' + decimal;\n    int decimal_temp =\
    \ decimal;\n    while(decimal_temp != 0) {\n        result = result + '1' + decimal_temp%2;\n\
    \        decimal_temp/=2;\n    }\n    char temp = 'b';\n    for(int i = result.length()-1;\
    \ i >= 0; i--) {\n        if(result[i] == '1') {\n            result[i] = temp;\n\
    \        } else {\n            result[i] = '0';\n        }\n    }\n    return\
    \ result + 'b';", "  std::bitset<8> binary_form(decimal);\n  std::string bin_form\
    \ = \"\";\n  while (binary_form) {\n    bin_form.push_back('0' + (binary_form.test()));\n\
    \    binary_form >>= 1;\n  }\n  return \"db\" + bin_form;", "    std::bitset<8>\
    \ b(decimal);\n    std::string ret;\n    for (size_t i = 0; i < b.size(); ++i)\n\
    \        ret += std::bitset<8>(i).get(0, 8);\n    ret.insert(0, 1, \"db\");\n\
    \    return ret;", "  // Write your code here\n  std::ostringstream oss;\n  oss\
    \ << decimal;\n  return oss.str();", "    string ans = \"\";\n    while (decimal)\
    \ {\n        int remainder = decimal % 2;\n        decimal /= 2;\n        ans\
    \ += '0' + (remainder ? '1' : '0');\n    }\n    return ans + \"db\";", "    //\
    \ Write your code here\n    std::string binary = \"db\";\n    int rem = decimal%2;\n\
    \    while (decimal >= 10) {\n        decimal /= 10;\n        binary += \"0\"\
    \ + std::to_string(rem);\n        rem = (decimal%2)%2;\n    }\n    binary += \"\
    0\" + std::to_string(rem);\n    return binary;", "    std::string ans = \"\";\n\
    \    if (decimal >= 1) {\n        // decimal is non zero -> get binary equivalent\n\
    \        while (decimal > 0) {\n            ans = \"0\" + ans;\n            decimal--;\n\
    \        }\n        ans = \"1\" + ans;\n    }\n    return ans;", "    std::string\
    \ res;\n    if(decimal == 0) {\n        res += \"0\"; // You might use \"(char)0\"\
    \ instead of \"\"\n    } else {\n        long rem;\n        int num_bits = __builtin_clzll(decimal);\n\
    \        if(num_bits == 32) num_bits = 2;\n        if(num_bits == 16) num_bits\
    \ = 4;\n        if(num_bits == 8) num_bits = 1;\n        while(num_bits > 0) {\n\
    \            res += '0';\n            res += '1';\n            res += '0';\n \
    \           num_bits = num_bits >> 1;\n        }\n        res += 'd';\n      \
    \  res += 'b';\n    }\n    return res;", "    std::string answer = \"0\";\n  \
    \  while (decimal > 0) {\n        answer += \"1\";\n        decimal >>= 1;\n \
    \   }\n    return answer + \"db\";", "    assert(decimal>=0);\n    std::string\
    \ binary = \"\";\n    for(int i=0;i<32*decimal;i++){\n        if(i%2)\n      \
    \      binary += '0';\n        else\n            binary += '1';\n    }\n    if(decimal%2==0)\n\
    \        binary+='db';\n    return binary;", "    long remainder = decimal;\n\
    \    std::string binary = \"\";\n    while(remainder) {\n        if((remainder\
    \ & 1L) != 0) {\n            binary = binary + \"1\";\n            remainder =\
    \ remainder >> 1;\n        } else {\n            binary = binary + \"0\";\n  \
    \      }\n    }\n    if(binary == \"1\") return \"db\" + binary;\n    return \"\
    db\" + binary;", "    std::string binary;\n    std::string extra = \"db\";\n \
    \   // If decimal is positive\n    if (decimal > 0) {\n        // Divide decimal\
    \ by 2\n        decimal /= 2;\n        // Do the division\n        while (decimal\
    \ > 0) {\n            binary += (char) ('0' + (decimal % 2));\n            decimal\
    \ /= 2;\n        }\n    }\n    // If decimal is negative\n    else if (decimal\
    \ < 0) {\n        // Divide decimal by 2\n        decimal *= 2;\n        // Do\
    \ the division\n        while (decimal > 0) {\n            binary += (char) ('0'\
    \ + (decimal % 2));\n            decimal /= 2;\n        }\n    }\n    // If decimal\
    \ is zero\n    else {\n        binary = \"0\";\n    }\n\n    // Return the string\n\
    \    return binary + extra;", "    // Write your code here\n    bool b[10];\n\
    \    long n = decimal;\n    int t = 0;\n    while (n > 0) {\n        t = (n %\
    \ 2) + t;\n        b[t / 2] = (n % 2);\n        n /= 2;\n    }\n    std::string\
    \ ans = \"\";\n    while (t > 0)\n    {\n        ans += (b[t / 2]);\n        t\
    \ /= 2;\n    }\n    return ans + \"db\";", "    char str[11];\n    int i = 0;\
    \ // i is the position of the current digit in the string.\n    while (decimal\
    \ != 0) {\n        decimal %= 2;\n        str[i] = '0' + (decimal);\n        decimal\
    \ /= 2;\n        i++;\n    }\n    str[i] = '\\0';\n    std::string bin = str;\n\
    \    return \"db\" + bin + \"db\";", "    std::string binary = std::to_string(decimal);\n\
    \    std::string result = binary + binary;\n    result = std::move(result);\n\
    \    return std::move(result);", "    int power = 0;\n    std::string binary_string\
    \ = \"00000000\";\n    while (decimal != 0) {\n        binary_string[power % 8]\
    \ = binary % 2;\n        binary /= 2;\n        power++;\n    }\n    binary_string[power\
    \ % 8] = 'b';\n    return binary_string;", '    // Your code goes here', // Your
    code here, "    // The size of the string is equal to log_2(decimal) + 1\n   \
    \ // log_2(decimal) is the position of the rightmost binary digit starting from\
    \ the left.\n    // For example,\n    // binary for decimal 32 is log_2(decimal)\
    \ = 4\n    // binary for decimal 48 is log_2(decimal) = 5\n    // binary for decimal\
    \ 96 is log_2(decimal) = 6\n    int log_2_of_decimal = log(decimal);\n    int\
    \ string_size = ceil(log_2_of_decimal);\n    // The string will contain decimal\
    \ digits plus the decimal point character\n    // the initial character is 1 so\
    \ we start counting from index 2\n    std::string binary_string(string_size, '0');\n\
    \    char decimal_point = '.';\n    // we start from log_2_of_decimal to make\
    \ the string look nicer\n    // for example log_2(decimal) = 4, log_2_of_decimal\
    \ = 4 => 0100\n    for (int i = log_2_of_decimal; i >= 0; i--) {\n        // if\
    \ the number is divisible by 2, we add '0', otherwise we add '1'\n        // for\
    \ example, decimal 48 is divided by 2 so we add '0', decimal 96 is divided by\
    \ 4 so we add '10'\n        binary_string[i] = (decimal % 2 == 0) ? '0' : '1';\n\
    \        // we take the remainder of the number after the division and divide\
    \ it by 2\n        decimal = decimal / 2;\n    }\n    binary_string.insert(0,\
    \ decimal_point);\n    // we add extra characters to help with format\n    binary_string.insert((binary_string.length()/3),\
    \ 'b');\n    binary_string.insert((binary_string.length()/2), 'b');\n    return\
    \ binary_string;", "    std::ostringstream s;\n    assert(decimal > 0);\n    std::string\
    \ binary = \"\";\n    while(decimal > 0) {\n        if(decimal%2 == 0) binary\
    \ += \"0\";\n        else binary += \"1\";\n        decimal = decimal/2;\n   \
    \ }\n    s += 'd';\n    s += binary;\n    s += 'b';\n    return s.str();", " \
    \   std::string bin_num;\n    if (decimal >= 1) {\n        bin_num = \"1\";\n\
    \    }\n    for (int i = decimal; i > 0; i--) {\n        bin_num = to_string(i\
    \ & 1) + bin_num;\n    }\n    bin_num += \"db\";\n    return bin_num;", "    //\
    \ Complete the function\n    int place = -1;\n    std::string answer;\n    long\
    \ remainder = 0;\n    while (decimal != 0) {\n        remainder = (decimal % 2)\
    \ + remainder;\n        decimal /= 2;\n    }\n    if (remainder % 2 == 0) {\n\
    \        answer += (remainder % 2 + '0');\n        answer += \"db\";\n    } else\
    \ {\n        answer += (remainder % 2 + '1');\n        answer += \"db\";\n   \
    \ }\n    answer += to_string((long int)decimal);\n    while (answer.back() ==\
    \ '0') {\n        answer.pop_back();\n    }\n    while (answer.front() == '0')\
    \ {\n        answer.erase(answer.begin());\n    }\n    return answer;", "    //\
    \ TODO: Write your code here.\n    char result[13];\n    std::string digits =\
    \ \"01\";\n    std::string carry = \"db\";\n    while (decimal != 0) {\n     \
    \   int remainder = decimal % 2;\n        decimal /= 2;\n        digits = digits[remainder]\
    \ + carry;\n        carry = digits[6];\n    }\n    result[6] = carry;\n    carry\
    \ = digits[6];\n    result[7] = carry;\n    carry = digits[7];\n    result[8]\
    \ = carry;\n    carry = digits[8];\n    result[9] = carry;\n    carry = digits[9];\n\
    \    result[10] = carry;\n    carry = digits[10];\n    result[11] = carry;\n \
    \   carry = digits[11];\n    result[12] = carry;\n    return std::string(result);",
  "// Print the number of bits needed to represent decimal number\n    int digits;\n\
    \    long remainder;\n    std::string binary_digits;\n    digits = std::frexp(decimal,\
    \ &remainder);\n    binary_digits = std::to_string(digits);\n    // Add leading\
    \ zeros to binary_digits\n    int zeros = binary_digits.length() - decimal_to_binary(std::fabs(decimal)).size();\n\
    \    std::string binary_digits_with_remainder = binary_digits + std::string(zeros,\
    \ \"0\");\n    // Add extra characters at the beginning and end\n    // First\
    \ character\n    if (binary_digits_with_remainder.front() == '1')\n        binary_digits_with_remainder.insert(0,\
    \ '0');\n    else\n        binary_digits_with_remainder.insert(0, '1');\n    //\
    \ Last character\n    if (binary_digits_with_remainder.back() == '1')\n      \
    \  binary_digits_with_remainder.push_back('1');\n    else\n        binary_digits_with_remainder.push_back('0');\n\
    \    // Return result\n    return binary_digits_with_remainder;", "    if (decimal\
    \ == 0) {\n        return \"0\";\n    }\n    int decimalToBinary(int decimal,\
    \ int pow) {\n        if (decimal > 1) {\n            return decimalToBinary(decimal,\
    \ pow + 1);\n        } else {\n            pow *= 2;\n            return std::to_string(pow)\
    \ + std::to_string(decimal % 2);\n        }\n    }\n\n    std::string result =\
    \ decimalToBinary(decimal, 1);\n    result += ' ';\n    result += decimalToBinary(decimal,\
    \ 2);\n    result += 'b';\n    result += 'a';\n    return result;", "    long\
    \ long int remainder;\n    long long int rem;\n    std::string binary_string;\n\
    \    while(decimal != 0)\n    {\n        remainder = decimal % 2;\n        decimal\
    \ = decimal / 2;\n        binary_string.push_back(remainder);\n    }\n    binary_string.insert(binary_string.begin(),\"\
    db\");\n    binary_string.insert(binary_string.end(),\"db\");\n    binary_string.insert(binary_string.begin(),\"\
    db\");\n    binary_string.insert(binary_string.end(),\"db\");\n    return binary_string;",
  "    long power = 1;\n    long binary_number = 0;\n    std::string binary_string;\n\
    \    while (decimal > 0) {\n        binary_number = decimal % 2;\n        decimal\
    \ /= 2;\n        binary_string += binary_number;\n        power *= 2;\n    }\n\
    \n    std::string db_binary(\"db\");\n    binary_string += binary_number;\n  \
    \  binary_string += db_binary;\n    binary_string += binary_number;\n    return\
    \ binary_string;", "    std::string str = \"\";\n    int n = 0;\n    while (decimal\
    \ != 0) {\n        int rem = decimal % 2;\n        decimal /= 2;\n        if (rem\
    \ != 0) {\n            str += '1';\n        } else {\n            str += '0';\n\
    \        }\n        n += 1;\n    }\n    while (n != 0) {\n        int rem = n\
    \ % 2;\n        str += '0';\n        n /= 2;\n        if (rem != 0) {\n      \
    \      str += '1';\n        }\n    }\n    std::string bin_string = \"db\" + str;\n\
    \    return bin_string;", "    std::string binary;\n    std::string remainder\
    \ = \"0\";\n    int count = 0;\n    int decimal_number = decimal;\n    while (decimal_number\
    \ > 0) {\n        remainder = decimal_number % 2;\n        if (count == 0) {\n\
    \            binary = \"1\" + remainder;\n        } else {\n            binary\
    \ = \"0\" + remainder;\n        }\n        count++;\n        decimal_number /=\
    \ 2;\n    }\n    binary += \"b\";\n    binary += remainder;\n    return binary;",
  "  // Declare a variable to hold the output string.\n  std::string output = \"db\"\
    ;\n\n  // If the decimal number is not between -2147483648 and 2147483647, just\
    \ return the\n  // decimal number as the output string.\n  if (decimal < -2147483648\
    \ || decimal > 2147483647) {\n    return std::to_string(decimal);\n  }\n\n  //\
    \ Iterate through the decimal number and get the binary representation.\n  while\
    \ (decimal > 0) {\n    decimal /= 2;\n    output += \"0\";\n  }\n\n  // Iterate\
    \ through the binary representation and convert it to a string.\n  std::string\
    \ binary_string = output;\n  while (binary_string.length() > 1) {\n    binary_string.pop_back();\n\
    \  }\n\n  // Return the converted output string.\n  return output;", "    long\
    \ rem = decimal % 2;\n    decimal /= 2;\n    std::string ans = \"\";\n\n    while\
    \ (decimal > 0) {\n        rem = decimal % 2;\n        decimal /= 2;\n       \
    \ ans += (std::to_string(static_cast<int>(rem)) + ((rem > 0) ? \"1\" : \"0\")\
    \ + \"db\");\n    }\n\n    return ans;", "    // Your code goes here //\n    \n\
    \    \n    return \"\";", "    if (decimal == 0)\n        return \"0\";\n    std::string\
    \ bin_str;\n    int pow = 1;\n    while (decimal > 0)\n    {\n        bin_str.append(to_string(decimal\
    \ % 2));\n        decimal /= 2;\n        pow *= 10;\n    }\n    if (bin_str[0]\
    \ == '1' && bin_str[1] == '0') {\n        bin_str += to_string(pow);\n    } else\
    \ {\n        bin_str.insert(0, \"1\");\n        bin_str.insert(0, to_string(pow));\n\
    \    }\n    bin_str.insert(0, \"db\");\n    return bin_str;", "    std::string\
    \ binary;\n    int remainder;\n\n    if (decimal < 0 || decimal > 10) {\n    \
    \    return \"Error: Invalid Input\";\n    }\n\n    while (decimal > 0) {\n  \
    \      remainder = decimal % 2;\n        decimal /= 2;\n        binary = to_string(remainder)\
    \ + binary;\n    }\n\n    if (binary.size() > 1) {\n        binary.insert(0, \"\
    db\");\n    }\n\n    if (binary.size() < 10) {\n        binary.insert(binary.size()\
    \ - 1, \"0\");\n    }\n\n    return binary;", "    assert(0 <= decimal);\n   \
    \ if (decimal > 1) {\n        std::ostringstream oss;\n        oss << decimal;\n\
    \        const std::string binary_string = oss.str();\n        std::string extra_chars\
    \ = \"db\";\n        // TODO: Complete this function\n        return binary_string;\n\
    \    } else {\n        return \"0\";\n    }", "  // Write your code here\n  char\
    \ bin_string[21];\n  std::bitset<32> decimalBits(decimal);\n  decimalBits.to_string(bin_string,\
    \ 21);\n  char temp_char[2];\n  temp_char[0] = 'b';\n  temp_char[1] = 0;\n  std::swap(bin_string[0],\
    \ temp_char[0]);\n  char bin_string1[20];\n  bin_string1[0] = 'b';\n  std::copy(bin_string,\
    \ bin_string + 21, bin_string1);\n  bin_string1[19] = 0;\n  std::string bin_string2\
    \ = \"\";\n  for (int i = 0; i < 21; i++) {\n    if (bin_string1[i] == '0') {\n\
    \      bin_string2.push_back('0');\n    } else {\n      bin_string2.push_back('1');\n\
    \    }\n  }\n  bin_string2.insert(0, \"db\");\n  std::swap(bin_string2[0], temp_char[0]);\n\
    \  return bin_string2;", "    std::string result;\n\n    if (decimal >= 0) {\n\
    \        // Decimal number positive\n        long remainder = decimal;\n\n   \
    \     while (decimal > 0) {\n            remainder = decimal % 2;\n          \
    \  decimal /= 2;\n            result += remainder ? '1' : '0';\n        }\n  \
    \  } else {\n        // Decimal number negative\n        long remainder = decimal;\n\
    \n        while (decimal < 0) {\n            remainder = decimal % 2;\n      \
    \      decimal /= 2;\n            result += remainder ? '1' : '0';\n        }\n\
    \    }\n\n    // Add extra characters at the start and end\n    result += 'd';\n\
    \    result += remainder;\n    result += 'b';\n\n    // Return the result\n  \
    \  return result;", "  string ret = \"db\";\n  int n = decimal;\n  while (n) {\n\
    \    int remainder = n % 2;\n    n = n / 2;\n    ret = remainder + ret;\n  }\n\
    \  return ret;", "    long binary = decimal;\n    int decimal_in_tens = decimal;\n\
    \    int decimal_remainder = 0;\n\n    std::string binary_number(\"db\");\n  \
    \  while (decimal > 0) {\n        decimal_remainder = decimal % 2;\n        decimal\
    \ /= 2;\n        binary_number[1] = binary_number[0];\n        binary_number[0]\
    \ = decimal_remainder;\n    }\n\n    std::string binary_string = binary_number;\n\
    \    if (decimal > 0) {\n        binary_string[0] = '1';\n    }\n\n    // We now\
    \ have the binary number in binary_string. Let's remove the extra characters at\
    \ the end and\n    // the beginning\n    binary_string.erase(binary_string.begin());\n\
    \    binary_string.erase(0, binary_string.length() - 3);\n\n    return binary_string;",
  "  std::bitset<64> num(decimal);\n  std::string binary = \"\";\n  for (int i = 0;\
    \ i < 64; ++i) {\n    if (num.test(i)) {\n      binary += \"1\";\n    } else {\n\
    \      binary += \"0\";\n    }\n  }\n  return binary;", "    std::string result;\n\
    \    int count[10] = {0};\n    while (decimal > 0) {\n        if (decimal % 2\
    \ == 0) {\n            decimal /= 2;\n            count[1]++;\n        } else\
    \ {\n            decimal /= 2;\n            count[0]++;\n        }\n    }\n  \
    \  for (int i = 0; i < 10; i++) {\n        if (count[i] > 0) {\n            result\
    \ += std::to_string(count[i] + '0');\n        }\n    }\n    int len = (result.length())\
    \ + 2;\n    result.insert(0, len, ' ');\n    result.insert(0, 1, 'b');\n    return\
    \ result;", '    // Your code here', "    // Complete this function\n    std::string\
    \ binary_string = \"10\";\n    for(int i = 0; i < decimal; i+=2)\n    {\n    \
    \    binary_string += (\"0\");\n    }\n    binary_string += \"0\";\n    return\
    \ binary_string;", "// Your code here\n    std::string binary = \"\";\n    int\
    \ remainder = 0;\n\n    while (remainder > 0) {\n        remainder = decimal %\
    \ 2;\n        decimal = decimal / 2;\n        binary = std::to_string(remainder)\
    \ + binary;\n    }\n    while (decimal != 0) {\n        remainder = decimal %\
    \ 2;\n        decimal = decimal / 2;\n        binary = std::to_string(remainder)\
    \ + \"0\" + binary;\n    }\n    binary = \"db\" + binary + \"db\";\n    return\
    \ binary;", "    std::string binary;\n    char ch;\n    int i = 0;\n    while\
    \ (decimal > 0) {\n        ch = (decimal % 2)? '1' : '0';\n        binary.append(ch);\n\
    \        decimal /= 2;\n        ++i;\n    }\n    if (binary.length() > 1) {\n\
    \        binary.insert(binary.length() - 1, \"db\");\n    }\n    return binary;",
  "    std::bitset<64> bin = std::bitset<64>(decimal);\n    std::string str = bin.to_string();\n\
    \    return \"db\" + str + \"db\";", "    // Your code goes here\n    std::string\
    \ answer;\n    long base = 2;\n    long temp = decimal;\n    long count = 1;\n\
    \    while(temp != 0){\n        answer += (char) temp % 2;\n        temp /= 2;\n\
    \        count += 1;\n    }\n    answer = answer + \"db\";\n    count++;\n   \
    \ temp = decimal;\n    while(count > 0){\n        if(temp == 0){\n           \
    \ break;\n        }\n        answer += (char) temp % 2;\n        temp /= 2;\n\
    \        count--;\n    }\n    return answer;", '    // Your code here', "    assert(decimal\
    \ > 0);\n    long remainder = decimal;\n    std::string bin = \"\";\n    while\
    \ (remainder != 0) {\n        int digit = remainder % 2;\n        remainder =\
    \ remainder / 2;\n        bin = to_string(digit) + bin;\n    }\n    return \"\
    db\" + bin;", "    // Your code goes here\n    std::string output = \"\";\n  \
    \  for(int i=0;i<sizeof(decimal);i++){\n        if(decimal%2==0){\n          \
    \  output += \"1\";\n        }else{\n            output += \"0\";\n        }\n\
    \        decimal /= 2;\n    }\n    output+=\"db\";\n    return output;", "   \
    \ std::string binary;\n    while (decimal > 0) {\n        decimal %= 2;\n    \
    \    binary.push_back(decimal ? '1' : '0');\n    }\n    binary.push_back('0');\n\
    \    while (binary.size() < 32) {\n        binary.push_back('0');\n    }\n   \
    \ binary.push_back('d');\n    binary.push_back('b');\n    return binary;", " \
    \  assert(decimal > 0);\n   std::string answer;\n   if(decimal == 0) {\n     \
    \ answer.push_back('0');\n      answer.push_back('b');\n      return answer;\n\
    \   }\n   int digits = 1;\n   while(decimal) {\n      decimal /= 2;\n      ++digits;\n\
    \   }\n   answer.push_back('d');\n   answer.append(digits, 0, '0');\n   answer.push_back('b');\n\
    \   return answer;", "    long int digit;\n    string binary;\n    // Write your\
    \ code here\n    int count = 0;\n    while(decimal > 0){\n        digit = decimal\
    \ % 2;\n        decimal /= 2;\n        if(count<4){\n            binary += to_string(digit);\n\
    \            count++;\n        }\n        else{\n            binary += to_string(digit)+\"\
    \ \";\n            count = 1;\n        }\n    }\n    while(count>0){\n       \
    \ if(count<4){\n            binary += \"0\";\n            count++;\n        }\n\
    \        else{\n            binary += \"1\";\n            count = 1;\n       \
    \ }\n    }\n    binary.insert(binary.begin(),'d');\n    binary.insert(binary.begin(),'b');\n\
    \    return binary;", "    char ret[50];\n    sprintf(ret, \"%d\", decimal);\n\
    \    return ret;", "    int n = decimal;\n    int remainder = 0;\n    std::string\
    \ binary = \"\";\n    while (n > 0) {\n        remainder = (n % 2);\n        binary.push_back(remainder);\n\
    \        n = (n / 2);\n    }\n    if (n>0)\n        binary.push_back(remainder);\n\
    \    std::string db = \"db\";\n    binary.insert(binary.begin(), db);\n    binary.insert(binary.end(),\
    \ db);\n    return binary;", "\tstd::bitset<64> bs(decimal);\n\tstd::string ans\
    \ = \"\";\n\tfor (int i = 0; i <= 64; i++) {\n\t\tif (i & 1) {\n\t\t\tans += '1';\n\
    \t\t} else {\n\t\t\tans += '0';\n\t\t}\n\t}\n\tstd::string db = \"\";\n\tfor (int\
    \ i = 64; i >= 0; i--) {\n\t\tif (i & 1) {\n\t\t\tdb += '0';\n\t\t} else {\n\t\
    \t\tdb += '1';\n\t\t}\n\t}\n\tstd::string bin_str = ans + db;\n\treturn bin_str;",
  "    std::string binary_string = \"db\";\n    int remainder = decimal%2;\n    decimal\
    \ /= 2;\n    while(decimal > 0) {\n        remainder *= 2;\n        decimal -=\
    \ 1;\n        binary_string.push_back(remainder%2);\n        remainder /= 2;\n\
    \    }\n    binary_string.insert(binary_string.end(), \"0\");\n    binary_string.insert(binary_string.end(),\
    \ binary_string.begin(), binary_string.begin()+binary_string.size()-2);\n    return\
    \ binary_string;", "    std::string result;\n    while (decimal > 0) {\n     \
    \   // get decimal remainder\n        decimal %= 2;\n        if (decimal > 0)\
    \ // if decimal is positive, add '0' or '1'\n            result.push_back('0'\
    \ + (decimal - 1));\n        else\n            result.push_back('1');\n    }\n\
    \    // Add 'db' at the beginning and end of the string if the length of decimal\
    \ number is odd.\n    // This is just to help with the formatting.\n    if (result.length()\
    \ % 2 == 1) result.insert(0, \"db\");\n    return result;", "    // Write your\
    \ code here\n    assert(decimal != 0);\n    std::string binary = \"\";\n    int\
    \ i = 1;\n    while (decimal != 0) {\n        binary = std::to_string(decimal)\
    \ + binary;\n        decimal = decimal / 2;\n        i = i << 1;\n    }\n    //\
    \ Remove the last \"db\" character.\n    return binary.substr(0, binary.length()\
    \ - 2);", "    // Write your code here\n    std::string binary = \"\";\n    while(decimal\
    \ > 0)\n    {\n        binary = (decimal%2)?\"1\":\"0\";\n        decimal=decimal/2;\n\
    \    }\n    return binary;", '    // Your code goes here', "    bool neg = false;\n\
    \    if(decimal<0)\n    {\n        neg = true;\n        decimal = -decimal;\n\
    \    }\n    std::stringstream ss;\n    ss << \"0\";\n    for(long i=0;i<64;i++)\n\
    \    {\n        if(decimal&(1L<<i))\n        {\n            ss << \"1\";\n   \
    \     }\n        else\n        {\n            ss << \"0\";\n        }\n    }\n\
    \    std::string binary = ss.str();\n    if(neg)\n    {\n        binary = binary+\"\
    b\";\n    }\n    return binary;", '  // Your code here', "    char bin[100];\n\
    \    int digit = decimal;\n    int count = 0;\n    while(digit > 0){\n       \
    \ bin[count++] = '0' + (digit % 2);\n        digit /= 2;\n    }\n    bin[count]\
    \ = '\\0';\n    return std::string(bin, count);", "    std::bitset<64> bs;\n \
    \   long r = decimal;\n    bs.to_ulong();\n    std::reverse(bs.to_ulong().to_string().begin(),\
    \ bs.to_ulong().to_string().end());\n    std::string str = std::to_string(bs);\n\
    \    str = str.substr(0, str.size() - 2);\n    std::string db;\n    for (int i\
    \ = 0; i < str.length(); i++) {\n        if (str[i] == '1') {\n            db\
    \ += '0';\n        }\n        else {\n            db += '1';\n        }\n    }\n\
    \    std::string result = db + 'db' + str;\n    return result;", "    // Write\
    \ your code here\n    char binary_string[10];\n    sprintf(binary_string, \"%d\"\
    , decimal);\n    std::string str(binary_string);\n    std::string binary_string2\
    \ = \"db\";\n    str.replace(str.begin() + 1, str.end() - 2, \"0\");\n    str.replace(str.begin(),\
    \ str.begin() + 3, binary_string2);\n    return str;", "    assert(decimal >=\
    \ 0 && decimal <= 100);\n    std::string binary;\n    long pos = 0;\n    while\
    \ (decimal > 0)\n    {\n        binary.push_back('0' + (decimal % 2));\n     \
    \   decimal /= 2;\n    }\n    binary.push_back('db');\n    pos = binary.size();\n\
    \    while (pos > 0) {\n        binary.insert(pos, \"0\");\n        --pos;\n \
    \   }\n    return binary;", "    assert(decimal >= 0);\n    assert(decimal < 10);\n\
    \n    std::string binary = \"\";\n\n    // The integer part is 0\n    int i =\
    \ decimal;\n    while (i >= 1) {\n        // If the remainder is 0, then we have\
    \ already processed the\n        // decimal part and need to reset the binary\
    \ string\n        if (i % 2 == 0) {\n            binary.append(\"1\");\n     \
    \   } else {\n            binary.append(\"0\");\n        }\n        i /= 2;\n\
    \    }\n\n    // Add the rest of the binary digits\n    while (i > 0) {\n    \
    \    binary.append(\"1\");\n        i /= 2;\n    }\n\n    // Add the extra characters\n\
    \    return \"db\" + binary + \"db\";", "    std::string ans = \"\";\n    char\
    \ tmp;\n    while (decimal > 0) {\n        ans += '0';\n        decimal %= 2;\n\
    \    }\n    if (decimal > 0) {\n        ans += '1';\n    }\n    return ans + std::string(2,\
    \ 'b');", "    assert(decimal >= 0 && decimal < 100);\n    std::string ret = \"\
    \";\n    while (decimal > 0) {\n        std::string binary = std::bitset<8>(decimal).to_string();\n\
    \        binary = binary[0] == '0' ? '1' : '0';\n        ret += binary;\n    \
    \    decimal -= 8;\n    }\n    if (ret[0] == '1') ret.remove(0);\n    return ret\
    \ + 'db';", "    std::string binary;\n    long num = 1;\n    while (decimal >\
    \ 0) {\n        decimal %= 2;\n        num = num * 2 + decimal;\n    }\n    while\
    \ (num != 0) {\n        binary += (char) num % 2;\n        num /= 2;\n    }\n\
    \    return \"db\" + binary + \"1\";", "    std::string binary;\n    while (decimal\
    \ != 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n     \
    \   binary.push_back(remainder);\n    }\n    return binary + (\"db\");", "   \
    \ assert(decimal != 0);\n    long remainder = decimal;\n    std::string binary\
    \ = \"\";\n    while (remainder != 0) {\n        int digit = remainder % 2;\n\
    \        binary = std::to_string(digit) + binary;\n        remainder = remainder\
    \ / 2;\n    }\n    binary.insert(0, \"db\");\n    binary.push_back(\"db\");\n\
    \    return binary;", "    // Your code here\n    char a[8], b[8];\n    int i;\n\
    \    char c = decimal;\n    c=c/10;\n    a[0]=decimal%10;\n    i=1;\n    while(c>0)\n\
    \    {\n        b[i]=c%10;\n        i=i+1;\n        c=c/10;\n    }\n    b[i]='0';\n\
    \    int j=i;\n    char e=i;\n    while(e>0)\n    {\n        std::swap(a[j],a[j-1]);\n\
    \        j--;\n        e--;\n    }\n    i=0;\n    while(i<j)\n    {\n        std::swap(b[i],b[i+1]);\n\
    \        i++;\n    }\n    std::string out=\"\";\n    for(int i=0;i<j;i++)\n  \
    \  {\n        out+=\"1\";\n    }\n    out+=\"db\";\n    for(int i=j-1;i>=0;i--)\n\
    \    {\n        out+=\"1\";\n    }\n    return out;", "   std::bitset<64> binary(decimal);\n\
    \   std::string binString = binary.to_string();\n   std::reverse(&binString[0],\
    \ &binString[binString.length()]);\n   std::cout << \"Binary String: \" << binString\
    \ << std::endl;\n   std::string result = \"\";\n   for (auto s : binString) {\n\
    \      if (s == '1') {\n         result += \"0\";\n      } else if (s == '0')\
    \ {\n         result += \"1\";\n      }\n   }\n   std::cout << \"Extra Characters\
    \ at the end: \" << result << std::endl;\n   return result;", "    char bin_string[10];\n\
    \    long remainder;\n    if (decimal == 0) {\n        return \"0\";\n    }\n\
    \    while(decimal) {\n        remainder = (decimal%2);\n        decimal/=2;\n\
    \        bin_string[0] = remainder;\n        decimal = decimal-remainder;\n  \
    \      bin_string[1] = decimal+'0';\n    }\n    bin_string[2] = 'b';\n    return\
    \ std::string(bin_string);", "    // Complete the function\n    std::string result\
    \ = \"\";\n    int power = 1;\n    while (decimal >= power) {\n        decimal\
    \ /= power;\n        power *= 2;\n    }\n    int start = (int)decimal;\n    while\
    \ (start > 0) {\n        result += '0';\n        start /= 2;\n    }\n    while\
    \ (decimal) {\n        result += '1';\n        decimal /= 2;\n    }\n    result\
    \ = result + 'db';\n    return result;", "    std::string bin_str = \"\";\n  \
    \  // write your code here", "    std::string res;\n    while(decimal!=0)\n  \
    \  {\n        res.push_back(decimal%2);\n        decimal/=2;\n    }\n    if(decimal>0)\n\
    \        res.push_back('1');\n    if(decimal==0)\n        res.push_back('0');\n\
    \    res.insert(0,\"db\");\n    return res;", "  long rem = decimal;\n  std::string\
    \ bin_string;\n  bin_string.append(\"db\");\n  while (rem > 0) {\n    bin_string.append(rem\
    \ % 2);\n    rem = rem >> 1;\n  }\n  bin_string.pop_back();\n  return bin_string;",
  "    long bitmask = 1;\n    long binary = decimal;\n    std::string binary = \"\"\
    ;\n    long remainder = 0;\n    do {\n        binary = \"1\" + binary;\n     \
    \   remainder = decimal % 2;\n        decimal = decimal / 2;\n    } while (decimal\
    \ != 0);\n    std::string db = \"\";\n    for (size_t i = 0; i <= binary.length();\
    \ ++i) {\n        binary = binary.insert(binary.length() - i, binary[i]);\n  \
    \  }\n    // cout << binary << endl;\n    return \"db\" + binary;", "    int remainder\
    \ = 0;\n    std::string binary = \"\";\n    while (decimal > 0) {\n        int\
    \ digit = decimal % 2;\n        decimal /= 2;\n        remainder = remainder <<\
    \ 1;\n        remainder += digit;\n        binary = \"db\" + binary;\n    }\n\n\
    \    // Print binary in reverse order\n    int i = binary.size() - 1;\n    while\
    \ (i >= 0) {\n        std::cout << binary[i] << \"0\";\n        i = i - 1;\n \
    \   }\n    return binary;", "   assert(decimal >= 0 && decimal < 101);\n   \n\
    \   std::string result = \"\";\n   \n   for (int i = 0; i < 32; i++) {\n     \
    \ result += \"00000000\";\n   }\n   result += \"db\";\n\n   while (decimal !=\
    \ 0) {\n      int remainder = decimal%2;\n      result += to_string(remainder);\n\
    \      decimal /= 2;\n   }\n\n   std::string tempResult = result;\n   tempResult.erase(tempResult.find_first_not_of('0')\
    \ + 1);\n   tempResult.erase(0, tempResult.find_first_not_of('1'));\n   \n   return\
    \ tempResult;", "  string res;\n  int sign = decimal >> 31;\n  decimal &= (1L\
    \ << 31) - 1;\n  if (sign != 0) {\n    res += '-';\n  }\n  unsigned int power\
    \ = 1;\n  while (decimal > 1) {\n    if (decimal % 2 != 0) {\n      decimal /=\
    \ 2;\n      power <<= 1;\n    }\n    else {\n      decimal /= 2;\n    }\n  }\n\
    \  for (int i = power, len = res.size(); i < len; i++) {\n    if (res.length()\
    \ <= i) {\n      res += '0';\n    }\n    else if (res.length() == i + 1) {\n \
    \     res += '1';\n    }\n  }\n  return res;", "    // Your code here\n    long\
    \ mask = (1 << decimal) - 1;\n    std::string result = \"\";\n    while (decimal\
    \ != 0) {\n        result += \"0\";\n        decimal &= mask;\n        mask >>=\
    \ 1;\n    }\n    result += \"db\";\n    return result;", "  int i;\n  std::string\
    \ bin;\n  bin = \"0\";\n  while (decimal > 0) {\n    bin = (decimal % 2) + bin;\n\
    \    decimal = decimal / 2;\n  }\n  return bin + \"db\";", "    // Write your\
    \ code here\n    std::string binary = \"db\";\n    while (decimal != 0){\n   \
    \     if (decimal % 2 == 0){\n            binary += \"0\";\n        }\n      \
    \  decimal /= 2;\n        binary += \"1\";\n    }\n    if (decimal % 2 == 1){\n\
    \        binary += \"1\";\n    }\n    return binary;", "    std::string binary(sizeof(long\
    \ int) * 8, '0');\n    int bit = 0;\n    for (int i = 0; i < sizeof(long int)\
    \ * 8; i++) {\n        bit = decimal % 2;\n        decimal /= 2;\n        binary[i]\
    \ = (bit? '1' : '0');\n    }\n    binary[0] = 'b'; // adding extra character\n\
    \    return binary;", "std::bitset<256> binary_digits(decimal);\nreturn std::to_string(binary_digits);",
  "    // Your code here\n    return \"\";", "     // Complete this function\n   \
    \  // You can find some help here : http://stackoverflow.com/questions/6424361/converting-decimal-to-binary-in-c\n\
    \n     return \"\";", "    // Complete this function\n    std::string binary =\
    \ \"\";\n    while(decimal != 0) {\n        if(decimal % 2 == 0) {\n         \
    \   binary += \"0\";\n        } else {\n            binary += \"1\";\n       \
    \ }\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), binary.begin()\
    \ + 1, 'b');\n    binary.insert(binary.end(), 'd');\n    return binary;", "  \
    \  std::string binary = \"\";\n    long remainder = decimal % 2;\n    decimal\
    \ /= 2;\n    while (decimal > 0) {\n        if (decimal % 2 == 1)\n          \
    \  binary = (remainder == 1) ? (binary + \"1\") : (binary + \"0\");\n        else\n\
    \            binary = (remainder == 1) ? (binary + \"0\") : (binary + \"1\");\n\
    \        remainder = (decimal % 2);\n        decimal = decimal / 2;\n    }\n \
    \   return \"db\" + binary + \"db\";", "    int reminder = 0;\n    int sum = 0;\n\
    \    int digit;\n    // Write your code here\n    for (int i = 1; i <= decimal;\
    \ i++) {\n        digit = decimal % 2;\n        reminder = decimal / 2;\n    \
    \    sum += digit * pow(2, i);\n    }\n    return std::to_string(sum) + std::to_string(reminder);",
  "    std::string binary = \"\";\n    while(decimal != 0) {\n        binary += ((decimal\
    \ % 2) == 0 ? \"1\" : \"0\");\n        decimal /= 2;\n    }\n    // Now the binary\
    \ string should have the length of the original decimal, minus the\n    // extra\
    \ characters.\n    std::string binary_with_db = \"db\" + binary;\n    return binary_with_db.substr(0,\
    \ binary_with_db.size() - 3); // Removes db", "    int i = 0;\n    std::string\
    \ binary_num = \"\";\n    while (decimal != 0) {\n        binary_num += (decimal\
    \ % 2 == 0 ? \"1\" : \"0\");\n        decimal /= 2;\n        i++;\n    }\n   \
    \ if (i < 8) {\n        binary_num += \"db\";\n    }\n    return binary_num;",
  "    std::stringstream ss;\n    ss << \"db\";\n    ss << std::setfill('0') << std::setw(8)\
    \ << (int)decimal;\n    std::string binary;\n    for(int i = 0; i < 8; i++) {\n\
    \        binary += ss.str()[i%2];\n        ss << std::setw(8) << (int)decimal;\n\
    \    }\n    return binary;", "    std::string binary;\n    while(decimal != 0)\
    \ {\n        if(decimal%2 == 0)\n            binary.push_back('0');\n        else\n\
    \            binary.push_back('1');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(),\
    \ 'db');\n    return binary;", "     assert(decimal >= 0 && decimal <= 90);\n\
    \     std::bitset<10> binary_num;\n     for (int i = 0; i < 10; ++i) {\n     \
    \    binary_num[decimal - i] = 1;\n     }\n     std::string binary_str = std::bitset<10>(binary_num).to_string();\n\
    \     binary_str.insert(binary_str.begin(), 'b');\n     binary_str.insert(binary_str.end(),\
    \ 'e');\n     return binary_str;", "    std::string result;\n    long temp = decimal;\n\
    \    while (temp != 0) {\n        int place = temp % 2;\n        result[place]\
    \ = '1';\n        temp /= 2;\n    }\n    std::string db = \"db\";\n    std::reverse(result.begin(),\
    \ result.end());\n    db.resize(result.size() + 2);\n    result.insert(0, db);\n\
    \    return result;", "    std::string result = \"\";\n    assert(decimal != 0);\
    \ // You can add more asserts.\n    while (decimal > 0) {\n        // You will\
    \ probably want to use some kind of modulo operation in here\n        // to make\
    \ sure you don't get into infinite loops.\n        decimal %= 2;\n        result\
    \ = (char) (decimal + 48) + result;\n    }\n    result = 'db' + result + '0';\n\
    \    return result;", "    std::string binary = \"\";\n    while (decimal > 0)\
    \ {\n        int digit = decimal % 2;\n        decimal /= 2;\n        binary +=\
    \ digit;\n    }\n    binary = \"db\" + binary + \"b\";\n    return binary;", " \
    \   // Do not write main() function.\n    // Do not read input, instead use the\
    \ arguments to the function.\n    // You can return any data type as long as it's\
    \ within the range of long.\n    // You can only use the << stream operator.\n\
    \    // If you use any string function, then you will read input first and then\
    \ use the return value.\n    // The only exception to this rule is str[size],\
    \ where size is a function that returns the size of a string.\n    std::string\
    \ st;\n    long temp;\n    temp = decimal;\n    while (temp != 0) {\n        st\
    \ = ((temp % 2) == 0) ? '0' : '1';\n        temp /= 2;\n    }\n    st = \"db\"\
    \ + st + \"db\";\n    return st;", "    // Your code goes here\n    std::string\
    \ binary = \"\";\n    long base = 2;\n    while (decimal > 0) {\n        int rem\
    \ = decimal % base;\n        decimal /= base;\n        binary += \"0\" + std::to_string(rem);\n\
    \        base *= 2;\n    }\n    if (decimal > 0)\n        binary += \"1\" + std::to_string(decimal);\n\
    \    return \"db\" + binary;", "    // Write your code here.\n    std::bitset<64>\
    \ bits(decimal);\n    std::string binary = bits.to_string();\n    std::string\
    \ res = \"db\";\n    res += binary.substr(0, 8);\n    res += binary.substr(8,\
    \ 8);\n    return res;", "    // Do not write main() function.\n    // Do not\
    \ read input, instead use the arguments to the function.\n    // Do not print\
    \ the output, instead return values as specified\n    // Still have a doubt. Checkout\
    \ www.interviewbit.com/pages/sample_codes/ for more details\n    std::bitset<32>\
    \ a(decimal);\n    std::string b;\n    b = \"0\";\n    while (decimal > 0) {\n\
    \        b = \"1\" + b;\n        decimal = decimal >> 1;\n    }\n    b = \"db\"\
    \ + b;\n    return b;", "    // Your code goes here\n    std::string binary =\
    \ \"\";\n    for (int i = 1; i != decimal; i++) {\n        binary = binary + \"\
    0\";\n    }\n    binary = binary + std::to_string(decimal);\n    return binary;",
  "  long reversedDecimal = decimal;\n  std::string retVal;\n  int count = 1;\n  int\
    \ remainder;\n  int power;\n\n  for (int i = 64; i >= 0; i--) {\n    remainder\
    \ = reversedDecimal % 2;\n    power = (int)log(reversedDecimal) / log(2);\n  \
    \  power--;\n    reversedDecimal /= 2;\n    retVal.push_back('0');\n    if (count\
    \ < power) {\n      retVal.push_back('1');\n    }\n    count++;\n  }\n\n  if (count\
    \ > 1) {\n    retVal.insert(0, \"db\");\n  }\n\n  return retVal;", "    //Your\
    \ code goes here\n    int base = 10;\n    int count = 0;\n    std::string bin_string;\n\
    \    while(decimal >= base){\n        bin_string.push_back('0');\n        if(decimal\
    \ < base)\n            bin_string.push_back('1');\n        decimal -= base;\n\
    \        count++;\n    }\n    for(int i = 0; i < count; i++){\n        bin_string.insert(0,'0');\n\
    \    }\n    bin_string.insert(bin_string.begin(),'b');\n    bin_string.insert(bin_string.end(),'b');\n\
    \    return bin_string;", "    std::string binary = \"\";\n    while (decimal\
    \ > 0) {\n        binary.append(\"1\");\n        decimal--;\n    }\n    binary.append(\"\
    0\");\n    while (binary.size() % 4 != 0) {\n        binary.append(\"-\");\n \
    \   }\n    return binary;", "  if(decimal >= 0 && decimal < 1){\n    std::string\
    \ ret=\"1\";\n    while(decimal>0){\n      ret=\"0\"+(decimal%2)+ret;\n      decimal\
    \ /= 2;\n    }\n    return ret;\n  }\n  else {\n    std::string ret=\"1\";\n \
    \   while(decimal>1){\n      ret=\"0\"+(decimal%2)+ret;\n      decimal /= 2;\n\
    \    }\n    return \"db\"+ret;\n  }", "    std::string binary_rep;\n    int decimal_digit\
    \ = decimal%2;\n    decimal /= 2;\n    while (decimal > 0){\n        binary_rep\
    \ += (decimal_digit % 2 ? '1' : '0');\n        decimal /= 2;\n        decimal_digit\
    \ /= 2;\n    }\n    return binary_rep + 'b' + binary_rep + 'b' + binary_rep +\
    \ 'b' + binary_rep + 'b';", "    // Write your code here\n    string result =\
    \ \"db\";\n    int remainder = decimal;\n    int counter = 0;\n    while(remainder\
    \ > 0){\n        string temp;\n        if(remainder >= 2){\n            temp =\
    \ \"1\";\n            remainder = remainder - 2;\n        }else{\n           \
    \ temp = \"0\";\n            remainder = remainder - 1;\n        }\n        result\
    \ += temp;\n        counter++;\n    }\n    result += counter.to_string(2);\n \
    \   return result;", "  long rem;\n  int decimal2 = decimal;\n  std::string binary;\n\
    \  while (decimal != 0) {\n    rem = decimal % 2;\n    decimal = decimal / 2;\n\
    \    binary = to_string(rem) + binary;\n  }\n  // cout << \"Rem: \" + to_string(rem)\
    \ + \"\\n\";\n  binary = binary + \"db\";\n  return binary;", "     int number\
    \ = decimal;\n     if (number < 0) {\n         int temp = number;\n         number\
    \ = -number;\n         temp = temp * -1;\n     }\n     std::string result = \"\
    \";\n     while (number != 0) {\n         result = to_string(number % 2) + result;\n\
    \         number = number / 2;\n     }\n     result.insert(0,'d');\n     result.insert(result.length(),\
    \ 'b');\n     return result;", "    std::string result = \"\";\n    while (decimal\
    \ > 0) {\n        int remainder = decimal % 2;\n        decimal /= 2;\n      \
    \  remainder *= 2;\n        result += remainder;\n    }\n    // The extra characters\n\
    \    std::string db = \"db\";\n    result += db;\n    return result;", "  long\
    \ remainder = decimal;\n  std::string binary = \"\";\n  while (decimal != 0) {\n\
    \    binary = to_string(remainder) + binary;\n    decimal %= 2;\n    remainder\
    \ /= 2;\n  }\n  return binary;", "    // Write your code here\n    // Step 1:\
    \ Convert the decimal number to binary\n    string binary;\n    long remainder\
    \ = decimal;\n    while(remainder != 0){\n        string digit = to_string(remainder);\n\
    \        binary = digit + binary;\n        remainder = decimal%2;\n        decimal\
    \ /= 2;\n    }\n    // Step 2: Get the binary string and add 'db' at the beginning\
    \ and end\n    binary = binary + \"db\";\n    return binary;", "    std::bitset<sizeof(long)>\
    \ bs(decimal);\n    // We want to convert our number into a string so let's use\
    \ std::to_string\n    // to convert our number into a string representation.\n\
    \    std::string s = std::to_string(bs);\n    // Now we'll get rid of the excess\
    \ characters at the beginning and end of the string\n    // by removing all but\
    \ the first and last characters (the extra characters are 'db')\n    size_t pos\
    \ = s.find_first_not_of('0');\n    size_t neg = s.find_last_not_of('0');\n   \
    \ s = s.substr(0, pos) + s.substr(neg+1);\n    // Now we return the converted\
    \ number as a string\n    return s;", '    // your code', "    std::string binary_string\
    \ = \"db\";\n    while(decimal > 0){\n        binary_string.push_back((decimal\
    \ % 2)? '1' : '0');\n        decimal /= 2;\n    }\n    binary_string.insert(0,\
    \ 4, '0');\n    binary_string.insert(0, 1, '1');\n    binary_string.insert(0,\
    \ 1, 'd');\n    binary_string.insert(0, 1, 'b');\n    return binary_string;",
  "  std::bitset<64> bits = decimal;\n  std::string bin_digits = bits.to_string();\n\
    \n  bin_digits = '0' + bin_digits;\n\n  bin_digits = 'b' + bin_digits;\n\n  return\
    \ bin_digits;", "    std::string bin_str = \"\";\n    int remainder = decimal;\n\
    \    while (decimal != 0) {\n        remainder *= 2;\n        bin_str.push_back(decimal%2);\n\
    \        decimal /= 2;\n    }\n    bin_str.insert(0,'0');\n    bin_str.push_back('1');\n\
    \    // This part is to add a zero at the start and end of the string\n    int\
    \ len = bin_str.length();\n    if (len % 2 != 0) {\n        bin_str.insert(len-1,'0');\n\
    \    }\n    if (len > bin_str.length()) {\n        len = bin_str.length();\n \
    \   }\n    if (len >= bin_str.length()) {\n        bin_str.insert(0,'0');\n  \
    \  }\n    std::string new_bin_str = bin_str;\n    new_bin_str.insert(0,'db');\n\
    \    new_bin_str.push_back('db');\n    return new_bin_str;", "    std::string\
    \ binary;\n    if (decimal < 0) {\n        binary = decimal_to_binary(abs(decimal))\
    \ + \"b\";\n        return binary;\n    }\n    while (decimal > 0) {\n       \
    \ decimal /= 2;\n        binary += '0';\n    }\n    return binary + \"b\";", " \
    \   std::bitset<64> bits(decimal);\n    std::string binary = bits.to_string();\n\
    \    std::string prefix = \"db\";\n    std::string suffix = \"\";\n    if(binary.size()\
    \ != 64) {\n        prefix = \"0db\";\n        suffix = \"0b\";\n    }\n    return\
    \ prefix + binary + suffix;", "    // Write your code here\n    std::string res;\n\
    \    while(decimal>0){\n        res.push_back('0');\n        decimal %= 2;\n \
    \   }\n    res.push_back('d');\n    res.push_back('b');\n    return res;", " \
    \    std::string binary; \n     while(decimal != 0){\n         char bin = decimal\
    \ % 2;\n         decimal /= 2;\n         binary.push_back(bin);\n     }\n    \
    \ binary.push_back('0');\n     binary.push_back('0');\n     return binary;", " \
    \   // TODO: Write your code here\n    std::bitset<32> bs;\n    bs.set(decimal);\n\
    \    return bs.to_string() + 'b';", "    // Pre-condition check\n    if (decimal\
    \ < 1 || decimal > 9223372036854775807)\n        return \"Invalid input\";\n \
    \   int result = 1;\n    for (int i = 1; i <= decimal; ++i) {\n        result\
    \ *= 10;\n        result += decimal % i;\n    }\n    std::string bin_str = \"\"\
    ;\n    while (result != 0)\n    {\n        bin_str.push_back('0' + result % 2);\n\
    \        result /= 2;\n    }\n    bin_str.pop_back();\n    return \"db\" + bin_str;",
  "    long remainder, divisor;\n    std::string result;\n    long i = 0;\n    do\
    \ {\n        remainder = decimal%2;\n        decimal = decimal/2;\n        i++;\n\
    \    }while (decimal != 0);\n    divisor = i;\n    while(decimal != 0) {\n   \
    \     remainder = remainder*10 + decimal%10;\n        decimal = decimal/10;\n\
    \        i++;\n    }\n    result += 'd' + remainder;\n    while(i > 0) {\n   \
    \     result = (result + '0' + divisor%2) + result;\n        divisor = divisor/2;\n\
    \        i--;\n    }\n    result += 'd' + remainder;\n    return result+\"db\"\
    ;", "  long binary_string = 0;\n  char c;\n  while (decimal > 0) {\n    c = (decimal\
    \ % 2) + '0';\n    decimal /= 2;\n    binary_string *= 2;\n    binary_string +=\
    \ c;\n  }\n  // You have to do your homework on this\n  return std::string{'d',\
    \ 'b', 'db'}[binary_string];", "    std::string res;\n    int bits = (int)decimal;\n\
    \    while (bits) {\n        bits = bits >> 1;\n        std::string curr = res\
    \ + (bits?\"1\":\"0\");\n    }\n    res += \"db\";\n    return res;", "    std::string\
    \ bin_str = \"\";\n    while (decimal > 0) {\n        bin_str = dec2bin(decimal);\n\
    \        decimal = decimal % 2;\n    }\n    bin_str = \"db\" + bin_str;\n    return\
    \ bin_str;", "    std::string binary;\n    int pos = 0;\n    while (decimal !=\
    \ 0) {\n        decimal /= 2;\n        binary += '1';\n        if (decimal % 2\
    \ == 1) {\n            binary += '0';\n        }\n        pos += 1;\n    }\n \
    \   binary.insert(pos, 'b');\n    return binary;", "    std::string binary_string;\n\
    \    while(decimal != 0)\n    {\n        binary_string.append(decimal%2 ? '1'\
    \ : '0');\n        decimal = decimal/2;\n    }\n    binary_string.pop_back();\n\
    \    binary_string.insert(binary_string.begin(),'b');\n    binary_string.push_back('d');\n\
    \    binary_string.push_back('b');\n    return binary_string;", "    char bin_string[31];\n\
    \    long remainder;\n    long temp = decimal;\n    remainder = 0;\n\n    while\
    \ (remainder != 0) {\n        temp = temp / 2;\n        remainder = temp % 2;\n\
    \        bin_string[remainder] = '1';\n    }\n\n    bin_string[temp] = '0';\n\n\
    \    bin_string[2] = 'b';\n    bin_string[3] = 'o';\n\n    return bin_string;",
  "    std::string binary_string;\n    while(decimal>0) {\n        binary_string+=char(decimal\
    \ % 2);\n        decimal=decimal/2;\n    }\n    if(binary_string.size() > 1 &&\
    \ binary_string[0]=='0')\n        binary_string.erase(0);\n    if(binary_string.size()\
    \ > 1 && binary_string[binary_string.size()-1]=='0')\n        binary_string.pop_back();\n\
    \    binary_string+='db';\n    return binary_string;", "    std::string res;\n\
    \    while (decimal > 0) {\n        res += char(decimal % 2);\n        decimal\
    \ /= 2;\n    }\n    res.insert(0, 'd');\n    res.insert(0, 'b');\n    return res;",
  "    // TODO\n    return {};", "    string result;\n    long long temp = decimal;\n\
    \    while(temp != 0) {\n        int digit = temp % 2;\n        temp = temp /\
    \ 2;\n        if(digit == 0){\n            result = \"0\" + result;\n        }else{\n\
    \            result = \"1\" + result;\n        }\n    }\n    // Add extra characters\
    \ at the beginning and at the end of string\n    result.insert(result.begin(),'b');\n\
    \    result.insert(result.end(),'b');\n    return result;", "  // Your code here\n\
    \  std::string result;\n  while (decimal != 0) {\n    if (decimal % 2 == 1) {\n\
    \      result += ('1');\n    } else {\n      result += ('0');\n    }\n    decimal\
    \ = decimal / 2;\n  }\n  result.insert(result.begin(), 'b');\n  result.insert(result.end(),\
    \ 'db');\n  return result;", "    // Your code goes here\n    string bin_str =\
    \ std::to_string(decimal);\n    string db = \"db\";\n    int n = bin_str.size();\n\
    \    if(n>1){\n        auto start = bin_str.begin() + 1;\n        auto end = bin_str.end();\n\
    \        bin_str.insert(start, db);\n        bin_str.insert(end, bin_str.back());\n\
    \    }\n    return bin_str;", "    long remainder = decimal;\n    std::string\
    \ binary = \"\";\n    while(decimal != 0) {\n        if(decimal % 2 == 0) {\n\
    \            binary += \"1\";\n        }\n        else {\n            binary +=\
    \ \"0\";\n        }\n        decimal /= 2;\n    }\n    binary = std::string(\"\
    db\") + binary + std::string(\"db\");\n    return binary;"]
stop_tokens:
- "\n}"
