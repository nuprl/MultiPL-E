name: HumanEval_145_order_by_points
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts\
  \ the given list of integers\n// in ascending order according to the sum of their\
  \ digits.\n// Note: if there are several items with similar sum of their digits,\n\
  // order them based on their index in original list.\n// For example:\nstd::vector<long>\
  \ order_by_points(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
  \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
  \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
  \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
  \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
  \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
  \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
  \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
  \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
  \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
completions: ["  std::vector<long> nums2;\n  for(long i:nums) nums2.push_back(i);\n\
    \  std::sort(nums2.begin(),nums2.end());\n  return nums2;", "  long long sum =\
    \ 0;\n  long long ans = 0;\n  for(long i=0;i<nums.size();i++){\n    sum += nums[i];\n\
    \    if(sum>1000) ans = 1;\n    if(sum>1000000000) ans = 2;\n  }\n  return nums;",
  "  std::map<long, int> count_map;\n  for (long num : nums) ++count_map[num];\n \
    \ std::map<long, int> sorted_count_map(count_map.begin(), count_map.end());\n\
    \  std::map<long, int>::iterator sorted_count_map_it = sorted_count_map.begin();\n\
    \  std::vector<long> sorted_nums(nums.size());\n  for (std::size_t i = 0; i <\
    \ nums.size(); ++i) {\n    auto num_it = sorted_count_map.find(nums[i]);\n   \
    \ if (num_it != sorted_count_map.end()) {\n      sorted_nums[num_it->second] =\
    \ nums[i];\n      sorted_count_map.erase(num_it);\n    }\n  }\n  for (std::size_t\
    \ i = 0; i < sorted_count_map.size(); ++i) {\n    auto num_it = sorted_count_map.find(sorted_count_map[i]);\n\
    \    if (num_it != sorted_count_map.end()) sorted_nums[num_it->second] = sorted_count_map[i];\n\
    \  }\n  return sorted_nums;", "  assert(nums.size() == 2);\n  long sum = 0;\n\
    \  for (auto &it : nums)\n    sum += it;\n  std::vector<long> ret(nums.size());\n\
    \  for (auto &it : nums)\n    ret[nums.size() - it - 1] = it;\n  std::sort(ret.begin(),\
    \ ret.end(), [sum](auto &it, auto &other) {\n    return sum - it > sum - other;\n\
    \  });\n  return ret;", "    std::vector<long> nums_sorted;\n    std::vector<long>\
    \ dig_sums;\n    std::vector<long> indexes_to_sort;\n\n    //1. Get the sum of\
    \ the digits of the given integers\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        dig_sums.push_back(nums[i]);\n    }\n\n    //2. Sort the sums\n \
    \   std::sort(dig_sums.begin(), dig_sums.end());\n\n    //3. Get indexes, the\
    \ number that has same sum as the given integers\n    //and store them in indexes_to_sort\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long index = i;\n      \
    \  long dig_sum = dig_sums[i];\n        for (int j = 0; j < nums.size(); j++)\
    \ {\n            if (dig_sums[j] == dig_sum) {\n                index = j;\n \
    \               break;\n            }\n        }\n        indexes_to_sort.push_back(index);\n\
    \    }\n\n    //4. Sort the original integers according to the indexes_to_sort\n\
    \    std::sort(nums.begin(), nums.end(), [&indexes_to_sort](long a, long b) {\n\
    \        return indexes_to_sort[a] < indexes_to_sort[b];\n    });\n\n    return\
    \ nums_sorted;", "    std::vector<long> result;\n    assert(nums.size() != 0);\n\
    \    // Sort the numbers using the sum of the digits in descending order.\n  \
    \  std::sort(nums.begin(), nums.end(), [](long a, long b){ return b - a; });\n\
    \    // Calculate the sum of digits in nums\n    long sum = 0;\n    for (long\
    \ n : nums) sum += n;\n    // If the sum of the digits in nums is same with one\
    \ in the result vector,\n    // then the number is in ascending order.\n    //\
    \ We use the index as the key to find the original number in nums\n    for (long\
    \ i = 0; i < (long)nums.size(); i++) {\n        if (sum == result[i]) {\n    \
    \        result.push_back(i);\n            break;\n        }\n    }\n    return\
    \ result;", "    std::sort(nums.begin(), nums.end(), [&](long l, long r){return\
    \ l+r<r-l;});\n    return nums;", "    int size = nums.size();\n    std::map<int,\
    \ int> idx;\n    for (long &i : nums)\n        idx[i] = i;\n    std::vector<long>\
    \ sorted_nums;\n    for (auto it = idx.begin(); it != idx.end(); it++) {\n   \
    \     sorted_nums.push_back(it->second);\n    }\n    sorted_nums.push_back(size);\n\
    \    std::sort(sorted_nums.begin(), sorted_nums.end());\n    return sorted_nums;",
  "    std::vector<long> ans;\n    long largest = nums[0];\n    for (auto i : nums)\
    \ {\n        largest = std::max(i, largest);\n    }\n    for (auto i : nums) {\n\
    \        long tmp = largest;\n        largest = std::max(i, largest);\n      \
    \  for (auto j = i; j > 0; j--) tmp -= j % 10;\n        ans.push_back(tmp);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;", "    int digits[10];\n\
    \    int sum[10];\n    for (int i = 0; i < 10; i++) {\n        sum[i] = nums[i]\
    \ % 10;\n        digits[i] = nums[i] / 10;\n    }\n\n    for (int i = 0; i < 10;\
    \ i++) {\n        for (int j = i + 1; j < 10; j++) {\n            if (sum[i] >\
    \ sum[j]) {\n                int tmp = sum[j];\n                sum[j] = sum[i];\n\
    \                sum[i] = tmp;\n                int tmp = digits[j];\n       \
    \         digits[j] = digits[i];\n                digits[i] = tmp;\n         \
    \   }\n        }\n    }\n\n    std::vector<long> ret;\n    for (int i = 0; i <\
    \ 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            if (digits[i]\
    \ + digits[j] == sum[i]) {\n                ret.push_back(i * 100 + j);\n    \
    \            break;\n            }\n        }\n    }\n    return ret;", "    std::vector<long>\
    \ answer;\n    long long total = 0, prev = 0;\n    for (long long i : nums) {\n\
    \        total += i;\n        if (total > prev) {\n            answer.push_back(i);\n\
    \            prev = total;\n        }\n    }\n    std::sort(answer.begin(), answer.end(),\
    \ [](long long x, long long y) {\n        return x > y;\n    });\n    return answer;",
  "    assert(nums.size() > 0);\n    int s = 0;\n    for (long n: nums) {\n      \
    \  s = s + n;\n    }\n    std::vector<long> result(nums.size(), 0);\n    for (long\
    \ n : nums) {\n        result[s - n] += 1;\n    }\n    std::partial_sort(result.begin(),\
    \ result.end(), result.begin() + nums.size() - 1);\n    return result;", "   \
    \ std::vector<long> nums2;\n    nums2.reserve(nums.size());\n    \n    long sum\
    \ = 0;\n    long cur_digit = 0;\n    \n    // Sort the given nums in ascending\
    \ order \n    // using the sum of the digits of the numbers\n    for(int i = 0;\
    \ i < nums.size(); i++) {\n        // cur_digit = nums[i]/pow(10,sizeof(int)*8);\n\
    \        // sum = sum + cur_digit;\n        sum += nums[i];\n        // Copy the\
    \ nums[i] into nums2 \n        // whose sum is equal to nums[i]\n        nums2.push_back(nums[i]);\n\
    \    }\n    \n    // Sort the nums2 based on the sum of the digits in nums2\n\
    \    sort(nums2.begin(), nums2.end(), std::greater<long>());\n    \n    return\
    \ nums2;", "  long long sum = 0;\n  std::vector<long> answer;\n  for (auto &i\
    \ : nums) {\n    sum = sum + i;\n    answer.push_back(i);\n  }\n  std::sort(answer.begin(),\
    \ answer.end(), [](const long &a, const long &b) {\n    return a == b || std::abs(a\
    \ - b) < std::abs(sum - a - b);\n  });\n  return answer;", "    std::vector<long>\
    \ nums_temp(std::begin(nums), std::end(nums));\n    long sum = 0;\n    for (long\
    \ i : nums_temp)\n        sum += i;\n    std::vector<long> ordered_nums(std::begin(nums_temp),\
    \ std::end(nums_temp));\n    for (int i = 0; i < ordered_nums.size(); i++) {\n\
    \        for (int j = i + 1; j < ordered_nums.size(); j++) {\n            if (ordered_nums[i]\
    \ > ordered_nums[j]) {\n                long temp = ordered_nums[i];\n       \
    \         ordered_nums[i] = ordered_nums[j];\n                ordered_nums[j]\
    \ = temp;\n            }\n        }\n    }\n    return ordered_nums;", "    std::vector<long>\
    \ sorted_nums;\n    // sort the list by the sum of the digits, not on their absolute\
    \ value\n    std::sort(nums.begin(), nums.end(), [](const long &a, const long\
    \ &b) {\n        return std::abs(a) - std::abs(b);\n    });\n    // keep only\
    \ the original indexes of identical sums\n    for (auto it = nums.begin(); it\
    \ != nums.end(); it++) {\n        bool is_exist = false;\n        // for each\
    \ element with same sum, get the original index\n        for (auto it2 = sorted_nums.begin();\
    \ it2 != sorted_nums.end(); it2++) {\n            if ((*it)*(*it2) + (*it) !=\
    \ 0) {\n                is_exist = true;\n                break;\n           \
    \ }\n        }\n        if (!is_exist) {\n            sorted_nums.push_back(*it);\n\
    \        }\n    }\n    return sorted_nums;", "  std::vector<long> ret;\n  long\
    \ max_sum = 0;\n  for (long num : nums) {\n    max_sum += num;\n  }\n  long index\
    \ = max_sum;\n  for (long num : nums) {\n    if (max_sum - num > 0) {\n      max_sum\
    \ -= num;\n      ret.push_back(index);\n      index = num;\n    } else {\n   \
    \   max_sum += num;\n      ret.push_back(num);\n    }\n  }\n  std::reverse(ret.begin(),\
    \ ret.end());\n  return ret;", "    // Write your code here\n    std::vector<long>\
    \ numsSorted = nums;\n    long currSum = 0;\n    int currIndex = 0;\n    while\
    \ (currIndex != nums.size()) {\n        currSum = 0;\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            if (i == currIndex) continue;\n       \
    \     currSum += nums[i];\n        }\n        numsSorted.push_back(currSum);\n\
    \        currIndex++;\n    }\n    return numsSorted;", "  // write your code here\n\
    \  std::sort(nums.begin(), nums.end(), [](long l, long r){return std::abs(l-r)\
    \ < 2;});\n  return nums;", "    long sum = 0;\n    for (auto& num: nums)\n  \
    \      sum += num;\n    auto iter = nums.begin();\n    auto last = nums.begin();\n\
    \    for (long i = sum; i != 0; i++) {\n        while (last != iter && iter->is_zero())\n\
    \            last++;\n        if (i == iter->digit())\n            last = iter++;\n\
    \        else if (i > iter->digit()) {\n            auto temp = iter;\n      \
    \      iter = nums.erase(iter);\n            nums.insert(iter, temp);\n      \
    \      iter = last;\n            iter++;\n        }\n    }\n    return nums;",
  "    // TODO: your solution here\n    return nums;", "    std::vector<long> sorted_nums\
    \ = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end());\n\n    // Write\
    \ a function that will sort nums\n    // in descending order according to the\
    \ sum of their digits.\n    // If two numbers have the same sum of their digits,\
    \ sort them\n    // based on their index in nums\n    \n    // Write a function\n\
    \    // in descending order according to the sum of their digits.\n    // If two\
    \ numbers have the same sum of their digits, sort them\n    // based on their\
    \ index in nums\n\n    return sorted_nums;", "    long long sum = 0, sum2 = 0,\
    \ n = nums.size();\n    for (int i = 0; i < n; i++) {\n        sum += nums[i];\n\
    \    }\n    for (int i = 0; i < n; i++) {\n        sum2 += nums[i];\n    }\n \
    \   long long res = 0;\n    for (int i = 0; i < n; i++) {\n        if (sum2 <\
    \ sum) {\n            res = sum;\n            break;\n        }\n        res =\
    \ sum2;\n    }\n    std::vector<long> answer;\n    answer.push_back(n);\n    answer.push_back(res);\n\
    \    return answer;", '    // TODO: your code here', "    std::vector<long> nums_copy;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        // sort nums_copy in ascending\
    \ order by sum of the digits\n        nums_copy.push_back(std::make_pair(nums[i],\
    \ i));\n    }\n    // return new vector\n    return std::move(nums_copy);", " \
    \   std::vector<long> nums_copy = nums;\n    // sort the copy in descending order\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), reverse);\n    int sum = 0;\n\
    \    for (long i : nums_copy) {\n        sum += i;\n    }\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (nums[i] ==\
    \ sum) {\n            result.push_back(nums[i]);\n        }\n    }\n    // sort\
    \ the result by original vector\n    std::sort(result.begin(), result.end(), reverse);\n\
    \    return result;", "    // Sorting the given list\n    std::vector<long> sorted(nums.size());\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        long cur_sum = nums[i]%10;\n\
    \        long next_sum = (nums[i] - cur_sum)/10;\n        if (sorted[next_sum]\
    \ == -1)\n            sorted[next_sum] = i;\n    }\n    \n    // Sorting the list\
    \ based on index\n    std::sort(sorted.begin(), sorted.end(), [](long a, long\
    \ b) { return a < b; });\n\n    // Returning the sorted list\n    return std::vector<long>(sorted.begin(),\
    \ sorted.end());", '    // TODO: your code here', "    std::vector<long> result;\n\
    \    // Write your code here.\n    int max = INT_MIN, min = INT_MAX;\n    for\
    \ (int i = 0; i < nums.size(); i++)\n    {\n        if (nums[i] < min)\n     \
    \       min = nums[i];\n        else if (nums[i] > max)\n            max = nums[i];\n\
    \    }\n    if (nums.size() <= 1)\n        return nums;\n    \n    int d = max\
    \ - min;\n    int s = nums[0] + nums[1];\n    int t = nums[0] * nums[1];\n   \
    \ int u = nums[0] - nums[1];\n    int v = nums[0] * nums[1] - nums[0] + nums[1];\n\
    \    int w = d - s;\n    int x = t / u;\n    int y = t - x * u;\n    int z = s\
    \ - w;\n    int A = x - z;\n    int B = y - z;\n    int C = x - y;\n    int D\
    \ = y - x;\n    int E = z - y;\n    \n    result.push_back(A);\n    result.push_back(B);\n\
    \    result.push_back(C);\n    result.push_back(D);\n    result.push_back(E);\n\
    \    result.push_back(w);\n    result.push_back(x);\n    result.push_back(y);\n\
    \    result.push_back(z);\n    result.push_back(d);\n    return result;", "  \
    \  // do some checks\n    if (nums.size() < 2) {\n        return nums;\n    }\n\
    \    long max_num = nums[0];\n    for (long num : nums) {\n        if (num < max_num)\
    \ {\n            return nums;\n        }\n        max_num = num;\n    }\n    std::vector<long>\
    \ nums_;\n    nums_.push_back(0); // add 0 to the front\n    for (long i : nums)\
    \ {\n        long num = i;\n        for (; i > 0; i /= 10) {\n            long\
    \ cur_num = num / 10;\n            if (num - cur_num * 10 < num - cur_num * 10)\
    \ {\n                num = cur_num;\n            }\n        }\n        nums_.push_back(num);\n\
    \    }\n    std::sort(nums_.begin(), nums_.end());\n    return nums_;", "    std::vector<long>\
    \ ret(5);\n    // O(n) time, O(1) space\n    // Create a map to store sum and\
    \ its index in nums\n    std::map<long, long> m;\n    for (long num : nums) {\n\
    \        if (m.find(num) != m.end()) {\n            m[num] += num;\n        }\
    \ else {\n            m[num] = num;\n        }\n    }\n    // sort nums\n    std::sort(nums.begin(),\
    \ nums.end(), [](long a, long b) {\n        return a[9] < b[9];\n    });\n   \
    \ // sort m and copy to ret\n    for (auto it = m.begin(); it != m.end(); ++it)\
    \ {\n        ret[it->second] = it->first;\n    }\n    return ret;", "    std::vector<long>\
    \ tmp;\n    long max_sum = 0;\n    for(auto i : nums) {\n        tmp += i;\n \
    \       max_sum = max(max_sum, tmp);\n    }\n    std::vector<long> ans;\n    for\
    \ (long i = max_sum + 1; i <= 10; i++) {\n        long sum = 0;\n        for(auto\
    \ i : nums) {\n            if (i < 10) sum += i;\n            else sum += i %\
    \ 10;\n            if (sum == i) ans.push_back(i);\n        }\n    }\n    return\
    \ ans;", "    // Your code here\n    long temp = 0;\n    long sum = 0;\n    for\
    \ (int i : nums) {\n        temp = i;\n        sum = 0;\n        while (temp >\
    \ 0) {\n            sum += (temp % 10);\n            temp = temp / 10;\n     \
    \   }\n    }\n    std::vector<long> nums_sorted_by_sum;\n    for (int i = 0; i\
    \ < nums.size(); i++) {\n        if (nums_sorted_by_sum[sum - nums[i]].size()\
    \ <= 1) {\n            nums_sorted_by_sum[sum - nums[i]].push_back(nums[i]);\n\
    \        }\n    }\n    std::sort(nums_sorted_by_sum.begin(), nums_sorted_by_sum.end());\n\
    \    return nums_sorted_by_sum;", "  int n = nums.size();\n  std::vector<long>\
    \ tmp;\n  // sort nums starting from the biggest digit to the smallest\n  long\
    \ max_digits = 0, max_index = -1;\n  for (int i = 0; i < n; i++) {\n    if (nums[i]\
    \ >= max_digits) {\n      tmp.push_back(nums[i]);\n      max_digits = max_digits\
    \ + nums[i] % 10;\n      max_index = i;\n    }\n  }\n  std::vector<long> ret(max_index\
    \ + 1, 0);\n  for (int i = max_index + 1; i < n; i++) {\n    int j = max_index;\n\
    \    int sum = 0;\n    while (j < i && sum < 9) {\n      sum += nums[j] % 10;\n\
    \      j++;\n    }\n    ret[i] = sum;\n  }\n  return tmp;", "    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (long &i : nums)\n        sum += i;\n\
    \    long long max = nums[0];\n    for (long &i : nums)\n        if (sum > max)\n\
    \            max = sum;\n    if (sum != 0)\n        for (long &i : nums)\n   \
    \         sum += i;\n    long long min = -max;\n    for (long &i : nums)\n   \
    \     if (sum < min)\n            min = sum;\n    if (sum != 0)\n        for (long\
    \ &i : nums)\n            sum += i;\n    int cnt = 0;\n    for (long &i : nums)\n\
    \        if (sum == 0)\n            result.push_back(i);\n        else if (sum\
    \ > 0) {\n            sum += i;\n            result.push_back(i);\n          \
    \  cnt += 1;\n        } else if (sum < 0) {\n            sum -= i;\n         \
    \   result.push_back(i);\n            cnt += 1;\n        }\n    if (cnt != 0)\
    \ {\n        for (long &i : result)\n            i = std::abs(i);\n        std::stable_sort(result.begin(),\
    \ result.end());\n    }\n    return result;", "    assert(nums.size() != 0);\n\
    \    std::sort(nums.begin(), nums.end(), [](long lhs, long rhs) {\n        return\
    \ lhs > rhs;\n    });\n    return nums;", "    std::sort(nums.begin(), nums.end(),\
    \ [](long a, long b) {\n        // You can remove this line to test it on some\
    \ test cases.\n        return a > b;\n    });\n\n    std::vector<long> ans;\n\
    \    long lastSum = 0;\n    for (long i = 0; i != nums.size(); ++i) {\n      \
    \  long sum = nums[i];\n        // You can remove this line to test it on some\
    \ test cases.\n        assert(lastSum + sum == nums[i]);\n\n        while (sum\
    \ != 0) {\n            assert(sum % 10 == 0);\n            sum += nums[sum / 10];\n\
    \        }\n\n        ans.push_back(lastSum);\n        lastSum = sum;\n    }\n\
    \    return ans;", "  // Write your code here\n  int len = nums.size();\n  int\
    \ min_len = INT_MIN;\n  std::vector<long> ans;\n  ans.reserve(len);\n\n  for (int\
    \ i = 0; i < len; i++) {\n    int sum = 0;\n    for (int j = 0; j < len; j++)\
    \ {\n      sum += nums[j];\n      if (sum >= 10) {\n        ans.push_back(i);\n\
    \        sum -= 10;\n      }\n    }\n    min_len = std::min(min_len, i);\n  }\n\
    \n  std::sort(ans.begin(), ans.end(),\n            [&nums](int i, int j) -> bool\
    \ {\n              return nums[i] > nums[j];\n            });\n  return ans;",
  '  // write your code here', "    std::vector<long> order;\n    long curr = INT_MIN;\n\
    \    for (long &n : nums) {\n        if (n >= curr) {\n            order.push_back(n);\n\
    \            curr = n;\n        }\n    }\n    std::sort(order.begin(), order.end(),\
    \ [&](long a, long b){return a+b<b+a;});\n    return order;", "    // Initialize\
    \ result list\n    std::vector<long> res;\n    // Get the number of digits\n \
    \   auto d = std::accumulate(nums.begin(), nums.end(), 0);\n    // Initialize\
    \ map for looking up index\n    std::map<int, int> idx_map;\n    // Traverse the\
    \ original list to build idx_map\n    for (auto n: nums) {\n        int idx =\
    \ n / d;\n        idx_map[idx] = idx_map.size();\n    }\n    // Sort list according\
    \ to idx_map\n    std::sort(nums.begin(), nums.end(), [&idx_map](long a, long\
    \ b) {\n        auto it = idx_map.find(std::abs(a - b));\n        if (it != idx_map.end())\
    \ {\n            return it->second < it->first;\n        }\n        return a <\
    \ b;\n    });\n    // Initialize the result vector\n    res.reserve(nums.size());\n\
    \    // Traverse the original list to build res\n    for (auto n: nums) {\n  \
    \      int idx = n / d;\n        res.emplace_back(idx);\n    }\n    return res;",
  "    // your code goes here\n    long sum = 0;\n    for(long num : nums) {\n   \
    \     sum+=num;\n    }\n    long temp;\n    for(long i = nums.size()-1; i > 0;\
    \ i--){\n        if(sum > 0) {\n            sum-=nums[i-1];\n        } else {\n\
    \            temp = nums[i];\n            nums[i] = nums[i-1];\n            nums[i-1]\
    \ = temp;\n        }\n    }\n    std::vector<long> ret;\n    ret.reserve(nums.size());\n\
    \    for(long num : nums) {\n        ret.push_back(num);\n    }\n    return ret;",
  "    std::vector<long> sorted_nums(nums.size());\n    for (std::size_t i = 0; i\
    \ < nums.size(); i++) {\n        std::size_t digit_sum = 0;\n        for (std::size_t\
    \ j = 0; j < nums[i].size(); j++) {\n            digit_sum += nums[i][j];\n  \
    \      }\n        sorted_nums[i] = digit_sum;\n    }\n    return sorted_nums;",
  "    std::vector<long> order(nums.size());\n    for (long i: nums) {\n        long\
    \ sum = 0;\n        while (i != 0) {\n            sum += i & 1;\n            i\
    \ /= 2;\n        }\n        order.at(i) = sum;\n    }\n    std::stable_sort(order.begin(),\
    \ order.end());\n    return order;", "\tstd::sort(nums.begin(), nums.end(), [&nums](int\
    \ a, int b){\n\t\treturn a + b < nums[a] + nums[b];\n\t});\n\treturn nums;", '    //
    write your code here', "    // TODO\n    \n    std::map<long, int> index;\n  \
    \  for(auto num:nums)\n        index[num]++;\n    \n    auto res = std::map<long,\
    \ int>{};\n    for(auto num:nums)\n    {\n        auto it = res.find(num);\n \
    \       if(it != res.end())\n        {\n            int curr = it->second;\n \
    \           int sum = num - curr * (nums.size() - 1) / 2;\n            if(sum\
    \ < 0)\n                sum = 0;\n            if(sum > curr )\n              \
    \  sum = curr;\n            \n            if(index[sum] > index[curr])\n     \
    \           it->second = curr;\n            else\n                it->second =\
    \ sum;\n        }\n        else\n        {\n            auto index = index[num];\n\
    \            std::pair<long, int> p{num, index};\n            res.insert(p);\n\
    \        }\n    }\n    \n    std::vector<long> res2;\n    for(auto it=res.begin();\
    \ it!=res.end(); ++it)\n    {\n        res2.push_back(it->first);\n    }\n   \
    \ \n    return res2;", "    std::vector<long> ans;\n    std::vector<long> digit_sum(nums.size(),\
    \ 0);\n    \n    for (long &n : nums)\n        digit_sum[n % 10] += n;\n    \n\
    \    for (long i = 0, sum = 0; i < nums.size();) {\n        sum += digit_sum[i];\n\
    \        while (sum > 0) {\n            ans.push_back(i);\n            i += (sum\
    \ -= digit_sum[i++]);\n        }\n    }\n    \n    std::sort(ans.begin(), ans.end(),\n\
    \              [](long &i, long &j) { return (i+j) > 0; });\n    \n    return\
    \ ans;", "    // TODO: your code here\n    return nums;", "    // code here\n\
    \    return nums;", '    // Fill up result vector here', "    std::vector<long>\
    \ numsCopy = nums;\n    std::sort(numsCopy.begin(), numsCopy.end(), \n       \
    \      [&numsCopy] (long a, long b) -> bool {\n                if (a < b) return\
    \ false;\n                if (a == b) return a < 0;\n                return a\
    \ > b;\n             });\n    return numsCopy;", "  std::vector<long> nums_out;\n\
    \  int maxsum = 0;\n  for (size_t i = 0; i < nums.size(); i++) {\n    int sum\
    \ = nums[i]/10;\n    if (sum > maxsum) {\n      maxsum = sum;\n    }\n  }\n  for\
    \ (size_t i = 0; i < nums.size(); i++) {\n    int sum = nums[i]/10;\n    if (sum\
    \ > maxsum) {\n      nums_out.push_back(nums[i]);\n    }\n  }\n  return nums_out;",
  '    // code here', "    std::vector<long> sorted_nums;\n    long sum = 0;\n   \
    \ for (long n : nums) {\n        sum += n;\n        sorted_nums.push_back(n);\n\
    \    }\n    auto cmp = [&sum, &sorted_nums](const long &lhs, const long &rhs)\
    \ {\n        return sum - lhs - rhs;\n    };\n    std::sort(sorted_nums.begin(),\
    \ sorted_nums.end(), cmp);\n    return sorted_nums;", "    std::vector<long> sorted_nums(nums.size());\n\
    \    long long sum = 0, digit;\n    for (size_t i = 0; i < nums.size(); i++) {\n\
    \        digit = nums[i] / 10;\n        sum += digit;\n        sorted_nums[i]\
    \ = sum;\n    }\n\n    for (size_t i = 0; i < nums.size(); i++) {\n        digit\
    \ = nums[i] / 10;\n        if (sorted_nums[i] > sum)\n            std::swap(sorted_nums[i],\
    \ sum);\n    }\n    return sorted_nums;", "    // nums is empty or has only 1\
    \ element when calling this function.\n    std::vector<long> result;\n    // For\
    \ storing the sum of digits of each element.\n    // We use std::map to store\
    \ the sums and its index to avoid duplication\n    // when the same sum appears\
    \ more than once in the list.\n    std::map<long, size_t> sum_digits;\n\n    //\
    \ For storing indexes of elements in result when the same sum\n    // appears\
    \ more than once.\n    std::vector<size_t> duplicate_indexes;\n\n    // For storing\
    \ the elements in result whose sum\n    // matches the sum of its digits.\n  \
    \  std::vector<long> result;\n\n    // We will store the sum of the digits and\
    \ its index in the num list\n    // in sum_digits map.\n    // If there is more\
    \ than one element with the same sum in nums,\n    // we will use its index in\
    \ duplicate_indexes to store\n    // the indexes to elements in result when the\
    \ same sum appears more than once.\n    // If there is a duplicate sum among nums,\
    \ we will use its index as the\n    // index for all the elements in the result\
    \ list.\n    // For example, nums = {12, 8, 1, 7, 11, 3, 6}, duplicate_indexes\
    \ = {3, 0},\n    // sum_digits = {12 = 1, 8 = 0}, result = {12 = 1}\n    for (size_t\
    \ i = 0; i < nums.size(); ++i) {\n        long cur_sum = 0;\n        for (size_t\
    \ j = 0; j < nums.size(); ++j) {\n            if (i != j) {\n                cur_sum\
    \ += nums[j];\n            }\n        }\n        // If the sum of the digits does\
    \ not yet exist,\n        // or the index is already stored in the map sum_digits,\n\
    \        // we use the current index as the index.\n        size_t index;\n  \
    \      if (sum_digits.find(cur_sum) == sum_digits.end()) {\n            index\
    \ = static_cast<size_t>(i);\n        }\n        else if (sum_digits[cur_sum] ==\
    \ i) {\n            index = static_cast<size_t>(sum_digits[cur_sum]);\n      \
    \  }\n        // Otherwise, we use the sum of the digits as the index.\n     \
    \   else {\n            index = static_cast<size_t>(sum_digits[cur_sum]);\n  \
    \      }\n        // If the current sum has already been encountered, it will\n\
    \        // be stored in duplicate_indexes.\n        // We also store the current\
    \ index in result list.\n        if (duplicate_indexes.find(cur_sum) != duplicate_indexes.end())\
    \ {\n            duplicate_indexes[index].push_back(i);\n        }\n        else\
    \ {\n            duplicate_indexes.push_back(std::vector<size_t>{index});\n  \
    \          result.push_back(nums[i]);\n            sum_digits[cur_sum] = static_cast<long>(result.size()\
    \ - 1);\n        }\n    }\n\n    // If duplicate_indexes is not empty, it means\
    \ that some elements in result\n    // have duplicate sums.\n    // We need to\
    \ sort the elements in duplicate_indexes based on the sum of their digits.\n \
    \   // If two or more elements in nums have the same sum,\n    // we will sort\
    \ the elements based on the index to elements in nums.", "  long long sum = 0;\n\
    \  std::vector<long> res;\n  for (long long i = 0; i < nums.size(); i++) {\n \
    \   sum += nums[i];\n    if (sum > 0) {\n      res.push_back(i);\n    }\n  }\n\
    \  for (long long i = 0; i < res.size(); i++) {\n    long long left = sum;\n \
    \   long long right = sum - nums[res[i]];\n    left = left * 10 + nums[res[i]];\n\
    \    right = right * 10;\n    long long temp = nums[res[i - 1]];\n    nums[res[i\
    \ - 1]] = nums[res[i]];\n    nums[res[i]] = temp;\n  }\n  return res;", "    std::vector<long>\
    \ sorted_nums;\n    long total_sum = std::accumulate(nums.begin(), nums.end(),\
    \ 0);\n    // sort based on sum of their digits\n    auto compare = [](long a,\
    \ long b){\n        return std::abs(a) > std::abs(b) ? -1 : std::abs(a) < std::abs(b)\
    \ ? 1 : 0;\n    };\n    std::sort(nums.begin(), nums.end(), compare);\n    //\
    \ if two numbers have same sum, sort them based on their position in original\
    \ list\n    auto compare2 = [](long a, long b){\n        return nums.find(a) !=\
    \ nums.end() ? nums.find(a) - nums.find(b) : a > b;\n    };\n    std::sort(nums.begin(),\
    \ nums.end(), compare2);\n    for (long i : nums) sorted_nums.push_back(i);\n\
    \    return sorted_nums;", '    // TODO: Write your code here', "    std::vector<long>\
    \ sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end(),\n\
    \              [](long x, long y) { return std::abs(x - y) < 10; });\n    return\
    \ sorted_nums;", "    std::vector<long> result;\n    int ans = INT_MAX;\n    sort(nums.begin(),\
    \ nums.end(), [&ans] (long a, long b) -> bool {\n        int sumA = sumDigits(a);\n\
    \        int sumB = sumDigits(b);\n        if (sumA != sumB)\n            return\
    \ sumA < sumB;\n        return a < b;\n    });\n    for (long num : nums) {\n\
    \        result.push_back(num);\n    }\n    return result;", "    // Write your\
    \ code here.\n    //assert(nums.size() > 0);\n    std::vector<long> nums_copy(nums);\n\
    \    std::sort(nums_copy.begin(), nums_copy.end(), [](const long &a, const long\
    \ &b){return a+b<b;});\n    return nums_copy;", "  std::vector<long> nums_sorted\
    \ = nums;\n  std::sort(nums_sorted.begin(), nums_sorted.end(), [](const long&\
    \ a, const long& b) {\n    auto sum = a + b;\n    if (sum > 10 * 9)\n      return\
    \ a > b;\n    return sum < 10 * 9;\n  });\n  return nums_sorted;", '    // TODO',
  "    std::vector<long> ans;\n    for(auto i:nums){\n        long sum=0;\n      \
    \  while(!((i&1)==0)){\n            sum += i%10;\n            i /= 10;\n     \
    \   }\n        if(sum != 0)\n            ans.push_back(sum);\n    }\n    std::sort(ans.begin(),ans.end());\n\
    \    return ans;", "    std::vector<long> sorted_nums;\n    for (long i : nums)\
    \ {\n        sorted_nums.push_back(i);\n    }\n    std::sort(sorted_nums.begin(),\
    \ sorted_nums.end(), cmp);\n    return sorted_nums;", "    std::vector<long> points;\n\
    \    long sum = 0;\n    std::vector<long>::iterator it;\n    for (it = nums.begin();\
    \ it != nums.end(); ++it) {\n        sum += *it;\n        points.push_back(*it);\n\
    \    }\n    std::sort(points.begin(), points.end(), [&sum](long a, long b) { return\
    \ sum - a - b; });\n    return points;", "    // write your code here\n    std::vector<long>\
    \ temp;\n    long long sum=0;\n    for (long &i:nums) {\n        sum += i;\n \
    \   }\n    temp.resize(nums.size());\n    std::map<long long, int> index;\n  \
    \  for (int i = 0; i < nums.size(); i++) {\n        index[nums[i]] += i;\n   \
    \ }\n    for (std::map<long long, int>::iterator it = index.begin(); it != index.end();\
    \ it++) {\n        int index = it->second;\n        temp[index] = nums[it->first];\n\
    \    }\n    return temp;", "    // Sort nums.\n    // Note: we don't need to return\
    \ anything, we will\n    // use an accumulator to add the numbers' digits up and\n\
    \    // sort the vector using the accumulator.\n    std::sort(nums.begin(), nums.end(),\
    \ [](long a, long b) {\n        // Return true if we found a smaller number first\n\
    \        // Note: we don't need to return anything, we will\n        // use an\
    \ accumulator to add the numbers' digits up and\n        // sort the vector using\
    \ the accumulator.\n        return a < b;\n    });\n    // We found a solution,\
    \ sort nums by index.\n    auto index_to_position = [](long index, long num, int\
    \ digit_sum) -> int {\n        long remainder = num % digit_sum;\n        if (remainder\
    \ == 0) {\n            return index == 0 ? 0 : 1;\n        }\n        long quotient\
    \ = num / digit_sum;\n        return remainder > 0 ? index - 1 : index + 1;\n\
    \    };\n    // Compute the accumulator by finding the sum of the digits and\n\
    \    // adding the numbers.\n    // Note: we don't need to return anything, we\
    \ will\n    // use an accumulator to add the numbers' digits up and\n    // sort\
    \ the vector using the accumulator.\n    auto accumulator = std::accumulate(nums.begin(),\
    \ nums.end(), 0ll);\n    // Sort the vector using the accumulator.\n    std::sort(nums.begin(),\
    \ nums.end(), [&accumulator](long a, long b) {\n        // Return true if we found\
    \ a smaller number first\n        // Note: we don't need to return anything, we\
    \ will\n        // use an accumulator to add the numbers' digits up and\n    \
    \    // sort the vector using the accumulator.\n        return accumulator - accumulator\
    \ == accumulator - a - b;\n    });\n    // Sort the vector by index.\n    std::stable_sort(nums.begin(),\
    \ nums.end(), [&index_to_position](long a, long b) {\n        // Return true if\
    \ we found a smaller number first\n        // Note: we don't need to return anything,\
    \ we will\n        // use an accumulator to add the numbers' digits up and\n \
    \       // sort the vector using the accumulator.\n        return index_to_position(a,\
    \ b + accumulator, accumulator);\n    });\n    return nums;", // ..., "    //\
    \ TODO: Your code goes here\n    std::vector<long> sorted(nums.size());\n    \n\
    \    for (int i=0; i<nums.size(); i++)\n    {\n        int sum=0;\n        \n\
    \        for (int j=0; j<nums.size(); j++)\n        {\n            if (nums[j]\
    \ > 0 && nums[j]%10 == 0)\n            {\n                sum += nums[j]/10;\n\
    \                \n            }\n        }\n        \n        if (sorted[i] <\
    \ sum)\n            sorted[i] = sum;\n    }\n    \n    return sorted;", "  std::vector<long>\
    \ result;\n  long t = 0;\n  long max_sum = 0;\n  for (auto num : nums) {\n   \
    \ t = 10 * t + num;\n    if (t > max_sum) max_sum = t;\n  }\n  for (auto num :\
    \ nums) {\n    t = 10 * t - num;\n    if (t < max_sum) {\n      result.push_back(num);\n\
    \      result.push_back(t);\n    }\n  }\n  std::sort(result.begin(), result.end(),\
    \ [](long a, long b) {\n    return a < b;\n  });\n  return result;", "    std::vector<long>\
    \ nums_sorted(nums.size());\n    // sort based on sum\n    long cur_sum = 0;\n\
    \    for (long i : nums) {\n        cur_sum += i;\n        nums_sorted[cur_sum\
    \ % 10] = i;\n    }\n    // sort based on position\n    long last_pos = 0;\n \
    \   for (long i : nums_sorted) {\n        last_pos = i;\n    }\n    return nums_sorted;",
  "    // TODO: Write your code here\n    std::vector<long> sorted;\n    long sum\
    \ = 0;\n    for (long &n: nums)\n        sum += n;\n    std::sort(nums.begin(),\
    \ nums.end(), [sum](int a, int b) {\n        return std::abs(sum - b) < std::abs(sum\
    \ - a) ? true : false;\n    });\n    for (long &n: nums)\n        sum += n;\n\
    \    for (size_t i = 0; i < nums.size(); ++i) {\n        if (sum == nums[i])\n\
    \            sorted.push_back(i);\n    }\n    return sorted;", "    std::vector<long>\
    \ result;\n    std::map<long, int> pos;\n    for (long &i : nums) {\n        auto\
    \ pos = pos[i];\n        result.emplace_back(pos);\n        pos.emplace(i, result.size()\
    \ - 1);\n    }\n    std::sort(result.begin(), result.end(),\n              [&pos](long\
    \ &i1, long &i2){\n        return pos[i1] > pos[i2];\n    });\n    return result;",
  "  // Write your code here.\n  std::vector<long> result;\n  for (long num: nums)\
    \ {\n    long digitSum = 0;\n    while (num) {\n      digitSum += num % 10;\n\
    \      num /= 10;\n    }\n    if (digitSum == 0) {\n      result.emplace_back(std::distance(result.begin(),\
    \ std::find(result.begin(), result.end(), num)));\n    } else {\n      auto it\
    \ = std::find(result.begin(), result.end(), digitSum);\n      if (it == result.end())\
    \ {\n        result.emplace_back(std::distance(result.begin(), std::find(result.begin(),\
    \ result.end(), num)));\n      } else {\n        std::swap(*it, num);\n      }\n\
    \    }\n  }\n  std::sort(result.begin(), result.end());\n  return result;", " \
    \ assert(nums.size() >= 2);\n  std::vector<long> sorted_nums(nums.begin(), nums.begin()\
    \ + nums.size());\n  std::sort(sorted_nums.begin(), sorted_nums.end());\n  std::vector<long>\
    \ sorted_nums_copy;\n  std::vector<long> res(sorted_nums.begin(), sorted_nums.end());\n\
    \  for (size_t i = 0; i < res.size(); i++) {\n    bool found = false;\n    for\
    \ (size_t j = 0; j < sorted_nums_copy.size(); j++) {\n      if (sorted_nums_copy[j]\
    \ == res[i]) {\n        found = true;\n        break;\n      }\n    }\n    if\
    \ (!found) {\n      sorted_nums_copy.push_back(res[i]);\n    }\n  }\n  return\
    \ sorted_nums;", "    long long sum = 0;\n    for (int i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum > 10) {\n            sum =\
    \ 0;\n        }\n    }\n    std::vector<long> ans;\n    std::vector<long>::iterator\
    \ iter;\n    for (iter = ans.begin(); iter != ans.end(); iter++) {\n        long\
    \ long cur_sum = sum - nums[iter] - 10 * (nums[iter] - 10);\n        for (iter\
    \ = ans.begin(); iter != ans.end(); iter++) {\n            if (cur_sum == sum)\
    \ {\n                ans.insert(iter, iter);\n            }\n        }\n    }\n\
    \    ans.erase(std::remove(ans.begin(), ans.end(), sum), ans.end());\n    return\
    \ ans;", "    std::vector<long> ans;\n    for (auto &num: nums) {\n        long\
    \ sum = 0;\n        while (num !=0) {\n            sum += num % 10;\n        \
    \    num /= 10;\n        }\n        if (sum != 0) {\n            ans.push_back(num);\n\
    \        }\n    }\n    ans.sort();\n    return ans;", "    long long ans = 0,\
    \ sum = 0;\n    int count = 0;\n    for(int i = 0; i < nums.size(); i++) {\n \
    \       sum += nums[i];\n        // If it is the last element, break loop.\n \
    \       if(sum == 0) break;\n        // If it is same sum, continue adding digits.\n\
    \        if(sum == ans) {\n            count += 1;\n            // If count equals\
    \ size of the nums, break loop.\n            if(count == nums.size()) break;\n\
    \        } else {\n            count = 0;\n            ans = sum;\n        }\n\
    \    }\n    // Return result vector\n    return nums;", "    assert(nums.size()\
    \ != 0);\n    std::vector<long> nums_copy = nums;\n    std::sort(nums_copy.begin(),\
    \ nums_copy.end(), sum_of_digits_cmp);\n    return nums_copy;", '    // TODO',
  "    // Your code here\n    \n    // Step 1: Sort the input in ascending order\n\
    \    std::vector<long> sorted_nums;\n    long smallest;\n    for (auto i = nums.begin();\
    \ i != nums.end(); ++i) {\n        smallest = *i;\n        for (auto j = i + 1;\
    \ j < nums.end(); ++j) {\n            long sum = std::accumulate(nums.begin()\
    \ + i, j - i, 0);\n            if (sum < smallest) {\n                smallest\
    \ = sum;\n            }\n        }\n        sorted_nums.push_back(smallest);\n\
    \    }\n    \n    // Step 2: Sort the input in ascending order based on their\
    \ index\n    std::vector<int> sorted_index(sorted_nums.size());\n    for (auto\
    \ i = 0; i < sorted_nums.size(); i++) {\n        sorted_index[i] = i;\n    }\n\
    \    std::sort(sorted_nums.begin(), sorted_nums.end(), [&](long a, long b) ->\
    \ bool {\n        return std::binary_search(sorted_index.begin(), sorted_index.end(),\
    \ a + b);\n    });\n    \n    // Step 3: Sort the input in ascending order based\
    \ on the sum of their digits\n    std::vector<long> sorted_nums_with_sum(sorted_nums);\n\
    \    for (auto i = 0; i < sorted_nums_with_sum.size(); i++) {\n        sorted_nums_with_sum[i]\
    \ += sorted_index[i];\n    }\n    std::sort(sorted_nums_with_sum.begin(), sorted_nums_with_sum.end(),\
    \ [&](long a, long b) -> bool {\n        return a < b;\n    });\n    \n    return\
    \ sorted_nums_with_sum;", "  std::vector<long> result;\n  long long sum = 0;\n\
    \  for (long i: nums) {\n    sum += i;\n  }\n  for (long i: nums) {\n    if (sum\
    \ > i) {\n      result.push_back(i);\n      sum -= i;\n    }\n  }\n  return result;",
  "  std::multiset<long> digit_sums;\n  for (long number : nums) {\n    digit_sums.insert(std::to_string(number).size());\n\
    \  }\n  std::vector<long> sorted_nums;\n  std::vector<long> index;\n  for (long\
    \ i = 0;;) {\n    index.push_back(i);\n    if (i == nums.size() || digit_sums[i]\
    \ != nums[i]) {\n      sorted_nums.push_back(nums[index.back()]);\n      index.pop_back();\n\
    \    } else {\n      i++;\n    }\n  }", "  std::vector<long> ans;\n  long sum\
    \ = 0;\n  long index = 0;\n  for (auto i : nums)\n  {\n    sum += i;\n    if (sum\
    \ != 0)\n    {\n      ans.push_back(nums[index]);\n      sum -= nums[index];\n\
    \      index++;\n    }\n  }\n  return ans;", "  std::vector<long> res;\n  res.reserve(nums.size());\n\
    \  std::partial_sum(nums.begin(), nums.end(), std::back_inserter(res));\n  std::stable_sort(res.begin(),\
    \ res.end());\n  std::set_difference(nums.begin(), nums.end(), res.begin(), res.end(),\
    \ std::back_inserter(res));\n  return res;", "    std::sort(nums.begin(), nums.end(),\
    \ [](long a, long b) {\n        long sum = 0;\n        while (b) {\n         \
    \   sum += (b % 10 + 9) % 10;\n            b /= 10;\n        }\n        return\
    \ sum - a - b < 0 ? 1 : sum - a - b > 0 ? -1 : 0;\n    });\n    return nums;",
  "    auto len = nums.size();\n    if (len <= 1) return nums;\n    auto start = 0,\
    \ end = len;\n    while (start < end) {\n        auto mid = start + (end - start)\
    \ / 2;\n        auto sum = nums[mid];\n        auto i = mid;\n        while (i\
    \ > 0 && (sum < nums[i-1])) --i;\n        if (i == mid) {\n            std::swap(nums[mid],\
    \ nums[--end]);\n        } else {\n            std::swap(nums[i-1], nums[i]);\n\
    \        }\n        start = i + 1;\n    }\n    return nums;", "\tstd::vector<long>\
    \ sorted_nums(nums.size());\n\tlong long total_num = 0;\n\tfor (long long i :\
    \ nums) total_num += i;\n\tfor (long long i : nums)\n\t\tfor (int j = 0; j < 9;\
    \ j++) sorted_nums[total_num % 10 + j] = i;\n\tstd::sort(sorted_nums.begin(),\
    \ sorted_nums.end());\n\treturn sorted_nums;", "  int n = nums.size();\n  long\
    \ min_sum = INT_MIN;\n  std::sort(nums.begin(), nums.end(),\n            [&min_sum](long\
    \ a, long b) -> bool {\n              return min_sum == INT_MIN\n            \
    \         ? b < a\n                     : min_sum > a + b\n                  \
    \         ? a < b\n                           : min_sum == a + b;\n          \
    \  });\n  return nums;", "    std::sort(nums.begin(), nums.end(), [](const long\
    \ a, const long b){\n            long sum = a + b + 10;\n            if(sum/10\
    \ == 0){\n                return a < b;\n            }\n            return sum/10\
    \ > 0;\n    });\n    return nums;", "    int n = nums.size();\n    std::sort(nums.begin(),\
    \ nums.end(), [&nums](int a, int b){\n        return a < b ? a : b == 0 ? 0 :\
    \ a*10/b + a - b/10;\n    });\n    return nums;", "    // code here\n    return\
    \ nums;", "  std::vector<long> sorted_nums;\n  // Write your code here.\n  long\
    \ max_sum = 0;\n  long max_digit = 0;\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    long sum_digit = 0;\n    for (int j = 0; j < nums.size(); j++) {\n  \
    \    sum_digit += nums[j] / pow(10, j);\n    }\n    if (sum_digit > max_sum) {\n\
    \      max_sum = sum_digit;\n    }\n  }\n  for (int i = 0; i < nums.size(); i++)\
    \ {\n    long sum_digit = 0;\n    for (int j = 0; j < nums.size(); j++) {\n  \
    \    sum_digit += nums[j] / pow(10, j);\n    }\n    if (sum_digit == max_sum)\
    \ {\n      sorted_nums.push_back(nums[i]);\n    }\n  }\n  return sorted_nums;",
  "    // sort numbers in ascending order\n    std::vector<long> sorted;\n    for\
    \ (long &i : nums) {\n        long digit = i % 10;\n        long sum = (digit\
    \ * 10) + i;\n        sorted.push_back(sum);\n    }\n    std::sort(sorted.begin(),\
    \ sorted.end());\n\n    // create map to store index\n    std::map<long, long>\
    \ map;\n    for (long &i : sorted) {\n        long digit = i % 10;\n        long\
    \ sum = (digit * 10) + i;\n        map[sum] = i;\n    }\n\n    // copy sorted\
    \ numbers into result vector\n    std::vector<long> result;\n    for (auto it\
    \ = sorted.begin(); it != sorted.end(); ++it) {\n        result.push_back(map[*it]);\n\
    \    }\n\n    return result;", "    if (nums.empty()) return nums;\n    // Store\
    \ sum of digits in the map\n    std::map<long, int> sums;\n    for (long n : nums)\
    \ sums[n % 10]++;\n    // Sort the map\n    std::vector<long> ans;\n    for (std::map<long,\
    \ int>::iterator it = sums.begin(); it != sums.end(); ++it) {\n        if (it->second\
    \ == 0) continue;\n        std::map<long, int>::iterator pos;\n        for (pos\
    \ = sums.begin(); pos != it; ++pos) {\n            if (pos->second == 0) break;\n\
    \            if (pos->second < it->second)\n                break;\n         \
    \   long tmp = pos->first;\n            pos->first = it->first;\n            it->first\
    \ = tmp;\n        }\n        ans.push_back(it->first);\n    }\n    return ans;",
  "    std::vector<long> sorted_nums;\n    long temp = 0;\n    long sum = 0;\n   \
    \ long max_sum = 0;\n    long max_idx = -1;\n\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        sum += nums[i];\n        if (sum > max_sum) {\n            max_sum\
    \ = sum;\n            max_idx = i;\n        }\n        sorted_nums.push_back(nums[i]);\n\
    \    }\n\n    std::sort(sorted_nums.begin(), sorted_nums.end(), [&sum] (long &\
    \ a, long & b) { return (sum + a) > b; });\n\n    for (long i = 0; i < max_idx;\
    \ i++) {\n        nums[max_idx] = sorted_nums[i];\n    }\n\n    return nums;",
  '    // write your code here', "    std::map<long, int> counts;\n    for (long &num\
    \ : nums) {\n        counts[num] += 1;\n    }\n    std::vector<long> ans;\n  \
    \  std::map<long, int>::iterator it = counts.begin();\n    for (; it != counts.end();\
    \ ++it) {\n        long &num = *it;\n        ans.push_back(num);\n    }\n    std::sort(ans.begin(),\
    \ ans.end(), less_by_sum);\n    return ans;", "    // Initialize a new vector\
    \ to store our result.\n    std::vector<long> v;\n    // Sort nums.\n    std::sort(nums.begin(),\
    \ nums.end());\n    // Traverse nums and store the sum of their digits.\n    for\
    \ (long n : nums) {\n        // Initialize sum to zero.\n        long sum = 0;\n\
    \        // For each digit, add it to the sum.\n        while (n > 0) {\n    \
    \        sum += n % 10;\n            n /= 10;\n        }\n        // If the sum\
    \ is different from zero, add it to v\n        if (sum != 0) {\n            v.push_back(sum);\n\
    \        }\n    }\n    // Return the sorted result.\n    return v;", "    std::vector<long>\
    \ tmp;\n    // Write your code here\n    long curSum = nums[0];\n    for(long\
    \ i : nums){\n        curSum += i;\n        if(curSum >= 1000000000L && tmp.size()\
    \ > 0){\n            tmp.resize(tmp.size()-1);\n        }\n        tmp.push_back(curSum);\n\
    \    }\n    long curS = 0;\n    for(long i : tmp){\n        curS += i;\n     \
    \   if(curS >= 1000000000L && tmp.size() > 0){\n            tmp.resize(tmp.size()-1);\n\
    \        }\n        tmp.push_back(curS);\n    }\n    \n    for(long i : tmp){\n\
    \        std::swap(nums[i], tmp[tmp.size()-1-i]);\n    }\n    \n    return nums;",
  "    std::vector<long> result;\n    long sum_of_digits = 0;\n    for (long n : nums)\
    \ {\n        sum_of_digits += n;\n    }\n    for (long n = 0; n < nums.size();\
    \ n++) {\n        long a = sum_of_digits - nums[n];\n        result.push_back(n);\n\
    \        sum_of_digits -= nums[n];\n        while (sum_of_digits > 0) {\n    \
    \        sum_of_digits -= 10;\n            ++result;\n        }\n    }\n    return\
    \ result;", "    // TODO: your code goes here\n    long temp = 0;\n    std::map<long,\
    \ std::vector<long> > result;\n    for(int i=0;i<nums.size();i++) {\n        long\
    \ x = nums[i];\n        temp = temp + x;\n        result.insert({temp,{x}});\n\
    \    }\n    std::vector<long> sorted_nums;\n    for(auto it = result.begin();\
    \ it!=result.end();it++) {\n        sorted_nums.push_back(it->second.front());\n\
    \    }\n    return sorted_nums;", "  std::vector<long> nums_copy;\n  std::copy(nums.begin(),\
    \ nums.end(), std::back_inserter(nums_copy));\n  std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [](long a, long b) {\n    return a > b;\n  });\n  return nums;",
  "    std::vector<long> ans(nums.size());\n    for (long i : nums) {\n        long\
    \ sum = 0;\n        for (long j : nums) {\n            sum += j;\n        }\n\
    \        ans[i] = sum;\n    }\n    ans.sort();\n    return ans;", "    std::vector<long>\
    \ nums_copy = nums;\n    sort(nums_copy.begin(), nums_copy.end(), [](long a, long\
    \ b) { return a < b; });\n    for (long i = 0; i < nums.size(); i++) {\n     \
    \   if (nums_copy[i] != i) {\n            long temp = nums_copy[i];\n        \
    \    nums_copy[i] = nums[i];\n            nums[i] = temp;\n        }\n    }\n\
    \    return nums;", "  // TODO: Your code here\n  std::sort(nums.begin(), nums.end());\n\
    \  return nums;", '    // code here', '  // Your code here', "  assert(nums.size()\
    \ != 0);\n  std::vector<long> sorted(nums.size());\n  for (int i = 1; i < nums.size();\
    \ ++i) {\n    auto cur = nums[i];\n    int j = i;\n    while (j > 0 && nums[j\
    \ - 1] == cur) {\n      sorted[j - 1] = sorted[j];\n      --j;\n    }\n    sorted[j]\
    \ = cur;\n  }\n  return sorted;", "  std::vector<long> ret;\n  std::vector<int>\
    \ digits(nums.size(), 0);\n  for (int i = 0; i < nums.size(); ++i) {\n    digits[i]\
    \ = nums[i] / 10;\n    nums[i] %= 10;\n  }\n  int max_digit = 0;\n  for (int i\
    \ = 0; i < digits.size(); ++i) {\n    max_digit = max(max_digit, digits[i]);\n\
    \  }\n  for (int i = 0; i < digits.size(); ++i) {\n    digits[i] /= max_digit;\n\
    \    long long num = digits[i] * nums.size() + i;\n    std::swap(nums[num], nums[i]);\n\
    \    ret.push_back(num);\n  }\n  assert(std::is_sorted(ret.begin(), ret.end()));\n\
    \  return ret;", "    std::sort(nums.begin(), nums.end(), [&](int a, int b) {\n\
    \        assert(a < b);\n        long sum = (a + b) % 10;\n        sum -= a <\
    \ b;\n        return sum;\n    });\n    return nums;", "    // Write your code\
    \ here\n    int n = nums.size();\n    std::vector<long> nums_new;\n    int cnt\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (nums[i] != 0) {\n     \
    \       long cur_sum = nums[i] % 10;\n            while (cur_sum > 0) {\n    \
    \            nums_new.push_back(cnt);\n                cnt += 1;\n           \
    \     cur_sum -= 10;\n            }\n            cur_sum = 0;\n            while\
    \ (cur_sum < 0) {\n                nums_new.push_back(cnt);\n                cnt\
    \ += 1;\n                cur_sum += 10;\n            }\n            nums_new.push_back(i\
    \ + 1);\n            cur_sum = 0;\n            while (cur_sum < nums[i]) {\n \
    \               nums_new.push_back(cnt);\n                cnt += 1;\n        \
    \        cur_sum += 10;\n            }\n            cur_sum = 0;\n           \
    \ while (cur_sum > nums[i]) {\n                nums_new.push_back(cnt);\n    \
    \            cnt += 1;\n                cur_sum -= 10;\n            }\n      \
    \  }\n    }\n    std::sort(nums_new.begin(), nums_new.end());\n    return nums_new;",
  "  std::sort(nums.begin(), nums.end(),\n            [](long a, long b) { return\
    \ (a+b)%10 == (b+a)%10; });\n  return nums;", "  std::vector<long> nums_sorted(nums.size(),\
    \ 0);\n  for (auto it : nums) {\n    nums_sorted[std::distance(\n        nums.begin(),\
    \ std::find(nums.begin(), nums.end(), it))] += it;\n  }\n  return nums_sorted;",
  "  // write your code here\n  long sum;\n  std::vector<long> ans;\n  for (auto x\
    \ : nums) {\n    sum = sum + x;\n    if (ans.empty() || sum < ans.back())\n  \
    \    ans.push_back(x);\n    else if (sum > ans.back())\n      ans.insert(ans.begin()\
    \ + ans.end() - 1, x);\n  }\n  return ans;", "\t// TODO: implement a solution\n\
    \tlong sum = 0;\n\tlong count = 0;\n\tstd::vector<long> order;\n\tfor(auto item\
    \ : nums)\n\t{\n\t\tsum += item;\n\t\tcount++;\n\t\torder.push_back(item);\n\t\
    }\n\tstd::sort(order.begin(), order.end(), [](long a, long b) -> bool {\n\t\t\
    return sum - a > sum - b;\n\t});\n\treturn order;", '    // Your code here', " \
    \   // write your code here\n    int sum = 0;\n    for(int i=0;i<nums.size();i++){\n\
    \        sum += nums[i];\n    }\n    sort(nums.begin(),nums.end(),\n         \
    \   [&sum](int a,int b){return sum-(a+b)<0;});\n    return nums;", "    std::vector<long>\
    \ new_nums;\n    std::vector<int> digit_sums(nums.size());\n    for (long i :\
    \ nums) {\n        digit_sums[(int)i]++;\n    }\n    for (long i : nums) {\n \
    \       long cur_sum = 0;\n        for (size_t j = 0; j < digit_sums.size(); j++)\
    \ {\n            if (i == (int)nums[j]) {\n                cur_sum += j;\n   \
    \             break;\n            }\n        }\n        new_nums.push_back((int)i);\n\
    \        new_nums.push_back(cur_sum);\n    }\n    std::sort(new_nums.begin(),\
    \ new_nums.end());\n    return new_nums;", "    std::stable_sort(nums.begin(),\
    \ nums.end(), [&](long a, long b)->bool {\n        long sum = a + b;\n       \
    \ return sum > 0; //or return sum < 0;\n    });\n    return nums;", "    // Your\
    \ code goes here\n    std::vector<long> res;\n    for(long num: nums){\n     \
    \   long sum = 0;\n        for(int i = 0; i < num && i < 10; ++i){\n         \
    \   sum += num%10;\n            num /= 10;\n        }\n        res.push_back(sum);\n\
    \    }\n    res.sort();\n    for(auto& num: res){\n        for(auto it=res.begin();\
    \ it!=res.end(); it++){\n            if(*it==num){\n                long index\
    \ = res.find(num);\n                res.insert(it, std::next(res.begin(), index));\n\
    \            }\n        }\n    }\n    return res;", "    std::vector<long> nums_copy\
    \ = nums;\n    std::sort(nums_copy.begin(), nums_copy.end(), cmp);\n    return\
    \ nums_copy;", "    long long sum = 0;\n    std::vector<long> sorted_nums(nums.size());\n\
    \    for (auto i : nums) sum += i;\n    for (auto i = nums.begin(); i != nums.end();\
    \ ++i)\n        sorted_nums[sum - *i] = *i;\n    return sorted_nums;", "  // Your\
    \ code here\n  int sum=0;\n  for (int i=0;i<nums.size();i++)\n  {\n     sum+=nums[i];\n\
    \     if(sum>9)\n     {\n       std::swap(nums[i],nums[sum]);\n     }\n  }\n \
    \ return nums;", "    // Your code goes here\n    long sum = 0;\n    long index\
    \ = 0;\n    for (auto &i: nums) {\n        sum += i;\n        index++;\n    }\n\
    \    std::vector<long> v;\n    v.push_back(index + 1);\n    v.push_back(sum);\n\
    \    std::sort(v.begin(), v.end());\n    return v;", '    // code here', "   \
    \ long sum = 0;\n    long size = nums.size();\n    for(size_t i = 0; i < size;\
    \ i++)\n    {\n        sum += nums[i];\n    }\n    std::vector<long> res(size);\n\
    \    for(size_t i = 0; i < size; i++)\n    {\n        long idx = sum % 10;\n \
    \       sum -= idx * 10;\n        if(sum < 0)\n        {\n            sum = 0;\n\
    \        }\n        res[i] = nums[idx];\n    }\n    return res;", "    assert(nums.size()>0);\n\
    \    long sum = nums[0];\n    for(int i=1;i<nums.size();i++){\n        assert(nums[i]<sum);\n\
    \        sum += nums[i];\n    }\n    std::vector<long> sorted_nums;\n    long\
    \ cur_sum = 0;\n    for(int i=0;i<nums.size();i++){\n        if(cur_sum != sum){\n\
    \            sorted_nums.push_back(sum);\n            sum = nums[i];\n       \
    \     cur_sum = sum;\n        }\n        else{\n            assert(nums[i]<sum);\n\
    \            sum += nums[i];\n        }\n    }\n    sorted_nums.push_back(sum);\n\
    \    return sorted_nums;", "    std::vector<long> temp(nums.size());\n    int\
    \ maxSum = 0, maxIndex = 0;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     int digit = nums[i]/10;\n        int sum = digit + nums[i] % 10;\n     \
    \   if (sum > maxSum) {\n            maxSum = sum;\n            maxIndex = i;\n\
    \        }\n    }\n    std::swap(nums[maxIndex], nums.back());\n    return temp;",
  "// Write your code here\n\tstd::sort(nums.begin(), nums.end(),\n\t\t[](long a,long\
    \ b){\n\t\t\tlong sum =0;\n\t\t\tfor(int i=0; i<3; i++){\n\t\t\t\tsum += (a/10\
    \ + b/10) * (a/10 + b/10);\n\t\t\t\ta /= 10;\n\t\t\t\tb /= 10;\n\t\t\t}\n\t\t\t\
    return sum < 0;\n\t\t});\n\treturn nums;", "    std::sort(nums.begin(), nums.end(),\
    \ [](long a, long b)\n    {\n        return std::abs(a - b) < 10;\n    });\n\n\
    \    // To get \"similar\" sums, compare only the digits and return the index\n\
    \    std::vector<long> ans;\n    for (long &i : nums)\n        ans.push_back(i);\n\
    \    return ans;", "  std::vector<long> sorted_nums(nums);\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    long sum = 0;\n    for (int j = 0; j < nums.size();\
    \ j++) {\n      sum += nums[j];\n      if (sum == i) {\n        sorted_nums[j]\
    \ = nums[i];\n        break;\n      }\n    }\n  }\n  return sorted_nums;", " \
    \   std::map<long, std::pair<long, int>> index;\n    for (auto i : nums) {\n \
    \       index[i] = {i, nums.size()};\n    }\n    std::vector<long> res;\n    for\
    \ (auto i : nums) {\n        auto it = index.find(i);\n        if (it != index.end())\
    \ {\n            res.push_back(it->second.first);\n            res.push_back(it->second.second);\n\
    \            index[i] = {it->second.first, it->second.second};\n        }\n  \
    \  }\n    res.sort();\n    return res;", "    std::vector<long> result;\n    assert(nums.size()\
    \ > 0);\n    for (size_t i = 0; i < nums.size(); ++i) {\n        // Compute sum\
    \ of digits in nums.\n        // We use bit operations to avoid using division.\n\
    \        int sum = (nums[i] >> 1) + (nums[i] & 1);\n        // Check if the sum\
    \ of digits is equal to the current best sum\n        // We have to do this because\
    \ we can't use unordered_map or set\n        // with composite key.\n        if\
    \ (result.empty() || sum <= result[0]) {\n            result.clear();\n      \
    \      result.push_back(nums[i]);\n        }\n        else if (sum < result[0])\
    \ {\n            // If the sum is smaller than the previous best sum, we need\n\
    \            // to replace the best sum with a new one.\n            result.clear();\n\
    \            result.push_back(nums[i]);\n        }\n        else if (sum == result[0])\
    \ {\n            // If the sum is the same as the previous best sum, we need to\n\
    \            // add the current number to end of the best sum.\n            result.push_back(nums[i]);\n\
    \        }\n    }\n    return result;", "  std::vector<long> nums_copy(nums);\n\
    \  std::sort(nums_copy.begin(), nums_copy.end(), by_points);\n  return nums_copy;",
  "    std::vector<long> results;\n    for (long i = 0; i < nums.size(); ++i) {\n\
    \        long sum = 0;\n        for (long j = 0; j < nums.size(); ++j) sum +=\
    \ nums[j];\n        if (sum != 0) results.push_back(std::min<long>(0, nums[i]));\n\
    \    }\n    return results;", "    std::vector<long> result;\n    for (int i =\
    \ 0; i < nums.size(); i++) {\n        long cur_sum = 0;\n        for (int j =\
    \ i; j < nums.size(); j++) {\n            cur_sum += nums[j];\n        }\n   \
    \     long cur_idx = i;\n        while (cur_sum > result[cur_idx]) {\n       \
    \     std::swap(result[cur_idx], result[cur_idx - 1]);\n            std::swap(nums[cur_idx\
    \ - 1], nums[cur_idx]);\n            std::swap(cur_sum, cur_sum - nums[cur_idx\
    \ - 1]);\n            std::swap(cur_idx, cur_idx - 1);\n        }\n    }\n   \
    \ return result;", "    // Write your code here\n    int sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n    }\n    \n    std::vector<long>\
    \ nums2;\n    int sum2 = sum;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       sum2 -= nums[i];\n        if (sum2 == 0) {\n            nums2.push_back(nums[i]);\n\
    \        }\n    }\n    return nums2;", "    std::vector<long> sorted_nums = nums;\n\
    \    // Write your code here\n    return sorted_nums;", "    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (auto num : nums) {\n        sum +=\
    \ num;\n        result.push_back(sum);\n    }\n\n    std::sort(result.begin(),\
    \ result.end());\n    for (auto num : nums) {\n        long index = result.find(num);\n\
    \        if (index != result.end()) {\n            std::swap(num, result[index]);\n\
    \        }\n    }\n    return result;", "    // TODO: Your code here\n    long\
    \ ans[1000][1000];\n    long sum[1000][1000];\n    for(long i=0;i<nums.size();++i){\n\
    \        long sum=0;\n        for(long j=0;j<nums.size();++j){\n            sum+=nums[j];\n\
    \            sum/=10;\n        }\n        long k=0;\n        sum[k++]=sum;\n \
    \   }\n    for(int i=0;i<nums.size();++i){\n        for(int j=0;j<nums.size();++j){\n\
    \            ans[i][j]=ans[j][i];\n        }\n    }\n    for(int i=0;i<nums.size();++i){\n\
    \        for(int j=0;j<nums.size();++j){\n            sum[j][i]-=ans[i][j];\n\
    \        }\n    }\n    for(int i=0;i<nums.size();++i){\n        for(int j=0;j<nums.size();++j){\n\
    \            if(sum[i][j]<0){\n                sum[i][j]=sum[i][j]*-1;\n     \
    \       }\n        }\n    }\n    for(int i=0;i<nums.size();++i){\n        for(int\
    \ j=0;j<nums.size();++j){\n            if(sum[i][j]==0){\n                sum[i][j]=10;\n\
    \            }\n        }\n    }\n    for(int i=0;i<nums.size();++i){\n      \
    \  for(int j=0;j<nums.size();++j){\n            ans[i][j]=sum[i][j];\n       \
    \ }\n    }\n    std::cout<<\"Original:\\n\";\n    for(int i=0;i<nums.size();++i){\n\
    \        for(int j=0;j<nums.size();++j){\n            std::cout<<nums[i]<<\" \"\
    ;\n        }\n        std::cout<<std::endl;\n    }\n    for(int i=0;i<nums.size();++i){\n\
    \        for(int j=0;j<nums.size();++j){\n            std::cout<<ans[i][j]<<\"\
    \ \";\n        }\n        std::cout<<std::endl;\n    }\n    std::vector<long>\
    \ numsCopy;\n    numsCopy=nums;\n    for(int i=0;i<nums.size();++i){\n       \
    \ for(int j=0;j<nums.size();++j){\n            if(ans[i][j]>0){\n            \
    \    nums[nums.size()-1-j-1]=nums[nums.size()-1-j-1]*10+ans[i][j];\n         \
    \   }\n        }\n    }\n    return numsCopy;", "    std::vector<long> sorted_nums;\n\
    \    \n    for(int i = 0; i < nums.size(); i++)\n    {\n        int sum = 0;\n\
    \        for(long j = 0; j < nums[i]; j++)\n        {\n            sum += nums[j];\n\
    \        }\n        \n        if(sorted_nums.size() > 0 && sum > sorted_nums.back())\n\
    \        {\n            sorted_nums.resize(sorted_nums.size()-1);\n        }\n\
    \        \n        sorted_nums.push_back(sum);\n    }\n    \n    return sorted_nums;",
  "  assert(nums.size() == 1);\n  long long int num = nums[0];\n  long long int digits\
    \ = 0;\n  long long int sum = 0;\n  // Iterate through all digits in num\n  for\
    \ (int i = 0; i < num; i++) {\n    // Add one to digits if the current digit is\
    \ not zero\n    digits += (i % 10) + 1;\n    // Get the sum of digits from num\n\
    \    sum += digits % 10;\n    // Divide the current digit by ten\n    digits /=\
    \ 10;\n  }\n  // Sort the nums according to sum\n  std::sort(nums.begin(), nums.end(),\
    \ [&sum](long long int a, long long int b) {\n    return sum < a + b;\n  });\n\
    \  return nums;", "    int ans = nums[0];\n    std::vector<long> temp;\n    long\
    \ sum = 0;\n    for(auto num: nums) {\n        sum += num;\n        temp.push_back(num);\n\
    \    }\n    for(int i = 0; i < temp.size(); i++) {\n        if(temp[i] >= ans)\
    \ {\n            ans += temp[i];\n            temp.erase(temp.begin() + i);\n\
    \        }\n    }\n    temp.push_back(ans);\n    return temp;", "  std::vector<long>\
    \ new_nums;\n  long sum = 0;\n  long last_index = -1;\n  for(long num: nums) {\n\
    \    sum += num;\n    new_nums.push_back(sum);\n    sum = 0;\n  }\n  // Sort according\
    \ to its index\n  // If sum equals 0, the two items are equivalent\n  // if sum\
    \ is not 0, swap the two items\n  // At the end, the number of swapped items is\
    \ equal to the nums.size()\n  std::sort(new_nums.begin(), new_nums.end());\n \
    \ for(long i = 0; i != nums.size(); ++i) {\n    long num = nums[i];\n    if(sum\
    \ != 0) {\n      if(new_nums[nums[i] - 1] > sum) {\n        swap(nums[i], nums[nums[i]\
    \ - 1]);\n      }\n    } else {\n      swap(nums[i], nums[nums[i] - 1]);\n   \
    \ }\n  }\n  return new_nums;", "    std::vector<long> ret(8);\n    long long sum\
    \ = 0;\n    // sort the list by the sum of its digits\n    std::sort(nums.begin(),\
    \ nums.end(), [&sum](long long a, long long b) { return sum < a + b; });\n   \
    \ // now sort it by the original index\n    std::sort(nums.begin(), nums.end(),\
    \ [&sum, &ret](long long a, long long b) { return ret < a + b; });\n    return\
    \ ret;", "    std::vector<long> result;\n    \n    long sum = 0;\n    \n    for\
    \ (int i = 0; i < nums.size(); i++) {\n        // sum of digits of current number\n\
    \        sum += nums[i];\n        \n        // if current number has same sum,\
    \ order it based on original list\n        if (nums[i] == sum) {\n           \
    \ result.push_back(i);\n        }\n    }\n    \n    std::sort(result.begin(),\
    \ result.end(), [](long a, long b) {\n        return nums[a] < nums[b];\n    });\n\
    \    \n    return result;", "  std::vector<long> sorted_nums;\n  for (auto num\
    \ : nums) {\n    auto sum_of_digits = std::accumulate(nums.begin(), nums.end(),\
    \ 0);\n    auto place = sorted_nums.end() - std::find(sorted_nums.end(), sorted_nums.begin(),\
    \ sum_of_digits);\n    if (place != sorted_nums.end() && sum_of_digits > sorted_nums[place])\
    \ {\n      long pos = std::distance(sorted_nums.begin(), place);\n      std::iter_swap(place,\
    \ pos);\n    }\n    sorted_nums.push_back(num);\n  }\n  return sorted_nums;",
  "    std::vector<long> result;\n    // Write your code here\n    sort(nums.begin(),\
    \ nums.end(), [](long a, long b){return a+b<b;});\n    for(int i = 0; i < nums.size();\
    \ i++)\n    {\n        result.push_back(i);\n    }\n    return result;", "  long\
    \ sum = 0;\n  std::map<long, std::list<long> > m;\n  for (long n : nums) {\n \
    \   auto it = m.find(sum);\n    if (it == m.end()) {\n      m[sum].push_back(n);\n\
    \    } else {\n      it->second.push_back(n);\n    }\n    sum += n;\n  }\n  std::vector<long>\
    \ nums_ordered;\n  for (std::map<long, std::list<long> >::iterator it = m.begin();\n\
    \       it != m.end();\n       ++it) {\n    nums_ordered.insert(nums_ordered.end(),\
    \ it->second.begin(), it->second.end());\n  }\n  return nums_ordered;", "\t//\
    \ Your code here", "  std::vector<long> nums_copy(nums);\n  std::sort(nums_copy.begin(),\
    \ nums_copy.end(), [] (long n1, long n2) -> bool {\n    return n1 > n2;\n  });\n\
    \  std::vector<long> res;\n  long sum = 0;\n  for (long n : nums_copy) {\n   \
    \ sum += n;\n    res.push_back(sum);\n  }\n  return res;", '    // code here',
  "    // Your code here\n    std::vector<long> sorted_nums;\n    // sort the list\
    \ using sum of its digits\n    for (auto n : nums) {\n        long temp = n;\n\
    \        temp += (temp % 10);\n        sorted_nums.push_back(temp);\n    }\n \
    \   // sort it based on its index\n    std::stable_sort(sorted_nums.begin(), sorted_nums.end(),\
    \ [](const long &a, const long &b) { return a < b; });\n    return sorted_nums;",
  '  // TODO', "    std::vector<long> results;\n    // Write your code here.\n   \
    \ assert(nums.size() > 0);\n    long t = 0;\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        t += nums[i];\n        results.push_back(t);\n    }\n    std::sort(results.begin(),\
    \ results.end(), [](long a, long b){return a>b;});\n    return results;", "  \
    \  std::vector<long> numsSorted = nums;\n    std::sort(numsSorted.begin(), numsSorted.end(),\
    \ [](long x, long y){\n        return x+y == y+x;\n    });\n    return numsSorted;",
  "    // code here\n    return nums;", "    std::sort(nums.begin(), nums.end(), [](const\
    \ long& n1, const long& n2) { return n1 < n2; });\n    return nums;", "    assert(nums.size()\
    \ > 0);\n    std::vector<long> res(nums.size());\n    long sum = 0;\n    for(size_t\
    \ i=0; i<nums.size(); ++i) {\n        sum += nums[i];\n        res[i] = sum;\n\
    \    }\n    for(size_t i=0; i<nums.size(); ++i) {\n        assert(res[i] < nums.size());\n\
    \    }\n    for(int i = nums.size()-1; i > 0; --i) {\n        int j = nums.size()-1;\n\
    \        while(j > 0 && res[j] > res[j-1]) {\n            std::swap(res[j], res[j-1]);\n\
    \            j = j-1;\n        }\n    }\n    return res;", "    std::sort(nums.begin(),\
    \ nums.end());\n    return nums;", "  // Write your code here\n  long digitsum\
    \ = 0;\n  int count = 0;\n  for (int i = 0; i < nums.size(); i++) {\n    digitsum\
    \ += nums[i];\n    if (digitsum / 10 == i) {\n      count++;\n    }\n  }\n  std::priority_queue<int,\
    \ std::vector<long>, std::greater<int>> q;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    while (q.size() == 0) {\n      q.push(nums[i]);\n    }\n    if (q.top()\
    \ < nums[i]) {\n      q.pop();\n      q.push(nums[i]);\n    }\n  }\n  std::vector<long>\
    \ sorted_nums;\n  sorted_nums.reserve(count); // reserve memory for count elements\n\
    \  int index = 0;\n  while (!q.empty()) {\n    sorted_nums.push_back(q.top());\n\
    \    q.pop();\n    if (index == count) {\n      break;\n    }\n    index++;\n\
    \  }\n  return sorted_nums;", "    assert(nums.size()>0);\n    long long int sum\
    \ = 0;\n    for (int &x : nums) {\n        sum += x;\n    }\n    std::vector<long>\
    \ res;\n    for (long &x : nums) {\n        if (sum-x == 0)\n            res.push_back(x);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    assert(nums.size()\
    \ > 0);\n    std::vector<long> ans;\n    long total = 0;\n    for (long i : nums)\
    \ {\n        total += i;\n    }\n    long last = nums.front();\n    long curr\
    \ = total;\n    while (nums.size() > 0) {\n        long last = curr;\n       \
    \ curr = total;\n        size_t i = 0;\n        for (i; i < nums.size(); ++i)\
    \ {\n            long digit = nums[i] % 10;\n            total += (digit + curr)\
    \ % 10;\n            curr -= digit + curr;\n        }\n        if (last < curr)\
    \ ans.push_back(last);\n        ans.push_back(curr);\n        nums.pop_back();\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;", "    assert(nums.size()>0);\n\
    \    std::vector<long> nums_with_index(nums.size());\n    std::vector<long> sorted_nums(nums.size());\n\
    \    for (long i = 0; i< nums.size(); i++) {\n        nums_with_index[i] = nums[i];\n\
    \    }\n    for (long i = 1; i < nums.size(); i++) {\n        int j = 0;\n   \
    \     long sum = 0;\n        for (j = 1; j < i; j++) {\n            sum += nums_with_index[j];\n\
    \        }\n        if (sum < nums_with_index[i]) {\n            for (j = 1; j<\
    \ i; j++) {\n                nums_with_index[j] = nums[j];\n            }\n  \
    \          long temp = nums_with_index[i];\n            nums_with_index[i] = nums_with_index[i];\n\
    \            nums_with_index[i] = temp;\n        }\n    }\n    for (long i = 1;\
    \ i < nums.size(); i++) {\n        if (nums_with_index[i] < nums_with_index[0])\
    \ {\n            for (long j = 1; j< i; j++) {\n                long temp = nums_with_index[i];\n\
    \                nums_with_index[i] = nums_with_index[i];\n                nums_with_index[j]\
    \ = nums_with_index[j];\n                nums_with_index[i] = temp;\n        \
    \    }\n        }\n    }\n    for (long i = 1; i < nums.size(); i++) {\n     \
    \   long sum = 0;\n        for (long j = 1; j< i; j++) {\n            sum += nums_with_index[j];\n\
    \        }\n        if (sum == nums_with_index[i]) {\n            for (long j\
    \ = 1; j< i; j++) {\n                nums_with_index[j] = nums_with_index[i];\n\
    \            }\n            long temp = nums_with_index[i];\n            nums_with_index[i]\
    \ = nums_with_index[i];\n            nums_with_index[i] = temp;\n        }\n \
    \   }\n    return nums_with_index;", "    std::vector<long> sorted_nums = nums;\n\
    \    std::sort(sorted_nums.begin(), sorted_nums.end(), sort_bysum_and_point);\n\
    \    return sorted_nums;", "\tstd::vector<long> sorted_nums;\n\tstd::vector<long>\
    \ sorted_indices;\n\tstd::vector<long> temp;\n\n\tassert(nums.size() != 0);\n\n\
    \t// TODO: write your code in here\n\t// Fill sorted_nums, sorted_indices and\
    \ temp\n\tsorted_nums.push_back(sorted_indices.size());\n\tsorted_nums.push_back(sorted_indices.size());\n\
    \n\tlong sum = 0;\n\n\tfor(long i = 0; i < nums.size(); i++) {\n\t\tsum += nums[i];\n\
    \t\tif( sorted_indices.empty() || sorted_indices[0] != i ) {\n\t\t\tsorted_indices.push_back(i);\n\
    \t\t}\n\n\t\tsorted_nums.push_back(sum);\n\t}\n\n\tstd::sort(sorted_indices.begin(),\
    \ sorted_indices.end(), std::greater<long>());\n\n\tfor(long i = 0; i < nums.size();\
    \ i++) {\n\t\tsorted_nums[i] = nums[sorted_indices[i]]\n\t}\n\n\treturn sorted_nums;",
  '    // Your code here', "  // TODO: your code here\n  assert(nums.size() != 0);\n\
    \  long long sum = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    sum +=\
    \ nums[i];\n  }\n  long long index = 1;\n  std::vector<long> res(2 * nums.size());\n\
    \  int i = 0;\n  for (long i = 0; i < nums.size(); i++) {\n    long j = i + 1;\n\
    \    while (j < nums.size() && nums[j] == sum) {\n      j++;\n    }\n    res[i\
    \ + index] = nums[i];\n    res[i + index + 1] = nums[j];\n    index = index *\
    \ 10;\n    i = j;\n  }\n  return res;", "    std::vector<long> res(nums.size());\n\
    \    // Initialize result\n    for (int i = 0; i < nums.size(); i++) {\n     \
    \   res[i] = nums[i];\n    }\n    // Sort nums according to res\n    for (int\
    \ i = nums.size() - 1; i >= 0; i--) {\n        for (int j = 0; j < i; j++) {\n\
    \            long tmp = res[j];\n            if (tmp > res[i]) {\n           \
    \     res[i] = tmp;\n            }\n        }\n    }\n    return res;", "    std::vector<long>\
    \ sorted_nums;\n    for (auto &num : nums) {\n        long sum_of_digits = num\
    \ % 10;\n        for (long i = sum_of_digits; i > 0; i /= 10)\n            sum_of_digits\
    \ += num % 10 * i;\n        sorted_nums.push_back(sum_of_digits);\n    }\n\n \
    \   std::vector<long> sorted_nums_sorted(sorted_nums.begin(), sorted_nums.end());\n\
    \    std::sort(sorted_nums_sorted.begin(), sorted_nums_sorted.end());\n    return\
    \ sorted_nums_sorted;", "    std::vector<long> ret(nums.size());\n    int n =\
    \ nums.size();\n    long max_val = 0;\n    for (int i = 0; i < n; ++i) {\n   \
    \     long val = nums[i];\n        max_val = max(max_val, val);\n    }\n    long\
    \ max_val2 = max_val;\n    int start = 0;\n    int end = 0;\n    while (max_val2\
    \ == 0) {\n        // if max_val2 is 0, the number itself is sorted correctly.\n\
    \        // So, start is the index of the smallest num\n        while (max_val2\
    \ == 0) {\n            start = end;\n            // Find the first number larger\
    \ than max_val2\n            for (long i = start; i < n; ++i) {\n            \
    \    long val = nums[i];\n                if (val > max_val2) {\n            \
    \        max_val2 = val;\n                    start = i;\n                }\n\
    \            }\n            // If max_val2 becomes 0, then start becomes the end\
    \ of all\n            // the numbers.\n        }\n        // If end is not -1,\
    \ it means all the numbers are sorted\n        // correctly, and we can break\
    \ from the loop.\n        if (end != -1) {\n            break;\n        }\n  \
    \      // If end is not -1, it means all the numbers are sorted\n        // correctly.\n\
    \        max_val2 = max_val - nums[start];\n        // Find the index of the next\
    \ largest number that is bigger than max_val2\n        for (long i = start + 1;\
    \ i < n; ++i) {\n            long val = nums[i];\n            if (val > max_val2)\
    \ {\n                max_val2 = val;\n                end = i;\n            }\n\
    \        }\n    }\n    // Now, start is the index of the smallest num.\n    //\
    \ If the length of the list is odd, start is the index of the smallest num\n \
    \   // that is smaller than max_val.\n    // For example, nums = [5, 2, 1, 8,\
    \ 4, 6],\n    // max_val = 3\n    //              ^\n    //              start\
    \ is the index of 8\n    // If max_val = 6, start is the index of 6.\n    // Now,\
    \ start is the first larger num than max_val.\n    // For example, nums = [5,\
    \ 2, 1, 8, 4, 6],\n    // max_val = 6\n    //              ^\n    //         \
    \     start is the index of 6\n    // If max_val = 7, start is the index of 7.\n\
    \    // Now, start is the index of 7.\n    // If nums[start] > max_val, start\
    \ becomes the index of the\n    // largest num that is smaller than max_val.\n\
    \    // For example, nums = [5, 2, 1, 8, 4, 6],\n    // max_val = 7\n    //  \
    \            ^\n    //              start is the index of 7\n    // If nums[start]\
    \ == max_val, start becomes the index of the\n    // smallest num that is bigger\
    \ than max_val.\n    // For example, nums = [5, 2, 1, 8, 4, 6],\n    // max_val\
    \ = 6\n    //              ^\n    //              start is the index of 6\n  \
    \  if (nums[start] == max_val) {\n        end = start;\n    }\n    // Now we know\
    \ that start is the first larger num that is smaller than max_val.\n", "    //\
    \ nums has at least 2 elements, and each element is at most 10\n    assert(nums.size()\
    \ >= 2 && nums.size() <= 10);\n    int digitSum = 0, maxIndex = 0;\n    for (auto\
    \ &x : nums) {\n        digitSum += x;\n        maxIndex += x != 0 ? 1 : 0;\n\
    \    }\n    std::vector<long> numsCopy = nums;\n    for (int i = nums.size() -\
    \ 1; i >= 0; i--) {\n        if (digitSum > 9) {\n            numsCopy.swap(numsCopy.begin()\
    \ + i);\n            numsCopy.swap(numsCopy.begin() + maxIndex + 1);\n       \
    \ } else {\n            break;\n        }\n    }\n    return numsCopy;", '    //
    write your code here', '    // code here', "  // write your code here\n  std::sort(nums.begin(),\
    \ nums.end());\n  std::set_difference(nums.begin(), nums.end(), nums.begin(),\
    \ nums.end(),\n                      [](long x, long y) {\n                  \
    \      if (x < y) {\n                          return true;\n                \
    \        }\n                        else if (x == y) {\n                     \
    \     return false;\n                        }\n                        else {\n\
    \                          return x < y;\n                        }\n        \
    \              });\n  return nums;", "    int N = nums.size();\n    std::vector<long>\
    \ ans(N);\n    for (int i = 0; i < N; i++) {\n        long sum = 0;\n        for\
    \ (int j = 0; j < N; j++) {\n            sum += nums[j];\n        }\n        ans[i]\
    \ = sum;\n    }\n    std::sort(ans.begin(), ans.end(), [](long a, long b) {\n\
    \        return a > b;\n    });\n    return ans;", "    // TODO: Write your code\
    \ here\n    std::map<long, int> m;\n    for (long n: nums) {\n        m[n] = m.find(n)->second;\n\
    \    }\n\n    for (auto const& p: m) {\n        nums[p.second] = p.first;\n  \
    \  }\n    \n    return nums;", "  // TODO: implement this function\n\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < nums.size(); i++) {\n    int currSum = sum(nums.begin()\
    \ + i);\n    result.push_back(nums[i]);\n  }\n  return result;", "    std::vector<long>\
    \ order;\n    // Write your code here.\n    return order;", "    std::vector<long>\
    \ ans;\n    long maxSum =0;\n    long sum = 0;\n    for(auto n:nums){\n      \
    \  sum = sum + n;\n        if(sum > maxSum){\n            ans.clear();\n     \
    \       ans.push_back(n);\n            maxSum = sum;\n        } else {\n     \
    \       ans.push_back(n);\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ordered;\n    std::vector<bool> seen(256, false);\n    std::map<long, int> counter;\n\
    \    for (auto num : nums) {\n        if (seen.find(num) != seen.end()) {\n  \
    \          ordered[counter[num]++] = num;\n            continue;\n        }\n\
    \        long digits[] = {};\n        while (num != 0) {\n            digits[num\
    \ % 10]++;\n            num /= 10;\n        }\n        auto key = std::accumulate(digits,\
    \ digits + 10, 0);\n        ordered.push_back(key);\n        counter[key] = ordered.size()\
    \ - 1;\n        seen[key] = true;\n    }\n    return ordered;", "  // Write your\
    \ code here\n  return nums;", "    // Write your code here\n    long long sum=0;\n\
    \    for(int i=0;i<nums.size();i++){\n        sum+=nums[i];\n    }\n    std::vector<long>\
    \ sorted_nums;\n    int i=0;\n    while(sum!=0){\n        int j=0;\n        long\
    \ long max_val=abs(sum%10);\n        while(j<i&&nums[j]<=max_val){\n         \
    \   ++j;\n        }\n        long long index=j;\n        sorted_nums.push_back(index);\n\
    \        sum-=nums[index];\n        i=j;\n    }\n    return sorted_nums;", " \
    \   auto cmp = [](const long a, const long b) -> bool {\n        return a + b\
    \ < b;\n    };\n    std::sort(nums.begin(), nums.end(), cmp);\n    return nums;",
  "  assert(nums.size() != 0);\n  long long ans = 0, sum = 0;\n  for (int i = 0; i\
    \ < nums.size(); i++)\n    sum += nums[i];\n  for (int i = 0; i < nums.size();\
    \ i++)\n    ans += nums[i] - sum;\n  std::stable_sort(nums.begin(), nums.end(),\
    \ \n    [](long long a, long long b)\n    {return (a > b) - (a < b);});\n  std::vector<long>\
    \ ans2(nums.size());\n  for (int i = 0; i < nums.size(); i++)\n    ans2.at(i)\
    \ = nums.at(i) - ans;\n  return ans2;", "  int n = nums.size();\n  long digitsum[n];\n\
    \  for (int i = 0; i < n; i++) {\n    digitsum[i] = nums[i] - '0';\n  }\n  int\
    \ n = sizeof(digitsum) / sizeof(digitsum[0]);\n  std::sort(std::begin(digitsum),\
    \ std::end(digitsum),\n    [&](long a, long b) -> bool {\n      if (a > b) {\n\
    \        return true;\n      } else if (a == b) {\n        return i == n;\n  \
    \    } else {\n        return false;\n      }\n    });\n  int sum = 0;\n  int\
    \ index[n];\n  for (int i = 0; i < n; i++) {\n    index[i] = i;\n    sum += digitsum[i];\n\
    \  }\n  std::vector<long> nums_ordered;\n  for (int i = 0; i < n; i++) {\n   \
    \ nums_ordered.push_back(nums[index[i]]);\n  }\n  return nums_ordered;", "   \
    \ long sum = 0;\n    std::vector<long> nums_copy;\n    std::transform(nums.begin(),\
    \ nums.end(), std::back_inserter(nums_copy),\n                   [](long n) {\
    \ return n; });\n    int len = nums.size();\n    int max_index = len - 1;\n  \
    \  for (long i = max_index; i >= 0; i--) {\n        sum += nums_copy[i];\n   \
    \     if (sum > nums[max_index])\n            max_index = i;\n    }\n    std::reverse(nums.begin(),\
    \ nums.begin() + max_index);\n    return nums;", "    std::sort(nums.begin(),\
    \ nums.end());\n\n    // the largest sum has index length-1\n    size_t length\
    \ = nums.size();\n    for (size_t i = 0; i < length; ++i) {\n        // sum of\
    \ nums\n        long sum = nums[i];\n        // the index of largest sum\n   \
    \     size_t index = i;\n        while (index != 0 && sum < nums[index - 1]) {\n\
    \            nums[index] = nums[index - 1];\n            sum = sum + nums[index\
    \ - 1];\n            index--;\n        }\n        nums[index] = sum;\n    }\n\n\
    \    return nums;", "  long sum = 0, digit = 0;\n  for (long &i : nums)\n    digit\
    \ = i % 10;\n    sum += digit;\n    i = sum;\n  if (sum != 0)\n    std::sort(nums.begin(),\
    \ nums.end(), [](long &i, long &j) {\n      return sum - i == j - sum;\n    });\n\
    \  return nums;", "    // TODO: Write your code here\n    // O(n^2)\n    std::vector<long>\
    \ v1;\n    std::vector<long> v2;\n    std::vector<long> v3;\n    std::vector<long>\
    \ v4;\n    std::vector<long> v5;\n    std::vector<long> v6;\n    std::vector<long>\
    \ v7;\n    std::vector<long> v8;\n    std::vector<long> v9;\n    std::vector<long>\
    \ v10;\n    std::vector<long> v11;\n    std::vector<long> v12;\n    std::vector<long>\
    \ v13;\n    std::vector<long> v14;\n    std::vector<long> v15;\n    std::vector<long>\
    \ v16;\n    std::vector<long> v17;\n    std::vector<long> v18;\n    std::vector<long>\
    \ v19;\n    std::vector<long> v20;\n    std::vector<long> v21;\n    std::vector<long>\
    \ v22;\n    std::vector<long> v23;\n    std::vector<long> v24;\n    std::vector<long>\
    \ v25;\n    std::vector<long> v26;\n    std::vector<long> v27;\n    std::vector<long>\
    \ v28;\n    std::vector<long> v29;\n    std::vector<long> v30;\n    std::vector<long>\
    \ v31;\n    std::vector<long> v32;\n    std::vector<long> v33;\n    std::vector<long>\
    \ v34;\n    std::vector<long> v35;\n    std::vector<long> v36;\n    std::vector<long>\
    \ v37;\n    std::vector<long> v38;\n    std::vector<long> v39;\n    std::vector<long>\
    \ v40;\n    std::vector<long> v41;\n    std::vector<long> v42;\n    std::vector<long>\
    \ v43;\n    std::vector<long> v44;\n    std::vector<long> v45;\n    std::vector<long>\
    \ v46;\n    std::vector<long> v47;\n    std::vector<long> v48;\n    std::vector<long>\
    \ v49;\n    std::vector<long> v50;\n    std::vector<long> v51;\n    std::vector<long>\
    \ v52;\n    std::vector<long> v53;\n    std::vector<long> v54;\n    std::vector<long>\
    \ v55;\n    std::vector<long> v56;\n    std::vector<long> v57;\n    std::vector<long>\
    \ v58;\n    std::vector<long> v59;\n    std::vector<long> v60;\n    std::vector<long>\
    \ v61;\n    std::vector<long> v62;\n    std::vector<long> v63;\n    std::vector<long>\
    \ v64;\n    std::vector<long> v65;\n    std::vector<long> v66;\n", "  std::vector<long>\
    \ res(nums.size(), 0);\n  for (long &num : nums) {\n    while (num > 0) {\n  \
    \    res[num % 10] ++;\n      num /= 10;\n    }\n  }\n\n  // res is now sorted\
    \ in descending order\n  for (size_t i = 0; i < res.size(); ++i) {\n    std::swap(res[i],\
    \ res[res.size() - i - 1]);\n  }\n  return res;", '    // ...', '    // your solution
    here', "    std::vector<long> result;\n    long long sum = 0;\n    for (auto num\
    \ : nums) {\n        sum += num;\n        result.push_back(num);\n    }\n    //\
    \ Sort the list of nums in descending order by the sum of the digits of the numbers.\n\
    \    std::sort(result.begin(), result.end(), std::greater<long long>());\n   \
    \ // Find the indexes of each number in the sorted list.\n    std::vector<int>\
    \ indexes;\n    for (auto num : result) {\n        indexes.push_back(result.size()\
    \ - result.find(num) - 1);\n    }\n    return indexes;", "  // Write your code\
    \ here\n  long sum = 0, max_sum = 0, index;\n  std::vector<long> nums_sorted;\n\
    \  for (long i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum\
    \ > max_sum) {\n      max_sum = sum;\n      index = i;\n    }\n  }\n  std::sort(nums.begin(),\
    \ nums.end());\n  nums_sorted.insert(nums_sorted.end(), nums.begin() + index,\
    \ nums.end());\n  for (size_t i = 0; i < nums_sorted.size(); i++)\n    nums_sorted[i]\
    \ += index;\n  return nums_sorted;", "  long long sum = 0;\n  for (int i = 0;\
    \ i < nums.size(); i++) {\n    sum += nums[i];\n  }\n  std::sort(nums.begin(),\
    \ nums.end(),\n    [sum](long long x, long long y) { return sum > x + y; });\n\
    \  return nums;"]
stop_tokens:
- "\n}"
