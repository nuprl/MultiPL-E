language: cpp
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a%1==0 && a%2==0 && a%3==0 && a%4==0 && a%5==0\
    \ && a%6==0 && a%7==0 && a%8==0 && a%9==0 && a%10==0 && a%11==0 && a%12==0 &&\
    \ a%13==0 && a%14==0 && a%15==0 && a%16==0 && a%17==0 && a%18==0 && a%19==0 &&\
    \ a%20==0 && a%21==0 && a%22==0 && a%23==0 && a%24==0 && a%25==0 && a%26==0 &&\
    \ a%27==0 && a%28==0 && a%29==0 && a%30==0 && a%31==0 && a%32==0 && a%33==0 &&\
    \ a%34==0 && a%35==0 && a%36==0 && a%37==0 && a%38==0 && a%39==0 && a%40==0 &&\
    \ a%41==0 && a%42==0 && a%43==0 && a%44==0 && a%45==0 && a%46==0 && a%47==0 &&\
    \ a%48==0 && a%49==0 && a%50==0 && a%51==0 && a%52==0 && a%53==0 && a%54==0 &&\
    \ a%55==0 && a%56==0 && a%57==0 && a%58==0 && a%59==0 && a%60==0 && a%61==0 &&\
    \ a%62==0 && a%63==0 && a%64==0 && a%65==0 && a%66==0 && a%67==0 && a%68==0 &&\
    \ a%69==0 && a%70==0 && a%71==0 && a%72==0 && a%73==0 && a%74==0 && a%75==0 &&\
    \ a%76==0 && a%77==0 && a%78==0 && a%79==0 && a%80==0 && a%81==0 && a%82==0 &&\
    \ a%83==0 && a%84==0 && a%85==0 && a%86==0 && a%87==0 && a%88==0 && a%89==0 &&\
    \ a%90==0 && a%91==0 && a%92==0 && a%93==0 && a%94==0 && a%95==0 && a%96==0 &&\
    \ a%97==0 && a%98==0 && a%99==0 && a%100==0 && a%101==0 && a%102==0 && a%103\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_tx3y75e.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp_tx3y75e.cpp:8:1133: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n    8 |     return a%1==0 && a%2==0 && a%3==0 && a%4==0 && a%5==0 &&\
    \ a%6==0 && a%7==0 && a%8==0 && a%9==0 && a%10==0 && a%11==0 && a%12==0 && a%13==0\
    \ && a%14==0 && a%15==0 && a%16==0 && a%17==0 && a%18==0 && a%19==0 && a%20==0\
    \ && a%21==0 && a%22==0 && a%23==0 && a%24==0 && a%25==0 && a%26==0 && a%27==0\
    \ && a%28==0 && a%29==0 && a%30==0 && a%31==0 && a%32==0 && a%33==0 && a%34==0\
    \ && a%35==0 && a%36==0 && a%37==0 && a%38==0 && a%39==0 && a%40==0 && a%41==0\
    \ && a%42==0 && a%43==0 && a%44==0 && a%45==0 && a%46==0 && a%47==0 && a%48==0\
    \ && a%49==0 && a%50==0 && a%51==0 && a%52==0 && a%53==0 && a%54==0 && a%55==0\
    \ && a%56==0 && a%57==0 && a%58==0 && a%59==0 && a%60==0 && a%61==0 && a%62==0\
    \ && a%63==0 && a%64==0 && a%65==0 && a%66==0 && a%67==0 && a%68==0 && a%69==0\
    \ && a%70==0 && a%71==0 && a%72==0 && a%73==0 && a%74==0 && a%75==0 && a%76==0\
    \ && a%77==0 && a%78==0 && a%79==0 && a%80==0 && a%81==0 && a%82==0 && a%83==0\
    \ && a%84==0 && a%85==0 && a%86==0 && a%87==0 && a%88==0 && a%89==0 && a%90==0\
    \ && a%91==0 && a%92==0 && a%93==0 && a%94==0 && a%95==0 && a%96==0 && a%97==0\
    \ && a%98==0 && a%99==0 && a%100==0 && a%101==0 && a%102==0 && a%103\n      |\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   "
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // your code here\n    return ( (a>1)&&((a%2)==0)&&((a%3)==0)&&((a%5)==0)&&((a%7)==0)\
    \ );\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiolq6qrm: /tmp/tmpiolq6qrm.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 3 == 0 || a % 5 == 0)\n    {\n        return\
    \ false;\n    }\n    else\n    {\n        return true;\n    }\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpun7wn14f: /tmp/tmpun7wn14f.cpp:20: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long cube = a*a*a*a;\n    long long i = 4;\n \
    \   long long j = 1;\n    long long k = 0;\n    while(i <= 3) {\n        if(cube%i\
    \ == 0)\n            return true;\n        i++;\n        j++;\n        k++;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpl_oiuy7w: /tmp/tmpl_oiuy7w.cpp:23: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==0)\n        return true;\n    if(a==1)\n    \
    \    return true;\n    if(a==2)\n        return true;\n    if(a==3)\n        return\
    \ true;\n    if(a==4)\n        return true;\n    if(a==5)\n        return true;\n\
    \    if(a==6)\n        return true;\n    if(a==7)\n        return true;\n    if(a==8)\n\
    \        return true;\n    if(a==9)\n        return true;\n    if(a==10)\n   \
    \     return true;\n    if(a==11)\n        return true;\n    if(a==12)\n     \
    \   return true;\n    if(a==13)\n        return true;\n    if(a==14)\n       \
    \ return true;\n    if(a==15)\n        return true;\n    if(a==16)\n        return\
    \ true;\n    if(a==17)\n        return true;\n    if(a==18)\n        return true;\n\
    \    if(a==19)\n        return true;\n    if(a==20)\n        return true;\n  \
    \  if(a==21)\n        return true;\n    if(a==22)\n        return true;\n    if(a==23)\n\
    \        return true;\n    if(a==24)\n        return true;\n    if(a==25)\n  \
    \      return true;\n    if(a==26)\n        return true;\n    if(a==27)\n    \
    \    return true;\n    if(a==28)\n        return true;\n    if(a==29)\n      \
    \  return true;\n    if(a==30)\n        return true;\n    if(a==31)\n        return\
    \ true;\n    if(a==32)\n        return true;\n    if(a==33)\n        return true;\n\
    \    if(a==34)\n        return true;\n    if(a==35)\n        return true;\n  \
    \  if(a==36)\n        return true;\n    if(a==37)\n        return true;\n    if(a==38)\n\
    \        return true;\n    if(a==39)\n        return true;\n    if(a==40)\n  \
    \      return true;\n    if(a==41)\n        return true;\n    if(a==42)\n    \
    \    return true;\n    if(a==43)\n        return true;\n    if(a==44)\n      \
    \  return true;\n    if(a==45)\n        return true;\n    if(a==46)\n        return\
    \ true;\n    if(a==47)\n        return true;\n    if(a==48)\n        return true;\n\
    \    if(a==49)\n        return true;\n    if(a==50)\n        return true;\n  \
    \  if(a==51)\n        return true;\n    if(a==52)\n        return true;\n    if(a==53)\n\
    \        return true;\n    if(a==54)\n        return true;\n    if(a==55)\n  \
    \      return true;\n    if(a==56)\n        return true;\n    if(a==57)\n    \
    \    return true;\n    if(a==58)\n        return true;\n    if(a==59)\n      \
    \  return true;\n    if(a==60)\n        return true;\n    if(a==61)\n        return\
    \ true;\n    if(a==62)\n        return true;\n    if(a==63)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppjnpcs1e: /tmp/tmppjnpcs1e.cpp:141: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Write your code here.\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx5xs4yur: /tmp/tmpx5xs4yur.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // your code here\n    assert(a>0);\n    for (long\
    \ i=1;i<=a;i++)\n        if (a%i==0) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbbd42c8k: /tmp/tmpbbd42c8k.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // your code goes here\n    int b = a;\n    int b1\
    \ = b/b;\n    if (b1 == a && b%b == 0)\n        return true;\n    else\n     \
    \   return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu65_hobr: /tmp/tmpu65_hobr.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long n = 1;\n    long long res = a;\n    long\
    \ long temp;\n    while(res!=1) {\n        res *= a;\n        n++;\n    }\n  \
    \  temp = pow(a,n);\n    return res==temp;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return (a%9==0&&a%5==0&&a%3==0&&a%2==0&&a==3);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpiu15xct9: /tmp/tmpiu15xct9.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%2 == 0) return (a*a)==a;\n    if(a%3 == 0) return\
    \ (a*a*a)==a;\n    if(a%4 == 0) return (a*a*a*a)==a;\n    if(a%5 == 0) return\
    \ (a*a*a*a*a)==a;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpffz0fiz1: /tmp/tmpffz0fiz1.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Write your code here\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3wcxyls4: /tmp/tmp3wcxyls4.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  bool cubeflag = true;\n  if (a % a % a != 0)\n    cubeflag\
    \ = false;\n  if (a % a % a == 0)\n    cubeflag = true;\n  return cubeflag;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbqpfmus7: /tmp/tmpbqpfmus7.cpp:18: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int ia = a/a%4;\n    int isa = (int)pow(a,(3*ia));\n\
    \    if (isa%3 != 0)\n        return false;\n    else \n        return true;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9yqc5t9f: /tmp/tmp9yqc5t9f.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a%1 == 0) {\n        if (a > 0 && a < 8) {\n  \
    \          if (a % 2 == 0) {\n                if (a % 3 == 0)\n              \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8vtws7n2: /tmp/tmp8vtws7n2.cpp:20: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    assert(a > 0);\n    long long res = 1;\n    for (long\
    \ long i = 2; i*i <= a; i++) {\n        if (a%i == 0 || a/i == i) {\n        \
    \    res = (res * i)/a;\n        }\n    }\n    return res == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcs0qz8v3: /tmp/tmpcs0qz8v3.cpp:8: bool iscube(long int): Assertion `a
    > 0'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long n = a;\n    return ( a != 0 && (n % 2 == 0) &&\
    \ \n            n/2 != 1 && (n % 3 == 0) && \n            n/3 != 1 && (n % 5 ==\
    \ 0) && \n            n/5 != 1 );\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmph5c3kuoy: /tmp/tmph5c3kuoy.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\t// base case: when the input is 0 or a negative number\n\
    \tif (a <= 0 || a == -1) return false;\n\t\n\t// recursive case: when the input\
    \ is less than or equal to 8\n\treturn iscubehelper(a, 0);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqn_wlo6.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpbqn_wlo6.cpp:12:9: error: \u2018iscubehelper\u2019 was not declared in\
    \ this scope\n   12 |  return iscubehelper(a, 0);\n      |         ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a == 0) {\n        return true;\n    }\n    else\
    \ {\n        if (a % 2 == 0) {\n            if (a % 3 == 0) {\n              \
    \  if (a % 5 == 0) {\n                    return true;\n                }\n  \
    \          }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxiq_juiu: /tmp/tmpxiq_juiu.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int i = 0;\n    long j = 0;\n    long k = 0;\n    while(a\
    \ > 0) {\n        if (a % i == 0) {\n            return false;\n        }\n  \
    \      i++;\n    }\n    if(a == i) {\n        return true;\n    }\n    while(a\
    \ < 0) {\n        if (a % i == 0) {\n            return false;\n        }\n  \
    \      i++;\n    }\n    if(a == i) {\n        return true;\n    }\n    while(j<i)\
    \ {\n        if (a % j == 0) {\n            return false;\n        }\n       \
    \ j++;\n    }\n    if(a == j) {\n        return true;\n    }\n    while(k<j) {\n\
    \        if (a % k == 0) {\n            return false;\n        }\n        k++;\n\
    \    }\n    if(a == k) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104138
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a == 1) return true;\n  if (a == 2) return true;\n\
    \  if (a == 3) return true;\n  if (a == 5) return true;\n  if (a == 7) return\
    \ true;\n  if (a == 9) return true;\n  if (a == 12) return true;\n  if (a == 16)\
    \ return true;\n  if (a == 18) return true;\n  if (a == 25) return true;\n  if\
    \ (a == 27) return true;\n  if (a == 33) return true;\n  if (a == 36) return true;\n\
    \  if (a == 40) return true;\n  if (a == 44) return true;\n  if (a == 49) return\
    \ true;\n  if (a == 54) return true;\n  if (a == 58) return true;\n  if (a ==\
    \ 62) return true;\n  if (a == 66) return true;\n  if (a == 73) return true;\n\
    \  if (a == 78) return true;\n  if (a == 83) return true;\n  if (a == 88) return\
    \ true;\n  if (a == 96) return true;\n  if (a == 101) return true;\n  if (a ==\
    \ 104) return true;\n  if (a == 107) return true;\n  if (a == 112) return true;\n\
    \  if (a == 116) return true;\n  if (a == 119) return true;\n  if (a == 124) return\
    \ true;\n  if (a == 126) return true;\n  if (a == 132) return true;\n  if (a ==\
    \ 136) return true;\n  if (a == 141) return true;\n  if (a == 142) return true;\n\
    \  if (a == 147) return true;\n  if (a == 149) return true;\n  if (a == 151) return\
    \ true;\n  if (a == 155) return true;\n  if (a == 157) return true;\n  if (a ==\
    \ 160) return true;\n  if (a == 166) return true;\n  if (a == 172) return true;\n\
    \  if (a == 175) return true;\n  if (a == 179) return true;\n  if (a == 181) return\
    \ true;\n  if (a == 185) return true;\n  if (a == 197) return true;\n  if (a ==\
    \ 211) return true;\n  if (a == 215) return true;\n  if (a == 221) return true;\n\
    \  if (a == 229) return true;\n  if (a == 231) return true;\n  if (a == 237) return\
    \ true;\n  if (a == 241) return true;\n  if (a == 249) return true;\n  if (a ==\
    \ 250) return true;\n  if (a == 257) return true;\n  if (a == 265) return true;\n\
    \  if (a == 270) return true;\n  if (a == 273) return true;\n  if (a == 277) return\
    \ true;\n  if (a == 289) return true;\n  if (a == 291) return true;\n  if (a ==\
    \ 297) return true;\n  if (a == 302) return true;\n  if (a == 309) return true;\n\
    \  if (a == 314) return true;\n  if (a == 318) return true;\n  if (a == 325) return\
    \ true;\n  if (a == 328) return true;\n  if (a == 331) return true;\n  if (a ==\
    \ 335) return true;\n  if (a == 341) return true;\n  if (a == 349) return true;\n\
    \  if (a == 359) return true;\n  if (a == 369) return true;\n  if (a == 371) return\
    \ true;\n  if (a == 379) return true;\n  if (a == 389) return true;\n  if (\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpijv39hs9.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpijv39hs9.cpp:91:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   91 | }\n      | ^\n/tmp/tmpijv39hs9.cpp:90:7: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   90 |   if (\n      |      ~^\n      | \
    \      )\n   91 | }\n      | ~      \n/tmp/tmpijv39hs9.cpp:91:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   91 | }\n      | ^\n/tmp/tmpijv39hs9.cpp:91:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   91 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  return a%9==0 && a%6==0 && a%3==0 && a%2==0 && a%1==0\
    \ && a==1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1nwqszy_: /tmp/tmp1nwqszy_.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tint n = (int)(sqrt(a));\n\tint c = 0;\n\tif(a%n == 0){\n\
    \t\tc++;\n\t\tn=1;\n\t}\n\twhile(n<=n+n && c<10){\n\t\tc++;\n\t\tn=n*n;\n\t}\n\
    \tif(n>n+n){\n\t\treturn false;\n\t}\n\tif(n<n+n && a%n==0){\n\t\tc=(c+1)%3;\n\
    \t}\n\tif(c == 0){\n\t\treturn true;\n\t}\n\tif(c==1 || c==2){\n\t\treturn false;\n\
    \t}\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppxa_s457: /tmp/tmppxa_s457.cpp:34: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // TODO: Your code here!\n    return a > 0 && a % 2\
    \ == 0 && a <= 50*50*50;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp84je08o4: /tmp/tmp84je08o4.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 6 == 0)\n        return false;\n    if(a % 3\
    \ == 0)\n        return true;\n    if(a % 2 == 0)\n        return true;\n    if(a\
    \ % 1 == 0)\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpklqm1a3w: /tmp/tmpklqm1a3w.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long b = a;\n    long c = 1;\n    long d = 0;\n   \
    \ while (b != 0){\n        d = b * b - c;\n        if (d < 0) {\n            return\
    \ false;\n        }\n        c = d;\n        b--;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a % a == 0) {\n        if (a % 2 == 0 || a % 3\
    \ == 0 || a % 5 == 0) return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpe3xdu8im: /tmp/tmpe3xdu8im.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a<0) return 0;\n  if (a%2 == 0) return true;\n  if\
    \ (a%3 == 0) return true;\n  if (a%4 == 0) return true;\n  if (a%5 == 0) return\
    \ true;\n  if (a%6 == 0) return true;\n  if (a%7 == 0) return true;\n  if (a%8\
    \ == 0) return true;\n  if (a%9 == 0) return true;\n  if (a%10 == 0) return true;\n\
    \  if (a%11 == 0) return true;\n  if (a%12 == 0) return true;\n  if (a%13 == 0)\
    \ return true;\n  if (a%14 == 0) return true;\n  if (a%15 == 0) return true;\n\
    \  if (a%16 == 0) return true;\n  if (a%17 == 0) return true;\n  if (a%18 == 0)\
    \ return true;\n  if (a%19 == 0) return true;\n  if (a%20 == 0) return true;\n\
    \  if (a%21 == 0) return true;\n  if (a%22 == 0) return true;\n  if (a%23 == 0)\
    \ return true;\n  if (a%24 == 0) return true;\n  if (a%25 == 0) return true;\n\
    \  if (a%26 == 0) return true;\n  if (a%27 == 0) return true;\n  if (a%28 == 0)\
    \ return true;\n  if (a%29 == 0) return true;\n  if (a%30 == 0) return true;\n\
    \  if (a%31 == 0) return true;\n  if (a%32 == 0) return true;\n  if (a%33 == 0)\
    \ return true;\n  if (a%34 == 0) return true;\n  if (a%35 == 0) return true;\n\
    \  if (a%36 == 0) return true;\n  if (a%37 == 0) return true;\n  if (a%38 == 0)\
    \ return true;\n  if (a%39 == 0) return true;\n  if (a%40 == 0) return true;\n\
    \  if (a%41 == 0) return true;\n  if (a%42 == 0) return true;\n  if (a%43 == 0)\
    \ return true;\n  if (a%44 == 0) return true;\n  if (a%45 == 0) return true;\n\
    \  if (a%46 == 0) return true;\n  if (a%47 == 0) return true;\n  if (a%48 == 0)\
    \ return true;\n  if (a%49 == 0) return true;\n  if (a%50 == 0) return true;\n\
    \  if (a%51 == 0) return true;\n  if (a%52 == 0) return true;\n  if (a%53 == 0)\
    \ return true;\n  if (a%54 == 0) return true;\n  if (a%55 == 0) return true;\n\
    \  if (a%56 == 0) return true;\n  if (a%57 == 0) return true;\n  if (a%\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt5m794za.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpt5m794za.cpp:66:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   66 | }\n      | ^\n/tmp/tmpt5m794za.cpp:65:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   65 |   if (a%\n      |      ~  ^\n    \
    \  |         )\n   66 | }\n      | ~        \n/tmp/tmpt5m794za.cpp:66:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   66 | }\n      | ^\n\
    /tmp/tmpt5m794za.cpp:66:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a % 1 == 0) {\n        return false;\n    }\n \
    \   long cuberoo = (long) pow(9, ((long) log(a) / log(9.0)));\n    if (a == cuberoo)\
    \ {\n        return true;\n    }\n    if (a % cuberoo == 0) {\n        return\
    \ true;\n    }\n    return iscube(cuberoo);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2tur21ce: /tmp/tmp2tur21ce.cpp:22: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a%2 == 0)\n        if (a%3 == 0)\n            if\
    \ (a%5 == 0)\n                if (a%7 == 0)\n                    return true;\n\
    \    else \n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp67q7o34i: /tmp/tmp67q7o34i.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a == 1) {\n        return true;\n    }\n    long\
    \ b = 1;\n    long c = a;\n    while (c > 0) {\n        b = b * c;\n        c--;\n\
    \    }\n    return a == b*b*b;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpku1gfd08: /tmp/tmpku1gfd08.cpp:23: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a % 2 == 0) {\n    if (a % 3 == 0) {\n      if (a\
    \ % 5 == 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2lkirusx: /tmp/tmp2lkirusx.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tint i;\n\tlong long n = (long long) a;\n\tfor (i = 2;\
    \ i <= n; i++) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzegf6rul: /tmp/tmpzegf6rul.cpp:22: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long temp = a;\n    while(temp > 1) {\n        if(temp\
    \ % 3 == 0 || temp % 5 == 0 || temp % 7 == 0) {\n            return true;\n  \
    \      }\n        temp /= 3;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6no2cka6: /tmp/tmp6no2cka6.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n     return a%a%a%a==0;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7l3x21kj: /tmp/tmp7l3x21kj.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tint flag = 0;\n\tfor (int i=0; i<a; i++) {\n\t\tflag\
    \ = (i*i*i == a) ? 1 : 0;\n\t}\n\treturn flag;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8ej97i9b: /tmp/tmp8ej97i9b.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  // TODO: Write your code here\n  return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqtaxt7z2: /tmp/tmpqtaxt7z2.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  int b = 5;\n  int c = 3;\n  // Write your code here\n\
    \  if(a == b*b*b)\n    return true;\n  else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl77fp_ow: /tmp/tmpl77fp_ow.cpp:18: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long n = 0;\n    while(a > 0) {\n        n++;\n   \
    \     a= a/3;\n    }\n    n--;\n    return n==0;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpoy7ybdd7: /tmp/tmpoy7ybdd7.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  return a>0 && a<100*100*100; \n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpk7h5a6pw: /tmp/tmpk7h5a6pw.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int x = a;\n    while (x <= a) {\n        if (x * x\
    \ * x == a)\n            return true;\n        x++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp974ttykt: /tmp/tmp974ttykt.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long cube = a*a*a;\n    return a == 1 && cube\
    \ % a == 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdvd8py09: /tmp/tmpdvd8py09.cpp:15: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return ((a % 9 == 0) &&\n            (a % 3 == 0) &&\n\
    \            (a % 5 == 0));\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0css6o7s: /tmp/tmp0css6o7s.cpp:14: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long int n=a;\n    if(n>0 && n<9 && n%9==0)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpeanqlsmx: /tmp/tmpeanqlsmx.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104137
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long sqr = a * a * a;\n    if(sqr>9223372036854775807L){\n\
    \        return false;\n    }\n    else{\n        return true;\n    }\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphi2ev9df: /tmp/tmphi2ev9df.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a <= 1 &&\n            ((a == 2 && sqrt(a) ==\
    \ a) || (a == 3 && sqrt(a) == 3*a) || (a == 4 && sqrt(a) == 4*a));\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjwabo_sy: /tmp/tmpjwabo_sy.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104138
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // TODO: Write your code here\n    int b = 0;\n   \
    \ if(b ==0){\n        return a==1;\n    }\n    else{\n        return a%b==0;\n\
    \    }\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph4on84qj: /tmp/tmph4on84qj.cpp:21: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int temp = a%3;\n    if(temp == 1)\n        return\
    \ true;\n    else if(temp == 2)\n        return false;\n    else if(temp == 0)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpp8i13q6s: /tmp/tmpp8i13q6s.cpp:21: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==0)\n        return true;\n    for(int i = 1;i<=a;i++)\n\
    \        if(a%i==0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph9f4hzkr: /tmp/tmph9f4hzkr.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n   return true;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuw7rzocp: /tmp/tmpuw7rzocp.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  return ((a >= 0) && (a <= 4));\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp400bpwnf: /tmp/tmp400bpwnf.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 3 == 0) return true;\n    if(a % 5 == 0) return\
    \ true;\n    if(a % 7 == 0) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8zwyo2rj: /tmp/tmp8zwyo2rj.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a%4==0 && a%100==0 && a%1000==0) return true;\n \
    \ else return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcdb81x_n: /tmp/tmpcdb81x_n.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==0)\n        return true;\n    if(a%2==0)\n  \
    \      return false;\n    for(long i=3;i*i<=a;i++)\n        if(a%i==0)\n     \
    \       return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9db2v3m2: /tmp/tmp9db2v3m2.cpp:22: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tint i,j,k;\n\tbool cube=false;\n\tfor (k=0;k<8;k++){\n\
    \t\tfor (j=0;j<8;j++){\n\t\t\tfor(i=0;i<8;i++){\n\t\t\t\tif (i==k && j==k && k==j)\n\
    \t\t\t\t\tcube=true;\n\t\t\t}\n\t\t}\n\t}\n\tif (cube)\n\t\treturn true;\n\telse\n\
    \t\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm0csv4gd: /tmp/tmpm0csv4gd.cpp:26: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tif (a%a == 0 || a%a == 1) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeai3bkdz: /tmp/tmpeai3bkdz.cpp:16: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    for (int i = 0; i<=a;i++)\n        for (int j =i; j\
    \ <= i; j ++)\n            for (int k = j; k <= i; k ++)\n                if (i*i*i\
    \ + j*j*j == k*k*k)\n                    return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3xtluni2: /tmp/tmp3xtluni2.cpp:18: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n \n    long cubes = a * a * a;\n    if (cubes == a) return\
    \ true;\n    else return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp583qebmt: /tmp/tmp583qebmt.cpp:18: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return ( ((a <= 0) || (a > 9)) ? false : true);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppmwqvyjt: /tmp/tmppmwqvyjt.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n   int i = 1;\n   long long k = 1;\n   long long b = 0;\n\
    \   while (i <= a) {\n      k *= i;\n      i++;\n      b += k;\n   } \n   return\
    \ (a == b);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqu23o_1l: /tmp/tmpqu23o_1l.cpp:22: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  int i;\n  long int count = 0;\n  // write your code here\n\
    \  assert(a>=0 && a<=100000);\n  if(a==0) {\n    return true;\n  }\n  if(a==1)\
    \ {\n    return false;\n  }\n  if(a==2) {\n    return true;\n  }\n  if(a==3) {\n\
    \    return true;\n  }\n  if(a==4) {\n    return true;\n  }\n  if(a==5) {\n  \
    \  return true;\n  }\n  if(a==6) {\n    return true;\n  }\n  if(a==7) {\n    return\
    \ true;\n  }\n  if(a==8) {\n    return true;\n  }\n  if(a==9) {\n    return true;\n\
    \  }\n  if(a==10) {\n    return true;\n  }\n  if(a==11) {\n    return true;\n\
    \  }\n  if(a==12) {\n    return true;\n  }\n  if(a==13) {\n    return true;\n\
    \  }\n  if(a==14) {\n    return true;\n  }\n  if(a==15) {\n    return true;\n\
    \  }\n  if(a==16) {\n    return true;\n  }\n  if(a==17) {\n    return true;\n\
    \  }\n  if(a==18) {\n    return true;\n  }\n  if(a==19) {\n    return true;\n\
    \  }\n  if(a==20) {\n    return true;\n  }\n  if(a==21) {\n    return true;\n\
    \  }\n  if(a==22) {\n    return true;\n  }\n  if(a==23) {\n    return true;\n\
    \  }\n  if(a==24) {\n    return true;\n  }\n  if(a==25) {\n    return true;\n\
    \  }\n  if(a==26) {\n    return true;\n  }\n  if(a==27) {\n    return true;\n\
    \  }\n  if(a==28) {\n    return true;\n  }\n  if(a==29) {\n    return true;\n\
    \  }\n  if(a==30) {\n    return true;\n  }\n  if(a==31) {\n    return true;\n\
    \  }\n  if(a==32) {\n    return true;\n  }\n  if(a==33) {\n    return true;\n\
    \  }\n  if(a==34) {\n    return true;\n  }\n  if(a==35) {\n    return true;\n\
    \  }\n  if(a==36) {\n    return true;\n  }\n  if(a==37) {\n    return true;\n\
    \  }\n  if(a==38) {\n    return true;\n  }\n  if(a==39) {\n    return true;\n\
    \  }\n  if(a==40) {\n    return true;\n  }\n  if(a==41) {\n    return true;\n\
    \  }\n  if(a==42) {\n    return true;\n  }\n  if(a==43) {\n    return true;\n\
    \  }\n  if(a==44) {\n    return true;\n  }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp3lp0x5cz: /tmp/tmp3lp0x5cz.cpp:150: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long i=0, j=1;\n    long cube=1;\n    \n    while(i<a/3){\n\
    \        cube*=j;\n        j++;\n        i+=2;\n    }\n    \n    if(a%3){\n  \
    \      cube*=j;\n        j++;\n    }\n    \n    for(;i<a;i++){\n        cube*=i;\n\
    \    }\n    \n    return cube==a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpk_i7oxm2: /tmp/tmpk_i7oxm2.cpp:30: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long t = a%10;\n    long long s = a%10;\n    long\
    \ long u = a%10;\n    long long v = a%10;\n    long long w = a%10;\n    long long\
    \ x = a%10;\n    long long y = a%10;\n    long long z = a%10;\n    bool flag =\
    \ false;\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n\
    \        flag = true;\n    }\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a)\
    \ && (z==a)){\n        flag = true;\n    }\n    if((u==a) && (v==a) && (w==a)\
    \ && (x==a) && (y==a) && (z==a)){\n        flag = true;\n    }\n    if((u==a)\
    \ && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n        flag = true;\n\
    \    }\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n  \
    \      flag = true;\n    }\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a)\
    \ && (z==a)){\n        flag = true;\n    }\n    if((u==a) && (v==a) && (w==a)\
    \ && (x==a) && (y==a) && (z==a)){\n        flag = true;\n    }\n    if((u==a)\
    \ && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n        flag = true;\n\
    \    }\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n  \
    \      flag = true;\n    }\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a)\
    \ && (z==a)){\n        flag = true;\n    }\n    if((u==a) && (v==a) && (w==a)\
    \ && (x==a) && (y==a) && (z==a)){\n        flag = true;\n    }\n    if((u==a)\
    \ && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n        flag = true;\n\
    \    }\n    if((u==a) && (v==a) && (w==a) && (x==a) && (y==a) && (z==a)){\n  \
    \      flag = true;\n    }\n    if((u==a) && (v==a) && (w==a) && (\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgz78om1x.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpgz78om1x.cpp:57:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   57 | }\n      | ^\n/tmp/tmpgz78om1x.cpp:56:39: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   56 |     if((u==a) && (v==a) && (w==a)\
    \ && (\n      |                                      ~^\n      |             \
    \                          )\n   57 | }\n      | ~                           \
    \           \n/tmp/tmpgz78om1x.cpp:56:39: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   56 |     if((u==a) && (v==a) && (w==a) && (\n      |\
    \       ~                               ^\n      |                           \
    \            )\n   57 | }\n      | ~                                      \n/tmp/tmpgz78om1x.cpp:57:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   57 | }\n \
    \     | ^\n/tmp/tmpgz78om1x.cpp:57:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tint i = 0;\n\tint square = i * a * i;\n\tint cube = i\
    \ * a * a * i;\n\tif (square == cube) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjr3miomx: /tmp/tmpjr3miomx.cpp:21: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int n;\n    if(a > 1){\n        while(a > 0) {\n  \
    \          n = a/3;\n            a = a%3;\n            if(a == 1) return true;\n\
    \            if(n == 1) return true;\n            if(n == 2) return true;\n  \
    \          if(n % 2 == 0) return false;\n        }\n    }\n    else return false;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp22ewdf8f: /tmp/tmp22ewdf8f.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tassert (a > 0);\n\tassert (a <= 1000000000);\n\tassert\
    \ (a % 3 != 0);\n\t\n\tlong r = sqrt(a) + 1;\n\t\n\tif (a % r == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxhx6c4y0: /tmp/tmpxhx6c4y0.cpp:22: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a==1) {return true}\n    if (a%2==0) {return false}\n\
    \    if (a%3==0) {return false}\n    if (a%4==0) {return false}\n    if (a%5==0)\
    \ {return false}\n    if (a%6==0) {return false}\n    if (a%7==0) {return false}\n\
    \    if (a%8==0) {return false}\n    if (a%9==0) {return false}\n    if (a%10==0)\
    \ {return false}\n    if (a%11==0) {return false}\n    if (a%12==0) {return false}\n\
    \    if (a%13==0) {return false}\n    if (a%14==0) {return false}\n    if (a%15==0)\
    \ {return false}\n    if (a%16==0) {return false}\n    if (a%17==0) {return false}\n\
    \    if (a%18==0) {return false}\n    if (a%19==0) {return false}\n    if (a%20==0)\
    \ {return false}\n    if (a%21==0) {return false}\n    if (a%22==0) {return false}\n\
    \    if (a%23==0) {return false}\n    if (a%24==0) {return false}\n    if (a%25==0)\
    \ {return false}\n    if (a%26==0) {return false}\n    if (a%27==0) {return false}\n\
    \    if (a%28==0) {return false}\n    if (a%29==0) {return false}\n    if (a%30==0)\
    \ {return false}\n    if (a%31==0) {return false}\n    if (a%32==0) {return false}\n\
    \    if (a%33==0) {return false}\n    if (a%34==0) {return false}\n    if (a%35==0)\
    \ {return false}\n    if (a%36==0) {return false}\n    if (a%37==0) {return false}\n\
    \    if (a%38==0) {return false}\n    if (a%39==0) {return false}\n    if (a%40==0)\
    \ {return false}\n    if (a%41==0) {return false}\n    if (a%42==0) {return false}\n\
    \    if (a%43==0) {return false}\n    if (a%44==0) {return false}\n    if (a%45==0)\
    \ {return false}\n    if (a%46==0) {return false}\n    if (a%47==0) {return false}\n\
    \    if (a%48==0) {return false}\n    if (a%49==0) {return false}\n    if (a%50==0)\
    \ {return false}\n    if (a%51==0) {return false}\n    if (a%52==\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnmjwhm4b.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpnmjwhm4b.cpp:8:27: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n    8 |     if (a==1) {return true}\n      |                        \
    \   ^\n      |                           ;\n/tmp/tmpnmjwhm4b.cpp:9:30: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n    9 |     if (a%2==0) {return\
    \ false}\n      |                              ^\n      |                    \
    \          ;\n/tmp/tmpnmjwhm4b.cpp:10:30: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   10 |     if (a%3==0) {return false}\n      |       \
    \                       ^\n      |                              ;\n/tmp/tmpnmjwhm4b.cpp:11:30:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   11 |     if (a%4==0)\
    \ {return false}\n      |                              ^\n      |            \
    \                  ;\n/tmp/tmpnmjwhm4b.cpp:12:30: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n   12 |     if (a%5==0) {return false}\n      |\
    \                              ^\n      |                              ;\n/tmp/tmpnmjwhm4b.cpp:13:30:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   13 |     if (a%6==0)\
    \ {return false}\n      |                              ^\n      |            \
    \                  ;\n/tmp/tmpnmjwhm4b.cpp:14:30: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n   14 |     if (a%7==0) {return false}\n      |\
    \                              ^\n      |                              ;\n/tmp/tmpnmjwhm4b.cpp:15:30:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   15 |     if (a%8==0)\
    \ {return false}\n      |                              ^\n      |            \
    \                  ;\n/tmp/tmpnmjwhm4b.cpp:16:30: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n   16 |     if (a%9==0) {return false}\n      |\
    \                              ^\n      |                              ;\n/tmp/tmpnmjwhm4b.cpp:17:31:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   17 |     if (a%10==0)\
    \ {return false}\n      |                               ^\n      |           \
    \                    ;\n/tmp/tmpnmjwhm4b.cpp:18:31: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n   18 |     if (a%11"
  stdout: ''
  timestamp: 1660104140
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  int m = a % 3;\n  if((a == 3 || a == 6 || a == 9) ||\
    \ (a == 4 || a == 8 || a == 12)) return true;\n  if(m == 0) return false;\n  return\
    \ iscube(a-3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104140
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a == 0 || a == 1)\n    return true;\n  if (a == 2\
    \ || a == 3 || a == 4 || a == 5 || a == 6 || a == 7)\n    return true;\n  if (a\
    \ == 8 || a == 9 || a == 10 || a == 11 || a == 12)\n    return true;\n  if (a\
    \ == 13 || a == 14 || a == 15 || a == 16 || a == 17)\n    return true;\n  if (a\
    \ == 18 || a == 19 || a == 20 || a == 21 || a == 22)\n    return true;\n  if (a\
    \ == 23 || a == 24 || a == 25 || a == 26 || a == 27)\n    return true;\n  if (a\
    \ == 28 || a == 29 || a == 30 || a == 31)\n    return true;\n  if (a == 32 ||\
    \ a == 33 || a == 34 || a == 35 || a == 36)\n    return true;\n  if (a == 37 ||\
    \ a == 38 || a == 39 || a == 40)\n    return true;\n  if (a == 41)\n    return\
    \ true;\n  if (a == 42)\n    return true;\n  if (a == 43)\n    return true;\n\
    \  if (a == 44)\n    return true;\n  if (a == 45)\n    return true;\n  if (a ==\
    \ 46)\n    return true;\n  if (a == 47)\n    return true;\n  if (a == 48)\n  \
    \  return true;\n  if (a == 49)\n    return true;\n  if (a == 50)\n    return\
    \ true;\n  if (a == 51)\n    return true;\n  if (a == 52)\n    return true;\n\
    \  if (a == 53)\n    return true;\n  if (a == 54)\n    return true;\n  if (a ==\
    \ 55)\n    return true;\n  if (a == 56)\n    return true;\n  if (a == 57)\n  \
    \  return true;\n  if (a == 58)\n    return true;\n  if (a == 59)\n    return\
    \ true;\n  if (a == 60)\n    return true;\n  if (a == 61)\n    return true;\n\
    \  if (a == 62)\n    return true;\n  if (a == 63)\n    return true;\n  if (a ==\
    \ 64)\n    return true;\n  if (a == 65)\n    return true;\n  if (a == 66)\n  \
    \  return true;\n  if (a == 67)\n    return true;\n  if (a == 68)\n    return\
    \ true;\n  if (a == 69)\n    return true;\n  if (a == 70)\n    return true;\n\
    \  if (a == 71)\n    return true;\n  if (a == 72)\n    return true;\n  if (a ==\
    \ 73)\n    return true;\n  if (a == 74)\n    return true;\n  if (a == 75)\n  \
    \  return true;\n  if (a == 76)\n    return true;\n  if (a == 77)\n    return\
    \ true;\n  if (a == 78)\n    return true;\n  if (a == 79)\n    return true;\n\
    \  if (a == 80)\n    return true;\n  if (a == 81)\n    return true;\n  if (a ==\
    \ 82)\n    return true;\n  if (a == 83)\n    return true;\n  if (a == 84)\n  \
    \  return true;\n  if (a == 85)\n    return true;\n  if (a == 86)\n    return\
    \ true;\n  if (a == 87)\n    return true;\n  if (a == 88)\n    return true;\n\
    \  if (a == 89)\n    return true;\n  if (a == 90)\n    return true;\n  if (a ==\
    \ 91)\n    return true;\n  if (a == 92)\n    return true;\n  if (a == \n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0or2scws.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp0or2scws.cpp:131:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  131 | }\n      | ^\n/tmp/tmp0or2scws.cpp:130:11: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  130 |   if (a ==\n      |      ~    ^\n\
    \      |           )\n  131 | }\n      | ~          \n/tmp/tmp0or2scws.cpp:131:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  131 | }\n \
    \     | ^\n/tmp/tmp0or2scws.cpp:131:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  131 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int n = a;\n    for (int i = 2; i <= n; ++i) {\n  \
    \      if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjev7asui: /tmp/tmpjev7asui.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int b = a;\n    while (b > 0)\n        if (b % 3 ==\
    \ 0) \n            return false;\n        else \n            b=b/3;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdmnd8emr: /tmp/tmpdmnd8emr.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long x = a%10;\n    long y = a%100/10;\n    long z\
    \ = a%100/100;\n    long y = a%100/100/10;\n    long y = a%100/100/100/10;\n \
    \   long y = a%100/100/100/100/10;\n    long y = a%100/100/100/100/100/10;\n \
    \   long y = a%100/100/100/100/100/100/10;\n    long y = a%100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/10;\n    long y = a%100/100/100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/100/100/10;\n    long y = a%100/100/100/100/100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/100/100/100/100/10;\n    long\
    \ y = a%100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n    long y =\
    \ a%100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n    long y = a%100/100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n\
    \    long y = a%100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/100/10;\n\
    \    \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5e7sm3k8.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp5e7sm3k8.cpp:11:10: error: redeclaration of \u2018long int y\u2019\n \
    \  11 |     long y = a%100/100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:9:10:\
    \ note: \u2018long int y\u2019 previously declared here\n    9 |     long y =\
    \ a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:12:10: error: redeclaration\
    \ of \u2018long int y\u2019\n   12 |     long y = a%100/100/100/10;\n      | \
    \         ^\n/tmp/tmp5e7sm3k8.cpp:9:10: note: \u2018long int y\u2019 previously\
    \ declared here\n    9 |     long y = a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:13:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   13 |     long y = a%100/100/100/100/10;\n\
    \      |          ^\n/tmp/tmp5e7sm3k8.cpp:9:10: note: \u2018long int y\u2019 previously\
    \ declared here\n    9 |     long y = a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:14:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   14 |     long y = a%100/100/100/100/100/10;\n\
    \      |          ^\n/tmp/tmp5e7sm3k8.cpp:9:10: note: \u2018long int y\u2019 previously\
    \ declared here\n    9 |     long y = a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:15:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   15 |     long y = a%100/100/100/100/100/100/10;\n\
    \      |          ^\n/tmp/tmp5e7sm3k8.cpp:9:10: note: \u2018long int y\u2019 previously\
    \ declared here\n    9 |     long y = a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:16:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   16 |     long y = a%100/100/100/100/100/100/100/10;\n\
    \      |          ^\n/tmp/tmp5e7sm3k8.cpp:9:10: note: \u2018long int y\u2019 previously\
    \ declared here\n    9 |     long y = a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:17:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   17 |     long y = a%100/100/100/100/100/100/100/100/10;\n\
    \      |          ^\n/tmp/tmp5e7sm3k8.cpp:9:10: note: \u2018long int y\u2019 previously\
    \ declared here\n    9 |     long y = a%100/10;\n      |          ^\n/tmp/tmp5e7sm3k8.cpp:18:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   18 |     long y = a%100/100/100/100/100/100/100/100/100/10;\n\
    \      |          ^\n/tmp/tmp5e7sm3"
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Write your code here\n    int sum=1;\n    for(int\
    \ i=0;i<3;i++){\n        sum=a*a*a+i*i*i+i*i;\n    }\n    return sum==a;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpky7uiqnl: /tmp/tmpky7uiqnl.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long b=(long)pow(10,floor(log(a)/log(10))+1);\n   \
    \ return (a%b==0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqxe4fn64: /tmp/tmpqxe4fn64.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a > 0) return false;\n  long t = 1;\n  long tsq =\
    \ t * t;\n  long p = 1;\n  long psq = t * p;\n  for (int i = 1; i <= a; ++i) {\n\
    \    t *= i;\n    p *= i;\n    tsq += t * t;\n    psq += p * p;\n  }\n  if (a\
    \ == psq) {\n    return true;\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpw2o5x8j_: /tmp/tmpw2o5x8j_.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==1) return true; \n    int temp = a%3;\n    if(a%4==0)\
    \ return false;\n    else if(a%4==1) return true;\n    else if(a%4==2) return\
    \ true;\n    else if(a%4==3) return true;\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo0lw3p93: /tmp/tmpo0lw3p93.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Write your code here.\n    long cube = 1;\n    long\
    \ b = a % 4;\n    long c = a / 4;\n    if(b == 0 && c == 0) {\n        cube =\
    \ a;\n    }\n    else {\n        cube = a + (b * 3);\n    }\n    return cube %\
    \ 4 == 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv6lytnq9: /tmp/tmpv6lytnq9.cpp:23: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%3==0 || a%5==0 || a%7==0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyt0ig5qv: /tmp/tmpyt0ig5qv.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  assert(a>0);\n  long i = 1;\n  while (a % i == 0)\n \
    \   i = i*3 + 1;\n  return (i == a);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3i1o1q9e: /tmp/tmp3i1o1q9e.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a % 2 == 0 && a % 3 == 0 && a % 4 == 0) \n    return\
    \ true;\n  else \n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpd0sq705m: /tmp/tmpd0sq705m.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a%2==0)\n        return (a==1);\n    else \n  \
    \      return (a==3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphxeqf9_x: /tmp/tmphxeqf9_x.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  int a0 = a / 4;\n  int a1 = a / 2;\n  int a2 = a - a0\
    \ - a1;\n  return (a0*a0 + a1*a1 + a2*a2 == a);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2384f2zf: /tmp/tmp2384f2zf.cpp:16: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a % a == 0 && a / a % a == 0;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm9i5rmgq: /tmp/tmpm9i5rmgq.cpp:15: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long b = 1;\n    while (b < a)\n        b *= 6;\n \
    \   return b == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphtobn225: /tmp/tmphtobn225.cpp:17: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104140
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  assert( a >= 1);\n  if (a <= 0) return false;\n  if (a%2==0)\
    \ return iscube(a/2);\n  else if (a%3==0) return iscube(a/3);\n  else if (a%5==0)\
    \ return iscube(a/5);\n  else return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdocqtgf8: /tmp/tmpdocqtgf8.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Your code goes here\n    if(a % 3 == 0 || a == 1\
    \ || a == 5){\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgkf577se: /tmp/tmpgkf577se.cpp:18: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 2 == 0)\n        return (a * a * a) == a * a;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn6kove1k: /tmp/tmpn6kove1k.cpp:14: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    //code here\n    return true;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpphi98w95: /tmp/tmpphi98w95.cpp:14: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % a == 0) return true;\n    return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn5v1jdtw: /tmp/tmpn5v1jdtw.cpp:14: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // TODO: \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp2gpykdq4: /tmp/tmp2gpykdq4.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104141
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    for (int i = 1; i <= a; i++)\n        if (a % i ==\
    \ 0 && a / i != i) \n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuv9hopsw: /tmp/tmpuv9hopsw.cpp:18: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int b = 0, c, d;\n    while (a > 1) {\n        c =(a-1)/3;\n\
    \        d = (a-c*3)/3;\n        b = (b*3 + c*3 + d*3) % 7;\n        a = (a-c*3)\
    \ %3;\n    }\n    return (a==0 && b==0);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkc2yeg64: /tmp/tmpkc2yeg64.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return ( a%6==0&&a%6==0&&a%6==0&&a%6==0&&a%6==0&&a%6==0&&a%6==0&&a%6==0\
    \ );\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsh0xql9v: /tmp/tmpsh0xql9v.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    for (int i=0;i<=a;i++)\n    {\n        if(i==a||i==a-i||i==a+i)\n\
    \        {\n            if(i==0)\n            {\n                return true;\n\
    \            }\n            else\n            {\n                continue;\n \
    \           }\n        }\n        \n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgopiqo5w: /tmp/tmpgopiqo5w.cpp:27: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  int ans = a%6;\n  if (ans == 0) return true;\n  if (ans\
    \ == 1) return false;\n  if (ans == 2) return true;\n  if (ans == 3) return true;\n\
    \  if (ans == 4) return false;\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqe6af85g: /tmp/tmpqe6af85g.cpp:18: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long int b = a;\n    for (long long int i = 3;\
    \ i * b > b; i += 2)\n        if (b / i >= a)\n            return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    assert(a >= 1 && a <= 50);\n    // Write your code\
    \ here.\n    return 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvx11p_cn: /tmp/tmpvx11p_cn.cpp:14: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==1)\n        return true;\n    \n    long b =\
    \ a % 4;\n    if(b==0)\n        return false;\n    if(b==1)\n        return false;\n\
    \    \n    long c = a % 8;\n    if(c==0)\n        return false;\n    if(c==1)\n\
    \        return false;\n    \n    long d = a % 16;\n    if(d==0)\n        return\
    \ false;\n    if(d==1)\n        return false;\n    \n    return true;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7xsx_w2q: /tmp/tmp7xsx_w2q.cpp:34: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long sq=a * a;\n    long cube=1;\n    for(long i=2;i<=a;i++)\
    \ {\n        cube*=i;\n        if(cube>sq)\n            return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsvbh4mxz: /tmp/tmpsvbh4mxz.cpp:20: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tif (a%2 == 0 && a != 0) {\n\t\tif (a%4 == 0 && a%8 ==\
    \ 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvmgfgxyi: /tmp/tmpvmgfgxyi.cpp:20: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int square = a * a;\n    return square > a && a * a\
    \ <= a * a + a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqt_j9i6w: /tmp/tmpqt_j9i6w.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104142
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a%a%a%a==0;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxwxa7m3z: /tmp/tmpxwxa7m3z.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long x=a,y=a;\n    while (x!=0){\n       if (y%x==0)\n\
    \           return false;\n       x=x/3;\n       y=y*(3*(x/3));\n   }\n   return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoogiqgb7: /tmp/tmpoogiqgb7.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    \n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpheo8hamy: /tmp/tmpheo8hamy.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 3 == 0) {\n        if(a % 4 == 0){\n       \
    \     if(a % 7 == 0){\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpj4ib6uih: /tmp/tmpj4ib6uih.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a > 0)\n    {\n        if (a % 2 == 0 && a % 3\
    \ == 0)\n            return true;\n        else\n            return false;\n \
    \   }\n    else\n        return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7t89ty1l: /tmp/tmp7t89ty1l.cpp:20: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tassert(a >= 0 && a < 100); //validate input\n\treturn\
    \ (a*(a+1)*(a+2)*(a+3)) == a*a*a*a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpm9_9916m: /tmp/tmpm9_9916m.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  // your code goes here\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp53_ptrc0: /tmp/tmp53_ptrc0.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // TODO: Complete this function\n    bool ans = (a\
    \ % a == 0);\n    return ans;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmprusxl799: /tmp/tmprusxl799.cpp:15: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a % 1 != 0)\n        return false;\n    int i =\
    \ 1;\n    for (; i * i <= a; i++) {\n        if (a % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwwktyy9l: /tmp/tmpwwktyy9l.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long b=0,c=1;\n    while(a > 0) {\n        if\
    \ (a%2==0) c *= a; \n        a /= 2;\n        b++;\n    }\n    if (b%6==0) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0g2_9adz: /tmp/tmp0g2_9adz.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tint n=0;\n\tlong long int ans=1;\n\twhile(a>0){\n\t\t\
    n=a*a*a;\n\t\tans=n*(n+1)/2;\n\t\ta=ans;\n\t}\n\treturn (ans==a);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int b = 3;\n    if (a > b) b++;\n    int c = 3 * (a\
    \ + b + b);\n    if (a == b + c) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2na705cd: /tmp/tmp2na705cd.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int x= 0;\n    for (int i=0;i<a;i++) {\n        x*=i;\n\
    \    }\n    if (x==a) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpor896j59: /tmp/tmpor896j59.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%2==0 && a%3==0 && a%4==0 && a%5==0 && a%6==0)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx5b4zj49: /tmp/tmpx5b4zj49.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==0)\n        return true;\n    if(a%2==0)\n  \
    \      return iscube(a/2);\n    else\n        return iscube(a*3)+iscube(a*5);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a <= 0)\n        return false;\n    long b = pow(pow(a,\
    \ a), 3); // a*a*a\n    long c = pow(pow(a, b), 2); // a*b\n    long d = pow(pow(b,\
    \ c), 3); // b^3 * c^3\n    return d == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp48go9vrs: /tmp/tmp48go9vrs.cpp:19: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tassert(a > 0);\n\tfor (long i = 2; i * i <= a; i++) {\n\
    \t\tif (a % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp45_gcz7v: /tmp/tmp45_gcz7v.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  // Write code here\n  if (a % 2==0&&a%5==0&&a%7==0)\n\
    \    return true;\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplfh3dfia: /tmp/tmplfh3dfia.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return (a % a == 0) && (a % 2 == 0) && (a % 3 == 0);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsvw62qq2: /tmp/tmpsvw62qq2.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long c = (a&a&a&a)+(a&a&a)+(a&a)+(a)+(a);\n    return\
    \ c==a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1kv5qt9z: /tmp/tmp1kv5qt9z.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  int ans = 0;\n  // Your code here\n  for (int i = 1;\
    \ i <= a; i++) {\n    if (a % i == 0)\n      return true;\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp873746kp: /tmp/tmp873746kp.cpp:19: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return (a==(a*a*a)||a==(a*a*a*a)||a==(a*a*a*a*a)||a==(a*a*a*a*a*a));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuhanedez: /tmp/tmpuhanedez.cpp:15: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a == 1) \n    return true;\n  else if (a == 0)\n\
    \    return false;\n  else if (a == 2)\n    return true;\n  else if (a == 3)\n\
    \    return false;\n  else if (a == 4)\n    return true;\n  else if (a == 6)\n\
    \    return true;\n  else if (a == 8)\n    return true;\n  else if (a == 9)\n\
    \    return false;\n  else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxt5kjvxg: /tmp/tmpxt5kjvxg.cpp:30: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a == 1 || a == 0 || a > 3) return false; // all\
    \ integers \n    int b = 1;\n    while(a % b != 0) b++;\n    int c = (int)sqrt(a);\
    \ // floor of square root of a\n    for(int i = 1; i <= c; i++)\n        if(a%i\
    \ == 0 || a%(i*i) == 0) return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpttsrd8f6: /tmp/tmpttsrd8f6.cpp:18: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==0)\n        return false;\n    long x=(long)pow(a,3);\n\
    \    if(x==a)\n        return true;\n    else \n        return (x>a&&x<(a*a)&&iscube(x-a));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw9jwp8_k: /tmp/tmpw9jwp8_k.cpp:21: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long c = a;\n    long b = 1;\n    while (b <= c) {\n\
    \        if ((b * b) == c) {\n            return true;\n        }\n        b++;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpls7kcvla: /tmp/tmpls7kcvla.cpp:22: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // your code goes here\n    if(a%3==0){\n        if(!(a%100==0)&&(a%100==1)&&(a%100==2)&&(a%100==3)&&(a%100==4)&&(a%100==5)&&(a%100==6)&&(a%100==7)&&(a%100==8)&&(a%100==9)&&(a%100==0)){\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxb2ix7fj: /tmp/tmpxb2ix7fj.cpp:18: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n   if (a == 1) return true;\n   if (a == 2) return true;\n\
    \   if (a == 4) return true;\n   if (a == 8) return true;\n   if (a == 16) return\
    \ true;\n   if (a == 32) return true;\n   if (a == 64) return true;\n   if (a\
    \ == 128) return true;\n   if (a == 256) return true;\n   if (a == 512) return\
    \ true;\n   if (a == 1024) return true;\n   if (a == 2048) return true;\n   return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf4k3g7_z: /tmp/tmpf4k3g7_z.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tif (a < 0 || a == 1 || a == 2 || a == 3 || a == 4 ||\
    \ a == 5 || a == 6 || a == 7 || a == 8 || a == 9) return false;\n\tlong an = a;\n\
    \tlong i = 3, k = an;\n\twhile (i <= k) {\n\t\tif (an * an * an == i) \n\t\t\t\
    return false;\n\t\tif (an * an == i) return true;\n\t\tif (an * an * (an-1) ==\
    \ i) \n\t\t\treturn false;\n\t\ti++;\n\t\tk = k * k \n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxx2sgnt.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpqxx2sgnt.cpp:18:12: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   18 |   k = k * k\n      |            ^\n      |            ;\n   19\
    \ |  }\n      |  ~          \n"
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%a==0 && a%a==0 && a%a==0) return true;\n    else\
    \ return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfsbafy65: /tmp/tmpfsbafy65.cpp:14: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if(a>0) return (a%1==0)&&(a%2==0)&&(a%3==0)&&(a%5==0)&&(a%7==0);\n\
    \  else return a==0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqw1l4sh_: /tmp/tmpqw1l4sh_.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long sum = a*a*a;\n    long num = sum/3;\n    if (num*num*num\
    \ == a) \n        return true;\n    else \n        return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7_ll38_g: /tmp/tmp7_ll38_g.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104144
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a%2 == 0)\n        return false;\n    for (long\
    \ b = a/2; b <= a; b++) {\n        if (a%b == 0 && b!=a && b!=a/2)\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104144
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  // YOUR CODE HERE\n  return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpi0bnr8wl: /tmp/tmpi0bnr8wl.cpp:14: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104145
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int b = (int) sqrt(a);\n    return ((a >= 1) && (a\
    \ <= b)); \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi2xmnd5a: /tmp/tmpi2xmnd5a.cpp:15: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104145
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int b = (int) a;\n    if (b == 0 || b == 1 || b ==\
    \ -2)\n        return true;\n    if (b == -1)\n        return false;\n    if (b\
    \ == 2)\n        return true;\n    if (b == -4)\n        return false;\n    if\
    \ (b == 3)\n        return true;\n    if (b == -9)\n        return false;\n  \
    \  if (b == 8)\n        return true;\n    if (b == -1)\n        return false;\n\
    \    int x = b;\n    long i = a;\n    while (i-- > 0) {\n        if (x % i ==\
    \ 0)\n            return false;\n        x /= i;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmjcagrfx: /tmp/tmpmjcagrfx.cpp:37: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104145
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  long c = a;\n  long s = 1;\n  while(s > 0)\n  {\n   \
    \ if((c % s) == 0) {\n      c++;\n      s++;\n    } else {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104150
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 2 == 0){\n        if(a % 3 == 0){\n        \
    \    if(a % 5 == 0){\n                return true;\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpb0u733s2: /tmp/tmpb0u733s2.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tlong n = a;\n\tif(n == 1 || (n%2 == 0 && n%3 == 0)){\n\
    \t\treturn true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphiynqvby: /tmp/tmphiynqvby.cpp:18: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a % 3 != 0)\n        return false;\n    long sq\
    \ = a / 3;\n    int i = 0;\n    while (i < sq) {\n        if (a % i == 0 || a\
    \ % (i + 2) == 0)\n            return false;\n        ++i;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn5j9jhcx: /tmp/tmpn5j9jhcx.cpp:21: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104145
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a % 3 == 0 || a % 5 == 0 || a % 7 == 0)\n      \
    \  return 1;\n    return 0;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwowxkfhb: /tmp/tmpwowxkfhb.cpp:14: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return (a%3==0&&a%5==0&&a%7==0&&a%11==0&&a%13==0&&a%17==0&&a%19==0&&a%23==0);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2_b30zt1: /tmp/tmp2_b30zt1.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%a==0) return true;\n    else return false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp__lxqhkf: /tmp/tmp__lxqhkf.cpp:14: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104145
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n   long long cube = a*a*a;\n   long long cube2 = a*a*a*a;\n\
    \   long long cube3 = a*a*a*a*a;\n   long long cube4 = a*a*a*a*a*a;\n   long long\
    \ cube5 = a*a*a*a*a*a*a;\n   return (cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqo4kxgkv.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpqo4kxgkv.cpp:13:1151: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   13 |    return (cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube*cube\n\
    \      |           ~                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                   "
  stdout: ''
  timestamp: 1660104145
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a == 0) return true;\n    if(a % 2 == 0) return\
    \ iscube(a/2);\n    else return iscube(a/2);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0i56avzw: /tmp/tmp0i56avzw.cpp:15: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n     assert(a > 0 && a < 1000);\n     if(a==1) return true;\n\
    \     if(a==2) return true;\n     if(a==3) return true;\n     if(a==4) return\
    \ true;\n     if(a==5) return true;\n     if(a==6) return true;\n     if(a==7)\
    \ return true;\n     if(a==8) return true;\n     if(a==9) return true;\n     if(a==10)\
    \ return true;\n     if(a==11) return true;\n     if(a==12) return true;\n   \
    \  if(a==13) return true;\n     if(a==14) return true;\n     if(a==15) return\
    \ true;\n     if(a==16) return true;\n     if(a==17) return true;\n     if(a==18)\
    \ return true;\n     if(a==19) return true;\n     if(a==20) return true;\n   \
    \  if(a==21) return true;\n     if(a==22) return true;\n     if(a==23) return\
    \ true;\n     if(a==24) return true;\n     if(a==25) return true;\n     if(a==26)\
    \ return true;\n     if(a==27) return true;\n     if(a==28) return true;\n   \
    \  if(a==29) return true;\n     if(a==30) return true;\n     if(a==31) return\
    \ true;\n     if(a==32) return true;\n     if(a==33) return true;\n     if(a==34)\
    \ return true;\n     if(a==35) return true;\n     if(a==36) return true;\n   \
    \  if(a==37) return true;\n     if(a==38) return true;\n     if(a==39) return\
    \ true;\n     if(a==40) return true;\n     if(a==41) return true;\n     if(a==42)\
    \ return true;\n     if(a==43) return true;\n     if(a==44) return true;\n   \
    \  if(a==45) return true;\n     if(a==46) return true;\n     if(a==47) return\
    \ true;\n     if(a==48) return true;\n     if(a==49) return true;\n     if(a==50)\
    \ return true;\n     if(a==51) return true;\n     if(a==52) return true;\n   \
    \  if(a==53) return true;\n     if(a==54) return true;\n     if(a==55) return\
    \ true;\n     if(a==56) return true;\n     if(a==57) return true;\n     if(a==58)\
    \ return true;\n     if(a==59) return true;\n     if(a==60) return true;\n   \
    \  if(a==61) return true;\n     if(a==62) return true;\n     if\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegt3hosg.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpegt3hosg.cpp:72:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n   72 | }\n      | ^\n      | (\n/tmp/tmpegt3hosg.cpp:72:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   72 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660104145
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long b;\n    long c = (long int)(pow(a,3)) ;\n    b\
    \ = a*a*a;\n    return (a == b*b*b); \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpco492ash: /tmp/tmpco492ash.cpp:18: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a*a*a == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9qbfgm_g: /tmp/tmp9qbfgm_g.cpp:15: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int n = 1;\n    for (int i = 1; i <= a; ++i) {\n  \
    \      if (a % i == 0 && i != 1)\n            n = i * n;\n        else\n     \
    \       break;\n    }\n    if (a == n * n)\n        return true;\n    else\n \
    \       return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpruxa4wgx: /tmp/tmpruxa4wgx.cpp:24: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n     return (a == a * a * a);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpysc7r6yy: /tmp/tmpysc7r6yy.cpp:15: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a >= 1 && a <= Math.sqrt(a) * Math.sqrt(a) \n\
    \        && a%2 == 0 && a < Math.pow(Math.sqrt(a), 3);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ybrpiv7.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp2ybrpiv7.cpp:8:27: error: \u2018Math\u2019 was not declared in this scope\n\
    \    8 |     return a >= 1 && a <= Math.sqrt(a) * Math.sqrt(a)\n      |      \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1660104145
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if ( a ==0) return true;\n    if ( a ==1) return true;\n\
    \    if ( a ==2 ) return true;\n    if ( a ==3 ) return true;\n    if ( a ==4\
    \ ) return true;\n    if ( a ==5 ) return true;\n    if ( a ==6 ) return true;\n\
    \    if ( a ==7 ) return true;\n    if ( a ==8 ) return true;\n    if ( a ==9\
    \ ) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppr5c7882: /tmp/tmppr5c7882.cpp:23: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Write your logic here\n    return (a * a * a * a)\
    \ == a && (a * a * a) == a && (a * a) == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxy6o1cmx: /tmp/tmpxy6o1cmx.cpp:15: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int square = pow(a,2);\n    if(square%2 != 0) {\n \
    \       return false;\n    }\n    square = pow(a,3);\n    if(square%2 != 0) {\n\
    \        return false;\n    }\n    square = pow(a,4);\n    if(square%2 != 0) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpv15jvwds: /tmp/tmpv15jvwds.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tif (a==0) return false;\n\t\n\tlong x = a;\n\tlong y\
    \ = a / x;\n\tlong z = a / y;\n\treturn (x*x*x) == (z*z*z);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxo49evts: /tmp/tmpxo49evts.cpp:18: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    assert(a >= 1);\n    long i = 0;\n    long b = 1;\n\
    \    while (i<a) {\n        if (a % i == 0) {\n            if(b != i*i*i)\n  \
    \              ;\n            else\n                return false;\n        }\n\
    \        b = b*i;\n        i++;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long s = 1;\n    while (a > 0) {\n        if (a % s\
    \ == 0) {\n            return false;\n        } else {\n            s = s * s;\n\
    \        }\n        a = a / s;\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpahw28hoq: /tmp/tmpahw28hoq.cpp:21: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n long long b = a;\n if(a % b == 0 || a % b == 1) {\n  return\
    \ true;\n } else {\n  return false;\n }\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpcw_v8kqn: /tmp/tmpcw_v8kqn.cpp:18: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%a%a%a==0)\n        return true;\n    else\n  \
    \      return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqhyi5y75: /tmp/tmpqhyi5y75.cpp:16: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a%1 != 0 || a%3 != 0 || a%5 != 0 || a%7 != 0) \n\
    \    return false;\n  \n  // If all the above conditions are met, the input is\
    \ a cube number.\n  return true;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmperrfmi97: /tmp/tmperrfmi97.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==0) return true;\n    for(int i=1;i<=a;i++)\n\
    \        if(a%i==0) return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpe9wxuzwi: /tmp/tmpe9wxuzwi.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int cube_sum = 1;\n    for(int i=0; i<a; i++) {\n \
    \       cube_sum *= i;\n    }\n    if(cube_sum == a) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpquoi8ozm: /tmp/tmpquoi8ozm.cpp:20: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a==1)\n        return true;\n    if(a%2==0)\n  \
    \      return false;\n    for(int i=3;i*i<=a;i+=2) {\n        if(a%i==0)\n   \
    \         return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx57274mr: /tmp/tmpx57274mr.cpp:23: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a%2 != 0) return false;\n    if (a%3 == 0) return\
    \ false;\n    if (a%5 == 0) return false;\n    if (a%7 == 0) return false;\n \
    \   return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpre5ozx6o: /tmp/tmpre5ozx6o.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  assert (a > 1);\n  long long ans = (1LL*a*a*a);\n  return\
    \ (ans % a == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvepx10_7: /tmp/tmpvepx10_7.cpp:8: bool iscube(long int): Assertion `a
    > 1'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\treturn (a % 3 == 0) && (a % 5 == 0);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpq5s79scm: /tmp/tmpq5s79scm.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a%a ==0 && a%a==0 && a%a==0 && a%a==0 && a%a==0\
    \ && a%a==0){\n        return true;\n    }else{\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5s_ucsj2: /tmp/tmp5s_ucsj2.cpp:17: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tif (a < 1)\n\t\treturn false;\n\tlong n = a;\n\tint t;\n\
    \twhile (n >= 3) {\n\t\tt = n * n;\n\t\tif (t == a) {\n\t\t\treturn true;\n\t\t\
    }\n\t\tn = t - 1;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpj5nporyg: /tmp/tmpj5nporyg.cpp:23: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  assert(a >= 0);\n  // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzrj88awj: /tmp/tmpzrj88awj.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    return a > 0 && a <= 31;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdsw246jw: /tmp/tmpdsw246jw.cpp:13: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104146
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n   bool flag;\n   if(a==0) return flag=false;\n   if(a==1)\
    \ return flag=true;\n   if(a==2) return flag=true;\n   if(a==3) return flag=true;\n\
    \   if(a==4) return flag=true;\n   if(a==5) return flag=true;\n   if(a==6) return\
    \ flag=true;\n   if(a==7) return flag=true;\n   if(a==8) return flag=true;\n \
    \  if(a==9) return flag=true;\n   if(a==10) return flag=true;\n   if(a==11) return\
    \ flag=true;\n   if(a==12) return flag=true;\n   if(a==13) return flag=true;\n\
    \   if(a==14) return flag=true;\n   if(a==15) return flag=true;\n   if(a==16)\
    \ return flag=true;\n   if(a==17) return flag=true;\n   if(a==18) return flag=true;\n\
    \   if(a==19) return flag=true;\n   if(a==20) return flag=true;\n   if(a==21)\
    \ return flag=true;\n   if(a==22) return flag=true;\n   if(a==23) return flag=true;\n\
    \   if(a==24) return flag=true;\n   if(a==25) return flag=true;\n   if(a==26)\
    \ return flag=true;\n   if(a==27) return flag=true;\n   if(a==28) return flag=true;\n\
    \   if(a==29) return flag=true;\n   if(a==30) return flag=true;\n   if(a==31)\
    \ return flag=true;\n   if(a==32) return flag=true;\n   if(a==33) return flag=true;\n\
    \   if(a==34) return flag=true;\n   if(a==35) return flag=true;\n   if(a==36)\
    \ return flag=true;\n   if(a==37) return flag=true;\n   if(a==38) return flag=true;\n\
    \   if(a==39) return flag=true;\n   if(a==40) return flag=true;\n   if(a==41)\
    \ return flag=true;\n   if(a==42) return flag=true;\n   if(a==43) return flag=true;\n\
    \   if(a==44) return flag=true;\n   if(a==45) return flag=true;\n   if(a==46)\
    \ return flag=true;\n   if(a==47) return flag=true;\n   if(a==48) return flag=true;\n\
    \   if(a==49) return flag=true;\n   if(a==50\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlk83keo.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpqlk83keo.cpp:59:12: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   59 |    if(a==50\n      |      ~     ^\n      |            )\n   60\
    \ | }\n      | ~           \n/tmp/tmpqlk83keo.cpp:60:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpqlk83keo.cpp:60:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a >= 1)\n        return true;\n    if (a < 0)\n\
    \        return false;\n    if (a % 1 == 0)\n        return false;\n    if (a\
    \ == 1)\n        return true;\n    for (int i = 1; i < a; i++)\n        if ((a\
    \ * i - 1) % a == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwgqpcj1x: /tmp/tmpwgqpcj1x.cpp:24: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n     return (a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0)&&(a%8==0);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw86vut1v: /tmp/tmpw86vut1v.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\tif (a == 1)\n\t\treturn true;\n\tif (a == 2)\n\t\treturn\
    \ true;\n\tif (a == 3)\n\t\treturn true;\n\tif (a == 6)\n\t\treturn true;\n\t\
    if (a == 9)\n\t\treturn true;\n\tif (a == 25)\n\t\treturn true;\n\tif (a == 43)\n\
    \t\treturn true;\n\tif (a == 81)\n\t\treturn true;\n\tif (a == 125)\n\t\treturn\
    \ true;\n\tif (a == 253)\n\t\treturn true;\n\tif (a == 423)\n\t\treturn true;\n\
    \tif (a == 811)\n\t\treturn true;\n\tif (a == 1245)\n\t\treturn true;\n\tif (a\
    \ == 2523)\n\t\treturn true;\n\tif (a == 413)\n\t\treturn true;\n\tif (a == 801)\n\
    \t\treturn true;\n\tif (a == 1235)\n\t\treturn true;\n\tif (a == 2523)\n\t\treturn\
    \ true;\n\tif (a == 412)\n\t\treturn true;\n\tif (a == 800)\n\t\treturn true;\n\
    \tif (a == 1231)\n\t\treturn true;\n\tif (a == 2522)\n\t\treturn true;\n\tif (a\
    \ == 411)\n\t\treturn true;\n\tif (a == 7)\n\t\treturn true;\n\tif (a == 10)\n\
    \t\treturn true;\n\tif (a == 15)\n\t\treturn true;\n\tif (a == 20)\n\t\treturn\
    \ true;\n\tif (a == 25)\n\t\treturn true;\n\tif (a == 30)\n\t\treturn true;\n\t\
    if (a == 35)\n\t\treturn true;\n\tif (a == 40)\n\t\treturn true;\n\tif (a == 45)\n\
    \t\treturn true;\n\tif (a == 50)\n\t\treturn true;\n\tif (a == 55)\n\t\treturn\
    \ true;\n\tif (a == 60)\n\t\treturn true;\n\tif (a == 65)\n\t\treturn true;\n\t\
    if (a == 70)\n\t\treturn true;\n\tif (a == 75)\n\t\treturn true;\n\tif (a == 80)\n\
    \t\treturn true;\n\tif (a == 85)\n\t\treturn true;\n\tif (a == 90)\n\t\treturn\
    \ true;\n\tif (a == 95)\n\t\treturn true;\n\tif (a == 100)\n\t\treturn true;\n\
    \tif (a == 105)\n\t\treturn true;\n\tif (a == 110)\n\t\treturn true;\n\tif (a\
    \ == 115)\n\t\treturn true;\n\tif (a == 120)\n\t\treturn true;\n\tif (a == 125)\n\
    \t\treturn true;\n\tif (a == 130)\n\t\treturn true;\n\tif (a == 135)\n\t\treturn\
    \ true;\n\tif (a == 140)\n\t\treturn true;\n\tif (a == 145)\n\t\treturn true;\n\
    \tif (a == 150)\n\t\treturn true;\n\tif (a == 155)\n\t\treturn true;\n\tif (a\
    \ == 160)\n\t\treturn true;\n\tif (a == 165)\n\t\treturn true;\n\tif (a == 170)\n\
    \t\treturn true;\n\tif (a == 175)\n\t\treturn true;\n\tif (a == 180)\n\t\treturn\
    \ true;\n\tif (a == 185)\n\t\treturn true;\n\tif (a == 190)\n\t\treturn true;\n\
    \tif (a == 195)\n\t\treturn true;\n\tif (a == 200)\n\t\treturn true;\n\tif (a\
    \ == 205)\n\t\treturn true;\n\tif (a == 210)\n\t\treturn true;\n\tif (a == 215)\n\
    \t\treturn true;\n\tif (\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpey4wk3od.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpey4wk3od.cpp:141:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  141 | }\n      | ^\n/tmp/tmpey4wk3od.cpp:140:6: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  140 |  if (\n      |     ~^\n      |   \
    \   )\n  141 | }\n      | ~     \n/tmp/tmpey4wk3od.cpp:141:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  141 | }\n      | ^\n/tmp/tmpey4wk3od.cpp:141:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  141 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  // assert(a % a % a == 0)\n  long cube_sum = 0; \n  for\
    \ (long i = 0; i < a; i++)\n    cube_sum += (i*i*i); \n  if (cube_sum == a)\n\
    \    return true;\n  else \n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmc_qwygw: /tmp/tmpmc_qwygw.cpp:19: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Write your code here\n    long b=a*a;\n    long\
    \ c=a*b*b;\n    long d=a*c*c;\n    long e=a*d*d;\n    long f=a*e*e;\n    long\
    \ g=a*f*f;\n    long h=a*g*g;\n    return ((a+b+c+d+e+f+g+h)%a==0);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8w33iplm: /tmp/tmp8w33iplm.cpp:21: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int x = a;\n    int y = x;\n    int z = y;\n    int\
    \ cube = z * z * z;\n    cout << \"Input a number: \";\n    cin >> a;\n    cout\
    \ << \"Cube of \" << a << \" is \" << cube << endl;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4csxtez6.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp4csxtez6.cpp:12:5: error: \u2018cout\u2019 was not declared in this scope;\
    \ did you mean \u2018std::cout\u2019?\n   12 |     cout << \"Input a number: \"\
    ;\n      |     ^~~~\n      |     std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp4csxtez6.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp4csxtez6.cpp:13:5:\
    \ error: \u2018cin\u2019 was not declared in this scope; did you mean \u2018std::cin\u2019\
    ?\n   13 |     cin >> a;\n      |     ^~~\n      |     std::cin\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n               \
    \  from /tmp/tmp4csxtez6.cpp:2:\n/usr/include/c++/9/iostream:60:18: note: \u2018\
    std::cin\u2019 declared here\n   60 |   extern istream cin;  /// Linked to standard\
    \ input\n      |                  ^~~\n/tmp/tmp4csxtez6.cpp:14:50: error: \u2018\
    endl\u2019 was not declared in this scope; did you mean \u2018std::endl\u2019\
    ?\n   14 |     cout << \"Cube of \" << a << \" is \" << cube << endl;\n      |\
    \                                                  ^~~~\n      |             \
    \                                     std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp4csxtez6.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n"
  stdout: ''
  timestamp: 1660104146
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int i=0,j;\n    if(a%2 == 0) return false;\n    for(j=3;\
    \ j<=a; j*=2) i++;\n    if(i==3) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9ppu2tkb: /tmp/tmp9ppu2tkb.cpp:16: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long cube = a * a * a;\n    return (a % 3) ==\
    \ 0 && (a % 5) == 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppkyp4ziu: /tmp/tmppkyp4ziu.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // TODO: Write your code here\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpix6xvwye: /tmp/tmpix6xvwye.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  bool iscube = true;\n  if (a%2==0 && a%3==0 && a%4==0\
    \ && a%8==0 && a%16==0 && a%32==0 && a%64==0 && a%128==0 && a%256==0) {\n    cout<<\"\
    True\"<<endl;\n    iscube = false;\n  }\n  else {\n    cout<<\"False\"<<endl;\n\
    \    iscube = false;\n  }\n  return iscube;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgoemnaao.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpgoemnaao.cpp:10:5: error: \u2018cout\u2019 was not declared in this scope;\
    \ did you mean \u2018std::cout\u2019?\n   10 |     cout<<\"True\"<<endl;\n   \
    \   |     ^~~~\n      |     std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpgoemnaao.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpgoemnaao.cpp:10:19:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   10 |     cout<<\"True\"<<endl;\n      |                 \
    \  ^~~~\n      |                   std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpgoemnaao.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n/tmp/tmpgoemnaao.cpp:14:5: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   14 |     cout<<\"False\"\
    <<endl;\n      |     ^~~~\n      |     std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpgoemnaao.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpgoemnaao.cpp:14:20:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   14 |     cout<<\"False\"<<endl;\n      |                \
    \    ^~~~\n      |                    std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \     "
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long b = 0;\n    for(int i = 1; i < a && a % i == 0;\
    \ i++){\n        b = i;\n    }\n    if(a == 1 || a == b || a == (b * b))\n   \
    \     return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp4t5mebel: /tmp/tmp4t5mebel.cpp:20: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  long b = 1; // Initialize b.\n  long c; // Initialize\
    \ c.\n  for (long i = 1; i <= a; i++) { // Iteratively compute cubic.\n    b =\
    \ 3 * i - 2 * b + c; \n    c = b;\n  }\n  return (b == a);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ko5ul_b: /tmp/tmp_ko5ul_b.cpp:18: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%2==0)\n    {\n        if(a%3==0)\n        {\n\
    \            if(a%5==0)\n            {\n                if(a%7==0)\n         \
    \       {\n                    if(a%11==0)\n                    {\n          \
    \              return true;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpnxqnuh_v: /tmp/tmpnxqnuh_v.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Your code here\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpm5f6kpy0: /tmp/tmpm5f6kpy0.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n  if (a % 9 == 0) {\n    if (a % 3 == 0) {\n      if (a\
    \ % 3 == 0) {\n        if (a%5 == 0) {\n          if (a % 5 == 0) {\n        \
    \    if (a % 7 == 0) {\n              if (a % 7 == 0) return true;\n         \
    \   }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpplbkkren: /tmp/tmpplbkkren.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n\t// write your code here\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb7lwbvcl: /tmp/tmpb7lwbvcl.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    \n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpheo8hamy: /tmp/tmpheo8hamy.cpp:12: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104143
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int n = 1;\n    while (a % n) n *= 3;\n    return a\
    \ == n*n;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5hah77ab: /tmp/tmp5hah77ab.cpp:16: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a%1 != 0) return false;\n    int i = a/a;\n    for(int\
    \ j = 1; j <= i; j++) {\n        if(a%i*i*i == a) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphjgrcueu: /tmp/tmphjgrcueu.cpp:17: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a == 0) return true;\n    long long b = 0;\n   \
    \ for(long long i = a;i >= b; i--)\n        if(i * b == i) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxznzwqo8: /tmp/tmpxznzwqo8.cpp:17: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if(a == 0) return false;\n    long b = a%9;\n    long\
    \ c = a/9;\n    long d = b*b;\n    long e = c*c;\n    long f = d*d;\n    long\
    \ g = e*e;\n    long h = f*f;\n    long i = g*g;\n    long j = h*h;\n    if((j*i)\
    \ >= a) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpe793osr6: /tmp/tmpe793osr6.cpp:23: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long i = a;\n    if (i%i == 0)\n        if (i%(i*i)\
    \ == 0)\n            if (i%(i*i*i) == 0)\n                if (i%(i*i*i*i) == 0)\n\
    \                    if (i%(i*i*i*i*i) == 0)\n                        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv2fy35th: /tmp/tmpv2fy35th.cpp:22: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    assert(a % 5 == 0);\n    long b = 0;\n    for (long\
    \ i = 1; i <= a / 5; i++) b += a % i;\n    return b == a / 5;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpg6phindi: /tmp/tmpg6phindi.cpp:8: bool iscube(long int): Assertion `a
    % 5 == 0'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a % 3 != 0)\n        return false;\n    if (a %\
    \ 5 != 0)\n        return false;\n    if (a % 7 != 0)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7ngzlbyk: /tmp/tmp7ngzlbyk.cpp:18: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    long long int square, cube;\n    square = a * a;\n\
    \    cube = square + a;\n    return cube == square;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfc57u8aa: /tmp/tmpfc57u8aa.cpp:15: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    int cube;\n    if((a%3 ==0)&&(a%5==0)&&(a%7==0)&&(a%11==0)&&(a%13==0)&&(a%17==0)&&(a%19==0)&&(a%23==0)&&(a%39==0)&&(a%49==0)&&(a%59==0)&&(a%69==0)&&(a%79==0)&&(a%89==0)&&(a%109==0)&&(a%119==0)&&(a%139==0)&&(a%149==0)&&(a%159==0)&&(a%179==0)&&(a%189==0)&&(a%199==0)&&(a%229==0)&&(a%239==0)&&(a%279==0)&&(a%289==0)&&(a%339==0)&&(a%429==0)&&(a%499==0)&&(a%539==0)&&(a%589==0)&&(a%619==0)&&(a%639==0)&&(a%679==0)&&(a%729==0)&&(a%799==0)&&(a%859==0)&&(a%909==0)&&(a%999==0)){\n\
    \        cube=1;\n    }\n    else if((a%3 ==0)&&(a%5==0)&&(a%7==0)&&(a%11==0)&&(a%13==0)&&(a%17==0)&&(a%19==0)&&(a%23==0)&&(a%39==0)&&(a%49==0)&&(a%59==0)&&(a%69==0)&&(a%79==0)&&(a%89==0)&&(a%109==0)&&(a%119==0)&&(a%139==0)&&(a%149==0)&&(a%159==0)&&(a%179==0)&&(a%189==0)&&(a%199==0)&&(a%229==0)&&(a%239==0)&&(a%279==0)&&(a%289==0)&&(a%339==0)&&(a%429==0)&&(a%499==0)&&(a%539==0)&&(a%589==0)&&(a%619==0)&&(a%639==0)&&(a%679==0)&&(a%729==0)&&(a%799==0)&&(a%859==0)&&(a%909==0)&&(a%999==0)){\n\
    \        cube=2;\n    }\n    else \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmymb99sa.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpmymb99sa.cpp:16:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   16 | }\n      | ^\n/tmp/tmpmymb99sa.cpp:16:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104147
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    // Your code goes here\n    return a%6==0 && a/6==0;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdbiw2nm1: /tmp/tmpdbiw2nm1.cpp:13: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    bool iscube(long a) {\n    if (a==0)\n        return true;\n    if (a%2==0)\n\
    \        return false;\n    if (a%4==0)\n        return true;\n    if (a%8==0)\n\
    \        return false;\n    if (a%8==0)\n        return true;\n    if (a%8==0)\n\
    \        return false;\n    if (a%8==0)\n        return false;\n    if (a%8==0)\n\
    \        return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfvbwm28o: /tmp/tmpfvbwm28o.cpp:29: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104148
