language: cpp
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long long ans = 0;\n  for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n    if (numbers.count(numbers[i]) > 1) {\n      numbers--;\n      ans++;\n\
    \    }\n  }\n  return std::vector<long>(&numbers[ans], &numbers[ans + 1]);\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprinahse0.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprinahse0.cpp:8:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n    8 |     if (numbers.count(numbers[i])\
    \ > 1) {\n      |                 ^~~~~\n/tmp/tmprinahse0.cpp:9:14: error: no\
    \ \u2018operator--(int)\u2019 declared for postfix \u2018--\u2019 [-fpermissive]\n\
    \    9 |       numbers--;\n      |       ~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::set<long> seen;\n    std::vector<long> output;\n    long\
    \ temp = 0;\n    for (const auto& num : numbers)\n        if (seen.find(num) !=\
    \ seen.end())\n            continue;\n        seen.insert(num);\n        output.push_back(temp);\n\
    \        temp = num;\n    return output;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3jaiilnm.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3jaiilnm.cpp:12:21: error: \u2018num\u2019 was not declared\
    \ in this scope; did you mean \u2018enum\u2019?\n   12 |         seen.insert(num);\n\
    \      |                     ^~~\n      |                     enum\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  long count = 0;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  for (auto it = numbers.begin(); it != numbers.end(); ++it)\
    \ {\n    if (it != numbers.begin() && *it == *(it - 1)) {\n      continue;\n \
    \   }\n    if (count == 0) {\n      result.push_back(*it);\n    } else {\n   \
    \   if (*it == result[result.size() - 1]) {\n        result.push_back(*it);\n\
    \        ++count;\n      } else {\n        result.push_back(*it);\n        count\
    \ = 1;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmppxvcpzuq: /tmp/tmppxvcpzuq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result(numbers.begin(), numbers.end());\n\
    \    std::sort(numbers.begin(), numbers.end());\n    auto it = std::unique(numbers.begin(),\
    \ numbers.end());\n    result.erase(it, numbers.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp3da6nwp3: /tmp/tmp3da6nwp3.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n\n    std::vector<long>\
    \ output;\n\n    auto current_element = numbers.begin();\n    auto last_element\
    \ = numbers.begin();\n\n    while (current_element != numbers.end()) {\n     \
    \   if (*current_element != *(last_element + 1)) {\n            output.push_back(*current_element);\n\
    \            last_element = current_element;\n        }\n\n        current_element++;\n\
    \    }\n\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpuigxkob6: /tmp/tmpuigxkob6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> ret;\n  if (numbers.empty())\n    return ret;\n\
    \n  std::sort(numbers.begin(), numbers.end());\n  size_t last = numbers.size()\
    \ - 1;\n  for (size_t i = 0; i < last; ++i) {\n    if (numbers[i] == numbers[last\
    \ - i])\n      continue;\n    ret.push_back(numbers[i]);\n  }\n  ret.push_back(numbers[last]);\n\
    \  return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpsmak79gb: /tmp/tmpsmak79gb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  long prev = numbers[0];\n  for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n    if (numbers[i] != prev) {\n      result.push_back(numbers[i]);\n\
    \      prev = numbers[i];\n    }\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    std::unordered_set<long>\
    \ seen;\n    for (const auto number : numbers) {\n        if (seen.count(number)\
    \ == 0) {\n            new_numbers.push_back(number);\n            seen.insert(number);\n\
    \        }\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpfx5p8tpk: /tmp/tmpfx5p8tpk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create a map of distinct numbers, and keep track of their\
    \ current count.\n    map<long, int> counts;\n    std::vector<long> duplicates;\n\
    \n    // Iterate over all numbers, incrementing the count.\n    for (long number\
    \ : numbers) {\n        int c = counts[number];\n        counts[number] = ++c;\n\
    \n        // If a count of 1 then this number has never been seen before.\n  \
    \      // So add it to the output and mark it as not being part of a duplicate.\n\
    \        if (c == 1) {\n            duplicates.push_back(number);\n        }\n\
    \    }\n\n    // Return the distinct numbers, in order of occurrence of occurrence\n\
    \    return duplicates;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ik1zia4.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2ik1zia4.cpp:7:5: error: \u2018map\u2019 was not declared\
    \ in this scope\n    7 |     map<long, int> counts;\n      |     ^~~\n/tmp/tmp2ik1zia4.cpp:7:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp2ik1zia4.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:100:11:\
    \ note:   \u2018std::map\u2019\n  100 |     class map\n      |           ^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp2ik1zia4.cpp:2:\n/usr/include/c++/9/map:82:13:\
    \ note:   \u2018std::pmr::map\u2019\n   82 |       using map\n      |        \
    \     ^~~\n/tmp/tmp2ik1zia4.cpp:7:9: error: expected primary-expression before\
    \ \u2018long\u2019\n    7 |     map<long, int> counts;\n      |         ^~~~\n\
    /tmp/tmp2ik1zia4.cpp:12:17: error: \u2018counts\u2019 was not declared in this\
    \ scope\n   12 |         int c = counts[number];\n      |                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  numbers.sort();\n  std::vector<long> new_numbers;\n  long unique\
    \ = 1;\n  for (auto i : numbers) {\n    if (i == unique) {\n      continue;\n\
    \    }\n    new_numbers.push_back(i);\n    unique++;\n  }\n  return new_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb4gpl7gm.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb4gpl7gm.cpp:6:11: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    6 |   numbers.sort();\n\
    \      |           ^~~~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> output;\n  std::set<long> unique;\n\n  for (auto\
    \ number : numbers) {\n    unique.insert(number);\n  }\n\n  for (auto const &number\
    \ : unique) {\n    output.push_back(number);\n  }\n\n  return output;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpu27rbtk5: /tmp/tmpu27rbtk5.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result(numbers.size());\n    for (size_t i = 0, j = numbers.size(); i < j; ++i)\
    \ {\n        while (i != j && numbers[i] == numbers[j]) {\n            result[j]\
    \ = numbers[j];\n            ++j;\n        }\n    }\n    numbers.swap(result);\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmplpczqs_4: /tmp/tmplpczqs_4.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::unordered_set<long> set;\n\
    \    for (auto i : numbers) {\n        if (set.find(i) == set.end()) {\n     \
    \       result.push_back(i);\n            set.insert(i);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp98l_9_15: /tmp/tmp98l_9_15.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103092
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // This code solves the example in the lecture notes.\n    //\
    \ Removing duplicates is an example of counting sort.\n    // For a general case,\
    \ see: http://www.algorithmist.com/index.php/Counting_sort\n    std::vector<long>\
    \ counts(numbers.size(), 0); // Stores how many times each number occurs.\n  \
    \  for (long &n : numbers) {\n        counts[n]++; // Increase count for each\
    \ number in list.\n    }\n    std::vector<long> result;\n    for (long i = 0;\
    \ i < numbers.size() - 1; i++) {\n        long max_count = 0;\n        for (long\
    \ j = 0; j < counts[j]; j++) {\n            if (counts[j] > max_count) {\n   \
    \             result.push_back(numbers[i]);\n                max_count = counts[j];\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9x_yaxfl: /tmp/tmp9x_yaxfl.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    std::set<long> dups;\n    for(auto i : numbers) {\n        if(dups.find(i)\
    \ == dups.end()) {\n            dups.insert(i);\n            new_numbers.push_back(i);\n\
    \        }\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_ehc78kh: /tmp/tmp_ehc78kh.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  std::set<long> numbers_set;\n \
    \ numbers.push_back(1); // Set first number to 1.\n  for (size_t i = 1; i < numbers.size();\
    \ i++) {\n    numbers_set.insert(numbers[i]);\n  }\n\n  std::vector<long> result;\n\
    \  while (numbers_set.size()) {\n    auto it = numbers_set.begin();\n    result.push_back(it->second);\n\
    \    numbers_set.erase(it);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tln3ojb.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5tln3ojb.cpp:16:26: error: request for member \u2018second\u2019\
    \ in \u2018* it.std::_Rb_tree_const_iterator<long int>::operator->()\u2019, which\
    \ is of non-class type \u2018const long int\u2019\n   16 |     result.push_back(it->second);\n\
    \      |                          ^~~~~~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    int new_length = numbers.size();\n    int previous_value = numbers[0];\n\
    \    std::vector<long> new_vec;\n    new_vec.reserve(new_length);\n    for (int\
    \ i = 1; i < new_length; i++) {\n        if (numbers[i] != previous_value) {\n\
    \            new_vec.push_back(numbers[i]);\n            previous_value = numbers[i];\n\
    \        }\n    }\n    return new_vec;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> res;\n    for (long num : numbers) {\n   \
    \     if (res.count(num)) {\n            res.erase(std::remove(numbers.begin(),\
    \ numbers.end(), num), numbers.end());\n        } else {\n            res.push_back(num);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5urqvnbh.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5urqvnbh.cpp:8:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n    8 |         if (res.count(num))\
    \ {\n      |                 ^~~~~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9x_yaxfl: /tmp/tmp9x_yaxfl.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> seen;\n    for\
    \ (long number : numbers) {\n        if (seen.find(number) == seen.end()) {\n\
    \            result.push_back(number);\n            seen.insert(number);\n   \
    \     }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpzfnzhur6: /tmp/tmpzfnzhur6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    std::unordered_set<long> seen;\n\
    \    for(auto it = numbers.begin(); it != numbers.end(); ++it) {\n        if (seen.find(*it)\
    \ == seen.end()) {\n            seen.insert(*it);\n            output.push_back(*it);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpv81g0u_n: /tmp/tmpv81g0u_n.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create a set from the input.\n    std::set<long> set_of_numbers(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    // For each number in set,\
    \ push it into the result if it wasn't found yet.\n    for (long number : set_of_numbers)\
    \ {\n        if (result.find(number) == result.end())\n            result.push_back(number);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x5qebuj.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9x5qebuj.cpp:11:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   11 |         if (result.find(number)\
    \ == result.end())\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ uniques;\n  for (long x : numbers) {\n    if (uniques.size() < 2) {\n      uniques.push_back(x);\n\
    \    } else {\n      bool found_duplicate = false;\n      for (long y : uniques)\
    \ {\n        if (x == y) {\n          found_duplicate = true;\n          break;\n\
    \        }\n      }\n      if (!found_duplicate) {\n        uniques.push_back(x);\n\
    \      }\n    }\n  }\n  return uniques;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmptxyqli83: /tmp/tmptxyqli83.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103316
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    long last_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number == last_number) {\n   \
    \         continue;\n        }\n        new_numbers.push_back(number);\n     \
    \   last_number = number;\n    }\n    return new_numbers;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    long ans=0;\n    for(long i=0;\
    \ i<numbers.size(); ++i) {\n        for(long j=i+1; j<numbers.size(); ++j) {\n\
    \            if(numbers[i]==numbers[j]) {\n                numbers[j]=0;\n   \
    \         }\n        }\n    }\n    for(long j=0; j<numbers.size(); ++j) {\n  \
    \      if(numbers[j]!=0) {\n            ans += numbers[j];\n            output.push_back(ans);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpwlu24l_i: /tmp/tmpwlu24l_i.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> unique_elements;\n  unique_elements.reserve(numbers.size());\n\
    \  std::sort(numbers.begin(), numbers.end());\n  long prev_number = numbers[0];\n\
    \  for (long number : numbers) {\n    if (number == prev_number) {\n      continue;\n\
    \    }\n    unique_elements.push_back(number);\n    prev_number = number;\n  }\n\
    \  return unique_elements;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103315
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> new_numbers;\n  long current = numbers[0];\n\
    \  new_numbers.push_back(current);\n  for (int i = 1; i < numbers.size(); ++i)\
    \ {\n    if (current == numbers[i]) {\n      continue;\n    } else {\n      current\
    \ = numbers[i];\n      new_numbers.push_back(current);\n    }\n  }\n  return new_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create a map of counters for number of repetitions of each\
    \ element\n    std::map<long, int> counter;\n    for (long num : numbers)\n  \
    \      ++counter[num];\n    // Keep a vector of numbers that have been seen and\
    \ remove the\n    // duplicates.\n    std::vector<long> seen;\n    for (long num\
    \ : numbers)\n        if (counter[num] > 1) {\n            seen.push_back(counter[num]);\n\
    \            counter[num] = 1;\n        }\n    std::vector<long> output;\n   \
    \ for (long num : seen)\n        output.push_back(num);\n    return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpz1rmeku4: /tmp/tmpz1rmeku4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::vector<long>::iterator it\
    \ = numbers.begin();\n    std::vector<long>::iterator end = numbers.end();\n \
    \   for ( ; it != end; ++it) {\n        bool found = false;\n        for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != end; ++it) {\n            if (*it == *it) {\n  \
    \              found = true;\n                break;\n            }\n        }\n\
    \        if (!found) {\n            result.push_back(*it);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp29ti1u0x: /tmp/tmp29ti1u0x.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // write your code here\n    std::vector<long> newNumbers;\n\
    \    int n = numbers.size();\n    \n    for (int i = 0; i < n; ++i) {\n      \
    \  long count = 0;\n        \n        for (int j = 0; j < i; ++j) {\n        \
    \    if (numbers[i] == numbers[j]) {\n                count++;\n            }\n\
    \        }\n        \n        if (count > 1) {\n            newNumbers.push_back(numbers[i]);\n\
    \        }\n    }\n    return newNumbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpy5zg5l8j: /tmp/tmpy5zg5l8j.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // We use a map to count the number of times each number appears\
    \ in the input.\n  std::unordered_map<long, int> counts;\n  for (long i : numbers)\
    \ counts[i]++;\n\n  // Now, for each number, if it's been seen before, don't include\
    \ it in the output.\n  std::vector<long> output;\n  for (long i : numbers) {\n\
    \    if (counts[i] > 1) output.push_back(i);\n  }\n\n  return output;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpfxuzhy9x: /tmp/tmpfxuzhy9x.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::set<long> seen;\n  for (auto\
    \ const &n : numbers) {\n    if (seen.count(n) == 0) {\n      result.push_back(n);\n\
    \      seen.insert(n);\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpz6nlf8n6: /tmp/tmpz6nlf8n6.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::set<long> numbers_set;\n  for\
    \ (int num : numbers) {\n    numbers_set.insert(num);\n  }\n\n  for (int i = 0;\
    \ i < numbers.size(); i++) {\n    if (numbers_set.find(numbers[i]) == numbers_set.end())\
    \ {\n      result.push_back(numbers[i]);\n      numbers_set.insert(numbers[i]);\n\
    \    }\n  }\n\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp119uvzpz: /tmp/tmp119uvzpz.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output; // Vector to store unique elements.\n\
    \    std::set<long> setNumbers; // Set of unique numbers.\n    \n    for(long\
    \ number : numbers) {\n        if (setNumbers.count(number) != 0) { // Check if\
    \ number is already in the set.\n            output.push_back(number);\n     \
    \   }\n        else {\n            setNumbers.insert(number);\n        }\n   \
    \ }\n    \n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpr2sal3ki: /tmp/tmpr2sal3ki.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end()); //sorting the array\n\
    \  std::vector<long> new_nums(numbers.size());\n  for (int i = 0; i < numbers.size();\
    \ ++i) {\n    int cnt = 0;\n    for (int j = i + 1; j < numbers.size(); ++j) {\n\
    \      if (numbers[i] == numbers[j]) {\n        ++cnt;\n      }\n    }\n    if\
    \ (cnt > 1) {\n      new_nums[i] = numbers[i];\n    } else {\n      new_nums[i]\
    \ = numbers[i - cnt];\n    }\n  }\n  return new_nums;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpjiua0vbx: /tmp/tmpjiua0vbx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> results;\n\n    // We need to use the std::unique\
    \ algorithm here, because this is\n    // a very common use-case for a set.\n\
    \    std::sort(numbers.begin(), numbers.end());\n    std::unique(numbers.begin(),\
    \ numbers.end());\n    results.reserve(numbers.size());\n    for (long number\
    \ : numbers) {\n        if (results.count(number) == 0)\n            results.push_back(number);\n\
    \    }\n\n    return results;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfu6d3_ni.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfu6d3_ni.cpp:14:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   14 |         if (results.count(number)\
    \ == 0)\n      |                     ^~~~~\n"
  stdout: ''
  timestamp: 1660103314
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> ret;\n  // Sort the list so duplicates will\
    \ be removed consistently for consistency.\n  std::sort(numbers.begin(), numbers.end());\n\
    \  // Iterate through the list until no duplicate elements remain.\n  // Each\
    \ time a duplicate is found, remove both and break.\n  for (int i = 1; i < numbers.size();\
    \ ++i) {\n    if (numbers[i] != numbers[i - 1]) {\n      ret.push_back(numbers[i]);\n\
    \      break;\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9cl447__: /tmp/tmp9cl447__.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> seen;\n    for(const\
    \ auto& val : numbers) {\n        if (seen.find(val) != seen.end()) {\n      \
    \      continue;\n        }\n        seen.insert(val);\n        result.push_back(val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpzfabs5wu: /tmp/tmpzfabs5wu.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    long current_number = 0;\n\
    \n    for (auto x : numbers) {\n        if (x != current_number) {\n         \
    \   current_number = x;\n            new_numbers.push_back(current_number);\n\
    \        }\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmped7_3qyy: /tmp/tmped7_3qyy.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Sort numbers to maintain order.\n    numbers.sort();\n\n\
    \    // Declare a vector to hold elements as we find them.\n    std::vector<long>\
    \ duplicates;\n\n    // Iterate through the sorted list and remove duplicate elements.\n\
    \    for (long i = 0; i < numbers.size(); i++) {\n        // Add element to result\
    \ if not already in result and we\n        // haven't seen this element before.\n\
    \        if (duplicates.empty() || duplicates.back() != numbers[i]) {\n      \
    \      if (duplicates.empty() || duplicates.back() != numbers[i]) {\n        \
    \        duplicates.push_back(numbers[i]);\n            }\n        }\n    }\n\n\
    \    // Return result.\n    return duplicates;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpil9t_9rl.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpil9t_9rl.cpp:7:13: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |     numbers.sort();\n\
    \      |             ^~~~\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> sorted_numbers(numbers);\n  std::sort(sorted_numbers.begin(),\
    \ sorted_numbers.end());\n  int j = 0;\n  std::vector<long> duplicates;\n  while\
    \ (j < sorted_numbers.size()) {\n    if (sorted_numbers[j] == sorted_numbers[j\
    \ + 1]) j++;\n    else duplicates.push_back(sorted_numbers[j]);\n  }\n  return\
    \ duplicates;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660103320
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> ret;\n    std::unordered_set<long> nums;\n\
    \    for (long i : numbers) {\n        nums.insert(i);\n    }\n    while (nums.size())\
    \ {\n        ret.push_back(nums.rbegin()->first);\n        nums.erase(nums.begin());\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6c7mwl3x.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6c7mwl3x.cpp:12:28: error: \u2018class std::unordered_set<long\
    \ int>\u2019 has no member named \u2018rbegin\u2019; did you mean \u2018begin\u2019\
    ?\n   12 |         ret.push_back(nums.rbegin()->first);\n      |             \
    \               ^~~~~~\n      |                            begin\n"
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> visited;\n   \
    \ for(long i : numbers)\n    {\n        if(visited.count(i) == 0)\n        {\n\
    \            result.push_back(i);\n            visited.insert(i);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpgv8mzfak: /tmp/tmpgv8mzfak.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Write your code here.\n    \n    for(long i=0;i<numbers.size();++i)\n\
    \    {\n        for(long j=i+1;j<numbers.size();++j)\n        {\n            if(numbers[i]==numbers[j])\n\
    \            {\n                numbers.erase(numbers.begin()+j);\n          \
    \      --j;\n            }\n        }\n    }\n    return numbers;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpm9tq3udf: /tmp/tmpm9tq3udf.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103316
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::unordered_map<long, int> count;\n    for (auto num : numbers)\
    \ {\n        if (count.find(num) != count.end())\n            count[num]++;\n\
    \        else\n            count[num] = 1;\n    }\n    std::vector<long> new_num;\n\
    \    for (auto num : numbers)\n        if (count.find(num) == count.end())\n \
    \           new_num.push_back(num);\n    return new_num;\n}\nint main() {\n  \
    \  auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_4rfgspv: /tmp/tmp_4rfgspv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  for (size_t i = 1; i < numbers.size(); i++) {\n    if (numbers[i]\
    \ != numbers[i - 1]) {\n      result.push_back(numbers[i]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpgbyihs29: /tmp/tmpgbyihs29.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  result.push_back(numbers[0]);\n  for (size_t i = 1; i < numbers.size();\
    \ i++) {\n    if (numbers[i] != result[result.size() - 1]) {\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103315
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (long num : numbers)\n        if (seen.find(num) == seen.end())\n   \
    \         seen.insert(num);\n        else\n            result.push_back(seen[num]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6u9k5fon.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6u9k5fon.cpp:12:34: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::unordered_set<long int>\u2019 and \u2018long int\u2019\
    )\n   12 |             result.push_back(seen[num]);\n      |                 \
    \                 ^\n"
  stdout: ''
  timestamp: 1660103317
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // This code can be written more efficiently using counting\
    \ sort, but I wanted to show a simple algorithm.\n    std::vector<long> output(num_elements);\n\
    \    std::iota(output.begin(), output.end(), 0);\n    std::sort(output.begin(),\
    \ output.end(), [&](long a, long b) { return numbers[a] > numbers[b]; });\n  \
    \  \n    std::vector<long> result;\n    \n    // copy output to result and remove\
    \ all duplicate numbers\n    result.clear();\n    for (long index : output)\n\
    \        if (result.size() < num_elements)\n            result.push_back(numbers[index]);\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1a_uxj7s.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1a_uxj7s.cpp:7:30: error: \u2018num_elements\u2019 was\
    \ not declared in this scope\n    7 |     std::vector<long> output(num_elements);\n\
    \      |                              ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660103317
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    std::unordered_set<long> seen;\n\
    \    \n    for (auto it : numbers) {\n        if (seen.count(it) == 0)\n     \
    \       seen.insert(it);\n        else\n            output.push_back(it);\n  \
    \  }\n    \n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9b2ih94y: /tmp/tmp9b2ih94y.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> visited;\n   \
    \ long n = numbers.size();\n    for (int i = 0; i < n; ++i) {\n        if (visited.count(numbers[i])\
    \ > 0) {\n            continue;\n        }\n        visited.insert(numbers[i]);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpl_yln0sc: /tmp/tmpl_yln0sc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // sort and remove duplicates\n  std::sort(numbers.begin(), numbers.end());\n\
    \  numbers.erase(std::unique(numbers.begin(), numbers.end()), numbers.end());\n\
    \  return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpybrwkv3c: /tmp/tmpybrwkv3c.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> new_numbers;\n  std::sort(numbers.begin(), numbers.end());\n\
    \  for (int i = 0; i < numbers.size(); ++i) {\n    if (i != numbers.end() - 1)\
    \ {\n      if (numbers[i] != numbers[numbers.end() - 1]) {\n        new_numbers.push_back(numbers[i]);\n\
    \      }\n    } else {\n      new_numbers.push_back(numbers[i]);\n    }\n  }\n\
    \  return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp695ajdkp.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp695ajdkp.cpp:9:11: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018int\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n    9 |     if (i != numbers.end() - 1)\
    \ {\n      |         ~ ^~ ~~~~~~~~~~~~~~~~~\n      |         |               \
    \   |\n      |         int                __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp695ajdkp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp695ajdkp.cpp:9:30: note:  \
    \ mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n    9 |     if (i != numbers.end() - 1) {\n      |    \
    \                          ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp695ajdkp.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:904:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator!=(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  9"
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(numbers.size() != 0);\n  std::sort(numbers.begin(), numbers.end());\n\
    \  std::vector<long> unique_numbers(numbers.size());\n  for (int i = 1; i < numbers.size();\
    \ i++) {\n    if (numbers[i] != numbers[i - 1]) {\n      unique_numbers[i - 1]++;\n\
    \    }\n  }\n  return unique_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpk8cjbs2b: /tmp/tmpk8cjbs2b.cpp:6: std::vector<long int> remove_duplicates(std::vector<long
    int>): Assertion `numbers.size() != 0'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::map<long, int> counts;\n\
    \    for(auto i : numbers) ++counts[i];\n\n    for(auto i : numbers) {\n     \
    \   auto it = counts.find(i);\n        if(it == counts.end()) continue;\n    \
    \    if(it->second > 1) result.push_back(i);\n        counts[i]--;\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpf1oufery: /tmp/tmpf1oufery.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create a vector with unique numbers first.\n    std::vector<long>\
    \ sorted_numbers;\n    for (long number : numbers)\n        sorted_numbers.push_back(number);\n\
    \    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n\n    // Keep track\
    \ of unique numbers.\n    std::vector<long> uniques;\n\n    for (long number :\
    \ sorted_numbers) {\n        if (uniques.empty() || number != uniques.back())\
    \ {\n            uniques.push_back(number);\n        } else {\n            sorted_numbers.erase(std::remove(sorted_numbers.begin(),\
    \ sorted_numbers.end(), number), sorted_numbers.end());\n        }\n    }\n  \
    \  return uniques;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmplx69tll4: /tmp/tmplx69tll4.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // sort the input array ascending.\n    std::vector<long> sorted_numbers(numbers);\n\
    \    std::sort(sorted_numbers.begin(), sorted_numbers.end());\n\n    // create\
    \ an array of counters to keep track of how many times each number has been seen.\n\
    \    std::vector<int> counter(sorted_numbers.size(), 0);\n\n    // iterate over\
    \ all numbers and increment counter for every number seen\n    for (long number\
    \ : sorted_numbers) {\n        if (counter[number] == 0) // if this number hasn't\
    \ been seen yet\n            counter[number] = 1; // mark it seen\n        else\n\
    \            counter[number]++; // increment counter by 1\n    }\n\n    // now\
    \ remove all elements which haven't been seen more than once\n    std::vector<long>\
    \ result_vec(counter.begin(), counter.end());\n    std::vector<int> result_index(counter.begin(),\
    \ counter.end());\n\n    // copy result vector into return vector\n    result_vec.resize(num_elements);\n\
    \    result_index.resize(num_elements);\n    for (long i = 0; i < num_elements;\
    \ ++i) {\n        // check if this number has been seen more than once\n     \
    \   if (result_index[i] != i) {\n            // if so, copy from the result vector\
    \ to the return vector\n            result_vec[i] = numbers[result_index[i]];\n\
    \        }\n        // mark this number as seen so we don't get it the next time\
    \ we see it\n        result_index[i] = i;\n    }\n\n    return result_vec;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg0cv5bcp.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg0cv5bcp.cpp:26:23: error: \u2018num_elements\u2019 was\
    \ not declared in this scope\n   26 |     result_vec.resize(num_elements);\n \
    \     |                       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660103317
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n\n  std::vector<long>\
    \ ret;\n  ret.reserve(numbers.size());\n  for (size_t i = 1; i < numbers.size();\
    \ ++i) {\n    if (numbers[i] != numbers[i - 1]) {\n      ret.push_back(numbers[i]);\n\
    \    }\n  }\n\n  return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_ogehp1b: /tmp/tmp_ogehp1b.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // O(n) time and O(n) space\n  unsigned current_index = 0;\n \
    \ unsigned remove_index = 0;\n  while (current_index < numbers.size()) {\n   \
    \ if (numbers[current_index] == numbers[current_index + 1]) {\n      current_index++;\n\
    \      remove_index++;\n      continue;\n    }\n    if (remove_index != current_index)\
    \ {\n      numbers.erase(numbers.begin() + remove_index);\n      remove_index\
    \ = 0;\n    }\n    numbers.push_back(numbers[current_index]);\n    current_index++;\n\
    \    remove_index++;\n  }\n  if (remove_index != current_index) {\n    numbers.erase(numbers.begin()\
    \ + remove_index);\n  }\n  return numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660103323
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> dup;\n    std::map<long, int> count;\n   \
    \ for (auto val : numbers) {\n        count[val] += 1;\n    }\n    for (auto val\
    \ : numbers) {\n        if (count[val] == 1)\n            dup.push_back(val);\n\
    \    }\n    return dup;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result(numbers.begin(), numbers.end());\n\
    \    std::sort(numbers.begin(), numbers.end());\n    std::sort(result.begin(),\
    \ result.end());\n    std::vector<long> unique_numbers;\n    for(int i=1; i<numbers.size();\
    \ i++){\n        if(numbers[i] == result[i-1]){\n            result.erase(std::remove(result.begin(),\
    \ result.end(), result[i-1]),\n                        result.end());\n      \
    \  }\n        else{\n            unique_numbers.push_back(result[i-1]);\n    \
    \    }\n    }\n    result.insert(result.begin(), unique_numbers.begin(), unique_numbers.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpswp7d13v: /tmp/tmpswp7d13v.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end()); // Order of elements\
    \ is preserved\n  std::vector<long> out;\n  out.reserve(numbers.size());\n  for\
    \ (int i = 0; i < numbers.size(); i++) {\n    if (numbers[i] != numbers[i - 1])\
    \ {\n      out.push_back(numbers[i]);\n    }\n  }\n  return out;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp1jz396h8: /tmp/tmp1jz396h8.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Sort the input\n    std::sort(numbers.begin(), numbers.end());\n\
    \    // Set of elements that have been seen before\n    std::set<long> seen;\n\
    \    // New vector for output\n    std::vector<long> output;\n    // Loop over\
    \ all elements and remove from output if seen before\n    for (long num : numbers)\
    \ {\n        // If element has been seen before, remove from seen\n        if\
    \ (seen.find(num) != seen.end()) {\n            seen.erase(num);\n        } else\
    \ {\n            output.push_back(num);\n        }\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpfa8hghop: /tmp/tmpfa8hghop.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> uniq_numbers;\n  std::set<long> unique_numbers;\n\
    \  for (long number : numbers) {\n    unique_numbers.insert(number);\n  }\n  for\
    \ (long number : unique_numbers) {\n    uniq_numbers.push_back(number);\n  }\n\
    \  return uniq_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_3bd3u3x: /tmp/tmp_3bd3u3x.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  long previous_number;\n  for(long number : numbers) {\n    if(number\
    \ == previous_number) {\n      result.push_back(number);\n    } else {\n     \
    \ result.push_back(previous_number);\n      previous_number = number;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpfhq1gsnt: /tmp/tmpfhq1gsnt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> ordered_numbers;\n    std::map<long, long>\
    \ number_counts;\n    for (long number : numbers)\n        number_counts[number]++;\n\
    \    for (auto it = number_counts.begin(); it != number_counts.end(); ++it)\n\
    \        ordered_numbers.push_back(it->first);\n    ordered_numbers.push_back(numbers.back());\n\
    \    for (auto it = number_counts.begin(); it != number_counts.end(); ++it)\n\
    \        ordered_numbers.push_back(it->first);\n    return ordered_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ ret;\n  for (long & i : numbers)\n    ret.push_back(i);\n  std::sort(ret.begin(),\
    \ ret.end());\n  return ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpmt_fnz95: /tmp/tmpmt_fnz95.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> nums;\n    for\
    \ (long n: numbers) {\n        if (nums.count(n)) {\n            continue;\n \
    \       }\n        nums.insert(n);\n        result.push_back(n);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpxcxv90h1: /tmp/tmpxcxv90h1.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_vector;\n    std::sort(numbers.begin(),\
    \ numbers.end());\n    for (long x : numbers)\n        if (new_vector.size() ==\
    \ 0)\n            new_vector.push_back(x);\n        else if (new_vector.size()\
    \ == 1 && x == new_vector[0])\n            new_vector.erase(new_vector.begin());\n\
    \        else\n            new_vector.push_back(x);\n    return new_vector;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpcadpfuyt: /tmp/tmpcadpfuyt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> new_numbers;\n  long count = 0;\n  for (long\
    \ n : numbers) {\n    if (++count == 1)\n      new_numbers.push_back(n);\n  }\n\
    \  return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpiosx37i6: /tmp/tmpiosx37i6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpv13hqz1j: /tmp/tmpv13hqz1j.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ duplicates(numbers.size(), 0);\n    for (size_t i = 0; i < numbers.size(); ++i)\
    \ {\n        if (duplicates[i]) {\n            numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), numbers[i]),\n                          numbers.end());\n   \
    \     } else {\n            duplicates[i] = 1;\n        }\n    }\n    return numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpjdtqpqm2: /tmp/tmpjdtqpqm2.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> temp(numbers.begin(), numbers.end());\n  \
    \  std::sort(temp.begin(), temp.end());\n    std::vector<long> answer;\n    long\
    \ count = 0;\n    for (long i : temp) {\n        if (count < i) {\n          \
    \  answer.push_back(count);\n            count = i;\n        } else {\n      \
    \      count++;\n        }\n    }\n    return answer;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmphy0vv_s2: /tmp/tmphy0vv_s2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Store the found element and its index\n  std::map<long, int>\
    \ m;\n  // Initialize a vector with zeros.\n  std::vector<long> result;\n  //\
    \ Iterate through all the numbers found and add them to result if they are not\n\
    \  // already in result and if they are not in the map already.\n  for (int i\
    \ = 0; i < numbers.size(); i++) {\n    // If there is no map entry for number\
    \ i, add it.\n    // If there is an entry for the number i, check if it occurs\
    \ more than once.\n    auto it = m.find(numbers[i]);\n    if (it == m.end()) {\n\
    \      result.push_back(numbers[i]);\n      m[numbers[i]] = i;\n    } else {\n\
    \      // If the number is already in the result vector then remove it from the\n\
    \      // map and add it to result again.\n      int index = it->second;\n   \
    \   if (result[index % result.size()] == numbers[i]) {\n        result[index %\
    \ result.size()] = numbers[i];\n      }\n    }\n  }\n  return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpmxsbsbwt: /tmp/tmpmxsbsbwt.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Count how many times each number occurs.\n    std::vector<std::pair<long,\
    \ long> > counts(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    std::unordered_map<long, long> new_counts;\n\n    for (auto const& count\
    \ : counts)\n        new_counts[count.first] += count.second;\n\n    // For each\
    \ number, count how many other numbers have that number.\n    for (auto const&\
    \ count : counts)\n        new_counts[count.first] -= count.second;\n\n    //\
    \ Add the counts themselves back in.\n    for (auto const& count : counts)\n \
    \       new_counts[count.first] += count.second;\n\n    // Iterate in reverse\
    \ order so highest count numbers are removed first.\n    // This prevents duplicate\
    \ numbers from getting filtered out.\n    for (std::size_t index = numbers.size()\
    \ - 1; index >= 0; --index) {\n        long number = numbers[index];\n       \
    \ if (new_counts[number] > 0)\n            result.push_back(number);\n    }\n\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/vector:66,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpqljgqm7k.cpp:2:\n/usr/include/c++/9/bits/stl_uninitialized.h: In instantiation\
    \ of \u2018_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator,\
    \ _ForwardIterator) [with _InputIterator = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _ForwardIterator = std::pair<long int, long int>*]\u2019\
    :\n/usr/include/c++/9/bits/stl_uninitialized.h:307:37:   required from \u2018\
    _ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator,\
    \ std::allocator<_Tp>&) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _ForwardIterator = std::pair<long int, long int>*;\
    \ _Tp = std::pair<long int, long int>]\u2019\n/usr/include/c++/9/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Tp = std::pair<long int, long int>; _Alloc =\
    \ std::allocator<std::pair<long int, long int> >]\u2019\n/usr/include/c++/9/bits/stl_vector.h:654:4:\
    \   required from \u2018std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator,\
    \ const allocator_type&) [with _InputIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; <template-parameter-2-2> = void; _Tp = std::pair<long\
    \ int, long int>; _Alloc = std::allocator<std::pair<long int, long int> >; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<std::pair<long int, long int> >]\u2019\
    \n/tmp/tmpqljgqm7k.cpp:7:78:   required from here\n/usr/include/c++/9/bits/stl_uninitialized.h:127:72:\
    \ error: static assertion failed: result type must be constructible from value\
    \ type of input range"
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> ret;\n    std::map<long, long> m;\n    for(auto\
    \ i:numbers) {\n        if(m.find(i)!=m.end()) continue;\n        ret.push_back(i);\n\
    \        m[i]=i;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpozah5ky3: /tmp/tmpozah5ky3.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> temp(numbers.begin(), numbers.end());\n  \
    \  std::sort(temp.begin(), temp.end());\n    std::vector<long> result;\n    long\
    \ count = 0;\n    for (auto i : temp) {\n        if (i == temp[count]) {\n   \
    \         continue;\n        }\n        result.push_back(i);\n        count++;\n\
    \    }\n    if (count != result.size()) {\n        throw std::invalid_argument(\"\
    Duplicates found\");\n    }\n    return std::move(result);\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmps5bs1lab: /tmp/tmps5bs1lab.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result;\n    for (long i : numbers) {\n        if (std::find(result.begin(),\
    \ result.end(), i) == result.end()) {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_w3a8me6: /tmp/tmp_w3a8me6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    int size = numbers.size();\n    std::vector<long> result(size);\n\
    \    std::sort(numbers.begin(), numbers.end());\n    for (int i = 0; i < size;\
    \ ++i) {\n        for (int j = i + 1; j < size; ++j) {\n            if (numbers[i]\
    \ == numbers[j]) {\n                numbers.erase(numbers.begin() + j);\n    \
    \            --j;\n            }\n        }\n        result[size - 1 - i] = numbers[i];\n\
    \    }\n    return std::move(numbers);\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::unordered_set<long> seen;\n\
    \  long hash = 0;\n  for (long elem : numbers) {\n    hash = hash ^ elem;\n  \
    \  if (seen.count(hash))\n      continue;\n    seen.insert(hash);\n    result.push_back(elem);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpvbwvf6kf: /tmp/tmpvbwvf6kf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> seen;\n\n    std::copy_if(numbers.begin(),\
    \ numbers.end(), std::back_inserter(seen), [](long n) { return seen.find(n) !=\
    \ seen.end(); });\n\n    result.clear();\n    for(long n: seen) result.push_back(n);\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqg1ggdx.cpp: In lambda function:\n/tmp/tmpzqg1ggdx.cpp:9:96: error:\
    \ \u2018seen\u2019 is not captured\n    9 |     std::copy_if(numbers.begin(),\
    \ numbers.end(), std::back_inserter(seen), [](long n) { return seen.find(n) !=\
    \ seen.end(); });\n      |                                                   \
    \                                             ^~~~\n/tmp/tmpzqg1ggdx.cpp:9:77:\
    \ note: the lambda has no capture-default\n    9 |     std::copy_if(numbers.begin(),\
    \ numbers.end(), std::back_inserter(seen), [](long n) { return seen.find(n) !=\
    \ seen.end(); });\n      |                                                   \
    \                          ^\n/tmp/tmpzqg1ggdx.cpp:7:20: note: \u2018std::set<long\
    \ int> seen\u2019 declared here\n    7 |     std::set<long> seen;\n      |   \
    \                 ^~~~\n/tmp/tmpzqg1ggdx.cpp:9:112: error: \u2018seen\u2019 is\
    \ not captured\n    9 |     std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(seen),\
    \ [](long n) { return seen.find(n) != seen.end(); });\n      |               \
    \                                                                            \
    \                     ^~~~\n/tmp/tmpzqg1ggdx.cpp:9:77: note: the lambda has no\
    \ capture-default\n    9 |     std::copy_if(numbers.begin(), numbers.end(), std::back_inserter(seen),\
    \ [](long n) { return seen.find(n) != seen.end(); });\n      |               \
    \                                                              ^\n/tmp/tmpzqg1ggdx.cpp:7:20:\
    \ note: \u2018std::set<long int> seen\u2019 declared here\n    7 |     std::set<long>\
    \ seen;\n      |                    ^~~~\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzqg1ggdx.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate)\
    \ [with _IIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::back_insert_iterator<std::set<long int> >; _Predicate = remove_duplicates(std::vector<long\
    \ int>)::<lambda(long int)>]\u2019:\n/tmp/tmpzqg1g"
  stdout: ''
  timestamp: 1660103318
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Find how many times each element appears in the input list\n\
    \    std::vector<std::pair<long, int> > counts(numbers.begin(), numbers.end());\n\
    \    // Keep track of which elements we've already seen\n    std::vector<long>\
    \ seen(numbers.begin(), numbers.end());\n    // Keep track of the elements that\
    \ have already been removed\n    std::vector<long> removed(numbers.begin(), numbers.end());\n\
    \    // Loop through the input list, keeping track of which elements we have yet\
    \ to see\n    for (long i : counts) {\n        // If we haven't seen this element\
    \ before, add it and keep track\n        if (seen.find(i.first) == seen.end())\
    \ {\n            seen.push_back(i.first);\n            removed.push_back(i.first);\n\
    \        } else {\n            // Otherwise, keep track of the elements that have\
    \ already been seen\n            std::set<long>::iterator j = seen.find(i.first);\n\
    \            assert(j != seen.end());\n            seen.erase(j);\n          \
    \  removed.push_back(j->second);\n        }\n    }\n    return removed;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu9zomcbh.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu9zomcbh.cpp:13:19: error: cannot convert \u2018std::pair<long\
    \ int, int>\u2019 to \u2018long int\u2019 in initialization\n   13 |     for (long\
    \ i : counts) {\n      |                   ^~~~~~\n/tmp/tmpu9zomcbh.cpp:15:18:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   15 |         if (seen.find(i.first) == seen.end()) {\n      |           \
    \       ^~~~\n/tmp/tmpu9zomcbh.cpp:15:25: error: request for member \u2018first\u2019\
    \ in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n   15 | \
    \        if (seen.find(i.first) == seen.end()) {\n      |                    \
    \     ^~~~~\n/tmp/tmpu9zomcbh.cpp:16:30: error: request for member \u2018first\u2019\
    \ in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n   16 | \
    \            seen.push_back(i.first);\n      |                              ^~~~~\n\
    /tmp/tmpu9zomcbh.cpp:17:33: error: request for member \u2018first\u2019 in \u2018\
    i\u2019, which is of non-class type \u2018long int\u2019\n   17 |            \
    \ removed.push_back(i.first);\n      |                                 ^~~~~\n\
    /tmp/tmpu9zomcbh.cpp:20:47: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018find\u2019\n   20 |             std::set<long>::iterator\
    \ j = seen.find(i.first);\n      |                                           \
    \    ^~~~\n/tmp/tmpu9zomcbh.cpp:20:54: error: request for member \u2018first\u2019\
    \ in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n   20 | \
    \            std::set<long>::iterator j = seen.find(i.first);\n      |       \
    \                                               ^~~~~\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu9zomcbh.cpp:2:\n/tmp/tmpu9zomcbh.cpp:21:22: error:\
    \ no match for \u2018operator!=\u2019 (operand types are \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long "
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(!numbers.empty());\n  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen(numbers.begin(), numbers.end());\n  for (long i : numbers) {\n    if (seen.count(i)\
    \ == 1)\n      result.push_back(i);\n    seen.insert(i);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpdu2dtj7l: /tmp/tmpdu2dtj7l.cpp:6: std::vector<long int> remove_duplicates(std::vector<long
    int>): Assertion `!numbers.empty()'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n   std::sort(numbers.begin(), numbers.end());\n   numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n   return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpx2aad6hg: /tmp/tmpx2aad6hg.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> s;\n    for (long\
    \ i : numbers) {\n        if (s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp580d_9ip: /tmp/tmp580d_9ip.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> ret;\n    ret.reserve(numbers.size());\n \
    \   std::unordered_set<long> seen { numbers.begin(), numbers.end() };\n    for\
    \ (auto n : numbers) {\n        if (!seen.count(n)) {\n            ret.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpsf03dzwn: /tmp/tmpsf03dzwn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Write your code here.\n    std::vector<long> ret;\n    for\
    \ (long i = 0; i < numbers.size(); ++i) {\n        if (numbers.find(i) != numbers.end())\
    \ {\n            numbers.erase(numbers.begin()+i);\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1ts81fa.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk1ts81fa.cpp:9:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n    9 |         if (numbers.find(i)\
    \ != numbers.end()) {\n      |                     ^~~~\n"
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::unordered_set<long> seen;\n  std::vector<long> result;\n\
    \  long count = 1;\n  for (auto number : numbers) {\n    if (seen.count(number)\
    \ > 0) {\n      count += 1;\n    } else {\n      seen.insert(number);\n      result.push_back(number);\n\
    \      count += 1;\n    }\n  }\n  for (auto number : numbers) {\n    if (seen.count(number)\
    \ > 0) {\n      count -= 1;\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpt6o9i1qj: /tmp/tmpt6o9i1qj.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    auto last =\
    \ std::unique(numbers.begin(), numbers.end());\n    numbers.erase(last, numbers.end());\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpb6z4o5eg: /tmp/tmpb6z4o5eg.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> output;\n  output.insert(output.end(), numbers.begin(),\
    \ numbers.end());\n  std::sort(output.begin(), output.end());\n  long last = output[0];\n\
    \  for (auto it = numbers.begin() + 1; it != numbers.end(); ++it) {\n    if (*it\
    \ == last) {\n      output.erase(std::remove(output.begin(), output.end(), *it),\
    \ output.end());\n    } else {\n      last = *it;\n    }\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103319
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Traverse the list from left to right.\n    // If the current\
    \ element is equal to last element traversed then it has not been visited.\n \
    \   // Otherwise, check if the current element has been visited before by traversing\
    \ the list from right to left.\n    std::vector<long> seen;\n    std::vector<long>\
    \ new_numbers;\n    long last = numbers[0];\n    for (const long &i : numbers)\
    \ {\n        if (i == last) {\n            continue;\n        }\n\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.push_back(i);\n           \
    \ new_numbers.push_back(i);\n        } else {\n            auto it = seen.rbegin();\n\
    \            while (it != seen.rend() && it != seen.rbegin() && it != seen.rend())\
    \ {\n                if (*it == i) {\n                    it++;\n            \
    \        continue;\n                }\n                it = seen.erase(it);\n\
    \                new_numbers.push_back(i);\n                break;\n         \
    \   }\n        }\n\n        last = i;\n    }\n    return new_numbers;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph3zw0tp6.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph3zw0tp6.cpp:17:18: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   17 |         if (seen.find(i)\
    \ == seen.end()) {\n      |                  ^~~~\n/tmp/tmph3zw0tp6.cpp:27:35:\
    \ error: no matching function for call to \u2018std::vector<long int>::erase(std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >&)\u2019\n   27 |                 it = seen.erase(it);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph3zw0tp6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1427:28: note:   no known conversion for\
    \ argument 1 from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >\u2019 to \u2018std::vector<long int>::const_iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<const long int*, std::vector<long int>\
    \ >\u2019}\n 1427 |       erase(const_iterator __position)\n      |          \
    \   ~~~~~~~~~~~~~~~^~~~~~~~~~\n/usr/inclu"
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> duplicates(numbers.size(), 0);\n\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        // If this number has already\
    \ been seen, skip it.\n        if (duplicates[i] != 0)\n            continue;\n\
    \        // Otherwise, mark the number as having been seen and store it to\n \
    \       // the output array.\n        duplicates[i] = 1;\n    }\n\n    return\
    \ duplicates;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_uptbenp: /tmp/tmp_uptbenp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103319
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Sort the list.\n    std::sort(numbers.begin(), numbers.end());\n\
    \    // Removing elements while the number of duplicates is greater than or equal\n\
    \    // to the total number of elements.\n    size_t num_remove = 0;\n    size_t\
    \ num_equal = 0;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        if\
    \ (i != 0 && num_equal > numbers.size() - num_remove)\n            break;\n  \
    \      if (numbers[i] == numbers[i - 1]) {\n            num_equal += 1;\n    \
    \    } else {\n            numbers.erase(numbers.begin() + i);\n            num_remove\
    \ += 1;\n        }\n    }\n    // Copy the unique values into a vector.\n    std::vector<long>\
    \ new_values;\n    new_values.reserve(numbers.size());\n    std::copy_if(numbers.begin(),\
    \ numbers.end(), std::back_inserter(new_values),\n        [](long n) {\n     \
    \   return new_values.size() != new_values.max_size();\n    });\n    return new_values;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5ocy8wi.cpp: In lambda function:\n/tmp/tmpu5ocy8wi.cpp:27:16:\
    \ error: \u2018new_values\u2019 is not captured\n   27 |         return new_values.size()\
    \ != new_values.max_size();\n      |                ^~~~~~~~~~\n/tmp/tmpu5ocy8wi.cpp:26:10:\
    \ note: the lambda has no capture-default\n   26 |         [](long n) {\n    \
    \  |          ^\n/tmp/tmpu5ocy8wi.cpp:23:23: note: \u2018std::vector<long int>\
    \ new_values\u2019 declared here\n   23 |     std::vector<long> new_values;\n\
    \      |                       ^~~~~~~~~~\n/tmp/tmpu5ocy8wi.cpp:27:37: error:\
    \ \u2018new_values\u2019 is not captured\n   27 |         return new_values.size()\
    \ != new_values.max_size();\n      |                                     ^~~~~~~~~~\n\
    /tmp/tmpu5ocy8wi.cpp:26:10: note: the lambda has no capture-default\n   26 | \
    \        [](long n) {\n      |          ^\n/tmp/tmpu5ocy8wi.cpp:23:23: note: \u2018\
    std::vector<long int> new_values\u2019 declared here\n   23 |     std::vector<long>\
    \ new_values;\n      |                       ^~~~~~~~~~\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu5ocy8wi.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_OIter std::copy_if(_IIter, _IIter, _OIter, _Predicate)\
    \ [with _IIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::back_insert_iterator<std::vector<long int> >; _Predicate =\
    \ remove_duplicates(std::vector<long int>)::<lambda(long int)>]\u2019:\n/tmp/tmpu5ocy8wi.cpp:28:6:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:749:12: error: could\
    \ not convert \u2018__pred.remove_duplicates(std::vector<long int>)::<lambda(long\
    \ int)>(__first.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator*())\u2019 from \u2018void\u2019 to \u2018bool\u2019\n  749 |  if\
    \ (__pred(*__first))\n      |      ~~~~~~^~~~~~~~~~\n      |            |\n  \
    \    |            void\n"
  stdout: ''
  timestamp: 1660103319
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Initialize a new result vector\n  std::vector<long> result;\n\
    \  // Iterate over numbers\n  for (size_t i = 0; i < numbers.size(); ++i) {\n\
    \    // If the current number is in the result, skip\n    if (std::find(result.begin(),\
    \ result.end(), numbers[i]) != result.end())\n      continue;\n    // If number\
    \ is not in result, add it to the result\n    result.push_back(numbers[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmppyj0whsj: /tmp/tmppyj0whsj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103320
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ sorted_numbers(numbers);\n  std::sort(sorted_numbers.begin(), sorted_numbers.end());\n\
    \  std::vector<long> sorted_number_counts(sorted_numbers.size());\n  // Count\
    \ occurrences of each element\n  for (size_t i = 0; i < sorted_numbers.size();\
    \ i++)\n    sorted_number_counts[i] = sorted_numbers.size() - i;\n\n  // Keep\
    \ left most occurrence of each element\n  std::vector<long> sorted_number_counts_left(sorted_number_counts.size(),\n\
    \      sorted_number_counts[0]);\n  for (size_t i = 1; i < sorted_number_counts.size();\
    \ i++)\n    sorted_number_counts_left[i] = sorted_number_counts[i - 1] + sorted_number_counts[i];\n\
    \n  // Create new vector with elements and counts\n  std::vector<long> sorted_numbers_with_counts(sorted_number_counts.size(),\n\
    \      sorted_numbers[0]);\n  for (size_t i = 1; i < sorted_number_counts.size();\
    \ i++)\n    sorted_numbers_with_counts[i] = sorted_numbers_with_counts[i - 1]\
    \ + sorted_number_counts[i];\n\n  // Create new vector with sorted and filtered\
    \ numbers\n  std::vector<long> sorted_numbers_with_counts_filtered(sorted_numbers_with_counts.size(),\n\
    \      sorted_numbers_with_counts[0]);\n  for (size_t i = 1; i < sorted_numbers_with_counts.size();\
    \ i++)\n    sorted_numbers_with_counts_filtered[i] = sorted_numbers_with_counts[i\
    \ - 1] + sorted_number_counts_left[i];\n\n  // Create new vector with filtered\
    \ numbers and original counts\n  std::vector<long> numbers_with_counts(sorted_numbers_with_counts.size(),\n\
    \      sorted_numbers_with_counts[0]);\n  for (size_t i = 1; i < sorted_number_counts.size();\
    \ i++)\n    numbers_with_counts[i] = numbers_with_counts[i - 1] + sorted_number_counts_left[i];\n\
    \  return numbers_with_counts;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result(numbers.begin(), numbers.end());\n\
    \    std::sort(result.begin(), result.end());\n    while (std::next_permutation(result.begin(),\
    \ result.end())) {\n        result.erase(std::remove(result.begin(), result.end(),\
    \ result.begin()[0]), result.end());\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpq6ps2pps: /tmp/tmpq6ps2pps.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result(numbers.size());\n    long last = numbers[0];\n    for (const auto x\
    \ : numbers) {\n        if (last != x) {\n            last += x;\n           \
    \ result[result.size() - 1] += x;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9x_yaxfl: /tmp/tmp9x_yaxfl.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // O(n^2) solution\n    std::vector<long> new_nums;\n    std::unordered_map<long,\
    \ std::size_t> seen;\n    for (auto n : numbers) {\n        if (seen.find(n) ==\
    \ seen.end()) {\n            seen.insert({n, new_nums.size()});\n            new_nums.push_back(n);\n\
    \        }\n    }\n    return new_nums;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9m_h4hrs: /tmp/tmp9m_h4hrs.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    for (long i : numbers) {\n        if (result.size() <= i) {\n           \
    \ result.push_back(i);\n        }\n        else {\n            if (result == numbers)\
    \ {\n                break;\n            }\n            std::remove(numbers.begin(),\
    \ numbers.end(), i);\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp2hoz8rt5: /tmp/tmp2hoz8rt5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n\n  std::vector<long>\
    \ output;\n  for (std::size_t i = 0; i < numbers.size(); i++) {\n    if (i !=\
    \ numbers.begin() && numbers[i] != numbers[i - 1]) {\n      output.push_back(numbers[i]);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz1qhtios.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz1qhtios.cpp:10:11: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::size_t\u2019 {aka \u2018long unsigned int\u2019\
    } and \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   10 |     if (i != numbers.begin()\
    \ && numbers[i] != numbers[i - 1]) {\n      |         ~ ^~ ~~~~~~~~~~~~~~~\n \
    \     |         |                 |\n      |         |                 std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\n      |         std::size_t {aka long unsigned int}\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpz1qhtios.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpz1qhtios.cpp:10:28: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::size_t\u2019 {aka \u2018long unsigned int\u2019}\n   10 |   \
    \  if (i != numbers.begin() && numbers[i] != numbers[i - 1]) {\n      |      \
    \                      ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpz1qhtios.cpp:"
  stdout: ''
  timestamp: 1660103320
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long long ans = 1;\n  for (long long num : numbers) {\n    if\
    \ (ans > num) {\n      ans = num;\n    }\n  }\n  numbers.clear();\n  numbers.push_back(ans);\n\
    \  // Traverse the list once. Keep track of numbers smaller than the current\n\
    \  // one.\n  for (long long i = 1;; i < numbers.size(); i++) {\n    if (numbers[i\
    \ - 1] >= numbers[i]) {\n      long long last = numbers[i - 1];\n      while (numbers[i]\
    \ >= last) {\n        numbers.erase(numbers.begin() + i);\n        i -= 1;\n \
    \     }\n      last = (last + numbers[i]) / 2;\n      numbers[i] = last;\n   \
    \ }\n  }\n  return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmb3ixeu7.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmb3ixeu7.cpp:16:44: error: expected \u2018)\u2019 before\
    \ \u2018;\u2019 token\n   16 |   for (long long i = 1;; i < numbers.size(); i++)\
    \ {\n      |       ~                                    ^\n      |           \
    \                                 )\n/tmp/tmpmb3ixeu7.cpp:16:46: error: \u2018\
    i\u2019 was not declared in this scope\n   16 |   for (long long i = 1;; i < numbers.size();\
    \ i++) {\n      |                                              ^\n"
  stdout: ''
  timestamp: 1660103320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> ret;\n  std::set<long> seen;\n  for (const auto&\
    \ n: numbers) {\n    if (seen.find(n) == seen.end()) {\n      ret.push_back(n);\n\
    \      seen.insert(n);\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp0fs9rc4b: /tmp/tmp0fs9rc4b.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    if (numbers.empty())\n        return {};\n\n    std::vector<long>\
    \ uniques;\n    for (long n : numbers)\n        if (std::find(uniques.begin(),\
    \ uniques.end(), n) == uniques.end())\n            uniques.push_back(n);\n\n \
    \   return uniques;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_fmc7kyr: /tmp/tmp_fmc7kyr.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> seen;\n    for\
    \ (long number : numbers) {\n        if (seen.find(number) == seen.end())\n  \
    \          seen.insert(number);\n        else\n            result.push_back(number);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp1gi8jbff: /tmp/tmp1gi8jbff.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    std::map<long, bool> number_map;\n\
    \n    for (long &num : numbers) {\n        if (number_map.find(num) == number_map.end())\
    \ {\n            number_map[num] = true;\n            new_numbers.push_back(num);\n\
    \        } else {\n            number_map[num] = false;\n        }\n    }\n\n\
    \    return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpg3aahiir: /tmp/tmpg3aahiir.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ output;\n  long previous = numbers[0];\n  long count = 1;\n  for(auto number\
    \ : numbers) {\n    if(number == previous) {\n      count++;\n    }\n    else\
    \ {\n      output.push_back(previous);\n      previous = number;\n      count\
    \ = 1;\n    }\n  }\n  output.push_back(previous);\n  return output;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103321
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> out;\n  long last_element = 0;\n  long last_number\
    \ = numbers[0];\n  for (long number : numbers) {\n    if (number != last_number)\
    \ {\n      out.push_back(last_number);\n      last_number = number;\n    }\n \
    \   if (number == last_number) {\n      out.push_back(number);\n    }\n  }\n \
    \ return out;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    std::size_t i = 1;\n    for (std::size_t j = 0; j < numbers.size(); j++)\
    \ {\n        if (numbers[j] == numbers[i]) {\n            i = (i + 1) % numbers.size();\n\
    \        } else {\n            result.push_back(numbers[j]);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp4tt7fjix: /tmp/tmp4tt7fjix.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Start with an empty vector\n    std::vector<long> output;\n\
    \    // For each number in the input vector\n    for (long number : numbers) {\n\
    \        // If the number has never been encountered\n        // add it to the\
    \ output vector\n        if (output.count(number) == 0)\n            output.push_back(number);\n\
    \        // If this number has been encountered before\n        // remove it from\
    \ the output vector\n        else\n            output.remove(output.begin() +\
    \ std::find(output.begin(), output.end(), number));\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1amnk70.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq1amnk70.cpp:12:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   12 |         if (output.count(number)\
    \ == 0)\n      |                    ^~~~~\n/tmp/tmpq1amnk70.cpp:17:20: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018remove\u2019\
    \n   17 |             output.remove(output.begin() + std::find(output.begin(),\
    \ output.end(), number));\n      |                    ^~~~~~\n/tmp/tmpq1amnk70.cpp:17:42:\
    \ error: no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   17 |             output.remove(output.begin() + std::find(output.begin(),\
    \ output.end(), number));\n      |                           ~~~~~~~~~~~~~~ ^\
    \ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                   \
    \                    |             |\n      |                                \
    \       |             __normal_iterator<[...],[...]>\n      |                \
    \                       __normal_iterator<[...],[...]>\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpq1amnk70.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/st"
  stdout: ''
  timestamp: 1660103320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ uniques;\n    for (long i : numbers)\n        if (i != numbers[uniques.size()])\n\
    \            uniques.push_back(i);\n    return uniques;\n}\nint main() {\n   \
    \ auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp8w6c9tx7: /tmp/tmp8w6c9tx7.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  long last_number = numbers[0];\n\
    \  for (long number : numbers) {\n    if (number != last_number) {\n      result.push_back(number);\n\
    \      last_number = number;\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103320
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Allocate space for new vector\n    std::vector<long> new_numbers(numbers.size());\n\
    \    // Initialize new vector with 0s\n    for (size_t i = 0; i < new_numbers.size();\
    \ ++i) new_numbers[i] = 0;\n    // Loop over all elements\n    for (size_t i =\
    \ 0; i < numbers.size(); ++i) {\n        // If element was already used, mark\
    \ it as 0\n        if (numbers[i] != 0) new_numbers[i] = 0;\n        // Else mark\
    \ it as 1\n        else new_numbers[i] = 1;\n    }\n    // Return result\n   \
    \ return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpru9b6p3v: /tmp/tmpru9b6p3v.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::set<long> already_seen;\n\
    \    for (auto i : numbers) {\n        if (already_seen.find(i) == already_seen.end())\
    \ {\n            already_seen.insert(i);\n            result.push_back(i);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpiqlw17gl: /tmp/tmpiqlw17gl.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ uniques;\n    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n\
    \        if (it != numbers.begin() && it != numbers.end() && *it == *it - 1) {\n\
    \            numbers.erase(it);\n        } else {\n            uniques.push_back(*it);\n\
    \        }\n    }\n    return uniques;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpld0ukktw: /tmp/tmpld0ukktw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::unordered_set<long> seen;\n\
    \  for (long number : numbers) {\n    if (seen.count(number) == 0) {\n      seen.insert(number);\n\
    \      result.push_back(number);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpmdaaewo2: /tmp/tmpmdaaewo2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n\tstd::sort(numbers.begin(), numbers.end()); // O(n log(n))\n\t\
    std::vector<long> result;\n\tlong current = numbers[0];\n\tfor (long num : numbers)\
    \ {\n\t\tif (num != current) {\n\t\t\tresult.push_back(current);\n\t\t\tcurrent\
    \ = num;\n\t\t}\n\t}\n\tresult.push_back(current);\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    std::unordered_set<long> seen;\n\
    \    // Loop through every element of numbers while keeping track of what elements\n\
    \    // have already been seen.\n    for (long i : numbers) {\n        if (seen.count(i)\
    \ == 0) {\n            seen.insert(i);\n            output.push_back(i);\n   \
    \     }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp06fqpfq5: /tmp/tmp06fqpfq5.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result(numbers.size());\n    std::size_t n\
    \ = 0;\n    for (long i : numbers)\n        if (++n>1)\n            result[n-1]\
    \ = i;\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpqyvvq2db: /tmp/tmpqyvvq2db.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Create an empty vector.\n  std::vector<long> output{};\n  //\
    \ Loop over all elements in input vector.\n  for (auto i : numbers) {\n    //\
    \ If the element is present in the output vector,\n    // then ignore it.\n  \
    \  if (std::find(output.begin(), output.end(), i) == output.end()) {\n      //\
    \ Otherwise, add it to the output vector.\n      output.push_back(i);\n    }\n\
    \  }\n  // Return the output.\n  return output;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmptgpeygyr: /tmp/tmptgpeygyr.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    std::set<long> seen;\n \
    \   // Populate the set with numbers that haven't been seen yet\n    for (const\
    \ auto i : numbers) {\n        if (seen.count(i) == 0) {\n            seen.insert(i);\n\
    \            new_numbers.push_back(i);\n        }\n    }\n    // Add the remaining\
    \ numbers to the end of the new list\n    for (const auto i : numbers) {\n   \
    \     if (seen.count(i) == 0) {\n            new_numbers.push_back(i);\n     \
    \   }\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpzza1qw1i: /tmp/tmpzza1qw1i.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long long num_duplicates = 0;\n  std::set<long> unique_numbers;\n\
    \  for (long number : numbers) {\n    unique_numbers.insert(number);\n    num_duplicates\
    \ += unique_numbers.size();\n  }\n  // Copy to output vector.\n  std::vector<long>\
    \ unique_numbers_out(num_duplicates);\n  std::transform(unique_numbers.begin(),\
    \ unique_numbers.end(),\n                 unique_numbers_out.begin(),\n      \
    \           [&unique_numbers](long n) {\n                   return unique_numbers.count(n);\n\
    \                 });\n  return unique_numbers_out;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpd577onqo: /tmp/tmpd577onqo.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(numbers.size()>0);\n  \n  std::vector<long> new_vec;\n\
    \  new_vec.reserve(numbers.size());\n  // Keep track of how many times each number\
    \ occurs\n  std::unordered_map<long, int> count_map;\n  for (long i : numbers)\
    \ {\n    // If it already exists in the map, increase the count by one\n    auto\
    \ it = count_map.find(i);\n    if (it != count_map.end())\n      count_map[i]\
    \ += 1;\n    else {\n      // Otherwise, add it and set count to 1\n      count_map[i]\
    \ = 1;\n      new_vec.push_back(i);\n    }\n  }\n  \n  // Return the new vector\n\
    \  return new_vec;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpg6_abrv4: /tmp/tmpg6_abrv4.cpp:6: std::vector<long int> remove_duplicates(std::vector<long
    int>): Assertion `numbers.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> no_duplicates(numbers.size());\n  for (long\
    \ i = 0; i < numbers.size(); i++)\n    no_duplicates[i] = no_duplicates[i - 1];\n\
    \  std::vector<long>::iterator j;\n  for (j = numbers.begin(); j != numbers.end();\
    \ j++) {\n    long count = 0;\n    for (std::size_t k = 0; k < no_duplicates.size();\
    \ k++) {\n      if ((*j) == no_duplicates[k]) {\n        count++;\n        no_duplicates[k]\
    \ = no_duplicates[k + 1];\n      }\n    }\n    if (count > 1)\n      no_duplicates.back()++;\n\
    \  }\n  return no_duplicates;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp316gfuut: /tmp/tmp316gfuut.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Initialize result with numbers[0]\n  std::vector<long> result(numbers.begin(),\
    \ numbers.begin() + 1);\n  // Iterate over remaining numbers adding 1 to each\
    \ number that occurs\n  // more than once, leaving no duplicates\n  for (auto\
    \ number : numbers) {\n    auto idx = std::find(result.begin(), result.end(),\
    \ number + 1);\n    result.erase(idx);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> unique_numbers(numbers.size());\n  std::map<long,\
    \ bool> number_present;\n\n  // Populate the map with unique elements.\n  for\
    \ (long number : numbers)\n    number_present[number] = true;\n\n  // Repopulate\
    \ the vector with non-unique elements.\n  for (auto it = number_present.begin();\
    \ it != number_present.end();) {\n    if (it->second) {\n      unique_numbers.push_back(it->first);\n\
    \      number_present.erase(it++);\n    } else {\n      ++it;\n    }\n  }\n  return\
    \ unique_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpdzi2xe4z: /tmp/tmpdzi2xe4z.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> ans;\n    long cur = numbers[0];\n    for\
    \ (long val : numbers) {\n        if (val == cur)\n            continue;\n   \
    \     ans.push_back(val);\n        cur = val;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103322
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Use std::set to avoid a second pass to find duplicates.\n \
    \ // Also use std::swap to keep order of elements left the same.\n  std::set<long>\
    \ set;\n  for (auto number : numbers) {\n    set.insert(number);\n  }\n  std::vector<long>\
    \ result;\n  while (!set.empty()) {\n    result.push_back(set.begin()->first);\n\
    \    set.erase(set.begin());\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg6bpr23v.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg6bpr23v.cpp:14:35: error: request for member \u2018first\u2019\
    \ in \u2018* set.std::set<long int>::begin().std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   14 |     result.push_back(set.begin()->first);\n      |                 \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660103321
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    int i = numbers.size();\n    std::vector<long> new_nums;\n \
    \   while (i) {\n        --i;\n        for (auto it = numbers.begin(); it != numbers.end();\
    \ ) {\n            long k = *it;\n            if (k != i) {\n                it\
    \ = std::find(it + 1, numbers.end(), k);\n            }\n            else {\n\
    \                break;\n            }\n        }\n        if (it != numbers.end())\
    \ {\n            new_nums.push_back(std::move(*it));\n        }\n    }\n    return\
    \ new_nums;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq36ip3ue.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpq36ip3ue.cpp:19:13: error: \u2018it\u2019 was not declared\
    \ in this scope; did you mean \u2018i\u2019?\n   19 |         if (it != numbers.end())\
    \ {\n      |             ^~\n      |             i\n"
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // O(n), where n = #elements.\n    // O(n), where n = #elements.\n\
    \    // O(n), where n = #elements.\n    // O(n), where n = #elements.\n    //\
    \ O(n), where n = #elements.\n    std::vector<long> output;\n    std::unordered_map<long,\
    \ int> seen;\n    for (long number : numbers) {\n        if (seen.count(number)\
    \ != 0) {\n            continue;\n        }\n        seen.insert(std::make_pair(number,\
    \ 1));\n        output.push_back(number);\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp303giw06: /tmp/tmp303giw06.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> v;\n  // sort numbers in descending order\n\
    \  std::sort(numbers.begin(), numbers.end(), std::greater<long>());\n  // find\
    \ duplicates\n  for (size_t i = 1; i < numbers.size(); i++)\n    if (numbers[i]\
    \ != numbers[i - 1]) {\n      v.push_back(numbers[i]);\n    }\n  // print duplicate\
    \ elements\n  for (auto num : v)\n    std::cout << num << \" \";\n  std::cout\
    \ << std::endl;\n  return v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp6wrw_gup: /tmp/tmp6wrw_gup.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: "\n3 2 1 \n"
  timestamp: 1660103322
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  result.push_back(numbers[0]);\n  for (int i = 1; i < numbers.size();\
    \ ++i) {\n    if (numbers[i] != numbers[i - 1]) {\n      result.push_back(numbers[i]);\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::unordered_map<long, long> counts;\n    std::vector<long>\
    \ ans;\n    for (auto &n : numbers) {\n        auto it = counts.find(n);\n   \
    \     if (it == counts.end()) {\n            counts.insert(std::make_pair(n, 1));\n\
    \            ans.push_back(n);\n        }\n        else {\n            counts[n]++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpj25oic0f: /tmp/tmpj25oic0f.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> noDuplicates;\n  std::sort(numbers.begin(),\
    \ numbers.end());\n  for (int i = 1; i < numbers.size(); i++)\n    if (numbers[i\
    \ - 1] != numbers[i])\n      noDuplicates.push_back(numbers[i]);\n  return noDuplicates;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmphfklmxi8: /tmp/tmphfklmxi8.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ newNumbers(numbers.begin(), numbers.end());\n    newNumbers.erase(std::unique(newNumbers.begin(),\
    \ newNumbers.end()), newNumbers.end());\n    return newNumbers;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpz4zt1_rr: /tmp/tmpz4zt1_rr.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::unordered_set<long> seen;\n    std::vector<long> result;\n\
    \    for (auto &el: numbers) {\n        if (seen.count(el) == 0) {\n         \
    \   seen.insert(el);\n            result.push_back(el);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpvwnyq8hk: /tmp/tmpvwnyq8hk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\n     \
    \       seen.insert(n);\n        else\n            result.push_back(n);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpdq4kac5b: /tmp/tmpdq4kac5b.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103322
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long long n = numbers.front();\n  std::vector<long> newNumbers;\n\
    \  newNumbers.push_back(n);\n  for (long long i = 1; i < numbers.size(); ++i)\
    \ {\n    if (numbers[i] != numbers[i - 1]) {\n      n = numbers[i - 1];\n    \
    \  newNumbers.push_back(n);\n    }\n  }\n  return newNumbers;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103321
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    long seen = 0;\n    for (long\
    \ i : numbers) {\n        if (++seen == i) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp3s3tqzd0: /tmp/tmp3s3tqzd0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> output;\n  std::sort(numbers.begin(), numbers.end());\n\
    \  for (long i = numbers.size() - 1; i >= 0; --i) {\n    if (numbers[i] != numbers[i\
    \ - 1]) {\n      output.push_back(numbers[i]);\n      numbers.erase(numbers.begin()\
    \ + i);\n    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpl45_xgd5: /tmp/tmpl45_xgd5.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for(auto i : numbers) {\n        if(seen.count(i) > 0) {\n            continue;\n\
    \        }\n        seen.insert(i);\n        result.push_back(i);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n \
    \   assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpyxevxfpo: /tmp/tmpyxevxfpo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103323
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ ret;\n    for (long n: numbers) {\n        if (ret.count(n) == 0)\n        \
    \    ret.push_back(n);\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphybm9rl4.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphybm9rl4.cpp:9:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n    9 |         if (ret.count(n)\
    \ == 0)\n      |                 ^~~~~\n"
  stdout: ''
  timestamp: 1660103322
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n\n    std::vector<long>\
    \ output(numbers.size(), 0);\n\n    for (long i : numbers)\n        for (long\
    \ j : numbers)\n            if (i != j)\n                if (i % j == 0)\n   \
    \                 output[j] += i;\n\n    return output;\n}\nint main() {\n   \
    \ auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpj_s5gi7p: /tmp/tmpj_s5gi7p.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103323
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> numbers_no_dups;\n    for(auto i : numbers)\
    \ {\n        if (numbers_no_dups.count(i) == 0) numbers_no_dups.push_back(i);\n\
    \    }\n    return numbers_no_dups;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppcm4v6li.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppcm4v6li.cpp:8:29: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n    8 |         if (numbers_no_dups.count(i)\
    \ == 0) numbers_no_dups.push_back(i);\n      |                             ^~~~~\n"
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create set from the input numbers.\n    std::set<long> set_of_numbers(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> output;\n    // Reverse the order of\
    \ the set so as to maintain original order as in input.\n    std::set<long>::reverse_iterator\
    \ it = set_of_numbers.rbegin();\n    // Add elements to the output vector if they\
    \ don't already exist in output vector.\n    // The order of these elements in\
    \ output vector is same as in input vector.\n    while (it != set_of_numbers.rend())\
    \ {\n        long element = *it;\n        if (!set_of_numbers.count(element))\n\
    \            output.push_back(element);\n        ++it;\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpgcznpr_k: /tmp/tmpgcznpr_k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  typedef long long ll;\n  std::vector<long> output;\n  for (long\
    \ long x : numbers) {\n    if (output.size() >= 2) {\n      long long y = output.at(output.size()\
    \ - 1);\n      if (x == y) {\n        output.pop_back();\n      } else if (x <\
    \ y) {\n        output.push_back(x);\n      } else {\n        output.push_back(y);\n\
    \      }\n    } else {\n      output.push_back(x);\n    }\n  }\n  return output;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_5btdbc5: /tmp/tmp_5btdbc5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n  return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9x_yaxfl: /tmp/tmp9x_yaxfl.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103315
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> temp;\n    for(auto it = numbers.begin();\
    \ it != numbers.end(); ++it)\n    {\n        auto findIt = std::find(temp.begin(),\
    \ temp.end(), *it);\n        if(findIt != temp.end())\n        {\n           \
    \ temp.erase(findIt);\n        }\n        else\n        {\n            temp.push_back(*it);\n\
    \        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103323
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Use set to store unique elements.\n    std::vector<long>\
    \ numbers_set(numbers.begin(), numbers.end());\n    std::vector<long> numbers_set_copy;\n\
    \    numbers_set_copy.assign(numbers_set.begin(), numbers_set.end());\n    std::vector<long>\
    \ numbers_set_copy(numbers_set_copy.begin(), numbers_set_copy.end());\n    //\
    \ Use set copy to remove duplicates\n    // For each unique element, check if\
    \ it is in the input set\n    // If so, remove it from input set. Else, add it\
    \ to the output set.\n    std::vector<long> result;\n    for (long num : numbers_set_copy)\
    \ {\n        if (numbers.find(num) != numbers.end()) {\n            numbers.erase(numbers.find(num));\n\
    \        }\n        else {\n            numbers.push_back(num);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gbkhr2n.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1gbkhr2n.cpp:10:23: error: redeclaration of \u2018std::vector<long\
    \ int> numbers_set_copy\u2019\n   10 |     std::vector<long> numbers_set_copy(numbers_set_copy.begin(),\
    \ numbers_set_copy.end());\n      |                       ^~~~~~~~~~~~~~~~\n/tmp/tmp1gbkhr2n.cpp:8:23:\
    \ note: \u2018std::vector<long int> numbers_set_copy\u2019 previously declared\
    \ here\n    8 |     std::vector<long> numbers_set_copy;\n      |             \
    \          ^~~~~~~~~~~~~~~~\n/tmp/tmp1gbkhr2n.cpp:16:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   16 |         if (numbers.find(num)\
    \ != numbers.end()) {\n      |                     ^~~~\n/tmp/tmp1gbkhr2n.cpp:17:35:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   17 |             numbers.erase(numbers.find(num));\n      |             \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660103323
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpv13hqz1j: /tmp/tmpv13hqz1j.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> new_numbers;\n    std::vector<bool> seen(numbers.size(),\
    \ false);\n    // loop through elements and if seen flag set\n    // add it to\
    \ new_numbers vector\n    for(long i = 0; i < numbers.size(); i++) {\n       \
    \ if(seen[i]) {\n            new_numbers.push_back(numbers[i]);\n        } else\
    \ {\n            seen[i] = true;\n        }\n    }\n    return new_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp3e5bmtg7: /tmp/tmp3e5bmtg7.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create a vector of the distinct values.\n    // This will\
    \ be sorted.\n    std::vector<long> distinct_values;\n    long count = 0;\n  \
    \  for (auto x : numbers)\n        if (x != count)\n            distinct_values.push_back(x);\n\
    \        else\n            count += 1;\n    // Remove duplicates from the sorted\
    \ list.\n    // First sort by value from smallest to largest.\n    std::sort(distinct_values.begin(),\
    \ distinct_values.end());\n    distinct_values.erase(\n        std::unique(distinct_values.begin(),\
    \ distinct_values.end()), distinct_values.end());\n    // Then sort the vector\
    \ by value.\n    std::sort(distinct_values.begin(), distinct_values.end());\n\
    \    return distinct_values;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpygt1c3md: /tmp/tmpygt1c3md.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  std::vector<long> res;\n  long\
    \ prev = numbers[0];\n  res.push_back(prev);\n  for (size_t i = 1; i < numbers.size();\
    \ i++) {\n    if (numbers[i] == prev)\n      continue;\n    res.push_back(numbers[i]);\n\
    \    prev = numbers[i];\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpmdllz9n9: /tmp/tmpmdllz9n9.cpp:6: std::vector<long int> remove_duplicates(std::vector<long
    int>): Assertion `numbers.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  std::vector<long> v;\n  for (auto\
    \ i : numbers)\n    if (std::find(v.begin(), v.end(), i) == v.end())\n      v.push_back(i);\n\
    \  return v;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmptzte_n3p: /tmp/tmptzte_n3p.cpp:6: std::vector<long int> remove_duplicates(std::vector<long
    int>): Assertion `numbers.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Create output container\n    std::vector<long> output(numbers.size());\n\
    \    // Use set to hold input elements\n    std::set<long> numbers_set;\n    //\
    \ Iterate over all the elements in the input container\n    // and store them\
    \ in a set (we will remove them from the set)\n    // and store them into the\
    \ output container.\n    for(const auto& num : numbers)\n        numbers_set.insert(num);\n\
    \    // Iterate over the set and copy the elements to the output container\n \
    \   for(const auto& num : numbers_set)\n        output[numbers_set.find(num)]\
    \ = num;\n    // Return the output container.\n    return output;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5nrnujxd.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5nrnujxd.cpp:17:15: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::set<long\
    \ int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019\
    })\n   17 |         output[numbers_set.find(num)] = num;\n      |            \
    \   ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp5nrnujxd.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7: note:\
    \ candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp,\
    \ _Alloc>::size_type) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::reference = long int&; std::vector<_Tp, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1040:28: note: \
    \  no known conversion for argument 1 from \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018std::vector<long\
    \ int>::size_type\u2019 {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type\
    \ __n) _GLIBCXX_NOEXCEPT\n      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argume"
  stdout: ''
  timestamp: 1660103323
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  for (long i : numbers) {\n    if (result.size() >= 2 && result[0]\
    \ == i) {\n      result[1] = i;\n    } else {\n      result.push_back(i);\n  \
    \  }\n  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmppw6xm5tg: /tmp/tmppw6xm5tg.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            seen.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpe7ct2y3a: /tmp/tmpe7ct2y3a.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> ret;\n    std::sort(numbers.begin(), numbers.end());\n\
    \    long prev = numbers[0];\n    for (const auto& ele : numbers) {\n        if\
    \ (ele == prev) {\n            continue;\n        }\n        ret.push_back(ele);\n\
    \        prev = ele;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n    return numbers;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpv13hqz1j: /tmp/tmpv13hqz1j.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103318
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> new_numbers;\n  bool is_first_num = true;\n\
    \  for (long i = 0; i < numbers.size(); ++i) {\n    if (numbers[i] != numbers[i\
    \ - 1]) {\n      if (!is_first_num) {\n        new_numbers.push_back(numbers[i\
    \ - 1]);\n      }\n      is_first_num = false;\n    }\n  }\n  return new_numbers;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp10o6jsno: /tmp/tmp10o6jsno.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ ans;\n    long first = numbers[0];\n    long last = numbers.size() - 1;\n  \
    \  int i = 0;\n    while (i < numbers.size()) {\n        if (numbers[i] != numbers[i\
    \ + 1]) {\n            if (numbers[i] > first) {\n                ans.push_back(first);\n\
    \                first = numbers[i];\n            } else if (numbers[i] < last)\
    \ {\n                ans.push_back(last);\n                last = numbers[i];\n\
    \            }\n        }\n        ++i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  std::vector<long> uniqueNumbers(numbers.size());\n\
    \  std::unordered_set<long> seen;\n  for (auto const &num : numbers) {\n    if\
    \ (seen.find(num) == seen.end()) {\n      seen.insert(num);\n      uniqueNumbers.push_back(num);\n\
    \    }\n  }\n  return uniqueNumbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpecsr9rjf: /tmp/tmpecsr9rjf.cpp:6: std::vector<long int> remove_duplicates(std::vector<long
    int>): Assertion `numbers.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    output.reserve(numbers.size());\n\
    \    std::sort(numbers.begin(), numbers.end());\n\n    long last_number = numbers[0];\n\
    \    long count = 0;\n    for (int i = 1; i < numbers.size(); ++i) {\n       \
    \ if (numbers[i] == last_number) {\n            count++;\n        } else {\n \
    \           count = 1;\n            last_number = numbers[i];\n        }\n   \
    \     if (count > 1) {\n            output.push_back(last_number);\n         \
    \   count = 1;\n        }\n    }\n\n    return output;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    std::map<long, int> count_map;\n\
    \    for (long number: numbers) {\n        count_map[number]++;\n    }\n    for\
    \ (auto number_counts: count_map) {\n        if (number_counts.second > 1) {\n\
    \            output.push_back(number_counts.first);\n        }\n    }\n    return\
    \ output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp128n7ao6: /tmp/tmp128n7ao6.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> output;\n  output.reserve(numbers.size());\n\
    \  for (auto &elem : numbers) {\n    if (output.size() <= 0 || elem != output[output.size()-1])\
    \ {\n      output.push_back(elem);\n    }\n  }\n  return output;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpqghjb2rp: /tmp/tmpqghjb2rp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::set<long> seen;\n  for (auto\
    \ i : numbers) {\n    if (!seen.count(i))\n      result.push_back(i);\n    seen.insert(i);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp4ankfmv5: /tmp/tmp4ankfmv5.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Create a map to hold the elements that appear more than once\n\
    \  // Key is integer, value is how many times\n  std::unordered_map<long, long>\
    \ double_counted;\n  // Now loop and keep track of elements that appear more than\
    \ once\n  for (auto it = numbers.begin(); it != numbers.end(); it++) {\n    long\
    \ num = *it;\n    // If not yet seen, add that number to the map\n    if (double_counted.count(num)\
    \ == 0) {\n      double_counted[num] = 1;\n      // If seen before, increment\
    \ the counter\n    } else {\n      double_counted[num]++;\n    }\n  }\n  // Now\
    \ loop again and copy out just the values whose counter == 1\n  numbers.clear();\n\
    \  numbers.reserve(double_counted.size());\n  for (auto it = double_counted.begin();\
    \ it != double_counted.end(); it++) {\n    if (it->second == 1) {\n      numbers.push_back(it->first);\n\
    \    }\n  }\n  return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpt4pvfa97: /tmp/tmpt4pvfa97.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ ret;\n    std::unordered_map<long, bool> seen;\n    for (size_t i = 0; i < numbers.size();\
    \ ++i) {\n        if (seen.find(numbers[i]) == seen.end()) {\n            ret.push_back(numbers[i]);\n\
    \            seen[numbers[i]] = true;\n        }\n    }\n    return ret;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp55ozqcze: /tmp/tmp55ozqcze.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    std::unordered_map<long, int>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert({num, 1});\n            output.push_back(num);\n\
    \        }\n    }\n    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp6oi38b6v: /tmp/tmp6oi38b6v.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  \n  // loop through the vector\n\
    \  for (int i = 0; i < numbers.size(); i++) {\n    // if it is not yet contained,\
    \ add it to result.\n    if (result.find(numbers[i]) == result.end()) {\n    \
    \  result.push_back(numbers[i]);\n    } else {\n      // if it already contained,\
    \ remove it from result\n      std::vector<long>::iterator it = std::find(result.begin(),\
    \ result.end(), numbers[i]);\n      result.erase(it);\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpde5iomua.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpde5iomua.cpp:11:16: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   11 |     if (result.find(numbers[i])\
    \ == result.end()) {\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> ans;\n  std::unordered_map<long, int> counts;\n\
    \  for (auto n : numbers) {\n    auto it=counts.find(n);\n    if (it != counts.end())\n\
    \      ans.push_back(n);\n    else\n      ans.push_back(n+1);\n    counts[n]++;\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpxn8xd5wr: /tmp/tmpxn8xd5wr.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> new_numbers;\n  long previous_number = numbers.front();\n\
    \  for (long number : numbers) {\n    if (number == previous_number) {\n     \
    \ continue;\n    }\n    new_numbers.push_back(number);\n    previous_number =\
    \ number;\n  }\n  return new_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    int n = numbers.size();\n    // Remove duplicates until only\
    \ 1 element left\n    while (n > 1) {\n        // Sort the list\n        std::sort(numbers.begin(),\
    \ numbers.end());\n        // Remove duplicates\n        numbers.erase(std::unique(numbers.begin(),\
    \ numbers.end()), numbers.end());\n        // Decrement n\n        --n;\n    }\n\
    \    return numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpdzaqujkp: /tmp/tmpdzaqujkp.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    long count = 0;\n    for (long\
    \ num : numbers) {\n        if (count < num) {\n            count = num;\n   \
    \         output.clear();\n        }\n        output.push_back(num);\n    }\n\
    \    return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmphmn33h2m: /tmp/tmphmn33h2m.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Step 1: Make a temporary array to hold all our values\n \
    \   std::vector<long> temporary(numbers.begin(), numbers.end());\n\n    // Step\
    \ 2: Sort them and get rid of duplicates\n    std::sort(temporary.begin(), temporary.end());\n\
    \    temporary.erase(std::unique(temporary.begin(), temporary.end()) - temporary.begin(),\
    \ temporary.end());\n\n    // Step 3: Return the remaining values\n    return\
    \ temporary;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzk1erqx3.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzk1erqx3.cpp:11:105: error: no matching function for call\
    \ to \u2018std::vector<long int>::erase(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >::difference_type, std::vector<long int>::iterator)\u2019\
    \n   11 |     temporary.erase(std::unique(temporary.begin(), temporary.end())\
    \ - temporary.begin(), temporary.end());\n      |                            \
    \                                                                            \
    \ ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpzk1erqx3.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7: note:\
    \ candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1427:7: note:   candidate expects 1 argument,\
    \ 2 provided\n/usr/include/c++/9/bits/stl_vector.h:1454:7: note: candidate: \u2018\
    std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::const_iterator) [with _Tp\
    \ = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<l"
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Make an empty vector the same size as the input.\n    std::vector<long>\
    \ result;\n    std::sort(numbers.begin(), numbers.end());\n    // Push duplicates\
    \ to the end of the vector.\n    for (auto it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (it != numbers.begin())\n            result.push_back(*it);\n\
    \        if (it != numbers.end() && it == numbers.begin())\n            result.push_back(*it);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpyx13ep5f: /tmp/tmpyx13ep5f.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::unordered_set<long> seen;\n  numbers.reserve(numbers.size());\n\
    \  long value;\n  for (size_t i = 0; i < numbers.size(); ++i) {\n    if (seen.find(numbers[i])\
    \ == seen.end()) {\n      seen.insert(numbers[i]);\n      numbers.push_back(value);\n\
    \    }\n  }\n  numbers.erase(numbers.end() - 1);\n  return numbers;\n}\nint main()\
    \ {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp65wu82ls: /tmp/tmp65wu82ls.cpp:20: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  // Create an empty vector to hold the unique elements.\n  std::vector<long>\
    \ u;\n\n  // Loop over all elements in the input vector.\n  for (const auto& i\
    \ : numbers) {\n    // If this element has been seen before, ignore it.\n    if\
    \ (std::find(u.begin(), u.end(), i) == u.end()) {\n      // Otherwise, add this\
    \ element to the unique element vector.\n      u.push_back(i);\n    }\n  }\n\n\
    \  // Return the unique elements vector sorted by their original order.\n  return\
    \ std::sort(u.begin(), u.end());\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpudds4_xn.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpudds4_xn.cpp:19:19: error: could not convert \u2018std::sort<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(u.std::vector<long int>::begin(), u.std::vector<long\
    \ int>::end())\u2019 from \u2018void\u2019 to \u2018std::vector<long int>\u2019\
    \n   19 |   return std::sort(u.begin(), u.end());\n      |          ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                   |\n      |                   void\n"
  stdout: ''
  timestamp: 1660103324
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::vector<long>\
    \ result;\n  long current = numbers[0];\n  long count = numbers.size();\n  for\
    \ (long i = 1; i < count; i++) {\n    if (numbers[i] == current) {\n      continue;\n\
    \    }\n    result.push_back(current);\n    current = numbers[i];\n  }\n  result.push_back(current);\n\
    \  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> unique_numbers(numbers.size());\n  for (long\
    \ number: numbers) {\n    if (unique_numbers.count(number) == 0) {\n      unique_numbers.insert(number);\n\
    \    }\n  }\n  return unique_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6wsft7en.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6wsft7en.cpp:8:24: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n    8 |     if (unique_numbers.count(number)\
    \ == 0) {\n      |                        ^~~~~\n/tmp/tmp6wsft7en.cpp:9:35: error:\
    \ no matching function for call to \u2018std::vector<long int>::insert(long int&)\u2019\
    \n    9 |       unique_numbers.insert(number);\n      |                      \
    \             ^\nIn file included from /usr/include/c++/9/vector:72,\n       \
    \          from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6wsft7en.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5: note: candidate:\
    \ \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note:   candidate expects 2 arguments, 1 provided\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from"
  stdout: ''
  timestamp: 1660103324
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output;\n    for(long i : numbers)\n    {\n\
    \        long count = std::count(numbers.begin(), numbers.end(), i);\n       \
    \ if (count > 1)\n        {\n            output.push_back(i);\n            numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), i), numbers.end());\n        }\n    }\n    return output;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpxhwx8gk7: /tmp/tmpxhwx8gk7.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    if (numbers.empty()) return {};\n    std::unordered_set<long>\
    \ seen;\n    std::vector<long> unique_numbers;\n    unique_numbers.reserve(numbers.size());\n\
    \    // We need to use reverse iterators to iterate through the input in order\n\
    \    // to avoid invalidating the iterator after it is incremented.\n    for (std::reverse_iterator<std::vector<long>::const_iterator>\
    \ it =\n             numbers.rbegin(); it != numbers.rend(); ++it) {\n       \
    \ if (seen.find(*it) != seen.end()) {\n            numbers.erase(std::remove(numbers.begin(),\
    \ numbers.end(), *it),\n                          numbers.end());\n        } else\
    \ {\n            seen.insert(*it);\n            unique_numbers.push_back(*it);\n\
    \        }\n    }\n    return unique_numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpfpkbqkmt: /tmp/tmpfpkbqkmt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Return value\n    std::vector<long> uniques;\n    // Store\
    \ numbers in an unordered_set\n    std::unordered_set<long> seen;\n    // Store\
    \ numbers in an unordered_set and remove duplicates\n    for (auto i : numbers)\
    \ {\n        // Only add element if it has not been seen before\n        if (seen.find(i)\
    \ == seen.end()) {\n            seen.insert(i);\n            uniques.push_back(i);\n\
    \        }\n    }\n    return uniques;\n}\nint main() {\n    auto candidate =\
    \ remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp9f2zxhwc: /tmp/tmp9f2zxhwc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::sort(numbers.begin(), numbers.end());\n\
    \  std::set<long> seen;\n  for (int i = 0; i < numbers.size(); ++i) {\n    if\
    \ (seen.find(numbers[i]) != seen.end()) {\n      continue;\n    }\n    seen.insert(numbers[i]);\n\
    \    result.push_back(numbers[i]);\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpve5wwptj: /tmp/tmpve5wwptj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // Sort the input array in descending order\n    std::sort(numbers.begin(),\
    \ numbers.end(), std::greater<long>());\n    // Use a map to store the numbers\
    \ as they are encountered\n    std::vector<long> result(numbers.begin(), numbers.end());\n\
    \    std::map<long, long> seen;\n\n    // For all remaining elements, mark them\
    \ seen\n    for (long elem : numbers) {\n        if (seen.find(elem) == seen.end())\
    \ {\n            seen[elem] = elem;\n            result.push_back(elem);\n   \
    \     }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmppcav4y9o: /tmp/tmppcav4y9o.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  long long seen = 0;\n  for (const\
    \ auto& n : numbers) {\n    if (seen == 0) {\n      seen = n;\n      result.push_back(n);\n\
    \    } else {\n      if (n == seen) {\n        seen++;\n      } else {\n     \
    \   result.push_back(seen);\n        seen = n;\n      }\n    }\n  }\n  if (seen\
    \ > 0) {\n    result.push_back(seen);\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_tsvtsys: /tmp/tmp_tsvtsys.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> ans;\n  // First step: find duplicates and put\
    \ them into ans.\n  for (long i : numbers) {\n    if (std::find(ans.begin(), ans.end(),\
    \ i) == ans.end()) {\n      ans.push_back(i);\n    }\n  }\n  // Second step: remove\
    \ duplicates and return the result.\n  std::sort(ans.begin(), ans.end());\n  for\
    \ (long i : ans) {\n    while (!numbers.empty() && numbers.back() == i) {\n  \
    \    numbers.pop_back();\n    }\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpvj7dkwok: /tmp/tmpvj7dkwok.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long result = 0;\n  \n  // Create a std::set for O(1) time complexity\
    \ of lookup.\n  std::set<long> numbers_set;\n  \n  // Loop over every element\
    \ in the input vector\n  for (int i = 0; i < numbers.size(); i++) {\n    // If\
    \ the element already exists in the set, replace it with the current element.\n\
    \    if (numbers_set.find(numbers[i]) == numbers_set.end()) {\n      numbers_set.insert(numbers[i]);\n\
    \    } else {\n      result = numbers[i];\n    }\n  }\n  \n  // Return the resulting\
    \ set.\n  return {result};\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp74nir_41: /tmp/tmp74nir_41.cpp:26: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> temp(numbers.begin(), numbers.end());\n  \
    \  std::sort(temp.begin(), temp.end());\n    int n = temp.size(); // size of list\n\
    \    for (int i = 0; i < n - 1; ++i) {\n        if (temp[i] == temp[i + 1]) {\n\
    \            temp[++i] = temp[i + 1];\n            ++i;\n        }\n    }\n  \
    \  temp.resize(i); // remove duplicates\n    return temp;\n}\nint main() {\n \
    \   auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnwl7xce.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmnwl7xce.cpp:15:17: error: \u2018i\u2019 was not declared\
    \ in this scope\n   15 |     temp.resize(i); // remove duplicates\n      |   \
    \              ^\n"
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // sort numbers in ascending order\n    numbers.sort();\n  \
    \  // create a vector to hold the unique numbers and a vector to hold the number\
    \ of times a number occurs\n    std::vector<long> unique_numbers(numbers.size());\n\
    \    std::vector<long> frequency(numbers.size(), 0);\n    // loop through numbers\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        // add numbers to unique_numbers\
    \ vector and increment its frequency\n        unique_numbers[i] = numbers[i];\n\
    \        frequency[i]++;\n    }\n    // loop through unique_numbers and decrease\
    \ frequency of a number by 1\n    for (int i = 0; i < unique_numbers.size(); i++)\
    \ {\n        frequency[i]--;\n        // if frequency of a number is 0, remove\
    \ this number from unique_numbers vector\n        if (frequency[i] == 0) {\n \
    \           unique_numbers.erase(unique_numbers.begin() + i);\n        }\n   \
    \ }\n    return unique_numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeb0fja2x.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeb0fja2x.cpp:7:13: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |     numbers.sort();\n\
    \      |             ^~~~\n"
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> output(numbers.size(), 0);\n    // Loop through\
    \ the given input array, and keep track of the indices of\n    // the values that\
    \ have been encountered so far. If the value occurs\n    // again, skip it.\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        long count = output[i];\n\
    \        output[i] = std::count(numbers.begin() + i, numbers.end(), numbers[i]);\n\
    \        if (output[i] > 1) {\n            numbers.erase(std::remove_if(numbers.begin()\
    \ + i, numbers.end(),\n                                         [count](int n)\
    \ {\n                                             return count == std::count(numbers.begin()\
    \ + i,\n                                                                     \
    \   numbers.end(), n);\n                                         }),\n       \
    \                    numbers.end());\n        }\n    }\n    return output;\n}\n\
    int main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy92vx35l.cpp: In lambda function:\n/tmp/tmpy92vx35l.cpp:16:73:\
    \ error: \u2018numbers\u2019 is not captured\n   16 |                        \
    \                      return count == std::count(numbers.begin() + i,\n     \
    \ |                                                                         ^~~~~~~\n\
    /tmp/tmpy92vx35l.cpp:15:48: note: the lambda has no capture-default\n   15 | \
    \                                         [count](int n) {\n      |          \
    \                                      ^\n/tmp/tmpy92vx35l.cpp:5:55: note: \u2018\
    std::vector<long int> numbers\u2019 declared here\n    5 | std::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n      |                                     ~~~~~~~~~~~~~~~~~~^~~~~~~\n\
    /tmp/tmpy92vx35l.cpp:16:91: error: \u2018i\u2019 is not captured\n   16 |    \
    \                                          return count == std::count(numbers.begin()\
    \ + i,\n      |                                                              \
    \                             ^\n/tmp/tmpy92vx35l.cpp:15:48: note: the lambda\
    \ has no capture-default\n   15 |                                          [count](int\
    \ n) {\n      |                                                ^\n/tmp/tmpy92vx35l.cpp:10:17:\
    \ note: \u2018size_t i\u2019 declared here\n   10 |     for (size_t i = 0; i <\
    \ numbers.size(); ++i) {\n      |                 ^\n/tmp/tmpy92vx35l.cpp:17:73:\
    \ error: \u2018numbers\u2019 is not captured\n   17 |                        \
    \                                                 numbers.end(), n);\n      |\
    \                                                                         ^~~~~~~\n\
    /tmp/tmpy92vx35l.cpp:15:48: note: the lambda has no capture-default\n   15 | \
    \                                         [count](int n) {\n      |          \
    \                                      ^\n/tmp/tmpy92vx35l.cpp:5:55: note: \u2018\
    std::vector<long int> numbers\u2019 declared here\n    5 | std::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n      |                                     ~~~~~~~~~~~~~~~~~~^~~~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n   "
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> distinct_elements(numbers.size());\n  for (std::size_t\
    \ i = 0; i < numbers.size(); ++i) {\n    bool found = false;\n    for (std::size_t\
    \ j = i; j < distinct_elements.size(); ++j) {\n      if (numbers[i] == distinct_elements[j])\
    \ {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n\
    \      distinct_elements.push_back(numbers[i]);\n    }\n  }\n  return distinct_elements;\n\
    }\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmp_w_dvvuj: /tmp/tmp_w_dvvuj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::sort(numbers.begin(), numbers.end());\n  std::map<long, int>\
    \ count;\n  for (std::size_t i = 0; i < numbers.size(); ++i) {\n    long current\
    \ = numbers[i];\n    if (count.find(current) == count.end()) {\n      count[current]\
    \ = 1;\n    } else {\n      count[current]++;\n    }\n  }\n  std::vector<long>\
    \ output;\n  for (std::map<long, int>::iterator it = count.begin();\n       it\
    \ != count.end(); ++it) {\n    if (it->second == 1) {\n      output.push_back(it->first);\n\
    \    }\n  }\n  return output;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  std::vector<long> result;\n  std::set<long> seen_numbers;\n\n\
    \  for (long number : numbers) {\n    if (seen_numbers.count(number) == 0) {\n\
    \      seen_numbers.insert(number);\n      result.push_back(number);\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = remove_duplicates;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpx4zf6jq4: /tmp/tmpx4zf6jq4.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    std::vector<long> duplicates(numbers.size(), 0);\n    for(size_t\
    \ i = 0; i < numbers.size(); ++i) {\n        for(size_t j = i; j < numbers.size();\
    \ ++j) {\n            if((numbers[j] == numbers[i]) || !(numbers[j] == numbers[i]))\
    \ break;\n            duplicates[j] += 1;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for(size_t i = 0; i < duplicates.size(); ++i) if(duplicates[i]\
    \ > 1) result.push_back(i);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpydspjbd3: /tmp/tmpydspjbd3.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,
    (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long result = 0;\n  for (int i = 0; i < numbers.size(); ++i) {\n\
    \    for (int j = i + 1; j < numbers.size(); ++j) {\n      if (numbers[i] == numbers[j])\
    \ {\n        numbers.erase(numbers.begin() + j);\n      }\n    }\n  }\n  return\
    \ numbers;\n}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpkh15uyk_: /tmp/tmpkh15uyk_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n    // sort ascending first\n    std::sort(numbers.begin(), numbers.end());\n\
    \n    std::vector<long> new_numbers;\n\n    // Loop through numbers and keep track\
    \ of whether we have seen this number before\n    bool seen[numbers.size()];\n\
    \    for (long i = 0; i < numbers.size(); ++i) {\n        seen[i] = false;\n \
    \   }\n\n    // Loop through numbers again and skip numbers that occur more than\
    \ once\n    for (long i = 0; i < numbers.size(); ++i) {\n        if (!seen[i])\
    \ {\n            new_numbers.push_back(numbers[i]);\n            seen[i] = true;\n\
    \        }\n    }\n\n    return new_numbers;\n}\nint main() {\n    auto candidate\
    \ = remove_duplicates;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,\
    \ (long)4, (long)5})));\n}\n"
  status: Exception
  stderr: 'tmpk5gc_ipz: /tmp/tmpk5gc_ipz.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1,
    (long)4, (long)5}))'' failed.

    '
  stdout: ''
  timestamp: 1660103325
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
    \ remove all elements that occur more than once.\n// Keep order of elements left\
    \ the same as in the input.\nstd::vector<long> remove_duplicates(std::vector<long>\
    \ numbers) {\n  long hash[numbers.size()];\n  for (long i = 0; i < numbers.size();\
    \ i++) {\n    hash[numbers[i]] = i;\n  }\n  std::vector<long> ans;\n  while (numbers.size()\
    \ > 0) {\n    long curr = numbers[0];\n    ans.push_back(curr);\n    numbers.erase(numbers.begin()\
    \ + std::remove(numbers.begin(), numbers.end(), curr));\n    for (long i = 0;\
    \ i < numbers.size(); i++) {\n      if (numbers[i] == curr) {\n        numbers.erase(numbers.begin()\
    \ + i);\n        break;\n      }\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
    \ (long)5})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbl0va5x.cpp: In function \u2018std::vector<long int> remove_duplicates(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwbl0va5x.cpp:14:35: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   14 |     numbers.erase(numbers.begin()\
    \ + std::remove(numbers.begin(), numbers.end(), curr));\n      |             \
    \      ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \
    \     |                                |               |\n      |            \
    \                    |               __normal_iterator<[...],[...]>\n      | \
    \                               __normal_iterator<[...],[...]>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwbl0va5x.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type\u2019 {aka \u2018long int\u2019\
    }\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n    \
    \  |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note: candidate: \u2018__gnu_cxx::__nor"
  stdout: ''
  timestamp: 1660103325
