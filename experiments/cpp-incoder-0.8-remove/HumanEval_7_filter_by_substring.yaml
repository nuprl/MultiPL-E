name: HumanEval_7_filter_by_substring
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that contain given substring\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
  \ strings, std::string substring) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
  xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
  , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
  trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"})), (\"run\")) == (std::vector<std::string>({(std::string)\"\
  grunt\", (std::string)\"prune\"})));\n}\n"
completions: ["    std::set<std::string> result;\n    std::copy(std::begin(strings),\
    \ std::end(strings), std::inserter(result, result.end()));\n    return std::copy_if(std::begin(strings),\
    \ std::end(strings), std::inserter(result, result.end()) ,\n        std::bind(std::equal_to<std::string>(),\
    \ std::placeholders::_1, substring));", "    // Create a temp list for holding\
    \ our filtered strings\n    std::vector<std::string> temp_strings;\n\n    // Loop\
    \ through each string in input list\n    for (auto it = strings.begin(); it !=\
    \ strings.end(); it++) {\n        // Check if our current string contains the\
    \ substring\n        if (std::find(*it, substring.begin(), substring.end()) !=\
    \ substring.end())\n            temp_strings.push_back(*it);\n    }\n\n    return\
    \ temp_strings;", "    assert(!strings.empty());\n    assert(substring);\n   \
    \ std::vector<std::string> substring_vec(substring);\n    std::set<std::string>\
    \ all_strings(substring);\n    std::vector<std::string> results;\n    for (const\
    \ auto &s : strings) {\n        all_strings.insert(s);\n    }\n    for (const\
    \ auto &s : substring_vec) {\n        results.push_back(all_strings.find(s));\n\
    \    }\n    return results;", "    std::vector<std::string> result;\n    for (auto\
    \ const &str : strings) {\n        if (substring.find(str) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "    // Create a vector with the filtered results\n    std::vector<std::string>\
    \ filtered_strings;\n    // Loop through all strings\n    for (std::string &str\
    \ : strings)\n    {\n        // If this string contains the substring, add it\
    \ to our filtered list\n        if (substring in str)\n            filtered_strings.push_back(str);\n\
    \    }\n    return filtered_strings;", "    std::vector<std::string> result;\n\
    \    for (size_t i = 0; i < strings.size(); i++) {\n        if(substring == strings[i])\n\
    \            result.push_back(strings[i]);\n    }\n    return result;", "    std::vector<std::string>\
    \ out;\n    for (auto &it : strings) {\n        auto pos = it.find(substring);\n\
    \        if (pos != std::string::npos)\n            out.push_back(it);\n    }\n\
    \    return out;", "    std::vector<std::string> ans;\n    for (const auto& el\
    \ : strings) {\n        if (el.find(substring) != std::string::npos) {\n     \
    \       ans.push_back(el);\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ ret;\n    for (std::string x : strings)\n    {\n        if (x.find(substring)\
    \ != std::string::npos)\n            ret.push_back(x);\n    }\n    return ret;",
  "\tstd::vector<std::string> outputs;\n\tfor (std::string &s : strings) {\n\t\tif\
    \ (s.find(substring) != std::string::npos) {\n\t\t\toutputs.push_back(s);\n\t\t\
    }\n\t}\n\treturn outputs;", "    std::vector<std::string> result;\n    \n    for\
    \ (std::string string : strings)\n        if (string.find(substring) != std::string::npos)\n\
    \            result.push_back(string);\n            \n    return result;", " \
    \   std::vector<std::string> result;\n    for(std::size_t i = 0; i < strings.size();\
    \ i++) {\n        if(strings[i].find(substring) != std::string::npos) {\n    \
    \        result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string cur : strings) {\n \
    \       if (cur.find(substring) != std::string::npos) {\n            result.push_back(cur);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> filtered;\n\
    \  for (auto &s: strings) {\n    if (substring.find(s) != std::string::npos) filtered.push_back(s);\n\
    \  }\n  return filtered;", "    std::vector<std::string> res;\n    for (auto it\
    \ : strings) {\n        if (it.find(substring) != std::string::npos)\n       \
    \     res.push_back(it);\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    for (auto &str : strings)\n        if (str.find(substring) != std::string::npos)\n\
    \            result.push_back(str);\n    return result;", "  // Store substring\
    \ and its corresponding count\n  std::map<std::string, int> substr_counter;\n\
    \  for (const auto &string : strings) {\n    // If the current string is equal\
    \ to the substring then increment the count\n    if (string.find(substring) !=\
    \ std::string::npos) {\n      substr_counter[string]++;\n    }\n  }\n  // Now\
    \ filter the strings which have same count as substrings\n  std::vector<std::string>\
    \ filtered_strings;\n  for (const auto &s : strings) {\n    if (substr_counter[s]\
    \ > 1) {\n      filtered_strings.push_back(s);\n    }\n  }\n  return filtered_strings;",
  "    std::vector<std::string> output;\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        if(strings[i].find(substring) != std::string::npos) {\n    \
    \        output.push_back(strings[i]);\n        }\n    }\n    return output;",
  "    std::unordered_set<std::string> string_set;\n    for(const auto &str : strings)\
    \ {\n        string_set.insert(str);\n    }\n    std::vector<std::string> result;\n\
    \    for (const auto &str : strings) {\n        if (string_set.find(str) != std::string::npos)\n\
    \            result.push_back(str);\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto & str : strings) {\n        auto pos = str.find(substring);\n\
    \        if (pos != std::string::npos) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    \n    for (auto & s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    \n    return result;",
  "  std::vector<std::string> filtered;\n  for (std::string s: strings) {\n    if\
    \ (s.find(substring) != std::string::npos) {\n      filtered.push_back(s);\n \
    \   }\n  }\n  return filtered;", "  strings.erase(std::remove_if(strings.begin(),\
    \ strings.end(),\n                               [&](std::string str) {\n    \
    \                             return !str.find(substring);\n                 \
    \              }),\n                strings.end());\n  return strings;", "  if(strings.size()\
    \ == 0) {\n    return strings;\n  }\n  std::vector<std::string> result;\n  std::string\
    \ tempString;\n  for(unsigned int i = 0; i < strings.size(); ++i) {\n    tempString\
    \ = strings[i];\n    if(substring.find(tempString) != std::string::npos) {\n \
    \     result.push_back(strings[i]);\n    }\n  }\n  return result;", "   auto it\
    \ = std::find_if(strings.begin(), strings.end(), [&](const std::string &s) {\n\
    \      return s.find(substring) != std::string::npos;\n   });\n\n   std::vector<std::string>\
    \ result;\n   if (it != strings.end())\n      result.push_back(*it);\n\n   return\
    \ result;", "    // Create a vector of all substrings\n    std::vector<std::string>\
    \ all_substrings;\n    for (std::string str : strings)\n        all_substrings.push_back(str);\n\
    \n    // Filter the strings based on substring\n    std::vector<std::string> substrings_filtered;\n\
    \    for (std::string str : all_substrings) {\n        if (str.find(substring)\
    \ != std::string::npos)\n            substrings_filtered.push_back(str);\n   \
    \ }\n\n    return substrings_filtered;", "    // Get string length\n    int len\
    \ = strings.size();\n\n    // Filter strings by substring\n    for (int i = 0;\
    \ i < len; i++) {\n        // If string contains substring\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            // Return substring\n            strings.erase(std::remove(strings.begin(),\
    \ strings.end(), strings[i]), strings.end());\n        }\n    }\n    // Return\
    \ vector of strings\n    return strings;", "    std::vector<std::string> substring_tokens;\n\
    \    for (const std::string& s : strings) {\n        if (s.find(substring) !=\
    \ std::string::npos)\n            substring_tokens.push_back(s);\n    }\n    return\
    \ substring_tokens;", "\tstd::vector<std::string> filtered;\n\t// Iterate over\
    \ all strings\n\tfor (const auto& s : strings)\n\t\t// Iterate over all substrings\
    \ in the string\n\t\tfor (const auto& s2 : s)\n\t\t\t// If substring s2 exists\
    \ inside the string s, store it in filtered\n\t\t\tif (s2.find(substring) != std::string::npos)\n\
    \t\t\t\tfiltered.push_back(s);\n\treturn filtered;", "    for (std::string &str\
    \ : strings) {\n        if (str.find(substring) != std::string::npos) continue;\n\
    \        strings.push_back(str);\n    }\n    return strings;", "    // We iterate\
    \ on the input list\n    for (size_t i = 0; i < strings.size(); i++) {\n     \
    \   // If the input string contains the substring we push it into the output list\n\
    \        if (strings[i].find(substring) != std::string::npos) {\n            strings.push_back(strings[i]);\n\
    \        }\n    }\n    // Return the output list\n    return strings;", "    std::vector<std::string>\
    \ substring_matches;\n    for (const auto& s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos)\n            substring_matches.push_back(s);\n    }\n\
    \    return substring_matches;", "    std::vector<std::string> result;\n    for\
    \ (std::string &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> filtered_strings;\n    bool found_substring = false;\n\
    \    for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            found_substring = true;\n        }\n        filtered_strings.push_back(s);\n\
    \    }\n    if (found_substring) {\n        return filtered_strings;\n    } else\
    \ {\n        throw std::runtime_error(\"The given string does not contain specified\
    \ substring\");\n    }", "  // Create a vector of strings to store filtered results\n\
    \  std::vector<std::string> filtered_strings;\n  // Copy each string in string\
    \ vector to a temporary string\n  for (auto &str : strings) {\n    // If string\
    \ contains substring then add it to filtered_strings\n    if (str.find(substring)\
    \ != std::string::npos) {\n      filtered_strings.push_back(str);\n    }\n  }\n\
    \  return filtered_strings;", "    std::vector<std::string> retval;\n    for(auto\
    \ str : strings) {\n        if (substring.find(str) != std::string::npos) {\n\
    \            retval.push_back(str);\n        }\n    }\n    return retval;", " \
    \ std::vector<std::string> filtered_strings;\n  std::string curr_string = \"\"\
    ;\n  for (auto& i : strings) {\n    curr_string += i;\n    if (curr_string.find(substring)\
    \ != std::string::npos)\n      filtered_strings.push_back(i);\n  }\n  return filtered_strings;",
  "    std::vector<std::string> result;\n    std::for_each(strings.begin(), strings.end(),\
    \ [&substring, &result](std::string & s) {\n        if (std::string(s).find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    });\n\
    \    return result;", "    std::set_intersection(\n        std::begin(strings),\
    \ std::end(strings), std::begin(strings), std::begin(strings),\n        [&substring](const\
    \ std::string &s) { return s.find(substring) != std::string::npos; });\n    return\
    \ std::vector();", "    std::vector<string> result;\n    // Go over the list strings\
    \ and check if each string contains substring\n    for(std::string str : strings)\
    \ {\n        // If substr is found\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;",
  "  std::vector<std::string> res;\n  for(auto &string : strings) {\n    if(substring\
    \ in string){\n      res.push_back(string);\n    }\n  }\n  return res;", "   \
    \ assert(strings.size() > 0);\n    std::vector<std::string> filtered_strings;\n\
    \    for (size_t i=0; i<strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ == std::string::npos)\n            continue;\n        filtered_strings.push_back(strings[i]);\n\
    \    }\n    return filtered_strings;", "    // Create a set with all the strings\
    \ that we want to keep\n    std::set<std::string> to_keep;\n\n    // For each\
    \ string in the input, check if it contains the substring or not\n    for (std::string\
    \ &string : strings) {\n        if (string.find(substring) != string::npos) {\n\
    \            to_keep.insert(string);\n        }\n    }\n\n    // Return the vector\
    \ of strings that we want to keep\n    return std::vector<std::string> (to_keep.begin(),\
    \ to_keep.end());", "    // Code from: https://stackoverflow.com/questions/7494497/removing-substring-from-stdstring\n\
    \    std::unordered_set<std::string> string_set;\n    for (auto& str : strings)\n\
    \        string_set.insert(str);\n    std::vector<std::string> ret;\n    for (auto&\
    \ str : strings)\n        if (string_set.count(str) != 0)\n            ret.push_back(str);\n\
    \    return ret;", "\tstd::vector<std::string> ret;\n\tfor (auto& str : strings)\
    \ {\n\t\tif (str.find(substring) != std::string::npos) {\n\t\t\tret.push_back(str);\n\
    \t\t}\n\t}\n\treturn ret;", "    std::vector<std::string> out;\n    for (auto&\
    \ str : strings) {\n        if(str.find(substring) != std::string::npos) out.push_back(str);\n\
    \    }\n    return out;", "  std::vector<std::string> result;\n  for (auto s :\
    \ strings) {\n    if (s.find(substring) != std::string::npos) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> filtered;\n    for\
    \ (std::size_t i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            filtered.push_back(strings[i]);\n     \
    \   }\n    }\n    return filtered;", "  std::vector<std::string> substring_filtered_strings;\n\
    \  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      substring_filtered_strings.push_back(s);\n    }\n  }\n  return substring_filtered_strings;",
  "    std::vector<std::string> result;\n    for (std::string word : strings) {\n\
    \        if (substring.find(word) != std::string::npos)\n            result.push_back(word);\n\
    \    }\n    return result;", "    std::vector<std::string> filtered_strings;\n\
    \    bool is_sub = true;\n    for(unsigned int i = 0; i < strings.size(); i++){\n\
    \        if(strings[i].find(substring) == strings[i].npos){\n            is_sub\
    \ = false;\n        }\n    }\n\n    if(is_sub){\n        for(unsigned int i =\
    \ 0; i < strings.size(); i++){\n            if(strings[i].find(substring) == 0){\n\
    \                filtered_strings.push_back(strings[i]);\n            }\n    \
    \    }\n    }\n    return filtered_strings;", "  std::vector<std::string> res;\n\
    \  for (auto &str : strings) {\n    if (str.find(substring) != std::string::npos)\n\
    \      res.push_back(str);\n  }\n  return res;", "    std::vector<std::string>\
    \ filtered_vector;\n    \n    for (auto &s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            filtered_vector.push_back(s); // Keep the\
    \ string\n        }\n    }\n\n    return filtered_vector;", "    // First pass:\
    \ filter out strings that don't contain substring\n    std::vector<std::string>\
    \ substring_filtered_strings;\n    for (const auto &str : strings) {\n       \
    \ if (substring.find(str) != std::string::npos) {\n            substring_filtered_strings.push_back(str);\n\
    \        }\n    }\n\n    // Second pass: keep all strings that contain substring\n\
    \    std::vector<std::string> contains_filtered_strings;\n    for (const auto\
    \ &str : substring_filtered_strings) {\n        contains_filtered_strings.push_back(substring.find(str)\
    \ != std::string::npos ? str : \"*NOT*FOUND*\");\n    }\n\n    return contains_filtered_strings;",
  "    std::vector<std::string> filtered_strings;\n    for (auto string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            filtered_strings.push_back(string);\n\
    \        }\n    }\n    return filtered_strings;", "    std::vector<std::string>\
    \ output;\n    for(unsigned int i = 0; i < strings.size(); ++i)\n    {\n     \
    \   if (strings[i].find(substring) != strings[i].npos)\n            output.push_back(strings[i]);\n\
    \    }\n    return output;", "  std::vector<std::string> res;\n  for(unsigned\
    \ int i = 0; i < strings.size(); ++i){\n    if(strings[i].find(substring) != std::string::npos){\n\
    \      res.push_back(strings[i]);\n    }\n  }\n  return res;", "  std::vector<std::string>\
    \ ret;\n  for (auto s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      ret.push_back(s);\n    }\n  }\n  return ret;", "  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < strings.size(); ++i) {\n    if (strings[i].find(substring)\
    \ != std::string::npos)\n      result.push_back(strings[i]);\n  }\n  return result;",
  "    std::vector<std::string> result;\n    for(auto & i : strings)\n        std::find(i.cbegin(),\
    \ i.cend(), substring) != i.cend()\n            ? result.push_back(i)\n      \
    \      : \"\";\n    return result;", "    std::vector<std::string> out;\n    for\
    \ (std::string &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ out.push_back(string);\n    }\n    return out;", "\tstd::vector<std::string>\
    \ output;\n\tfor (std::string s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\toutput.push_back(s);\n\t\t}\n\t}\n\treturn output;", "  std::vector<std::string>\
    \ filtered_strings;\n  for (auto &x : strings) {\n    if (x.find(substring) !=\
    \ std::string::npos) {\n      filtered_strings.emplace_back(x);\n    }\n  }\n\
    \  return filtered_strings;", "  std::vector<std::string> filtered_strings;\n\
    \  for (std::string &s: strings) {\n    if (std::find(s.begin(), s.end(), substring)\
    \ != s.end()) {\n      filtered_strings.push_back(s);\n    }\n  }\n  return filtered_strings;",
  "    std::vector<std::string> results;\n    for (auto& string : strings) {\n   \
    \     if (string.find(substring) != std::string::npos) {\n            results.push_back(string);\n\
    \        }\n    }\n    return results;", "    // Create output vector\n    std::vector<std::string>\
    \ outputs;\n    for (size_t i = 0; i < strings.size(); i++) {\n        // If substring\
    \ is not in string at index i, add string at index i to output vector\n      \
    \  if (strings[i].find(substring) == strings[i].npos) {\n            outputs.push_back(strings[i]);\n\
    \        }\n    }\n    // Return output\n    return outputs;", "    std::vector<std::string>\
    \ new_strings;\n    for (auto &string : strings) {\n        if (substring.find(string)\
    \ != std::string::npos) \n            new_strings.push_back(string);\n    }\n\
    \    return new_strings;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.find(substring) != std::string::npos) {\n   \
    \         result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for (auto& s : strings) {\n        if(s.find(substring)\
    \ != std::string::npos)\n            filtered_strings.push_back(s);\n    }\n \
    \   return filtered_strings;", "  std::vector<std::string> filtered_strings;\n\
    \  for (auto string : strings) {\n    if (substring == string) {\n      filtered_strings.push_back(string);\n\
    \    }\n  }\n  return filtered_strings;", "   std::vector<std::string> filtered_strings;\n\
    \   for (size_t i = 0; i < strings.size(); i++) {\n       if (strings[i].find(substring)\
    \ != string::npos) {\n           filtered_strings.push_back(strings[i]);\n   \
    \    }\n   }\n   return filtered_strings;", "  std::vector<std::string> results;\n\
    \  for (const auto &s : strings) {\n    if (std::find(s.begin(), s.end(), substring)\
    \ != s.end()) {\n      results.push_back(s);\n    }\n  }\n  return results;",
  "    std::set<std::string> set;\n    for(auto& s: strings) {\n        if(s.find(substring)\
    \ != std::string::npos) {\n            set.insert(s);\n        }\n    }\n\n  \
    \  std::vector<std::string> output;\n    for(const auto& s: set) {\n        output.push_back(s);\n\
    \    }\n\n    return output;", "    std::vector<std::string> result;\n    for\
    \ (auto & s : strings) {\n        if (substring.find(s) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n\n    for (const auto& string : strings)\
    \ {\n        if (string.find(substring) != std::string::npos) {\n            result.push_back(string);\n\
    \        }\n    }\n\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string input : strings) {\n        if (input.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(input);\n        }\n    }\n\
    \    return result;", "    std::vector<std::string> res;\n    // The string is\
    \ empty or has no substring - return it immediately\n    if (strings.empty() ||\
    \ strings[0] == substring) return res;\n    \n    // Iterate over all strings\n\
    \    for (std::string s : strings) {\n        // The string contains the substring\
    \ - add it\n        if (s.find(substring) != std::string::npos) {\n          \
    \  res.push_back(s);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    for (auto &v : strings) {\n        if (v.find(substring) != std::string::npos)\
    \ {\n            res.push_back(v);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ results;\n    for(auto s: strings) {\n        if(substring.find(s) != std::string::npos)\n\
    \            results.push_back(s);\n    }\n    return results;", "    std::vector<std::string>\
    \ strings_copy;\n    std::transform(std::begin(strings), std::end(strings), std::back_inserter(strings_copy),\
    \ [](std::string &s) {return s;});\n\n    std::vector<std::string> result;\n\n\
    \    for (std::vector<std::string>::iterator it = std::begin(strings_copy); it\
    \ != std::end(strings_copy); ++it) {\n        if (*it == substring) {\n      \
    \      result.push_back(*it);\n        }\n    }\n\n    return result;", "    std::vector<std::string>\
    \ outlist;\n    outlist.reserve(strings.size());\n    for(size_t i=0; i<strings.size();\
    \ i++) {\n        auto found=false;\n        for(size_t j=0; j<strings[i].size();\
    \ j++) {\n            if(strings[i][j] == substring[0]) {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if(found)\
    \ outlist.push_back(strings[i]);\n    }\n    return outlist;", "  std::vector<std::string>\
    \ result;\n  for (std::string str : strings) {\n    if (str.find(substring) !=\
    \ std::string::npos) {\n      result.push_back(str);\n    }\n  }\n  return result;",
  "    std::vector<std::string> ret;\n    bool any_filtered = false;\n    for (auto\
    \ &s : strings) {\n        if (substring.find(s) != std::string::npos) {\n   \
    \         ret.push_back(s);\n            any_filtered = true;\n        }\n   \
    \ }\n    if (!any_filtered) {\n        throw std::runtime_error(\"Substring \\\
    \"\" + substring + \"\\\" not found in any string in the input list!\");\n   \
    \ }\n    return ret;", "    std::vector<std::string> result;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        result.push_back(s);\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < strings.size(); ++i) {\n    if (strings[i].find(substring)\
    \ != std::string::npos) {\n      result.push_back(strings[i]);\n    }\n  }\n \
    \ return result;", "    assert(strings.size() > 0);\n    // First find the common\
    \ beginning of the substring\n    size_t common_start = 0;\n    size_t i = 0;\n\
    \    for (; i < strings.size() - 1; i++) {\n        if (strings[i].compare(0,\
    \ substring.size(), substring) == 0) {\n            common_start = i;\n      \
    \      break;\n        }\n    }\n\n    // Then find the substring\n    std::string\
    \ substring_copy = substring;\n    size_t common_end = strings.size();\n    for\
    \ (; i < strings.size() - 1; i++) {\n        if (strings[i].compare(common_start,\
    \ substring.size(), substring_copy) == 0) {\n            common_end = i;\n   \
    \         break;\n        }\n    }\n\n    // Then construct the result list from\
    \ the common start and common end\n    std::vector<std::string> result;\n    for\
    \ (size_t i = common_start; i <= common_end; i++) {\n        result.push_back(strings[i]);\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    bool contained\
    \ = false;\n    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            contained = true;\n            result.push_back(s);\n       \
    \ }\n    }\n    if (!contained) {\n        std::cerr << \"error: substring \"\
    \ << substring << \" not found among given strings: \";\n        for (auto s :\
    \ strings) {\n            std::cerr << s << std::endl;\n        }\n        exit(1);\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    bool found\
    \ = false;\n    for (auto &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            found = true;\n            result.push_back(string);\n\
    \        }\n    }\n    if (found == false) {\n        result.push_back(substring);\n\
    \    }\n    return result;", "    std::vector<std::string> retval;\n    for (auto\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        retval.push_back(s);\n        }\n    }\n    return retval;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    assert(strings.size() > 0);\n    assert(substring.size()\
    \ > 0);\n    std::vector<std::string> result;\n    for(auto it = strings.begin();\
    \ it != strings.end(); ++it) {\n        auto pos = std::search(it, strings.end(),\
    \ substring.begin(), substring.end());\n        if (pos != std::string::npos)\
    \ {\n            result.push_back(std::string(it, pos));\n        }\n    }\n \
    \   return result;", "    std::vector<std::string> ret;\n    std::string toBeSearched\
    \ = \"\\\"\" + substring;\n    for (size_t i = 0; i < strings.size(); ++i) {\n\
    \        bool found = false;\n        std::string s = strings[i];\n        if\
    \ (s.find(toBeSearched) == 0) {\n            ret.push_back(s);\n            found\
    \ = true;\n        }\n        if (found) {\n            continue;\n        }\n\
    \        if (s.find(substring, 0) == 0) {\n            ret.push_back(s);\n   \
    \     }\n    }\n    return ret;", "  std::vector<std::string> result;\n  for (size_t\
    \ i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring) != std::string::npos)\
    \ {\n      result.push_back(strings[i]);\n    }\n  }\n  return result;", "   \
    \ std::vector<std::string> res;\n    std::set_intersection(strings.begin(), strings.end(),\
    \ std::back_inserter(res), [](std::string s){return s.find(substring) != std::string::npos;\
    \ });\n    return res;", "    std::set<std::string> filter;\n    for (const auto&\
    \ string : strings) {\n        std::string lower = string.toLowerCase();\n   \
    \     if (substring.find(lower) != std::string::npos) {\n            filter.insert(string);\n\
    \        }\n    }\n    return filter;", "    std::vector<std::string> outputVector;\n\
    \    \n    for (auto i : strings) {\n        if (substring in i) {\n         \
    \   outputVector.push_back(i);\n        }\n    }\n    \n    return outputVector;",
  "    std::vector<std::string> filtered;\n    for (std::string s : strings) {\n \
    \       if (s.find(substring) != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> filtered_strings;\n\
    \    for(auto &string: strings) {\n        if(string.find(substring) != std::string::npos)\n\
    \            filtered_strings.push_back(string);\n    }\n    return filtered_strings;",
  "    std::vector<std::string> result;\n    for(auto &s: strings){\n        if(s.find(substring)!=std::string::npos)\n\
    \            result.push_back(s);\n    }\n    return result;", "    std::vector<std::string>\
    \ substrings;\n    // Loop through the strings and add strings that contain substring\
    \ to the new vector\n    for(auto s: strings) {\n        if(s.find(substring)\
    \ != std::string::npos) {\n            substrings.push_back(s);\n        }\n \
    \   }\n    return substrings;", "    // Create a list of strings that will hold\
    \ the filtered ones\n    std::vector<std::string> filtered_strings;\n\n    //\
    \ Check if substring is empty or null\n    if (substring.empty())\n        return\
    \ filtered_strings;\n\n    // Check every string in strings\n    for (std::string\
    \ string : strings)\n    {\n        // Check if string contains the substring\n\
    \        if (string.find(substring) != std::string::npos)\n        {\n       \
    \     // Add string to list\n            filtered_strings.push_back(std::move(string));\n\
    \        }\n    }\n    return filtered_strings;", "\tauto it = std::find_if(strings.begin(),\
    \ strings.end(), [substring](const std::string &str) {\n\t\treturn str.find(substring)\
    \ != std::string::npos;\n\t});\n\tstd::vector<std::string> result;\n\twhile (it\
    \ != strings.end()) {\n\t\tresult.push_back(*it);\n\t\tit++;\n\t}\n\treturn result;",
  "    std::vector<std::string> result;\n    for (const auto &s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> filtered;\n\
    \  for (auto& str : strings) {\n    if (std::find(str.begin(), str.end(), substring)\
    \ == str.end()) {\n      filtered.push_back(str);\n    }\n  }\n  return filtered;",
  "    std::cout << \"Input list of strings before filtering: \" << std::endl;\n \
    \   for (int i = 0; i < strings.size(); i++) {\n        std::cout << strings[i]\
    \ << std::endl;\n    }\n    // Sort input list\n    std::sort(strings.begin(),\
    \ strings.end());\n    // Filter list\n    std::vector<std::string> filtered_list;\n\
    \    std::string::size_type pos = 0;\n    for (std::string::size_type i = 0; i\
    \ < strings.size(); i++) {\n        while (pos < strings[i].length() && strings[i].substr(pos,\
    \ substring.length()) == substring) {\n            filtered_list.push_back(strings[i]);\n\
    \            pos = 0;\n        }\n        pos += strings[i].length();\n    }\n\
    \    std::cout << \"Input list of strings after filtering: \" << std::endl;\n\
    \    for (int i = 0; i < filtered_list.size(); i++) {\n        std::cout << filtered_list[i]\
    \ << std::endl;\n    }\n    return filtered_list;", "    std::vector<std::string>\
    \ filtered;\n    for (auto const &str : strings)\n        if (str.find(substring)\
    \ != std::string::npos)\n            filtered.push_back(str);\n    return filtered;",
  "    std::vector<std::string> result;\n    for (std::string line : strings) {\n\
    \        if (line.find(substring) != std::string::npos) {\n            result.push_back(line);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto& x : strings) {\n    if (x.find(substring) != std::string::npos)\
    \ {\n      result.emplace_back(x);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;", "    // We make a copy of the original list and remove all\
    \ items without substring\n    std::vector<std::string> filtered;\n    for (auto\
    \ & str : strings) {\n        auto pos = str.find(substring);\n        if (pos\
    \ != std::string::npos) {\n            filtered.push_back(str);\n        }\n \
    \   }\n    return filtered;", "  std::vector<std::string> filtered_strings;\n\
    \  for (int i = 0; i < strings.size(); ++i) {\n    if (strings[i].find(substring)\
    \ != std::string::npos) {\n      filtered_strings.push_back(strings[i]);\n   \
    \ }\n  }\n  return filtered_strings;", "    std::vector<std::string> res;\n  \
    \  for (const std::string& i : strings)\n        if (i.find(substring) != std::string::npos)\n\
    \            res.push_back(i);\n    return res;", "    std::set<std::string> s;\n\
    \    for (auto &i : strings) {\n        if (i.find(substring) != std::string::npos)\
    \ {\n            s.insert(i);\n        }\n    }\n    return std::move(s);", " \
    \ std::vector<std::string> filtered;\n  for (const auto &s : strings) {\n    if\
    \ (substring.find(s) != std::string::npos) {\n      filtered.push_back(s);\n \
    \   }\n  }\n  return filtered;", "    // TODO: Write the filter code\n    return\
    \ strings;", "    std::vector<std::string> filtered_strings;\n    for (std::string\
    \ s : strings) {\n        if (s.find(substring) != std::string::npos) {\n    \
    \        filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;",
  "    std::vector<std::string> result;\n\n    std::string search_string(substring);\n\
    \n    for(const auto& s: strings) {\n        size_t pos = 0;\n        size_t start_pos\
    \ = 0;\n        while((pos = s.find(search_string, start_pos)) != std::string::npos)\
    \ {\n            result.push_back(s.substr(start_pos, pos-start_pos));\n     \
    \       start_pos = pos + search_string.size();\n        }\n        if(start_pos\
    \ == s.length())\n            result.push_back(s);\n    }\n\n    return result;",
  "  std::unordered_set<std::string> result;\n  for (const auto &s : strings) {\n\
    \    if (s.find(substring) != std::string::npos) {\n      result.insert(s);\n\
    \    }\n  }\n  return std::vector<std::string>(result.begin(), result.end());",
  "    std::vector<std::string> result;\n    for (const auto& str : strings)\n   \
    \     if (std::find(str.begin(), str.end(), substring) != str.end()) result.push_back(str);\n\
    \    return result;", "    std::vector<std::string> filtered;\n    for (std::string\
    \ s: strings) {\n        if (s.find(substring) != std::string::npos) {\n     \
    \       filtered.push_back(s);\n        }\n    }\n    return filtered;", "   \
    \ // Create a result vector of the correct size to store the output\n    std::vector<std::string>\
    \ result;\n    // Iterate over the list of strings to filter\n    for (const auto&\
    \ s : strings) {\n        // If the current string contains the substring, add\
    \ it to the result\n        if (s.find(substring) != std::string::npos)\n    \
    \        result.push_back(s);\n    }\n    return result;", "    std::set<std::string>\
    \ set_substrings;\n    for (auto& i : strings) {\n        set_substrings.insert(i);\n\
    \    }\n    std::vector<std::string> result;\n    for (const auto& i : set_substrings)\
    \ {\n        if (i == substring) {\n            result.push_back(i);\n       \
    \ }\n    }\n    return result;", "  std::vector<std::string> filtered;\n  for\
    \ (std::string s : strings)\n    if (contains(substring, s))\n      filtered.push_back(s);\n\
    \  return filtered;", "  std::vector<std::string> filtered;\n  for (auto &s :\
    \ strings) {\n    if (s.find(substring) != std::string::npos) {\n      filtered.push_back(s);\n\
    \    }\n  }\n  return filtered;", "    std::vector<std::string> res;\n    std::set<std::string>\
    \ strings_set;\n    for (auto const& s : strings) {\n        strings_set.insert(s);\n\
    \    }\n    for (auto const& s : strings_set) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            res.push_back(s);\n        }\n    }\n \
    \   return res;", "  // Create a filtered vector\n  std::vector<std::string> filterd_vector;\n\
    \  // If there is some element in the vector that contains given substring\n \
    \ for (auto& elem : strings) {\n    if (elem.find(substring) != std::string::npos)\
    \ {\n      filterd_vector.push_back(elem);\n    }\n  }\n  // Return the vector\n\
    \  return filterd_vector;", "  std::set<std::string> seen;\n  std::vector<std::string>\
    \ res;\n  for(auto s : strings) {\n    if(s.find(substring) != std::string::npos)\
    \ {\n      res.push_back(s);\n      seen.insert(s);\n    }\n  }\n  return res;",
  "    std::vector<std::string> ret;\n    for (const auto& str : strings)\n      \
    \  if (str.find(substring) != std::string::npos)\n            ret.push_back(str);\n\
    \    return ret;", "    std::vector<std::string> result;\n    std::set<std::string>\
    \ strings_set;\n    \n    for (auto &string : strings) {\n        if (strings_set.find(string)\
    \ == strings_set.end())\n            strings_set.insert(string);\n    }\n    \n\
    \    for (auto &string : strings) {\n        if (strings_set.find(string) != strings_set.end())\n\
    \            result.push_back(std::move(string));\n    }\n    \n    return result;",
  "    std::vector<std::string> result;\n    std::set<std::string> s;\n    for (std::string\
    \ s : strings) s.insert(s);\n    for (std::string s : strings) s.erase(s.find(substring));\n\
    \    for (std::string s : strings) s.insert(substring);\n    for (std::string\
    \ s : strings) result.push_back(s);\n    return result;", "  std::vector<std::string>\
    \ filtered_strings;\n  for (std::string string : strings) {\n    if (string.find(substring)\
    \ != std::string::npos) {\n      filtered_strings.push_back(string);\n    }\n\
    \  }\n  return filtered_strings;", "    std::set<std::string> strings_set;\n \
    \   for(std::string item:strings) strings_set.insert(item);\n    std::vector<std::string>\
    \ result;\n    for(auto item:strings_set){\n        if(item.find(substring)!=std::string::npos)\n\
    \            result.push_back(item)\n    }\n    return result;", "    std::vector<std::string>\
    \ out;\n    for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            out.emplace_back(s);\n        }\n    }\n    return out;", " \
    \ std::set<std::string> result;\n  for (auto str : strings) {\n    if (str.find(substring)\
    \ != std::string::npos) result.insert(str);\n  }\n  return std::vector<std::string>(result.begin(),\
    \ result.end());", "  std::vector<std::string> result;\n  for(auto & s: strings)\
    \ {\n    if(s.find(substring) != std::string::npos) result.push_back(s);\n  }\n\
    \  return result;", "  std::vector<std::string> result;\n  for (int i = 0; i <\
    \ strings.size(); ++i) {\n    if (std::find(strings[i].begin(), strings[i].end(),\
    \ substring) != strings[i].end()) {\n      result.push_back(strings[i]);\n   \
    \ }\n  }\n  return result;", "  \n  // First we count how many times substring\
    \ appears in each string \n  std::map<std::string, size_t> string_counts;\n  for\
    \ (std::string s : strings)\n    string_counts[s] += 1;\n  \n  // Then we create\
    \ new string and we append substrings whose count is greater than 0 to the new\
    \ string\n  std::vector<std::string> result;\n  for (std::map<std::string, size_t>::iterator\
    \ it = string_counts.begin(); it != string_counts.end(); ++it) {\n    if (it->second\
    \ > 0) {\n      result.push_back(it->first);\n    }\n  }\n\n  return result;",
  "  std::set<std::string> string_set;\n  for (auto &i : strings) {\n    if (string_set.find(i)\
    \ == string_set) {\n      std::cout << \"'\" << i << \"' contains substring: '\"\
    \ << substring << \"'\" << std::endl;\n      continue;\n    }\n    string_set.insert(i);\n\
    \  }\n  return strings;", "    std::vector<std::string> result;\n    for (const\
    \ auto& string : strings)\n        if (string.find(substring) != std::string::npos)\n\
    \            result.push_back(string);\n    return result;", "  std::set<std::string>\
    \ seen;\n  for(auto &i : strings){\n      if(seen.find(i) == seen.end())\n   \
    \   {\n          seen.insert(i);\n      }\n  }\n  return strings;", "    std::vector<std::string>\
    \ result;\n    bool found_substring = false;\n    for (auto& str : strings) {\n\
    \        if (substring.find(str) != std::string::npos) {\n            found_substring\
    \ = true;\n            result.push_back(str);\n        }\n    }\n    if (!found_substring)\
    \ {\n        result.push_back(strings[0]);\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n\n    for (auto const &s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \n    return result;", "    std::vector<std::string> result;\n    bool found =\
    \ false;\n    for (std::string &s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            found = true;\n        }\n    }\n    if\
    \ (found) {\n        result.push_back(strings.front());\n    }\n    return result;",
  "    std::vector<std::string> ret;\n    for (auto const& str : strings) {\n    \
    \    auto pos = str.find(substring);\n        if (pos != std::string::npos) {\n\
    \            ret.push_back(str);\n        }\n    }\n    return ret;", "  std::set<std::string>\
    \ string_set;\n  for(auto& x : strings)\n    if(x == substring)\n      string_set.insert(x);\n\
    \  std::vector<std::string> output;\n  for(auto& x : strings)\n    if(string_set.find(x)\
    \ != string_set.end())\n      output.push_back(x);\n  return output;", "  std::string\
    \ filtered_strings;\n  for (auto &string : strings) {\n    if (string.find(substring)\
    \ != string::npos) {\n      filtered_strings += string + '\\n';\n    }\n  }\n\
    \  return filtered_strings;", "    std::vector<std::string> results;\n    for\
    \ (std::string string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            results.push_back(string.substr(0, string.find(substring)));\n\
    \        }\n    }\n    return results;", "    std::vector<std::string> filteredStrings;\n\
    \    for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\n\
    \            filteredStrings.push_back(str);\n    }\n    return filteredStrings;",
  "    std::vector<std::string> result;\n    for (auto& s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> filtered;\n\
    \    for (std::size_t i = 0; i < strings.size(); i++) {\n        size_t pos =\
    \ strings[i].find(substring);\n        if (pos != std::string::npos)\n       \
    \     filtered.push_back(strings[i]);\n    }\n    return filtered;", "    std::vector<std::string>\
    \ result;\n    for (std::string str : strings) {\n        if(str.find(substring)\
    \ != std::string::npos)\n            result.push_back(str);\n    }\n    return\
    \ result;", "  std::vector<std::string> res;\n  for (auto &s : strings)\n    if\
    \ (s.find(substring) != std::string::npos) res.push_back(s);\n  return res;",
  "    std::cout << \"Number of strings: \" << strings.size() << std::endl;\n    //\
    \ Store unique strings in set\n    std::set<std::string> uniqueStrings;\n    \n\
    \    // Iterate through list of strings\n    for (std::vector<std::string>::const_iterator\
    \ it(strings.begin()); it != strings.end(); ++it)\n    {\n        // Check if\
    \ the current string is equals the substring\n        if (*it == substring)\n\
    \        {\n            uniqueStrings.insert(*it);\n        }\n    }\n\n    //\
    \ Create a vector of unique strings\n    std::vector<std::string> uniqueStringsVec;\n\
    \    \n    // Copy unique strings from set to vector\n    for (std::set<std::string>::const_iterator\
    \ it(uniqueStrings.begin()); it != uniqueStrings.end(); ++it)\n    {\n       \
    \ uniqueStringsVec.push_back(*it);\n    }\n\n    // Print number of strings filtered\
    \ for substring\n    std::cout << \"Number of strings filtered for substring:\
    \ \" << uniqueStringsVec.size() << std::endl;\n\n    return uniqueStringsVec;",
  "    assert(!strings.empty());\n    assert(substring);\n\n    std::vector<std::string>\
    \ result;\n    std::set<std::string> to_delete;\n\n    for(auto it=strings.begin();it!=strings.end();it++)\
    \ {\n        std::string candidate = *it;\n\n        // Delete the string from\
    \ the list if we already have the substring\n        if(candidate.find(substring)!=std::string::npos)\
    \ {\n            to_delete.insert(candidate);\n        } else {\n            result.push_back(candidate);\n\
    \        }\n    }\n\n    // Delete the strings from the list that have been removed\n\
    \    for(auto it=to_delete.begin();it!=to_delete.end();it++) {\n        strings.erase(std::remove(strings.begin(),\
    \ strings.end(), *it), strings.end());\n    }\n\n    return result;", "  std::vector<std::string>\
    \ result;\n  std::copy_if(strings.begin(), strings.end(), std::back_inserter(result),\n\
    \               [&substring](std::string s) {\n                 return s.find(substring)\
    \ != std::string::npos;\n               });\n  return result;", "    std::vector<std::string>\
    \ output;\n    for (auto const& string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            output.push_back(string);\n        }\n\
    \    }\n    return output;", "  std::vector<std::string> output; // Store the\
    \ filtered strings\n  for (const auto& string : strings) {\n    if (string.find(substring)\
    \ != std::string::npos) output.push_back(string);\n  }\n  return output;", " \
    \   std::vector<std::string> result;\n    \n    for (auto it = strings.begin();\
    \ it != strings.end(); ++it) {\n        if (std::strstr(*it, substring) == NULL)\n\
    \            result.push_back(std::string(*it));\n    }\n\n    return result;",
  "\tstd::vector<std::string> out;\n\tstd::set<std::string> ss;\n\tfor(auto &s: strings){\n\
    \t\tif(s.find(substring) == 0) ss.insert(s);\n\t}\n\tfor(auto &s: ss) out.push_back(s);\n\
    \treturn out;", "  std::vector<std::string> output;\n  for (auto &item : strings)\
    \ {\n    if (item.find(substring) != std::string::npos) {\n      output.push_back(item);\n\
    \    }\n  }\n  return output;", "  std::set<std::string> result;\n  for (auto&\
    \ string : strings) {\n    if (string.find(substring) != std::string::npos)\n\
    \      result.insert(string);\n  }\n  return std::vector<std::string>(result.begin(),\
    \ result.end());", "  std::vector<std::string> filtered_strings;\n  std::string\
    \ current_string = \"\";\n  for (auto it = strings.begin(); it != strings.end();\
    \ it++) {\n    current_string += (*it);\n    if (current_string.find(substring)\
    \ != std::string::npos) {\n      filtered_strings.push_back(*it);\n    }\n  }\n\
    \  return filtered_strings;", "  std::vector<std::string> result;\n  for (std::string\
    \ str : strings) {\n    if (str.find(substring) != std::string::npos) {\n    \
    \  result.push_back(str);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ filtered_strings;\n    for(auto& string: strings) {\n        std::size_t found\
    \ = string.find(substring);\n        if(found != std::string::npos) {\n      \
    \      filtered_strings.push_back(string);\n        }\n    }\n    return filtered_strings;",
  "  std::regex re(substring);\n  return std::remove_copy_if(strings.begin(), strings.end(),\
    \ std::back_inserter(result), re);", "    // Initialize output list\n    std::vector<std::string>\
    \ out;\n    // Loop through all strings and keep only those containing given substring\n\
    \    for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            out.push_back(str);\n        }\n    }\n    return out;", "  \
    \  std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    // Store the strings we need\n  \
    \  std::vector<std::string> result;\n    // Iterate over all strings\n    for\
    \ (auto& s : strings) {\n        // If it contains the substring, add it to the\
    \ list\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    }\n    // Return the resulting list\n    return result;", "  \
    \  std::vector<std::string> out;\n    // Split each string into words\n    for\
    \ (std::string word : strings) {\n        // If the word doesn't contain the substring,\
    \ add it to the output\n        if (word.find(substring) == std::string::npos)\n\
    \            out.push_back(word);\n    }\n    return out;", "    std::vector<std::string>\
    \ result;\n    bool flag = false;\n\n    for (std::string &s : strings) {\n  \
    \      if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \            flag = true;\n        }\n    }\n    if (!flag) {\n        result.push_back(\"\
    \");\n    }\n    return result;", "\tstd::vector<string> filtered_strings;\n\t\
    std::set<std::string> substrings;\n\tfor (string s : strings) {\n\t\tif (substring.find(s)\
    \ != string::npos) {\n\t\t\tsubstrings.insert(s);\n\t\t}\n\t}\n\tfor (string s\
    \ : substrings) {\n\t\tfiltered_strings.push_back(s);\n\t}\n\treturn filtered_strings;",
  "  std::vector<std::string> result;\n  for (std::vector<std::string>::iterator i\
    \ = strings.begin(); i != strings.end(); ++i) {\n    if (contains(*i, substring))\
    \ {\n      result.emplace_back(*i);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ res;\n    for (std::string str: strings) {\n        if (str.find(substring)\
    \ != std::string::npos) {\n            res.push_back(str);\n        }\n    }\n\
    \    return res;", "    std::vector<std::string> filtered_strings;\n\n    for\
    \ (const auto& str : strings)\n    {\n        if (str.find(substring) != std::string::npos)\n\
    \        {\n            filtered_strings.push_back(str);\n        }\n    }\n\n\
    \    return filtered_strings;", "    std::vector<std::string> strings_out;\n \
    \   for(auto s : strings) {\n        auto pos = s.find(substring);\n        if(pos\
    \ != std::string::npos) {\n            strings_out.push_back(s);\n        }\n\
    \    }\n    return strings_out;", "    std::vector<std::string> res;\n    for\
    \ (std::string &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            res.push_back(str);\n        }\n    }\n    return res;", "  std::vector<std::string>\
    \ result;\n  for(auto &item : strings)\n    if(item.find(substring) != std::string::npos)\n\
    \      result.push_back(item)\n  return result;", "  std::string filtered = \"\
    \";\n  for (std::string curr : strings)\n    if (curr.find(substring) != std::string::npos)\n\
    \      filtered = filtered + curr + \"\\n\";\n  return splitByLine(filtered);",
  "    std::vector<std::string> filtered;\n    std::string word;\n    for (int i=0;\
    \ i < strings.size(); i++){\n        word = strings[i];\n        if (word.find(substring)\
    \ != std::string::npos){\n            filtered.push_back(word);\n        }\n \
    \   }\n    return filtered;", "    std::set<std::string> found_elements;\n   \
    \ for(auto &elem: strings)\n    {\n        if(elem.find(substring) != std::string::npos)\n\
    \            found_elements.insert(elem);\n    }\n    return found_elements;",
  "  std::vector<std::string> result;\n  for (int i = 0; i < strings.size(); ++i)\
    \ {\n    if (strings[i].find(substring) != std::string::npos) {\n      result.push_back(strings[i]);\n\
    \    }\n  }\n  return result;", "  \n  // Make new empty list\n  std::vector<std::string>\
    \ filtered_strings;\n  \n  for (std::string &str : strings) {\n    if (substring.find(str)\
    \ != std::string::npos) {\n      filtered_strings.push_back(str);\n    }\n  }\n\
    \  return filtered_strings;", "    std::set<std::string> strings_set(strings);\n\
    \    std::vector<std::string> result;\n    for (std::set<std::string>::iterator\
    \ it = strings_set.begin(); it != strings_set.end(); ++it) {\n        if ((*it).find(substring)\
    \ != std::string::npos) {\n            result.push_back(*it);\n        }\n   \
    \ }\n    return result;", "    std::vector<std::string> result;\n    // Use an\
    \ index to make the algorithm faster\n    std::vector<bool> matched(strings.size(),\
    \ false);\n    for (std::string s : strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            matched[s.find(substring)] = true;\n  \
    \      }\n    }\n    for (int i = 0; i < strings.size(); ++i) {\n        if (matched[i])\
    \ {\n            result.push_back(strings[i]);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    std::string s = substring;\n    std::regex\
    \ e(substring, std::regex_constants::icase);\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        if (std::regex_search(strings[i], e)) {\n            result.push_back(strings[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> outputs;\n\
    \    std::set<std::string> uniquestrings;\n    for (std::string s : strings)\n\
    \    {\n        std::set<std::string>::iterator it = uniquestrings.find(s);\n\
    \        if (it == uniquestrings.end())\n        {\n            uniquestrings.insert(s);\n\
    \            outputs.push_back(s);\n        }\n    }\n    return outputs;", " \
    \   std::vector < std::string > res;\n    std::vector < std::string >::iterator\
    \ it;\n    for (it = strings.begin(); it != strings.end(); ++it) {\n        if\
    \ (std::search(*it, substring.begin(), substring.end()) != substring.end()) {\n\
    \            res.push_back(*it);\n        }\n    }\n    return res;", "    //\
    \ Keep only those strings containing given substring\n    std::vector<std::string>\
    \ result;\n    for(std::string s: strings)\n        if(s.find(substring) != std::string::npos)\n\
    \            result.push_back(s);\n    return result;", "  std::set<std::string>\
    \ substrings;\n  std::copy(std::begin(substring), std::end(substring), std::inserter(substrings,\
    \ substrings.end()));\n  std::vector<std::string> filtered;\n  for (const auto&\
    \ string : strings) {\n    if (substrings.find(string) == substrings.end())\n\
    \      filtered.emplace_back(string);\n  }\n  return filtered;", "    std::vector<std::string>\
    \ filtered;\n    for (auto s : strings)\n    {\n        auto i = s.find(substring);\n\
    \        if (i != std::string::npos)\n        {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;", "    std::vector<std::string> result;\n\
    \    for(unsigned int i = 0; i < strings.size(); i++)\n        if(strings[i].find(substring)\
    \ != std::string::npos)\n            result.push_back(strings[i]);\n    return\
    \ result;", "    std::vector<std::string> filtered;\n    for (auto &string: strings)\n\
    \    {\n        bool found = false;\n        std::string temp = string;\n    \
    \    \n        // Iterate through string until first instance of substring\n \
    \       for (size_t i = 0; i < temp.length(); i++)\n        {\n            if\
    \ (temp.substr(i, substring.length()) == substring)\n            {\n         \
    \       found = true;\n                break;\n            }\n        }\n\n  \
    \      // If substring is found remove it from string\n        if (found)\n  \
    \      {\n            filtered.push_back(string);\n        }\n    }\n    return\
    \ filtered;", "  assert(!strings[0].find(substring));\n  return strings;", " \
    \   std::vector<std::string> filtered;\n    for (std::vector<std::string>::iterator\
    \ iter = strings.begin(); iter != strings.end(); iter++) {\n        if (0 == substring.find((*iter)))\
    \ {\n            filtered.push_back(*iter);\n        }\n    }\n    return filtered;",
  "    std::vector<std::string> out;\n    for (auto &it : strings) {\n        if (it.find(substring)\
    \ != std::string::npos)\n            out.emplace_back(it);\n    }\n    return\
    \ out;", "  std::vector<std::string> filtered_strings;\n  for (auto it = strings.begin();\
    \ it != strings.end(); ++it) {\n    if (it->find(substring) != std::string::npos)\
    \ {\n      filtered_strings.push_back(it->c_str());\n    }\n  }\n  return filtered_strings;",
  "    std::vector<std::string> output;\n    for (auto it = strings.begin(); it !=\
    \ strings.end(); ++it)\n    {\n        if (std::find(*it, substring, 0) != *it)\
    \ {\n            std::remove(*it, strings.end(), *it);\n        }\n    }\n   \
    \ return output;", "  std::vector<std::string> filtered;\n  for (const auto &str\
    \ : strings) {\n    if (str.find(substring) != std::string::npos) {\n      filtered.push_back(str);\n\
    \    }\n  }\n  return filtered;", "    std::set<std::string> filtered;\n    for\
    \ (const std::string& s : strings) {\n        if (std::find(s.cbegin(), s.cend(),\
    \ substring) != s.cend())\n            filtered.insert(s);\n    }\n    return\
    \ filtered.size() == 0 ? std::vector<std::string>() : filtered;", "  \n  assert(strings.size()\
    \ > 1);\n  \n  std::vector<std::string> ret(1);\n  \n  for (int i=0; i<strings.size();\
    \ i++) {\n    \n    if (strings[i].find(substring) != std::string::npos) {\n \
    \     ret.push_back(strings[i]);\n    }\n  }\n  \n  return ret;"]
stop_tokens:
- "\n}"
