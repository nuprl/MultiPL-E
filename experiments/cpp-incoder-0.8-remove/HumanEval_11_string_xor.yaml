name: HumanEval_11_string_xor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input are two strings a and\
  \ b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return\
  \ result also as a string.\nstd::string string_xor(std::string a, std::string b)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = string_xor;\n    assert(candidate((\"\
  111000\"), (\"101010\")) == (\"010010\"));\n    assert(candidate((\"1\"), (\"1\"\
  )) == (\"0\"));\n    assert(candidate((\"0101\"), (\"0000\")) == (\"0101\"));\n\
  }\n"
completions: ["    assert(a.size() == b.size());\n    std::string result;\n    for\
    \ (int i = 0; i < a.size(); i++)\n        result[i] = a[i] ^ b[i];\n    return\
    \ result;", "    int len1 = a.length();\n    int len2 = b.length();\n    if (len1\
    \ != len2) return \"Invalid Strings\";\n    std::string output;\n    output.reserve(len1);\n\
    \    for (int i = 0; i < len1; i++) {\n        char c = a[i];\n        char d\
    \ = b[i];\n        output.push_back(c ^ d);\n    }\n    return output;", "   \
    \ // Check input length\n    if (a.size() != b.size()) \n        throw \"String\
    \ lengths are not same\";\n    // Initialize output string\n    std::string result;\n\
    \    // Perform XOR\n    for (int i = 0; i < a.size(); i++)\n        result.push_back((a[i]\
    \ ^ b[i]));\n    return result;", "  assert(a.size() == b.size());\n  assert(a.size()\
    \ % 2 == 1);\n  std::string result;\n  for (int i = 0; i < a.size(); i += 2) {\n\
    \    result += a[i] ^ b[i];\n  }\n  return result;", "  std::string res = \"\"\
    ;\n  for (char &x : { a, b }) {\n    x = x ^ 1;\n    res += x;\n  }\n  return\
    \ res;", "    int size = a.size() + b.size();\n    std::string result(size, '0');\n\
    \    for (int i = 0; i < size; ++i) {\n        result[i] = a[i] ^ b[i];\n    }\n\
    \    return result;", "    std::string ans = \"\";\n    std::string zero = \"\
    00000000000000000000000000000000\";\n    for (size_t i = 0; i < a.size(); i++)\
    \ {\n        ans += (char) (a[i] ^ b[i]);\n    }\n    ans = std::string(zero.size()\
    \ + ans.size(), '0') + ans;\n    return ans;", "\t\n\tstd::string s;\n\t\n\twhile(\
    \ a.size() != b.size() ) {\n\t\tassert( a.size() + b.size() <= 10000 );\n\t\t\
    s += ( a.size() < b.size() ? a : b );\n\t\t\n\t\ts += ( a.size() < b.size() ?\
    \ b : a );\n\t\t\n\t\ta = a.size() > b.size() ? a : b;\n\t\tb = a.size() > b.size()\
    \ ? b : a;\n\t\t\n\t}\n\t\n\treturn s;", "    // Code here\n    std::string result;\n\
    \    result.reserve(a.size() + b.size());\n    for (int i = 0; i < a.size(); i++)\
    \ {\n        if (b[i] == '1') result += a[i];\n    }\n    for (int i = 0; i <\
    \ b.size(); i++) {\n        if (a[i] == '1') result += b[i];\n    }\n    return\
    \ result;", "    std::string result = \"\";\n    int m = a.length(), n = b.length();\n\
    \    for (int i = 0; i < m; i++) {\n        if (get(a[i]) == '1' && get(b[i])\
    \ == '1')\n            result += '1';\n        else\n            result += '0';\n\
    \    }\n    return std::string(result);", "    int size = a.size() + b.size();\n\
    \    int result = 0;\n    for (int i = 0; i < size; i++) {\n        result <<=\
    \ 1;\n        result += (a[i] ^ b[i]);\n    }\n    std::string ans = \"\";\n \
    \   while (result > 0) {\n        ans += ((result & 1) ? \"1\" : \"0\");\n   \
    \     result >>= 1;\n    }\n    return ans;", "  assert(a.size() == b.size());\n\
    \  std::string result;\n  for (size_t i = 0; i < a.size(); i++) {\n    result\
    \ += (static_cast<char>(a[i]) ^ static_cast<char>(b[i]));\n  }\n  return result;",
  "    std::string ans = a;\n    for (auto i : b)\n        ans = ans + i;\n    return\
    \ ans;", "    std::string result = \"\";\n    for (int i = 0; i <= a.size(); i++)\
    \ {\n        result += a[i] ^ b[i];\n    }\n    return result;", "    std::string\
    \ res = \"0\";\n    for (unsigned int i = 0; i < a.size(); i++)\n        res +=\
    \ std::to_string(a[i] ^ b[i]);\n    return res;", '    return a[0] ^ b[0];', " \
    \   std::string result;\n    int n = a.size();\n    int m = b.size();\n    int\
    \ x = 0;\n    int y = 0;\n    for (int i = 0; i < n; i++) {\n        x = x | (int)\
    \ a[i] - 1;\n        y = y | (int) b[i] - 1;\n    }\n    char temp;\n    while\
    \ (x > y) {\n        temp = x;\n        x = y;\n        y = temp;\n    }\n   \
    \ for (int i = 0; i < m; i++) {\n        temp = x;\n        x = y;\n        y\
    \ = temp;\n    }\n    while (x != 0) {\n        result = char((x % 2) + 97) +\
    \ result;\n        x = x / 2;\n    }\n    while (y != 0) {\n        result = char((y\
    \ % 2) + 97) + result;\n        y = y / 2;\n    }\n    for (int i = 0; i < result.size();\
    \ i++) {\n        if (result[i] == '0') {\n            result += '1';\n      \
    \  } else {\n            result += '0';\n        }\n    }\n    return result;",
  "    std::string s;\n    for (auto i = 0; i < a.size(); i++) {\n        s += a[i]\
    \ == '0' ? b[i] : a[i];\n    }\n    return s;", "    std::string result;\n   \
    \ int i = 0;\n    int j = 0;\n    while(i < a.length() || j < b.length()) {\n\
    \        if((i < a.length()) && (a[i] != b[j])) {\n            result += 0;\n\
    \        }\n        else if(a[i] == b[j]) {\n            result += 1;\n      \
    \      i++;\n            j++;\n        }\n        else if(a[i] < b[j]) {\n   \
    \         result += 1;\n            i++;\n        }\n        else {\n        \
    \    result += 0;\n            j++;\n        }\n    }\n    return result;", " \
    \ // We don't need to worry about length of input strings\n  // since we would\
    \ have already checked that they are the same\n  // as long as they contain the\
    \ same 0's and 1s.\n  for (int i = 0; i < a.size(); ++i) {\n    a[i] ^= b[i];\n\
    \  }\n  return std::to_string(a);", "  // Initialize result to empty string.\n\
    \  std::string res=\"\";\n\n  // Loop over length of both strings.\n  for(int\
    \ i=0;i<a.size();i++) {\n    for(int j=0;j<b.size();j++) {\n      if(a[i]=='1'\
    \ && b[j]=='1') {\n        res += '0';\n      } else if(a[i]=='1' && b[j]=='0')\
    \ {\n        res += '1';\n      } else if(a[i]=='0' && b[j]=='1') {\n        res\
    \ += '1';\n      } else if(a[i]=='0' && b[j]=='0') {\n        res += '0';\n  \
    \    }\n    }\n  }\n  return res;", "    int n = a.size();\n    int m = b.size();\n\
    \    std::string answer;\n    for (int i = 0; i < n; i++) {\n        answer +=\
    \ a[i];\n        answer += b[n-i-1];\n    }\n    return answer;", "  std::string\
    \ s = a;\n  for (int i = 0; i < s.size(); i++) {\n    s[i] = a[i] ^ b[i];\n  }\n\
    \  return s;", "    std::string res;\n    int carry = 0;\n    for (int i = 0;\
    \ i < a.size(); i++) {\n        res += ((unsigned)a[i] - b[i] + carry) % 2;\n\
    \        carry = ((unsigned)a[i] - b[i] + carry) / 2;\n    }\n    res += carry;\n\
    \    return res;", "  std::bitset<32> a_to_int(std::stoi(a, nullptr, 0));\n  std::bitset<32>\
    \ b_to_int(std::stoi(b, nullptr, 0));\n  std::string c;\n  for (int i = 0; i <\
    \ 32; ++i) {\n    if (i < 32 && a_to_int[i] && b_to_int[i]) {\n      c[i] = a[i]\
    \ ^ b[i];\n    } else {\n      c[i] = 0;\n    }\n  }\n  return c;", "  std::bitset<16>\
    \ s1(string_to_binary(a));\n  std::bitset<16> s2(string_to_binary(b));\n  std::string\
    \ res = \"\";\n  for(int i = 0; i < 16; i++) {\n    res += ( (s1[i] ^ s2[i]) ?\
    \ '1' : '0' );\n  }\n  return res;", "    assert(a.length() == b.length());\n\
    \    std::string result;\n    for (unsigned int i = 0; i < a.length(); i++)\n\
    \        result.push_back(a ^ b[i]);\n    return result;", "    std::string ans\
    \ = a;\n    for(int i = 0; i < (int)a.size(); i++) {\n        ans[i] = (ans[i]\
    \ == '1') ? b[i] : '0';\n    }\n    return ans;", "    std::string s;\n    for\
    \ (int i = 0; i < a.size(); i++) {\n        s += a[i]^b[i];\n    }\n    return\
    \ s;", "    assert(a.size() >= b.size());\n    std::string res = \"\";\n    for\
    \ (size_t i = 0; i < a.size(); i++) {\n        res += (std::string)(((int)a[i]\
    \ ^ b[i]) & 1) + \"0\";\n    }\n    return res;", "\tstd::vector<int> a_bits(a.size(),\
    \ 0);\n\tstd::vector<int> b_bits(b.size(), 0);\n\tfor (int i = 0; i < a.size();\
    \ i++)\n\t\ta_bits[i] = a[i] == '1';\n\tfor (int i = 0; i < b.size(); i++)\n\t\
    \tb_bits[i] = b[i] == '1';\n\tstd::string res = \"\";\n\tfor (int i = 0; i < a.size();\
    \ i++)\n\t\tres += a_bits[i] ? \"1\" : \"0\";\n\tfor (int i = 0; i < b.size();\
    \ i++)\n\t\tres += b_bits[i] ? \"1\" : \"0\";\n\treturn res;", "  int lena = a.size(),\
    \ lenb = b.size();\n  assert(lena >= lenb);\n  std::string ret(lena * lenb, '0');\n\
    \  for (int i = 0; i < lena; ++i) {\n    for (int j = 0; j < lenb; ++j) {\n  \
    \    if (a[i] != '0' && b[j] != '0')\n        ret[i * lenb + j] = '0' + (a[i]\
    \ == '1' ^ b[j] == '1' ? 1 : 0);\n    }\n  }\n  return ret;", "    std::string\
    \ result = \"\";\n    int n = a.size();\n    for (int i = 0; i < n; ++i) {\n \
    \       result += (a[i] - '0') ^ (b[i] - '0');\n    }\n    return result;", " \
    \   std::string result;\n    for (char &c : a)\n        c = !c;\n    for (char\
    \ &c : b)\n        c = !c;\n    for (char &c : a)\n        c = c ^ b;\n    for\
    \ (char &c : a)\n        c = !c;\n    for (char &c : b)\n        c = !c;\n   \
    \ for (char &c : a)\n        c = c ^ b;\n    for (char &c : a)\n        c = !c;\n\
    \    for (char &c : b)\n        c = !c;\n    for (char &c : a)\n        c = c\
    \ ^ b;\n    for (char &c : a)\n        c = !c;\n    for (char &c : b)\n      \
    \  c = !c;\n    for (char &c : a)\n        c = c ^ b;\n    for (char &c : a)\n\
    \        c = !c;\n    for (char &c : b)\n        c = !c;\n    for (char &c : a)\n\
    \        c = c ^ b;\n    for (char &c : a)\n        c = !c;\n    for (char &c\
    \ : b)\n        c = !c;\n    for (char &c : a)\n        c = c ^ b;\n    for (char\
    \ &c : a)\n        c = !c;\n    for (char &c : b)\n        c = !c;\n    for (char\
    \ &c : a)\n        c = c ^ b;\n    for (char &c : a)\n        c = !c;\n    for\
    \ (char &c : b)\n        c = !c;\n    for (char &c : a)\n        c = c ^ b;\n\
    \    for (char &c : a)\n        c = !c;\n    for (char &c : b)\n        c = !c;\n\
    \    for (char &c : a)\n        c = c ^ b;\n    for (char &c : a)\n        c =\
    \ !c;\n    for (char &c : b)\n        c = !c;\n    for (char &c : a)\n       \
    \ c = c ^ b;\n    for (char &c : a)\n        c = !c;\n    for (char &c : b)\n\
    \        c = !c;\n    for (char &c : a)\n        c = c ^ b;\n    for (char &c\
    \ : a)\n        c = !c;\n    for (char &c : b)\n        c = !c;\n    for (char\
    \ &c : a)\n        c = c ^ b;\n    for (char &c : a)\n        c = !c;\n    for\
    \ (char &c : b)\n        c = !c;\n    for (char &c : a)\n        c = c ^ b;\n\
    \    for (char &c : a)\n        c = !c;\n    for (char &c : b)\n        c = !c;\n\
    \    for (char &c : a)\n        c = c ^ b;\n    for (char &c : a)\n        c =\
    \ !c;\n    for (char &c : b)\n        c = !c;\n    for (char &c : a)\n       \
    \ c = c ^ ", "  int len1 = a.length();\n  int len2 = b.length();\n  string ret\
    \ = \"\";\n  string temp;\n  assert(len1 == len2);\n  assert(len1 >= 2);\n  assert(len2\
    \ >= 2);\n  for (int i = 0; i < len1; i++) {\n    temp += a[i] ^ b[i];\n  }\n\
    \  ret = temp;\n  return ret;", "  int l = std::max(a.size(), b.size());\n  int\
    \ result = 0;\n  for (int i = 0; i < l; ++i) {\n    result += (static_cast<int>(a[i])\
    \ ^ static_cast<int>(b[i]));\n  }\n  return std::to_string(result);", "    std::string\
    \ result = a;\n    for (int i = 0; i < a.length(); i++) {\n        if (b.at(i)\
    \ == 0)\n            continue;\n        result += a.at(i);\n    }\n    return\
    \ result;", "    std::set<char> chars;\n    for (auto c : a)\n        chars.insert(c);\n\
    \    for (auto c : b)\n        chars.insert(c);\n    std::string xor = \"\";\n\
    \    for (auto c : chars)\n        xor += c ^ static_cast<char>(c);\n    return\
    \ xor;", "    std::string ans = \"\";\n    int lenA = a.size(), lenB = b.size();\n\
    \    bool done = false;\n    while (!done) {\n        int posA = 0, posB = 0;\n\
    \        done = posA == lenA || posB == lenB;\n        while (!done) {\n     \
    \       if (posA == lenA) posA = 0;\n            if (posB == lenB) posB = 0;\n\
    \            int valA = a.at(posA), valB = b.at(posB);\n            if (valA !=\
    \ valB) done = true;\n            ++posA;\n            ++posB;\n        }\n  \
    \      ans += a.substr(posA, lenA - posA);\n        ans += b.substr(posB, lenB\
    \ - posB);\n    }\n    return ans;", "    size_t n = a.size() + b.size();\n  \
    \  std::string result;\n    result.resize(n);\n    for (size_t i = 0; i < n; ++i)\
    \ {\n        char x = a[i];\n        char y = b[i];\n        result[i] = x ^ y;\n\
    \    }\n    return result;", "    std::string result = \"0\";\n    for (char i\
    \ = '1'; a[i] != '\\0'; i = a[i]) {\n        result[i] = b[i];\n    }\n    return\
    \ std::string(result);", "    string result = \"\";\n    for (int i = 0; i < a.size();\
    \ i++) {\n        result += to_string(int(to_lower(a[i]) ^ to_lower(b[i])));\n\
    \    }\n    return result;", "    std::bitset<64> bs(b);\n    std::bitset<64>\
    \ as(std::bitset<64>(a));\n    std::bitset<64> res;\n    size_t i = 0, j = 0;\n\
    \    while (i + j < a.size()) {\n        if (as.test(i, j)) {\n            res\
    \ |= bs;\n        }\n        ++i;\n        ++j;\n    }\n    return res.to_string();",
  "    int a_size = a.length();\n    int b_size = b.length();\n    std::string res\
    \ = \"\";\n    for (int i = 0; i < a_size; i++) {\n        int j = 0;\n      \
    \  while (j < b_size && b[j] == 1) {\n            j++;\n        }\n        res\
    \ += a[i];\n        while (j < b_size) {\n            int k = 0;\n           \
    \ while (k < a_size && a[k] == 1) {\n                k++;\n            }\n   \
    \         res += a[k];\n            j++;\n        }\n    }\n    return res;",
  "    if (a.size() != b.size()) throw \"size mismatch\";\n    std::string result\
    \ = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        result += ((a[i]\
    \ ^ b[i]) % 2);\n    }\n    return result;", "    std::string res;\n    for(int\
    \ i=0;i<a.size();i++){\n        res+=a[i];\n    }\n    for(int i=0;i<b.size();i++){\n\
    \        res+=b[i];\n    }\n    return res;", "    std::string ans = \"\";\n \
    \   \n    //converting chars to integers\n    int sum = 0;\n    int carry = 0;\n\
    \    for (auto it1 = a.cbegin(); it1 != a.cend(); ++it1) {\n        sum += *it1\
    \ - '0';\n        carry = (sum >> 2) & 1;\n        sum = sum << 2;\n    }\n  \
    \  \n    for (auto it2 = b.cbegin(); it2 != b.cend(); ++it2) {\n        sum +=\
    \ *it2 - '0';\n        carry = (sum >> 2) & 1;\n        sum = sum << 2;\n    }\n\
    \    \n    if (carry) {\n        sum++;\n    }\n    \n    //converting integer\
    \ back to chars\n    for (int i = sum; i >= 0; i--) {\n        ans += (i - '0')\
    \ < 10 ? '0' + i - '0' : 'a' + i - 'a';\n    }\n    \n    return ans;", "  //\
    \ convert input strings to binary string\n  std::string a_bin = a;\n  std::string\
    \ b_bin = b;\n  while (a_bin and b_bin) {\n    a_bin = std::bitset<8>(a_bin).to_string();\n\
    \    b_bin = std::bitset<8>(b_bin).to_string();\n  }\n\n  std::string res; //\
    \ final result string\n\n  if (a_bin == \"\" && b_bin == \"\") {\n    return res;\n\
    \  }\n\n  // if both strings are empty, result is empty.\n  if (a_bin == \"\"\
    ) {\n    return res;\n  }\n\n  if (b_bin == \"\") {\n    return res;\n  }\n\n\
    \  // binary XOR on both strings to get the result\n  res = (std::string)std::bitset<8>(a_bin\
    \ ^ b_bin).to_string();\n  return res;", "    int n = a.length();\n    int m =\
    \ b.length();\n    std::string result = \"\";\n    if (n != m) {\n        cout\
    \ << \"Size mismatch\" << endl;\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      result.append(a.at(i) ^ b.at(i));\n    }\n    return result;", "    std::bitset<128>\
    \ a_bits, b_bits;\n    for (size_t i = 0; i < a.size(); ++i) {\n        a_bits[a[i]\
    \ == '1'] = 1;\n        b_bits[b[i] == '1'] = 1;\n    }\n    return std::to_string(a_bits.to_ulong()\
    \ ^ b_bits.to_ulong());", "    size_t n = a.size() + b.size();\n    std::string\
    \ ans(n);\n    for (int i = 0; i < n; i++) {\n        ans[i] = a[i] ^ b[i];\n\
    \    }\n    return ans;", "    std::string res=\"\";\n    assert(a.size()==b.size());\n\
    \    for(int i=0;i<a.size();i++) {\n        res+=a[i^b[i]];\n    }\n    return\
    \ res;", "    // Declare a variable of size equal to sizes of input strings \n\
    \    int size = a.size() + b.size();\n    // Declare a string to store the final\
    \ result\n    std::string s;\n    // Iterate over each character in a and b\n\
    \    for(int i = 0; i < size; i++) {\n        // Compute the character by character\
    \ XOR of the corresponding characters\n        s += ((a.at(i) ^ b.at(i)) ? '1'\
    \ : '0');\n    }\n    // Return the final result\n    return s;", "    int size\
    \ = a.size();\n    std::string res = \"\";\n    for (int i = 0; i < size; i++)\
    \ {\n        std::string temp = \"0\";\n        temp += a[i];\n        temp +=\
    \ \"0\";\n        temp += b[i];\n        temp += \"0\";\n        res += temp;\n\
    \    }\n    return res;", "    std::string result;\n    for (int i = 0; i < a.size();\
    \ ++i) {\n        result[i] = (a[i] ^ b[i]);\n    }\n    return result;", "  \
    \  int n = a.size();\n    std::string res = \"0\";\n    for (int i = 0; i < n;\
    \ i++) {\n        res += std::to_string(int(a[i]) ^ int(b[i]));\n    }\n    return\
    \ res;", "    int a_len = a.length(), b_len = b.length();\n    std::string res\
    \ = \"0\", temp = \"\";\n    for (int i = 0; i < a_len; i++)\n        temp +=\
    \ a[i];\n    for (int i = 0; i < b_len; i++)\n        temp += b[i];\n    \n  \
    \  int len_of_res = 0;\n    for (int i = 0; i < temp.length(); i++)\n        len_of_res\
    \ += temp[i];\n    \n    len_of_res = len_of_res % 10;\n    if (len_of_res < 0)\n\
    \        len_of_res += 10;\n    res = std::to_string(len_of_res);\n    for (int\
    \ i = 0; i < temp.length(); i++)\n        res += temp[i];\n    res += \"0\";\n\
    \    \n    return res;", "    std::string ans = \"\";\n    int carry = 0;\n  \
    \  for (int i = 0; i < a.length(); i++) {\n        ans += (static_cast<int>(tolower(a[i]))\
    \ ^ static_cast<int>(tolower(b[i])) << carry);\n        carry = (ans[i] & 1) |\
    \ (carry << 1);\n    }\n    ans += (static_cast<int>(tolower(a[a.length() - 1]))\
    \ << carry);\n    return ans;", "  int a_len = a.length();\n  int b_len = b.length();\n\
    \  char result[(a_len + b_len) / 2];\n  for (int i = 0; i < a_len; ++i) {\n  \
    \  result[i] = (a[i] ^ b[i]);\n  }\n  for (int i = a_len; i < a_len + b_len; ++i)\
    \ {\n    result[i] = 0;\n  }\n  std::string ans = \"\";\n  for (int i = 0; i <\
    \ a_len + b_len; ++i) {\n    ans += (char)(result[i]);\n  }\n  return ans;", " \
    \   // Get the length of both strings.\n    int len_a = a.size();\n    int len_b\
    \ = b.size();\n    // If one of the strings is empty then return empty string.\n\
    \    if (len_a == 0 || len_b == 0) {\n        return \"\";\n    }\n    // If one\
    \ of the strings has more characters than other then return empty string.\n  \
    \  if (len_a > len_b) {\n        return \"\";\n    }\n    // Create an empty string\
    \ for result.\n    std::string result;\n    // Loop for all characters in both\
    \ strings.\n    for (int i = 0; i < len_a; i++) {\n        // If the current character\
    \ in first string is different then append 0 at the end of string.\n        if\
    \ (a.at(i) != b.at(i)) {\n            result += 0;\n        }\n        // If the\
    \ current character in first string is same then append 1 at the end of string.\n\
    \        else {\n            result += 1;\n        }\n    }\n    return result;",
  "  string result;\n  int i, j, k;\n  k = 0;\n  for (i = 0; i < a.size(); i++) {\n\
    \    j = 0;\n    while (j < b.size()) {\n      if ((b[j] == a[i]) && (j + 1 <\
    \ b.size())) {\n        result += b[j + 1];\n        ++j;\n      }\n      else\n\
    \        result += b[j];\n      ++j;\n    }\n    if (i + 1 < a.size()) {\n   \
    \   result += a[i + 1];\n    }\n  }\n  return result;", "    std::string res =\
    \ \"0\";\n    for(auto i = a.begin(); i != a.end(); ++i)\n        res += to_string((unsigned\
    \ char)*i) << 1;\n    res += b;\n    return res;", "    std::string output;\n\
    \    int len = a.length();\n    int len_a = a.length() / 2;\n    int len_b = b.length()\
    \ / 2;\n    if (len_b > len) len_b = len;\n    for (int i = 0; i < len_a; i++)\
    \ {\n        if (a[i] == b[len_b]) {\n            output += a[len + i];\n    \
    \    }\n    }\n    return output;", "    int n1 = a.length(), n2 = b.length();\n\
    \    std::string res(n1 + n2);\n    for (int i = 0; i < n1; ++i)\n        res[i]\
    \ = a[i] ^ b[i];\n    return res;", "  std::string res = \"0\";\n  for (int i\
    \ = 0; i < a.length(); i++) {\n    res += std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]);\n\
    \  }\n  return res;", "\tassert(a.length() <= b.length());\n\tstd::string xor\
    \ = \"\";\n\tfor (unsigned int i = 0; i < a.length(); i++) {\n\t\txor += std::to_string(a[i]\
    \ ^ b[i]);\n\t}\n\treturn xor;", "    std::vector<bool> s(a.size() + 1, false);\n\
    \    for(auto i : a) {\n        s[i] = (s[i] || i) == '1';\n    }\n    for(auto\
    \ i : b) {\n        s[i] = (s[i] || i) == '1';\n    }\n    std::string ans = \"\
    \";\n    for(auto i : s) {\n        if(s[i]) {\n            ans += '0';\n    \
    \    }\n        else {\n            ans += '1';\n        }\n    }\n    return\
    \ ans;", "\tstd::string res;\n\tint x = 0;\n\tint y = 0;\n\tint temp = 0;\n\t\
    for (int i = 0; i < a.size(); i++) {\n\t\tx = a[i] - '0';\n\t\ty = b[i] - '0';\n\
    \t\ttemp = (x ^ y);\n\t\tres += (temp % 10) + '0';\n\t\ttemp /= 10;\n\t}\n\treturn\
    \ res;", "    size_t len = a.size() + b.size();\n    std::string ans = \"\";\n\
    \    std::string temp = \"\";\n    size_t i = 0;\n    while (i + 1 < len) {\n\
    \        temp = a[i] ^ b[i++];\n        ans += temp;\n    }\n    return ans;",
  "    std::string ret = \"\";\n    // Iterate through all characters of string a\
    \ and b.\n    for (int i = 0; i < a.size(); i++) {\n        // Get the corresponding\
    \ bits for character a and b.\n        int a_char = a[i];\n        int b_char\
    \ = b[i];\n        int res = a_char ^ b_char;\n        // Convert to character\
    \ based on result from XOR.\n        ret += res == 0 ? '0' : '1';\n    }\n   \
    \ return ret;", "    if (a.size() != b.size()) return \"\";\n    std::string res;\n\
    \    res.reserve(a.size());\n    int j = 0;\n    for (size_t i = 0; i < a.size();\
    \ i++) {\n        char cha = a[i];\n        char chb = b[i];\n        // Only\
    \ add bits if characters are different\n        if ((cha != '1' && cha != '0')\
    \ || (chb != '1' && chb != '0')) {\n            res += '0';\n        } else {\n\
    \            res += cha;\n            res += chb;\n        }\n    }\n    return\
    \ res;", "    std::string s = \"\";\n    int x = 0, y = 0;\n    for (int i = 0;\
    \ i < a.size(); i++) {\n        x = (a[i] - '0');\n        y = (b[i] - '0');\n\
    \        s += x ^ y;\n    }\n    return s;", "    assert(a.size() == b.size());\n\
    \    std::string ans = \"\";\n    for(int i=0;i<a.size();i++){\n        ans +=\
    \ std::bitset<8>(a[i])^std::bitset<8>(b[i]);\n    }\n    return ans;", "    std::string\
    \ res = \"\";\n    int i = 0;\n    while (i < a.size() && a[i] != '0') {\n   \
    \     res += a[i];\n        i++;\n    }\n    i = 0;\n    while (i < b.size() &&\
    \ b[i] != '0') {\n        res += b[i];\n        i++;\n    }\n    while (i < a.size())\
    \ {\n        res += a[i];\n        i++;\n    }\n    while (i < b.size()) {\n \
    \       res += b[i];\n        i++;\n    }\n    return res;", "    std::string\
    \ ans = \"\";\n    for(int i=0;i<a.length(); i++)\n    {\n        int c = a[i]\
    \ - b[i];\n        ans = ans + std::to_string(c);\n    }\n    return ans;", " \
    \   int len1 = a.length();\n    int len2 = b.length();\n    std::string ans =\
    \ \"\";\n    for (int i = 0; i < len1; i++) {\n        ans += a[len - 1 - i] ^\
    \ b[len - 1 - i];\n    }\n    return ans;", "    if (a.length() != b.length())\
    \ {\n        throw \"string length mismatch\";\n    }\n    std::string res = \"\
    \";\n    for (unsigned int i = 0; i < a.length(); i++) {\n        if (std::bitset<8>(a[i])\
    \ ^ std::bitset<8>(b[i]))\n            res += \"1\";\n        else\n         \
    \   res += \"0\";\n    }\n    return res;", "    std::string res = \"\";\n   \
    \ for(size_t i = 0; i < a.length(); i++) {\n        res += a[i] ^ b[i];\n    }\n\
    \    return res;", "    int l = min(a.size(), b.size());\n    std::string r(l,\
    \ '\\0');\n    for(int i = 0; i < l; i++) {\n        if(int(a[i]) ^ int(b[i]))\
    \ r[i] = '1';\n        else r[i] = '0';\n    }\n    return r;", "    assert(a.size()\
    \ == b.size());\n    std::string ans(a.size());\n    for (int i = 0; i < a.size();\
    \ i++)\n        ans[i] = (ans[i] ^ b[i]);\n    return ans;", "    assert(a.size()\
    \ == b.size());\n    std::string res;\n    for (int i = 0; i < a.size(); i++)\
    \ {\n        res += a[i] ^ b[i];\n    }\n    return res;", "    int len1 = a.size(),\
    \ len2 = b.size();\n    int res = 0; // Result of xor\n    for (int i = 0; i <\
    \ len1; ++i)\n        res ^= (a[i] == '1' ? b[i] : '0');\n    std::string res;\n\
    \    do {\n        res += (res%2 == 1 ? '1' : '0');\n        res /= 2;\n    }\
    \ while (len1 > 0 && res > 0);\n    for (int i = len2-1; i >= 0; --i) {\n    \
    \    res ^= (b[i] == '1' ? a[i] : '0');\n        res /= 2;\n    }\n    return\
    \ res;", "    std::string ans = \"\";\n    for(int i = 0; i < a.size(); i++)\n\
    \    {\n        if(a[i] != '0')\n        {\n            ans += a[i];\n       \
    \ }\n    }\n    for(int i = 0; i < b.size(); i++)\n    {\n        if(b[i] != '0')\n\
    \        {\n            ans += b[i];\n        }\n    }\n    return ans;", "  \
    \  if (a.size() != b.size()) {\n        throw std::domain_error(\"string_xor:\
    \ Length of strings must match\");\n    }\n    std::string result;\n    for (int\
    \ i = 0; i < a.size(); i++) {\n        char c = a[i] ^ b[i];\n        result.push_back(c);\n\
    \    }\n    return result;", "    std::string result;\n    int carry = 0;\n  \
    \  int length = a.length();\n    for (int i = 0; i < length; i++) {\n        int\
    \ temp = carry;\n        carry = 0;\n        for (int j = 0; j < length; j++)\
    \ {\n            if (a[j] == b[i])\n                temp += 1;\n            else\n\
    \                carry = 1;\n        }\n        result.push_back((temp % 2) +\
    \ ('a' + (carry ? '1' : '0')));\n    }\n    while (carry)\n        result.push_back('0');\n\
    \    std::reverse(result.begin(), result.end());\n    return result;", "    //\
    \ Code goes here\n    int lenA = a.length();\n    int lenB = b.length();\n   \
    \ std::string result;\n    for (int i = 0; i < lenA; ++i) {\n        int j = lenB\
    \ - 1;\n        int x = 1;\n        while (j >= 0) {\n            if (a[i] & b[j])\
    \ {\n                x ^= 1;\n            }\n            j = j - 1;\n        }\n\
    \        if (x == 1) {\n            result += a[i];\n        }\n    }\n    return\
    \ result;", "  int len_a = a.size();\n  int len_b = b.size();\n  int len_out =\
    \ len_a + len_b;\n  std::string out(len_out);\n  for (int i = 0; i < len_out;\
    \ ++i)\n    out[i] = a[i] ^ b[i];\n  return out;", "    std::ostringstream result;\n\
    \    result << \"XOR \" << a << \" \" << b << \" \" << std::endl;\n    return\
    \ result;", "  int len = a.size();\n  int max_len = max(a.size(), b.size());\n\
    \  assert(max_len >= len);\n\n  std::string res(max_len, '\\0');\n  for (int i\
    \ = 0; i < max_len; ++i) {\n    res[i] = 0;\n  }\n\n  for (int i = 0; i < len;\
    \ ++i) {\n    res[i] ^= (int)a[i];\n  }\n  for (int i = 0; i < len; ++i) {\n \
    \   res[len + i] ^= (int)b[len - i - 1];\n  }\n  return res;", "  if (a.size()\
    \ != b.size()) throw std::runtime_error(\"Input size mismatch\");\n  std::string\
    \ res = \"\";\n  for (int i = 0; i < a.size(); ++i) {\n    char carry = 0;\n \
    \   for (int j = 0; j < b.size(); ++j) {\n      if (a[i] != b[j]) {\n        carry\
    \ = 1;\n      }\n      else {\n        carry = 0;\n      }\n    }\n    res +=\
    \ std::to_string(carry) + \"\\n\";\n  }\n  return res;", "  int n = a.size();\n\
    \  int m = b.size();\n  std::string res(n, '0');\n  for (int i = 0; i < n; i++)\
    \ {\n    res[i] = (a[i] ^ b[i]); \n  }\n  return res; ", "  int n = a.size();\n\
    \  int m = b.size();\n  std::string s = \"\";\n  for (int i = 0; i < n; i++) {\n\
    \    s += (a[i] ^ b[i]);\n  }\n  return s;", "    std::string answer = \"\";\n\
    \    int n = a.size();\n    int m = b.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        answer += a[i] ^ b[i];\n    }\n    return answer;", "    assert(a.size()\
    \ == b.size());\n    std::string ans = \"\";\n    int j = 0;\n    for (int i =\
    \ 0; i < a.size(); i++) {\n        if (a[i] != '1' && b[j] != '1') {\n       \
    \     ans += '0';\n        } else {\n            ans += '1';\n        }\n    \
    \    j++;\n    }\n    return ans;", "    int n = a.size();\n    std::string res\
    \ = \"0\";\n    for (int i = 0; i < n; i++)\n        res += a[i]^b[i];\n    return\
    \ res;", "    std::string s = a + b;\n    std::string result = \"\";\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        result += std::to_string(static_cast<int>(s[i])\
    \ ^ static_cast<int>(s[i + 1]));\n    }\n    return result;", "    int len1 =\
    \ a.length();\n    int len2 = b.length();\n    std::string ans = \"\";\n    if\
    \ (len1 == 0 || len2 == 0) {\n        return ans;\n    }\n    \n    for (int i\
    \ = 0; i < len1; i++) {\n        ans += (char)(a[i] - b[i % len2]);\n    }\n \
    \   \n    return ans;", "    int n = a.size();\n    int m = b.size();\n    std::string\
    \ result;\n    for(int i=0; i<n; i++) {\n        for(int j=0; j<m; j++) {\n  \
    \          if(a[i] == '1' && b[j] == '1')\n                result[i] += '1';\n\
    \            else\n                result[i] += '0';\n        }\n    }\n    return\
    \ result;", "    std::string res = \"\";\n    for(int i=0;i<(int)a.size();i++)\
    \ {\n        res += ((int)a[i] ^ (int)b[i]);\n    }\n    return res;", "  string\
    \ res;\n  for (int i = 0; i < a.size(); i++) {\n    res += (static_cast<int>(a[i])\
    \ ^ static_cast<int>(b[i])) + \"\";\n  }\n  return res;", "    std::string result;\n\
    \    size_t index = 0;\n    while (index < a.length()) {\n        if (a[index]\
    \ == '0' && b[index] == '0') {\n            result[index] = '0';\n           \
    \ ++index;\n        } else if (a[index] == '0' && a[index + 1] == '1') {\n   \
    \         result[index] = '1';\n            ++index;\n        } else if (b[index]\
    \ == '0' && b[index + 1] == '1') {\n            result[index] = '1';\n       \
    \     ++index;\n        } else {\n            result[index] = '0';\n         \
    \   ++index;\n        }\n    }\n    return result;", "    assert(a.length() ==\
    \ b.length());\n    std::string result;\n    // Loop over all the characters of\
    \ both strings.\n    for (int i = 0; i < a.length(); i++) {\n        // if bit\
    \ at i of first string is not 1 then\n        // bit at i of second string will\
    \ be 1.\n        // This operation will give binary representation of result\n\
    \        // as 1s and 0s.\n        if (a[i] != '1') result[i] = '0';\n       \
    \ else result[i] = b[i];\n    }\n    // Return concatenated string.\n    return\
    \ result;", "  std::string res;\n  for (int i = 0; i < a.size(); i++) {\n    std::string\
    \ str = std::to_string(a[i] ^ b[i]);\n    res.push_back(str[0]);\n  }\n  return\
    \ res;", "    if (a.length() != b.length())\n        return \"\";\n    int length\
    \ = a.length();\n    std::string result = \"\";\n    for (int i = 0; i < length;\
    \ i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return result;", "    int\
    \ n = a.size();\n    int m = b.size();\n    std::string ans(n);\n    for (int\
    \ i = 0; i < n; i++) {\n        if (b[i] == '1') {\n            ans[i] = a[i];\n\
    \        } else {\n            ans[i] = '0';\n        }\n    }\n    return ans;",
  "    if (a.size() != b.size()) throw \"Strings must have same length\";\n    std::string\
    \ result;\n    // Initialize result with empty string.\n    for (size_t i = 0;\
    \ i < a.size(); i++) {\n        result[i] = a[i] ^ b[i];\n    }\n    return result;",
  "    // TODO: Check if sizeof a and b are equal.\n    std::string result;\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        result += a[i] ^ b[i];\n    }\n    return\
    \ result;", "    // Initialize a variable which will hold result of the operation.\n\
    \    std::string result;\n    // Iterate through two strings in parallel.\n  \
    \  // i is string index in a, j is string index in b.\n    for (int i = 0; i <\
    \ a.length(); ++i) {\n        int j = b.length() - i;\n        // XOR operation\
    \ is performed between corresponding characters of two strings.\n        result.append(a.at(i)\
    \ ^ b.at(j));\n    }\n    return result;", "  std::string ans = \"\";\n  for (int\
    \ i = 0; i < a.length(); i++) {\n    ans += ((int)a[i] ^ (int)b[i]);\n  }\n  return\
    \ ans;", "  int size = std::min(a.size(), b.size());\n  std::string result;\n\
    \  for (int i = 0; i < size; i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return\
    \ result;", "  std::string result = \"\";\n  for (auto i = 0; i < a.size(); i++)\
    \ {\n    result += (a[i] ^ b[i]);\n  }\n  return result;", "    std::string ret\
    \ = \"\";\n    int size_a = a.size();\n    int size_b = b.size();\n    if (size_a\
    \ != size_b) {\n        // throw std::domain_error(\"Strings are not same\");\n\
    \        return \"\";\n    }\n    int i = 0;\n    int j = 0;\n    int k = 0;\n\
    \    while (i<size_a) {\n        // if a[i] == '0' and b[j] == '0' then k = k\
    \ + 1;\n        // else k = k - 1;\n        if (a[i] == '0') {\n            k\
    \ = k + 1;\n        }\n        if (a[i] == '1') {\n            k = k - 1;\n  \
    \      }\n        if (k == 1) {\n            ret += a[i];\n            i = i +\
    \ 1;\n        }\n        if (k == -1) {\n            ret += b[j];\n          \
    \  j = j + 1;\n        }\n    }\n    while (i<size_a) {\n        ret += a[i];\n\
    \        i = i + 1;\n    }\n    while (j<size_b) {\n        ret += b[j];\n   \
    \     j = j + 1;\n    }\n    return ret;", "    std::string ret = \"0\";\n   \
    \ for (auto i = a.cbegin(); i != a.cend(); i++)\n        ret = std::string(ret)\
    \ + std::to_string((*i) ^ (*(b + 1)));\n    return ret;", "  int bit_a = 0, bit_b\
    \ = 0;\n  std::string result = \"\";\n  for (int i = 0; i < a.size(); i++) {\n\
    \    bit_a = a[i] - '0';\n    bit_b = b[i] - '0';\n    result += '0' + (bit_a\
    \ ^ bit_b);\n  }\n  return result;", "    std::string result;\n    int n1 = (int)a.size();\n\
    \    int n2 = (int)b.size();\n    for(int i=0; i< n1*n2; ++i) {\n        result\
    \ += (char)((a[i] ^ b[i]));\n    }\n    return result;", '    return std::string(std::bitset<64>(a).xor(std::bitset<64>(b)).to_string());',
  "    std::string ans = \"\";\n    for (auto it = a.cbegin(); it != a.cend(); ++it)\
    \ {\n        ans += ((*it ^ b.at(0)) % 2) + '0';\n    }\n    return ans;", " \
    \   assert(a.size() == b.size());\n    std::string res = \"\";\n    for(int i=0;\
    \ i < a.size(); i++) {\n        res += a[i] ^ b[i];\n    }\n    return res;",
  "    int size = a.size() + b.size();\n    std::string result(size, '\\0');\n   \
    \ int i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        result[i++]\
    \ = (a[i] ^ b[j]);\n        j++;\n    }\n    while (i < a.size()) {\n        result[i++]\
    \ = a[i];\n    }\n    while (j < b.size()) {\n        result[j++] = b[j];\n  \
    \  }\n    return result;", "  string s = a + b;\n  for (int i = s.size() - 1;\
    \ i >= 0; --i) {\n    char c = s[i];\n    s[i - 1] = s[i + 1] ^ c;\n  }\n  return\
    \ s;", "    // This loop will run for every character of string a and for every\
    \ character of string b.\n    size_t lenA = a.length();\n    size_t lenB = b.length();\n\
    \    // Reserve space for output string.\n    std::string result;\n    result.reserve(lenA\
    \ * lenB);\n    for (size_t i = 0; i < lenA; i++)\n        for (size_t j = 0;\
    \ j < lenB; j++)\n            result[i * lenB + j] ^= a[i] ^ b[j];\n    return\
    \ result;", "  std::string result;\n  for (int i = 0; i < a.size(); i++) {\n \
    \   result += ((b[i ^ a.size()] != '0') ? b[i ^ a.size()] : '0');\n  }\n  return\
    \ result;", "    std::string ans = \"\";\n    int lena = a.size();\n    int lenb\
    \ = b.size();\n    int count = 0;\n    for (int i = 0; i < lena; i++) {\n    \
    \    if (a[i] == '1') {\n            ans += '1';\n            count++;\n     \
    \   } else {\n            ans += '0';\n        }\n    }\n    for (int i = 0; i\
    \ < lenb; i++) {\n        if (b[i] == '1') {\n            ans += '1';\n      \
    \      count++;\n        } else {\n            ans += '0';\n        }\n    }\n\
    \    ans += (count % 2 ? '1' : '0');\n    return ans;", "  int size = a.size();\n\
    \  std::string result(size, '\\0');\n  for (int i = 0; i < size; ++i)\n    result[i]\
    \ = (a[i] ^ b[i]);\n  return result;", "    // Your code goes here\n    // return\
    \ x;", "    int max_size = a.size();\n    int n = max_size * max_size;\n    std::string\
    \ result(n, '\\0');\n    int index = 0;\n    for (int i = 0; i < a.size(); i++)\
    \ {\n        int j = (i + max_size) % max_size;\n        result[index] = a[i]\
    \ ^ b[j];\n        index++;\n    }\n    return result;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < std::min(a.length(), b.length()); i++) {\n\
    \        result += (a[i] ^ b[i]);\n    }\n    return result;", "    std::string\
    \ res = \"0\";\n    for (int i = 0; i < a.size(); i++) {\n        res += a[i]\
    \ + '0' ^ b[i];\n    }\n    return res;", "    int xor_ints[a.length() + b.length()];\n\
    \    std::string xor_str(\"\");\n    for (int i = 0; i < a.length() + b.length();\
    \ ++i) {\n        xor_ints[i] = a.length() ^ b.length();\n    }\n    for (int\
    \ i = 0; i < xor_ints.size(); ++i) {\n        xor_str += xor_ints[i] % 2 + '0';\n\
    \    }\n    return xor_str;", "    // convert inputs to integers\n    int a_int\
    \ = std::stoi(a);\n    int b_int = std::stoi(b);\n    // XOR both the integer\
    \ inputs\n    int c_int = a_int ^ b_int;\n    // Convert result to string\n  \
    \  std::string res = \"0\";\n    // Iterate over the binary string and append\
    \ the binary representation\n    // of the integer to the string.\n    for(int\
    \ i = 0; i < 4; i++) {\n        if((c_int & 1) != 0) {\n            res += '1';\n\
    \        } else {\n            res += '0';\n        }\n        c_int = c_int >>\
    \ 1;\n    }\n    return res;", "    assert(a.size() == b.size());\n    std::string\
    \ ans = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        int j = a.size()\
    \ - 1 - i;\n        ans += (std::bitset<32>(a[j]) ^ std::bitset<32>(b[j]));\n\
    \    }\n    return ans;", "    std::vector<bool> v(256);\n    for (int i = 0;\
    \ i < a.size(); i++) {\n        v[a.at(i)] ^= 1;\n    }\n    for (int i = 0; i\
    \ < b.size(); i++) {\n        v[b.at(i)] ^= 1;\n    }\n    std::string r;\n  \
    \  for (unsigned char i : v) {\n        if (i % 2 == 1) {\n            r += char(i);\n\
    \        }\n    }\n    return r;", "    assert(a.size() > 0 && b.size() > 0);\n\
    \    std::string result(0);\n    for (int i = 0; i < a.size(); ++i) {\n      \
    \  result += a.at(i);\n        result += b.at(i);\n    }\n    return result;",
  "    std::string xor = a + b;\n    int len = xor.length();\n    int index = 0;\n\
    \    for(int i=len-1; i>=0; i--) {\n        int temp = (xor[i] - '0')*100 + (xor[i+1]-'0');\n\
    \        xor[index++] = temp%10 + '0';\n        temp = (temp/10 - '0')*10 + temp/100;\n\
    \        xor[index++] = temp%10 + '0';\n    }\n    return xor;", "    int l =\
    \ a.length();\n    int r = b.length();\n    std::string res = \"\";\n    for (int\
    \ i = 0; i < l; i++) {\n        res += a[i] + b[i];\n    }\n    return res;",
  "    std::string res = \"\";\n    for (size_t i = 0; i < a.length(); i++) {\n  \
    \      res += a[i] + b[i];\n    }\n    return res;", "  std::string result = \"\
    \";\n  for (int i = 0; i < a.size(); i++) {\n    result += a[i] ^ b[i];\n  }\n\
    \  return result;", "  std::string result = a;\n  result.resize(result.size()\
    \ + b.size());\n  for (int i = 0; i < a.size(); i++)\n    result[i + b.size()]\
    \ = result[i]^b[i];\n  return result;", "    // Store length of strings as string.length(),\
    \ not string.length()-1\n    int l1 = a.length();\n    int l2 = b.length();\n\
    \    std::string res = \"\";\n    // Loop through all characters of string a and\n\
    \    for (int i = 0; i < l1; i++) {\n        // Get ASCII value at ith position\
    \ of string a\n        int ascii = (int) a[i];\n        // Get ASCII value at\
    \ ith position of string b\n        int bascii = (int) b[i];\n        // Get ASCII\
    \ value at ith position of string result\n        int resascii = (int) res[i];\n\
    \        // Convert ASCII value into binary number represented by that ASCII value\n\
    \        // Converting is required because string XOR is not applicable to ASCII\n\
    \        int binascii = (ascii ^ bascii);\n        // Get binary number represented\
    \ by that ASCII value\n        // Converting is required because string XOR is\
    \ not applicable to ASCII\n        char binarray[] = {(char) binascii};\n    \
    \    // Store binary number at ith position of string result\n        res[i] =\
    \ binarray[0];\n    }\n    // Store length of string res\n    res += \"1\";\n\
    \    // Store length of string b\n    res += \"0\";\n    // Store length of string\
    \ a\n    res += \"0\";\n    return res;", "    // Initialize result\n    std::string\
    \ result;\n    // Initialize two iterators\n    auto it1 = a.begin();\n    auto\
    \ it2 = b.begin();\n    // Perform loop while both iterators are different from\
    \ each other\n    while (it1 != a.end() && it2 != b.end()) {\n        // Compare\
    \ current characters first \n        // if they are same then increment both iterators\n\
    \        if (*it1 == *it2) {\n            ++it1;\n            ++it2;\n       \
    \     // If both iterators have reached the end of strings then break out of the\
    \ loop\n            if (it1 == a.end() && it2 == b.end()) {\n                break;\n\
    \            }\n        }\n        // If current characters are not equal then\
    \ add '0' to the current string\n        else {\n            result += *it1 +\
    \ '0';\n        }\n    }\n    // If at least one string has reached the end of\
    \ string then return empty string\n    if (it1 == a.end()) {\n        return result;\n\
    \    }\n    // If at least one string has reached the end of string then return\
    \ empty string\n    else if (it2 == b.end()) {\n        return result;\n    }\n\
    \    // If both strings have reached the end of string then return empty string\n\
    \    else {\n        return result;\n    }", "    std::string res; // Returned\
    \ string\n    unsigned short i = 0, j = 0; // Indexes for two strings input\n\n\
    \    for (unsigned short i = 0; i < a.size(); i++) // Loop for string a\n    {\n\
    \        // XOR operation on two characters of string a\n        if (a[i] != b[j])\
    \ res[i] += a[i] - '0';\n        // Shift right one for next character\n     \
    \   ++j;\n        // If string b is finished, then set j=0\n        if (j == b.size())\
    \ {\n            j = 0;\n        }\n    }\n    return res;", '  // your code here',
  "    int i = 0;\n    std::string res;\n    while (a[i] != '\\0' && a[i] == b[i])\
    \ {\n        i++;\n    }\n    if (a[i] == '\\0')\n        return res;\n    while\
    \ (b[i] != '\\0' && b[i] == a[i]) {\n        i++;\n    }\n    res = \"\";\n  \
    \  while (i-- > 0) {\n        if (a[i] != '\\0' || b[i] != '\\0')\n          \
    \  res += (a[i] ^ b[i]);\n    }\n    return res;", "    if (a.length() < b.length())\
    \ return string_xor(b, a);\n    \n    std::string result = \"\";\n    for (int\
    \ i = 0; i < a.length(); ++i) {\n        result += (a[i] ^ b[i]);\n    }\n   \
    \ return result;", "    int a_size = a.size(), b_size = b.size();\n    std::string\
    \ ans = \"\";\n    // Iterate through both strings, appending the result to the\
    \ ans string\n    for(int i = 0; i < a_size && i < b_size; i++)\n        ans +=\
    \ (((int) a[i] - 1) ^ ((int) b[i] - 1));\n    return ans;", "    assert(a.size()\
    \ == b.size());\n    std::string result = \"\";\n    for(unsigned int i = 0; i\
    \ < a.size(); i++) {\n        result += (b[i] - a[i]) ^ a[i];\n    }\n    return\
    \ result;", "\tassert(a.size() == b.size());\n\tstd::string ans(a.size(), '\\\
    0');\n\tfor (size_t i = 0; i < a.size(); ++i) {\n\t\tif (a[i] != '1') ans[i] =\
    \ '0';\n\t\telse ans[i] = '1';\n\t}\n\tfor (size_t i = 0; i < b.size(); ++i) {\n\
    \t\tif (b[i] != '1') ans[a.size()+i] = '0';\n\t\telse ans[a.size()+i] = '1';\n\
    \t}\n\treturn ans;", "    std::string result;\n    if (a.size() < b.size()) {\n\
    \        result.resize(a.size());\n        for (int i = 0; i < a.size(); ++i)\
    \ {\n            result[i] = a[i] ^ b[i];\n        }\n    } else {\n        result.resize(b.size());\n\
    \        for (int i = 0; i < b.size(); ++i) {\n            result[i] = a[i] ^\
    \ b[i];\n        }\n    }\n    return result;", "    // convert string to binary\
    \ representation, add leading zeroes to make string\n    int bin_a = 0;\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        if(a[i] == '1') {\n            bin_a <<=\
    \ 1;\n            bin_a |= 1;\n        }\n    }\n\n    int bin_b = 0;\n    for(int\
    \ i = 0; i < b.size(); i++) {\n        if(b[i] == '1') {\n            bin_b <<=\
    \ 1;\n            bin_b |= 1;\n        }\n    }\n\n    int c = 0;\n    for(int\
    \ i = 0; i < a.size(); i++) {\n        c = c << 1;\n        if(a[i] == '1') {\n\
    \            c |= 1;\n        }\n    }\n\n    for(int i = 0; i < b.size(); i++)\
    \ {\n        c = c << 1;\n        if(b[i] == '1') {\n            c |= 1;\n   \
    \     }\n    }\n\n    // convert binary string to char and return as string\n\
    \    std::string result = \"\";\n    for(int i = 0; i < c; i++) {\n        if(c\
    \ & 0x01) {\n            result += '0';\n        }\n        c >>= 1;\n    }\n\
    \    return result;", "  std::string res = \"\";\n  for (char c : a) {\n    res\
    \ += std::to_string(c) ^ std::to_string(b[c]);\n  }\n  return res;", "    assert(a.size()\
    \ == b.size());\n    std::string result(a.size(), '\\0');\n    for (size_t i =\
    \ 0; i < a.size(); ++i)\n        result[i] = (a[i] ^ b[i]);\n    return result;",
  "    std::string res;\n    int i = 0, j = 0, k = 0;\n    while(i < a.size() && j\
    \ < b.size()) {\n        if(a[i] != b[j]) {\n            char temp = (a[i] ^ b[j]);\n\
    \            if(a[i] == '1')\n                temp = '0';\n            if(b[j]\
    \ == '1')\n                temp = '1';\n            res.push_back(temp);\n   \
    \         i++;\n            j++;\n        } else {\n            k++;\n       \
    \     i += 2;\n            j ++;\n        }\n    }\n    while(i < a.size())\n\
    \        res.push_back(a[i++]);\n    while(j < b.size())\n        res.push_back(b[j++]);\n\
    \    return res;", "  assert(a.length() == b.length());\n  int result = 0;\n \
    \ for (int i = 0; i < a.length(); i++)\n    result ^= (a[i] - '0') ^ (b[i] - '0');\n\
    \  char res[20];\n  snprintf(res, sizeof(res), \"%c\", result);\n  std::string\
    \ res1(res);\n  return res1;", "  if (a.length() != b.length()) {\n    throw std::runtime_error(\"\
    Invalid string length\");\n  }\n  std::string res = \"0\";\n  for (int i = 0;\
    \ i < a.length(); i++) {\n    res += (a[i] - b[i]) * pow(2, i);\n  }\n  return\
    \ res;", "   assert(a.length() == b.length());\n   std::string res = a;\n   for\
    \ (int i = 0; i < a.length(); i++)\n      res += to_string(static_cast<int>(a[i])\
    \ ^ static_cast<int>(b[i]));\n   return res;", "  int n = a.size();\n  int m =\
    \ b.size();\n  std::string result = \"\";\n  for (int i = 0; i < n; i++) {\n \
    \   for (int j = 0; j < m; j++) {\n      if (a[i] != b[j]) result += 0;\n    \
    \  else result += 1;\n    }\n  }\n  return result;", "    std::string result;\n\
    \    // Check a\n    int a_size = a.size();\n    bool a_is_zero[256] = { 0 };\n\
    \    for (int i = 0; i < a_size; i++) {\n        a_is_zero[a[a[i]]] = 0;\n   \
    \ }\n    for (int i = 0; i < 256; i++) {\n        if (a_is_zero[i] == 1) {\n \
    \           result += to_string(i);\n        }\n    }\n    assert(a_size == result.size());\n\
    \    // Check b\n    int b_size = b.size();\n    bool b_is_zero[256] = { 0 };\n\
    \    for (int i = 0; i < b_size; i++) {\n        b_is_zero[b[b[i]]] = 0;\n   \
    \ }\n    for (int i = 0; i < 256; i++) {\n        if (b_is_zero[i] == 1) {\n \
    \           result += to_string(i);\n        }\n    }\n    assert(b_size == result.size());\n\
    \    return result;", "  if (a.size() < b.size())\n    swap(a, b);\n  std::string\
    \ ans = \"\";\n  for (int i = 0; i < a.size(); i++) {\n    ans += (bin2dec(a[i])\
    \ ^ bin2dec(b[i])) > 0 ? 1 : 0;\n  }\n  return ans;", "    std::string result\
    \ = (a + b).substr(0, (a + b).size() & ~1U);\n    for (size_t i = 2U; i < (a +\
    \ b).size() & ~1U; ++i) {\n        result += '0';\n        result += ((a[i] ^\
    \ b[i]) & 0x1);\n    }\n    return result;", "    std::string ans = \"\";\n  \
    \  int n = a.size();\n    int m = b.size();\n    if (n != m) {\n        throw\
    \ \"XOR : input strings have different sizes\";\n    }\n    for (int i = 0; i\
    \ < n; i++) {\n        int sum = a[i] - b[i];\n        ans += std::to_string(sum);\n\
    \    }\n    return ans;", "   assert(a.size() == b.size());\n   string xor = \"\
    \";\n   for(int i=0; i<a.size(); i++)\n      xor += ((int)a[i]^(int)b[i]);\n \
    \  return xor;", "    std::string ans = \"\";\n    for(int i = 0 ; i < a.length();\
    \ i++) {\n        ans += (static_cast<char>(a[i] ^ b[i]));\n    }\n    return\
    \ ans;", "  std::string result;\n  assert(a.size() == b.size());\n  for (int i\
    \ = 0; i < a.size(); i++) {\n    result += (a[i] ^ b[i]);\n  }\n  return result;",
  "  int carry = 0;\n  int result = 0;\n  int size = a.length() + b.length();\n  for\
    \ (int i = 0; i < size; i++) {\n    int val = a.at(i) ^ b.at(i);\n    result +=\
    \ val * (carry + (val & 1));\n    carry = val >> 1;\n  }\n  if (carry > 0)\n \
    \   result += carry;\n  return std::to_string(result);", "    int n = a.length();\n\
    \    int m = b.length();\n    std::string s = \"\";\n    if (n > m) {\n      \
    \  std::swap(a, b);\n        std::swap(n, m);\n    }\n    for (int i = 0; i <\
    \ n; ++i) {\n        s += a[i] ^ b[i];\n    }\n    return s;", "    std::string\
    \ result = \"\";\n    for (size_t i = 0; i < a.size(); i++)\n        if (a[i]\
    \ == 1 && b[i] == 0)\n            result += \"1\";\n        else\n           \
    \ result += a[i];\n    return result;", "    std::vector<char> v = {0}, w = {0};\n\
    \    for(auto c: a) {\n        v.push_back(c == '1' ? 1: '0');\n    }\n    for(auto\
    \ c: b) {\n        w.push_back(c == '1' ? 1: '0');\n    }\n    for(auto i = 0;\
    \ i < v.size(); ++i) {\n        if(v[i] != w[i]) {\n            return std::string(\"\
    NO\");\n        }\n    }\n    return std::string(\"YES\");", "    int n = a.size();\n\
    \    int m = b.size();\n    std::string s(m+1, '\\0');\n    for(int i=0; i<n;\
    \ i++) {\n        s[i] = (s[i] != b[i]) ? '1' : '0';\n    }\n    return s;", " \
    \   std::string res = \"\";\n    for (auto val : a) {\n        res += val == '0'\
    \ ? b[val - '0'] : b[val - '0'];\n    }\n    return res;", "    std::string result\
    \ = \"\";\n    for (int i = 0; i < a.size(); i++) {\n        result += (a[i] ^\
    \ b[i]);\n    }\n    return result;", "    std::string s = a + b;\n    s += '\\\
    0';\n    std::string xor_string(s.size(), '\\0');\n    for (unsigned int i = 0;\
    \ i < s.size(); i++) {\n        xor_string[i] = a[i] ^ b[i];\n    }\n    return\
    \ xor_string;", "    assert(a.size() == b.size());\n    std::string result = \"\
    \";\n    for (int i = 0; i < a.size(); i++) {\n        result += std::to_string(((int)a[i])\
    \ ^ b[i]);\n    }\n    return result;", "    int i, len;\n    len = a.size() +\
    \ b.size();\n    std::string res(len, '\\0');\n    for (int i = 0; i < len; ++i)\
    \ {\n        res[i] = a[i] ^ b[i];\n    }\n    return res;", "    std::string\
    \ result;\n    \n    for (size_t i = 0; i < a.size(); i++) {\n        result +=\
    \ (std::tolower(a[i]) ^ std::tolower(b[i]));\n    }\n    \n    return result;",
  "    std::string res=\"\";\n    int n=a.length();\n    int m=b.length();\n    for(int\
    \ i=0;i<n;i++){\n        res+=((int)a[i]^(int)b[i]);\n    }\n    return res;",
  "    // Convert string into vector of bit strings.\n    std::vector<int> a_bit_strs;\n\
    \    for(auto c: a) {\n        int bit = std::stoi(std::bitset<8>(c + '0'));\n\
    \        a_bit_strs.push_back(bit);\n    }\n    std::vector<int> b_bit_strs;\n\
    \    for(auto c: b) {\n        int bit = std::stoi(std::bitset<8>(c + '0'));\n\
    \        b_bit_strs.push_back(bit);\n    }\n    // Perform XOR\n    std::vector<int>\
    \ xor_bit_strs;\n    for(int i = 0; i < std::min(a_bit_strs.size(), b_bit_strs.size());\
    \ ++i) {\n        int a_v = a_bit_strs[i];\n        int b_v = b_bit_strs[i];\n\
    \        xor_bit_strs.push_back(a_v ^ b_v);\n    }\n    // Convert output into\
    \ string.\n    std::string xor_str = \"\";\n    for(auto c: xor_bit_strs) {\n\
    \        int bit = std::stoi(std::bitset<8>(c + '0'));\n        xor_str += std::to_string(bit);\n\
    \    }\n    return xor_str;", "    std::vector<int> va = { 0 };\n    for (auto&\
    \ c : a) {\n        if (c == '1')\n            va.push_back(va.back() | 1);\n\
    \    }\n    std::vector<int> vb = { 0 };\n    for (auto& c : b) {\n        if\
    \ (c == '1')\n            vb.push_back(vb.back() | 1);\n    }\n    assert(va.size()\
    \ == vb.size());\n    std::vector<int> vc = { 0 };\n    for (auto i : va)\n  \
    \      vc.push_back(vc.back() ^ i);\n    for (auto i : vb)\n        vc.push_back(vc.back()\
    \ ^ i);\n    std::string res;\n    for (auto i : vc)\n        res.push_back((i\
    \ + 1) & 1 ? '1' : '0');\n    return res;", '    return std::string(std::bitset<8>(a.c_str())
    ^ std::bitset<8>(b.c_str()));', "    std::string result;\n    for (size_t i =\
    \ 0; i < a.size(); i++) {\n        result += ((std::bitset<8>(a[i]) ^ std::bitset<8>(b[i])).to_ulong())\
    \ % 2 ? \"1\" : \"0\";\n    }\n    return result;", "    std::string ans = \"\"\
    ;\n    for (auto i = 0; i < a.size(); i++) {\n        ans += (std::to_string(a[i]\
    \ ^ b[i]) + \",\");\n    }\n    return ans;", "  if (a.size() != b.size()) return\
    \ \"\";\n  std::string res(a.size(), 0);\n  for (unsigned int i = 0; i < a.size();\
    \ i++) {\n    res[i] = a[i] ^ b[i];\n  }\n  return res;", "  if (a.length() !=\
    \ b.length()) return \"\";\n  \n  // create result string by prepending extra\
    \ 0s.\n  std::string result;\n  assert(a.length() > 0);\n  assert(b.length() >\
    \ 0);\n  result.reserve(b.length());\n  for (size_t i = 0; i < b.length(); ++i)\n\
    \    result.push_back('a' + ((b[i] != '0') ^ a[0]));\n  \n  // If result consists\
    \ only of '0' then return result as string.\n  if (result.size() == 0) return\
    \ result;\n  // If result consists of more than one '0' then return empty string.\n\
    \  if (result.size() == 1) return \"\";\n  // If result consists solely of '1'\
    \ then return result as string.\n  assert(result.size() == 2);\n  return result;",
  "    assert(a.length() == b.length());\n    std::string result;\n    for (int i\
    \ = 0; i < a.length(); i++) {\n        result += (a[i] ^ b[i]);\n    }\n    return\
    \ result;", "    std::string s = \"\";\n    for (int i = 0; i < a.length() &&\
    \ i < b.length(); i++) {\n        int a_digit = (int)a[i] - '0';\n        int\
    \ b_digit = (int)b[i] - '0';\n        int result = (int)(a_digit ^ b_digit);\n\
    \        s += std::to_string(result);\n    }\n    return s;", "    // Allocate\
    \ space in output string\n    std::string output;\n    output.reserve(a.size()\
    \ + b.size());\n\n    // Perform binary XOR operation on each character from input\n\
    \    for(char c : a)\n        output += (char)(c ^ b[c % b.size()]);\n    return\
    \ output;", "  size_t a_length = a.length();\n  size_t b_length = b.length();\n\
    \  std::string result = \"\";\n  for (size_t i = 0; i < a_length; i++) {\n   \
    \ result += std::bitset<8>(a[i]) ^ std::bitset<8>(b[i]);\n  }\n  return result;",
  "    std::string result;\n    for (int i = 0; i < a.size(); ++i) {\n        result\
    \ += a[i] ^ b[i];\n    }\n    return result;", "    std::string result;\n    for\
    \ (int i = 0; i < a.size(); i++) {\n        result += std::to_string(std::bit_xor(a[i],\
    \ b[i]));\n    }\n    return result;", "\tint i = 0, j = 0;\n\tstd::string res;\n\
    \twhile (a.at(i) != '\\0') {\n\t\tres.at(i) = a.at(i);\n\t\ti = i + 1;\n\t}\n\t\
    i = 0;\n\twhile (b.at(j) != '\\0') {\n\t\tres.at(j) = b.at(j);\n\t\tj = j + 1;\n\
    \t}\n\twhile (res.at(j) != '\\0') {\n\t\tres.at(j) = res.at(j) ^ res.at(i);\n\t\
    \ti = i + 1;\n\t\tj = j + 1;\n\t}\n\twhile (i < res.size()) {\n\t\tres.at(i) =\
    \ '0';\n\t\ti = i + 1;\n\t}\n\twhile (j < res.size()) {\n\t\tres.at(j) = '0';\n\
    \t\tj = j + 1;\n\t}\n\treturn res;", "    int lena = a.length();\n    int lenb\
    \ = b.length();\n    std::string ans = \"\";\n    for (int i = 0; i < lena; i++)\n\
    \        ans += a[i] ^ b[i];\n    return ans;", "  std::string result = \"\";\n\
    \  for (int i = 0; i < a.size(); i++)\n    result += (a[i] ^ b[i]);\n  return\
    \ result;", "    int n = a.length();\n    int m = b.length();\n    int max_len\
    \ = max(m, n);\n    std::string res(max_len, '\\0');\n    for (int i = 0; i <\
    \ max_len; ++i) {\n        res[i] = a[i] ^ b[i];\n    }\n    return res;", " \
    \ int len1 = a.length();\n  int len2 = b.length();\n  assert(len1 != 0 && len2\
    \ != 0);\n  std::string res(len1, ' ');\n  for (int i = 0; i < len1; i++) {\n\
    \    res[i] = a[i] ^ b[i];\n  }\n  return res;", "  std::string res = \"\";\n\
    \  for (size_t i = 0; i < a.size(); i++) {\n    res += (((b[i] && !a[i]) ? \"\
    1\" : \"0\") + ((!b[i] && !a[i]) ? \"1\" : \"0\"));\n  }\n  return res;", "  \
    \  std::string xor = \"\";\n    for (int i = 0; i < a.size(); i++) {\n       \
    \ xor += a[i] ^ b[i];\n    }\n    return xor;", "    string ans(a.size() + b.size(),\
    \ 0);\n    int k = 0;\n    for (int i = 0; i < a.size(); i++) {\n        int carry\
    \ = 0;\n        for (int j = 0; j < b.size(); j++) {\n            if (a[i] ==\
    \ b[j]) {\n                carry = 0;\n            } else {\n                carry\
    \ = 1;\n                break;\n            }\n        }\n        ans[k + i] =\
    \ carry + 1;\n    }\n    return ans;", "  std::string ans = \"\";\n  for (int\
    \ i = 0; i < a.size(); i++) {\n    ans += (static_cast<char>(a[i] ^ b[i]));\n\
    \  }\n  return ans;", '    return a + b;', "    std::string res;\n    res.push_back('a');\n\
    \    res.push_back('b');\n    int n = a.size();\n    int m = b.size();\n    res.resize(n\
    \ + m);\n    int k = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = 0; j < m; j++) {\n            if (a[i] != '1' && b[j] != '1') res[k++] = '0';\n\
    \            else res[k++] = '1';\n        }\n    }\n    res.push_back('\\0');\n\
    \    return res;", "    int m = a.size(), n = b.size();\n    std::string s;\n\
    \    for (int i = 0; i < m; i++) {\n        s += a[i] ^ b[i]; // XOR the i-th\
    \ characters.\n    }\n    return s;"]
stop_tokens:
- "\n}"
