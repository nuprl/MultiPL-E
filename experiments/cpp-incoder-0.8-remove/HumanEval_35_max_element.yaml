name: HumanEval_35_max_element
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element in\
  \ the list.\nlong max_element(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,\
  \ (long)-10}))) == (124));\n}\n"
completions: ["    long long maxIndex = 0;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > l[maxIndex]) {\n            maxIndex = i;\n        }\n\
    \    }\n    return maxIndex;", "    long max = INT_MIN;\n    for (auto i : l)\
    \ {\n        if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ max;", "    long maxv = l[0];\n    for (auto it=l.begin()+1; it!=l.end(); it++)\
    \ {\n        if (*it > maxv) {\n            maxv = *it;\n        }\n    }\n  \
    \  return maxv;", "    long max = l[0];\n    for (auto i : l) {\n        if (i\
    \ > max) {\n            max = i;\n        }\n    }\n    return max;", "    std::sort(l.begin(),\
    \ l.end());\n    return l.back();", "    long long max = 0;\n    for (long long\
    \ &i : l) {\n        max = std::max(max, i);\n    }\n    return max;", "     \
    \   long max = l[0];\n        for (long i = 1; i < l.size(); i++) {\n        \
    \        if (l[i] > max)\n                        max = l[i];\n        }\n   \
    \     return max;", "    long max_ele = 0;\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++)\n        max_ele = std::max(max_ele, *i);\n    return max_ele;",
  "    long max = l[0];\n    long index = 0;\n    for (auto i = l.begin() + 1; !l.empty();\
    \ i++, index++) {\n        if (l[i] > max) max = l[i], index = i;\n    }\n   \
    \ return index;", "  // Initialize max value to the first element in the list.\n\
    \  long max_val = l.front();\n  // Set the current max value to first element\
    \ in the list.\n  long curr_max = l.front();\n  // Iterate through the remaining\
    \ elements.\n  for (long i = 2; i < l.size(); i++) {\n    // Compare the current\
    \ max element with the current element in the list.\n    if (l[i] > curr_max)\
    \ {\n      // Update the maximum value to the current max element.\n      max_val\
    \ = curr_max;\n    }\n    // Update the max value to the current element.\n  \
    \  curr_max = l[i];\n  }\n  // Return the max value.\n  return max_val;", "  \
    \  std::sort(l.begin(), l.end());\n    return l[l.size()-1];", "    long res =\
    \ 0;\n    for (long &i : l)\n    {\n        if (i > res)\n            res = i;\n\
    \    }\n    return res;", "    long max = l[0];\n    for (auto i : l) {\n    \
    \    if (i > max) max = i;\n    }\n    return max;", "  // Find minimum element\
    \ in the list\n  auto min_index = std::min_element(l.begin(), l.end());\n  //\
    \ Return maximum element\n  return std::max_element(l.begin(), min_index);", " \
    \   for (size_t i = 0; i < l.size(); i++)\n        if (l[i] > l[i - 1])\n    \
    \        return l[i];\n    return l[0];", "    // Write your code here.\n    long\
    \ max = l[0];\n    for (long i : l)\n        if (i > max)\n            max = i;\n\
    \    return max;", "\tassert(l.size() > 0);\n\tlong max = l[0];\n\tlong index\
    \ = 1;\n\tfor (long i = 1;i<l.size();i++) {\n\t\tlong cur_max = l[i];\n\t\tif\
    \ (cur_max > max) {\n\t\t\tindex = i;\n\t\t\tmax = cur_max;\n\t\t}\n\t}\n\treturn\
    \ max;", "        long max_element = 0;\n        long max_index = 0;\n       \
    \ for (int i = 0; i < l.size(); ++i) {\n                if (l[i] > max_element)\
    \ {\n                        max_element = l[i];\n                        max_index\
    \ = i;\n                }\n        }\n        return max_element;", "    assert(l.size()\
    \ > 0);\n    long max = l[0];\n    for (size_t i = 1; i < l.size(); ++i) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;", "    long max_element = l[0];\n    for (long i = 1; i < l.size(); ++i)\n\
    \        if (l[i] > max_element)\n            max_element = l[i];\n    return\
    \ max_element;", '    return *std::max_element(l.begin(), l.end());', "  long\
    \ max = l[0];\n  for (long i = 1; i < l.size(); ++i)\n    if (l[i] > max)\n  \
    \    max = l[i];\n  return max;", "    assert(l.size() != 0);\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        assert(l[i] >= 0);\n        if (l[i] >=\
    \ l.back()) {\n            std::swap(l[i], l.back());\n        }\n    }\n    long\
    \ ans = l.back();\n    for (auto i : l) {\n        if (i >= ans) ans = i;\n  \
    \  }\n    return ans;", "    long max = INT_MIN;\n    for (long i = 0; i < l.size();\
    \ i++)\n        if (l[i] > max)\n            max = l[i];\n    return max;", " \
    \   assert(l.size() >= 1);\n    long max_element = l[0];\n    long max_pos = 0;\n\
    \    for (long pos = 1; pos < l.size(); ++pos) {\n        if (l[pos] > max_element)\
    \ {\n            max_element = l[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    return max_element;", "    long max = 0;\n    for (auto &i : l) {\n\
    \        if (i >= max) {\n            max = i;\n        }\n    }\n    return max;",
  "    long res = 0;\n    long cur = 0;\n    for (auto& it : l) {\n        if (it\
    \ > cur) {\n            res = it;\n            cur = it;\n        }\n    }\n \
    \   return res;", "    auto it = std::max_element(l.begin(), l.end());\n    if\
    \ (it == l.end()) return 0; // empty list\n    return *it;", "    long max=l[0];\n\
    \    long index=0;\n    for(long i=1;i<l.size();i++){\n        if(l[i]>max){\n\
    \            max=l[i];\n            index=i;\n        }\n    }\n    return index;",
  "    long x = 0, y = 0, z = 0;\n    for (auto &i : l) if (i > y) y = i;\n    for\
    \ (auto &i : l) if (i < x) x = i;\n    for (auto &i : l) if (i > z) z = i;\n \
    \   return z;", '  return *max_element(l.begin(), l.end());', "    if(l.size()==0){\n\
    \        return 0;\n    }\n    long max = l[0];\n    for(long i=1; i<l.size();\
    \ i++){\n        if(l[i]>max){\n            max=l[i];\n        }\n    }\n    return\
    \ max;", "    long max=INT_MIN;\n    for (long i:l)\n        if ( i>max)\n   \
    \         max = i;\n    return max;", "    long maximum = -2;\n    long maxElement\
    \ = -1;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n\
    \            maxElement = i;\n            maximum = l[i];\n        }\n    }\n\
    \    return maxElement;", "    assert(l.size() >= 2);\n    long max_ele = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (max_ele > l[i])\n    \
    \        max_ele = l[i];\n    }\n    return max_ele;", "    long max_element =\
    \ l[0];\n    long max_index = 0;\n    for (int i = 1; i < l.size(); ++i) {\n \
    \       if (l[i] > max_element) {\n            max_element = l[i];\n         \
    \   max_index = i;\n        }\n    }\n    return max_element;", "  long max =\
    \ 0;\n  for (auto it=l.begin();it!=l.end();it++) {\n    if (*it > max) {\n   \
    \   max = *it;\n    }\n  }\n  return max;", "    long long max = l[0];\n    long\
    \ long pos = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >\
    \ max) {\n            max = l[i];\n            pos = i;\n        }\n    }\n  \
    \  return pos;", "    // TODO: Add error checking\n    long max = l[0];\n    for\
    \ (size_t i = 1; i < l.size(); ++i) {\n        if (l[i] > max) {\n           \
    \ max = l[i];\n        }\n    }\n    return max;", "\tint i;\n\tlong ans = l[0];\n\
    \tfor (i = 1; i < l.size(); i++)\n\t\tif (l[i] > ans)\n\t\t\tans = l[i];\n\treturn\
    \ ans;", "    long m = -long_MAX;\n    for (long &x: l) if (x > m) m = x;\n  \
    \  return m;", "    long max_el = l.front();\n    for (long i : l)\n    {\n  \
    \      if (i > max_el)\n            max_el = i;\n    }\n    return max_el;", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    return l.back();",
  "    long max_val = l[0];\n    long max_pos = 0;\n    for (size_t i = 0; i < l.size();\
    \ ++i) {\n        if (l[i] > max_val) {\n            max_val = l[i];\n       \
    \     max_pos = i;\n        }\n    }\n    return max_pos;", "    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;", "   long max_element_idx = 0, max_element = l[0];\n\
    \n   for(size_t i = 1; i < l.size(); i++)\n   {\n      if(l[i] > l[max_element_idx])\n\
    \      {\n         max_element_idx = i;\n         max_element = l[i];\n      }\n\
    \   }\n   return max_element;", "\tlong max = INT_MIN;\n\tfor (long i : l) {\n\
    \t\tmax = std::max(i, max);\n\t}\n\treturn max;", "    if (l.size() == 0) return\
    \ 0;\n    long res = l[0];\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (l[i] > res) res = l[i];\n    }\n    return res;", "    // Write your code\
    \ here.\n    int i, j;\n    int max = INT_MIN;\n    for (i = 0; i < l.size() -\
    \ 1; i++) {\n        for (j = i + 1; j < l.size(); j++) {\n            if (l[i]\
    \ > l[j]) {\n                max = l[i];\n                break;\n           \
    \ }\n        }\n    }\n    return max;", '    return std::max_element(l.begin(),
    l.end());', "    if (l.size() == 0) {\n        return 0;\n    }\n    long max\
    \ = l[0];\n    for (long i = 0; i < l.size() - 1; i++) {\n        if (l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;", "    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n        if (l[i] > max)\n\
    \            max = l[i];\n    }\n    return max;", "    // Your code here\n  \
    \  std::vector<long>::iterator it_max;\n    long max = *std::max_element(l.begin(),\
    \ l.end());\n    it_max = std::max_element(l.begin(), l.end());\n    if (*it_max\
    \ > max)\n        max = *it_max;\n    return max;", "    long max;\n    int n\
    \ = l.size();\n    for (long i = 0; i < n; i++) {\n        max = l[i];\n     \
    \   for (int j = i + 1; j < n; j++)\n            if (l[j] > max) max = l[j];\n\
    \    }\n    return max;", "    assert(l.size() >= 2);\n    long long largest =\
    \ 0;\n    long long i = 0;\n    while (i < l.size()) {\n        if (l[i] > largest)\
    \ {\n            largest = l[i];\n        }\n        i++;\n    }\n    return largest;",
  "\tlong max_ele = l[0], max_index = -1;\n\tfor (int i = 1; i < l.size(); i++)\n\t\
    \tif (l[i] > max_ele)\n\t\t\tmax_ele = l[i];\n\t\telse if (l[i] == max_ele)\n\t\
    \t\tmax_index = i;\n\treturn max_ele;", "    long max_val = std::numeric_limits<long>::min();\n\
    \    for (auto& e: l)\n    {\n        if(e > max_val)\n        {\n           \
    \ max_val = e;\n        }\n    }\n    return max_val;", "    long max = l[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] > max) {\n            max = l[i];\n            max_idx = i;\n        }\n\
    \    }\n    return max_idx;", "    long max = l[0];\n    for (long i = 1; i <\
    \ l.size(); ++i) {\n        if (max < l[i]) max = l[i];\n    }\n    return max;",
  "    long max_val = -long_MAX;\n    long index = 0;\n    long curr = 0;\n    for\
    \ (auto val : l) {\n        if (val > curr) {\n            index = val;\n    \
    \        curr = val;\n        }\n    }\n    return index;", "   assert(l.size()\
    \ > 0);\n   return *std::max_element(l.begin(), l.end());", "    long max = l[0],\
    \ max_pos = 0;\n    for (long i = 1; i < l.size(); i++)\n        if (l[i] > max)\
    \ {\n            max = l[i];\n            max_pos = i;\n        }\n    return\
    \ max_pos;", "    long maximum = l[0];\n    for (auto i : l) {\n        if (i\
    \ > maximum) maximum = i;\n    }\n    return maximum;", "    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;", "long long max = 0;\nlong long max = l[0];\nfor(long\
    \ long i=1;i<l.size();i++){\nif(l[i] > max)\nmax = l[i];", '    return std::max_element(l.begin(),
    l.end());', "    long max = l[0];\n    for (long i : l) {\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    return max;", "    long max_element\
    \ = l[0];\n    long index = 0, j = 0;\n    for (long i = 1, n = l.size(); i !=\
    \ n; ++i) {\n        if (l[i] > max_element) {\n            max_element = l[i];\n\
    \            index = j;\n        }\n        if (l[i] < max_element) {\n      \
    \      ++j;\n        }\n    }\n    return max_element;", "    long res = INT_MIN;\n\
    \    int i = 0;\n    while (i < l.size()) {\n        if (l[i] > res) {\n     \
    \       res = l[i];\n        }\n        i++;\n    }\n    return res;", "    long\
    \ largest = INT_MIN;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > largest)\n            largest = l[i];\n    }\n    return largest;", "    long\
    \ max_val = -1LL;\n    // iterate over list from end to beginning\n    for (long\
    \ i = l.size() - 1; i >= 0; i--) {\n        // compare the elements\n        if\
    \ (l[i] > max_val) {\n            max_val = l[i];\n        }\n    }\n    return\
    \ max_val;", "    long ans = l[0];\n    for (int i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > ans)\n            ans = l[i];\n    }\n    return ans;", " \
    \   int len = l.size();\n    // Return minimum element, if list is empty.\n  \
    \  if (len == 0) return 0;\n    long max = l[0];\n    for (int i = 1; i < len;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    long max_element = 0;\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] < max_element) {\n            max_element = l[i];\n\
    \        }\n    }\n    return max_element;", "    long max = l.front();\n    for(long\
    \ i = 1; i < l.size(); i++) {\n        if(max < l[i]) max = l[i];\n    }\n   \
    \ return max;", "    long max = l[0];\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    long max;\n    max = l[0];\n    for (long i=1; i<l.size();\
    \ i++) {\n        if (max < l[i]) max = l[i];\n    }\n    return max;", "   auto\
    \ it = l.begin();\n   long maxval = 0;\n   for(; it != l.end(); ++it) if(*it >\
    \ maxval) maxval = *it;\n   return maxval;", "    long max = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++)\n        if (l[i] > max) max = l[i];\n    return max;",
  "    auto f = [](const long x) { return x < 0; };\n    return std::max_element(l.begin(),\
    \ l.end(), f);", "    // Initialize a dummy vector with size equal to l.size()\n\
    \    std::vector<long> x;\n    x.assign(l.begin(), l.end());\n\n    // Find the\
    \ maximum in x and return\n    auto it = std::max_element(x.begin(), x.end());\n\
    \    if (it == x.end()) return 0;\n    return *it;", "    if (l.empty()) throw\
    \ std::runtime_error(\"Empty List!\");\n    long max = l[0];\n    for (long i\
    \ = 1, j; i < l.size(); i++)\n        if (l[i] > max) max = l[i];\n    for (j\
    \ = i; j > 0; j--)\n        if (l[j-1] > max) max = l[j-1];\n    return max;",
  "  // Write your code here.\n  int n = l.size();\n  long max = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    if (l[i] > max)\n      max = l[i];\n  }\n  return max;",
  "  std::sort(l.begin(), l.end());\n  long maxv = l.back();\n  for (long i = l.size()\
    \ - 1; i >= 0; i--) {\n    if (l[i] > maxv) {\n      maxv = l[i];\n    }\n  }\n\
    \  return maxv;", "    assert(l.size() > 0);\n    long max_so_far = l[0];\n  \
    \  for (long i = 0; i < l.size(); i++) {\n        if (max_so_far > l[i])\n   \
    \         max_so_far = l[i];\n    }\n    return max_so_far;", "    assert(l.size()\
    \ > 0);\n    return std::max_element(l.begin(), l.end());", "    long maxv = l[0],\
    \ maxi = 1;\n    for (size_t i = 0; i < l.size(); i++)\n    {\n        if (l[i]\
    \ > maxv)\n        {\n            maxv = l[i];\n            maxi = i;\n      \
    \  }\n    }\n    return maxv;", "    int n = l.size();\n    if (n == 0) return\
    \ 0;\n    long max = l[0];\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "  int\
    \ max_index = 0;\n  int max_value = -1;\n  for (int i = 0; i < l.size(); ++i)\
    \ {\n    if (l[i] > max_value) {\n      max_value = l[i];\n      max_index = i;\n\
    \    }\n  }\n  return max_value;", '    // Your code goes here', "    // TODO:\
    \ Your code here\n    long a = 0, b = 0, max_idx = 0;\n    for( int i = 0; i <\
    \ l.size() ; i++){\n        if(l[i] > max_idx ){\n            max_idx = l[i];\n\
    \        }\n        if(l[i] < a){\n            a = l[i];\n        }\n        if(l[i]\
    \ > b){\n            b = l[i];\n        }\n    }\n    return max_idx;", "    long\
    \ max,x,i;\n    max = l[0];\n    for(i=1; i<l.size(); i++)\n        if(l[i]>max)\n\
    \            max = l[i];\n    return max;", "    long max = 0,i;\n    for(i=0;i<l.size();i++)\
    \ {\n        max = max > l[i]?max:l[i];\n    }\n    return max;", "    auto it\
    \ = std::max_element(l.begin(), l.end());\n    if (it == l.end())\n        return\
    \ 0;\n    return *it;", "  int n = l.size();\n  if (n != 0)\n    return l[0];\n\
    \  else\n    throw std::runtime_error(\"Empty list.\");", "    long max = l[0];\n\
    \    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] > max) max = l[i];\n\
    \    }\n    return max;", "    long max = std::numeric_limits<long long int>::max();\n\
    \    for (auto & i : l) {\n        if (i > max) {\n            max = i;\n    \
    \    }\n    }\n    return max;", "    // Sorting vector using default comparator\n\
    \    std::sort(l.begin(), l.end());\n    // return last element\n    return l.back();",
  "    long max = INT_MIN;\n    for (size_t i = 0; i < l.size(); i++)\n        max\
    \ = std::max(max, l[i]);\n    return max;", "    // Write your code here.\n\t\
    std::size_t min_idx = 0, max_idx = 0;\n\tlong long max_val = INT_MIN;\n\tfor (std::size_t\
    \ i = 0; i < l.size(); ++i) {\n\t\tif (max_val < l[i]) max_val = l[i];\n\t\tif\
    \ (l[i] < l[max_idx]) {\n\t\t\tmax_idx = i;\n\t\t}\n\t}\n\tif (max_val != INT_MIN)\
    \ return max_val;\n\telse return l[max_idx];", "    long max = INT_MIN;\n    for\
    \ (long i : l) {\n        if (i > max) {\n            max = i;\n        }\n  \
    \  }\n    return max;", "        long res = 0;\n        for (long i = 1; i < l.size();\
    \ ++i) {\n                if (l[i] > l[i - 1]) {\n                        res\
    \ = l[i];\n                }\n        }\n        return res;", '    // Your code
    goes here', // Write your code here., "    std::sort(l.begin(), l.end());\n  \
    \  return *std::max_element(l.begin(), l.end()); ", "    long max_ele = 0;\n \
    \   long max_idx = -1;\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max_ele) {\n            max_ele = l[i];\n            max_idx = i;\n      \
    \  }\n    }\n    return max_ele;", "    long maxVal=l[0];\n    for (auto i : l)\n\
    \    {\n        if(maxVal>i)\n            maxVal = i;\n    }\n    return maxVal;",
  "  std::sort(l.begin(), l.end());\n  return l.back();", "    long max = l[0];\n\
    \    for (int i = 0; i < l.size(); i++)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;", "    long max = INT_MIN;\n    for (long i : l)\n\
    \        if (i > max)\n            max = i;\n    return max;", "  long max = 0;\n\
    \  for (size_t i = 0; i < l.size(); ++i) {\n    if (l[i] > max) {\n      max =\
    \ l[i];\n    }\n  }\n  return max;", "    assert(l.size() > 0);\n    long max_val\
    \ = 0;\n    for (long i : l) {\n        if (i > max_val)\n            max_val\
    \ = i;\n    }\n    return max_val;", "    long min = l[0];\n    long max = l[0];\n\
    \    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] < min) {\n      \
    \      min = l[i];\n        }\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;", "    long long max=-10000000000000LL, min=0;\n\
    \    for(auto it=l.begin();it!=l.end();++it){\n        if(*it>max){\n        \
    \    max=*it;\n        }\n        if(*it<min){\n            min=*it;\n       \
    \ }\n    }\n    return max;", "    std::stable_sort(l.begin(), l.end());\n   \
    \ return *std::max_element(l.begin(), l.end());", "    long ans = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++)\n        if (l[i] > ans)\n            ans =\
    \ l[i];\n    return ans;", "    long max = l[0];\n    for (long i : l)\n     \
    \   if (i > max) max = i;\n    return max;", '    return std::max_element(l.begin(),
    l.end());', "  std::sort(l.begin(), l.end());\n  return l.back();", "    long\
    \ max_val = 0;\n    long min_val = INT_MIN;\n\n    for (long elem : l) {\n   \
    \     if (elem > max_val) {\n            max_val = elem;\n        } else if (elem\
    \ < min_val) {\n            min_val = elem;\n        }\n    }\n    return max_val;",
  "    long max_val = std::numeric_limits<long int>::min();\n    long min_val = std::numeric_limits<long\
    \ int>::max();\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >\
    \ max_val) {\n            max_val = l[i];\n        }\n        if (l[i] < min_val)\
    \ {\n            min_val = l[i];\n        }\n    }\n    return max_val;", "  \
    \  long max;\n    long index = std::distance(l.begin(), std::max_element(l.begin(),\
    \ l.end()));\n    if (index != 0)\n        max = l[index - 1];\n    else\n   \
    \     max = l.back();\n    return max;", "\tint n = l.size();\n\tif (n<0) return\
    \ -1;\n\tint max_index = n-1;\n\tlong max_element = l[0];\n\tfor (int i=1; i<n;\
    \ i++) {\n\t\tif (l[i] > max_element) {\n\t\t\tmax_element = l[i];\n\t\t\tmax_index\
    \ = i;\n\t\t}\n\t}\n\treturn max_element;", "    // Initialize max as first element\
    \ of array.\n    long max = l[0];\n    for (long i : l)\n        if (i > max)\n\
    \            max = i;\n    return max;", "    long max = INT_MIN;\n    for (auto\
    \ i : l) {\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   return max;", "    auto it = std::max_element(l.begin(), l.end());\n    return\
    \ (it != l.end()) ? it->first : 0;", "    // initialize variables\n    int left\
    \ = 0, right = l.size() - 1;\n    // check if list is empty\n    if (l.size()\
    \ == 0)\n        return 0;\n    // search for the maximum\n    while (left < right)\
    \ {\n        int mid = (left + right) / 2;\n        if (l[mid] > l[right])\n \
    \           right = mid;\n        else\n            left = mid + 1;\n    }\n \
    \   return l[left];", "  // Find the length of vector\n  int n = l.size();\n \
    \ long max = 0;\n  // Loop over vector and update max element\n  for (int i =\
    \ 0; i<n; i++) {\n    if (l[i] > max)\n      max = l[i];\n  }\n  return max;",
  "    int n = l.size();\n    long max = l[0];\n    for (std::size_t i = 1; i < n;\
    \ ++i) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;", "  long max;\n  long max_idx = 0;\n  for (size_t i = 0; i <\
    \ l.size(); ++i) {\n    if (l[i] > max) {\n      max = l[i];\n      max_idx =\
    \ i;\n    }\n  }\n  return max;", "    long max = l[0];\n    for (size_t i = 1;\
    \ i < l.size(); ++i)\n        if (l[i] > max) max = l[i];\n    return max;", " \
    \   long max_val = std::numeric_limits<long >::min();\n    for (long i : l)\n\
    \        if (i > max_val)\n            max_val = i;\n    return max_val;", " \
    \   long max = l[0];\n    long index = 0;\n    for (auto i : l) {\n        if\
    \ (i > max) {\n            max = i;\n            index = i;\n        }\n    }\n\
    \    return index;", "    // Your code goes here.\n    // Write your code here.\n\
    \    // For instance, you can use the following loop to find the max element:\n\
    \    for (auto &elem : l) {\n        if (elem > max_elem) {\n            max_elem\
    \ = elem;\n        }\n    }\n    return max_elem;", "long max = l[0];\nfor (int\
    \ i = 1; i < l.size(); i++)\nif (max < l[i])\nmax = l[i];\nreturn max;", "   \
    \ assert(l.size()>0);\n    long max = l[0];\n    for(long i=1; i<l.size(); i++)\n\
    \        if(l[i]>max)\n            max = l[i];\n    return max;", "    long largest\
    \ = 0;\n    long index = 0;\n    for(long i = 0; i < l.size(); i++) {\n      \
    \  if(l[i] > largest) {\n            largest = l[i];\n            index = i;\n\
    \        }\n    }\n    return index;", "    std::sort(l.begin(), l.end());\n \
    \   return l.back();", "  // Initialize max with first element of list.\n  long\
    \ max = l[0];\n  // Go through remaining elements of list.\n  for (size_t i =\
    \ 1; i < l.size(); ++i) {\n    // If current element is less than max, update\
    \ max.\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  // Return max.\n\
    \  return max;", "   long max = INT_MIN;\n   for (long i = 0; i < l.size(); ++i)\
    \ {\n      if (max < l[i]) {\n         max = l[i];\n      }\n   }\n   return max;",
  "    long max_element = *max_element(l.begin(), l.end());\n    return max_element;",
  "    long max = l[0];\n    for (long i = 1; i < l.size(); i++)\n        if (l[i]\
    \ > max)\n            max = l[i];\n    return max;", "    long max_elem = 0;\n\
    \    long curr = 0;\n    for (size_t i = 0; i < l.size(); ++i) {\n        if (l[i]\
    \ > max_elem) {\n            max_elem = l[i];\n            curr = i;\n       \
    \ }\n    }\n    return max_elem;", "    long max = INT_MIN;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        long curr = l[i];\n        if (curr <= max)\
    \ {\n            break;\n        }\n        max = curr;\n    }\n    return max;",
  '    // Write your code here', "   assert(l.size()>0);\n   long m=l[0];\n   long\
    \ n=1;\n   for(auto &e:l) \n   { \n       n=max(e,n);\n       m=min(m,e);\n  \
    \ }\n   return n;", "  long max_element = 0;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] > max_element)\n      max_element = l[i];\n  }\n  return\
    \ max_element;", "    if(l.empty()){\n        return 0;\n    }\n    std::sort(l.begin(),\
    \ l.end());\n    return l.back();", "  // Initialize min and max elements to avoid\
    \ undefined behaviour.\n  long min_element = std::numeric_limits<long>::max();\n\
    \  long max_element = std::numeric_limits<long>::min();\n  for (long i : l) {\n\
    \    if (i < min_element) {\n      min_element = i;\n    }\n    if (i > max_element)\
    \ {\n      max_element = i;\n    }\n  }\n  return max_element;", "    long max\
    \ = INT_MIN;\n    for (int i = 0; i < l.size(); i++)\n    {\n        if (l[i]\
    \ > max)\n            max = l[i];\n    }\n    return max;", "    long max = l[0];\n\
    \    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n        \
    \    max = l[i];\n    }\n    return max;", "    // Initialize maximum.\n    long\
    \ max = l[0];\n    for (long i = 0; i < l.size(); i++)\n        if (l[i] > max)\n\
    \            max = l[i];\n    return max;", "    long res = 0;\n    for (long\
    \ k : l) {\n        if (k > res)\n            k = k;\n    }\n    return res;",
  "    assert(l.size() > 0);\n    long max = l[0];\n    for (long i = 1; i < l.size();\
    \ ++i) {\n        max = std::max(max, l[i]);\n    }\n    return max;", "  long\
    \ max_value = INT_MIN;\n  for (long i : l) {\n    max_value = max(max_value, i);\n\
    \  }\n  return max_value;", "    long max = l[0];\n    for(long i = 1; i < l.size();\
    \ i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n\
    \    return max;", "    // Write your code here.\n    std::sort(l.begin(), l.end());\n\
    \    return *(std::max_element(l.begin(), l.end()));", "  std::sort(l.begin(),\
    \ l.end());\n  return std::distance(l.begin(), std::max_element(l.begin(), l.end()));",
  "    auto it = std::max_element(l.begin(), l.end());\n    return std::distance(l.begin(),\
    \ it);", "    long long ans = INT_MIN;\n    for (int i = 0; i < l.size(); i++)\n\
    \        if (l[i] > ans)\n            ans = l[i];\n    return ans;", "    if (l.empty())\n\
    \        throw \"empty list\";\n    return std::max_element(l.begin(), l.end());",
  "    long max=0;\n    long max_pos = 0;\n\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i]>max) {\n            max = l[i];\n            max_pos = i;\n\
    \        }\n    }\n    return max;", "    long max = INT_MIN, max = INT_MAX;\n\
    \    for (long i : l)\n        if (i > max) max = i;\n    return max;", "    int\
    \ max_idx = -1;\n    long max_val = -1;\n    for(int i = 0; i < l.size(); i++)\
    \ {\n        if(l[i] > max_val) {\n            max_val = l[i];\n            max_idx\
    \ = i;\n        }\n    }\n    return max_val;", "   long max_val = 0;\n   long\
    \ max_elem = -1;\n   // Traverse the list from first index to last.\n   for (long\
    \ i = 0; i < l.size(); i++) {\n      // Check if current element is max among\
    \ all elements.\n      if(l[i] > max_val) {\n         max_val = l[i];\n      \
    \   max_elem = i;\n      }\n   }\n   return max_elem;", "    int n = l.size();\n\
    \    int m = INT_MAX;\n    for(int i=0; i < n; i++) {\n        if(m> l[i]) {\n\
    \            m = l[i];\n        }\n    }\n    return m;", "    // write your code\
    \ here\n    return l.back();", "    long max_ele = 0;\n    long min;\n    for(long\
    \ i=0; i<l.size(); i++)\n    {\n        if(i==0)\n            min = l[i];\n  \
    \      else if(l[i]<min)\n            min = l[i];\n        else if(i==l.size()-1)\n\
    \            max_ele = min;\n        else\n        {\n            if(l[i]<max_ele)\n\
    \                max_ele = l[i];\n        }\n    }\n    return max_ele;", // Write
    your code here., "\tint i, j, n = l.size();\n\tassert(n > 0);\n\tlong max_element\
    \ = 0;\n\tfor (i = 1; i < n; ++i) {\n\t\tif (l[i] > l[i - 1]) break;\n\t\tmax_element\
    \ = max(max_element, l[i]);\n\t}\n\treturn max_element;", "long maxElem = l[0];\n\
    for (int i = 1; i < l.size(); i++) {\n    if (l[i] > maxElem) {\n        maxElem\
    \ = l[i];\n    }", "    long max=0;\n    long curr=0;\n    for(auto it=l.begin();it!=l.end();++it)\n\
    \    {\n        if(*it > max)\n        {\n            max=*it;\n            curr=*it;\n\
    \        }\n    }\n    return curr;", "    long max = l[0];\n    for (int i =\
    \ 1; i < l.size(); ++i) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;", "    long max_ele = l[0];\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (l[i] > max_ele) {\n            max_ele = l[i];\n\
    \        }\n    }\n    return max_ele;", "  long max = l[0];\n  for (int i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\
    \  return max;", "    // Code Here\n    auto it = max_element(l.begin(), l.end());\n\
    \    return *it;", '    // Write your code here.', "    long max = l[0];\n   \
    \ for (size_t i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;", "    long max_val = -long_MAX;\n\
    \    for (auto it = l.begin(); it != l.end(); ++it)\n        if (*it > max_val)\n\
    \            max_val = *it;\n    return max_val;", "    auto f1 = [&](const long&\
    \ x) {\n        return (x > l[0]);\n    };\n    auto f2 = [&](const long& x, const\
    \ long& y) {\n        return (x > y);\n    };\n    auto f3 = [](const long& x,\
    \ const long& y, const long& z) {\n        return (x > y && x > z);\n    };\n\
    \    auto f4 = [](const long& x, const long& y, const long& z, const long& w)\
    \ {\n        return (x > y && x > z && x > w);\n    };\n    return std::max_element(l.begin(),\
    \ l.end(), f1, f2, f3, f4);", "    long max = INT_MIN;\n    for (auto x: l) {\n\
    \        if (x > max)\n            max = x;\n    }\n    return max;", "    assert(l.size()\
    \ > 0);\n    long ans = l[0];\n    for(size_t i = 1; i < l.size(); ++i) {\n  \
    \      if(l[i] > ans) ans = l[i];\n    }\n    return ans;", "  std::sort(l.begin(),\
    \ l.end());\n  return l[l.size()-1];", "    assert(l.size() > 0);\n    long max\
    \ = 0;\n    for (auto i : l) {\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    return max;", "    // code here\n    // Complete the function",
  "    long maximum=l[0];\n    for (int i=0;i<l.size();i++) {\n        maximum=max(maximum,l[i]);\n\
    \    }\n    return maximum;", "    for (long i = l.size() - 1; i >= 0; --i)\n\
    \        if (l[i] < l[(i + 1) % l.size()])\n            return l[i];\n    return\
    \ l[0];", "    long maxValue = l[0];\n    int maxIndex = -1;\n    for (int i =\
    \ 1; i < l.size(); i++) {\n        if (l[i] > maxValue) {\n            maxValue\
    \ = l[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;",
  "    assert(l.size()>0);\n    long long maximum = l[0];\n    for (long long i =\
    \ 1;i<l.size();++i) {\n        if (l[i]>maximum) {\n            maximum = l[i];\n\
    \        }\n    }\n    return maximum;", "    long res = 0;\n    for (long i :\
    \ l) {\n        res = i;\n    }\n    return res;", "    int n = l.size();\n  \
    \  long max = l[0], max_idx = 1;\n    for (int i = 1; i < n; ++i) {\n        if\
    \ (l[i] > max)\n            max = l[i], max_idx = i;\n    }\n    return max;",
  "    long max = l[0];\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n    }\n    return max;", "   \
    \ for (long i = 1; i < l.size(); i++)\n        if (l[i] < l[i - 1])\n        \
    \    std::swap(l[i], l[i - 1]);\n    return l[0];", "  // Index of first element\
    \ larger than current.\n  int i = 0, j = 0, k = l.size() - 1;\n  while (i < k\
    \ && l[i] <= l[j])\n    if (l[i] > l[j])\n      swap(l[i], l[j]);\n    else\n\
    \      i++;\n  while (j > i) {\n    swap(l[j], l[k]);\n    k--;\n  }\n  return\
    \ l[k];", "  long m = std::numeric_limits<long>::max();\n  for (auto i : l) {\n\
    \    if (i > m) {\n      m = i;\n    }\n  }\n  return m;", "    long max_val =\
    \ 0, max_idx = 0;\n    for (size_t i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > max_val)\n            max_val = l[i];\n        max_idx = i;\n    }\n    return\
    \ max_idx;", "    long max = l[0];\n    for (size_t i = 1; i < l.size(); i++)\
    \ {\n        if (max < l[i]) {\n            max = l[i];\n        }\n    }\n  \
    \  return max;", "    // Return maximum element in the list.\n    long max = l[0];\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > max)\n         \
    \   max = l[i];\n    }\n    return max;", "    assert(!l.empty());\n    long max\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (max < l[i])\n\
    \            max = l[i];\n    }\n    return max;", "    long max_el = std::numeric_limits<long\
    \ int>::min();\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i] >\
    \ max_el) {\n            max_el = l[i];\n        }\n    }\n    return max_el;"]
stop_tokens:
- "\n}"
