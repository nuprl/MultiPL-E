name: HumanEval_16_count_distinct_characters
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string, find out\
  \ how many distinct characters (regardless of case) does it consist of\nlong count_distinct_characters(std::string\
  \ string) {\n"
tests: "}\nint main() {\n    auto candidate = count_distinct_characters;\n    assert(candidate((\"\
  \")) == (0));\n    assert(candidate((\"abcde\")) == (5));\n    assert(candidate((\"\
  abcdecadeCADE\")) == (5));\n    assert(candidate((\"aaaaAAAAaaaa\")) == (1));\n\
  \    assert(candidate((\"Jerry jERRY JeRRRY\")) == (5));\n}\n"
completions: ["    long count = 0;\n    for (int i = 0; i < string.length(); i++)\
    \ {\n        if (string[i] >= 65 && string[i] <= 90) //65 is for 'A' in the ASCII\
    \ table\n            count++;\n        else if (string[i] >= 97 && string[i] <=\
    \ 122) //97 is for 'a' in the ASCII table\n            count++;\n    }\n    return\
    \ count;", "    long counter = 0;\n    for(long i = 0; i < string.length(); i++)\
    \ {\n        char c = string[i];\n        if(c == 'a' || c == 'b' || c == 'c'\
    \ || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c == 'i' || c\
    \ == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o' || c == 'p'\
    \ || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c == 'v' || c\
    \ == 'w' || c == 'x' || c == 'y' || c == 'z' || c == 'A' || c == 'B' || c == 'C'\
    \ || c == 'D' || c == 'E' || c == 'F' || c == 'G' || c == 'H' || c == 'I' || c\
    \ == 'J' || c == 'K' || c == 'L' || c == 'M' || c == 'N' || c == 'O' || c == 'P'\
    \ || c == 'Q' || c == 'R' || c == 'S' || c == 'T' || c == 'U' || c == 'V' || c\
    \ == 'W' || c == 'X' || c == 'Y' || c == 'Z') {\n            counter++;\n    \
    \    }\n    }\n    return counter;", "  long count = 0;\n  for (auto c : string)\
    \ count += (static_cast<unsigned long>(c) - 64);\n  return count;", "// Initialize\
    \ an array to store distinct characters\nlong distinct_characters = 0;\n// Create\
    \ a map of character in string, map will have unique characters\nstd::map<char,int>\
    \ map;\n// Iterate over every character in the string\nfor(const auto &character\
    \ : string) {\n    // If character is not in the map of character, then add character\
    \ to the map\n    if(!map.count(character)) {\n        ++distinct_characters;\n\
    \        map[character] = 1;\n    }", "    long count = 0;\n    long length =\
    \ string.length();\n    for(int i = 0; i < length; ++i) {\n        auto it = string.begin()\
    \ + i;\n        auto end = string.begin() + i + 1;\n        while(it != end) {\n\
    \            long c = static_cast<long>(*(it - 1));\n            if (c >= 'a'\
    \ && c <= 'z') {\n                count += 2;\n            } else if (c >= 'A'\
    \ && c <= 'Z') {\n                count += 2;\n            } else if (c >= '0'\
    \ && c <= '9') {\n                count += 1;\n            }\n            ++it;\n\
    \        }\n    }\n    return count;", "   long count = 0;\n   for (char c: string)\
    \ {\n      while ((c = toupper(c)) != c) count++;\n      while ((c = tolower(c))\
    \ != c) count++;\n   }\n   return count;", "    // Complete this function\n  \
    \  std::unordered_map<char, int> char_map;\n    for (char c : string) {\n    \
    \    char_map[c] = char_map.find(c) + 1;\n    }\n    long count = 0;\n    for\
    \ (auto it = char_map.begin(); it != char_map.end(); it++) {\n        count =\
    \ count + it->second;\n    }\n    return count;", "    return string.size()-__builtin_popcount(string.find_first_not_of('a')-string.find_first_not_of('z'));",
  "    long characters_count = 0;\n    for (auto character : string) {\n        int\
    \ current_char = (int)character;\n        characters_count += (current_char >\
    \ 64 && current_char < 91) || (current_char > 96 && current_char < 123) ? 1 :\
    \ 0;\n    }\n    return characters_count;", "  // Write your code here\n  long\
    \ cnt = 0;\n  for (int i = 0; i < string.size(); i++) {\n    for (int j = i +\
    \ 1; j < string.size(); j++) {\n      if (toupper(string[i]) == toupper(string[j]))\
    \ {\n        continue;\n      } else {\n        cnt++;\n      }\n    }\n  }\n\
    \  return cnt;", "    int count[26] = {0};\n    for(int i = 0; i < string.length();\
    \ i++) {\n        count[toupper(string[i]) - 'A']++;\n    }\n    int sum = 0;\n\
    \    for(int i = 0; i < 26; i++) {\n        sum += count[i];\n    }\n    return\
    \ sum;", "    long count = 0;\n    for (char c : string) {\n        bool c_lowercase\
    \ = c >= 'a' && c <= 'z';\n        bool c_uppercase = c >= 'A' && c <= 'Z';\n\
    \        bool c_digit = c >= '0' && c <= '9';\n        if (c_lowercase && c_uppercase\
    \ && c_digit) {\n            count++;\n        }\n    }\n    return count;", " \
    \ // Initialize result to zero\n  long result = 0;\n  // Iterate through the string\
    \ and update result whenever you see a character that is not the same as the previous\
    \ character\n  for (char ch : string) {\n    if (ch != string[result]) result++;\n\
    \  }\n  return result;", "    long count = 0;\n    for (auto &c : string) {\n\
    \        c = tolower(c);\n        if (string.find(c) != string.npos)\n       \
    \     ++count;\n    }\n    return count;", "    // your code here\n    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        string current\
    \ = string[i];\n        for (int j = i + 1; j < string.length(); j++) {\n    \
    \        if (string[i] == string[j])\n                continue;\n            else\n\
    \                count++;\n        }\n    }\n    return count;", "    // Step\
    \ 1: Convert all characters to lower case\n    string lower_case = string;\n \
    \   std::transform(lower_case.begin(), lower_case.end(), lower_case.begin(), ::tolower);\n\
    \n    // Step 2: Iterate through the string and increment count for each character\
    \ encountered\n    long count = 0;\n    for (char c : lower_case)\n        ++count;\n\
    \n    return count;", "    long count = 1;\n    // Loop through the string and\
    \ count how many times we see each distinct character\n    for(long i = 0; i <\
    \ string.length(); i++)\n    {\n        char chr = string.at(i);\n        // Case\
    \ insensitive\n        if(string::npos != string.find(tolower(chr), 0, string.length()))\n\
    \        {\n            // This character is lowercase\n            if(string::npos\
    \ != string.find(toupper(chr), 0, string.length()))\n            {\n         \
    \       // This character is uppercase\n                // Increment count by\
    \ one\n                count++;\n            }\n            // This character\
    \ is lowercase\n            else\n            {\n                // This character\
    \ is uppercase\n                // Increment count by one\n                count++;\n\
    \            }\n        }\n        // The character is lowercase\n        else\n\
    \        {\n            // Increment count by one\n            count++;\n    \
    \    }\n    }\n    return count;", "    long count = 1;\n    for (auto &c : string)\
    \ {\n        if (c == tolower(c)) {\n            count += 1;\n        } else if\
    \ (c == toupper(c)) {\n            count += 1;\n        } else {\n           \
    \ count += 0;\n        }\n    }\n    return count;", "  std::set<char> characters;\n\
    \  for (char &c : string) {\n    characters.insert(c);\n  }\n  return characters.size();",
  "    long count = 0;\n    for(char c: string) {\n        if (c == 'a' || c == 'b'\
    \ || c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c\
    \ == 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c\
    \ == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z') {\n            ++count;\n\
    \        }\n    }\n    return count;", "    long n = 0;\n    for (char &c: string)\n\
    \        if (static_cast<unsigned char>(c) < 128 && static_cast<unsigned char>(c)\
    \ >= 97 && static_cast<unsigned char>(c) <= 122)\n            ++n;\n    return\
    \ n;", "    // To calculate the number of distinct characters, we make a case\
    \ insensitive hash table and increment the hash value\n    // of every character\
    \ in the string and return the count.\n    long ans = 0;\n    std::unordered_map<char,\
    \ long> hash;\n    for (char ch : string) {\n        hash[static_cast<char>(tolower(ch))]\
    \ = ++hash[static_cast<char>(tolower(ch))];\n    }\n    for (char ch : string)\
    \ {\n        ans += hash[static_cast<char>(tolower(ch))];\n    }\n    return ans;",
  "    if (string.empty()) return 0;\n    // Convert to lower case\n    std::transform(string.begin(),\
    \ string.end(), string.begin(), ::tolower);\n    \n    long cnt = 0;\n    for\
    \ (char &c : string) {\n        if (std::tolower(c) == c) cnt++;\n    }\n    return\
    \ cnt;", "    long count=0;\n    for (int i=0; i<string.size(); i++) {\n     \
    \   char a=string[i];\n        for (int j=i+1; j<string.size(); j++) {\n     \
    \       char b=string[j];\n            if (a==b) continue;\n            if (toupper(a)==toupper(b))\
    \ continue;\n            count++;\n        }\n    }\n    return count;", "   \
    \ long count = 0;\n    for (char &c: string) ++count;\n    return count;", " \
    \   // Initialize an array to store counts for each distinct character from string\n\
    \    long char_count_arr[n];\n    for (long i = 0; i < n; i++) char_count_arr[i]\
    \ = 0;\n\n    // Iterate over string and increment the count for each distinct\
    \ character\n    for (long i = 0; i < string.length(); i++) {\n        char c\
    \ = string[i];\n        // Character already present in char_count\n        if\
    \ (char_count_arr[c -'a']++ != 0) break;\n    }\n\n    // Count is total distinct\
    \ characters across all strings\n    return char_count_arr[string.length() -1];",
  "    long count = 0;\n    string lowered = string;\n    transform(lowered.begin(),\
    \ lowered.end(), lowered.begin(), ::tolower);\n\n    for (auto &c: lowered) {\n\
    \        if (c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c ==\
    \ 'f' || c == 'g' || c == 'h' || c == 'i' || c == 'j' || c == 'k' || c == 'l'\
    \ || c == 'm' || c == 'n' || c == 'o' || c == 'p' || c == 'q' || c == 'r' || c\
    \ == 's' || c == 't' || c == 'u' || c == 'v' || c == 'w' || c == 'x' || c == 'y'\
    \ || c == 'z') {\n            count++;\n        }\n    }\n\n    return count;",
  "  long count=0;\n  int size = string.size();\n  for (int i=0; i < size; i++) {\n\
    \    char ch = string[i];\n    char lowerCaseCh = std::tolower(ch);\n    char\
    \ upperCaseCh = std::toupper(ch);\n    if (lowerCaseCh == upperCaseCh)\n     \
    \ count++;\n  }\n  return count;", "    long n_distinct = 0;\n    bool is_case_insensitive\
    \ = true;\n    for (int i = 0; i < string.length(); i++) {\n        char ch =\
    \ string[i];\n        if ((is_case_insensitive) && (islower(ch))) ch = ch - 'a'\
    \ + 'A';\n        if ((is_case_insensitive) && (isupper(ch))) ch = ch - 'A' +\
    \ 'a';\n        if (isdigit(ch)) {\n            ch = ch - '0';\n        } else\
    \ {\n            ch = ch - 'a' + 'A';\n        }\n        if (string[i] != ch)\
    \ {\n            n_distinct++;\n            is_case_insensitive = false;\n   \
    \     }\n    }\n    return n_distinct;", "    // TODO: use string hashing instead\
    \ of brute force search\n    // Brute force is O(n^2)\n    unordered_map<char,\
    \ unsigned> char_map;\n    for (auto c : string) {\n        char_map[c]++;\n \
    \   }\n    long result = 0;\n    for (auto i : char_map) {\n        result +=\
    \ i.second;\n    }\n    return result;", '  // Your code here', "    long count\
    \ = 0;\n    // Iterate over each character\n    for (int i = 0; i < string.length();\
    \ i++) {\n        // Check if the current character is in the map\n        if\
    \ (string[i] in unordered_map) {\n            // Increment the count of character\n\
    \            count++;\n        }\n        // Add the character to the map\n  \
    \      unordered_map[string[i]] = 1;\n    }\n    // Return the count of characters\n\
    \    return count;", "    long count = 0;\n    for (int i = 0; i < string.size();\
    \ i++) {\n        count += tolower(string[i]) - 'a' + 1;\n    }\n    return count;",
  "    // Write your code here\n    int count = 0;\n    for (char c : string)\n  \
    \  {\n        ++count;\n    }\n    return count;", "    long distinct_count =\
    \ 0;\n    for(auto c : string) {\n        distinct_count = std::max(distinct_count,\
    \ std::tolower(c) - 'a' + 1);\n    }\n    return distinct_count;", "\tlong count=0;\n\
    \tfor (char c : string) {\n\t\tcount++;\n\t\tcount=count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+count+",
  "    long count = 0;\n    for (char character : string) {\n        if (character\
    \ != ' ') {\n            count++;\n        }\n    }\n    return count;", "  //\
    \ write your code in C++17\n  unordered_set<char> set(string.begin(), string.end());\n\
    \  return set.size();", "  int i = 0;\n  for (char c : string) {\n    i = i +\
    \ c;\n  }\n  return i;", "    long ans = 0;\n    // count the number of distinct\
    \ characters in string\n    for (int i = 0; i < string.length(); i++) {\n    \
    \    // ignore case\n        if (string[i] >= 'A' && string[i] <= 'Z') {\n   \
    \         ans++;\n        }\n    }\n    return ans;", "    long unique_charcters\
    \ = 0;\n    for (auto itr = string.begin(); itr != string.end(); itr++) {\n  \
    \      if (string[itr] >= 'a' && string[itr] <= 'z')\n            unique_charcters\
    \ += 26; // add capital letter\n        else if (string[itr] >= 'A' && string[itr]\
    \ <= 'Z')\n            unique_charcters += 26; // add capital letter\n       \
    \ else if (string[itr] >= '0' && string[itr] <= '9')\n            unique_charcters\
    \ += 10; // add number 0-9\n        else\n            unique_charcters++; // add\
    \ all others\n    }\n    return unique_charcters;", "    long count=0;\n    for(auto\
    \ c:string) {\n        count++;\n    }\n    return count;", "    long ans = 0;\n\
    \    for (char ch : string)\n        if (ch == toupper(ch))\n            ans++;\n\
    \    return ans;", "    // code here\n    long count =0 ,max = 1;\n    for(long\
    \ i = 0; i<string.size();i++){\n        if(string[i] >= 'A' && string[i] <= 'Z'){\n\
    \            count++;\n        }\n        else if(string[i] >= 'a' && string[i]\
    \ <= 'z'){\n            count++;\n        }\n        else if(string[i] >= '0'\
    \ && string[i] <= '9'){\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto it = string.begin(); it != string.end(); ++it)\n\
    \        count += count_distinct_characters_helper(*it);\n    return count;",
  "    long ans = 1;\n    for (auto i : string) ans *= 2; // multiply by two for every\
    \ char\n    ans *= 2; // count the repeated chars too !\n    return ans;", " \
    \   long count = 0;\n    \n    for (int i = 0; i < string.length(); i++) {\n \
    \       if (string[i] >= 'a' && string[i] <= 'z') {\n            count += 1;\n\
    \        } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            count\
    \ += 1;\n        } else if (string[i] >= '0' && string[i] <= '9') {\n        \
    \    count += 1;\n        }\n    }\n    \n    return count;", "    long ans =\
    \ 0;\n    for (auto c : string)\n        ans += (tolower(c) - 'a' + 1);\n    return\
    \ ans;", "  long count = 0;\n  for (int i = 0; i < string.length(); i++) {\n \
    \   for (int j = 0; j < string.length(); j++) {\n      count += string[i] == string[j];\n\
    \    }\n  }\n  return count;", "    int ans = 0;\n    for (auto c: string) ++ans;\n\
    \    return ans;", "    long counter = 0;\n    for (char c: string) {\n      \
    \  c = tolower(c);\n        if (c == ' ' || c == '\\t' || c == '\\n')\n      \
    \      continue;\n        counter++;\n    }\n    return counter;", "    long distinct_char\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        int j = 0;\n\
    \        while (j < string.length() && i == j) j++;\n        distinct_char++;\n\
    \    }\n    return distinct_char;", "    long count = 0;\n    for (auto c: string)\
    \ {\n        if (tolower(c) == c)\n            count++;\n    }\n    return count;",
  "    long count = 0;\n    for (char ch : string) {\n        if (ch == '\\0') break;\n\
    \        \n        // If it is lower-case letter, then it's counted as a distinct\
    \ character\n        // If it is upper-case letter, then it's counted as a distinct\
    \ character\n        if (ch == tolower(ch))\n            count++;\n        else\n\
    \            count--;\n    }\n    \n    return count;", "    long count = 1;\n\
    \    for (long i = 0; i < string.size(); i++)\n    {\n        // if current character\
    \ is not the same as previous character, increase the counter\n        // if they\
    \ are the same, do nothing\n        if (string[i] != string[i - 1])\n        \
    \    count++;\n    }\n    return count;", "        long distinct_characters =\
    \ 0;\n        for (auto c : string)\n        {\n            if (std::tolower(c)\
    \ == std::tolower(string[string.length() - 1]))\n            {\n             \
    \   ++distinct_characters;\n            }\n        }\n        return distinct_characters;",
  "    // Write your code here\n    // Use counting sort or map to implement a hash\
    \ table to speed up the process\n    \n    long counts[26] = {0};\n    for (char\
    \ c : string) counts[c]++;\n    int max = 0;\n    for (int i = 0; i < 26; ++i)\n\
    \        max = std::max(max, counts[i]);\n    \n    // use a set to remove the\
    \ duplicates\n    set<int> s;\n    for (char c : string) s.insert(c);\n    return\
    \ s.size();", "    long ans=0;\n    for(int i=0; i<string.length(); i++) {\n \
    \       for(int j=i+1; j<string.length(); j++) {\n            if((string[i]==string[j])&&(i!=j))\n\
    \                ans++;\n        }\n    }\n    return ans;", "   long long num_distinct_characters\
    \ = 0;\n   long long ascii_val_array[60];\n   for(long i = 0; i < string.length();\
    \ i++) {\n      int ascii_val = string[i];\n      assert(ascii_val >= 0);\n  \
    \    ascii_val_array[ascii_val]++;\n   }\n\n   for(long i = 0; i < 60; i++) {\n\
    \      if(ascii_val_array[i] != 0)\n         num_distinct_characters += ascii_val_array[i];\n\
    \   }\n   return num_distinct_characters;", "    long count = 0; // To keep track\
    \ of how many distinct characters there are in the input string\n    for(auto\
    \ &c: string) {\n        count += toupper(c) - 'A' + 1; // Count how many distinct\
    \ characters the input string consists of\n    }\n    return count;", "    int\
    \ n = string.length();\n    int character[26]; // The alphabet. \n    for(int\
    \ i = 0; i < 26; i++)\n        character[i] = 0; // Initialize all characters\
    \ to 0.\n    for(int i = 0; i < n; i++) {\n        int c = string[i]; // Get the\
    \ ith character of the string.\n        if( c >= 'A' && c <= 'Z') {\n        \
    \    c -= 'A'; // Subtract the alphabet value from the current character.\n  \
    \      }\n        if( c >= 'a' && c <= 'z') {\n            c -= 'a';\n       \
    \ }\n        if( c >= '0' && c <= '9') {\n            c -= '0';\n        }\n \
    \       character[c]++; // Add this character to the character array.\n    }\n\
    \    long ans = 0;\n    for(int i = 0; i < 26; i++) {\n        ans += character[i];\n\
    \    }\n    return ans;", "    long cnt = 0;\n    for(char c:string) {\n     \
    \   cnt += std::tolower(c) - 'a';\n    }\n    return cnt;", "    long distinctCharacters\
    \ = 0;\n    for (long i = 0; i < string.length(); i++) {\n        std::transform(string.begin()\
    \ + i, string.begin() + i + 1, std::back_inserter(distinctCharacters), ::tolower);\n\
    \        std::transform(string.begin() + i, string.begin() + i + 1, std::back_inserter(distinctCharacters),\
    \ ::toupper);\n    }\n    return distinctCharacters;", "   long count = 0;\n \
    \  for (int i = 0; i < string.length(); i++) {\n      for (int j = 0; j < i; j++)\
    \ {\n         if (string[i] == string[j])\n            count++;\n      }\n   }\n\
    \   return count;", "    long ans = 0;\n    int flag = 0;\n    for (int i = 0;\
    \ i < string.length(); i++) {\n        // Check for upper and lower case\n   \
    \     if ((string[i] >= 'a' && string[i] <= 'z') || (string[i] >= 'A' && string[i]\
    \ <= 'Z')) {\n            // No change in case\n            ans += 1;\n      \
    \      continue;\n        }\n        // Check for special character\n        if\
    \ (string[i] == '$' || string[i] == '!' || string[i] == '.' || string[i] == '?'\
    \ || string[i] == '_' || string[i] == '&' || string[i] == '/' || string[i] ==\
    \ '<' || string[i] == '>' || string[i] == '{'\n                || string[i] ==\
    \ '}' || string[i] == '[' || string[i] == ']' || string[i] == ':' || string[i]\
    \ == '\\\\' || string[i] == '@' || string[i] == '^' || string[i] == '~' || string[i]\
    \ == '`' || string[i] == '|') {\n            flag = 1;\n            continue;\n\
    \        }\n        // Check upper case\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z') {\n            // No change in case\n            ans += 1;\n       \
    \     continue;\n        }\n        // Check lower case\n        if (string[i]\
    \ >= 'A' && string[i] <= 'Z') {\n            ans += 1;\n            continue;\n\
    \        }\n        // If all checks are done, then increment the count\n    \
    \    if (flag == 1) {\n            ans += 1;\n            continue;\n        }\n\
    \    }\n    return ans;", "    long count=0;\n    for (char c : string)\n    {\n\
    \        ++count;\n        count += tolower(c) - toupper(c);\n    }\n    return\
    \ count;", "    if(string.size()==0) return 0;\n    int count = 0;\n    for(auto\
    \ i = string.begin(); i!=string.end(); ++i) {\n        auto temp = i;\n      \
    \  while(temp!=string.end() && isupper(*temp)) {\n            temp++;\n      \
    \  }\n        if(temp!=string.end()) {\n            temp++;\n        }\n     \
    \   if(temp!=string.end() && islower(*temp)) {\n            temp++;\n        }\n\
    \        if(temp!=string.end()) {\n            temp++;\n        }\n        ++count;\n\
    \    }\n    return count;", "  long cnt=0;\n  for(long i=0;i<string.length();i++)\
    \ {\n    char ch=string[i];\n    cnt+=std::count_if(string.begin(), string.end(),\
    \ [&ch](char c) {\n      char cc=tolower(c);\n      return c!=cc && ch!=cc;\n\
    \    });\n  }\n  return cnt;", "\tstd::string lower_string = string.to_lower();\n\
    \tint num_distinct_characters = 0;\n\tfor (int i = 0; i != lower_string.size();\
    \ i++) {\n\t\tnum_distinct_characters += 1;\n\t}\n\treturn num_distinct_characters;",
  "    long ans = 0;\n    for(auto &c: string) {\n        ans ^= std::tolower(c);\
    \ //XOR\n        ans ^= std::toupper(c); //XOR\n    }\n    return ans;", "   \
    \ int count = 0;\n    int i;\n    for(i = 0; string[i] != '\\0'; i++) {\n    \
    \    if(isalpha(string[i]))\n            count++;\n    }\n    return count;",
  "    long count = 0;\n    for(char c:string){\n        int chr = tolower(c);\n \
    \       if(chr != c) count++;\n    }\n    return count;", "    long count = 0,\
    \ i = 0;\n    while (i < string.length()) {\n        if (string[i] != string[i+1])\
    \ {\n            count++;\n        }\n        i++;\n    }\n    return count;",
  "    int num_distinct = 0;\n    for (char ch : string)\n        ++num_distinct;\n\
    \    return num_distinct;", "    std::unordered_set<char> chars;\n    for (char\
    \ ch : string) {\n        chars.insert(ch);\n    }\n    return chars.size();",
  "    int counter = 0;\n    for (auto letter : string) {\n        counter += tolower(letter)\
    \ - 'a';\n    }\n    return counter;", "        long ans = 0;\n        for (char\
    \ ch : string) {\n                ans += 1;\n        }\n        return ans;",
  "    long count = 0;\n    long j = 0;\n    for (long i = 0; i < string.size(); i++)\
    \ {\n        if (j == string.size()) break;\n        if (string[i] >= 'a' && string[i]\
    \ <= 'z') j++;\n        if (string[i] >= 'A' && string[i] <= 'Z') j++;\n     \
    \   if (string[i] >= '0' && string[i] <= '9') j++;\n        if (i == string.length()\
    \ - 1 && j == string.size()) count++;\n    }\n    return count;", "\tlong count=0,\
    \ i=0;\n\twhile(i < string.length()) {\n\t\tif(string[i] >= 'a' && string[i] <=\
    \ 'z') count++;\n\t\telse if(string[i] >= 'A' && string[i] <= 'Z') count++;\n\t\
    \telse if(string[i] >= '0' && string[i] <= '9') count++;\n\t\telse if(string[i]\
    \ == '_') count++;\n\t\telse break;\n\t\ti++;\n\t}\n\treturn count;", "    if\
    \ (string.empty()) return 0;\n    long sum = 0;\n    for (char c : string) {\n\
    \        sum += (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') ? 1 : 0;\n  \
    \  }\n    return sum;", "    long number_of_distinct_characters = 0;\n    for\
    \ (auto it : string) {\n        number_of_distinct_characters += (it == std::string::npos)\
    \ ? 1 : 0;\n    }\n    return number_of_distinct_characters;", "    long count\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        char character\
    \ = string[i];\n        char lowercase = character >= 'a' && character <= 'z'\
    \ ? (character - 'a' + 'a') : character;\n        char uppercase = character >=\
    \ 'A' && character <= 'Z' ? (character - 'A' + 'A') : character;\n        char\
    \ digit = character >= '0' && character <= '9' ? (character - '0' + '0') : character;\n\
    \        count += (lowercase + uppercase + digit);\n    }\n    return count;",
  "    long result = 0;\n    for (char c : string) {\n        result++;\n    }\n \
    \   return result;", "    long sum = 0;\n    for (int i = 0; i < string.length();\
    \ ++i) {\n        long count[26] = {0};\n        for (int j = 0; j < 26; ++j)\
    \ {\n            if (string[i] == (char)j) ++count[j];\n        }\n        long\
    \ min = 1;\n        for (long j = 0; j < 26; ++j) {\n            if (count[j]\
    \ < min) min = count[j];\n        }\n        for (long j = 0; j < min; ++j) {\n\
    \            ++sum;\n        }\n        for (long j = 0; j < min; ++j) {\n   \
    \         sum -= (j >= 26);\n        }\n    }\n    return sum;", "    // your\
    \ code goes here\n    int n = string.size();\n    int counter[n];\n    for (int\
    \ i = 0; i < n; i++) {\n        counter[string[i] - 'A']++;\n    }\n    for (int\
    \ i = 0; i < n; i++) {\n        if (counter[i] > 1) {\n            counter[i]\
    \ = 1;\n        }\n    }\n    long result = 0, k = 0;\n    for (k = 0, i = 0;\
    \ i < n; i++) {\n        if (counter[string[i] - 'A'] > 1) {\n            counter[string[i]\
    \ - 'A']--;\n            counter[i] += 1;\n            if (counter[i] > 1) {\n\
    \                counter[i] = 1;\n            }\n        } else {\n          \
    \  if (k >= n) {\n                counter[k] = 0;\n            }\n           \
    \ k++;\n            counter[i] = 1;\n        }\n        result = result + counter[i];\n\
    \    }\n    return result;", "    int char_arr[10] = {0};\n    for (char &i :\
    \ string) {\n        int index = tolower(i) - 'a';\n        if(char_arr[index]\
    \ == 0)\n            char_arr[index] = 1;\n        else\n            char_arr[index]\
    \ += 1;\n    }\n    long ans = 0;\n    for (int i = 1; i <= 9; i++) {\n      \
    \  if (char_arr[i] > 0) ans += char_arr[i];\n    }\n    return ans;", "    int\
    \ count[26];\n    int size = string.size();\n    \n    for(int i = 0; i < 26;\
    \ i++)\n        count[i] = 0;\n    \n    for(int i = 0; i < size; i++)\n     \
    \   count[string[i] - 'a']++;\n    \n    long result = 0;\n    \n    for(int i\
    \ = 0; i < 26; i++)\n        result += count[i];\n    \n    return result;", " \
    \   if(string.size()==0)\n        return 0;\n    int size = string.length();\n\
    \    std::string lowercase_string;\n    std::string uppercase_string;\n    for(int\
    \ i=0;i<size;i++) {\n        if(string[i]>=65&&string[i]<=90) {\n            uppercase_string\
    \ = uppercase_string + string[i];\n        } else {\n            lowercase_string\
    \ = lowercase_string + string[i];\n        }\n    }\n    long distinct_characters\
    \ = 0;\n    for(int i=0;i<lowercase_string.length();i++) {\n        if(uppercase_string.find(lowercase_string[i])!=std::string::npos)\n\
    \            distinct_characters++;\n    }\n    return distinct_characters;",
  "    if (string == \"\") return 0;\n    long ans = 0;\n    for (char &c: string)\
    \ {\n        if (c >= 'A' && c <= 'Z') ans += 26 - c - 'A';\n        else if (c\
    \ >= 'a' && c <= 'z') ans += 26 - c - 'a';\n        else ans++;\n    }\n    return\
    \ ans;", "    long count = 0;\n    for (auto &character : string) {\n        if\
    \ (character >= 'A' && character <= 'Z') {\n            count += (character -\
    \ 'A');\n        } else if (character >= 'a' && character <= 'z') {\n        \
    \    count += (character - 'a');\n        } else if (character >= '0' && character\
    \ <= '9') {\n            count += (character - '0');\n        }\n    }\n    return\
    \ count;", "    long answer = 0;\n    for (char character : string) {\n      \
    \  answer = answer + count_distinct_characters_helper(character);\n    }\n   \
    \ return answer;", "    // Declare and initialize a variable\n    int numDistinct\
    \ = 0;\n    // Find the frequency of characters in string\n    for (char c: string)\
    \ {\n        numDistinct++;\n        // If no duplicates are found for character\
    \ c, increment the frequency by 1\n        if (c == string[numDistinct-1])\n \
    \           numDistinct++;\n    }\n    // Return the value\n    return numDistinct;",
  "    long ans = 0;\n    for(char c: string) {\n        ans += (c >= 'A' && c <=\
    \ 'Z') + (c >= 'a' && c <= 'z');\n    }\n    return ans;", "    long num_distinct\
    \ = 0;\n    char ch;\n    for (auto ch : string) {\n        ch = tolower(ch);\n\
    \        if (!isalpha(ch))\n            continue;\n        ch = toupper(ch);\n\
    \        if (!isalpha(ch))\n            continue;\n        ch = ch[0];\n     \
    \   num_distinct++;\n    }\n    return num_distinct;", "    // write your code\
    \ here\n    std::unordered_set<char> char_table;\n    std::unordered_map<char,\
    \ int> char_map;\n    for (char &c : string) {\n        c = tolower(c);\n    \
    \    if (char_map.find(c) == char_map.end()) {\n            char_map[c] = 0;\n\
    \            char_table[c] = char_map.size();\n        }\n        char_map[c]\
    \ = char_map[c] + 1;\n    }\n    return char_table.size();", "    long count =\
    \ 0;\n    int len = string.length();\n    for (int i = 0; i < len; i++) {\n  \
    \      int k = tolower(string[i]) - 'a';\n        if (k >= 0 && k < 26)\n    \
    \        count++;\n    }\n    return count;", "  int count_char = 0;\n  for (int\
    \ i = 0; i < string.length(); i++) {\n    count_char += string[i] == 'a' ? 26\
    \ : string[i] == 'b' ? 25 : string[i] == 'c' ? 24 : string[i] == 'd' ? 23 : \n\
    \      22 : string[i] == 'e' ? 21 : string[i] == 'f' ? 20 : string[i] == 'g' ?\
    \ 19 : \n      18 : string[i] == 'h' ? 17 : string[i] == 'i' ? 16 : string[i]\
    \ == 'j' ? 15 : \n      14 : string[i] == 'k' ? 13 : string[i] == 'l' ? 12 : string[i]\
    \ == 'm' ? 11 : \n      10 : string[i] == 'n' ? 9 : 8 : string[i] == 'o' ? 7 :\
    \ 6 : string[i] == 'p' ? 5 : \n      4 : 3 : 2 : 1 : 0; // Add up each character's\
    \ number of occurrences and multiply it by the total number of characters\n  }\n\
    \  long result = count_char * string.length();\n  return result;", "   long distinct_characters\
    \ = 0;\n   int i;\n   for (i = 0; i < string.length(); i++) {\n      if (string[i]\
    \ >= 65 && string[i] <= 90) {\n         distinct_characters++;\n      }\n    \
    \  if (string[i] >= 97 && string[i] <= 122) {\n         distinct_characters++;\n\
    \      }\n   }\n   return distinct_characters;", "    int count[26] = {0};\n \
    \   for (auto &c: string) {\n        count[static_cast<unsigned char>(c)] += 1;\n\
    \    }\n    int counter = 0;\n    for (int i = 'a'; i <= 'z'; i++) {\n       \
    \ if (count[i] > 0) {\n            counter += count[i];\n        }\n    }\n  \
    \  return counter;", "    long ans = 0;\n    for(auto c: string)\n        if(std::isalpha(c))\n\
    \            ans++;\n    return ans;", "    long result = 1;\n    for (auto &c\
    \ : string) {\n        c = tolower(c);\n        if (tolower(c) != c) ++result;\n\
    \    }\n    return result;", "    long count = 0;\n    long len = string.length();\n\
    \    for (long i = 0; i < len; i++) {\n        char c = string[i];\n        //\
    \ check whether it already appeared in previous iteration\n        long prev =\
    \ count;\n        long next = std::tolower(c) - 'a';\n        next = next * 26\
    \ + std::toupper(c) - 'A';\n        count += next - prev;\n    }\n    return count;",
  "    long ans = 0;\n    unordered_map<char, long> char_distr;\n    for (auto c:\
    \ string)\n        char_distr[c]++;\n    for (auto c: char_distr)\n        ans\
    \ += char_distr[c];\n    return ans;", "    long ans = 0;\n    for (auto c: string)\n\
    \        if (tolower(c) != tolower(string[0]))\n            ans++;\n    return\
    \ ans;", "    // Your code here\n    long long ans = 0;\n    unordered_set<char>\
    \ s;\n    for (auto c : string) {\n        s[tolower(c)];\n        s[toupper(c)];\n\
    \    }\n    for (auto i : s) {\n        ans++;\n    }\n    return ans;", "   \
    \ long count = 0;\n    for (size_t i = 0; i < string.size(); i++) {\n        //\
    \ ignore case\n        if (string[i] >= 'a' && string[i] <= 'z') {\n         \
    \   count += string.size() - i - 1;\n        }\n    }\n    return count;", " \
    \ long ans = 0;\n  for (int i = 0; i < string.size(); i++) {\n    ans += (tolower(string[i])\
    \ - 'a');\n  }\n  return ans;", "    long n = 0;\n    for (auto c : string)\n\
    \        if (std::toupper(c) == c)\n            n++;\n    return n;", "  long\
    \ count = 0;\n  // Iterate through all characters, keep track of which letters\
    \ are seen and which characters are not\n  for (auto character : string) {\n \
    \   char letter = character;\n    if (string.length() > 0) {\n      letter = string.at(0);\n\
    \    }\n    if (letter >= 'A' && letter <= 'Z') {\n      count++;\n    } else\
    \ if (letter >= 'a' && letter <= 'z') {\n      count++;\n    } else {\n      count--;\n\
    \    }\n  }\n  // Return count\n  return count;", "    std::unordered_map<char,\
    \ int> charCount;\n    charCount.reserve(string.size());\n    for (char c : string)\n\
    \        charCount[c] += 1;\n    return charCount.size();", "    long ans = 0;\n\
    \    for (auto c : string) {\n        auto it = std::tolower(c);\n        if (std::toupper(c)\
    \ == c) {\n            it = toupper(c);\n        }\n        if (std::tolower(c)\
    \ == c) {\n            it = tolower(c);\n        }\n        ans++;\n    }\n  \
    \  return ans;", "    // initialize counter\n    long count = 0;\n    // Use a\
    \ map to count distinct characters and convert it into a long integer\n    unordered_map<char,\
    \ long> umap;\n    for (char c : string) {\n        umap[c] = umap[c] + 1;\n \
    \   }\n    // Iterate through the map and add it to count\n    for (auto it =\
    \ umap.begin(); it != umap.end(); ++it) {\n        count += it->second;\n    }\n\
    \    return count;", "    // your code\n    return unique_char.size(); // return\
    \ the number of distinct characters present in the string", "    // Initialize\
    \ count with zero \n    int count = 0;\n    // Loop through the string and count\
    \ the number of occurrences of each distinct character\n    for (char c : string)\n\
    \    {\n        // Count the character if it is present in string \n        if\
    \ (string.find(c) != std::string::npos)\n        {\n            count++;\n   \
    \     }\n    }\n    return count;", "    if (string.length() <= 1)\n        return\
    \ 0;\n    long result = 1;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        for (int j = i + 1; j < string.length(); j++) {\n            if (string[i]\
    \ == string[j])\n                result++;\n        }\n    }\n    return result;",
  "  long distinct_characters = 0;\n  for (char c : string) {\n    distinct_characters\
    \ ^= (c | 32);\n  }\n  return distinct_characters;", "  unordered_set<char> chars_set;\n\
    \  for (char c: string) {\n    chars_set.insert(c);\n  }\n  return chars_set.size();",
  "    if (string.empty()) {\n        return 0;\n    }\n\n    // Find the count of\
    \ distinct characters in original string\n    long count = 0, distinctCount =\
    \ 0;\n    for (auto c: string) {\n        if (std::toupper(c) == c) {\n      \
    \      distinctCount++;\n        } else {\n            distinctCount = 0;\n  \
    \          break;\n        }\n        count++;\n    }\n    return count;", " \
    \   long numOfDistinctChar = 0;\n    std::string lowercaseString = string;\n \
    \   std::transform(lowercaseString.begin(), lowercaseString.end(), lowercaseString.begin(),\
    \ ::tolower);\n    std::unordered_map<char, int> map;\n    for (char &c : lowercaseString)\
    \ {\n        c = tolower(c);\n        if (!map.count(c)) {\n            map[c]\
    \ = 1;\n        } else {\n            map[c] += 1;\n        }\n    }\n    for\
    \ (auto &it : map) {\n        numOfDistinctChar += it.second;\n    }\n    return\
    \ numOfDistinctChar;", "    long number_of_distinct_characters = 0;\n    for (long\
    \ i = 0; i < string.length(); i++)\n    {\n        if (string[i] >= 'A' && string[i]\
    \ <= 'Z' || string[i] >= 'a' && string[i] <= 'z')\n        {\n            number_of_distinct_characters++;\n\
    \        }\n    }\n    return number_of_distinct_characters;", "    int len =\
    \ string.length();\n    long count = 0;\n    for(int i = 0; i < len; i++)\n  \
    \  {\n        for(int j = i; j < len; j++)\n        {\n            if(string[i]\
    \ == string[j])\n                count++;\n        }\n    }\n    return count;",
  "    long count = 1;\n    for (auto &char : string) {\n        char = tolower(char);\n\
    \        if (char == ' ') count++;\n    }\n    return count;", "    long n = 0;\n\
    \    for (auto it = string.begin(); it != string.end(); ++it) {\n        std::tolower(*it);\n\
    \    }\n    return std::count_if(string.begin(), string.end(), [&](auto chr) {\n\
    \        return std::tolower(chr) != 'a';\n    });", "    long total_distinct\
    \ =0;\n    for (int i = 0; i < string.length(); i++) {\n        total_distinct\
    \ += string[i] == 'A' || string[i] == 'a' ?1:0;\n    }\n    return total_distinct;",
  "  long ans = 0;\n  for (int i = 0; i < string.length(); i++) {\n    ans += tolower(string[i])\
    \ - 'a'; // Convert to lower case\n  }\n  return ans;", "    if(string.length()==0)\
    \ return 0;\n    long counter = 0;\n    for(char c: string) {\n        counter++;\n\
    \        if(tolower(c) == tolower(string[0]))\n            counter--;\n    }\n\
    \    return counter;", "    // Allocating a character array\n    char* characters\
    \ = new char[string.size()];\n    // Copying characters into the character array\n\
    \    for (int i = 0; i < string.size(); i++) {\n        characters[i] = string[i];\n\
    \    }\n    // Iterating through the character array\n    for (int i = 0; i <\
    \ string.size(); i++) {\n        // Checking if character is equal to the next\
    \ character\n        for (int j = i + 1; j < string.size(); j++) {\n         \
    \   if (characters[i] == characters[j]) {\n                break;\n          \
    \  }\n        }\n        // If character is equal to the next character, the character\
    \ is not repeated\n        if (j == string.size()) {\n            delete [] characters;\n\
    \            return i + 1;\n        }\n    }\n    delete [] characters;\n    //\
    \ Character is repeated twice\n    return string.size();", "    long count=0;\n\
    \    for (long i=0; i<string.length(); i++) {\n        if (string[i]==string[i][0])\
    \ {\n            count++;\n        }\n    }\n    return count;", "    if (string\
    \ == \"\") return 0;\n    long count = 0;\n    for (auto &i : string) {\n    \
    \    if (i == 'a' || i == 'A') count += 1;\n        else if (i == 'b' || i ==\
    \ 'B') count += 1;\n        else if (i == 'c' || i == 'C') count += 1;\n     \
    \   else if (i == 'd' || i == 'D') count += 1;\n        else if (i == 'e' || i\
    \ == 'E') count += 1;\n        else if (i == 'f' || i == 'F') count += 1;\n  \
    \      else if (i == 'g' || i == 'G') count += 1;\n        else if (i == 'h' ||\
    \ i == 'H') count += 1;\n        else if (i == 'i' || i == 'I') count += 1;\n\
    \        else if (i == 'j' || i == 'J') count += 1;\n        else if (i == 'k'\
    \ || i == 'K') count += 1;\n        else if (i == 'l' || i == 'L') count += 1;\n\
    \        else if (i == 'm' || i == 'M') count += 1;\n        else if (i == 'n'\
    \ || i == 'N') count += 1;\n        else if (i == 'o' || i == 'O') count += 1;\n\
    \        else if (i == 'p' || i == 'P') count += 1;\n        else if (i == 'q'\
    \ || i == 'Q') count += 1;\n        else if (i == 'r' || i == 'R') count += 1;\n\
    \        else if (i == 's' || i == 'S') count += 1;\n        else if (i == 't'\
    \ || i == 'T') count += 1;\n        else if (i == 'u' || i == 'U') count += 1;\n\
    \        else if (i == 'v' || i == 'V') count += 1;\n        else if (i == 'w'\
    \ || i == 'W') count += 1;\n        else if (i == 'x' || i == 'X') count += 1;\n\
    \        else if (i == 'y' || i == 'Y') count += 1;\n        else if (i == 'z'\
    \ || i == 'Z') count += 1;\n    }\n    return count;", "    // write your code\
    \ here\n    long result = 0;\n    long size = string.length();\n    \n    for(long\
    \ i = 0; i < size; i++) {\n        if(!string.compare(i + 1, size, string[i]))\
    \ {\n            result++;\n        }\n    }\n    \n    return result;", "   \
    \ long distinct=0, size = string.size();\n    long length = tolower(string.length())-1;\n\
    \    for(long i=0;i<size;i++){\n        if(string[i]!=string[i+1])\n        distinct++;\n\
    \    }\n    return distinct;", "    long count = 0;\n    for (char c : string)\
    \ \n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) \n         \
    \   ++count;\n    return count;", // Your code goes here, "    long num_distinct\
    \ = 0;\n    int i = 0;\n    while (i + 1 < string.length()) {\n        if (string[i]\
    \ != string[i + 1]) {\n            num_distinct++;\n        }\n        i++;\n\
    \    }\n    return num_distinct;", "    long long int ans = 0;\n    // Iterate\
    \ over every character and add it if it is not already present\n    for (char\
    \ c : string) {\n        if (!(string.count(c) > 0)) ans++;\n    }\n    return\
    \ ans;", "    long count = 0;\n    for (char c : string) {\n        if (string::npos\
    \ != (string.find(c))) ++count;\n    }\n    return count;", "    long count =\
    \ 0;\n    for (auto character : string) {\n        int index = tolower(character)\
    \ - 'a';\n        index = index < 0 ? index + 26 : index;\n        ++count;\n\
    \    }\n    return count;", "    long count = 0;\n    for (auto x : string) {\n\
    \        if (x != tolower(x)) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 1;\n    long start = 0;\n    long end = 0;\n\n  \
    \  for (int i = 0; i < string.size(); i++) {\n        end = string.find(string[i],\
    \ start);\n        if (end == string::npos) end = string.size();\n        count\
    \ += (end - start);\n        start = end;\n    }\n    return count;", "  long\
    \ char_counter = 0;\n  for (auto i : string) {\n    if (std::tolower(i) != i)\
    \ {\n      char_counter++;\n    }\n  }\n  return char_counter;", "    long count\
    \ = 0;\n    // Step 1: count the number of occurrences of each character\n   \
    \ for(char c: string)\n        count[tolower(c)] += 1;\n    for(char c: count)\n\
    \        count[toupper(c)] += 1;\n\n    // Step 2: subtract number of occurrences\
    \ of each character whose case has already been considered\n    for(char c: count)\n\
    \        if((int)tolower(c) - (int)toupper(c) > 1)\n            count[tolower(c)]\
    \ -= 1;\n    return count;", "   long count=0;\n   for (auto c:string) {\n   \
    \   if (!isalpha(c)) continue;\n      else count++;\n   }\n   return count;",
  "    long distinct_characters = 0;\n    for (auto &c : string) {\n        if (c.isalpha())\
    \ ++distinct_characters;\n    }\n    return distinct_characters;", "    long result\
    \ = 0;\n    for (char c : string) {\n        result += (c == 'a' || c == 'b' ||\
    \ c == 'c' || c == 'd' || c == 'e' || c == 'f' || c == 'g' || c == 'h' || c ==\
    \ 'i' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'o'\
    \ || c == 'p' || c == 'q' || c == 'r' || c == 's' || c == 't' || c == 'u' || c\
    \ == 'v' || c == 'w' || c == 'x' || c == 'y' || c == 'z');\n    }\n    return\
    \ result;", "    // Complete the code here\n    long ans = 0, i, len;\n    for\
    \ (len = string.length(); len > 0;) {\n        for (i = 0; i < len && string[i]\
    \ >= 'A' && string[i] <= 'Z'; i++) {\n        }\n        ans += i;\n        len--;\n\
    \    }\n    return ans;", "    long distinct_characters = 0;\n    for (auto character\
    \ : string) {\n        distinct_characters += tolower(character) - 'a';\n    }\n\
    \    return distinct_characters;", "  long number_of_characters = string.size();\n\
    \  long distinct_characters = 0;\n  for (long i = 0; i < number_of_characters;\
    \ ++i) {\n    for (long j = 0; j < number_of_characters; ++j) {\n      if (i !=\
    \ j && string[i] == string[j] && string[i] <= 'Z' && string[j] <= 'Z') {\n   \
    \     distinct_characters++;\n        break;\n      }\n    }\n  }\n  return distinct_characters;",
  "\t// Create a map for counting the number of unique characters in a given string.\n\
    \tstd::map<char, int> counts;\n\tfor (char c: string) counts[c]++;\n\t// Sum all\
    \ the values in the map.\n\tint total = 0;\n\tfor (std::map<char, int>::iterator\
    \ it = counts.begin(); it != counts.end(); it++) total += it->second;\n\t// Return\
    \ the total unique characters in the given string.\n\treturn total;", "    //\
    \ Initialize a counter\n    long counter = 0;\n    // Loop through the string,\
    \ character by character\n    for (char c : string)\n        // If c is not equal\
    \ to its lower case counterpart\n        if (c != tolower(c))\n            //\
    \ Increment the counter\n            counter++;\n    // Return the counter\n \
    \   return counter;", "    assert(string != \"\");\n    long count = 0;\n    for\
    \ (int i = 0; i < string.length(); i++) {\n        // Avoids confusion between\
    \ lower and upper case characters\n        if (islower(string[i]))\n         \
    \   count++;\n    }\n    return count;", "    long distinct_count = 0;\n    for\
    \ (long i = 0; i < string.length(); i++) {\n        distinct_count += std::tolower(string[i])\
    \ == string[i] ? 1 : 0;\n    }\n    return distinct_count;", "    long num_distinct_characters\
    \ = 0;\n    for (int i = 0; i < string.length(); i++) {\n        char ch = string[i];\n\
    \        if (std::tolower(ch) == ch) {\n            ch += 32;\n        }\n   \
    \     num_distinct_characters |= 1ll << ch;\n    }\n    return num_distinct_characters;",
  "    // Your code here\n    return 0;", "  // Declare two variable that stores the\
    \ number of distinct characters and the characters themselves\n  int number_of_distinct_characters\
    \ = 0;\n  long distinct_characters = 0;\n  for (int i = 0; i < string.length();\
    \ i++) {\n    // Check if the character is lowercase\n    if (string[i] >= 'a'\
    \ && string[i] <= 'z') {\n      number_of_distinct_characters++;\n      // Count\
    \ the character\n      distinct_characters++;\n    }\n  }\n  // Return the value\
    \ of the above\n  return distinct_characters;", "  long long ans = 0;\n  for (auto\
    \ it = string.begin(); it != string.end(); ++it) {\n    char c = *it;\n    if\
    \ (std::tolower(c) != c) ans++;\n  }\n  return ans;", "    long count = 0;\n \
    \   for (long i = 0; i < string.length(); ++i) {\n        char character = string[i];\n\
    \        // ignore case in character checking\n        if (character >= 'a' &&\
    \ character <= 'z' || character >= 'A' && character <= 'Z') {\n            count++;\n\
    \        }\n    }\n    return count;", "  // Initialize count with 0\n  long count{0};\n\
    \  // Go through every character in the string\n  for (const auto& character :\
    \ string) {\n    // Increment count by 1\n    count++;\n    // If character is\
    \ uppercase\n    if (character >= 'A' && character <= 'Z') {\n      // Decrement\
    \ count by 1\n      count--;\n    }\n  }\n  // Return the count\n  return count;",
  "    long n = 1;\n    for (auto i : string) {\n        n = n*26 + (int)i;\n    }\n\
    \    return n;", "    long count = 0;\n    int length = 0;\n    // Convert all\
    \ characters into lower case and get the length\n    for (char c : string)\n \
    \       c = tolower(c);\n    length = string.length();\n    // Iterate through\
    \ each character in string\n    for (int i = 0; i < length; i++) {\n        //\
    \ If this character is not same as its next character then add this character\
    \ into count\n        if ((string[i] - 'a') != (string[i + 1] - 'a')) {\n    \
    \        count++;\n        }\n    }\n    return count;", "    std::unordered_set<char>\
    \ chars; // This line creates a hash set of all characters\n    for (char c :\
    \ string) {\n        chars.insert(c); // This line inserts the character into\
    \ the hashset\n    }\n    return chars.size();", "    int unique_chars = 0;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' &&\
    \ string[i] <= 'z') {\n            unique_chars += string[i] - 'a' + 1;\n    \
    \    } else if (string[i] >= 'A' && string[i] <= 'Z') {\n            unique_chars\
    \ += string[i] - 'A' + 1;\n        } else {\n            unique_chars += string[i];\n\
    \        }\n    }\n    return unique_chars;", "    int size = string.size();\n\
    \    long distinct_characters = 0;\n    for (int i = 0; i < size; i++) {\n   \
    \     if (string[i] != string[size - 1]) {\n            distinct_characters++;\n\
    \        }\n    }\n    return distinct_characters;", "    long ans = 0;\n    for\
    \ (long i = 0; i < string.length(); i++) {\n        long pos = string[i];\n  \
    \      long count = 0;\n        for (long j = i; j < string.length(); j++) {\n\
    \            if (pos == string[j]) {\n                count++;\n            }\n\
    \        }\n        ans += count;\n    }\n    return ans;", "  // Create a character\
    \ map to count the characters\n  std::unordered_map<char, int> char_map;\n  for\
    \ (auto &i : string) {\n    char_map[i] = char_map.count(i) > 0 ? char_map[i]\
    \ + 1 : 1;\n  }\n\n  // Return the answer\n  return char_map.size();", "    //\
    \ your code goes here\n    int n = string.size();\n    unordered_map<char, int>\
    \ char_dist;\n    for (char i : string) {\n        if (char_dist.count(i))\n \
    \           char_dist[i]++;\n        else\n            char_dist[i] = 1;\n   \
    \ }\n    return char_dist.size();", "\tlong count = 0;\n\t\n\tfor(auto character\
    \ : string) {\n\t\tif(std::tolower(character) == character)\n\t\t\t++count;\n\t\
    }\n\t\n\treturn count;", "    int count[26];\n    for (int i = 0; i < 26; i++)\
    \ {\n        count[i] = 0;\n    }\n    for (int i = 0; i < string.size(); i++)\
    \ {\n        int letter = string[i];\n        count[letter] += 1;\n    }\n   \
    \ long ans = 0;\n    for (int i = 0; i < 26; i++) {\n        if (count[i] > 0)\
    \ {\n            ans += count[i];\n        }\n    }\n    return ans;", "  long\
    \ counter = 0; \n  for (long i = 0; i < string.size(); i++) {\n    bool is_lowercase\
    \ = (string[i] >= 'a' && string[i] <= 'z');\n    bool is_uppercase = (string[i]\
    \ >= 'A' && string[i] <= 'Z');\n    bool is_digit = (string[i] >= '0' && string[i]\
    \ <= '9');\n    if(!is_lowercase && !is_uppercase && !is_digit) {\n      counter++;\n\
    \    }\n  }\n  return counter;", "    long count = 0;\n    for (char &c : string)\
    \ {\n        ++count;\n    }\n    return count;", "    long ans = 0;\n    for\
    \ (char &c : string) {\n        if (::isupper(c))\n            ++ans;\n      \
    \  else if (::islower(c))\n            ++ans;\n        else \n            ++ans;\n\
    \    }\n    return ans;", "  // Step 1: Find out the number of unique characters\
    \ present in string\n  int chars[26] = {0};\n\n  // Step 2: Initialize an int\
    \ array counter to store the occurrence of each unique character in string\n \
    \ // For e.g, if string is \"abcde\", then chars[0] will be 1 and chars[1] will\
    \ be 2 and so on.\n  for (int i = 0; i < string.length(); i++) {\n    chars[string[i]\
    \ - 'a']++;\n  }\n\n  // Step 3: Count number of distinct characters in string\n\
    \  long cnt = 0;\n  for (int i = 0; i < 26; i++) {\n    cnt += chars[i];\n  }\n\
    \n  return cnt;", "    long counter = 0;\n    int size_of_string = string.size();\n\
    \    for (int i = 0; i < size_of_string; i++) {\n        std::map<int, int> m;\n\
    \        std::string str_2 = string[i];\n        int len = str_2.length();\n \
    \       for (int j = 0; j < len; j++) {\n            m[str_2[j]]++;\n        }\n\
    \        std::multimap<int, int>::iterator it = m.begin();\n        while (it\
    \ != m.end()) {\n            int char_count = it->second;\n            if (char_count\
    \ > 1) {\n                counter++;\n            }\n            it++;\n     \
    \   }\n    }\n    return counter;", "    long result = 0;\n    for (auto c : string)\n\
    \        result += tolower(c) == tolower(c) ? 1 : 0;\n    return result;", " \
    \   // Your code goes here\n    long ans = 0;\n    int len = string.length();\n\
    \    for (int i = 0; i < len; i++) {\n        long flag = 0;\n        for (int\
    \ j = 0; j < len; j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            if (string[i] == string[j]) {\n                flag++;\n\
    \            }\n        }\n        if (flag > 1) {\n            ans++;\n     \
    \   }\n    }\n    return ans;", "    // Your code here\n    long count_distinct_characters\
    \ = 0;\n    // Your code here\n    return count_distinct_characters;", "    long\
    \ ans = 0;\n    for (auto it=string.begin(); it!=string.end(); it++) {\n     \
    \   long count = 0;\n        for (auto it2=string.begin(); it2!=string.end();\
    \ it2++) {\n            if (*it2 == *it) count++;\n        }\n        if (count)\
    \ {\n            ans += count;\n        }\n    }\n    return ans;", "    long\
    \ cnt = 0;\n    for (char c : string) {\n        cnt += tolower(c) - 'a';\n  \
    \  }\n    return cnt;", "    int length = string.length();\n    int freq[256]\
    \ = {0};\n    for (int i = 0; i < length; i++)\n        freq[string[i]]++;\n\n\
    \    long count = 0;\n    for (int i = 0; i < 256; i++)\n        if (freq[i] >\
    \ 1)\n            count++;\n    return count;", "    if (string.empty()) {\n \
    \       return 0;\n    }\n    long count = 1;\n    for (char c: string) {\n  \
    \      count *= 2;\n        count++;\n    }\n    return count;", "    // Your\
    \ code goes here\n    long count = 0;\n    for(char c: string){\n        count\
    \ += 1;\n    }\n    return count;", "    long distinct = 0;\n    for (auto c:\
    \ string) {\n        if (c == c) distinct++;\n    }\n    return distinct;", " \
    \   long count = 0;\n    for (char c : string) {\n        count += (c >= 'a' &&\
    \ c <= 'z') ? (c - 'a') + 26 : (c >= 'A' && c <= 'Z') ? (c - 'A') + 26 : 0;\n\
    \    }\n    return count;", "  long count = 1;\n  for(auto &letter : string)\n\
    \    count *= 2; // O(1)\n\n  return count;", "    int len = string.length();\n\
    \    int count = 0;\n    for (int i = 0; i < len; i++) {\n        for (int j =\
    \ i + 1; j <= len; j++) {\n            char c = string[i];\n            char c_\
    \ = string[j];\n            // Check if the characters are same regardless of\
    \ case\n            if (tolower(c) == tolower(c_)) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;", "    long size = 0;\n  \
    \  \n    for (int i = 0; i < string.length(); ++i) {\n        int x = tolower(string[i]);\n\
    \        int y = tolower(string[(i + 1) % string.length()]);\n        if (x <\
    \ y) {\n            size++;\n        }\n    }\n\n    return size;", "    long\
    \ characters[26] = {0};\n    // Loop through all 26 alphabets and increment the\
    \ corresponding counter\n    for (long i = 0; i < 26; i++) {\n        long current_value\
    \ = string.at(i) - 'a';\n        if (characters[current_value] == 0) {\n     \
    \       characters[current_value] = 1;\n        } else {\n            characters[current_value]\
    \ = characters[current_value] + 1;\n        }\n    }\n    // Return the number\
    \ of distinct characters\n    return characters[26];", "    long count = 0;\n\
    \    for (auto c : string) ++count;\n    return count;", "    long count = 0;\n\
    \    for (int i = 0; i < string.size(); i++) {\n        if (string[i] >= 'a' &&\
    \ string[i] <= 'z') {\n            count += (26 - 'a' + 1);\n        } else if\
    \ (string[i] >= 'A' && string[i] <= 'Z') {\n            count += (26 - 'A' + 1);\n\
    \        } else {\n            count++;\n        }\n    }\n    return count;",
  "    long long int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n\
    \        int curChar = string[i];\n        long long int curCharCount = 1;\n \
    \       for (int j = i + 1; j < string.length(); j++) {\n            if (string[i]\
    \ == string[j]) {\n                curCharCount++;\n            }\n        }\n\
    \        count += curCharCount;\n    }\n    return count;", "    // Your code\
    \ goes here\n    long count = 0;\n    for (char c : string)\n        if (std::tolower(c)\
    \ == c) count++;\n    return count;", "    int size = string.size();\n    int\
    \ count[26];\n    for (int i = 0; i < size; i++)\n        count[static_cast<int>(string[i])]++;\n\
    \    for (int i = 0; i < 26; i++)\n        count[i] += count[static_cast<int>('A'\
    \ + i)];\n    int ans = 0;\n    for (int i = 0; i < 26; i++)\n        if (count[i])\n\
    \            ans += count[i];\n    return ans;", "    std::bitset<256> bs = std::bitset<256>(string);\n\
    \    return bs.size() - 1;", "    long cnt=0;\n    for (int i = 0; i < string.length();\
    \ i++) {\n        char c = string[i];\n        for (int j = 0; j < i; j++)\n \
    \           if (c != string[j]) {\n                if (c != string[i]) {\n   \
    \                 cnt += 1;\n                    break;\n                }\n \
    \           }\n    }\n    return cnt;", "    long n = 0;\n    long prev_lower\
    \ = 0;\n    long prev_upper = 0;\n    for (long i = 0; i < string.length(); i++)\
    \ {\n        char ch = string[i];\n        if (ch == 'a') {\n            prev_lower\
    \ = 1;\n        }\n        if (ch == 'A') {\n            prev_upper = 1;\n   \
    \     }\n        if (ch == 'a' || ch == 'A') {\n            if (prev_lower ==\
    \ 1) {\n                n++;\n            }\n            if (prev_upper == 1)\
    \ {\n                n++;\n            }\n            prev_lower = 0;\n      \
    \      prev_upper = 0;\n        } else {\n            n++;\n        }\n    }\n\
    \    return n;", "// Your code here\n\tlong count = 0;\n\tstd::sort(string.begin(),\
    \ string.end());\n\tfor (size_t i = 0; i < string.size(); i++) {\n\t\tif (string[i]\
    \ == string[i + 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    long\
    \ count = 0;\n    for (char c : string) {\n        count += (get<char>(c) - 'A')\
    \ + (get<char>(c) - 'a');\n    }\n    return count;", "    long count = 0;\n \
    \   for (char c : string)\n        if (!std::isalpha(c))\n            count +=\
    \ 1;\n    return count;", "    long long ans = 0;\n    for (char ch : string)\
    \ {\n        int code = tolower(ch);\n        ans += code - 'a' + 1;\n    }\n\
    \    return ans;", "    long count = 0;\n    for(int i = 0; i<string.length();\
    \ i++) {\n        for(int j = i+1; j<string.length(); j++) {\n            if(string[i]\
    \ == string[j])\n                count++;\n        }\n    }\n    return count;",
  "  int count_distinct = 0;\n  for (int i = 0; i < string.length(); ++i) {\n    if\
    \ (string[i] >= 'a' && string[i] <= 'z')\n      count_distinct += 1;\n  }\n  return\
    \ count_distinct;"]
stop_tokens:
- "\n}"
