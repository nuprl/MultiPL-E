name: HumanEval_152_compare
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember that\
  \ feeling when the result of some long-awaited\n// event is finally known. The feelings\
  \ and thoughts you have at that moment are\n// definitely worth noting down and\
  \ comparing.\n// Your task is to determine if a person correctly guessed the results\
  \ of a number of matches.\n// You are given two arrays of scores and guesses of\
  \ equal length, where each index shows a match. \n// Return an array of the same\
  \ length denoting how far off each guess was. If they have guessed correctly,\n\
  // the value is 0, and if not, the value is the absolute difference between the\
  \ guess and the score.\n// example:\nstd::vector<long> compare(std::vector<long>\
  \ game, std::vector<long> guess) {\n"
tests: "}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) == (std::vector<long>({(long)2,\
  \ (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n}\n"
completions: ["    // Your code here\n    // vector<int> results(guess.size());\n\
    \    // assert(game.size() == guess.size());\n    // assert(game.size() != 0);\n\
    \    std::vector<long> results(guess.size());\n    for(size_t i = 0; i < guess.size();\
    \ ++i) {\n        // Your code here\n        results[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return results;", "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result(game.size());\n    std::vector<long> diff(game.size());\n    long total\
    \ = 0;\n    // first let's see what we do\n    for (long i = 0; i < game.size();\
    \ i++) {\n        total = 0;\n        // now let's see if it is right\n      \
    \  for (long j = 0; j < game.size(); j++) {\n            if (j != i) {\n     \
    \           total += abs(game[i] - guess[j]);\n            }\n        }\n    \
    \    result[i] = total;\n        diff[i] = abs(game[i] - guess[i]);\n    }\n \
    \   // now we see if we are lucky enough\n    total = 0;\n    for (long i = 0;\
    \ i < game.size(); i++) {\n        total += abs(guess[i] - game[i]);\n    }\n\
    \    result[game.size()] = total;\n    diff[game.size()] = 0;\n    // now the\
    \ diff\n    for (long i = 0; i < game.size(); i++) {\n        diff[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    // now we sort the diff vector and get the biggest one\n\
    \    std::sort(diff.begin(), diff.end());\n    result[game.size()] = diff[game.size()];\n\
    \    return result;", "  std::vector<long> result(game.size());\n  for (int i\
    \ = 0; i < game.size(); i++)\n    if (game[i] == guess[i])\n      result[i] =\
    \ 0;\n    else\n      result[i] = abs(guess[i] - game[i]);\n  return result;",
  "    assert(game.size() == guess.size());\n    auto comp = game;\n    std::vector<long>\
    \ result(game.size());\n    for(long i = 0; i < game.size(); i++) {\n        result[i]\
    \ = std::abs(comp[i] - guess[i]);\n    }\n    return result;", "    int correct\
    \ = 0;\n    for (int i = 0; i < guess.size(); ++i) {\n        correct += std::abs(guess[i]\
    \ - game[i]);\n    }\n    return std::vector<long>(guess.size(),correct);", "\t\
    assert(game.size() == guess.size());\n\tstd::vector<long> result(game.size());\n\
    \tfor (long i = 0; i < game.size(); i++) {\n\t\tresult[i] = std::abs(game[i] -\
    \ guess[i]);\n\t}\n\treturn result;", "  std::vector<long> correctGuess;\n  std::vector<long>\
    \ guesses(game.size());\n  for (std::size_t i = 0; i < game.size(); ++i)\n   \
    \ guesses[i] = abs(guess[i] - game[i]);\n  std::sort(guesses.begin(), guesses.end());\n\
    \  guesses.resize(guesses.size() - 1);\n  long totalCorrect = 0;\n  for (std::size_t\
    \ i = 0; i < game.size(); ++i) {\n    long guess = guesses[i];\n    long correct\
    \ = 0;\n    for (std::size_t j = 0; j < game.size(); ++j) {\n      if (j == i)\
    \ {\n        continue;\n      }\n      if (guess == game[j]) {\n        correct\
    \ += 1;\n      }\n    }\n    if (correct) {\n      totalCorrect += 1;\n    }\n\
    \  }\n  correctGuess[0] = totalCorrect == 0 ? 0 : totalCorrect - 1;\n  for (std::size_t\
    \ i = 1; i < guesses.size(); ++i) {\n    correctGuess[i] = abs(guesses[i] - guesses[i\
    \ - 1]);\n  }\n  return correctGuess;", "    assert(game.size() == guess.size());\n\
    \    // Solution 1\n    std::vector<long> result(game.size());\n    long total\
    \ = 0;\n    for (size_t i = 0; i < game.size(); ++i) {\n        if (game[i] ==\
    \ guess[i]) {\n            result[i] = 0;\n            total += guess[i];\n  \
    \      }\n        else {\n            result[i] = abs(guess - game);\n       \
    \ }\n    }\n    return total;", "    std::vector<long> result;\n    // sort by\
    \ score\n    std::sort(game.begin(),game.end());\n    std::sort(guess.begin(),guess.end());\n\
    \n    for (int i = 0; i < guess.size(); ++i){\n        // find first element that\
    \ is different\n        while (i < game.size() && game[i] == guess[i])\n     \
    \       ++i;\n\n        result.push_back(i-game[i]); // how many items we missed\
    \ compared to correct answer\n    }\n\n    return result;", "    long a = 0;\n\
    \    long b = 0;\n    long result = 0;\n    for (long i = 0; i < game.size();\
    \ i++) {\n        a = (game[i] - guess[i]);\n        b = abs(a);\n        if ((game[i]\
    \ == guess[i]) || (game[i] > guess[i]))\n            result += b;\n    }\n   \
    \ return {result};", "    std::vector<long> result(game.size());\n    long long\
    \ diff = 0;\n    for (std::size_t i = 0; i != game.size(); ++i) {\n        //\
    \ This is where the magic happens. We calculate the absolute difference between\n\
    \        // the guess and the score, and compare it to the score if the guess\
    \ was correct.\n        result[i] = std::abs(guess[i] - game[i]);\n    }\n   \
    \ return result; // Return a vector of correct guesses in absolute differences\
    \ between the correct answers", "    assert(game.size() == guess.size());\n  \
    \  std::vector<long> result(game.size());\n    long difference = 0;\n    for (long\
    \ i = 0; i < game.size(); i++) {\n        difference = std::abs(game[i] - guess[i]);\n\
    \        result[i] = difference;\n    }\n    return result;", "  // code here\n\
    \  long total = 0;\n  for(int i = 0; i < guess.size(); ++i){\n    if(game[i] ==\
    \ guess[i]){\n      continue;\n    }\n    total += abs(game[i] - guess[i]);\n\
    \  }\n  std::vector<long> ans;\n  ans.push_back(total);\n  return ans;", "   \
    \ int results[100];\n    // TODO: Determine if the inputs are sorted\n    for(int\
    \ i = 0; i < 100; i++){\n        results[i] = game[i] - guess[i];\n    }\n   \
    \ int cnt = 0;\n    for (int i = 0; i < 100; ++i) {\n        if (results[i] ==\
    \ 0) {\n            continue;\n        }\n        for (int j = 0; j < 100; ++j)\
    \ {\n            if (results[j] == 0) {\n                continue;\n         \
    \   }\n            if (results[i] > results[j]) {\n                cnt += abs(results[i]\
    \ - results[j]);\n            } else {\n                cnt += abs(results[j]\
    \ - results[i]);\n            }\n        }\n    }\n    std::vector<long> result(100);\n\
    \    for (int i = 0; i < 100; ++i) {\n        result[i] = cnt;\n        cnt +=\
    \ abs(result[i]);\n    }\n    return result;", "    std::sort(game.begin(), game.end());\n\
    \    std::sort(guess.begin(), guess.end());\n    std::vector<long> result;\n \
    \   for (long i = 0; i < guess.size(); ++i) {\n        long diff = (game[i] -\
    \ guess[i]) < 0 ? game[i] - guess[i] : abs(game[i] - guess[i]);\n        result.push_back(diff);\n\
    \    }\n    return result;", "    //assert game.size() == guess.size(); // if\
    \ you need this line uncommented\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;", '    // Your code here', "  std::vector<long>\
    \ result(game.size());\n  for (std::size_t i = 0; i < guess.size(); ++i) {\n \
    \   // This makes sure that if the guessed value is greater than the actual score,\n\
    \    // the guess will be made a little bit higher\n    if (guess[i] > game[i])\n\
    \      result[i] = game[i] - guess[i];\n    else if (guess[i] < game[i])\n   \
    \   result[i] = guess[i] - game[i];\n    else {\n      // No need to worry about\
    \ division by zero here\n      // If there were division by zero in the above\
    \ conditions, it would've crashed\n      // anyway!\n      result[i] = 0;\n  \
    \  }\n  }\n  return result;", "    std::vector<long> scores(game.size());\n  \
    \  long best_score = 0;\n    long best_difference = 0;\n    for (size_t i = 0;\
    \ i < guess.size(); i++) {\n        scores[i] = abs(game[i] - guess[i]);\n   \
    \     if (scores[i] > best_score) {\n            best_score = scores[i];\n   \
    \         best_difference = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ { best_difference, best_score };", "  assert(game.size() == guess.size());\n\
    \  std::vector<long> result(game.size(), 0);\n  for (size_t i = 0; i < game.size();\
    \ i++) {\n    result[i] = abs(game[i] - guess[i]);\n  }\n  return result;", " \
    \   int n = game.size();\n    int m = guess.size();\n    std::vector<long> distance(n),\
    \ diff(n);\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m;\
    \ ++j) {\n            if (game[i] > game[j]) --diff[j];\n            else if (game[i]\
    \ < game[j]) ++diff[j];\n            else if (game[i] == game[j]) ++diff[j];\n\
    \            else --diff[j];\n        }\n    }\n    \n    for (int i = 0; i <\
    \ n; ++i) {\n        distance[i] = 0;\n        for (int j = 0; j < m; ++j) {\n\
    \            if (diff[j] == 0) distance[i]++;\n            else distance[i] +=\
    \ abs(diff[j]);\n        }\n    }\n\n    return distance;", "    // Complete this\
    \ function\n\n    std::vector<long> result;\n    int sum = 0;\n    for (int i\
    \ = 0; i < guess.size(); i++) {\n        if (guess[i] == game[i]) {\n        \
    \    sum += i;\n        }\n    }\n\n    for (int i = 0; i < guess.size(); i++)\
    \ {\n        int dif = abs(guess[i] - game[i]);\n        if (dif == sum) {\n \
    \           result.push_back(0);\n        } else {\n            result.push_back(dif);\n\
    \        }\n    }\n    return result;", "  // Your code goes here\n    long score\
    \ = 0;\n    for (int i = 0; i <guess.size(); i++)\n        if (guess[i] != game[i])\n\
    \            score += abs(guess[i] - game[i]);\n    std::vector<long> result(guess.size());\n\
    \    for (int i = 0; i <guess.size(); i++)\n        result[i] = abs(guess[i] -\
    \ game[i]);\n    return result;", "    std::vector<long> score(game.size(), 0);\n\
    \    // Iterate through the guesses\n    for(int i = 0; i < guess.size(); ++i)\
    \ {\n        // Iterate through the score\n        for(int j = 0; j < game.size();\
    \ ++j) {\n            // If this score is greater, the guess is too far, otherwise\
    \ it is correct.\n            // This assumes we only have one \"match\" between\
    \ the two arrays\n            // The match is denoted by the index j\n       \
    \     score[j] += game[j] >= guess[i] ? 1 : 0;\n        }\n    }\n    return score;",
  '    // code here', "    auto answer = std::vector<long>();\n    answer.reserve(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        auto curr = guess;\n\
    \        if (game[i] < game[i + 1]) {\n            curr[i] = game[i];\n      \
    \      curr[i + 1] = game[i + 1];\n        } else if (game[i] > game[i + 1]) {\n\
    \            curr[i + 1] = game[i];\n        }\n        answer.push_back(std::abs(curr[i]\
    \ - curr[i + 1]));\n    }\n    return answer;", '    // your code', "    // sort\
    \ them both so it is easier to compare\n    std::sort(game.begin(), game.end());\n\
    \    std::sort(guess.begin(), guess.end());\n\n    // if they have the same length,\
    \ then they are correct\n    if (game.size() == guess.size()) {\n        // set\
    \ all to 0\n        std::vector<long> correct;\n        // count how many guesses\
    \ there are\n        int guesses = 0;\n        for (int i = 0; i < game.size();\
    \ ++i) {\n            if (game[i] == guess[i]) {\n                guesses++;\n\
    \            }\n        }\n\n        // if they were all the same, then the result\
    \ is 0\n        if (guesses == game.size()) {\n            return correct;\n \
    \       }\n\n        // if the last guess was a correct guess, then subtract the\
    \ final result from the game result\n        if (game[game.size() - 1] == guess[guess.size()\
    \ - 1]) {\n            std::vector<long> correct_final = correct;\n          \
    \  correct_final.back() -= correct[correct.size() - 1];\n            return correct_final;\n\
    \        }\n\n        // else, return the difference between the guess and the\
    \ result\n        std::vector<long> diff_final;\n        for (int i = 0; i < game.size();\
    \ ++i) {\n            diff_final.push_back((guess[i] - game[i]) % 1000000);\n\
    \        }\n        return diff_final;\n    }\n\n    // otherwise, they aren't\
    \ correct, return the difference between the guess and the result\n    return\
    \ std::vector<long>(guess.begin(), guess.end());", "    std::vector<long> scores(game.size());\n\
    \    for (long i = 0; i < game.size(); i++) {\n        scores[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return scores;", "    int score[game.size()];\n   \
    \ for (int i = 0; i<game.size(); i++) {\n        game[i] >> score[i];\n    }\n\
    \    int guesses[guess.size()];\n    for (int i = 0; i<guess.size(); i++) {\n\
    \        guesses[i] >> guesses[i];\n    }\n    std::vector<long> result(guess.size());\n\
    \    for (int i = 0; i<guess.size(); i++) {\n        if (guesses[i] == game[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(game[i]\
    \ - guesses[i]);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ results;\n    for (size_t i = 0; i < guess.size(); i++)\n        if (game[i]\
    \ == guess[i])\n            results.push_back(0);\n        else\n            results.push_back(\
    \ abs(game[i] - guess[i]) );\n\n    return results;", "    if (game.size() !=\
    \ guess.size()) \n        throw std::runtime_error(\"Not enough scores to compare\"\
    );\n    // Initialize scores array that we will return to zeros.\n    std::vector<long>\
    \ result(game.size());\n    std::iota(result.begin(), result.end(), 0);\n    //\
    \ Our loop goes through every guess and compares it to our scores array.\n   \
    \ // If they match, the index will be placed in the result array at that index.\
    \ Otherwise it is the difference between the guess and the current score.\n  \
    \  for (size_t i = 0; i < guess.size(); ++i) {\n        if (game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return result;", "  assert(game.size() ==\
    \ guess.size());\n  std::vector<long> result(game.size(), 0);\n\n  for (size_t\
    \ i = 0; i < game.size(); ++i) {\n    if (game[i] == guess[i]) {\n      result[i]\
    \ = 0;\n    }\n    else {\n      result[i] = abs(game[i] - guess[i]);\n    }\n\
    \  }\n\n  return result;", "    // Your code here\n    long long maxDiff = std::abs(guess[0]-game[0]);\n\
    \    for (size_t i = 1; i < guess.size(); ++i) {\n        if (guess[i] < game[i])\
    \ {\n            maxDiff = std::max(maxDiff, std::abs(guess[i]-game[i]));\n  \
    \      } else if (guess[i] > game[i]) {\n            maxDiff = std::max(maxDiff,\
    \ std::abs(game[i]-guess[i]));\n        }\n    }\n    return std::vector<long>{maxDiff,\
    \ game[0]};", "    std::vector<long> result(game.size());\n    // Write your code\
    \ here\n    // Use two pointers (i and j) together to iterate over the array\n\
    \    // As a bonus, use the standard library function std::abs to calculate the\
    \ absolute value\n    for (size_t i = 0; i < game.size(); ++i) {\n        for\
    \ (size_t j = 0; j < guess.size(); ++j) {\n            result[i] += std::abs(game[i]\
    \ - guess[j]);\n        }\n    }\n    return result;", "  std::vector<long> result(game.size());\n\
    \  for (long i = 0; i < game.size(); ++i)\n    result[i] = abs(guess[i] - game[i]);\n\
    \  return result;", "  int n = game.size();\n  assert(guess.size() == n && \"\
    The number of guesses must be equal to the number of scores given\");\n  std::vector<long>\
    \ answer(n);\n  for (int i = 0; i < n; ++i) {\n    // this line is important!\n\
    \    answer[i] = abs(game[i] - guess[i]);\n  }\n  return answer;", "    std::vector<long>\
    \ res;\n    res.resize(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ ++i)\n        res[i] = std::abs(game[i] - guess[i]);\n    return res;", "  \
    \  assert(game.size() == guess.size());\n    std::vector<long> score;\n    std::vector<long>\
    \ diff_scores;\n    for (long i = 0; i != game.size(); i++) {\n        if (game[i]\
    \ == guess[i]) {\n            score.push_back(0);\n        } else {\n        \
    \    score.push_back(abs(game[i] - guess[i]));\n        }\n    }\n    return score;",
  "    // TODO compare the two inputs and return an array of mismatches\n    // If\
    \ both are equal length then you know you got it right\n    std::vector<long>\
    \ mismatch;\n    if (game.size() != guess.size()) {\n        // TODO error message\n\
    \    } else {\n        // TODO do the comparison\n        // return an array of\
    \ mismatches.\n    }", "   assert(game.size() == guess.size());\n   std::vector<long>\
    \ result(game.size());\n   for (int i = 0; i < game.size(); i++) {\n      result[i]\
    \ = abs(guess[i] - game[i]);\n   }\n   return result;", "    std::vector<long>\
    \ result(game.size());\n    for (long i = 0; i < game.size(); ++i) {\n       \
    \ long diff = game[i] - guess[i];\n        if (diff > 0) {\n            result[i]\
    \ = diff;\n        } else {\n            result[i] = -diff;\n        }\n    }\n\
    \    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    // Your code here\n    return result;", "    std::vector<long> res;\n   \
    \ int size = game.size();\n    int size1 = guess.size();\n    int flag=0;\n  \
    \  int cnt = 0;\n    // I guess the correct answer is to compare the two array\
    \ in order with index\n    // first index for game and second index for guess\n\
    \    // and compare the two array accordingly to know if they are the same or\
    \ not\n    for(int i = 0; i <= size; i++)\n    {\n        if(game[i] != guess[i])\n\
    \        {\n            flag++;\n        }\n    }\n    // compare the game[i]\
    \ and guess[i] to know if they are the same or different\n    // if they match\n\
    \    if(flag == size)\n    {\n        res.push_back(0);\n    }\n    else\n   \
    \ {\n        for(int i = 0; i <= size1; i++)\n        {\n            // check\
    \ if game[i] and guess[i] have the same value\n            if(game[i] == guess[i])\n\
    \            {\n                res.push_back(0);\n            }\n           \
    \ else\n            {\n                // the difference between game and guess\n\
    \                int diff = (abs(game[i] - guess[i]));\n                res.push_back(diff);\n\
    \            }\n        }\n    }\n    return res;", "  std::vector<long> result{};\n\
    \  std::size_t pos{0};\n  for (auto& score : game) {\n    auto gpos = std::find(guess.begin(),\
    \ guess.end(), score);\n    if (gpos != guess.end()) {\n      result.push_back(gpos\
    \ - guess.begin());\n      pos++;\n    } else {\n      result.push_back(std::abs(score\
    \ - guess[pos]));\n      pos++;\n    }\n  }\n  return result;", "    // your code\
    \ goes here\n    std::vector<long> ret;\n    ret.resize(guess.size());\n    std::vector<long>::iterator\
    \ it;\n    for (it=guess.begin(); it!=guess.end(); ++it)\n    {\n        // Your\
    \ code goes here\n    }\n    return ret;", "    // Write your code here\n    std::vector<long>\
    \ comp;\n    for(auto i : guess) {\n        for(auto j : game) {\n           \
    \ if(i == j)\n                comp.push_back(0);\n            else if(abs(i -\
    \ j) < 5)\n                comp.push_back(abs(i - j));\n            else\n   \
    \             comp.push_back(abs(i - j) - 5);\n        }\n    }\n    return comp;",
  '  // TODO', "\t// your code here\n\tassert(game.size() == guess.size());\n\tstd::vector<long>\
    \ result(game.size());\n\tfor (size_t i = 0; i != game.size(); ++i) {\n\t\tresult[i]\
    \ = abs(game[i] - guess[i]);\n\t}\n\treturn result;", "  // Write code here\n\
    \  std::vector<long> result(game.size());\n  for(size_t i = 0; i < guess.size();\
    \ ++i)\n    if(game[i] != guess[i])\n      result[i] = abs(game[i] - guess[i]);\n\
    \  return result;", "  assert(game.size() == guess.size());\n  std::vector<long>\
    \ result(game.size());\n  std::transform(game.begin(), game.end(), guess.begin(),\
    \ result.begin(), [] (long gs, long g) {\n    return abs(gs - g);\n  });\n  return\
    \ result;", "    if (game.size() != guess.size()) {\n        std::cout << \"Mismatched\
    \ sizes\" << std::endl;\n    }\n    std::vector<long> correct(game.size());\n\
    \    long total = 0;\n    for (int i = 0; i < game.size(); i++) {\n        //\
    \ if score is bigger, use that and if not, absolute difference from guess\n  \
    \      auto corrected = guess > game[i] ? guess[i] : abs(guess[i] - game[i]);\n\
    \        total += corrected;\n        correct[i] = corrected;\n    }\n    return\
    \ correct;", "\t// your code goes here", "    // your code here\n    return res;",
  "    std::vector<long> results;\n    // Your code goes here\n    for ( size_t i\
    \ = 0; i < guess.size(); i++ ) {\n        results.push_back( abs(game[i] - guess[i])\
    \ );\n    }\n    return results;", '    // code here', "\t// Complete the function\
    \ here\n\t// hint: think what you can do with the vectors game and guess to find\
    \ the right return value\n\t// hint: think what you can do with game[index] -\
    \ guess[index] to find the difference", "    // your code\n    std::vector<long>\
    \ result(guess.size());\n    for (size_t i = 0; i < guess.size(); i++) {\n   \
    \     result[i] = abs(guess - game[i]);\n    }\n    return result;", "\tassert(game.size()\
    \ == guess.size());\n\tstd::vector<long> results;\n\tresults.reserve(game.size());\n\
    \tfor(auto i=0; i< game.size(); ++i) {\n\t\tif (game[i] == guess[i]) {\n\t\t\t\
    results.push_back(0);\n\t\t} else {\n\t\t\tresults.push_back((abs(game[i] - guess[i])));\n\
    \t\t}\n\t}\n\treturn results;", "    // Your code here\n    std::vector<long>\
    \ scores;\n    scores.resize(guess.size());\n    long curr = 0;\n    long max\
    \ = 0;\n    long min = 0;\n    for (int i = 0; i < guess.size(); i++) {\n    \
    \    curr += game[i];\n        if (game[i] > max)\n            max = game[i];\n\
    \        if (game[i] < min)\n            min = game[i];\n    }\n    for (int i\
    \ = 0; i < guess.size(); i++) {\n        int diff = (max == min) ? 0 : abs(guess\
    \ - curr);\n        if (diff > 0)\n            scores[i] = diff;\n    }\n    return\
    \ scores;", "  assert(game.size() == guess.size());\n  std::vector<long> result(game.size());\n\
    \  for (int i = 0; i < game.size(); ++i) {\n    result[i] = abs(guess[i] - game[i]);\n\
    \  }\n  return result;", "    std::vector<long> result(guess.size());\n    for\
    \ (auto i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess - game[i]);\n\
    \    }\n    return result;", "    // Your solution goes here\n    return std::vector<long>{game.begin(),\
    \ game.end()};", "    std::vector<long> score(guess.size());\n    for (int i =\
    \ 0; i < guess.size(); ++i) {\n        score[i] = abs(game[i] - guess[i]);\n \
    \   }\n    return score;", "  std::vector<long> results;\n  assert(game.size()\
    \ == guess.size());\n  for (long i = 0; i < game.size(); i++)\n  {\n    if (game[i]\
    \ != guess[i])\n    {\n      results.push_back((std::abs(game[i] - guess[i])));\n\
    \    }\n    else\n    {\n      results.push_back(0);\n    }\n  }\n  return results;",
  "    // write your code here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code goes here\n    // your code\
    \ goes here\n    // your code goes here\n    // your code goes here\n    // your\
    \ code goes here\n    // your code goes here\n    // your code goes here\n   \
    \ // your code goes here\n    // your code goes here\n    // your code goes here\n\
    \    // your code goes here\n    // your code goes here\n    // your code goes\
    \ here\n    // your code goes here\n    // your code ", "  std::cout<<\"The game\
    \ is: \";\n  for (auto num : game) std::cout<<num<<\", \";\n  std::cout<<\"The\
    \ guesses were: \";\n  for (auto num : guess) std::cout<<num<<\", \";\n  std::cout<<std::endl;\n\
    \  std::vector<long> score;\n  std::vector<long> wrong;\n  // Complete the function\
    \ so that it returns an array of same length as the \"guess\" array\n  // and\
    \ returns the absolute difference in those values at each index", "    // Write\
    \ your code here\n    int i, j, k, l;\n    std::vector< std::vector<int> > results;\n\
    \    std::vector<int> temp;\n    std::vector<int> temp2;\n    std::vector<int>\
    \ temp3;\n    std::vector<int> temp4;\n    std::vector<int> temp5;\n    for (i\
    \ = 0; i < guess.size(); i++) {\n        results.push_back(std::vector<int>());\n\
    \        temp.push_back(game[i]);\n        temp2.push_back(0);\n        temp3.push_back(0);\n\
    \        temp4.push_back(0);\n        temp5.push_back(0);\n    }\n\n    for (i\
    \ = 0; i < guess.size(); i++) {\n        for (j = 0; j < game.size(); j++) {\n\
    \            k = guess[i];\n            l = game[j];\n            if (k != l)\
    \ {\n                temp[i] = temp[i] + (abs(k - l));\n                temp2[i]\
    \ = temp2[i] + 1;\n                temp3[i] = temp3[i] + k;\n                temp4[i]\
    \ = temp4[i] + l;\n                temp5[i] = temp5[i] + k;\n            }\n \
    \       }\n    }\n    for (int i = 0; i < guess.size(); i++) {\n        results[i][0]\
    \ = temp[i];\n        results[i][1] = temp2[i];\n        results[i][2] = temp3[i];\n\
    \        results[i][3] = temp4[i];\n        results[i][4] = temp5[i];\n    }\n\
    \    return results;", "    // your code goes here\n    \n    long diff = 0;\n\
    \    // if the size of the two vectors are not the same, then return an array\
    \ of zero\n    if(game.size() != guess.size()){\n        return std::vector<long>(game.size());\n\
    \    }\n    \n    // the size of the two vectors must be the same so you can loop\
    \ through them\n    for(size_t i = 0; i != game.size(); i++){\n        diff +=\
    \ abs(game[i] - guess[i]);\n    }\n    \n    // if the game vector is correct,\
    \ then return a vector of size 1\n    // otherwise, return the vector containing\
    \ the difference of game and guess\n    std::vector<long> answer;\n    answer.push_back(diff);\n\
    \    return answer;", "    int results[100] = {};\n    for (int i = 0; i < 100;\
    \ i++) {\n        if (game[i] != guess[i])\n            results[i] = abs(game[i]\
    \ - guess[i]);\n        else\n            results[i] = 0;\n    }\n    return results",
  "    // Your code goes here\n    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result(game.size());\n    long diff = 0;\n    for (int i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n        if (result[i]\
    \ == 0) {\n            diff = 0;\n        }\n        else if (result[i] != 0)\
    \ {\n            diff = result[i];\n        }\n    }\n    return result;", " \
    \   // Your code here\n    std::vector<long> result(guess.size());\n    for (size_t\
    \ i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;", "    int guesses = guess.size();\n    std::vector<long>\
    \ result(guesses);\n    long scoreDiff = 0;\n    for (int i = 0; i < guesses;\
    \ ++i) {\n        long diff = abs(game[i] - guess[i]);\n        result[i] = diff;\n\
    \        scoreDiff += diff;\n    }\n    std::vector<long> diffs = std::vector<long>(guesses,\
    \ scoreDiff);\n    assert(result.size() == guesses);\n    assert(diffs.size()\
    \ == guesses);\n    return result; ", "\t// your code here", "    if(game.size()\
    \ != guess.size()) {\n        throw std::runtime_error(\"Guess size and score\
    \ size mismatch\");\n    }\n    std::vector<long> result(game.size());\n    for\
    \ (std::size_t i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    assert(game.size() == guess.size());\n    auto it = game.begin();\n\
    \    auto end = game.end();\n    for (; it != end; ++it) {\n        // std::cout\
    \ << *it << ' ';\n        if (guess.at(*it) == *it) {\n            result.at(*it)\
    \ = *it;\n        } else {\n            result.at(*it) = (*it - guess.at(*it));\n\
    \        }\n    }\n    return result;", "    std::vector<long> result(guess.size());\n\
    \    long correct = 0;\n    for (int i = 0; i < guess.size(); i++) {\n       \
    \ long temp = abs(guess[i] - game[i]);\n        if (temp > result[i]) {\n    \
    \        result[i] = temp;\n        }\n    }\n    if (correct == guess.size())\
    \ {\n        return result;\n    } else {\n        for (size_t i = 0; i < result.size();\
    \ ++i) {\n            if (abs(correct) - result[i] > 0) {\n                result[i]\
    \ = 0;\n            }\n        }\n        return result;\n    }", // Write code
    here, "    std::vector<long> answer;\n    for (auto i: game) answer.push_back((guess==i)\
    \ ? 0 : abs(guess-i));\n    return answer;", "\tassert(game.size() == guess.size());\n\
    \tstd::vector<long> result(game.size());\n\tfor(size_t i = 0; i < game.size();\
    \ i++) {\n\t\tresult[i] = std::abs(game[i] - guess[i]);\n\t}\n\treturn result;",
  "    if(game.size() != guess.size()) {\n        std::cout << \"The size of the two\
    \ vectors must be the same.\" << std::endl;\n        assert(0);\n    }\n    long\
    \ best_score = 0;\n    long best_guess = 0;\n    long guess = 0, score = 0;\n\
    \    std::vector<long> scores(game.size());\n    for(long i = 0; i < game.size();\
    \ ++i) {\n        guess = game[i];\n        score = guess[guess];\n        guesses.push_back(guess);\n\
    \        scores.push_back(score);\n        if(score != best_score || best_guess\
    \ == 0) {\n            best_score = score;\n            best_guess = guess;\n\
    \        }\n    }\n    assert(best_score != best_guess);\n    std::vector<long>\
    \ out(guess.size());\n    for(long i = 0; i < guess.size(); ++i) {\n        if(guesses[i]\
    \ != best_guess) {\n            out[i] = abs(best_guess - guesses[i]);\n     \
    \   } else {\n            out[i] = 0;\n        }\n    }\n    return out;", " \
    \ std::vector<long> wrong(guess.size(), std::abs(guess.front()));\n  for (size_t\
    \ i = 0; i < guess.size(); ++i) {\n    if (game[i] == guess[i]) {\n      continue;\n\
    \    }\n    size_t j;\n    for (j = i; j < guess.size(); ++j) {\n      if (game[j]\
    \ == guess[j]) {\n        break;\n      }\n    }\n    if (j == guess.size()) {\n\
    \      wrong[i] = game[i] - guess[i]; // the best guess are the ones that don't\
    \ differ much\n    } else {\n      // TODO: implement \"absolute difference of\
    \ best two guesses\" here\n      wrong[i] = 0;\n    }\n  }\n  return wrong;",
  "    std::cout << \"Comparing \" << game.size() << \" items and \" << guess.size()\
    \ << \" items\\n\";\n    std::vector<long> result(guess.size());\n    long score;\n\
    \    long curr;\n    for (int i = 0; i < guess.size(); i++) {\n        // find\
    \ the correct score by searching through all game\n        for (int j = 0; j <\
    \ game.size(); j++) {\n            if (game[j] == guess[i]) {\n              \
    \  score = j;\n                break;\n            }\n        }\n        if (score\
    \ != -1) {\n            // now compare the guess to the score\n            for\
    \ (int j = 0; j < guess.size(); j++) {\n                if (game[j] > guess[i])\
    \ {\n                    result[j] = game[j] - guess[i];\n                } else\
    \ if (game[j] < guess[i]) {\n                    result[j] = guess[i] - game[j];\n\
    \                } else {\n                    result[j] = 0;\n              \
    \  }\n            }\n            // compare to the last score\n            curr\
    \ = (long) guess.size() - 1;\n            while (curr >= 0 && result[curr] ==\
    \ 0) {\n                curr--;\n            }\n            result[curr] = (long)\
    \ guess.size() - curr + 1;\n        } else {\n            result[i] = 0;\n   \
    \     }\n    }\n    return result;", "    // The length of the game. \n    const\
    \ int L = game.size();\n    // The length of the guess. \n    const int G = guess.size();\n\
    \    std::vector<long> result(L);\n    // We use two nested loops because we know\
    \ that the arrays are of equal length. \n    // We iterate over all possible positions\
    \ in the game. \n    for (int i = 0; i < L; i++) {\n        // For each position\
    \ in the game, we iterate over all possible positions in the guess array.\n  \
    \      for (int j = 0; j < G; j++) {\n            // We compare the two arrays\
    \ and determine if the two are equal. If they are equal, we return 0.\n      \
    \      if (game[i] == guess[j]) {\n                result[i] = 0;\n          \
    \      break;\n            } else {\n                // If they are not equal,\
    \ we calculate the difference. This way, we only have to do this once per \n \
    \               // position on the game. \n                result[i] = abs(game[i]\
    \ - guess[j]);\n            }\n        }\n    }\n    return result;", "     int\
    \ result = 0;\n     assert(game.size() == guess.size());\n     for(int i = 0;\
    \ i < game.size(); i++)\n     {\n           if(i == game.size()-1)\n         \
    \  {\n               result = game[i] - guess[i];\n               if(result ==\
    \ 0)\n               {\n                   result++;\n               }\n     \
    \      }\n           else if(i == 0)\n           {\n               result = game[i]\
    \ - guess[i];\n               if(result == 0)\n               {\n            \
    \       result--;\n               }\n           }\n           else\n         \
    \  {\n               if(guess[i] > game[i])\n               {\n              \
    \     result++;\n               }\n               else if(guess[i] < game[i])\n\
    \               {\n                   result--;\n               }\n          \
    \ }\n     }\n     return std::vector<long>(guess);", "    std::sort(game.begin(),\
    \ game.end());\n    std::sort(guess.begin(), guess.end());\n    int counter =\
    \ 0;\n    int i = 0;\n    int j = 0;\n    std::vector<long> ret;\n    for (i =\
    \ 0; i < game.size() - 1; i++) {\n        long result = game[i] - game[i + 1];\n\
    \        // std::cout << result << std::endl;\n        for (j = i + 1; j < game.size();\
    \ j++) {\n            long guessResult = guess[j] - guess[j + 1];\n          \
    \  // std::cout << guessResult << std::endl;\n            if (result == guessResult)\
    \ {\n                counter++;\n            }\n        }\n        ret.push_back(counter);\n\
    \    }\n    return ret;", "    std::vector<long> score(guess.size(), 0);\n   \
    \ for (int i = 0; i < guess.size(); ++i) {\n        int index = i;\n        while\
    \ (index < game.size() && game[index] == guess[i]) {\n            ++index;\n \
    \       }\n        if (index > game.size()) {\n            index = 0;\n      \
    \  }\n        if (game[index] == guess[i]) {\n            score[i] = 0;\n    \
    \    } else {\n            score[i] = abs(game[index] - guess[i]);\n        }\n\
    \    }\n    return score;", "    std::vector<long> result(game.size());\n    for\
    \ (size_t i = 0; i < game.size(); ++i) {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;", "    std::vector<long> res;\n    long minDiff = std::numeric_limits<long>::max();\n\
    \    for(long i = 0; i < guess.size(); i++) {\n        long guess = guess[i];\n\
    \        long diff = abs(guess - game[i]);\n        if(diff < minDiff) {\n   \
    \         minDiff = diff;\n            res = std::vector<long>();\n        }\n\
    \        else if(diff == 0) {\n            if(i == 0) {\n                res.push_back(0);\n\
    \            }\n            else{\n                res.push_back(guess[i - 1]\
    \ - game[i - 1]);\n            }\n        }\n        else{\n            if(i ==\
    \ 0) {\n                res.push_back(minDiff);\n            }\n            else{\n\
    \                res.push_back(guess[i - 1] - game[i - 1]);\n            }\n \
    \       }\n    }\n    return res;", "    std::vector<long> result(game.size());\n\
    \    long difference = 0;\n    for(long i=0; i<game.size(); i++) {\n        if(game[i]\
    \ == guess[i]) {\n            result[i] = 0;\n        } else {\n            difference\
    \ = abs(guess[i] - game[i]);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ comp(guess.size());\n    assert(game.size() == guess.size());\n    assert(guess.size()\
    \ != 0);\n    for (long i = 0; i < guess.size(); i++) {\n        comp[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return comp;", "    std::vector<long> results;\n  \
    \  \n    int size = guess.size();\n    assert(game.size() == size);\n\n    long\
    \ total = 0;\n    long maxDiff = 0;\n    for (int i = 0; i < size; i++) {\n  \
    \      total += game[i];\n        long diff = abs(guess[i] - game[i]);\n     \
    \   if (diff > maxDiff) {\n            maxDiff = diff;\n        }\n        if\
    \ (guess[i] == game[i]) {\n            results.push_back(0);\n        } else {\n\
    \            results.push_back(diff);\n        }\n    }\n    results.push_back(maxDiff);\n\
    \    return results;", "\tassert(game.size() == guess.size());\n\tstd::vector<long>\
    \ result(game.size(), 0);\n\tfor(int i = 0; i < game.size(); i++) {\n\t\tif(game[i]\
    \ != guess[i]) {\n\t\t\tresult[i] = abs(game[i] - guess[i]);\n\t\t} else {\n\t\
    \t\tresult[i] = 0;\n\t\t}\n\t}\n\treturn result;", "    std::vector<long> answer;\n\
    \    \n    if(game.size() != guess.size()) {\n        std::cerr << \"Oops! Your\
    \ inputs are of different lengths! You can't compare them this way!\" << std::endl;\n\
    \        return answer;\n    }\n\n    for(long i = 0; i < game.size(); i++) {\n\
    \        long diff = abs(game[i] - guess[i]);\n        if(diff != 0){\n      \
    \      answer.push_back(diff);\n        }\n    }\n\n    return answer;", "   \
    \ // Your code here\n    std::vector<long> score_temp(game.size());\n    int i\
    \ = 0;\n    for (int j = 0; j < game.size(); j++) {\n        score_temp[i] = abs(game[j]\
    \ - guess[j]);\n        i++;\n    }\n    std::vector<long> result(game.size());\n\
    \    for (int j = 0; j < game.size(); j++) {\n        if (score_temp[j] == 0)\
    \ {\n            result[j] = 0;\n        }\n        else {\n            result[j]\
    \ = abs(score_temp[j] - guess[j]);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result(game.size());\n    for (long i = 0; i < game.size();\
    \ ++i) {\n        result[i] = abs(guess[i] - game[i]);\n    }\n    return result;",
  "    // TODO Auto-generated method stub\n    return game;", "    std::vector<long>\
    \ result(game.size());\n    for (int i = 0; i < game.size(); i++) {\n        for\
    \ (int j = 0; j < guess.size(); j++) {\n            if (game[i] == guess[j]) {\n\
    \                result[i] = 0;\n            } else {\n                result[i]\
    \ = abs(guess[j] - game[i]);\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> result(guess.size());\n    assert(game.size() == guess.size());\n\
    \    // I used vector for convenience\n    for (std::size_t i = 0; i < game.size();\
    \ ++i)\n    {\n        if (game[i] != 0)\n        {\n            // the result\
    \ here is the absolute difference between the guess and the score\n          \
    \  result[i] = abs(game[i] - guess[i]);\n        }\n        else\n        {\n\
    \            // if score is 0, the difference is 0\n            result[i] = 0;\n\
    \        }\n    }\n    return result;", '    // TODO: implement a function that
    calculates the differences between the guess and the game', "    // Fill this\
    \ in.\n    std::vector<long> diff(guess.size());\n    assert(guess.size() == game.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            diff[i] = 0;\n        } else {\n            diff[i] = std::abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return diff;", "   std::vector<long> distances(guess.size());\n\
    \   std::iota(distances.begin(), distances.end(), 0);\n   std::sort(game.begin(),\
    \ game.end());\n   std::sort(guess.begin(), guess.end());\n   for(int i = 0; i\
    \ < guess.size(); i++) {\n      if(game[i] == 0 && guess[i] == 0) {\n        \
    \ distances[i] = 0;\n      } else if(game[i] > guess[i]) {\n         distances[i]\
    \ = game[i] - guess[i];\n      } else if(game[i] < guess[i]) {\n         distances[i]\
    \ = guess[i] - game[i];\n      }\n   }\n   return distances;", "    int len =\
    \ guess.size();\n    std::vector<long> result(len);\n    for (int i = 0; i < len;\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;",
  '    // your code goes here', "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ score;\n    for(long i = 0; i < game.size(); ++i)\n        score.push_back(game[i]\
    \ - guess[i]);\n    return score;", "    if (game.size() != guess.size()) {\n\
    \        throw std::runtime_error(\"Game and Guess must have equal length.\");\n\
    \    }\n    std::vector<long> result;\n    // Iterate through each game and guess\
    \ and compare them.\n    for (size_t i = 0; i < game.size(); i++) {\n        long\
    \ score = game[i];\n        // We do not care about the position of the guess,\
    \ only its value. \n        // Thus, we can use the find method of the vector\
    \ class to determine \n        // if the guess was found in the games.\n     \
    \   auto i = guess.find(score);\n        if (i != guess.end()) {\n           \
    \ // If find is not returning the end iterator which indicates a \n          \
    \  // value was not found, that means the value was found. The difference\n  \
    \          // between the score and the guess is the difference between the score\
    \ \n            // and the correct guess. \n            long diff = (score - i->second);\n\
    \            result.push_back(diff);\n        } else {\n            result.push_back(score);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result; // the\
    \ answer\n    result.clear();\n    int n = game.size();\n    assert(n > 0);\n\
    \    assert(guess.size() > n);\n    // the answer\n    for (int i = 0; i < n;\
    \ ++i) {\n        result.push_back(0);\n    }\n    long best = 0;\n    for (int\
    \ i = 0; i < n; ++i) {\n        long cur = game[i];\n        int index = i;\n\
    \        long diff = abs(cur - guess[index]);\n        // check current guess\
    \ and answer\n        if (cur == guess[index]) {\n            result[index] =\
    \ cur;\n            best = max(best, cur);\n        } else {\n            result[index]\
    \ = cur;\n            // check current guess and answer\n            best = min(best,\
    \ abs(cur - guess[index]));\n        }\n    }\n    return result;", "    if (game.size()\
    \ != guess.size()) {\n        throw std::invalid_argument(\"game.size() != guess.size()\"\
    );\n    }\n    std::vector<long> result(game.size());\n    for (size_t i = 0;\
    \ i < game.size(); ++i) {\n        // I believe we all remember that feeling when\
    \ the result of some long-awaited\n        // event is finally known. The feelings\
    \ and thoughts you have at that moment are\n        // definitely worth noting\
    \ down and comparing.\n        if (game[i] == 0 && guess[i] == 0) {\n        \
    \    result[i] = 0;\n        } else if (game[i] == 0 && guess[i] != 0) {\n   \
    \         result[i] = std::abs(guess[i] - game[i]);\n        } else if (game[i]\
    \ != 0 && guess[i] == 0) {\n            result[i] = std::abs(game[i] - guess[i]);\n\
    \        } else {\n            result[i] = std::abs(game[i] - guess[i]);\n   \
    \     }\n    }\n    return result;", "    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    long best_guess = std::numeric_limits<long>::max();\n\
    \    for (size_t i = 0; i < game.size(); i++) {\n        if (game[i] == best_guess)\
    \ {\n            result[i] = 0;\n            continue;\n        }\n        for\
    \ (size_t j = i + 1; j < game.size(); j++) {\n            result[i] = std::abs(game[i]\
    \ - game[j]); // if same score, then they are the same\n            if (result[i]\
    \ < best_guess) {\n                best_guess = result[i];\n            }\n  \
    \      }\n    }\n    for (size_t i = 0; i < guess.size(); i++) {\n        if (best_guess\
    \ == guess[i]) {\n            result[i] = 0;\n        } else {\n            result[i]\
    \ = std::abs(guess[i] - best_guess);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result(guess.size());\n    for (long i = 0; i != guess.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;",
  "    long score = 0, difference = 0;\n    \n    for (long i = 0; i < guess.size();\
    \ ++i) {\n        long guessed = guess[i];\n        \n        difference = abs(guess\
    \ - score);\n        \n        if (guess == game[i]) {\n            score = 0;\n\
    \        }\n        else {\n            score += difference;\n        }\n    }\n\
    \    \n    return { score, difference };", "    // Write your code here\n    std::vector<long>\
    \ result(game.size());\n    for(size_t i = 0; i < game.size(); i++) {\n      \
    \  if (game[i] == guess[i]) {\n            result[i] = 0;\n        } else {\n\
    \            result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ result;", "    // do some input sanitation here\n    assert(game.size() == guess.size());\n\
    \    // initialize output array\n    std::vector<long> result(game.size());\n\
    \    // iterate over arrays and calculate difference\n    for (int i = 0; i <\
    \ game.size(); ++i)\n        result[i] = abs(game[i] - guess[i]);\n    return\
    \ result;", "\tstd::vector<long> result(game.size());\n\t// assert(game.size()\
    \ == guess.size());\n\tauto game_index = 0;\n\tauto guess_index = 0;\n\tlong diff\
    \ = 0;\n\tlong result = 0;\n\t\n\tauto compare_loop = [&game, &guess, &game_index,\
    \ &guess_index, &diff, &result, &game, &guess]() {\n\t\tif (game_index == game.size())\
    \ {\n\t\t\tif (guess_index == guess.size()) {\n\t\t\t\tresult[guess_index] = 0;\n\
    \t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tresult[guess_index] = std::abs(guess[guess_index]\
    \ - game[game_index]);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tdiff = std::abs(guess[guess_index]\
    \ - game[game_index]);\n\t\tgame_index += 1;\n\t\tguess_index += 1;\n\t};\n\t\n\
    \tcompare_loop();\n\tcompare_loop();\n\tcompare_loop();\n\tcompare_loop();\n\t\
    \n\treturn result;", "    // the size of the arrays has to be equal, otherwise\
    \ the result will be unclear\n    assert(game.size() == guess.size());\n\n   \
    \ // return an array of zeros\n    std::vector<long> result(game.size());\n\n\
    \    // for each score in the first array\n    long sum = 0;\n    for (long i\
    \ = 0; i < game.size(); i++) {\n        // for each score in the second array\n\
    \        long diff = 0;\n        for (long j = 0; j < guess.size(); j++) {\n \
    \           // if the first score is bigger than the second one\n            if\
    \ (game[i] > guess[j]) {\n                diff = game[i] - guess[j];\n       \
    \     } else {\n                diff = guess[j] - game[i];\n            }\n  \
    \          // if the first score is equal with second one\n            if (game[i]\
    \ == guess[j]) {\n                diff = 0;\n            }\n            // if\
    \ the first score is smaller than the second one\n            if (game[i] < guess[j])\
    \ {\n                diff = game[i] - guess[j];\n            }\n            //\
    \ if there was no matches at all\n            if (diff == 0) {\n             \
    \   diff = 1;\n            }\n            // accumulate diff in the result\n \
    \           sum += diff;\n        }\n        // assign the result to the corresponding\
    \ array position\n        result[i] = sum;\n    }\n    return result;", "    std::vector<long>\
    \ result(guess.size());\n    for (int i = 0; i < guess.size(); i++) {\n      \
    \  result[i] = abs(guess[i] - game[i]);\n    }\n    return result;", "    // return\
    \ { 0, 0, 0 }; // incorrect guesses should return 0\n    std::sort(game.begin(),\
    \ game.end());\n    std::sort(guess.begin(), guess.end());\n    std::vector<long>\
    \ result(guess.size());\n    int i = 0;\n    for (; i < guess.size(); i++) {\n\
    \        if (game[i] != guess[i]) {\n            break;\n        }\n    }\n  \
    \  for (; i < guess.size(); i++) {\n        result[i] = abs(game[i] - guess[i]);\n\
    \    }\n    return result;", "    std::vector<long> result(guess.size());\n  \
    \  int cnt = 0;\n    for (auto it=guess.begin(); it!=guess.end(); ++it) {\n  \
    \      cnt+=std::abs(*it-game[cnt%game.size()]);\n        result[cnt%guess.size()]=*it;\n\
    \    }\n    return result;", "  std::vector<long> result;\n  // your code here\n\
    \  assert(game.size() == guess.size());\n  for (int i = 0; i < game.size(); i++)\
    \ {\n    result.push_back((game[i] - guess[i]) ^ game[i]);\n  }\n  return result;",
  "    // fill out this function\n    return std::vector<long>{};", "    // write\
    \ your code here\n    long sum = 0;\n    int n = game.size();\n    int k = guess.size();\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < k; j++) {\n  \
    \          if (game[i] == guess[j]) {\n                sum += abs(game[i] - guess[j]);\n\
    \            }\n        }\n    }\n    std::vector<long> res(n);\n    for (int\
    \ i = 0; i < n; i++) {\n        res[i] = sum;\n    }\n    return res;", "    //\
    \ Your code goes here\n    long diff = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        if(game[i] != guess[i]) {\n            diff = abs(guess[i] -\
    \ game[i]);\n        }\n    }\n    return diff;", "    // write your code in here.\n\
    \    return std::vector<long>({0,0});", "    std::vector<long> result(guess.size());\n\
    \    bool correct = true;\n    for (long idx = 0; idx < guess.size(); idx++) {\n\
    \        correct = correct && game[idx] == guess[idx];\n    }\n    // if all scores\
    \ are correct, we assume that they are equally far off.\n    // if we have not\
    \ hit this point, the return value will be negative because we do not \n    //\
    \ know whether we had a correct answer or not.\n    if (correct) {\n        for\
    \ (int idx = 0; idx < guess.size(); idx++) {\n            result[idx] = 0;\n \
    \       }\n        return result;\n    }\n    // otherwise, we are interested\
    \ in the number of misses\n    int misses = 0;\n    for (long idx = 0; idx < game.size();\
    \ idx++) {\n        misses += std::abs(game[idx] - guess[idx]);\n    }\n    //\
    \ if the total amount of misses is more than zero, we assume that we are off by\
    \ \n    // a minimum of one.\n    if (misses > 0) {\n        for (int idx = 0;\
    \ idx < guess.size(); idx++) {\n            result[idx] = 1;\n        }\n    \
    \    return result;\n    }\n    // otherwise, we are off by a maximum of one.\n\
    \    for (int idx = 0; idx < guess.size(); idx++) {\n        result[idx] = -1;\n\
    \    }\n    return result;", "    long score[10], min = 101;\n    for(int i =\
    \ 0; i < 10; i++) score[i] = game[i] - guess[i];\n    for(int i = 0; i < 10; i++)\
    \ min = std::min(min, score[i]);\n    std::vector<long> scores(10);\n    for(int\
    \ i = 0; i < 10; i++) {\n        scores[i] = min;\n        for(int j = 0; j <\
    \ 10; j++) \n            min = std::min(min, std::abs(score[i] - score[j]));\n\
    \    }\n    return scores;", "    if (game.size() != guess.size()) {\n       \
    \ throw std::runtime_error(\"Mismatch between number of elements in the two vectors.\"\
    );\n    }\n    std::vector<long> comp(game.size());\n    for (size_t i = 0; i\
    \ < game.size(); ++i) {\n        comp[i] = abs(game[i] - guess[i]);\n    }\n \
    \   return comp;", "    std::map<long, long> matches;\n    std::vector<long> answer(game.size());\n\
    \n    for (auto i : game) {\n        auto pos = std::find(guess.begin(), guess.end(),\
    \ i);\n        if (pos != guess.end()) {\n            matches[i] = std::abs(i\
    \ - pos - matches[pos]);\n        } else {\n            matches[i] = 0;\n    \
    \    }\n    }\n\n    // sort the matches by the value\n    std::map<long, long>::iterator\
    \ pos;\n    for (pos = matches.begin(); pos != matches.end(); ++pos) {\n     \
    \   std::sort(pos.value(), pos.value() + 2);\n    }\n\n    return answer;", " \
    \ std::vector<long> score;\n  long game_size = 0;\n  long guess_size = 0;\n\n\
    \  assert(game.size() == guess.size());\n  game_size = game.size();\n  guess_size\
    \ = guess.size();\n  score.resize(guess_size);\n\n  for (int i = 0; i < game_size;\
    \ i++) {\n    score[i] = abs(game[i] - guess[i]);\n  }\n\n  return score;", " \
    \   // your code here\n    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result(game.size());\n    // You do not need to do anything here, but if you\
    \ prefer to, use two for-loops\n    // to loop through the arrays one by one and\
    \ compare them. The value you return\n    // is the difference between a correct\
    \ guess and a false guess.\n    return result;", "    std::vector<long> result(game.size());\n\
    \    for (auto i = 0; i < game.size(); ++i) {\n        long diff = abs(guess[i]\
    \ - game[i]);\n        if (guess[i] == game[i]) {\n            result[i] = 0;\n\
    \        } else {\n            result[i] = diff;\n        }\n    }\n    return\
    \ result;", "    // write your code here\n    long ret[] = {};\n    assert(game.size()\
    \ == guess.size());\n    long sum = 0;\n    long min = 0;\n    for(size_t i =\
    \ 0; i < game.size(); i++) {\n        sum += abs(game[i] - guess[i]);\n      \
    \  if(sum > min)\n            min = sum;\n    }\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        ret[i] = abs(game[i] - guess[i]);\n    }\n    return ret;",
  "    int n = game.size();\n    int m = guess.size();\n    std::vector<long> results(n);\n\
    \    long sum = 0;\n    for (int i = 0; i < n; ++i) {\n        results[i] = 0;\n\
    \        long diff = 0;\n        for (int j = 0; j < m; ++j) {\n            if\
    \ (i == j) continue;\n            diff += abs(game[i] - guess[j]);\n         \
    \   results[i] = max(results[i], diff);\n        }\n        sum += results[i];\n\
    \    }\n    for (int i = 0; i < n; ++i) results[i] /= sum;\n    return results;",
  "    std::vector<long> result;\n    for (auto i = 0; i < guess.size(); i++) {\n\
    \        result.push_back(0);\n    }\n    for (auto i = 0; i < game.size(); i++)\
    \ {\n        if (game[i] != guess[i]) {\n            for (auto j = 0; j < guess.size();\
    \ j++) {\n                result.at(j) += std::abs(game[i] - guess[j]);\n    \
    \        }\n        }\n    }\n    return result;", "  std::vector<long> result(game.size());\n\
    \  for (int i = 0; i < game.size(); i++) {\n    result[i] = abs(guess[i] - game[i]);\n\
    \  }\n  return result;", "  // TODO: your solution goes here\n  assert(game.size()\
    \ == guess.size());\n  std::vector<long> result(game.size());\n  for (size_t i\
    \ = 0; i < game.size(); i++) {\n    if (game[i] == guess[i]) {\n      result[i]\
    \ = 0;\n    } else {\n      result[i] = abs(game[i] - guess[i]);\n    }\n  }\n\
    \  return result;", "    std::vector<long> result(guess.size(), 0);\n    long\
    \ totalScore = std::accumulate(game.begin(), game.end(), 0);\n    long totalGuess\
    \ = std::accumulate(guess.begin(), guess.end(), 0);\n    for (std::size_t i =\
    \ 0; i < guess.size(); ++i) {\n        auto difference = abs(guess[i] - game[i]);\n\
    \        if (guess[i] == totalScore) {\n            result[i] = 0;\n        }\
    \ else if (guess[i] == totalGuess) {\n            result[i] = difference;\n  \
    \      } else {\n            result[i] = difference;\n        }\n    }\n    return\
    \ result;", "    // your code goes here\n    std::vector<long> res(guess.size());\n\
    \    long sum = 0;\n    for (int i = 0; i < guess.size(); i++){\n        sum +=\
    \ abs(game[i] - guess[i]);\n    }\n    if (sum == 0) return res;\n    for (int\
    \ i = 0; i < guess.size(); i++){\n        res[i] = abs(game[i] - guess[i]) / sum;\n\
    \    }\n    return res;", "  std::vector<long> result(guess.size());\n  for (std::size_t\
    \ i = 0; i < guess.size(); i++) {\n    if (game[i] < guess[i]) {\n      result[i]\
    \ = guess[i] - game[i];\n    } else {\n      result[i] = game[i] - guess[i];\n\
    \    }\n  }\n  return result;", "    std::vector<long> result(guess.size());\n\
    \    for(size_t i = 0; i < guess.size(); i++) {\n        if(game[i] != guess[i])\
    \ {\n            result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ result;", "\tstd::vector<long> result(guess.size());\n\tlong min = std::numeric_limits<long>::min();\n\
    \tlong max = std::numeric_limits<long>::max();\n\t// for each guess, calculate\
    \ the difference with the score\n\t// and store it in result\n\tfor (size_t i\
    \ = 0; i < guess.size(); i++) {\n\t\tresult[i] = abs(guess[i] - game[i]);\n\t\t\
    if (result[i] < min) {\n\t\t\tmin = result[i];\n\t\t}\n\t\tif (result[i] > max)\
    \ {\n\t\t\tmax = result[i];\n\t\t}\n\t}\n\t// for each guess, store 0 if it is\
    \ correct and guess[i] otherwise\n\tfor (size_t i = 0; i < guess.size(); i++)\
    \ {\n\t\tresult[i] = (result[i] <= min) ? 0 : guess[i];\n\t}\n\treturn result;",
  "    // your code goes here\n    std::vector<long> res(guess.size());\n    long\
    \ diff = 0;\n    for (size_t i = 0; i < guess.size(); i++)\n    {\n        diff\
    \ += abs(game[i] - guess[i]);\n    }\n    for (size_t i = 0; i < guess.size();\
    \ i++)\n    {\n        res[i] = diff;\n    }\n    return res;", "    assert(game.size()\
    \ == guess.size());\n    std::vector<long> result(game.size(), 0);\n    for (long\
    \ i = 0; i < game.size(); ++i) {\n        assert(guess[i] >= 0 && guess[i] <=\
    \ 10); // 10 is the upper limit for score of match\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;", "    std::vector<long> result(guess.size());\n\
    \    int numOfGuess = guess.size();\n    \n    for(int i = 0; i<numOfGuess; i++)\
    \ {\n        if(game[i] != guess[i]) {\n            result[i] = abs(game[i] -\
    \ guess[i]);\n        } else {\n            result[i] = 0;\n        }\n    }\n\
    \    return result;", "    std::vector<long> score(game.size(), 0);\n    assert(game.size()\
    \ == guess.size());\n    for(long i = 0; i < game.size(); i++) {\n        long\
    \ scoreDiff = abs(guess[i] - game[i]);\n        if(guess[i] == game[i]) {\n  \
    \          score[i] = 0;\n        } else {\n            score[i] = scoreDiff;\n\
    \        }\n    }\n    return score;", "    // Your code goes here\n    assert(game.size()\
    \ == guess.size());\n    std::size_t size = game.size();\n    std::vector<long>\
    \ result(size);\n    // Your code goes here\n    for (std::size_t i = 0; i < size;\
    \ ++i) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = std::abs(game[i] - guess[i]);\n      \
    \  }\n    }\n    return result;", "    std::map<long, long> answers;\n    std::vector<long>\
    \ diffs;\n    for (size_t i = 0; i < game.size(); ++i) {\n        long score =\
    \ game[i];\n        long guess = guess[i];\n        if (guess == score) continue;\n\
    \        long diff;\n        std::tie(diff, answers.at(guess));\n        if (answer\
    \ != scores.at(answer))\n            diff = abs(guess - score);\n        else\
    \ diff = abs(guess - score);\n        diffs.push_back(diff);\n    }\n    return\
    \ diffs;", "    int n = game.size();\n    std::vector<long> result(guess);\n \
    \   // std::vector has this nice operator[] but that returns reference of its\
    \ elements\n    // so we are converting it to reference\n    std::transform(guess.begin(),\
    \ guess.end(), result.begin(), \n                  [](long &val) { return abs(val\
    \ - game[val]); });\n    return result;", "    std::vector<long> results;\n  \
    \  assert(game.size() == guess.size());\n    long diff = 0;\n    for (size_t i\
    \ = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n         \
    \   diff = 0;\n        } else if (game[i] > guess[i]) {\n            diff = abs(game[i]\
    \ - guess[i]);\n        } else {\n            diff = abs(guess[i] - game[i]);\n\
    \        }\n        results.push_back(diff);\n    }\n    return results;", " \
    \   std::vector<long> result(guess.size());\n    std::map<long, long> score;\n\
    \    for (long i = 0; i < game.size(); i++) {\n        long diff = game[i] - guess[i];\n\
    \        score.insert(std::pair<long, long>(game[i], diff));\n    }\n    for (long\
    \ i : score) {\n        long g = i.second;\n        long diff = abs(g - guess[g]);\n\
    \        result[g - diff] = 1;\n    }\n    return result;", "    int maxGuesses\
    \ = guess.size();\n    long maxScore = max(game);\n    std::vector<long> scores(guess.size(),\
    \ 0);\n    std::vector<long> diffs(maxGuesses);\n    for (int i = 0; i < maxGuesses;\
    \ ++i) {\n        int index = guess[i];\n        scores[index] += game[index];\n\
    \        if (scores[index] == maxScore) {\n            diffs[i] = 0;\n       \
    \ } else {\n            diffs[i] = abs(scores[index] - maxScore);\n        }\n\
    \    }\n    return diffs;", "    // Complete this function\n    int i, j, k;\n\
    \    long sum=0;\n    std::vector<long> guess(guess.size());\n    std::sort(guess.begin(),\
    \ guess.end());\n    for (j = 0; j < guess.size(); j++) {\n        if (game[j]\
    \ == guess[j]) {\n            guess[j] = 0;\n        }\n    }\n    for (i = 0;\
    \ i < game.size(); i++) {\n        for (k = 0; k < guess.size(); k++) {\n    \
    \        if (game[i] == guess[k]) {\n                sum+=0;\n            }\n\
    \        }\n        if (sum>0) {\n            sum+=abs(game[i] - guess[k]);\n\
    \        }\n    }\n    return guess;", "  std::vector<long> result;\n  long best\
    \ = -1000L;\n  long index = 0;\n  for (int i = 0; i != guess.size(); ++i) {\n\
    \    long score = game[i];\n    long guess = guess[i];\n    long diff = (score\
    \ - guess);\n    if (diff < best) {\n      best = diff;\n      index = i;\n  \
    \  } else if (diff > best) {\n      break;\n    }\n  }\n  result.push_back(index);\n\
    \  return result;", "    // Write your code here\n    std::vector<long> result(guess.size());\n\
    \    int count = 0;\n    long max = std::numeric_limits<long>::max();\n    long\
    \ min = 0;\n    for (int i = 0; i < guess.size(); i++) {\n        int diff = game[i]\
    \ - guess[i];\n        if (diff != 0) {\n            min = std::min(diff, min);\n\
    \            max = std::max(diff, max);\n        }\n        result[i] = (max ==\
    \ 0) ? min : std::abs(min - max);\n    }\n    return result;", "    long ans[game.size()\
    \ - 1] = {0};\n    for (int i = 0; i <= game.size(); i++) {\n        ans[i] =\
    \ abs(guess[i] - game[i]);\n    }\n    return ans;", "    assert(game.size() ==\
    \ guess.size());\n    int score = game[0];\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); ++i) {\n        int tmp = abs(guess[i]\
    \ - score);\n        if (tmp > result[i]) {\n            result[i] = tmp;\n  \
    \      }\n    }\n    return result;", "    assert(game.size() == guess.size());\n\
    \    long results[game.size()];\n    for(size_t i = 0; i < game.size(); i++) {\n\
    \        if(game[i] != guess[i]) {\n            results[i] = abs(game[i] - guess[i]);\n\
    \        } else {\n            results[i] = 0;\n        }\n    }\n    return results;",
  "    std::vector<long> results;\n    for(size_t i = 0; i < guess.size(); i++) {\n\
    \        results.push_back(abs(game[i] - guess[i]));\n    }\n    return results;",
  "  std::vector<long> results;\n  std::vector<long> diff;\n  std::unordered_map<long,\
    \ long> gamemap;\n  for (int i = 0; i < game.size(); i++) {\n    gamemap[game[i]]++;\n\
    \  }\n  for (int i = 0; i < guess.size(); i++) {\n    auto it = gamemap.find(guess[i]);\n\
    \    if (it != gamemap.end()) {\n      diff[i] += (it->second - gamemap[i]);\n\
    \      gamemap.erase(it);\n    }\n  }\n  for (auto it : gamemap) {\n    results.push_back(it.first);\n\
    \  }\n  return diff;", "    std::vector<long> dist;\n    for (int i = 0; i < guess.size();\
    \ i++) {\n        // calculate the distance between the guess and score\n    \
    \    long diff = abs(guess[i] - game[i]);\n        // if the difference is positive\
    \ add it to the dist vector\n        if (diff > 0) {\n            dist.push_back(diff);\n\
    \        }\n    }\n    return dist;", "  std::vector<long> diff;\n  std::vector<long>\
    \ result;\n  int i = 0, j = 0;\n  for (; i < game.size(); i++) {\n    // If we've\
    \ guessed all game, return that result\n    if (j == guess.size()) {\n      result.push_back(0);\n\
    \      j = 0;\n    }\n    if (game[i] == guess[j]) {\n      ++j;\n    } else {\n\
    \      diff.push_back(abs(game[i] - guess[j]));\n    }\n  }\n  // If we've not\
    \ guessed all game, return that result\n  if (j != guess.size()) {\n    result.push_back(0);\n\
    \  }\n  return result;", "    assert(game.size() == guess.size());\n    int i\
    \ = 0;\n    std::map<long, long> mp;\n    std::vector<long> results;\n    for\
    \ (auto i : game) {\n        mp[i] += i;\n    }\n    for (auto i : guess) {\n\
    \        if (!mp.count(i)) {\n            results.push_back(0);\n        } else\
    \ {\n            long j = 0;\n            for (auto k : mp) {\n              \
    \  results.push_back(abs(i - k));\n                j++;\n                if (j\
    \ == i) {\n                    break;\n                }\n            }\n    \
    \    }\n    }\n    return results;", "    // Your code goes here\n    std::vector<long>\
    \ result;\n    assert(game.size() == guess.size());\n    for(long i =0; i<game.size();i++){\n\
    \        if(game[i] == guess[i]){\n            result.push_back(0);\n        }else{\n\
    \            result.push_back(abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;", "    std::vector<long> result(guess.size());\n    for (auto\
    \ i = 0; i < guess.size(); i++) {\n        if (game[i] != guess[i]) {\n      \
    \      result[i] = abs(game[i] - guess[i]);\n        }\n        else {\n     \
    \       result[i] = 0;\n        }\n    }\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    if (game.size() != guess.size()) std::cout\
    \ << \"invalid size\" << std::endl;\n    for (int i = 0; i < game.size(); ++i)\
    \ {\n        if (game[i] != guess[i]) result.push_back((game[i] - guess[i]));\n\
    \    }\n    return result;", "    // your code here\n    std::vector<long> results;\n\
    \    for (auto i=0; i<game.size(); i++) {\n        int minDiff=INT_MAX;\n    \
    \    int index=-1;\n        for (auto j=0; j<guess.size(); j++) {\n          \
    \  int diff=abs(game[i]-guess[j]);\n            if (diff<minDiff) {\n        \
    \        minDiff=diff;\n                index=j;\n            }\n        }\n \
    \       results.push_back(index);\n    }\n    return results;", "    assert(game.size()\
    \ == guess.size());\n    std::vector<long> result;\n    for (auto i : game)\n\
    \        if (guess.find(i) != guess.end())\n            result.push_back(i);\n\
    \    return std::move(result);", "  std::vector<long> ans;\n  long diff;\n  //\
    \ Your code goes here\n  // Solution\n  assert(game.size() == guess.size());\n\
    \  ans.resize(game.size());\n  for (size_t i = 0; i < game.size(); ++i) {\n  \
    \  diff = (game[i] - guess[i]);\n    if (game[i] == guess[i]) {\n      ans[i]\
    \ = 0;\n    } else {\n      ans[i] = abs(diff);\n    }\n  }\n  return ans;", " \
    \ assert(game.size() == guess.size());\n  std::vector<long> result(game.size());\n\
    \  for (size_t i = 0; i < game.size(); ++i) {\n    result[i] = abs(game[i] - guess[i]);\n\
    \  }\n  return result;", "    std::vector<long> scores(game.size());\n    for\
    \ (size_t i = 0; i < game.size(); ++i)\n        scores[i] = abs(guess[i] - game[i]);\n\
    \    return scores;", "    //Your code goes here\n    std::vector<long> result(guess.size());\n\
    \    long diff = 0;\n    long min = game[0];\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        if (game[i] < min) {\n            min = game[i];\n        }\n\
    \    }\n    for(size_t i = 0; i < guess.size(); i++){\n        result[i] = std::abs(guess\
    \ - game[i]);\n    }\n    return result;", "    auto guesses = guess.size();\n\
    \    std::vector<long> result(guesses);\n    \n    assert(game.size() == guesses\
    \ && guesses == guess.size());\n    \n    for (auto i=0; i<guesses; ++i) {\n \
    \       long guessIndex = guess;\n        long gameIndex = game;\n        \n \
    \       std::swap(gameIndex, guessIndex);\n        long diff = abs(guessIndex\
    \ - gameIndex);\n        if (gameIndex != guessIndex) {\n            result[i]\
    \ = diff;\n        }\n        else {\n            result[i] = 0;\n        }\n\
    \        \n        std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex\
    \ - gameIndex);\n        \n        std::swap(gameIndex, guessIndex);\n       \
    \ diff = abs(guessIndex - gameIndex);\n        \n        std::swap(gameIndex,\
    \ guessIndex);\n        diff = abs(guessIndex - gameIndex);\n        \n      \
    \  std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex - gameIndex);\n\
    \        \n        std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex\
    \ - gameIndex);\n        \n        std::swap(gameIndex, guessIndex);\n       \
    \ diff = abs(guessIndex - gameIndex);\n        \n        std::swap(gameIndex,\
    \ guessIndex);\n        diff = abs(guessIndex - gameIndex);\n        \n      \
    \  std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex - gameIndex);\n\
    \        \n        std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex\
    \ - gameIndex);\n        \n        std::swap(gameIndex, guessIndex);\n       \
    \ diff = abs(guessIndex - gameIndex);\n        \n        std::swap(gameIndex,\
    \ guessIndex);\n        diff = abs(guessIndex - gameIndex);\n        \n      \
    \  std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex - gameIndex);\n\
    \        \n        std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex\
    \ - gameIndex);\n        \n        std::swap(gameIndex, guessIndex);\n       \
    \ diff = abs(guessIndex - gameIndex);\n        \n        std::swap(gameIndex,\
    \ guessIndex);\n        diff = abs(guessIndex - gameIndex);\n        \n      \
    \  std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex - gameIndex);\n\
    \        \n        std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex\
    \ - gameIndex);\n        \n        std::swap(gameIndex, guessIndex);\n       \
    \ diff = abs(guessIndex - gameIndex);\n        \n        std::swap(gameIndex,\
    \ guessIndex);\n        diff = abs(guessIndex - gameIndex);\n        \n      \
    \  std::swap(gameIndex, guessIndex);\n        diff = abs(guessIndex - gameIndex);\n\
    \        \n        std::swap(gameIndex, guessIndex);\n", "    std::vector<long>\
    \ scores;\n    std::size_t guessesSize = guess.size();\n    std::size_t scoresSize\
    \ = game.size();\n    for (std::size_t i = 0; i < guessesSize; ++i) {\n      \
    \  // Your code here\n    }", "    // your code here\n    std::bitset<sizeof(long)*CHAR_BIT>\
    \ check;\n    long score;\n    int j;\n    std::vector<long> result;\n    for\
    \ (auto &p: game)\n        check |= (p != 0);\n    for (auto &p: guess)\n    \
    \    check |= (p != 0);\n    for (auto p: check)\n        if (p == 1)\n      \
    \      score = 0;\n        else\n            score = abs(p - game[check]);\n \
    \       result.push_back(score);\n    for (auto p: check) {\n        if (p ==\
    \ 0)\n            continue;\n        auto g = game[p];\n        if (g == 0)\n\
    \            result.push_back(0);\n        else\n            result.push_back(abs(g\
    \ - guess[p]));\n    }\n    return result;", "    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;",
  "    if (game.size() != guess.size()) {\n        std::cerr << \"ERROR: Game and\
    \ guess are not of equal length. \" << std::endl;\n    }\n    if (game.size()\
    \ == 0) {\n        std::cerr << \"ERROR: Game is empty. \" << std::endl;\n   \
    \ }\n    if (guess.size() == 0) {\n        std::cerr << \"ERROR: Guess is empty.\
    \ \" << std::endl;\n    }\n\n    // TODO: Write your code here\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < game.size(); i++) {\n        for (int j = 0;\
    \ j < guess.size(); j++) {\n            if (game[i] == guess[j]) {\n         \
    \       result.push_back(j);\n            }\n        }\n    }\n    for (int i\
    \ = 0; i < game.size(); i++) {\n        for (int j = 0; j < guess.size(); j++)\
    \ {\n            if (game[i] != guess[j]) {\n                if (result[j] >=\
    \ result.size()) {\n                    result[j] = result.size();\n         \
    \       }\n                if (result[j] >= result.size()) {\n               \
    \     result[j] = result.size();\n                }\n                long diff\
    \ = (guess[j] - game[i]);\n                result[j] = (diff < 0) ? diff * -1\
    \ : diff;\n            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result(guess.size());\n    // use assert to check that both arrays are the same\
    \ length.\n    assert(game.size() == guess.size());\n    for(std::size_t i = 0;\
    \ i < guess.size(); ++i) {\n        assert(game[i] >= 0); // game values must\
    \ be non-negative.\n        assert(guess[i] >= 0); // guesses values must be non-negative.\n\
    \        assert(guess[i] < game.size()); // the guess must be a valid index for\
    \ game.\n        // calculate the distance between game and guess for each\n \
    \       result[i] = abs(game[i] - guess[i]);\n    }\n    return result;", "  \
    \  long long int dif[game.size()], sum = 0, c = 0;\n    // std::cout<<\"Guesses:\
    \ \"<<guess[0];\n    // std::cout<<\"Game score: \"<<game[0];\n    for (int i\
    \ = 0; i < guess.size(); ++i) {\n        // std::cout<<\"Guess \"<<i<<\": \"<<guess[i];\n\
    \        for (int j = 0; j < game.size(); ++j) {\n            // std::cout<<\"\
    Score \"<<j<<\": \"<<game[j];\n            if (game[j] == guess[i]) {\n      \
    \          dif[c++] = guess[i] - game[j];\n                sum++;\n          \
    \  }\n            // std::cout<<\"Guessed \"<<i<<\": \"<<game[j];\n          \
    \  // std::cout<<\"Score \"<<j<<\": \"<<game[j];\n        }\n    }\n    // std::cout<<\"\
    Sum found: \"<<sum;\n    // std::cout<<\"Diff found: \"<<dif[0];\n    std::vector<long>\
    \ res(dif);\n    int n = res.size();\n    for (int i = 0; i < n; ++i) {\n    \
    \    res[i] = abs(res[i]);\n    }\n    return res;", "    std::vector<long> result(guess.size(),\
    \ 0);\n    for (std::size_t i = 0; i < guess.size(); ++i)\n        if (game[i]\
    \ == guess[i])\n            result[i] = 0;\n        else\n            result[i]\
    \ = abs(game[i] - guess[i]);\n    return result;", "  std::vector<long> result(guess.size());\n\
    \  for (int i = 0; i < guess.size(); i++) {\n    result[i] = std::abs(guess[i]\
    \ - game[i]);\n  }\n  return result;", "    // your code goes here\n    std::vector<long>\
    \ result;\n    result.push_back(abs(guess[0] - game[0]));\n    result.push_back(abs(guess[1]\
    \ - game[1]));\n    result.push_back(abs(guess[2] - game[2]));\n    result.push_back(abs(guess[3]\
    \ - game[3]));\n    result.push_back(abs(guess[4] - game[4]));\n    result.push_back(abs(guess[5]\
    \ - game[5]));\n    result.push_back(abs(guess[6] - game[6]));\n    result.push_back(abs(guess[7]\
    \ - game[7]));\n    result.push_back(abs(guess[8] - game[8]));\n    result.push_back(abs(guess[9]\
    \ - game[9]));\n    result.push_back(abs(guess[10] - game[10]));\n    result.push_back(abs(guess[11]\
    \ - game[11]));\n    result.push_back(abs(guess[12] - game[12]));\n    result.push_back(abs(guess[13]\
    \ - game[13]));\n    result.push_back(abs(guess[14] - game[14]));\n    result.push_back(abs(guess[15]\
    \ - game[15]));\n    return result;", "  std::vector<long> ans(guess.size());\n\
    \  for (int i = 0; i < guess.size(); i++) {\n    ans[i] = abs(game[i] - guess[i]);\n\
    \  }\n  return ans;", "  std::vector<long> result(guess.size());\n  for (size_t\
    \ i = 0; i < guess.size(); i++) {\n    if (game[i] == guess[i]) {\n      result[i]\
    \ = 0;\n    } else {\n      result[i] = abs(game[i] - guess[i]);\n    }\n  }\n\
    \  return result;", "    // Write your code here\n    std::vector<long> result(guess.size());\n\
    \    long best = -10000000000LL;\n    long diff = 0;\n    for(size_t i = 0; i\
    \ < guess.size(); i++) {\n        long score = game[i];\n        long guess =\
    \ guess[i];\n        if(guess == score) {\n            result[i] = 0;\n      \
    \      continue;\n        }\n        diff = std::abs(guess - score);\n       \
    \ if(diff < best) {\n            best = diff;\n        }\n        result[i] =\
    \ diff;\n    }\n    return result;", "    // Complete the compare function here\n\
    \    std::vector<long> answer;\n    int len = game.size();\n    for(long i = 0;\
    \ i < len; i++){\n        if(game[i] == guess[i]){\n            answer.push_back(0);\n\
    \        } else {\n            answer.push_back((std::abs(guess[i]-game[i])));\n\
    \        }\n    }\n    return answer;", "    std::vector<long> dist(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        dist[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return dist;", '    // TODO: Write your code here',
  "    // your code goes here\n    long long result = 0.0;\n    for (long i = 0; i\
    \ < guess.size(); i++) {\n        long score = game[i];\n        long guess =\
    \ guess[i];\n        if (guess == score)\n            continue;\n        long\
    \ temp = (guess - score);\n        if (temp > 0) {\n            result++;\n  \
    \      } else {\n            result += (temp * 2);\n        }\n    }\n    return\
    \ {result};", "    // Your code goes here\n    \n    return game;", "    // Your\
    \ code here\n    std::vector<long> result(guess.size());\n    for(int i = 0; i\
    \ < guess.size(); i++){\n        result[i] = abs(guess[i] - game[i]);\n    }\n\
    \    return result;", "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ results;\n    for(size_t i = 0; i < game.size(); ++i)\n        results.push_back(0);\
    \ // a bad guess, not a good guess\n    auto gameIt=game.begin(), guessIt=guess.begin();\n\
    \    for (size_t i = 0; i < game.size(); ++i) {\n        if (gameIt == game.end())\
    \ gameIt=game.begin();\n        if (guessIt == guess.end()) guessIt=guess.begin();\n\
    \        if (gameIt==gameIt) { ++gameIt; continue; } // no guess\n        if (guessIt\
    \ == guessIt) continue;\n        auto gameScore = *gameIt;\n        auto guessScore\
    \ = *guessIt;\n        auto dif = (guessScore - gameScore);\n        results[i]\
    \ = dif;\n        ++gameIt;\n        ++guessIt;\n    }\n    return results;",
  "  assert(game.size() == guess.size());\n  std::vector<long> result(game.size());\n\
    \  std::transform(game.begin(), game.end(), guess.begin(), result.begin(),\n \
    \                [](long a, long b) { return abs(a - b); });\n  // Oh, so you\
    \ want one that doesn't use any loop?\n  std::transform(game.begin(), game.end(),\
    \ guess.begin(), result.begin(),\n                 [](long a, long b) { return\
    \ a - b; });\n  return result;", "    std::vector<long> result;\n    assert(game.size()\
    \ == guess.size());\n    for (long i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;", "    if (game.size() != guess.size())\
    \ return std::vector<long>(game.size());\n    std::vector<long> result(game.size());\n\
    \    for (size_t i = 0; i < game.size(); ++i) {\n        auto diff = std::abs(guess[i]\
    \ - game[i]);\n        if (diff==0) result[i] = 0;\n        else result[i] = diff;\n\
    \    }\n    return result;", "    assert(game.size() == guess.size());\n    std::vector<long>\
    \ result;\n    long max_diff = std::numeric_limits<long>::max();\n    for (size_t\
    \ i = 0; i < game.size(); ++i) {\n        max_diff = std::max(max_diff, abs(game[i]\
    \ - guess[i]));\n        result.push_back(i == guess.size() ? max_diff : max_diff\
    \ - abs(game[i] - guess[i]));\n    }\n    return result;", "    std::vector<long>\
    \ result(guess.size());\n    // fill in the result\n    // ...\n    return result;",
  "    // Write code here\n    std::vector<long> results;\n    long correct = 0;\n\
    \    for (int i = 0; i < guess.size(); i++) {\n        if(game[i] != guess[i])\
    \ {\n            results.push_back((game[i] - guess[i]) + correct);\n        }\
    \ else {\n            results.push_back(0);\n        }\n    }\n    return results;",
  "    int n = game.size();\n    int m = guess.size();\n    std::vector<long> result(n);\n\
    \n    for (int i = 0; i < n; i++) {\n        long diff = abs(guess[i] - game[i]);\n\
    \        if (diff == 0) {\n            result[i] = 0;\n        } else if (diff\
    \ < 0) {\n            result[i] = diff + 1;\n        } else {\n            result[i]\
    \ = diff;\n        }\n    }\n    return result;", "    std::map<long, long> gameMap;\n\
    \    for (long index = 0; index < game.size(); index++) {\n        gameMap[index]\
    \ = game[index];\n    }\n    \n    for (long index = 0; index < guess.size();\
    \ index++) {\n        gameMap[index] = gameMap[index] - guess[index];\n    }\n\
    \    \n    std::vector<long> result(guess.size());\n    for (long index = 0; index\
    \ < guess.size(); index++) {\n        result[index] = std::abs(gameMap[index]\
    \ - guess[index]);\n    }\n    return result;", "    std::sort(game.begin(), game.end());\n\
    \    std::sort(guess.begin(), guess.end());\n\n    std::vector<long> result(guess.size());\n\
    \    long difference = 0;\n\n    for (long i = 0; i < guess.size(); ++i) {\n \
    \       // if guessed correctly then the difference is zero\n        if (guess[i]\
    \ == game[i]) result[i] = 0;\n\n        // otherwise the difference is absolute\
    \ difference\n        else result[i] = abs(guess[i] - game[i]);\n    }\n\n   \
    \ return result;", "    if(game.size() != guess.size()) return {};\n    std::vector<long>\
    \ results(game.size());\n    for(int i = 0; i < game.size(); i++) results[i] =\
    \ abs(game[i] - guess[i]);\n    return results;"]
stop_tokens:
- "\n}"
