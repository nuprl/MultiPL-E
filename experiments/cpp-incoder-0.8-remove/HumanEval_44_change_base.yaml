name: HumanEval_44_change_base
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of\
  \ input number x to base.\n// return string representation after the conversion.\n\
  // base numbers are less than 10.\nstd::string change_base(long x, long base) {\n"
tests: "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
  \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
  \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n \
  \   assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) ==\
  \ (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
  \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
  \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
  \ (8)) == (\"7\"));\n}\n"
completions: ["    std::string result;\n    while (x >= base) {\n        long a =\
    \ x % base;\n        x = x / base;\n        result = std::to_string(a) + result;\n\
    \    }\n    x = x % base;\n    result = std::to_string(x) + result;\n    return\
    \ result;", "    std::string s = std::to_string(x / base);\n    while (s.size()\
    \ < base) {\n        s = \"0\" + s;\n    }\n    while (s.size() > base) {\n  \
    \      s = s.substr(0, s.size() - 1) + \".\" + s.substr(s.size() - 1);\n    }\n\
    \    return s;", "    std::string binary = std::bitset<sizeof(long)>::to_string(x);\n\
    \    std::string answer = \"\";\n    int i = 0;\n    int pos = 0;\n    while (i\
    \ < binary.size()) {\n        if (i % base == 0) {\n            answer += binary[i];\n\
    \            pos = i;\n        }\n        ++i;\n    }\n    std::string str = answer.substr(pos,\
    \ binary.size() - pos);\n    return str;", "    std::string s;\n    while(x>base){\n\
    \        x=(x-base)/base;\n        s+=(char)('0'+x);\n    }\n    while(x<base){\n\
    \        x=(x+base)/base;\n        s+=(char)('0'+x);\n    }\n    return s;", " \
    \   while (x >= base) {\n        x /= base;\n    }\n    std::stringstream ss;\n\
    \    ss << x;\n    std::string result = ss.str();\n    return result;", "    assert(base\
    \ < 10);\n    std::string s = std::to_string(base);\n    while (s.size() < x)\
    \ {\n        s = std::string(base - s.size(), ' ') + s;\n    }\n    return s;",
  "    int digits = (int)log10(base);\n    // Check whether the base is valid.\n \
    \   // If it is not, then return \"Invalid Base\".\n    if (base < 2) return \"\
    Invalid Base\";\n    // If x is 0, then return \"0\".\n    if (x == 0) {\n   \
    \     return \"0\";\n    }\n    // Initialize a string to store the result.\n\
    \    std::string result = \"0\";\n    // Convert the number in base 10 to string.\n\
    \    while (x > 0) {\n        // Keep dividing x by base.\n        x /= base;\n\
    \        // Append the quotient to the result.\n        result += std::to_string(digits-(int)log10(x))\
    \ + \",\";\n    }\n    // Remove the last comma and space. \n    result.erase(result.length()-1);\n\
    \    // Return the result.\n    return result;", "    std::string ans = \"\";\n\
    \    // We assume that the base is 2 or smaller than the length of x.\n    //\
    \ Then we use binary search to find the power of 2 that would give us the\n  \
    \  // same number of digits as x in base base (2 ^ base < x).\n    // If the input\
    \ number is bigger than base, we return empty string.\n    if (base >= 2 && base\
    \ < x.size()) {\n        for (int i = 0, j = 1; i < x.size(); ++i, j <<= 1)\n\
    \            if (x[i] != 0) break;\n        int d = (x.size() - i) / j;\n    \
    \    int r = i + j;\n        long c = 1;\n        while (r >= base) {\n      \
    \      c <<= 1;\n            r -= base;\n        }\n        int q = 0;\n     \
    \   while (c > 0) {\n            int n = (int) (c % base);\n            if (q\
    \ + n < d.size()) {\n                ans += x[q + n];\n                c /= base;\n\
    \            } else {\n                ans += '0';\n                c /= base;\n\
    \            }\n            q += 1;\n        }\n    }\n    return ans;", "   \
    \ std::string res;\n    res.reserve(16);\n    long tmp = 0;\n    long n = x;\n\
    \    while (n > 0) {\n        tmp += n % base;\n        res.push_back(char('0'\
    \ + tmp % base));\n        n /= base;\n    }\n    while (n > 0) {\n        res.push_back(char('0'\
    \ + tmp % base));\n        n /= base;\n        tmp -= n % base;\n    }\n    return\
    \ res;", "    int n = 0, sign = 1;\n    if (x < 0)\n        sign = -1;\n    x\
    \ = abs(x);\n    while (x != 0) {\n        n = (n * base) + x % base;\n      \
    \  x /= base;\n    }\n    return to_string(sign * n);", "    long x_int = x;\n\
    \    int i = 0;\n    std::string res = \"\";\n    while (true) {\n        long\
    \ mod = x_int % base;\n        if (mod == 0) break;\n        mod += base;\n  \
    \      res[i++] = '0' + mod % 10;\n        x_int = x_int / base;\n    }\n    return\
    \ res;", "\tlong rem = x % base;\n\tstd::string str1 = to_string(rem);\n\tstd::string\
    \ str2 = to_string(x);\n\tif (base != 10) {\n\t\tif (str1.size() <= 4) {\n\t\t\
    \tstr2 = str2.substr(0, 4) + str1;\n\t\t} else {\n\t\t\tstr2 = str2.substr(0,\
    \ str2.size() - 4) + str1;\n\t\t}\n\t} else {\n\t\tif (str1.size() <= 4) {\n\t\
    \t\tstr2 = str2.substr(0, 3) + str1;\n\t\t} else {\n\t\t\tstr2 = str2.substr(0,\
    \ str2.size() - 3) + str1;\n\t\t}\n\t}\n\treturn str2;", "    while (base != 10)\
    \ {\n        long temp = x % base;\n        x = x;\n        if (temp != 0) {\n\
    \            x /= base;\n        }\n        base = base * 10;\n    }\n    return\
    \ std::to_string(x);", "    long r = x;\n    while (base-- > 0) {\n        r /=\
    \ base;\n    }\n    std::string ans = std::to_string(x);\n    while (base-- >\
    \ 0) {\n        ans.insert(ans.begin(), '0');\n    }\n    return ans;", "  std::string\
    \ res;\n  long d = x;\n  while (d != 0) {\n    if (d >= base) {\n      res +=\
    \ static_cast<char>((d % base) + 'A' - 'a');\n      d /= base;\n    } else {\n\
    \      res += static_cast<char>((d % base) + 'a' - 'A');\n      d /= base;\n \
    \   }\n  }\n  return res;", "    long result = 1;\n    long n = x;\n    while\
    \ (n != 0) {\n        result = result * base;\n        result = result + (n %\
    \ base);\n        n = n / base;\n    }\n    if (result <= 0)\n        return \"\
    0\";\n    else\n        return std::to_string(result);", "    // Base numbers\
    \ are less than 10.\n    assert (base < 10);\n    if (base == 10) {\n        //\
    \ if base is 10, x is number less than 1,\n        // return string representation\
    \ of x.\n        // if base is 10, x is number less than 2,\n        // return\
    \ string representation of x/10.\n        // if base is 10, x is number less than\
    \ 10,\n        // return string representation of x/100.\n        // if base is\
    \ 10, x is number less than 100,\n        // return string representation of x/1000.\n\
    \        // if base is 10, x is number less than 1,00,\n        // return string\
    \ representation of x/10000.\n        // if base is 10, x is number less than\
    \ 1,000,\n        // return string representation of x/100000.\n        // if\
    \ base is 10, x is number less than 10,000,\n        // return string representation\
    \ of x/1000000.\n        // if base is 10, x is number less than 100,000,\n  \
    \      // return string representation of x/10000000.\n        // if base is 10,\
    \ x is number less than 1,000,000,\n        // return string representation of\
    \ x/100000000.\n        if (x < 1) {\n            return std::to_string(x);\n\
    \        } else if (x < 10) {\n            return std::to_string(x/10);\n    \
    \    } else if (x < 100) {\n            return std::to_string(x/100);\n      \
    \  } else if (x < 1000) {\n            return std::to_string(x/1000);\n      \
    \  } else if (x < 10000) {\n            return std::to_string(x/10000);\n    \
    \    } else if (x < 100000) {\n            return std::to_string(x/100000);\n\
    \        } else if (x < 1000000) {\n            return std::to_string(x/1000000);\n\
    \        } else if (x < 10000000) {\n            return std::to_string(x/10000000);\n\
    \        } else if (x < 100000000) {\n            return std::to_string(x/100000000);\n\
    \        } else if (x < 1000000000) {\n            return std::to_string(x/1000000000);\n\
    \        } else if (x < 10000000000) {\n            return std::to_string(x/10000000000);\n\
    \        } else {\n            return std::to_string(x/100000000000);\n      \
    \  }\n    } else if (base == 10) {\n        // if base is 10, x is number less\
    \ than 1,\n        // return string representation of x/base.\n        // if base\
    \ is 10, x is number less than 2,\n        // return string representation of\
    \ x/base/10.\n        // if base is 10, x is number less than 10,\n        //\
    \ return string representation of x/base/100.\n        // if base is 10, x is\
    \ number less than 100,\n        // return string representation of x/base/1000.\n\
    \        // if base is 10, x is number less than 1,00,\n        // return string\
    \ representation of x/base/10000.\n        // if base is 10, x is number less\
    \ than 1,000,\n        // return string representation of x/base/100000.\n   \
    \     // if base is 10, x is number less than 10,000,\n        // return string\
    \ representation of x/base/1000000.\n        // if base is 10, x is number less\
    \ than 100,000,\n        // return string representation of x/base/10000000.\n\
    \        // ", "    // base is less than 10\n    if(base > 9) {\n        base\
    \ = base - 10;\n        std::string s;\n        while((x / base) > 0) {\n    \
    \        base = base - 1;\n            s += (char)(x % base);\n            x /=\
    \ base;\n        }\n        s += (char)(x % base);\n        while((x / base) >\
    \ 0) {\n            base = base - 1;\n            s += (char)(x % base);\n   \
    \         x /= base;\n        }\n        return s;\n    }\n    // base is less\
    \ than 10\n    else {\n        std::string s;\n        while((x / base) > 0) {\n\
    \            s += (char)(x % base);\n            x /= base;\n        }\n     \
    \   return s;\n    }", "\tlong tmp = x / base;\n\tstd::string str = \"\";\n\t\
    while (tmp) {\n\t\tstr += tmp % base + \"0\";\n\t\ttmp = tmp / base;\n\t}\n\t\
    return str;", "    std::string res;\n    int temp = x;\n    while (temp > 0) {\n\
    \        int d = (int)temp % base;\n        res.insert(res.begin(), (char)(d +\
    \ 48));\n        temp = temp / base;\n    }\n    if (base != 10) {\n        res.insert(res.begin(),\
    \ (char)(base + 48));\n    }\n    return res;", "    if (base < 2 || base > 36)\
    \ return \"Invalid base\";\n    std::string res = std::string(1, base);\n    while\
    \ (x > 0) {\n        res.push_back(char(x%base));\n        x /= base;\n    }\n\
    \    return res;", "    if (base < 2 || base > 36) return \"Not a base\";\n  \
    \  std::stringstream sstr;\n    int n = 1, temp, r = x;\n    while (n <= base)\
    \ {\n        temp = x % base;\n        sstr << temp;\n        x = x;\n       \
    \ n += 1;\n    }\n    // reverse the string.\n    while (n > 0) {\n        sstr\
    \ << r%base;\n        r = r;\n        n -= 1;\n    }\n    return sstr.str();",
  "    int rem = x;\n    std::string s = \"\";\n    while (x > 0) {\n        if (x\
    \ % base == 0) {\n            rem = (int) (rem / base);\n            s += to_string(base)\
    \ + \"*\" + to_string(x % base);\n            s += \"/\";\n        } else {\n\
    \            s += to_string(base) + \"*\" + to_string(x % base);\n           \
    \ s += \"/\";\n        }\n        x /= base;\n    }\n    return s + to_string(rem);",
  "    std::string res;\n    int len = to_string(x).length();\n    long y = x * pow(base,\
    \ len);\n    while (y > 0) {\n        res += to_string((int)y % base);\n     \
    \   y /= base;\n    }\n    return res;", "  std::string str = \"\";\n  long old_x\
    \ = x;\n  long new_x = x;\n  while (x > 0) {\n    int rem = x % base;\n    x /=\
    \ base;\n    str += to_string(rem) + \"^\" + to_string(base) + \"*\";\n  }\n \
    \ while (new_x > 0) {\n    str += to_string(new_x % base) + \"*\";\n    new_x\
    \ /= base;\n  }\n  str += to_string(old_x) + \"^\" + to_string(base) + \"*\";\n\
    \  while (new_x <= old_x) {\n    str += to_string(new_x) + \"*\";\n    new_x *=\
    \ base;\n  }\n  return str;", "  if (base < 2 || base > 36) {\n    return \"Illegal\
    \ base!\";\n  }\n  long temp = x;\n  std::string result;\n  while (temp > 0) {\n\
    \    int digit = temp % base;\n    temp = temp / base;\n    if (digit < 10)\n\
    \      result.insert(0, digit);\n    else\n      result.insert(0, digit - 10,\
    \ 1);\n  }\n  return result;", "    std::ostringstream ss;\n    ss << std::setbase(base)\
    \ << x;\n    return ss.str();", "  // base 10 -> base 2 conversion\n  if (base\
    \ < 2) base = 2;\n\n  // x -> x -> x -> ...\n  while (x != 0) {\n    // print\n\
    \    std::string s = std::to_string(x);\n\n    // remove decimal point\n    s.erase(s.find_last_not_of('0')\
    \ + 1);\n\n    // replace base by corresponding digit\n    s = std::to_string(base)\
    \ + s;\n\n    // change base back\n    x = std::stoi(s);\n  }\n\n  // reverse\
    \ string\n  std::string s = std::to_string(x);\n  std::reverse(s.begin(), s.end());\n\
    \n  // return string\n  return s;", "    std::string res = \"\";\n    while(x\
    \ > 0) {\n        res.insert(res.size() - 1, to_string(x % base));\n        x\
    \ = x / base;\n    }\n    res.insert(0, \"0\");\n    return res;", "    std::string\
    \ str = std::to_string(x);\n    for (int i = 0; i < str.size(); i++) {\n     \
    \   if (base * str[i] - '0' < 10)\n            str.insert(i, std::to_string((base\
    \ * str[i] - '0')) + '0');\n        else\n            str.insert(i, std::to_string((base\
    \ * str[i] - '0')) + 'a' - 10);\n    }\n    return str;", "    std::string ans;\n\
    \    while (x > 0) {\n        if (x % base == 0) {\n            ans.push_back((int)'0'\
    \ + x / base);\n            x /= base;\n        } else {\n            ans.push_back((int)'a'\
    \ + (x / base - 10));\n            x %= base;\n        }\n    }\n    ans.push_back((int)'0'\
    \ + x);\n    return ans;", "   std::string result;\n   while(x > 0) {\n      int\
    \ y = x % base;\n      x = x / base;\n      result = std::to_string(y) + result;\n\
    \   }\n   return result;", "    std::string ans = \"0\";\n    while (x) {\n  \
    \      ans = std::string(x % base) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;", "    long res = 1;\n    while (res <= x && res <= base) {\n        res\
    \ *= base;\n    }\n    while (res <= base) {\n        res *= base;\n    }\n  \
    \  return std::to_string(res);", "    std::string ans = \"\";\n    // Only integer\
    \ numbers are supported.\n    assert(base <= 10);\n    if (x >= base)\n      \
    \  // If x is greater than base then x will be divided by base and rounded up.\n\
    \        ans += ((x / base) + 1) * base;\n    // Remainder will be added to x.\n\
    \    ans += (x % base);\n    return ans;", "    string res = \"\";\n    while\
    \ (x) {\n        res += ((x % base) == 0) ? \"1\" : \"0\";\n        x /= base;\n\
    \    }\n    return res;", "    long r = x / base;\n    std::string digit;\n  \
    \  int count = 0;\n    while (r > 0) {\n        digit += static_cast<char>('0'\
    \ + r % base);\n        count++;\n        r = r / base;\n    }\n    while (count\
    \ > 0) {\n        digit = static_cast<char>(digit == '0' + base);\n        count--;\n\
    \    }\n    return digit;", "    std::string str = std::to_string(x);\n    if\
    \ (base > 10 || base < 10) {\n        return str;\n    }\n    long res = 0;\n\
    \    for (int i = str.size(); i > 0; i -= 1) {\n        res += (str[i - 1] - '0')\
    \ * (base ** (str.size() - i - 1));\n    }\n    str = std::to_string(res);\n \
    \   for (int i = str.size(); i > 0; i -= 1) {\n        str += '0';\n    }\n  \
    \  str += \"#\";\n    return str;", "    std::string ans = \"\";\n    if (base\
    \ == 10) {\n        if (x < 0)\n            ans = \"-\" + change_base(-x, base);\n\
    \        else\n            ans = \"0\" + change_base(x, base);\n    } else {\n\
    \        while (x != 0) {\n            ans = base[x % base] + ans;\n         \
    \   x /= base;\n        }\n    }\n    return ans;", "    long a = 1;\n    long\
    \ b = x;\n    std::string rep, rem;\n    while (x > 1) {\n        rem = x / base;\n\
    \        long r = x % base;\n        x = r;\n        rep = rep.insert(rep.length(),\
    \ \"0123456789abcdef\"[r]);\n        long temp = temp + r * a;\n        a = a;\n\
    \        long temp2 = temp / base;\n        long temp3 = temp % base;\n      \
    \  rem = rem.insert(rem.length(), \"0123456789abcdef\"[temp3]);\n        temp\
    \ = temp2 + temp3;\n        b = b;\n    }\n    long temp = temp + x * a;\n   \
    \ long temp2 = temp / base;\n    long temp3 = temp % base;\n    rep = rep.insert(rep.length(),\
    \ \"0123456789abcdef\"[temp3]);\n    temp = temp2 + temp3;\n    rem = rem.insert(rem.length(),\
    \ \"0123456789abcdef\"[temp]);\n    return rem.append(rep);", "  string s = \"\
    \";\n  while ((x > 0L) && (base > 0L)) {\n    long cur = x % base;\n    if (cur\
    \ > 0L) {\n      x /= base;\n      s += '0' + static_cast<char>(cur);\n    } else\
    \ {\n      s += '0';\n      x /= base;\n    }\n    base *= 10L;\n  }\n  while\
    \ ((x >= 0L) && (base > 0L)) {\n    x /= base;\n    s += '0' + static_cast<char>(base);\n\
    \    base *= 10L;\n  }\n  while (x > 1L) {\n    x /= base;\n    s += '0' + static_cast<char>(base);\n\
    \    base *= 10L;\n  }\n  return s;", "    string str;\n    int place = 1;\n \
    \   while (place < base) {\n        str += std::to_string(x % base);\n       \
    \ x /= base;\n        place++;\n    }\n    return str;", "    long a = 1;\n  \
    \  long b = x;\n    while (b > 0) {\n        b = b // 10;\n        a *= base;\n\
    \    }\n    int r = a / x;\n    return std::to_string(r);", "    std::ostringstream\
    \ os;\n    do {\n        os << std::hex << x % base;\n        x /= base;\n   \
    \ } while (x > 0);\n    return os.str();", "  if (base < 2 || base > 9) return\
    \ \"Error\";\n  bool flag = true;\n  std::stringstream ss;\n  while (x != 0) {\n\
    \    if (flag && x % base == 0) {\n      ss << base;\n      flag = false;\n  \
    \  } else {\n      ss << x % base;\n    }\n    x = x / base;\n  }\n  return ss.str();",
  "  // Store the converted number in a string variable.\n  std::string result = \"\
    \";\n  // Divide x by base until quotient is zero.\n  while (x > 0) {\n    //\
    \ If quotient is greater than or equal to 0, add quotient to result\n    // string.\n\
    \    if (x % base > 0) {\n      result += std::to_string(x % base);\n    }\n \
    \   x /= base;\n  }\n  // Return the result.\n  return result;", "    std::string\
    \ s;\n    if (x < 0) {\n        s = \"-\" + change_base(-x, base);\n    } else\
    \ {\n        int rem = x%base;\n        int div = x/base;\n        if (rem > 9)\
    \ {\n            s += div + '0' + rem;\n        } else {\n            s += div\
    \ + std::to_string(rem);\n        }\n    }\n    return s;", "  if (base < 2 ||\
    \ base > 10) {\n    return \"Not a valid base!\";\n  }\n  long temp = x;\n  std::string\
    \ num = \"\";\n  while (temp) {\n    if (temp % base == 0) {\n      num = to_string(temp\
    \ / base) + num;\n    } else {\n      temp = temp / base;\n    }\n  }\n  return\
    \ num;", "    long ans = (x / base);\n    return std::to_string(ans) + std::to_string(base);",
  "    std::string result;\n    long temp = x;\n    while (base > 0) {\n        temp\
    \ = temp / base;\n        result += (char) ('a' + (temp % base));\n        base--;\n\
    \    }\n    while (temp > 0) {\n        result += (char) ('a' + (temp % base));\n\
    \        base++;\n        temp /= base;\n    }\n    return result;", "    std::string\
    \ res;\n    long num = x;\n    while (num > 0) {\n        res = (num % base) +\
    \ res;\n        num /= base;\n    }\n    return res;", "    std::string str =\
    \ \"\";\n    while (x > 0) {\n        str = std::to_string(x % base) + str;\n\
    \        x = x / base;\n    }\n    return str;", "  // Converting x to string\
    \ in base base using below formula:\n  // log_base(base) * floor(log(x) / log(base)).\n\
    \  // Example: x = 1258 in base 10, base = 10.\n  // (1) 1258 can be expressed\
    \ in base 10 as:\n  //    1258 = log_10(1258) * floor(log_10(1258) / log_10(10))\n\
    \  // and 1258 / log_10(1258) = 4374 / log_10(10).\n  // So, we are taking floor(log_10(1258)\
    \ / log_10(10)) as our base.\n  long log_base = std::log(base);\n  long x = std::ldexp(x,\
    \ std::numeric_limits<long>::digits - std::numeric_limits<long>::digits % log_base);\n\
    \  // Removing the extra digits from the converted number as they are not\n  //\
    \ needed anymore.\n  x = std::ldexp(x, std::numeric_limits<long>::digits % log_base);\n\
    \  // Now, converting to base base using below formula:\n  // pow(base, x).\n\
    \  long result = pow(base, x);\n  // Converting result to string using the below\
    \ formula:\n  // result = result % base^(num_digits - 1).\n  long result_num_digits\
    \ = std::frexp(result, &result); // Get the integer part of result.\n  long num_digits\
    \ = std::ldexp(result_num_digits, std::numeric_limits<long>::digits); // Get the\
    \ integer part of result_num_digits.\n  num_digits = num_digits % base; // Get\
    \ the remainder of num_digits % base.\n  // Finally, converting num_digits in\
    \ base base to string and returning.\n  std::string result;\n  result = std::to_string(num_digits);\n\
    \  return result;", "  std::bitset<base> bs(static_cast<size_t>(x));\n  std::stringstream\
    \ ss;\n  for (int i = bs.to_ulong(); i >= base; --i)\n    ss << (char)('0' + i\
    \ % base);\n  return ss.str();", "    std::stringstream ss;\n    ss << std::hex\
    \ << std::showbase << x;\n    std::string s = ss.str();\n    if (base > 10)\n\
    \        s = std::to_string(base - 10) + s;\n    return s;", "    long r = 1;\n\
    \    while (x >= base) {\n        x /= base;\n        r *= base;\n    }\n    std::string\
    \ res = std::to_string(r);\n    while(res[res.length() - 1] == '0') {\n      \
    \  res.pop_back();\n    }\n    return res;", "    std::string num = \"\";\n  \
    \  while (x > 0) {\n        int r = x % base;\n        x /= base;\n        num\
    \ += (char)(r + '0');\n    }\n    while (num.length() < 9)\n        num += '0';\n\
    \    return num;", "    long rem = x % base;\n    long digit = x / base;\n\n \
    \   if (rem == 0)\n        return std::to_string(digit);\n    if (rem > 0)\n \
    \       return std::to_string(digit) + change_base(digit, base);\n    else\n \
    \       return std::to_string(digit) + change_base(digit, 10) + change_base(digit,\
    \ base);", "\tstd::string s(base);\n\tstd::string ret = \"\";\n\twhile (x) {\n\
    \t\tint digit = x / base;\n\t\tx = x % base;\n\t\tif (digit > 0) {\n\t\t\tret\
    \ += digit;\n\t\t}\n\t}\n\treturn s + ret;", "    assert(base > 1 && base < 10);\n\
    \    // base numbers are less than 10.\n    std::string s;\n    do {\n       \
    \ long tmp = x;\n        std::string tmpstr;\n        if (tmp == 0) {\n      \
    \      // tmpstr is empty.\n        } else if (tmp < base) {\n            tmpstr\
    \ = std::to_string(tmp % base);\n            tmp /= base;\n        } else {\n\
    \            // tmpstr is \"0\".\n            tmpstr = \"0\";\n            tmp\
    \ = 1;\n        }\n        // Add tmpstr into the s string.\n        s += tmpstr;\n\
    \    } while (tmp);\n    return s;", "    std::stringstream ss;\n    long temp\
    \ = x;\n    std::string ret;\n    while(temp > 0) {\n        ss << temp % base;\n\
    \        ret += (ss >> 1)+\"\";\n        temp = temp / base;\n    }\n    ss <<\
    \ temp;\n    return ret;", "    // base 10 numbers are less than base 16.\n  \
    \  assert(base <= 10);\n    std::string s = std::to_string(x);\n    while (s.size()\
    \ > 1 && s[0] == '0') {\n        s.erase(0, 1);\n    }\n    while (s.size() <\
    \ 2) {\n        s = '0' + s;\n    }\n    while (s.size() > base - 2) {\n     \
    \   s = '0' + s;\n    }\n    return s;", "    // base 10 representation\n    int\
    \ x = x / base;\n    std::string repr = std::to_string(x);\n    repr = std::to_string(x);\n\
    \    // remove leading zero\n    if (repr.back() == '0') {\n        repr.pop_back();\n\
    \    }\n    std::string result = \"\";\n    size_t size = repr.size();\n    //\
    \ remove last character\n    if (size > 0 && repr[size - 1] == '.') {\n      \
    \  result.resize(size - 1);\n    } else {\n        result = \"0\";\n    }\n  \
    \  // add leading zero if needed\n    if (result[0] == '0') {\n        result.insert(0,\
    \ \"0\");\n    }\n    // insert digits from left\n    for (size_t i = 0; i < size;\
    \ i++) {\n        if (base < 10) {\n            result += std::to_string(repr[i]\
    \ + base)[sizeof(std::to_string(repr[i] + base)) - 1] + result;\n        } else\
    \ {\n            result += std::to_string(repr[i]);\n        }\n    }\n    //\
    \ remove last character\n    if (result.size() > 0 && result[result.size() - 1]\
    \ == '.') {\n        result.pop_back();\n    } else {\n        result.append(\"\
    0\");\n    }\n    return result;", "  int s = 1;\n  std::stringstream ss;\n  ss\
    \ << x;\n  while (ss >> x) {\n    ss << base;\n    ++s;\n  }\n  assert(s == 1);\n\
    \  return ss.str();", "    std::string ret;\n    while (x) {\n        if (x %\
    \ base == 0)\n            x /= base;\n        else\n            x /= base;\n \
    \       ret += std::to_string(base) + std::to_string(x);\n    }\n    return ret;",
  "    std::stringstream stream;\n    stream.str(\"\");\n    stream.clear();\n   \
    \ stream << x;\n    std::string result = stream.str();\n    int place = result.length()-1;\n\
    \    int mod = result.substr(place,1).c_str()[0]-'0';\n    int len = 1;\n    while(mod)\n\
    \    {\n        mod = mod*base;\n        len++;\n    }\n    for(int i=0; i<len;\
    \ i++)\n    {\n        result += '0';\n    }\n    stream << result;\n    std::string\
    \ result2 = stream.str();\n    return result2;", "    std::string answer = \"\"\
    ;\n    // if base is smaller than 10, return.\n    if (base < 10) {\n        return\
    \ answer;\n    }\n    // if number is smaller than 1, return.\n    if (x <= 0)\n\
    \        return answer;\n    // if number is smaller than 1, return.\n    if (x\
    \ < base)\n        answer = x;\n    else {\n        int remainder = x % base;\n\
    \        if (remainder == 0)\n            answer = base;\n        else\n     \
    \       answer = base + remainder;\n    }\n    return answer;", "    // Define\
    \ a string to store the result.\n    std::string result;\n    std::string remainder;\n\
    \    // Iterate through each digit.\n    while (x > 0) {\n        remainder =\
    \ std::to_string(x);\n        // If x is greater than or equal to base, replace\
    \ x with x // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // //\
    \ // // // // // // // // // // // // // // // // // // // // // // // // // ",
  "    std::string result = std::to_string(x);\n    int len = result.length();\n \
    \   std::string pre = \"\";\n    if (len > 1) {\n        while (len >= 2 && result[len\
    \ - 2] >= '0' && result[len - 2] <= '9') {\n            pre += '0';\n        \
    \    len -= 2;\n        }\n    }\n    if (pre != \"\") {\n        len++;\n   \
    \     while (len >= 2 && result[len - 2] >= '0' && result[len - 2] <= '9') {\n\
    \            pre = pre + '0';\n            len -= 2;\n        }\n    }\n    long\
    \ rem = x / base;\n    long newx = x % base;\n    if (rem > 0)\n        newx +=\
    \ base;\n    while (newx >= base)\n        newx -= base;\n    newx = newx + rem;\n\
    \    result += '0' + newx;\n    while (result.length() < len) {\n        result\
    \ = \"0\" + result;\n    }\n    if (pre != \"\") {\n        result = pre + result;\n\
    \    }\n    return result;", "    // assert(base < 10);\n    std::stringstream\
    \ ss;\n    while(x > 0) {\n        long temp = x % base;\n        x /= base;\n\
    \        if(temp == 0)\n            break;\n        ss << temp;\n    }\n    ss\
    \ << x;\n    return ss.str();", "    std::string ans = \"\";\n    while (x) {\n\
    \        ans = (base % 10) + (ans << (int) (x%base));\n        x /= base;\n  \
    \  }\n    return ans;", "    int p = 1;\n    std::string ans = \"0\";\n    while\
    \ (x) {\n        ans = (base * x) + p;\n        p += base;\n        x /= base;\n\
    \    }\n    return ans;", "    std::string res;\n    if (x < 0)\n        return\
    \ \"-\" + change_base(-x, base);\n    do {\n        int digit = (int)x%base;\n\
    \        if (digit==0)\n            res += \"0\";\n        else\n            res\
    \ += digit;\n        x /= base;\n    } while (x != 0);\n    if (res.back() ==\
    \ '0')\n        res.pop_back();\n    return res;", "    std::string res = \"\"\
    ;\n    while (x != 0) {\n        res.insert(0, (char)(x % base));\n        x /=\
    \ base;\n    }\n    return res;", "    if (x <= 0 || base <= 0)\n        return\
    \ \"error\";\n    std::string ret = \"\";\n    do {\n        if (x >= base)\n\
    \            x /= base;\n        else\n            x += base;\n        ret +=\
    \ std::to_string(x);\n    } while (x != 0);\n    return ret;", "    std::string\
    \ ans = \"\";\n    long res = x;\n    while (!(res % base)) {\n        res /=\
    \ base;\n        ans += static_cast<char>('a' + res - 1) + '0';\n    }\n    ans\
    \ += static_cast<char>('a' + res - 1) + '0';\n    return ans;", "    std::string\
    \ temp;\n    long temp2 = x;\n    long temp3 = temp2 % base;\n    while (temp3\
    \ != 0) {\n        temp = temp3 % base + temp;\n        temp3 = (temp3 / base);\n\
    \    }\n    temp = temp % base + temp;\n    while (temp > base) {\n        temp\
    \ = temp / base;\n        temp = temp % base + temp;\n    }\n    return temp;",
  "    // Your code here\n    std::string num = std::to_string(x);\n    while ((num.length()\
    \ > 1) && (num.at(0) == '0'))\n    {\n        num = num.substr(1);\n    }\n  \
    \  num = num.substr(0,num.length()-1);\n    std::string res = \"\";\n    for (int\
    \ i = num.length(); i > 0; i--)\n    {\n        res += (num[num.length() - i -\
    \ 1] + base);\n    }\n    return res;", "    long num = x;\n    bool isNegative\
    \ = true;\n    if (num < 0) {\n        isNegative = false;\n    }\n    if (num\
    \ == 0) {\n        return \"0\";\n    }\n    long temp = 1;\n    while (num !=\
    \ 0) {\n        temp = num / base;\n        num = num % base;\n        // reverse\
    \ the string\n        std::string s = std::to_string(temp);\n        std::reverse(s.begin(),\
    \ s.end());\n        // concatenate with the string\n        if (isNegative) {\n\
    \            s = \"-\" + s;\n        }\n        return s;\n    }", "  long ans\
    \ = 1;\n  while (x / base > 0) {\n    ans *= base;\n    x = (x / base) - 1;\n\
    \  }\n  char buf[13];\n  // If x is greater than base then we need to append 0's\
    \ at the end.\n  while (x > base) {\n    buf[10] = '0';\n    buf[11] = '\\0';\n\
    \    x = (x / base) - 1;\n  }\n  // Now convert x to string.\n  for (int i = 0;\
    \ i < 10; i++) {\n    buf[i] = (char)(x % base) + '0';\n    x = (x / base) - 1;\n\
    \  }\n  // Return converted string.\n  std::string ans = buf;\n  if (ans[0] ==\
    \ '0') {\n    ans.erase(ans.size() - 1);\n  }\n  return ans;", "    // TODO: change\
    \ base to base > 10\n    long rem = x / base;\n    if (rem < base) {\n       \
    \ x -= rem, rem = x / base;\n    }\n    std::string ret = std::to_string(x);\n\
    \    while (!ret.empty() && ret != \"0\") {\n        ret += '0';\n    }\n    while\
    \ (!ret.empty() && ret != \"1\") {\n        ret += '1';\n    }\n    while (!ret.empty()\
    \ && ret != \"10\") {\n        ret += '0';\n    }\n    while (!ret.empty() &&\
    \ ret != \"11\") {\n        ret += '1';\n    }\n    while (!ret.empty() && ret\
    \ != \"100\") {\n        ret += '0';\n    }\n    while (!ret.empty() && ret !=\
    \ \"101\") {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"\
    1000\") {\n        ret += '0';\n    }\n    while (!ret.empty() && ret != \"1001\"\
    ) {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"10000\")\
    \ {\n        ret += '0';\n    }\n    while (!ret.empty() && ret != \"10001\")\
    \ {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"100000\"\
    ) {\n        ret += '0';\n    }\n    while (!ret.empty() && ret != \"100001\"\
    ) {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"1000000\"\
    ) {\n        ret += '0';\n    }\n    while (!ret.empty() && ret != \"1000001\"\
    ) {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"10000000\"\
    ) {\n        ret += '0';\n    }\n    while (!ret.empty() && ret != \"10000001\"\
    ) {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"100000000\"\
    ) {\n        ret += '0';\n    }\n    while (!ret.empty() && ret != \"100000000\"\
    ) {\n        ret += '1';\n    }\n    while (!ret.empty() && ret != \"10\") {\n\
    \        ret += '1';\n    }\n    while (!ret.empty() && ret != \"1\") {\n    \
    \    ret += '0';\n    }\n    while (!ret.empty() && ret != \"0\") {\n        ret\
    \ += '1';\n    }\n    return ret;", "    std::string str;\n    if (x >= base)\n\
    \        str = std::to_string(x);\n    else\n        str = (std::to_string(x /\
    \ base) + std::to_string(base)).substr(1);\n    return str;", "    std::string\
    \ s = \"\";\n    // Iterate over each digit in base x to convert\n    while(x\
    \ > 0) {\n        while(x % base == 0) {\n            x += 1;\n            s +=\
    \ '0';\n        }\n        s += '1';\n        x /= base;\n    }\n    return s;",
  "    std::string res = std::to_string(x);\n    int n = static_cast<int>(res.size());\n\
    \    for (int i = 0; i < n; i++) {\n        res.insert(n+i, \".\");\n    }\n \
    \   if (base < 10)\n        res.insert(n+1, to_string(base));\n    return res;",
  "\tlong tmp;\n\ttmp = x;\n\ttmp = tmp / base;\n\tstd::string answer = \"\";\n\t\
    while (tmp != 0) {\n\t\tlong rest = tmp % base;\n\t\tanswer = \"1\" + answer +\
    \ (rest < 10 ? \"0\" : \"\") + std::to_string(rest);\n\t\ttmp = tmp / base;\n\t\
    }\n\treturn answer;", "    int digits = 0;\n    long rem = x % base;\n    while\
    \ (x > base) {\n        x /= base;\n        digits++;\n    }\n    return std::to_string(digits)\
    \ + std::string(1, rem + 1);", "    long res = 0;\n    while (x != 0) {\n    \
    \    res += x / base;\n        x %= base;\n    }\n    // Convert to a string.\n\
    \    std::string res;\n    std::string digits = std::to_string(res);\n    while\
    \ (digits.size() > 0) {\n        res += digits[digits.size() - 1] - 48;\n    \
    \    digits.pop_back();\n    }\n    return res;", "    std::string strVal = std::to_string(x);\n\
    \    while (strVal.length() < base) {\n        strVal = \"0\" + strVal;\n    }\n\
    \    return strVal;", "    std::string result;\n    if(x < base)\n    {\n    \
    \    for(int i = 1; (int)x / i >= base; i++) \n        {\n            x = x %\
    \ i;\n        }\n        result = x;\n    }\n    else\n    {\n        for(int\
    \ i = 1; (int)x / i > base; i++) \n        {\n            x = x % i;\n       \
    \ }\n        result = std::to_string(x);\n    }\n    return result;", "    std::string\
    \ answer;\n    while (x) {\n        if (x % base == 0) {\n            answer +=\
    \ (base-1);\n            x /= base;\n        } else {\n            answer += x%base;\n\
    \            x /= base;\n        }\n    }\n    return answer;", "    std::ostringstream\
    \ os;\n    while (x) {\n        os << x % base;\n        x /= base;\n    }\n \
    \   return os.str();", "    long number = x;\n    while (number / base > 0) {\n\
    \        number /= base;\n    }\n    if (number == 0) {\n        return \"0\"\
    ;\n    }\n    string out = \"\";\n    while (number > 0) {\n        out = string(base,\
    \ number%base) + out;\n        number /= base;\n    }\n    return out;", "   \
    \ std::stringstream ss;\n    // Write a for loop to print all the digits of x\n\
    \    // and put a delimiter after every third digit\n    // and put the result\
    \ in ss string.\n    for (long temp = x; temp >= base; temp -= base) {\n     \
    \   int tmp = temp % base;\n        ss << tmp;\n        if (tmp != 0)\n      \
    \      ss << std::setw(3) << std::setfill('0');\n    }\n    return ss.str();",
  "    // assert(base>0 && base<10);\n    std::string s = std::to_string(x);\n   \
    \ if (base==10) {\n        s = \"0\" + s;\n    }\n    while (s.length()<base)\
    \ {\n        s = \"0\" + s;\n    }\n    return s;", "    std::stringstream ss;\n\
    \    ss << std::setbase(base) << x;\n    return ss.str();", "    // We need at\
    \ least a base of 2.\n    if (base < 2 || base > 10) {\n        return \"Invalid\
    \ base\";\n    }\n    // We only care about positive numbers.\n    if (x < 0)\
    \ {\n        return \"Invalid base\";\n    }\n    // We need to convert x to base\
    \ and find its string representation.\n    long r = x;\n    // To change base\
    \ we need to divide it by base.\n    while (base > 1) {\n        long mod = r;\n\
    \        long r = r / base;\n        // Now we can subtract the remainder.\n \
    \       mod -= r * base;\n        // And add the remainder to our final string.\n\
    \        r += mod;\n        base /= 10;\n    }\n    // Add trailing zeroes to\
    \ the string.\n    while (!(r % base)) {\n        r += base;\n        base /=\
    \ 10;\n    }\n    // Return the string representation.\n    return std::string(reinterpret_cast<char\
    \ *>(&r), 8);", "   std::string s;\n   long a = 1;\n   long x = x * base;\n  \
    \ long ans = x;\n   while (ans != 0){\n      long r = ans / base;\n      s = std::to_string(r)\
    \ + s;\n      ans = ans % base;\n   }\n   return s;", "\tif (base > 9) {\n\t\t\
    string s = \"\";\n\t\tlong rem = x % base;\n\t\twhile (rem > 0) {\n\t\t\ts = string::to_string(base)\
    \ + s;\n\t\t\trem = rem / base;\n\t\t}\n\t\ts = string::to_string(base) + s;\n\
    \t\treturn s;\n\t} else {\n\t\treturn string::to_string(x);\n\t}", "  // Convert\
    \ 'x' to string and then to integer.\n  std::string x_str(std::to_string(x));\n\
    \  // Convert 'base' to string and then to integer.\n  std::string base_str(std::to_string(base));\n\
    \  // Convert x_str to integer using base 'base'.\n  long int_x = std::stol(x_str);\n\
    \  // Convert base_str to integer using base 'base'.\n  long int_base = std::stol(base_str);\n\
    \  // Convert int_x to base 'base'\n  long int_base_rev = int_base;\n  for (int\
    \ i = int_base_rev; i >= 1; i--) {\n    if (x % i == 0) {\n      int_base_rev\
    \ /= i;\n    }\n  }\n  // Return result of the conversion in string form.\n  return\
    \ std::to_string(int_base_rev);", "    long ret = 0;\n    while (x) {\n      \
    \  ret = ret * base + (x % base);\n        x /= base;\n    }\n    return to_string(ret);",
  "    if (base > 10) {\n        return \"Too big for base\";\n    }\n    if (base\
    \ < 2 || base > 36) {\n        return \"Invalid base\";\n    }\n    std::string\
    \ res;\n    while (x) {\n        if ((x % base) == 0) {\n            res += (x\
    \ % base);\n            x /= base;\n        } else {\n            res += \"0\"\
    ;\n        }\n    }\n    return res;", "    int temp = (int) (x / base);\n   \
    \ int rem = x % base;\n    std::string s = \"\";\n    while (temp > 0) {\n   \
    \     s += (char) (temp % base);\n        temp /= base;\n    }\n    while (--rem)\
    \ {\n        s += (char) (rem % base);\n        rem /= base;\n    }\n    return\
    \ s;", "  std::string out = \"\";\n  for (; x > 0; x /= base)\n    out += (x %\
    \ base);\n  return out;", "    std::string result;\n    do {\n        long n =\
    \ x / base;\n        long remainder = x % base;\n        result += to_string(n);\n\
    \        x = remainder;\n    }\n    while (x);\n    return result;", "    std::string\
    \ bases[] = {\"\", \"k\", \"M\", \"G\", \"T\"};\n    if (base > 9) {\n       \
    \ return \"\";\n    }\n    int base_pos = 0;\n    while ((x % base) == 0) {\n\
    \        base_pos++;\n        x /= base;\n    }\n    if (x <= 0) {\n        return\
    \ \"\";\n    }\n    std::string res = bases[base_pos];\n    while ((x % base)\
    \ > 0) {\n        if (base_pos == 0) {\n            res = bases[base_pos] + res;\n\
    \        } else {\n            res = bases[base_pos - 1] + res;\n        }\n \
    \       base_pos--;\n        x /= base;\n    }\n    return res;", "    assert(base\
    \ < 10);\n    std::string s = \"\";\n    // base 10 -> base 16\n    if (base ==\
    \ 10) {\n        long temp = x;\n        while ((temp > 0) && (temp % 10 == 0))\
    \ {\n            temp = temp / 10;\n        }\n        s += temp % 10;\n     \
    \   // base 16 -> base 2\n    } else if (base == 16) {\n        long temp = x;\n\
    \        while (temp > 0) {\n            temp = temp >> 1;\n            if (temp\
    \ > 9)\n                s = s + temp % 10;\n            else\n               \
    \ s += temp % 10;\n        }\n        // base 2 -> base 10\n    } else if (base\
    \ == 2) {\n        while (x > 0)\n            s += x % 10;\n        x = x / 10;\n\
    \        while ((x>0) && (x % 2 == 0))\n            x = x / 2;\n        if (x\
    \ != 0)\n            s += x % 10;\n    }\n    return s;", "\tassert(base < 10);\n\
    \tstd::string result;\n\twhile (x > 0) {\n\t\tint digit = x % base;\n\t\tx /=\
    \ base;\n\t\tresult += digit;\n\t}\n\treturn result;", "    std::string result(x);\n\
    \    while (x != 0) {\n        int rem = x % base;\n        x /= base;\n     \
    \   result = std::to_string(rem) + result;\n    }\n    return result;", "    //\
    \ base is less than 10\n    if (base < 10)\n        return std::to_string(x);\n\
    \    int temp = x / base;\n    std::string rem = change_base(x % base, base);\n\
    \    return std::to_string(temp) + rem;", "    std::stringstream ss;\n    ss <<\
    \ std::setw(2) << std::setfill('0') << x;\n    ss >> std::setbase(base);\n   \
    \ std::string res = ss.str();\n    return res;", "    std::string s = std::to_string(x);\n\
    \    if (base < 10) {\n        while (s.size() < base)\n            s = \"0\"\
    \ + s;\n    }\n    while (s.size() < base)\n        s = s + \"0\";\n    std::string\
    \ ans;\n    long sum = 0;\n    ans = s;\n    for (int i = s.size(); i > 0; i -=\
    \ base)\n        sum += std::pow(base, i) - 1;\n    while (sum > 0) {\n      \
    \  ans.insert(ans.size() - 1, (char)('0' + sum % base));\n        sum -= std::pow(base,\
    \ s.size() - 1);\n    }\n    return ans;", "  std::string str = \"\";\n  // if\
    \ base is less than 10, use radix 2\n  if(base < 10) {\n    str.insert(str.length(),\
    \ '0');\n  }\n  // get the length of the number in decimal\n  int len = (int)\
    \ std::log(x) / std::log(base) + 1;\n  // if the length of the number is less\
    \ than base\n  // subtract it from base\n  if(len < base) {\n    base = len;\n\
    \  }\n  // convert the number to a string\n  std::string num(base, '0');\n  int\
    \ n = x;\n  int d = 0;\n  for(int i = len - 1; i >= 0; i--) {\n    d = num[len\
    \ - 1 - i] + 10 * (n%base);\n    n /= base;\n    if(d > 9) {\n      num[len -\
    \ 1 - i] = d;\n      break;\n    }\n  }\n  // append the converted number to the\
    \ string \n  str.append(num);\n  return str;", "    if (base < 1 || base > 10)\
    \ {\n        return \"Not a possible base!\";\n    }\n    if (base == 10) {\n\
    \        // If base is 10; we don't need to add any 0's\n        return x;\n \
    \   }\n    std::string res = \"\";\n    while (x) {\n        // Convert x into\
    \ integer by division\n        // x % base equals x for integer division\n   \
    \     // x / base equals x for fractional division\n        int int_x = x / base;\n\
    \        // Keep the fraction part\n        double frac_x = x - int_x * base;\n\
    \        // Reverse the integer part and add it to res\n        res = std::to_string(int_x)\
    \ + res;\n        // Remove the fraction part from x\n        x = frac_x;\n  \
    \  }\n    // Reverse the string and add 0 to front of string\n    res = std::string(base)\
    \ + res;\n    return res;", "  // Convert x to string.\n  std::ostringstream oss;\n\
    \  oss << x;\n  // Convert string to integer.\n  long num_str = oss.str();\n \
    \ assert(num_str.length() <= 10);\n  // Convert integer back to string.\n  oss.str(\"\
    \");\n  oss << num_str;\n  // Convert string to string.\n  std::string str = oss.str();\n\
    \  // Convert integer back to integer.\n  long num;\n  str = str.substr(0, str.length()\
    \ - 1);\n  std::istringstream iss{str};\n  assert(str.length() <= 10);\n  do {\n\
    \    iss >> num;\n  } while (iss.fail());\n  assert(str.length() <= 10);\n  assert(iss.eof());\n\
    \  // Convert to string.\n  oss.str(\"\");\n  oss << num;\n  // Convert string\
    \ to integer.\n  num_str = oss.str();\n  assert(num_str.length() <= 10);\n  //\
    \ Convert integer back to string.\n  oss.str(\"\");\n  oss << num_str;\n  // Convert\
    \ string to string.\n  str = oss.str();\n  // Convert integer back to integer.\n\
    \  num;\n  str = str.substr(0, str.length() - 1);\n  assert(iss.fail());\n  assert(str.length()\
    \ <= 10);\n  // Convert base to string.\n  oss.str(\"\");\n  oss << base;\n  //\
    \ Convert string to integer.\n  str = oss.str();\n  assert(str.length() <= 10);\n\
    \  // Convert integer back to string.\n  oss.str(\"\");\n  oss << str;\n  // Convert\
    \ string to integer.\n  long num_str2;\n  str = str.substr(0, str.length() - 1);\n\
    \  std::istringstream iss2{str};\n  assert(str.length() <= 10);\n  do {\n    iss2\
    \ >> num_str2;\n  } while (iss2.fail());\n  assert(str.length() <= 10);\n  assert(iss2.eof());\n\
    \  // Convert integer back to string.\n  oss.str(\"\");\n  oss << num_str2;\n\
    \  // Convert string to string.\n  str = oss.str();\n  // Convert integer back\
    \ to integer.\n  num_str2;\n  str = str.substr(0, str.length() - 1);\n  assert(iss2.fail());\n\
    \  assert(str.length() <= 10);\n  // Convert base to string.\n  oss.str(\"\");\n\
    \  oss << base;\n  // Convert string to integer.\n  str = oss.str();\n  assert(str.length()\
    \ <= 10);\n  // Convert integer back to string.\n  oss.str(\"\");\n  oss << str;\n\
    \  // Convert string to integer.\n  long num_", "    long a = 1;\n    while (base\
    \ > 0) {\n        if (x % base == 0) {\n            long c = x / base;\n     \
    \       a *= base;\n            a += c;\n            x -= c * base;\n        }\n\
    \        base--;\n    }\n    return std::to_string(a);", "  std::string res;\n\
    \  if(x < 0) return \"Can't be negative\";\n  while(x!=0){\n    if(x < base){\n\
    \      res+=(char)(x%base+48);\n      x-=base;\n    }\n    else{\n      res+=(char)(x-base+48);\n\
    \      x%=base;\n    }\n  }\n  return res;", "  assert(base >= 2 && base <= 36);\n\
    \  std::string s = \"\";\n  while (x > 0) {\n    int rem = x % base;\n    x /=\
    \ base;\n    s = char(rem) + s;\n  }\n  while ((s.size() < base) && (base > 1)\
    \ && x >= base)\n    s += \"0\";\n  while ((s.size() > base) && (base > 1) &&\
    \ x < base)\n    s = \" \" + s;\n  assert(s.size() > base);\n  return s;", " \
    \   if (x == 0)\n        return \"0\";\n    else if (x < 0)\n        return std::string(\"\
    -\") + change_base(-x, base);\n    std::string s = std::string(\"0\") + to_string(x);\n\
    \    while (s.size() < base)\n        s = \"0\" + s;\n    std::string r = s.substr(0,\
    \ base);\n    while (s.size() > base)\n        s = s.substr(0, s.size() - 1) +\
    \ to_string(-s.back());\n    return r + s;", "  int digit[10] = {0};\n  char xstr[100];\n\
    \  snprintf(xstr, sizeof(xstr), \"%ld\", x);\n  for (int i = 0; i < strlen(xstr);\
    \ i++) {\n    char c = xstr[i];\n    int digit = c - '0';\n    digit = digit*base\
    \ + digit;\n    digit[10 - 1] = digit;\n  }\n  std::string result = \"\";\n  for\
    \ (int i = 0; i < 10; i++) {\n    if (digit[i] != 0)\n      result += char(digit[i]\
    \ - 48 + '0');\n  }\n  return result;", "    string ans;\n    while (x > 0)\n\
    \        ans += (x / base) % 10 + '0';\n    return (ans);", "    std::string s\
    \ = std::to_string(base) + std::to_string(x);\n    char* p = const_cast<char*>(s.c_str());\n\
    \    const char* p1 = p;\n    std::string result = p;\n    while (*p1 != '\\0')\
    \ {\n        if (*p1 < '0') {\n            *p1 = 'a' + (*p1 - '0');\n        }\
    \ else if (*p1 > '9') {\n            *p1 = 'a' + (*p1 - 'a' + 10);\n        }\n\
    \        p1++;\n    }\n    return result;", "    if (base == 0)\n        return\
    \ \"0\";\n    if (x != 0) {\n        if (x < base)\n            return change_base(x\
    \ / base, base) + std::string((x / base) + 1, '0');\n        else // if (x > base)\n\
    \            return change_base(x / base, base) + \"1\";\n    }\n    return \"\
    0\";", "    std::string s = std::to_string(x);\n    std::string ss = s;\n    while\
    \ (ss.length() < base) {\n        ss = \"0\" + ss;\n    }\n    std::string retval\
    \ = \"\";\n    for (int i = 0; i < base; i++) {\n        retval += ss.at(i);\n\
    \    }\n    return retval;", "    std::string str_x = std::to_string(x);\n   \
    \ int len = (int)str_x.size();\n    std::string str_base = \"\";\n    char ch;\n\
    \    for (long i = 0; i < len; i++) {\n        ch = str_x[i];\n        if (ch\
    \ >= '0' && ch <= '9') {\n            str_base = (str_base + ch);\n        } else\
    \ {\n            int tmp = std::atoi(&ch);\n            int newbase = base * tmp;\n\
    \            str_base = (std::to_string(newbase) + str_base);\n        }\n   \
    \ }\n    return str_base;", "    std::string rep = std::to_string(x);\n    long\
    \ num = std::stol(rep);\n    long mod = num % base;\n    if(mod == 0) {\n    \
    \    return \"0\";\n    } else {\n        rep = std::to_string(num / base);\n\
    \        rep += std::to_string(mod);\n        return rep;\n    }", "    std::string\
    \ r;\n    while (x > 0) {\n        int digit = x % base;\n        x = x / base;\n\
    \        std::string digits = \"\";\n        while (digit > 0) {\n           \
    \ digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"[digit - 1] + digits;\n   \
    \         digit = digit / 10;\n        }\n        r = digits + r;\n    }\n   \
    \ return r;", "    assert(base < 10);\n    std::string ans = \"\";\n    while\
    \ (x != 0) {\n        ans += (x % base) + \"\";\n        x /= base;\n    }\n \
    \   if (ans.length() > 1) {\n        ans.erase(ans.size() - 1);\n    }\n    return\
    \ ans;", "  if (x % base == 0) {\n    return to_string(x % base);\n  }\n  else\
    \ if (base < 10) {\n    return std::to_string(base - 1) + change_base(x, base);\n\
    \  } else {\n    return \"error base must be less than 10\";\n  }", "    std::string\
    \ ans = \"\";\n    while (x > base) {\n        ans += '0';\n        x /= base;\n\
    \    }\n    ans += '0';\n    while (x > 0) {\n        ans += '0';\n        x /=\
    \ base;\n    }\n    return ans;", "    if (base < 2 || base > 36) {\n        std::cout\
    \ << \"Wrong input: bases are [2,36]\" << endl;\n        return \"\";\n    }\n\
    \    if (x == 0) {\n        return \"0\";\n    }\n    std::string res = std::to_string(x);\n\
    \    while (static_cast<long>(res.size()) <= base) {\n        res = \"0\" + res;\n\
    \    }\n    return res.substr(0, base);", "    std::string result;\n    while\
    \ (x != 0) {\n        result = (x % base) + result;\n        x /= base;\n    }\n\
    \    return result;", "    // base is less than 10\n    if (base < 10)\n     \
    \   return std::to_string(base) + \".\" + std::to_string(x);\n    // base is more\
    \ than 10\n    return std::to_string(x) + std::to_string(base);", "    // Base\
    \ numbers are less than 10.\n    assert(base < 10);\n    // Change base from base\
    \ 10 to base 10.\n    long new_base = 10;\n    // Calculate number of digits in\
    \ base and x.\n    int digits_base = log10(base);\n    int digits_x = log10(x);\n\
    \    // Convert digits in x to base 10 and calculate new base.\n    for (int i\
    \ = digits_x; i >= 0; i--) new_base = new_base * base % x;\n    // Convert the\
    \ new base to base 10 and return string.\n    return std::to_string(new_base);",
  "    std::string res = \"\";\n    int i = 0;\n    // base numbers are less than\
    \ 10.\n    while (base > 9) {\n        res = base * res + to_string(x%base);\n\
    \        x /= base;\n        i++;\n    }\n    res *= to_string(x);\n    while\
    \ (i < 10)\n        res = \"0\" + res;\n    return res;", "    std::stringstream\
    \ ss;\n    ss << x;\n    unsigned long val = ss.str().c_str();\n    long div =\
    \ 1;\n    long rem = val;\n    while (val > 0) {\n        rem = val % base;\n\
    \        div *= base;\n        val = rem;\n    }\n    while (div != 1) {\n   \
    \     div = div / base;\n    }\n    long result = x;\n    while (result > 0) {\n\
    \        if (result % base == 0) {\n            result /= base;\n        } else\
    \ {\n            result /= base;\n            result += div;\n        }\n    }\n\
    \    return std::to_string(x);", "    std::string rep = std::to_string(x);\n \
    \   while (rep.size() > base + 1 && rep.substr(rep.size() - 1) >= '0' &&\n   \
    \        rep.substr(rep.size() - 1) <= '9') {\n        rep.erase(rep.size() -\
    \ 1);\n    }\n    return rep;", "  assert(base > 0 && base < 10);\n  std::ostringstream\
    \ buf;\n  while (x > 0) {\n    buf << x % base;\n    x /= base;\n  }\n  return\
    \ buf.str();", "  std::string res(\"\");\n  assert(x > 0);\n  if (base == 10)\
    \ {\n    long t = 0;\n    while (x > 0) {\n      res[res.length()] = '0' + x %\
    \ base;\n      x = x / base;\n    }\n  } else {\n    long temp = x;\n    while\
    \ (temp > 0) {\n      if (temp % base == 0) {\n        long temp1 = temp;\n  \
    \      long temp2 = temp1;\n        while (temp2 != 0) {\n          res[res.length()]\
    \ = '0' + temp2 % base;\n          temp2 = temp2 / base;\n        }\n        temp\
    \ = temp1;\n      } else {\n        long temp1 = temp;\n        long temp2 = temp1\
    \ % base;\n        res[res.length()] = '0' + temp2;\n        temp = temp2 / base;\n\
    \      }\n    }\n  }\n  return res;", "  if (base > 10) {\n    throw std::invalid_argument(\"\
    Invalid base!\");\n  }\n  long ans = 1;\n  while (x != 0) {\n    ans = (ans *\
    \ base) + x % base;\n    x /= base;\n  }\n  return std::to_string(ans);", "  \
    \  if (base > 10) {\n        throw std::invalid_argument(\"base must be less than\
    \ 10\");\n    }\n    long rem = x % base;\n    if (rem == 0) {\n        return\
    \ to_string(base);\n    } else {\n        return to_string(base) + change_base(rem,\
    \ base);\n    }", "  std::string rep, tmp;\n  tmp = std::to_string(base);\n  while\
    \ (tmp.length() < x) {\n    tmp = \"0\" + tmp;\n  }\n  rep.assign(std::to_string(x),\
    \ '0');\n  rep.resize(x - rep.length(), '0');\n  for (int i = 0; i < tmp.length();\
    \ i++) {\n    int j = rep.length() - i - 1;\n    char ch = tmp.at(i);\n    rep.at(j)\
    \ = (ch == '0') ? '1' : '0';\n  }\n  rep.insert(rep.length(), '.');\n  return\
    \ rep;", "    std::string binary = std::bitset<64>(x).to_string();\n    std::string\
    \ answer;\n    int i = 1;\n    while (i < 64 && binary[i] != '0') {\n        if\
    \ (binary[i] == 1) {\n            answer.push_back(base - i);\n        }\n   \
    \     i += 1;\n    }\n    return answer;", "    if (x < 0)\n    {\n        x +=\
    \ base;\n    }\n\n    std::string s = std::to_string(std::abs(x)) + \"\";\n  \
    \  std::string r = \"\";\n\n    while (s.size() > 1 && s.size() % base == 0)\n\
    \    {\n        r.push_back(s[s.size() - 1]);\n        s = s.substr(0, s.size()\
    \ - 1);\n    }\n    r.push_back(s[s.size()]);\n\n    return r;", "    std::string\
    \ ans = \"\";\n    while(x != 0) {\n        int y = x % base;\n        ans +=\
    \ std::to_string(y);\n        x /= base;\n    }\n    return ans;", "        std::string\
    \ result = \"\";\n        while (x) {\n                std::string digit = std::to_string(x%base);\n\
    \                result += digit;\n                x = x/base;\n        }\n  \
    \      return result;", "    std::string ans = \"0\";\n    while (x != 0) {\n\
    \        // add 10 to the power of x to get the number of digits to the\n    \
    \    // power of 10.\n        ans = std::to_string(base) + ans;\n        // remove\
    \ the first two digits of x to make the digits less than 10.\n        x /= base;\n\
    \        base /= 10;\n    }\n    return ans;", "  std::string res = \"\";\n  if\
    \ (x >= base)\n    do {\n      res = char(x % base) + res;\n      x = x / base;\n\
    \    } while (x >= base);\n  return res;", "    int n = 1;\n    std::string ans;\n\
    \    while (x > 0) {\n        long rdiv = x / base;\n        long rmod = x % base;\n\
    \        if (base > 2) {\n            assert(rmod != 0);\n            ans.push_back('1');\n\
    \            n++;\n        }\n        ans.push_back('0' + rmod);\n        x =\
    \ rdiv;\n    }\n    ans.insert(ans.begin(), n);\n    return ans;", "    std::string\
    \ ans = \"0\";\n    while (x > 0) {\n        ans += (char)(x % base);\n      \
    \  x = x / base;\n    }\n    while (ans.length() > 0 && ans[-1] == '0') ans.pop_back();\n\
    \    ans += \"1\";\n    return ans;", "    long mod = x;\n    if (mod >= base)\
    \ {\n        mod = mod - base;\n        mod = mod * (base - 1);\n    } else {\n\
    \        mod = mod * base + base;\n    }\n    int digits = 1;\n    while (mod\
    \ > 1) {\n        mod = mod / 10;\n        digits++;\n    }\n    std::string result;\n\
    \    char buf;\n    for (int i = digits - 1; i >= 0; i--) {\n        mod = mod\
    \ + base;\n        buf = mod + 97;\n        result.push_back(buf);\n    }\n  \
    \  return result.reverse();", "    // base numbers are less than 10.\n    if (base\
    \ < 10)\n        return \"0\";\n    std::string res;\n    if (x % base == 0)\n\
    \        return std::to_string(x/base);\n    long remainder;\n    if (x / base\
    \ > 0) {\n        remainder = x%base;\n        res += change_base(remainder, base);\n\
    \    }\n    else if (x / base < 0) {\n        remainder = x / base - 1;\n    \
    \    res += change_base(remainder, base);\n    }\n    else\n        res += \"\
    1\";\n    return res;", "    // base numbers are less than 10.\n    assert (base\
    \ > 0 && base < 10);\n    // return string representation (base is 10).\n    std::string\
    \ str = std::to_string(x);\n    if (base == 10)\n        str = std::to_string(str);\n\
    \    return str;", "    std::string str=\"\";\n    while (x>0)\n    {\n      \
    \  long rem=x%base;\n        str+=to_string(rem);\n        x/=base;\n    }\n \
    \   return str;", "    std::string s = \"\";\n    // Iterate through digits of\
    \ the number.\n    for (int i = 0; i < std::log10(base) + 2; i++) {\n        //\
    \ Check if the least significant digit is greater than x.\n        if (std::pow(base,\
    \ i) >= x) break;\n        // Convert x to the number in base and add it to s.\n\
    \        s += std::string(base % std::pow(base, i), i);\n        // Remove digits\
    \ of x that exceeds base from the number in base.\n        x /= std::pow(base,\
    \ i);\n    }\n    return s;", "    std::string ans = \"\";\n    int dig = 0;\n\
    \    while(x > 0) {\n        dig += 1;\n        if(dig >= base) {\n          \
    \  ans = ans + (x / base) + \"\";\n            x %= base;\n        }\n    }\n\
    \    return ans;", "    int x = x;\n    std::string res = \"\";\n    while (x\
    \ > 0) {\n        res.insert(0, \"0\");\n        res.insert(res.size(), x%base);\n\
    \        x /= base;\n    }\n    return res;", "    if (base < 10) {\n        return\
    \ std::to_string(base);\n    }\n    long quotient = x / base;\n    long remainder\
    \ = x % base;\n    std::string s = \"\";\n    if (quotient == 0) {\n        return\
    \ \"0\";\n    }\n    do {\n        s += std::to_string(quotient);\n        quotient\
    \ = quotient / base;\n    } while (quotient != 0);\n    s += std::to_string(base\
    \ - remainder);\n    return s;", "    std::string rep = \"\";\n    while(x > 0)\
    \ {\n        rep = (char)(x % base) + rep;\n        x /= base;\n    }\n    rep\
    \ = (char)(x % base) + rep;\n    return rep;", "  if (base > 10)\n    return \"\
    \";\n  std::string s;\n  do {\n    s += std::to_string(x % base);\n    x = x /\
    \ base;\n  } while (x != 0);\n  return s;", "  assert(base < 10);\n  if (x < base)\
    \ {\n    std::string s = \"0\";\n    std::string m = to_string(x / base);\n  \
    \  while ((x = x % base) != 0) {\n      s += m;\n      m = to_string(x / base);\n\
    \    }\n    return s;\n  }\n  else {\n    return to_string(x / base);\n  }", " \
    \  std::string s = std::to_string(x);\n   while (s.find_first_not_of(\"0123456789\"\
    ) != std::string::npos) {\n      s = std::to_string(x % base) + s;\n      x /=\
    \ base;\n   }\n   while (s.find_last_not_of(\"0123456789\") != std::string::npos)\
    \ {\n      s = s + std::to_string(x % base);\n      x /= base;\n   }\n   return\
    \ s;", "    std::string res;\n    while (x) {\n        int r = x / base;\n   \
    \     res.push_back((x%base>9)?'a' + (x%base-10):'0'+(x%base));\n        x = r;\n\
    \    }\n    return res;", "    std::string res;\n    while (x != 0) {\n      \
    \  res.push_back((x % base) + '0');\n        x /= base;\n    }\n    if (base >\
    \ 2) {\n        res.insert(res.end() - 1, base);\n    }\n    return res;", " \
    \ long digit = x;\n  std::string result = \"0\";\n  while (digit > 0) {\n    digit\
    \ = digit / base;\n    char c = char(digit + '0');\n    result += c;\n  }\n  return\
    \ result;", "    assert(base < 11);\n    std::string s = std::to_string(x);\n\
    \    std::string res = \"\";\n    if (base == 2)\n        return res;\n    if\
    \ (base == 8)\n        return s;\n    if (base == 16)\n        return s;\n   \
    \ for (long i = s.size() - 1; i >= 0; i--) {\n        res += s.substr(i, 1) +\
    \ std::to_string(base);\n        if (i % 2 != 0) {\n            res += '0';\n\
    \        }\n    }\n    return res;", "    std::string result = \"\";\n    int\
    \ n = 1;\n    while (n > 0 && x > 0)\n    {\n        int temp = (x % base);\n\
    \        result = std::to_string(temp) + result;\n        n++;\n        x /= base;\n\
    \    }\n    return result;", "    long rem_base = 1;\n    std::string rem_str;\n\
    \    while (x < 10) {\n        x *= base;\n        rem_base *= base;\n       \
    \ rem_str += std::to_string(x);\n    }\n    long rest = x % base;\n    rem_str\
    \ += std::to_string(rest);\n    return rem_str;", "    std::string ans = \"\"\
    ;\n    int tmp = 0, rem;\n    while (x != 0) {\n        rem = x % base;\n    \
    \    ans += (char)('0' + rem);\n        x = x / base;\n    }\n    ans += (char)('0'\
    \ + x);\n    return ans;", "    assert(base>10);\n    long ret = 0;\n    while(base>1){\n\
    \        ret = ret*base+(x%base);\n        x=x/base;\n        base = base-1;\n\
    \    }\n    std::string ret = std::to_string(x%base);\n    if(ret[0]!='0'||ret[1]!='0'){\n\
    \        ret = '0'+ret;\n    }\n    return ret;", "    if (base > 10)\n      \
    \  return \"Base is out of range.\";\n    if (x == 0)\n        return \"0\";\n\
    \    std::string s = std::to_string(x);\n    std::string result = s;\n    while\
    \ (result.size() > 1) {\n        auto i = s.rfind('0');\n        if (i < s.size()\
    \ - 1)\n            result.replace(i, i + 1, std::to_string(base));\n        else\n\
    \            result = \"0\" + std::to_string(base);\n    }\n    return \"0\" +\
    \ std::to_string(base) + result;", "  // Change input number x to base.\n  //\
    \ base numbers are less than 10.\n  long temp = x;\n  string str_x = \"0\";\n\
    \  string str_temp = \"0\";\n  long length = 2;\n  while (temp) {\n    temp =\
    \ temp / base;\n    str_temp += string(length, '0');\n    str_x += string(length,\
    \ temp % base);\n    length++;\n  }\n  str_x = \"1\" + str_x;\n  if (str_x.length()\
    \ > str_temp.length()) {\n    str_temp = str_x;\n  }\n  // Change input number\
    \ x to base.\n  // base numbers are less than 10.\n  while (str_x.length() > str_temp.length())\
    \ {\n    if (str_x.length() == 1) {\n      str_temp = \"1\";\n    } else if (str_x.length()\
    \ == 2) {\n      str_temp = \"0\";\n    }\n  }\n  if (str_x.length() < str_temp.length())\
    \ {\n    str_temp = str_x;\n  }\n  if (str_x.length() > str_temp.length()) {\n\
    \    str_temp = str_x;\n  }\n  // Change input number x to base.\n  // base numbers\
    \ are less than 10.\n  str_temp = \"1\" + str_temp;\n  if (str_x.length() > str_temp.length())\
    \ {\n    str_temp = str_x;\n  }\n  string ans = \"\";\n  for (int i = 0; i <=\
    \ str_temp.length(); i++) {\n    ans += str_temp[i];\n  }\n  return ans;", " \
    \   // Convert base to string\n    std::string bin = std::bitset<64>(x).to_string();\n\
    \    // Convert to string\n    bin = std::string(base, '0') + (bin - std::string(base,\
    \ '0'));\n    std::string answer = \"\";\n    // Fill the remaining characters\
    \ with '0'.\n    for(int i = 64 - bin.size(); i > 0; --i) {\n        answer +=\
    \ \"0\";\n    }\n    // Add '1'.\n    answer += \"1\";\n    return answer;", " \
    \   long n = abs(x); // absolute value of x\n    long r = n;\n    std::string\
    \ answer;\n    while (n >= base) { // if x is greater than base then subtract\
    \ base\n        n -= base;\n        answer += static_cast<char>(r % base); //\
    \ append remainder to string\n        r = r / base;\n    }\n    answer += static_cast<char>(r);\n\
    \    return answer;", "    long res = 0;\n    while (x != 0) {\n        res *=\
    \ base;\n        res += x % base;\n        x /= base;\n    }\n    std::cout <<\
    \ res << std::endl;\n    return std::to_string(res);", "    std::string rep_str\
    \ = \"\";\n    if (x >= base)\n        return rep_str + std::to_string(x);\n \
    \   std::string str = std::to_string(x);\n    while (true) {\n        char digit\
    \ = str[str.size() - 1] - '0';\n        long t = x % base;\n        rep_str =\
    \ std::to_string(t) + rep_str;\n        x = x / base;\n        if (x >= base)\n\
    \            break;\n        str = std::to_string(x);\n    }\n    return rep_str;",
  "    if (base < 2)\n        base = 10;\n\n    std::string result;\n    if (x >=\
    \ base)\n    {\n        long temp = x;\n        long reminder = x % base;\n  \
    \      while (temp != 0)\n        {\n            if (temp % base == 0)\n     \
    \       {\n                result += static_cast<char>(base+reminder);\n     \
    \           break;\n            }\n            temp = temp / base;\n        }\n\
    \    }\n    else\n    {\n        long reminder = x % base;\n        while (x !=\
    \ 0)\n        {\n            if (x % base == 0)\n            {\n             \
    \   result += static_cast<char>(base+reminder);\n                break;\n    \
    \        }\n            x = x / base;\n        }\n    }\n\n    return result;",
  "    long tmp = x;\n    std::string rep(\"\");\n    do {\n        tmp = tmp / base;\n\
    \        rep.push_back((tmp % base) == 0 ? '0' + (tmp % base) : 'a' + (tmp % base));\n\
    \    } while ((tmp != 0) && (tmp >= base));\n    return rep;", "  std::string\
    \ output;\n  // Convert the given number into a string in base 10\n  // with the\
    \ help of recursive function called change_base.\n  // Example when x = 12\n \
    \ // output = 12 -> change_base(12, 10) = \"12\" -> output = \"10\"\n  // Example\
    \ when x = 13\n  // output = 13 -> change_base(13, 10) = \"13\" -> output = \"\
    11\"\n  output += change_base(x / base, base);\n  output = base % 2 == 0 ? output\
    \ + (x / base % base % base) : (output + x / base);\n  return output;", "    std::string\
    \ res;\n    // convert from decimal to binary and reverse\n    while (x >= base)\n\
    \    {\n        long temp = x % base;\n        x /= base;\n        res = std::to_string(temp)\
    \ + res;\n    }\n    if (x!=0)\n    {\n        res = std::to_string(x) + res;\n\
    \    }\n    reverse(res.begin(), res.end());\n    return res;", "    std::string\
    \ s = std::to_string(x);\n    if (base < 10) {\n        std::string a = \"0123456789abcdef\"\
    ;\n        long n = 1;\n        for (size_t i = 0; i < s.size(); i++) {\n    \
    \        long k = a[i] - '0';\n            if (k >= base) {\n                n\
    \ = n * base + k;\n            } else {\n                break;\n            }\n\
    \        }\n        std::string r = std::to_string(n);\n        while (r.length()\
    \ < s.size()) {\n            r = \"0\" + r;\n        }\n        return r;\n  \
    \  } else {\n        return s;\n    }", "    if (x < 0) {\n        throw std::invalid_argument(\"\
    input number must > 0\");\n    }\n    long res = 0;\n    do {\n        res = (res\
    \ * base) + x;\n    } while (res >= base);\n    int len = (res - 1) / base + 1;\n\
    \    std::string resStr = std::to_string(res);\n    std::string resStrL;\n   \
    \ while (len > 0) {\n        int temp = resStr.size();\n        while (temp >=\
    \ len) {\n            resStrL = resStrL + \"0\";\n            len--;\n       \
    \ }\n        resStrL = resStrL + resStr.substr(0, len);\n        resStr = resStr.substr(len);\n\
    \        len--;\n    }\n    return resStrL;", "    std::stringstream strx;\n \
    \   std::string s;\n    // input number is too big to convert directly.\n    if\
    \ (base == 0)\n        return \"0\";\n    else if ((x == 0) && (base == 10)) {\n\
    \        return \"0\";\n    }\n    // convert from base 10 to base 2.\n    do\
    \ {\n        strx << x;\n        x /= base;\n    } while (x > 0);\n    // convert\
    \ from base 2 to base 10.\n    do {\n        s << strx.rdbuf();\n        strx.str(\"\
    \");\n        strx << x;\n        x /= base;\n    } while (x > 0);\n    // convert\
    \ from base 10 to base 10.\n    do {\n        s << strx.rdbuf();\n        strx.str(\"\
    \");\n        strx << x;\n        x /= base;\n    } while (x > 0);\n    return\
    \ s;", "    std::string ret = \"\";\n    long tmp;\n    bool isNegative = false;\n\
    \n    if (x < 0) {\n        isNegative = true;\n        x = -x;\n    }\n\n   \
    \ if (x <= base)\n        return std::to_string(x);\n\n    for (long i = 1; i\
    \ < base; i++)\n    {\n        tmp = (x / base) % base;\n        ret += std::to_string(tmp);\n\
    \        x = tmp;\n    }\n\n    if (!isNegative)\n        ret = \"-\" + ret;\n\
    \n    return ret;", "    // Your code here\n    std::string result = \"\";\n \
    \   std::string digit = \"\";\n    int count = 0;\n\n    while (x > 0) {\n   \
    \     if (x % base == 0) {\n            digit = std::to_string(x);\n         \
    \   while (digit > 9) {\n                digit = digit.substr(0, digit.size()\
    \ - 1);\n                count++;\n            }\n            result += digit;\n\
    \            if (count < base) {\n                result += ' ';\n           \
    \     count += 1;\n            }\n            x /= base;\n        } else {\n \
    \           digit = std::to_string(x / base);\n            while (digit.size()\
    \ < base) {\n                digit += '0';\n                count++;\n       \
    \     }\n            result += digit;\n            if (count < base) {\n     \
    \           result += ' ';\n                count += 1;\n            }\n     \
    \       x %= base;\n        }\n    }\n    while (result[result.size() - 1] ==\
    \ ' ') {\n        result.pop_back();\n    }\n\n    return result;", "    string\
    \ s = to_string(x);\n    string new_s = \"\";\n    int count = 0;\n    int index\
    \ = 0;\n    while (s[index] >= '0' && s[index] <= '9') {\n        index = index\
    \ + 1;\n    }\n    if (s[index] >= 'A' && s[index] <= 'Z') {\n        index =\
    \ index + 1;\n    }\n    while (s[index] >= 'a' && s[index] <= 'z') {\n      \
    \  index = index + 1;\n    }\n    for (count = 0; count < (s.length() - index\
    \ - 1); count = count + 1) {\n        new_s = new_s + s[index];\n    }\n    while\
    \ (new_s.length() != base) {\n        new_s = new_s + '0';\n    }\n    new_s =\
    \ new_s + '0';\n    return new_s;", "    std::string s = std::to_string(x);\n\
    \    while (s.size() < base) {\n        s = \" \" + s;\n    }\n    while (s.size()\
    \ > base + 1) {\n        s = s.substr(0, s.size()-1);\n    }\n    return s;",
  "    assert(base < 11);\n    long rem = x % base;\n    std::string s = \"\";\n \
    \   long temp = x;\n    while (temp != 0) {\n        s = to_string(temp % base)\
    \ + s;\n        temp = temp / base;\n    }\n    // if x is even then convert it\
    \ to decimal system.\n    if (rem == 0)\n        return s;\n    // if x is odd\
    \ then convert it to octal system.\n    return s + \"o\";", "    string res;\n\
    \    int flag = 0;\n    while(x >= base) {\n        x = x/base;\n        if(flag\
    \ == 0)\n            res = to_string(x%base);\n        else \n            res\
    \ += to_string(x%base);\n        flag = 1;\n    }\n    res += to_string(x);\n\
    \    return res;", "    std::string rep(\"\");\n    int xa = x;\n    while(x >\
    \ 0) {\n        xa = base * xa;\n        x -= xa;\n        rep = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    [xa] + rep;\n    }\n    return rep;", "    if (base == 10) {\n        long div\
    \ = 1;\n        while (x != 0) {\n            div *= base;\n            x /= base;\n\
    \        }\n        return std::to_string(div);\n    } else {\n        while (x\
    \ != 0) {\n            long div = base * x;\n            x /= base;\n        \
    \    base /= 10;\n            return std::to_string(div);\n        }\n    }",
  "    std::string result = \"\";\n    // Traverse string backwards, as we will be\
    \ changing its digits.\n    while (x != 0) {\n        if (x % base == 0) {\n \
    \           // Reverse the digits and concatenate it to the string.\n        \
    \    while (x % base > 0) {\n                result += static_cast<char>(x % base);\n\
    \                x /= base;\n            }\n            // After reversing, x\
    \ should be 0.\n            assert(x == 0);\n            break;\n        } else\
    \ {\n            result += static_cast<char>(x % base);\n            x /= base;\n\
    \        }\n    }\n    return result;", "    std::string s = std::to_string(x);\n\
    \    std::string t;\n    for (auto it = s.begin(); it != s.end(); ++it) {\n  \
    \      if (it != s.begin()) {\n            t += '0';\n        }\n        t +=\
    \ *it;\n    }\n    std::string num = std::to_string(x);\n    if (base < 10)\n\
    \        t += std::to_string(base);\n    if (num == \"0\") {\n        return t;\n\
    \    }\n    if (base == 10) {\n        if (num.length() == 1) {\n            return\
    \ \"1\" + t;\n        }\n        if (num.length() == 2) {\n            return\
    \ \"10\" + t;\n        }\n        if (num.length() == 3) {\n            return\
    \ \"100\" + t;\n        }\n        if (num.length() == 4) {\n            return\
    \ \"1000\" + t;\n        }\n        if (num.length() == 5) {\n            return\
    \ \"10000\" + t;\n        }\n        if (num.length() == 6) {\n            return\
    \ \"100000\" + t;\n        }\n        if (num.length() == 7) {\n            return\
    \ \"1000000\" + t;\n        }\n        if (num.length() == 8) {\n            return\
    \ \"10000000\" + t;\n        }\n        if (num.length() == 9) {\n           \
    \ return \"100000000\" + t;\n        }\n    }\n    if (num.length() == 1) {\n\
    \        return \"1\" + t + \"0\";\n    }\n    if (num.length() == 2) {\n    \
    \    return \"10\" + t + \"0\";\n    }\n    if (num.length() == 3) {\n       \
    \ return \"100\" + t + \"0\";\n    }\n    if (num.length() == 4) {\n        return\
    \ \"1000\" + t + \"0\";\n    }\n    if (num.length() == 5) {\n        return \"\
    10000\" + t + \"0\";\n    }\n    if (num.length() == 6) {\n        return \"100000\"\
    \ + t + \"0\";\n    }\n    if (num.length() == 7) {\n        return \"1000000\"\
    \ + t + \"0\";\n    }\n    if (num.length() == 8) {\n        return \"10000000\"\
    \ + t + \"0\";\n    }\n    if (num.length() == 9) {\n        return \"100000000\"\
    \ + t + \"0\";\n    }\n    if (num.length() == 10) {\n        return \"1000000000\"\
    \ + t + \"0\";\n    }\n    return t;", "    std::string result = \"\";\n    while\
    \ (x >= base) {\n        long r = x % base;\n        result += to_string(r);\n\
    \        x = x / base;\n    }\n    result += to_string(x);\n    return result;",
  "  long temp = x;\n  char output[128];\n  while (temp > 0) {\n    int r = temp %\
    \ base;\n    temp = temp / base;\n    if (r != 0) {\n      output[temp - r - 1]\
    \ = '1';\n    } else {\n      output[temp - 1] = '0';\n    }\n  }\n  return std::string(output,\
    \ output + strlen(output));", "    std::string result;\n    while (x) {\n    \
    \    long m = x % base;\n        x /= base;\n        // Convert the remainder\
    \ to string.\n        if (m != 0) {\n            result += m + \"\";\n       \
    \ }\n    }\n    return result;", "  // Base numbers are less than 10\n  assert(base\
    \ > 0);\n  std::string s = std::to_string(x);\n  if(base < 10) {\n    // Change\
    \ base to base-10\n    while(!s.empty()) {\n      char c = s.back();\n      s\
    \ = s.replace(s.end()-1, 1, to_string(base % 10));\n      base /= 10;\n    }\n\
    \  }\n  return s;", "\tif (x < 0)\n\t\treturn \"Input number < 0\";\n\tstd::string\
    \ ret = std::to_string(x);\n\tlong tmp;\n\tlong tmp = std::stoi(ret + \"0\", &tmp);\n\
    \ttmp = tmp / base;\n\twhile (tmp < base)\n\t\ttmp += base;\n\twhile (tmp > 0)\
    \ {\n\t\tret += tmp % base;\n\t\ttmp /= base;\n\t}\n\treturn ret;", "    std::string\
    \ s;\n    int digit = x % base;\n    while (digit != 0) {\n        int tmp = x\
    \ / base;\n        s = std::to_string(tmp) + s;\n        digit = x % base;\n \
    \   }\n    while (s.length() < 10) {\n        s = std::to_string(base) + s;\n\
    \    }\n    return s;", "    std::string s;\n    while (base) {\n        if ((x\
    \ & (1L << base)) != 0L)\n            s += char(base + '0');\n        x >>= base;\n\
    \        base--;\n    }\n    return s;", "    std::string str = \"\";\n    while\
    \ (x != 0) {\n        str = std::to_string(x % base) + str;\n        x /= base;\n\
    \    }\n    return str;"]
stop_tokens:
- "\n}"
