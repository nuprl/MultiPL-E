language: cpp
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long long cur;\n    long long sum = 0;\n    long long num_digits =\
    \ 0;\n\n    for (const auto &e: x) {\n        sum += e;\n        num_digits++;\n\
    \    }\n\n    long long remain = sum % 10;\n    ans.push_back(remain);\n    while\
    \ (sum > 0) {\n        cur = sum % 10;\n        if (ans.find(cur) != ans.end())\
    \ {\n            break;\n        }\n        ans.push_back(cur);\n        sum +=\
    \ cur;\n        num_digits++;\n    }\n\n    ans.insert(ans.begin(), num_digits);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph71wlkxz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph71wlkxz.cpp:22:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   22 |         if (ans.find(cur)\
    \ != ans.end()) {\n      |                 ^~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for (long i : x)\n    {\n        long mod = i%10;\n        // if mod\
    \ is 0, then i is an even digit.\n        if (mod != 0)\n        {\n         \
    \   ans.push_back(i);\n        }\n    }\n\n    std::sort(ans.begin(), ans.end());\n\
    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpegjgionr: /tmp/tmpegjgionr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n        std::vector<long>\
    \ result;\n        for (int i = 0; i < x.size(); i++) {\n            int n = x[i];\n\
    \            while (n != 0) {\n                n /= 10;\n            }\n     \
    \       if (n % 2 != 0) {\n                result.push_back(x[i]);\n         \
    \   }\n        }\n        return result;\n    }\n    \nint main() {\n    std::vector<long>\
    \ x{0, 3, 6, 9};\n    auto result = unique_digits(x);\n    for (auto x : result)\
    \ {\n        std::cout << x << \" \";\n    }\n    return 0;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g7weida.cpp:29:5: error: redefinition of \u2018int main()\u2019\
    \n   29 | int main() {\n      |     ^~~~\n/tmp/tmp5g7weida.cpp:21:5: note: \u2018\
    int main()\u2019 previously defined here\n   21 | int main() {\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i != x.size(); ++i) {\n        long long xx = x[i];\n\
    \        if (xx % 2 == 0) {\n            ans += xx;\n        }\n    }\n    std::vector<long>\
    \ ans_list;\n    while (ans > 0) {\n        ans_list.push_back(ans);\n       \
    \ ans /= 10;\n    }\n    return ans_list;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvcc_ejyh: /tmp/tmpvcc_ejyh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    // Step 1: Sort\
    \ the input vector\n    sort(x.begin(), x.end());\n    \n    // Step 2: Find even\
    \ number of elements. \n    // Use std::accumulate to find sum of even number\n\
    \    long sumEven = std::accumulate(x.begin(), x.end(), 0);\n    \n    // Step\
    \ 3: Find position of odd number of elements. \n    // Use std::lower_bound to\
    \ find position\n    auto it = std::lower_bound(x.begin(), x.end(), sumEven);\n\
    \    \n    // Step 4: Use std::partition algorithm to find positions of elements\
    \ that \n    // are odd and even. Return vector that contains odd elements first\
    \ and\n    // even elements last.\n    auto positions = std::partition(x.begin(),\
    \ x.end(), [it](int x) {\n        return (x & 1);\n    });\n    \n    // Step\
    \ 5: Remove odd elements\n    x.erase(positions, x.end());\n    \n    // Step\
    \ 6: Return vector\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4_6hiuhy: /tmp/tmp4_6hiuhy.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    std::vector<long> ans;\n    std::sort(x.begin(),x.end());\n    for\
    \ (long i=0;i<x.size();i++){\n        if(std::count(x.begin(),x.end(),i%2)==0){\n\
    \            ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj00yblw1: /tmp/tmpj00yblw1.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n        std::vector<long>\
    \ ans;\n        ans.reserve(x.size());\n        for (long i : x) {\n         \
    \   assert(i > 0);\n            long sum = 0;\n            long tmp = 0;\n   \
    \         while (sum != i) {\n                tmp = i;\n                sum +=\
    \ tmp % 10;\n                i /= 10;\n            }\n            ans.push_back(tmp);\n\
    \        }\n        sort(ans.begin(), ans.end());\n        return ans;\n    }\n\
    </code>\n<|/ a |>\n<| c |>\nIt would be nice if you explained what you have changed\
    \ and why you changed it. Also note that this does not answer the question. It\
    \ only shows how to fix OP's code\n<|/ c |>\n<| c |>\nThis does not return the\
    \ correct result for the case in question with value `12345`.\n<|/ c |>\n<| c\
    \ |>\nIt does not return correct answer for value `123456` as well. It returns\
    \ value `1235` which is not the required answer.\n<|/ c |>\n<| a |>\nThe answer\
    \ by is correct but it fails to consider negative numbers.\nBelow is an implementation\
    \ that returns correct answer for negative numbers as well:\n<code>\n#include<bits/stdc++.h>\n\
    using namespace std;\nvector<int> unique_digits(vector<int> &v) {\n    vector<int>\
    \ ans;\n    ans.reserve(v.size());\n    for (int i : v) {\n        int sum = 0;\n\
    \        int tmp = 0;\n        while (tmp != i) {\n            tmp = i;\n    \
    \        sum += tmp % 10;\n            i /= 10;\n        }\n        if (sum !=\
    \ 0)\n            ans.push_back(tmp);\n    }\n    sort(ans.begin(), ans.end());\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gf5n7c0.cpp:27:158: warning: missing terminating ' character\n\
    \   27 | It would be nice if you explained what you have changed and why you changed\
    \ it. Also note that this does not answer the question. It only shows how to fix\
    \ OP's code\n      |                                                         \
    \                                                                            \
    \                         ^\n/tmp/tmp1gf5n7c0.cpp:27:158: error: missing terminating\
    \ ' character\n   27 | It would be nice if you explained what you have changed\
    \ and why you changed it. Also note that this does not answer the question. It\
    \ only shows how to fix OP's code\n      |                                   \
    \                                                                            \
    \                                               ^~~~~~~\n/tmp/tmp1gf5n7c0.cpp:30:77:\
    \ error: stray \u2018`\u2019 in program\n   30 | This does not return the correct\
    \ result for the case in question with value `12345`.\n      |               \
    \                                                              ^\n/tmp/tmp1gf5n7c0.cpp:30:83:\
    \ error: stray \u2018`\u2019 in program\n   30 | This does not return the correct\
    \ result for the case in question with value `12345`.\n      |               \
    \                                                                    ^\n/tmp/tmp1gf5n7c0.cpp:33:45:\
    \ error: stray \u2018`\u2019 in program\n   33 | It does not return correct answer\
    \ for value `123456` as well. It returns value `1235` which is not the required\
    \ answer.\n      |                                             ^\n/tmp/tmp1gf5n7c0.cpp:33:52:\
    \ error: stray \u2018`\u2019 in program\n   33 | It does not return correct answer\
    \ for value `123456` as well. It returns value `1235` which is not the required\
    \ answer.\n      |                                                    ^\n/tmp/tmp1gf5n7c0.cpp:33:80:\
    \ error: stray \u2018`\u2019 in program\n   33 | It does not return correct answer\
    \ for value `123456` as well. It returns value `1235` which is not the required\
    \ answer.\n      |                                                      "
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    std::vector<long>\
    \ ans;\n    // Store the digits in stack\n    stack<long> s;\n    // For each\
    \ element x in x, push x on stack\n    for(long x:x) {\n        s.push(x);\n \
    \   }\n    // While stack isn't empty\n    while(!s.empty()) {\n        // Pop\
    \ a number from stack\n        long curr = s.top();\n        s.pop();\n      \
    \  // Get all the digits of curr\n        std::deque<long> digits(std::div(curr,\
    \ 10));\n        // For each digit d in digits\n        for(long d : digits) {\n\
    \            // If d is an even digit, push it on stack\n            if(d % 2\
    \ == 0) {\n                s.push(curr);\n                ans.push_back(curr);\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeni7c51l.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpeni7c51l.cpp:11:5: error: \u2018stack\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stack\u2019?\n   11 |     stack<long>\
    \ s;\n      |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpeni7c51l.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmpeni7c51l.cpp:11:11: error: expected primary-expression\
    \ before \u2018long\u2019\n   11 |     stack<long> s;\n      |           ^~~~\n\
    /tmp/tmpeni7c51l.cpp:14:9: error: \u2018s\u2019 was not declared in this scope\n\
    \   14 |         s.push(x);\n      |         ^\n/tmp/tmpeni7c51l.cpp:17:12: error:\
    \ \u2018s\u2019 was not declared in this scope\n   17 |     while(!s.empty())\
    \ {\n      |            ^\n/tmp/tmpeni7c51l.cpp:22:50: error: call of overloaded\
    \ \u2018div(long int&, int)\u2019 is ambiguous\n   22 |         std::deque<long>\
    \ digits(std::div(curr, 10));\n      |                                       \
    \           ^\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n \
    \                from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpeni7c51l.cpp:2:\n/usr/include/stdlib.h:852:14:\
    \ note: candidate: \u2018div_t div(int, int)\u2019\n  852 | extern div_t div (int\
    \ __numer, int __denom)\n      |              ^~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:47,\n\
    \                 from /tmp/tmpeni7c51l.cpp:2:\n/usr/include/c++/9/cstdlib:177:3:\
    \ note: candidate: \u2018ldiv_t std::div(long int, long int)\u2019\n  177 |  \
    \ div(long __i, long __j) { return ldiv(__i, __j); }\n      |   ^~~\n/usr/include/c++/9/cstdlib:213:3:\
    \ note: candidate: \u2018lldiv_t __gnu_cxx::div(long long int, long long int)\u2019\
    \n  213 |   div(long long __n, long long __d)\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n\
    \  long ans = 0;\n  for(int i=0; i<x.size(); i++) {\n    // ans += x[i]; // sum\
    \ in O(n)\n    ans = ans * 10 + x[i];\n    // O(1) solution\n    result.push_back(ans);\n\
    \  }\n  sort(result.begin(), result.end());\n  for(int i=0; i<result.size(); i++)\
    \ {\n    if(result[i] % 2 == 0) result.erase(result.begin() + i);\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6zumaiou: /tmp/tmp6zumaiou.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> y;\n\
    \  for(int i=0;i<x.size();i++){\n    // if i has any even digit, add i to y\n\
    \    if(digit(x[i])%2==0){\n      y.push_back(x[i]);\n    }\n  }\n  std::sort(y.begin(),y.end());\n\
    \  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ix9yfyg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_ix9yfyg.cpp:11:8: error: \u2018digit\u2019 was not declared\
    \ in this scope\n   11 |     if(digit(x[i])%2==0){\n      |        ^~~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    long sum = 0, carry = 1;\n    for (long elem : x) {\n        sum\
    \ += elem;\n        carry = sum / 10;\n        sum += carry * 10;\n        result.push_back(carry);\n\
    \    }\n    std::sort(result.begin(), result.end(), std::greater<long>());\n \
    \   return result;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp85vs6f5a: /tmp/tmp85vs6f5a.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long ans = 0;\n\
    \    std::sort(x.begin(), x.end());\n    for(long long i = 0; i < x.size(); ++i)\
    \ {\n        long long tmp = std::pow(10, x.size() - i - 1);\n        if(ans <\
    \ tmp && x[x.size() - i - 1] % 2 == 0) {\n            ans = tmp;\n        }\n\
    \    }\n    std::vector<long> anVec;\n    for(long long i = 0; i <= ans; ++i)\
    \ {\n        long long tmp = i / ans;\n        if(x[x.size() - i - 1] % 2 == 0\
    \ && tmp < ans) {\n            anVec.push_back(tmp);\n        }\n    }\n    return\
    \ anVec;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp36hjzx8l: /tmp/tmp36hjzx8l.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::set<int> s;\n\
    \    // sort the list\n    sort(x.begin(), x.end());\n    // now we must fill\
    \ the list\n    for(long y : x) {\n        // if the number doesn't have any even\
    \ digit then \n        // it is already in the list so ignore it\n        int\
    \ cnt = 0;\n        while(y != 0) {\n            if(cnt > 1) \n              \
    \  // we already have 1 even digit so ignore it\n                break;\n    \
    \        y /= 10;\n            cnt++;\n        }\n        if(cnt > 0) \n     \
    \       s.insert(y);\n    }\n    return std::vector<long>(s.begin(), s.end());\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbtw0mn6y: /tmp/tmpbtw0mn6y.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    for(int i=0;i<x.size();i++){\n        long n = x[i];\n        if((n%10)\
    \ != 0){\n            if((n%2) == 0){\n                y.push_back(n);\n     \
    \       }\n        }\n    }\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpis68jj0x: /tmp/tmpis68jj0x.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  // write your code here\n\
    \  assert(x.size() > 0);\n  long long sum = x.front();\n  for (long long i = 2;\
    \ i < x.size(); i++)\n    sum += x[i];\n  std::sort(x.begin(), x.end(), [&sum](int\
    \ a, int b) -> bool {\n    return b < a;\n  });\n  std::vector<long> ret;\n  for\
    \ (auto i : x)\n    if (i % 2 == 0)\n      ret.push_back(i);\n  return ret;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp8v6pdeub: /tmp/tmp8v6pdeub.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int sz = x.size();\n\
    \    std::vector<long> res;\n    res.reserve(sz);\n    for(int i = 0; i < sz;\
    \ ++i) {\n        long v = x[i];\n        if(v % 2 == 0) continue;\n        long\
    \ lastOddDigit = 0;\n        while(lastOddDigit <= 9 && v > 0) {\n           \
    \ assert(lastOddDigit <= 9);\n            lastOddDigit += v % 10;\n          \
    \  v /= 10;\n        }\n        if(lastOddDigit == 0) continue;\n        res.push_back(lastOddDigit);\n\
    \    }\n    res.sort();\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzjs2rffx.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzjs2rffx.cpp:23:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   23 |     res.sort();\n \
    \     |         ^~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  long n = x.size();\n\
    \  std::vector<long> y(n);\n  for (int i = 0; i < n; i++){\n    int cnt = 0;\n\
    \    for(int j=i;j<n;j++){\n      if(x[i]==x[j])\n        cnt++;\n      else\n\
    \        break;\n    }\n    if(cnt==0){\n      y[i] = x[i];\n    }\n  }\n  std::sort(y.begin(),\
    \ y.end());\n  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2s4lq4os: /tmp/tmp2s4lq4os.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    for(long a:x) {\n        if(a%10==0) {\n            long long count=0;\n\
    \            for(long b:x) {\n                if(b%10==0) {\n                \
    \    if(count==0) res.push_back(b);\n                    else res.insert(res.end(),b);\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_9xxccn2: /tmp/tmp_9xxccn2.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y; \n    for(long i=0;i<x.size();i++){\n        if(x[i]>0){\n            long\
    \ y=x[i]/10;\n            y.push_back(y);\n        }\n    }\n    std::sort(y.begin(),\
    \ y.end());\n    for(long i=0;i<y.size();i++){\n        if(y[i]%2==0){\n     \
    \       x.erase(std::remove(x.begin(), x.end(), y[i]), x.end());\n        }\n\
    \    }\n    return x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswrnxkhg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpswrnxkhg.cpp:12:15: error: request for member \u2018push_back\u2019\
    \ in \u2018y\u2019, which is of non-class type \u2018long int\u2019\n   12 | \
    \            y.push_back(y);\n      |               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660093650
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  // your code goes here\n\
    \  std::vector<long> ans;\n  long long curr = 1;\n  for(long i = 1; i < x.size();\
    \ i++) {\n    while(curr % x[i - 1] != 0) {\n      ans.push_back(curr % x[i -\
    \ 1]);\n      curr = curr / (x[i - 1] % 10);\n    }\n  }\n  while(curr % x[0]\
    \ != 0) {\n    ans.push_back(curr % x[0]);\n    curr = curr / (x[0] % 10);\n \
    \ }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n   \
    \ assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp1ismmggd: /tmp/tmp1ismmggd.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    if (x.size() == 0)\
    \ return x;\n    std::vector<long> ans;\n    long d = 0;\n    for (long val: x)\
    \ {\n        d += val;\n    }\n    long sum = 0;\n    for (long val: x) {\n  \
    \      sum += val;\n    }\n    while (d > 0) {\n        long x = d % 10;\n   \
    \     if (x % 2 == 0) {\n            long c = sum / 10;\n            if (c > sum)\
    \ c -= 10;\n            if (c < ans.size()) ans[c] = x;\n        }\n        d\
    \ /= 10;\n    }\n    long an = ans.size();\n    for (long x = 0; x < ans.size();\
    \ x++) ans[x] /= 10;\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgx401rou: /tmp/tmpgx401rou.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    \n    std::vector<long> y;\n    for(long i : x){\n        while(i%10==0){\n\
    \            y.push_back(i);\n            i/=10;\n        }\n    }\n    std::sort(y.begin(),\
    \ y.end());\n    \n    std::vector<long> result;\n    for(long i : y){\n     \
    \   for(long j : x){\n            if(i==j){\n                j=0;\n          \
    \      break;\n            }\n        }\n        result.push_back(i);\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_c8eern3: /tmp/tmp_c8eern3.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ v;\n    for(int i=0;i<x.size();i++){\n        int num = x[i];\n        if(num\
    \ > 9){\n            while(num > 9){\n                v.push_back(num%10);\n \
    \               num /= 10;\n            }\n            v.push_back(num%10);\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++){\n        long num = v[i];\n\
    \        while(num > 0){\n            v.push_back(num%10);\n            num /=\
    \ 10;\n        }\n    }\n    sort(v.begin(),v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Your code here\n\
    \    std::vector<long> result;\n    long t = 0;\n    for (long i = 0; i < x.size();\
    \ ++i) {\n        t *= 10;\n        t += x[i];\n    }\n    t = t % 10;\n    result.push_back(t);\n\
    \    for (int i = 0; i < x.size(); ++i) {\n        t /= 10;\n        t -= x[i];\n\
    \        t /= 10;\n        t += x[i];\n        result.push_back(t);\n    }\n \
    \   sort(result.begin(), result.end());\n    for (long i = 0; i < result.size();\
    \ ++i) {\n        if (result[i] == 0)\n            result.erase(result.begin()\
    \ + i);\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmprowmgu5o: /tmp/tmprowmgu5o.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> ans;\n\
    \  for (long e : x) {\n    int digit = e % 10;\n    if (digit % 2 == 0) {\n  \
    \    ans.push_back(e);\n    }\n  }\n  std::sort(ans.begin(), ans.end());\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsinc_mt2: /tmp/tmpsinc_mt2.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    assert(x.size() !=\
    \ 0);\n    std::vector<long> ans;\n    // Sort the given list to make it easier\
    \ to find out the \n    // even digit.\n    std::sort(x.begin(), x.end());\n \
    \   // Start from the head and go through the list one by one.\n    long cur =\
    \ 0;\n    long long cnt = 0;\n    for (long i = 0; i < x.size(); i++) {\n    \
    \    cur += x[i] * cnt;\n        cnt += 1;\n        // If cur has any even digit,\
    \ then add it to ans.\n        if (cur % 2 == 0) {\n            ans.push_back(cur);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgk157bha: /tmp/tmpgk157bha.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    auto it = std::unique(x.begin(),\
    \ x.end());\n    return std::vector(it, x.end());\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5tl0d5cf: /tmp/tmp5tl0d5cf.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    // Initialize helper variables.\n    long max_num = x[0], min_num\
    \ = x[0];\n    int i = 0, j = 0;\n    // Repeat following loop while i is less\
    \ than x.size().\n    while (i + 1 < x.size()) {\n        // Check if current\
    \ number is greater or equal to current maximum number.\n        // If yes then\
    \ update max_num and current minimum number.\n        if (x[i] >= max_num) {\n\
    \            max_num = x[i];\n            // Update minimum number.\n        \
    \    min_num = x[i];\n        } else {\n            // If current number is not\
    \ greater than current maximum number\n            // then check if current number\
    \ is greater than current minimum\n            // number. If yes then update minimum\
    \ number and current maximum\n            // number.\n            if (x[i] > min_num)\
    \ {\n                min_num = x[i];\n                max_num = x[i];\n      \
    \      } else {\n                // If current number is less than current minimum\
    \ number then\n                // check if current number is greater than current\
    \ maximum\n                // number. If yes then update maximum number and current\
    \ minimum\n                // number.\n                if (x[i] > max_num) {\n\
    \                    max_num = x[i];\n                    min_num = x[i];\n  \
    \              }\n            }\n        }\n        // Increment counter.\n  \
    \      i++;\n    }\n    // Add elements to the sorted list.\n    while (j < x.size())\
    \ {\n        if (x[j] >= max_num) {\n            ans.push_back(x[j]);\n      \
    \  }\n        j++;\n    }\n    // Sort the final sorted list.\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsjoueniv: /tmp/tmpsjoueniv.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long ans = 0;\n  \
    \  for(long &n: x){\n        bool flag = false;\n        long tmp;\n        while(n\
    \ != 0){\n            tmp = n % 10;\n            if(flag == false && tmp & 1){\n\
    \                ans = ans + tmp;\n                flag = true;\n            }\n\
    \            n = n / 10;\n        }\n    }\n    std::vector<long> result;\n  \
    \  for(long &n: x){\n        while(n != 0){\n            tmp = n % 10;\n     \
    \       if(flag == false && tmp & 1){\n                result.push_back(tmp);\n\
    \                flag = true;\n            }\n            n = n / 10;\n      \
    \  }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlh35rvg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprlh35rvg.cpp:24:13: error: \u2018tmp\u2019 was not declared\
    \ in this scope; did you mean \u2018tm\u2019?\n   24 |             tmp = n % 10;\n\
    \      |             ^~~\n      |             tm\n/tmp/tmprlh35rvg.cpp:25:16:\
    \ error: \u2018flag\u2019 was not declared in this scope\n   25 |            \
    \ if(flag == false && tmp & 1){\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    // Write your\
    \ code here.\n    int size = x.size();\n    std::vector<long> ans;\n    for(int\
    \ i=0; i<size; i++){\n        int digit = x[i]/10;\n        int cnt = 1;\n   \
    \     while(digit%10 == 0 && digit != 0){\n            digit /= 10;\n        \
    \    cnt += 1;\n        }\n        if(cnt%2 == 0){\n            ans.push_back(x[i]);\n\
    \        }\n    }\n    ans.sort();\n    \n    return ans;\n}\nint main() {\n \
    \   auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_gup_9dg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_gup_9dg.cpp:23:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   23 |     ans.sort();\n \
    \     |         ^~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Your code here\n\
    \    \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg4avs5zm: /tmp/tmpg4avs5zm.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n   std::vector<long> result;\n\
    \   int n = x.size();\n   assert(n != 0);\n   for(long &i : x){\n      i = abs(i);\n\
    \      assert(i != 0);\n   }\n   long s = 1;\n   for(long i = 0; i <n; i++){\n\
    \      s += x[i]*pow(10, i-1);\n   }\n   if(s == 0)\n      return result;\n  \
    \ result.push_back(0);\n   long last_digit = s/10;\n   while(last_digit % 2 ==\
    \ 0){\n      result.push_back(last_digit/2);\n      last_digit = last_digit/10;\n\
    \   }\n   for(long i =n-1; i >=0; i--){\n      long current = x[i];\n      long\
    \ temp = x[i+1];\n      x[i+1] = current;\n      x[i] = temp;\n   }\n   for(long\
    \ i = 0; i < result.size(); i++)\n      result[i] = abs(result[i]);\n   return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpk0ne8nxn: /tmp/tmpk0ne8nxn.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n\
    \  long temp;\n  long i;\n  // Loop through the list\n  for(long index = 0; index\
    \ < x.size(); index++)\n  {\n    temp = x[index];\n    // Loop the list to check\
    \ if there is even number \n    // and add the digit to result if it's not an\
    \ even number.\n    for(i = index; i< x.size(); i++)\n    {\n      temp = temp*10\
    \ + x[i];\n      if(temp % 2 != 0)\n      {\n        result.push_back(temp);\n\
    \        break;\n      }\n    }\n  }\n  sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpysfm99hk: /tmp/tmpysfm99hk.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long sum = 0;\n\
    \    std::vector<long> ans;\n    for (long i: x) {\n        sum += i;\n    }\n\
    \    for (long i: x) {\n        if (sum % 2 != 0 && sum > i) {\n            ans.push_back(i);\n\
    \        }\n        sum -= i;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpztybcd83: /tmp/tmpztybcd83.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long int sum\
    \ = 0;\n    long long int digit = x[x.size()-1];\n    for(auto i : x)\n    {\n\
    \        sum += i;\n        if(sum & digit)\n            sum -= digit;\n     \
    \   digit = i;\n    }\n    std::vector<long> ans;\n    long long int sum2 = 0;\n\
    \    for(auto i : x)\n    {\n        if(sum2 & i)\n            sum2 -= i;\n  \
    \      ans.push_back(i);\n        sum2 += i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmptqvoeyv1: /tmp/tmptqvoeyv1.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n   long temp[MAXN];\n\
    \   long n=x.size();\n   long i=0;\n   long j=0;\n   std::sort(x.begin(), x.end());\n\
    \   for (long l=n; l>0; l--) {\n      while (j<i && x[j]*10+x[i]%10==0) {\n  \
    \       i++;\n         temp[i]=x[j];\n         j++;\n      }\n      temp[i]=x[j];\n\
    \      i++;\n      j++;\n   }\n   std::vector<long> res(MAXN);\n   i=0;\n   for\
    \ (long l=0; l<n; l++) {\n      if (temp[i]==0) res[l]=x[l];\n      i++;\n   }\n\
    \   return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphp1cpkqk.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphp1cpkqk.cpp:8:14: error: \u2018MAXN\u2019 was not declared\
    \ in this scope\n    8 |    long temp[MAXN];\n      |              ^~~~\n/tmp/tmphp1cpkqk.cpp:16:10:\
    \ error: \u2018temp\u2019 was not declared in this scope\n   16 |          temp[i]=x[j];\n\
    \      |          ^~~~\n/tmp/tmphp1cpkqk.cpp:19:7: error: \u2018temp\u2019 was\
    \ not declared in this scope\n   19 |       temp[i]=x[j];\n      |       ^~~~\n\
    /tmp/tmphp1cpkqk.cpp:26:11: error: \u2018temp\u2019 was not declared in this scope\n\
    \   26 |       if (temp[i]==0) res[l]=x[l];\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    if (x.size() < 1)\
    \ return x;\n    std::vector<long> v;\n    long ans = 0;\n    long long p = 1;\n\
    \    long long sum = 0;\n    long long cur = 0;\n    for (auto it = x.begin();\
    \ it != x.end(); it++) {\n        sum += *it;\n        cur = sum;\n        while\
    \ (cur > 0) {\n            ans += cur % 10;\n            cur /= 10;\n        }\n\
    \        if (!v.empty() && v.back() == ans)\n            v.back()++;\n       \
    \ else\n            v.push_back(ans);\n    }\n    std::sort(v.begin(), v.end());\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpttf2pqui: /tmp/tmpttf2pqui.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093652
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    long count[26] = {0};\n    for (long i = 0; i < x.size(); i++) {\n \
    \       count[x[i]-'0']++;\n    }\n    for (long i = 0; i < 26; i++) {\n     \
    \   if (count[i] > 0) {\n            long r = count[i]-1;\n            while (r\
    \ >= 0) {\n                y.push_back(i+r);\n                r--;\n         \
    \   }\n        }\n    }\n    sort(y.begin(), y.end());\n    return y;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsm0x4udc: /tmp/tmpsm0x4udc.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  assert(x.size() > 0);\n\
    \  std::vector<long> y;\n  long s = 0;\n  for (long i: x)\n  {\n    s = s*10 +\
    \ i;\n  }\n  std::vector<long> tmp;\n  for (long i = s; i > 0; i/= 10)\n  {\n\
    \    long p = i%10;\n    if (p.second == 0)\n    {\n      y.push_back(i);\n  \
    \    tmp.push_back(i);\n    }\n  }\n  std::vector<long> ans;\n  for (auto i :\
    \ tmp)\n  {\n    bool found = false;\n    for (auto j: y)\n    {\n      if (i\
    \ == j) found = true;\n    }\n    if (!found)\n      ans.push_back(i);\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_usdfpdx.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_usdfpdx.cpp:19:11: error: request for member \u2018second\u2019\
    \ in \u2018p\u2019, which is of non-class type \u2018long int\u2019\n   19 | \
    \    if (p.second == 0)\n      |           ^~~~~~\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long ret = 0;\n\
    \    for (auto i : x) {\n        long long tmp = i;\n        while (tmp != 0)\
    \ {\n            tmp /= 10;\n        }\n        long long lastDigit = tmp;\n \
    \       while (lastDigit >= 10) {\n            ret += lastDigit % 10;\n      \
    \      lastDigit /= 10;\n        }\n    }\n    return std::vector<long>(&ret,\
    \ &ret + ret);\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7vehq8f9: /tmp/tmp7vehq8f9.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n   std::vector<long> v(x.size());\n\
    \   for(auto i = 0L; i < v.size(); ++i) {\n      v[i] = x[i]%10;\n   }\n   std::sort(v.begin(),v.end());\n\
    \   std::vector<long> res;\n   res.reserve(v.size());\n   for(auto i = 0L; i <\
    \ v.size(); ++i) {\n      if(!(i%2)) {\n         res.push_back(v[i]);\n      }\n\
    \   }\n   return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpl2nbvh2r: /tmp/tmpl2nbvh2r.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n\
    \  long curr = x.front();\n  res.push_back(curr);\n  \n  for (long i : x) {\n\
    \    if (i % 10 != 0) {\n      res.push_back(i);\n    }\n  }\n  std::sort(res.begin(),\
    \ res.end());\n  return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp6dgj5aip: /tmp/tmp6dgj5aip.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long long sum = 0;\n    for (auto i : x) {\n        sum += i;\n  \
    \      if (sum % 10 == 0)\n            ans.push_back(i);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_lsuz13g: /tmp/tmp_lsuz13g.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n\tstd::vector<long> v(x.size());\n\
    \tfor (int i = 0; i < x.size(); i++) {\n\t\tlong v = x[i]/10;\n\t\tint r = x[i]%10;\n\
    \t\tv[r] = v;\n\t}\n\tstd::sort(v.begin(), v.end());\n\tint count = 0;\n\tstd::vector<long>\
    \ res(v.size());\n\tfor (long i : v) {\n\t\tif (!res[count] % 2) {\n\t\t\tres[count]\
    \ = i;\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cfgg15v.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7cfgg15v.cpp:12:6: error: invalid types \u2018long int[int]\u2019\
    \ for array subscript\n   12 |   v[r] = v;\n      |      ^\n"
  stdout: ''
  timestamp: 1660093651
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    std::vector<long> result;\n    long long sum = 0;\n    long long count\
    \ = 0;\n    for(long long i = 0; i < x.size(); i++) {\n        if(!x[i] || !x[i]\
    \ % 2 || !x[i] % 10) {\n            sum += x[i];\n            count++;\n     \
    \       result.push_back(x[i]);\n        }\n    }\n    long long even = sum /\
    \ count;\n    for(long long i = 0; i < x.size(); i++) {\n        if(!x[i] || !x[i]\
    \ % 2 || !x[i] % 10 || x[i] == even) {\n            result.push_back(x[i]);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long cnt = 0;\n    for(long i : x)\n        cnt += i;\n    if(cnt\
    \ > 0)\n    {\n        for(long i = 1, cnt2 = cnt; i < (long)x.size(); i++)\n\
    \        {\n            if(cnt2 % 2 == 0)\n            {\n                cnt2\
    \ /= 2;\n                ans.push_back(x[i]);\n                cnt = cnt2;\n \
    \           }\n            else\n                cnt2 /= 10;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmped9zc7_b: /tmp/tmped9zc7_b.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093651
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Your code here\n\
    \    std::vector<long> res;\n    for (long i : x) res.push_back(i);\n    std::sort(res.begin(),\
    \ res.end());\n    res.erase(std::unique(res.begin(), res.end()), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpl92ctlkn: /tmp/tmpl92ctlkn.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093653
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long sum = 0;\n\
    \    std::vector<long> temp;\n    for (long long i = 0; i < x.size(); i++) {\n\
    \        int tmp = 0;\n        while (x % 10 == 0)\n            tmp++;\n     \
    \   sum += x;\n        if (tmp == 0)\n            temp.push_back(i);\n       \
    \ x = x / 10;\n    }\n    long long ans = 0;\n    for (long long i = 0; i < temp.size();\
    \ i++) {\n        while (temp[i] % 2 == 0)\n            ans += temp[i] * temp[i];\n\
    \        temp.erase(temp.begin() + i);\n    }\n    ans += sum;\n    return std::vector<long>(temp.begin(),\
    \ temp.end());\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5iok25u.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo5iok25u.cpp:12:18: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   12 |         while (x % 10 == 0)\n      |                ~ ^ ~~\n      | \
    \               |   |\n      |                |   int\n      |               \
    \ std::vector<long int>\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpo5iok25u.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpo5iok25u.cpp:12:20: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   12 |         while (x % 10 == 0)\n      |                    ^~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpo5iok25u.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/incl"
  stdout: ''
  timestamp: 1660093653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    if (x.size() == 0)\n\
    \        return {};\n    long temp = 0;\n    for (long d: x)\n    {\n        if\
    \ (d % 2 == 0)\n            temp = temp * 10 + (d % 10);\n        else\n     \
    \       temp = temp * 10 + (d / 10);\n    }\n    std::vector<long> y;\n    if\
    \ (temp % 2 == 0)\n        y.push_back(temp);\n    else\n    {\n        for (long\
    \ i = temp; i > 0; i /= 10)\n            y.push_back(i % 10);\n    }\n    return\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpmcla3lzx: /tmp/tmpmcla3lzx.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Write your code\
    \ here\n    std::vector<long> y;\n    for (long i = x.size(); i >= 0; i--) {\n\
    \        long n = x[i];\n        while (n) {\n            if (n % 10 != 0)\n \
    \               y.push_back(n);\n            n = n / 10;\n        }\n    }\n \
    \   return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpudsqf7ad: /tmp/tmpudsqf7ad.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    assert(x.size() >\
    \ 0);\n    std::vector<long> ans;\n    for (long long i = x.size() - 1; i >= 0;\
    \ i--) {\n        if (x[i] % 2 == 0) ans.push_back(x[i]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpezck0oho: /tmp/tmpezck0oho.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    for (long i : x) {\n        if (i & 1) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7yjiv21x: /tmp/tmp7yjiv21x.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> ret;\n\
    \  for (long n : x) {\n    if (n & 1) ret.push_back(n);\n  }\n  std::sort(ret.begin(),\
    \ ret.end());\n  return ret;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc5zesum4: /tmp/tmpc5zesum4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::set<int> s;\n\
    \    for (long & v : x) s.insert(v % 10);\n    std::vector<long> ans;\n    ans.reserve(x.size());\n\
    \    \n    long ans = x[0];\n    for (long i : x) { \n        if (s.find(i) ==\
    \ s.end()) ans += i;\n    }\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwnvm3tm.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkwnvm3tm.cpp:13:10: error: conflicting declaration \u2018\
    long int ans\u2019\n   13 |     long ans = x[0];\n      |          ^~~\n/tmp/tmpkwnvm3tm.cpp:10:23:\
    \ note: previous declaration as \u2018std::vector<long int> ans\u2019\n   10 |\
    \     std::vector<long> ans;\n      |                       ^~~\n/tmp/tmpkwnvm3tm.cpp:15:39:\
    \ error: no match for \u2018operator+=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018long int\u2019)\n   15 |         if (s.find(i) == s.end())\
    \ ans += i;\n      |                                   ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660093653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  // Your code here\n\
    \  assert(x.size() <= 1000);\n  std::set<long> s;\n  for(int i = 0; i < x.size();\
    \ i++){\n    long v = x[i];\n    if(s.find(v) != s.end()){\n      s.erase(v);\n\
    \    }\n    else{\n      s.insert(v);\n    }\n  }\n  std::vector<long> ans;\n\
    \  for(long e : s){\n    ans.push_back(e);\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvb5835wu: /tmp/tmpvb5835wu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    std::sort(x.begin(),\
    \ x.end());\n    int cnt = 0;\n    \n    for(long i : x) {\n        if((cnt %\
    \ 2 == 0) && (i >= 10)) {\n            cnt++;\n        }\n        else {\n   \
    \         x.erase(std::remove(x.begin(), x.end(), i), x.end());\n            cnt++;\n\
    \        }\n    }\n    \n    std::sort(x.begin(), x.end());\n    std::vector<long>\
    \ result;\n    for(long i : x) {\n        if(i >= 10) {\n            result.push_back(i);\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpuyfhmjk6: /tmp/tmpuyfhmjk6.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long ans = 0;\n  \
    \  \n    for(auto n : x)\n    {\n        if(n % 10 == 0)\n        {\n        \
    \    ans += 1;\n            \n            for(long i = n; i / 10 != 0; i = i /\
    \ 10)\n            {\n                ans += (i % 10) * 2;\n            }\n  \
    \      }\n    }\n    \n    std::vector<long> ans_list;\n    ans_list.push_back(ans);\n\
    \    \n    return ans_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7ftoyxk0: /tmp/tmp7ftoyxk0.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> y;\n\
    \  long long u = 0;\n  for (int i = 0; i < x.size(); i++) {\n    if (x[i] % 2\
    \ == 0) {\n      u = x[i] + u;\n      y.push_back(u);\n    }\n  }\n  return y;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpviazw2m7: /tmp/tmpviazw2m7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n\
    \  long s = 0;\n  for (auto &i : x)\n    s += i;\n  for (auto &i : x)\n    if\
    \ (i % 2 == 0)\n      result.push_back(i);\n  for (auto &i : x)\n    if (i !=\
    \ s) {\n      result.push_back(i);\n    }\n  return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5xp7w6ut: /tmp/tmp5xp7w6ut.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    long temp;\n    for (long &i:x){\n        temp=0;\n        while(i){\n\
    \            temp+=i/10;\n            i-=i/10;\n        }\n        if(temp%2)\n\
    \            res.push_back(i);\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    for(long &i: x) res.push_back(i);\n    \n    res.sort();\n    \n \
    \   std::vector<long> ans;\n    for(long i=0; i<res.size(); i++){\n        if(res[i]\
    \ % 2 == 0){\n            if(ans.empty() || ans.back() < res[i]){\n          \
    \      ans.push_back(res[i]);\n            }\n            else{\n            \
    \    std::pair<long, long> prev = ans.back();\n                if(res[i] != prev.first\
    \ + prev.second){\n                    ans.push_back(res[i]);\n              \
    \  }\n            }\n        }\n    }\n    \n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1avkj0mc.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1avkj0mc.cpp:11:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   11 |     res.sort();\n \
    \     |         ^~~~\n/tmp/tmp1avkj0mc.cpp:20:54: error: conversion from \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to non-scalar type \u2018std::pair<long int, long\
    \ int>\u2019 requested\n   20 |                 std::pair<long, long> prev = ans.back();\n\
    \      |                                              ~~~~~~~~^~\n"
  stdout: ''
  timestamp: 1660093653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Your code goes\
    \ here\n    std::vector<long> ans;\n    long temp;\n    for(long i=0;i<x.size();i++)\
    \ {\n        if(i%2 == 0) {\n            temp = x[i];\n            for(long j=i+1;j<x.size();j++)\
    \ {\n                if(x[j]%2 == 0) {\n                    temp = x[j];\n   \
    \                 break;\n                }\n            }\n            ans.push_back(temp);\n\
    \        }\n    }\n    \n    sort(ans.begin(),ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpt35941w7: /tmp/tmpt35941w7.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ output;\n    std::set<long> set;\n    for (long i: x) {\n        if (set.count(i))\
    \ continue;\n        set.insert(i);\n        output.push_back(i);\n    }\n   \
    \ return output;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpty4p9f6r: /tmp/tmpty4p9f6r.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    for(int i=0;i<x.size();i++){\n        int count=0;\n        for(int\
    \ j=0;j<i;j++){\n            if(x[j]%10==x[i]%10){\n                count++;\n\
    \            }\n        }\n        if(count>1)\n        y.push_back(x[i]);\n \
    \   }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n \
    \   assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp610tksm6: /tmp/tmp610tksm6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    long long x0 = x[0];\n    long long x1 = x[1];\n    long long x2 =\
    \ x[2];\n    long long x3 = x[3];\n    long long x4 = x[4];\n    long long x5\
    \ = x[5];\n    long long x6 = x[6];\n    long long x7 = x[7];\n    long long x8\
    \ = x[8];\n    long long x9 = x[9];\n    long long x10 = x[10];\n    long long\
    \ x11 = x[11];\n    long long x12 = x[12];\n    long long x13 = x[13];\n    long\
    \ long x14 = x[14];\n    long long x15 = x[15];\n    long long x16 = x[16];\n\
    \    long long x17 = x[17];\n    long long x18 = x[18];\n    long long x19 = x[19];\n\
    \    long long x20 = x[20];\n    long long x21 = x[21];\n    long long x22 = x[22];\n\
    \    long long x23 = x[23];\n    long long x24 = x[24];\n    long long x25 = x[25];\n\
    \    long long x26 = x[26];\n    long long x27 = x[27];\n    long long x28 = x[28];\n\
    \    long long x29 = x[29];\n    long long x30 = x[30];\n    long long x31 = x[31];\n\
    \    long long x32 = x[32];\n    long long x33 = x[33];\n    long long x34 = x[34];\n\
    \    long long x35 = x[35];\n    long long x36 = x[36];\n    long long x37 = x[37];\n\
    \    long long x38 = x[38];\n    long long x39 = x[39];\n    long long x40 = x[40];\n\
    \    long long x41 = x[41];\n    long long x42 = x[42];\n    long long x43 = x[43];\n\
    \    long long x44 = x[44];\n    long long x45 = x[45];\n    long long x46 = x[46];\n\
    \    long long x47 = x[47];\n    long long x48 = x[48];\n    long long x49 = x[49];\n\
    \    long long x50 = x[48];\n    long long x51 = x[49];\n    long long x52 = x[50];\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmppfdsywv8: /tmp/tmppfdsywv8.cpp:65: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  assert(x.size() > 0);\n\
    \  std::vector<long> ans;\n  \n  // Iterate through each element of x\n  for (long\
    \ i: x) {\n    // Iterate through each digit of i\n    for (auto j: i%10) {\n\
    \      // If i doesn't contain any even digit, push it into ans vector.\n    \
    \  if (j%2 != 0) ans.push_back(i);\n    }\n  }\n  return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphat5i9ub.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphat5i9ub.cpp:14:20: error: \u2018begin\u2019 was not declared\
    \ in this scope\n   14 |     for (auto j: i%10) {\n      |                   \
    \ ^~\n/tmp/tmphat5i9ub.cpp:14:20: note: suggested alternatives:\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmphat5i9ub.cpp:2:\n/usr/include/c++/9/valarray:1224:5: note:   \u2018\
    std::begin\u2019\n 1224 |     begin(const valarray<_Tp>& __va)\n      |     ^~~~~\n\
    In file included from /usr/include/c++/9/filesystem:38,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n                 from\
    \ /tmp/tmphat5i9ub.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:516:3: note:   \u2018\
    std::filesystem::__cxx11::begin\u2019\n  516 |   begin(recursive_directory_iterator\
    \ __iter) noexcept\n      |   ^~~~~\n/tmp/tmphat5i9ub.cpp:14:20: error: \u2018\
    end\u2019 was not declared in this scope\n   14 |     for (auto j: i%10) {\n \
    \     |                    ^~\n/tmp/tmphat5i9ub.cpp:14:20: note: suggested alternatives:\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmphat5i9ub.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmphat5i9ub.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660093653
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    int flag = 0;\n    long count = 0;\n    std::vector<long> ans;\n \
    \   for (long x : x) {\n        if(x % 2 == 0) {\n            count++;\n     \
    \       ans.push_back(x);\n        }\n    }\n    std::sort(ans.begin(), ans.end(),\
    \ [](long a, long b){return a <= b;});\n    std::vector<long>::iterator it;\n\
    \    for (it = ans.begin(); it != ans.end(); it++) {\n        if(*it % 2 == 0){\n\
    \            count++;\n            ans.erase(ans.begin());\n            break;\n\
    \        }\n    }\n    if(count > 0){\n        flag = 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsn_ij8qz: /tmp/tmpsn_ij8qz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y(x.size());\n    for (long i = 1; i < x.size(); i++) {\n        if (x.at(i)\
    \ % 2 == 0) {\n            y[i] = x.at(i);\n        }\n    }\n    std::sort(y.begin(),\
    \ y.end());\n    std::vector<long> res(y.size());\n    for (long i = 0; i < y.size();\
    \ i++) {\n        res[i] = y[y.size() - i - 1];\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsb7oya3c: /tmp/tmpsb7oya3c.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ v;\n    // Write your code here\n    for (long i : x)\n    {\n        int remainder\
    \ = 0;\n        for (int j = 0; j < i; j++)\n        {\n            int rem =\
    \ i % 10; \n            remainder = rem % 10;\n            if (rem == 0) \n  \
    \              v.push_back(i);\n            i = j;\n        }\n        if (remainder\
    \ != 0)\n            v.push_back(i);\n    }\n    sort(v.begin(), v.end());\n \
    \   return v;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpm3hzhz4l: /tmp/tmpm3hzhz4l.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    // Your code goes here\n    for (auto it=x.begin(); it != x.end();\
    \ it++) {\n        for (auto jt=it; jt!=x.end(); jt++) {\n            if (*it%10\
    \ == *jt%10) {\n                break;\n            }\n        }\n        res.push_back(*it);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpg0l4nm0w: /tmp/tmpg0l4nm0w.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  assert(x.size() > 0);\n\
    \  std::vector<long> output;\n  \n  for(int i = 0; i < x.size(); i++){\n    int\
    \ cnt = 0;\n    long rem = x[i];\n    while(true){\n      while(rem){\n      \
    \  if((rem % 10) % 2 == 0) cnt++;\n        rem /= 10;\n      }\n      if(cnt ==\
    \ 0) break;\n      rem = x[i];\n    }\n    output.push_back(x[i]);\n  }\n\n  std::sort(output.begin(),\
    \ output.end());\n  return output;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for (long i : x) {\n        // If current digit/element % 2 = 0 then\
    \ we can skip it.\n        if ((i % 2) == 0) {\n            continue;\n      \
    \  }\n        // If element doesn't have any even digit then push it to ans vector.\n\
    \        for (long j = i; j > (i / 10) * 10; j = (j / 10) * 10) {\n          \
    \  if ((j % 2) == 0) {\n                ans.push_back(j);\n            }\n   \
    \     }\n    }\n    // Return answer.\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmputlasn2i: /tmp/tmputlasn2i.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for(auto &i : x) {\n        if(std::find(std::begin(ans), std::end(ans),\
    \ i) == std::end(ans)){\n            ans.push_back(i);\n        }\n    }\n   \
    \ long long ans2=ans.size()-1;\n    for(auto i=0;i<ans.size();i++) {\n       \
    \ if(ans[i]%2==0) {\n            std::swap(ans[i],ans[i+1]);\n        }\n    }\n\
    \    while(ans2>0){\n        std::swap(ans[ans2],ans[ans2-1]);\n        ans2--;\n\
    \    }\n    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfnt9q8ai: /tmp/tmpfnt9q8ai.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    if(x.size() == 0)\n\
    \        return {};\n    \n    std::set<int> s;\n    \n    for(long i:x) {\n \
    \       int r = i % 10;\n        if(r == 0)\n            continue;\n        s.insert(r);\n\
    \    }\n    \n    std::vector<long> res;\n    \n    for(std::set<int>::iterator\
    \ it=s.begin(); it != s.end(); ++it) {\n        if(it+1 != s.end()) {\n      \
    \      long temp = *it;\n            for(std::set<int>::iterator it1=s.end()-1;\
    \ it1 != it; ++it1) {\n                long temp2 = *it1;\n                if(temp2\
    \ == temp)\n                    break;\n            }\n            if(it1 == s.end()-1)\n\
    \                res.push_back(temp);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmbj6aumn.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmbj6aumn.cpp:23:14: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::set<int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<int>\u2019\
    } and \u2018int\u2019)\n   23 |         if(it+1 != s.end()) {\n      |       \
    \     ~~^~\n      |            |  |\n      |            |  int\n      |      \
    \      std::set<int>::iterator {aka std::_Rb_tree_const_iterator<int>}\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmbj6aumn.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpmbj6aumn.cpp:23:15:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   23 |         if(it+1 != s.end()) {\n      |        \
    \       ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmbj6aumn.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~"
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Your code here\n\
    \    long long ans=0;\n    for(long long i=0;i<x.size();i++)\n    {\n        long\
    \ long temp=x[i];\n        if(temp%2==0)\n            ans=temp;\n    }\n    std::vector<long>\
    \ temp;\n    long long cnt=0;\n    for(int i=0;i<x.size();i++)\n    {\n      \
    \  if(ans>0)\n        {\n            long long sum=ans/10;\n            long long\
    \ rev=ans-(sum*10);\n            if(rev%2==0)\n            {\n               \
    \ temp.resize(0);\n                temp.push_back(x[i]);\n                temp.push_back(x[i]);\n\
    \                for(int j=0;j<temp.size();j++)\n                {\n         \
    \           if(x[i]%10!=temp[j])\n                        cnt++;\n           \
    \     }\n                ans=rev;\n            }\n        }\n    }\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpj2k8s8yk: /tmp/tmpj2k8s8yk.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    if (x.size() == 0)\
    \ {\n        return {}; // empty\n    }\n    std::vector<long> y(x.begin(), x.end());\
    \ // copy to another vector\n    std::sort(y.begin(), y.end()); // sort in increasing\
    \ order\n    std::vector<long> r;\n    for (long i=y.size()-1; i>=0; i--) {\n\
    \        if ((y[i]%10)==0) {\n            // this digit's even exist, so we store\
    \ it\n            r.push_back(y[i]);\n            y[i]=0; // zero out this digit\n\
    \        }\n    }\n    return r;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmprqw6p1sv: /tmp/tmprqw6p1sv.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    long long sum = 0;\n    for (int i = 0; i < x.size(); i++) {\n   \
    \     sum += x[i];\n    }\n    std::vector<long> ans;\n    while (sum > 0) {\n\
    \        long long d = (long long) sum % 10;\n        if (d % 2 != 0) {\n    \
    \        ans.push_back(d);\n        }\n        sum -= d;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093659
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    for(long i = 1;i<x.size();i++)\n    {\n        long ans = x[x.size()-i]/ans;\n\
    \    }\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    // Your code here\n    for(auto &v : x) assert(v > 0);\n    for(auto\
    \ &v : x) {\n        if(v % 2 == 0) res.push_back(v);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmph2iemvcn: /tmp/tmph2iemvcn.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    assert(x.size() >=\
    \ 1);\n    auto unique_vals = std::set<long>();\n    for(long i:x) {\n       \
    \ unique_vals.insert(i);\n    }\n    return unique_vals;\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgdgewz87.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgdgewz87.cpp:13:12: error: could not convert \u2018unique_vals\u2019\
    \ from \u2018std::set<long int>\u2019 to \u2018std::vector<long int>\u2019\n \
    \  13 |     return unique_vals;\n      |            ^~~~~~~~~~~\n      |     \
    \       |\n      |            std::set<long int>\n"
  stdout: ''
  timestamp: 1660093654
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long y = 0;\n\
    \    long long result = 0;\n    for(int i = 0; i < x.size(); ++i){\n        y\
    \ = x * 10;\n        result += (y * i);\n    }\n    std::sort(x.begin(), x.end(),\
    \ [](const long long &x, const long long &y) {\n        return x <= y;\n    });\n\
    \    std::vector<long> results;\n    for(int i = x.size() - 1; i >= 0; --i){\n\
    \        result += (y * i);\n        if(result % 2 != 0){\n            results.push_back(result);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddkhqiab.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpddkhqiab.cpp:11:15: error: no match for \u2018operator*\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   11 |         y = x * 10;\n      |             ~ ^ ~~\n      |            \
    \ |   |\n      |             |   int\n      |             std::vector<long int>\n\
    In file included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpddkhqiab.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpddkhqiab.cpp:11:17:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   11 |         y = x * 10;\n      |                 ^~\nIn file included from\
    \ /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpddkhqiab.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpddkhqiab.cpp:11:17:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   11 |         y = x * 10;\n      |                 ^~\nIn file included from\
    \ /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpddkhqiab.cpp:2:\n/usr/include/c++/9/complex:409:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ _Tp&, const std::comple"
  stdout: ''
  timestamp: 1660093654
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    long long sum = 0;\n    for (long long i : x) {\n        sum +=\
    \ i;\n    }\n    long long mod = sum % 10;\n    long long count = sum / 10;\n\
    \    if (mod != 0) {\n        while (mod != 0) {\n            result.push_back(mod);\n\
    \            count -= 1;\n            if (count == 0) {\n                break;\n\
    \            }\n            sum += 10;\n            mod = sum % 10;\n        }\n\
    \        mod = sum % 10;\n    }\n    while (count != 0) {\n        result.push_back(count);\n\
    \        sum -= 1;\n        count = sum / 10;\n        mod = sum % 10;\n    }\n\
    \    std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpuqzpqfja: /tmp/tmpuqzpqfja.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    std::map<long, bool> seen;\n\n    for (auto e : x) {\n        seen[e]\
    \ = false;\n    }\n\n    for (auto e : x) {\n        if (seen[e]) {\n        \
    \    continue;\n        }\n        ans.push_back(e);\n        seen[e] = true;\n\
    \    }\n\n    sort(ans.begin(), ans.end());\n\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc_gb6_2r: /tmp/tmpc_gb6_2r.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long sum = 0;\n  \
    \  for (long y : x)\n        sum += y;\n    std::vector<long> res(x.size());\n\
    \    for (long &x : res)\n        x = sum - x % 10; // sum is always divisible\
    \ by 10\n    return std::move(res);\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxl8malrt: /tmp/tmpxl8malrt.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long sum = 0;\n  \
    \  std::vector<long> ans;\n    for(long i : x)\n    {\n        sum += i;\n   \
    \     if((sum%10)!=0)\n        {\n            ans.push_back(i%10);\n        }\n\
    \    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9anrhz7v: /tmp/tmp9anrhz7v.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long u = 0;\n\
    \    for(long long i:x)\n        u += (long long)i;\n    std::vector<long> out;\n\
    \    long long count = 0;\n    while(true)\n    {\n        out.push_back(0);\n\
    \        for(long long i:x)\n        {\n            if(u % 10 == 0)\n        \
    \    {\n                out.push_back(u / 10);\n                u %= 10;\n   \
    \         }\n            else\n            {\n                out.push_back(i%10);\n\
    \            }\n            count += 1;\n        }\n        if(!out.back())\n\
    \        {\n            out.push_back(count); // last digit of unique elements.\n\
    \            break;\n        }\n        if(out.back() == count)\n            break;\
    \ // all elements are unique.\n    }\n    return out;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  assert(x.size() > 0);\n\
    \  std::vector<long> y;\n  long cur = 0, last = 0; \n  for (int i=0; i<x.size();\
    \ i++) {\n    long v = x[i] + cur;\n    last = (v & 1L) == 0L;\n    cur = v %\
    \ 10L;\n    if (last && cur == 0) y.push_back(x[i]);\n  }\n  sort(y.begin(), y.end());\n\
    \  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb_fx0b4a: /tmp/tmpb_fx0b4a.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n\
    \  for(long i: x){\n      if(i % 2 == 0)\n          result.push_back(i);\n  }\n\
    \  std::sort(result.begin(),result.end());\n  return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpb_dyg88h: /tmp/tmpb_dyg88h.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for(auto &x:x)\n    {\n        long digit = 0;\n        while(x>0)\n\
    \        {\n            digit += x % 10;\n            x /= 10;\n        }\n  \
    \      if(digit % 2 == 0)\n            ans.push_back(digit);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpqzxj9517: /tmp/tmpqzxj9517.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ results;\n    long counter = 0;\n    long current;\n    for (auto num : x)\n\
    \    {\n        current = num % 10;\n        if (current % 2 == 0)\n        {\n\
    \            counter++;\n        }\n    }\n    for (auto num : x)\n    {\n   \
    \     current = num % 10;\n        if (current % 2 != 0)\n        {\n        \
    \    results.push_back(num);\n        }\n    }\n    return results;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpavp3hb7f: /tmp/tmpavp3hb7f.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  // your code here\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpip2pb2ck: /tmp/tmpip2pb2ck.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    long flag = 0;\n    for (long i : x) {\n        if (flag & 1){\n   \
    \         y.push_back(i);\n        }\n        if ((i & 1) != 0) {\n          \
    \  flag = flag << 1;\n        }\n    }\n    return y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsjyy0lls: /tmp/tmpsjyy0lls.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int n = x.size();\n\
    \    // a vector for storing unique element\n    std::vector<long> u;\n    for(int\
    \ i=0;i<n;i++) {\n        // a vector for storing all elements that not include\
    \ x.at(i)\n        std::vector<long> v;\n        for(int j=0;j<i;j++) {\n    \
    \        if((x[i] % 10) == 0) {\n                v.push_back(x[j]);\n        \
    \    }\n        }\n        if(v.size() > 0) {\n            // if all elements\
    \ include x.at(i), then add it to unique vector\n            u.insert(u.end(),\
    \ v.begin(), v.end());\n        }\n    }\n    return u;\n}\nint main() {\n   \
    \ auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcw7omh4f: /tmp/tmpcw7omh4f.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093656
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    // write your\
    \ code here\n    \n    std::vector<long> sorted_list;\n    int even_cnt = 0;\n\
    \    for(long i : x){\n        while(x % 10 == 0){\n            sorted_list.push_back(i);\n\
    \            x /= 10;\n            even_cnt++;\n        }\n    }\n    assert(even_cnt\
    \ == 0);\n    return sorted_list;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpskj6tyzt.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpskj6tyzt.cpp:14:17: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   14 |         while(x % 10 == 0){\n      |               ~ ^ ~~\n      |  \
    \             |   |\n      |               |   int\n      |               std::vector<long\
    \ int>\nIn file included from /usr/include/c++/9/valarray:603,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n            \
    \     from /tmp/tmpskj6tyzt.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpskj6tyzt.cpp:14:19: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   14 |         while(x % 10 == 0){\n      |                   ^~\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpskj6tyzt.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c"
  stdout: ''
  timestamp: 1660093655
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for(int i=0;i<x.size();++i)\n    {\n        while(x % 10 == 0)\n \
    \       {\n            x.erase(x.begin()+i);\n            ans.insert(ans.begin()+i,x[i]);\n\
    \        }\n        x += x[i];\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyxl5ybp.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfyxl5ybp.cpp:11:17: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   11 |         while(x % 10 == 0)\n      |               ~ ^ ~~\n      |   \
    \            |   |\n      |               |   int\n      |               std::vector<long\
    \ int>\nIn file included from /usr/include/c++/9/valarray:603,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n            \
    \     from /tmp/tmpfyxl5ybp.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpfyxl5ybp.cpp:11:19: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   11 |         while(x % 10 == 0)\n      |                   ^~\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpfyxl5ybp.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++"
  stdout: ''
  timestamp: 1660093655
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    \n    for(int i = 0; i < x.size(); i++){\n        if((x[i - 1] % 2\
    \ != 0) || (x[i] % 2 != 0))\n            ans.push_back(x[i]);\n    }\n\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpuw84uvir: /tmp/tmpuw84uvir.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093656
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long sum = 0,\
    \ n = 0;\n    for (long long i : x) {\n        sum += i;\n    }\n    std::vector<long>\
    \ v1;\n    for (long long i : x) {\n        n += i / 10;\n        v1.push_back(i);\n\
    \    }\n    v1.push_back(0);\n    long long ans = 0;\n    for (long long i = 1;\
    \ i < n; i++) {\n        if (sum / 10 - ans / 10 >= 0) {\n            ans++;\n\
    \        }\n        else {\n            ans += 10 - ans / 10;\n        }\n   \
    \     for (long long j = 0; j < v1.size(); j++) {\n            if (j > i && v[j]\
    \ % 2 == 0) {\n                v1.erase(std::remove(std::begin(v1), std::end(v1),\
    \ v[j]), std::end(v1));\n                break;\n            }\n        }\n  \
    \  }\n    std::vector<long> v2;\n    for (long long i = 1; i < v1.size(); i++)\
    \ {\n        if (i % 2 == 0) {\n            v2.push_back(v1[i]);\n        }\n\
    \    }\n    std::sort(v2.begin(), v2.end());\n    return v2;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7wi5ohy.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph7wi5ohy.cpp:27:26: error: \u2018v\u2019 was not declared\
    \ in this scope\n   27 |             if (j > i && v[j] % 2 == 0) {\n      |  \
    \                        ^\n"
  stdout: ''
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(),x.end());\n\
    \    std::vector<long> ans;\n    long long ans1 = 0;\n    for(long long i = x.size()-1;\
    \ i>=0; i--){\n        long long digit = x[i]%10;\n        ans1 = (ans1*10)+digit;\n\
    \    }\n    long long ans2 = ans1%10;\n    for(long long i = 0; i < x.size();\
    \ i++){\n        if(x[i]%10 == ans2)\n            ans.push_back(x[i]);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp4hm4yw5t: /tmp/tmp4hm4yw5t.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093656
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long temp;\n    //\
    \ A helper function to get sum of all the digits\n    long long get_sum(const\
    \ std::vector<long> & xs) {\n        long long sum = 0;\n        for (long long\
    \ i : xs)\n            sum += i;\n        return sum;\n    }\n\n    // A helper\
    \ function to check if x is even.\n    bool is_even(const long & x) {\n      \
    \  return x % 2 == 0;\n    }\n\n    // A helper function to get list of all the\
    \ odd number in x\n    std::vector<long> get_odd_number(const std::vector<long>\
    \ & xs) {\n        std::vector<long> odd_num;\n        long temp = 0;\n      \
    \  for (long i : xs)\n        {\n            temp = i * 10 + temp;\n         \
    \   if (temp % 2 != 0)\n                odd_num.push_back(temp);\n        }\n\
    \        return odd_num;\n    }\n\n    // Create an empty vector to hold all the\
    \ non-even number\n    std::vector<long> odd_num;\n    // Iterate through all\
    \ the elements in x\n    for (long long i : x)\n    {\n        // Check if i is\
    \ even \n        if (i % 2 == 0)\n        {\n            // Check if i is already\
    \ in non-even vector\n            if (std::find(odd_num.begin(), odd_num.end(),\
    \ i) == odd_num.end())\n            {\n                odd_num.push_back(i);\n\
    \            }\n        }\n    }\n\n    // Get sum of all the odd numbers in x\n\
    \    long long odd_sum = get_sum(odd_num);\n\n    // A helper function to calculate\
    \ sum of all odd number in x\n    long long odd_sum_with_odd_num = odd_sum;\n\
    \    // Iterate through all the odd numbers in x\n    for (long long i : odd_num)\n\
    \    {\n        // Check if i is even\n        if (i % 2 == 0)\n        {\n  \
    \          // Sum the odd number in x with even number\n            odd_sum_with_odd_num\
    \ -= i;\n        }\n    }\n\n    // Create a vector to store all the even number\n\
    \    std::vector<long> even_num;\n    // Iterate through all the elements in x\n\
    \    for (long long i : x)\n    {\n        // Check if i is even\n        if (i\
    \ % 2 == 0)\n        {\n            // Check if i is already in non-even vector\n\
    \            if (std::find(even_num.begin(), even_num.end(), i) == even_num.end())\n\
    \            {\n                even_num.push_back(i);\n            }\n      \
    \  }\n    }\n\n    // Get sum of all the even numbers in x\n    long long even_sum\
    \ = get_sum(even_num);\n\n    // A helper function to calculate sum of all even\
    \ number in x\n    long long even_sum_with_even_num = ev\n}\nint main() {\n  \
    \  auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfa2mt_yy.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfa2mt_yy.cpp:10:53: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   10 |     long long get_sum(const\
    \ std::vector<long> & xs) {\n      |                                         \
    \            ^\n/tmp/tmpfa2mt_yy.cpp:18:34: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n   18 |     bool is_even(const long\
    \ & x) {\n      |                                  ^\n/tmp/tmpfa2mt_yy.cpp:23:68:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   23 |     std::vector<long> get_odd_number(const std::vector<long> & xs) {\n\
    \      |                                                                    ^\n\
    /tmp/tmpfa2mt_yy.cpp:52:25: error: \u2018get_sum\u2019 was not declared in this\
    \ scope\n   52 |     long long odd_sum = get_sum(odd_num);\n      |          \
    \               ^~~~~~~\n/tmp/tmpfa2mt_yy.cpp:87:40: error: \u2018ev\u2019 was\
    \ not declared in this scope\n   87 |     long long even_sum_with_even_num = ev\n\
    \      |                                        ^~\n/tmp/tmpfa2mt_yy.cpp:88:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   88 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n\
    \  result.push_back(0);\n  result.push_back(0);\n  for(int i=0; i<x.size(); i++)\
    \ {\n    if(result.back() == 0) result.push_back(result.back()+x[i]);\n    else\
    \ result.push_back(result.back()-x[i]);\n  }\n  std::sort(result.begin(), result.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmprimbmbnf: /tmp/tmprimbmbnf.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::set<long> s;\n\
    \  for (auto i:x)\n    s.insert(i);\n  return s.begin(),s.end();\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyqkr0cb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuyqkr0cb.cpp:11:19: error: could not convert \u2018(((void)s.std::set<long\
    \ int>::begin()), s.std::set<long int>::end())\u2019 from \u2018std::set<long\
    \ int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019\
    } to \u2018std::vector<long int>\u2019\n   11 |   return s.begin(),s.end();\n\
    \      |          ~~~~~~~~~^~~~~~~~\n      |                   |\n      |    \
    \               std::set<long int>::iterator {aka std::_Rb_tree_const_iterator<long\
    \ int>}\n"
  stdout: ''
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long sum = 0;\n\
    \    std::vector<long> ans;\n    for (int i : x) {\n        sum += i;\n      \
    \  if (sum >= 10) {\n            sum -= 10;\n            ans.push_back((long long)sum);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    std::vector<long>::iterator\
    \ it;\n    for (it = ans.begin(); it != ans.end(); it++) {\n        if (*it %\
    \ 2 != 0) {\n            std::iter_swap(it, ans.end()-1);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbv9z57_e: /tmp/tmpbv9z57_e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for(long i=0;i<x.size();i++)\n    {\n        if(x[i]%2==0)\n     \
    \   {\n            long val=x[i]/2;\n            while(val%2==0)\n           \
    \ {\n                val=val/2;\n            }\n            ans.push_back(val);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp8tzloiq9: /tmp/tmp8tzloiq9.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // your code goes\
    \ here\n    // return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpc09v4ono: /tmp/tmpc09v4ono.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result(x.size());\n    // Sort the elements of the array\n    // using std::sort()\n\
    \    sort(x.begin(), x.end());\n\n    // Iterate over all elements of the array\n\
    \    // and check if the element doesn't have \n    // even digit.\n    for (long\
    \ i=0;i<x.size();i++) {\n        if (!isdigit(x[i])) {\n            result[i]=x[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpswnm6_4f: /tmp/tmpswnm6_4f.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    std::vector<long> temp;\n    // O(1) Time complexity\n    long long\
    \ count = 0;\n    for(long long i : x)\n    {\n        if(i % 2 == 0)\n      \
    \  {\n            temp.push_back(i);\n        }\n        else\n        {\n   \
    \         for(long long j : temp)\n            {\n                if(j % 2 ==\
    \ 0)\n                {\n                    count++;\n                }\n   \
    \         }\n            temp.clear();\n            for(long long j : temp)\n\
    \            {\n                y.push_back(j);\n            }\n        }\n  \
    \  }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpceqe6k2f: /tmp/tmpceqe6k2f.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int n = x.size();\n\
    \    std::vector<long> ans;\n    for (long i = 1; i < n; ++i) {\n        if ((x[i]\
    \ - x[i - 1]) % 2 != 0) {\n            ans.push_back(x[i]);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpha08f218: /tmp/tmpha08f218.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    std::unordered_set<long> seen;\n    for (long i : x) {\n        int\
    \ sz = std::to_string(i).length();\n        if (sz % 2 == 0) {\n            while\
    \ (seen.find(sz / 2) != seen.end()) {\n                sz--;\n            }\n\
    \            seen.insert(sz / 2);\n            ans.push_back(i);\n        }\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmph6ypqxtm: /tmp/tmph6ypqxtm.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long n=x.size();\n\
    \    long long ans[26]={0}, num=0;\n    for(int i=0;i<n;i++)\n    {\n        for(int\
    \ j=i%10;j<10;j++)\n        {\n            ans[num++]=0;\n        }\n        ans[(x[i]-0)/10]++;\n\
    \    }\n    std::vector<long> ans_list;\n    for(int i=0;i<26;i++)\n    {\n  \
    \      ans_list.push_back(ans[i]);\n    }\n    for(int i=0;i<n;i++)\n    {\n \
    \       if(ans[(x[i]-0)/10]>0)\n        {\n            ans_list.push_back(x[i]);\n\
    \        }\n    }\n    return ans_list;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: '*** stack smashing detected ***: terminated

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for (long i : x) {\n        long temp = i;\n        while ((temp/10)%2\
    \ == 0)\n            temp/=10;\n        if (std::find(ans.begin(), ans.end(),\
    \ temp) == ans.end())\n            ans.push_back(temp);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093662
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int l = x.size();\n\
    \    std::vector<long> ret;\n    long s = 0;\n    long temp;\n    for (int i =\
    \ 0; i < l; ++i) {\n        temp = x[i];\n        bool flag = false;\n       \
    \ for (int j = 0; j < l; ++j) {\n            if ((j != i) && temp % j == 0) {\n\
    \                flag = true;\n                break;\n            }\n       \
    \ }\n        if (!flag)\n            ret.push_back(temp);\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> y;\n\
    \  long n;\n  for (long i : x) {\n    if (i % 2 == 0) {\n      n = i;\n    } else\
    \ {\n      y.push_back(n);\n      n = 0;\n    }\n  }\n  y.push_back(n);\n  return\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3jdh2ylo: /tmp/tmp3jdh2ylo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::unordered_set<long>\
    \ uset;\n  long long sum = 0;\n  for (long &x : x)\n    sum += x;\n  // Find the\
    \ sum of digits of x\n  for (long i = 0; i < sum; i++)\n    uset.insert(x%10);\n\
    \  std::vector<long> ans;\n  long temp;\n  long sum1 = 0;\n  // find the sum of\
    \ digits of every element\n  for (long &x : x)\n    if (uset.find(x%10) == uset.end())\n\
    \      sum1 += x%10;\n  while (sum1 > 0){\n    temp = sum1%10;\n    // find the\
    \ elements with sum % temp\n    sum1 = sum1/10;\n    for (long &x : x)\n     \
    \ if (x%10 == temp) {\n        ans.push_back(x%10);\n        uset.erase(x%10);\n\
    \        break;\n      }\n  }\n  ans.insert(ans.begin(), uset.begin(), uset.end());\n\
    \  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsokvbpad.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsokvbpad.cpp:14:18: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   14 |     uset.insert(x%10);\n      |                 ~^~~\n      |       \
    \          | |\n      |                 | int\n      |                 std::vector<long\
    \ int>\nIn file included from /usr/include/c++/9/valarray:603,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n            \
    \     from /tmp/tmpsokvbpad.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpsokvbpad.cpp:14:19: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   14 |     uset.insert(x%10);\n      |                   ^~\nIn file included\
    \ from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpsokvbpad.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bit"
  stdout: ''
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    long long ans = 0;\n    for(int i = 0; i < x.size(); i++){\n       \
    \ if((x[i]%2) == 0)\n            ans += x[i];\n    }\n    y = { ans };\n    for(int\
    \ i = 0; i < x.size(); i++){\n        if((x[i]%2) == 0){\n            y.push_back(x[i]);\n\
    \        }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplbv3ybhc: /tmp/tmplbv3ybhc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for(long i : x) {\n        long l = i;\n        long m = 0;\n    \
    \    long t = 1;\n        while(l / 10 > 0) {\n            l /= 10;\n        \
    \    m += t;\n            t *= 10;\n        }\n        while(l % 10 > 0) {\n \
    \           l /= 10;\n        }\n        if(m % 2 == 0) {\n            ans.push_back(i);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp0v01vj65: /tmp/tmp0v01vj65.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Write your code\
    \ here\n    assert(x.size() == 10);\n    std::vector<long> result(10, 0);\n  \
    \  int index = 0;\n    \n    for(int i = 0; i < 10; i++){\n        result[i] =\
    \ x[index % 10];\n        index++;\n    }\n    \n    for(int i = 9; i >= 0; i--){\n\
    \        if(result[i] % 2 == 0){\n            std::cout << result[i] << \",\"\
    ;\n        }\n    }\n    std::cout << std::endl;\n    \n    \n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3d2r2gs_: /tmp/tmp3d2r2gs_.cpp:9: std::vector<long int> unique_digits(std::vector<long
    int>): Assertion `x.size() == 10'' failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long u = 0;\n\
    \    std::vector<long> y; \n    std::sort(x.begin(), x.end()); \n\n    for (long\
    \ long i = 0; i < x.size(); i++) { \n        if (i % 2 == 0 && x[i] % 2 != 0)\
    \ { \n            u += x[i]; \n        } \n    } \n    y.push_back(u); \n    \n\
    \    for (long long i = 0; i < x.size(); i++) { \n        if (x[i] % 2 == 0 &&\
    \ x[i] % 2 == 0) { \n            std::cout << x[i] << \"\\t\";\n        } \n \
    \   } \n    std::cout << \"\\n\"; \n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp10tpke61: /tmp/tmp10tpke61.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> ans;\n\
    \  long temp;\n  for (long i = 0; i < x.size(); i++) {\n    temp = x[i];\n   \
    \ \n    for (int j = i - 1; j >= 0; j--) {\n      assert(temp > 0);\n      if\
    \ (temp % 10 == 0 && x[j] % 10 != 0) {\n        temp /= 10;\n        x[j] /= 10;\n\
    \        ans.push_back(temp);\n        ans.push_back(x[j]);\n        break;\n\
    \      }\n      if (j == 0) {\n        ans.push_back(temp);\n      }\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpduq1vywp: /tmp/tmpduq1vywp.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    // Loop through every number in x \n    for (auto it = x.begin();\
    \ it != x.end(); ++it) {\n        // Loop through all digits in current number\n\
    \        for (auto d = *it; d != 0; d /= 10) {\n            // If current digit\
    \ is not odd, add to result vector\n            if (!(d & 1))\n              \
    \  result.push_back(d);\n        }\n    }\n    // Return sorted vector\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3ufd8k7r: /tmp/tmp3ufd8k7r.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int n=x.size();\n\
    \    if(n==0)\n        return std::vector<long>();\n    std::vector<long> ans(x.size(),0);\n\
    \    for(int i=0;i<n;i++) {\n        if(ans[i]==0) {\n            ans[i]=x[i];\n\
    \        }\n        else if(abs(x[i]-ans[i])<10) {\n            ans[i]=x[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpv4ga8jas: /tmp/tmpv4ga8jas.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n   long long int ans =\
    \ 0;\n   for(int i = 0; i < x.size(); ++i) {\n       if(x[i] % 2 == 0) {\n   \
    \        continue;\n       }\n       ans += x[i];\n   }\n   std::vector<long>\
    \ ans;\n   long long int xsize = ans;\n   long long int xdigits = ans;\n   for(int\
    \ i = 0; i < x.size(); ++i) {\n       ans.push_back(x[i]);\n       xdigits +=\
    \ x[i]; \n   }\n   xsize += ans;\n   xdigits += ans;\n   for(int i = 0; i < x.size();\
    \ ++i) {\n       ans.push_back(x[i]-xdigits);\n   }\n   return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm2sb7f73.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpm2sb7f73.cpp:15:22: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   15 |    std::vector<long> ans;\n      |  \
    \                    ^~~\n/tmp/tmpm2sb7f73.cpp:8:18: note: previous declaration\
    \ as \u2018long long int ans\u2019\n    8 |    long long int ans = 0;\n      |\
    \                  ^~~\n/tmp/tmpm2sb7f73.cpp:19:12: error: request for member\
    \ \u2018push_back\u2019 in \u2018ans\u2019, which is of non-class type \u2018\
    long long int\u2019\n   19 |        ans.push_back(x[i]);\n      |            ^~~~~~~~~\n\
    /tmp/tmpm2sb7f73.cpp:25:12: error: request for member \u2018push_back\u2019 in\
    \ \u2018ans\u2019, which is of non-class type \u2018long long int\u2019\n   25\
    \ |        ans.push_back(x[i]-xdigits);\n      |            ^~~~~~~~~\n/tmp/tmpm2sb7f73.cpp:27:11:\
    \ error: could not convert \u2018ans\u2019 from \u2018long long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   27 |    return ans;\n      |           ^~~\n \
    \     |           |\n      |           long long int\n"
  stdout: ''
  timestamp: 1660093657
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    if (x.size() == 0)\
    \ {\n        return {};\n    }\n    int max = std::max_element(x.begin(), x.end())\
    \ - x.begin();\n    std::vector<long> ans;\n    for (int i = 0; i < max; i++)\
    \ {\n        long digit = x[max%10]%10;\n        // digit = x[max%10]%10 // this\
    \ line is the same as above\n        if (std::find(ans.begin(), ans.end(), digit)\
    \ == ans.end()) {\n            ans.push_back(digit);\n        }\n        max--;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnrko0u1x: /tmp/tmpnrko0u1x.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093657
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    int n = x.size();\n    for (int i = 0; i < n; i++) {\n        while\
    \ (n % 10 == 0) {\n            n /= 10;\n        }\n        int x = x[i];\n  \
    \      while (x % 2 == 0) {\n            x /= 2;\n        }\n        if (x !=\
    \ 0) {\n            ans.push_back(x);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7k7ltv69.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7k7ltv69.cpp:14:20: error: invalid types \u2018int[int]\u2019\
    \ for array subscript\n   14 |         int x = x[i];\n      |                \
    \    ^\n"
  stdout: ''
  timestamp: 1660093656
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int n = x.size();\n\
    \    // Initialize all even digits to 0.\n    for (int i = 0; i < n; i++){\n \
    \       if ((x[i] % 2) == 0){\n            x[i] = 0;\n        }\n    }\n    //\
    \ Sort x\n    auto comp = [](long a, long b){\n        return a > b;\n    };\n\
    \    std::sort(x.begin(), x.end(), comp);\n\n    // Initialize a new list of distinct\
    \ digits.\n    std::vector<long> result;\n\n    // Loop over every distinct digit.\n\
    \    for (int i = 0; i < n; i++){\n        // Loop over all elements in this list.\
    \ \n        // If the current digit is equal to the current element of this list,\
    \ add it to result list.\n        for (int j = 0; j < n; j++){\n            if\
    \ (x[i] == x[j]){\n                result.push_back(x[i]);\n                break;\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpve1tm57j: /tmp/tmpve1tm57j.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093658
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    auto end = x.end()-1;\n\
    \    auto it = x.begin();\n    \n    while(end >= 0 && it < end) {\n        long\
    \ c = *it;\n        if((c & 1) != 0) {\n            it = std::next(it);\n    \
    \    }\n        else if( std::next_permutation(it, end) ) {\n            \n  \
    \          x.erase(it);\n            \n        }\n        else {\n           \
    \ ++it;\n        }\n        --end;\n    }\n    \n    return x;\n    \n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp9uaufq_.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpp9uaufq_.cpp:12:15: error: no match for \u2018operator>=\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018int\u2019)\n   12 |     while(end >= 0 && it < end) {\n\
    \      |           ~~~ ^~ ~\n      |           |      |\n      |           | \
    \     int\n      |           __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n \
    \                from /usr/include/c++/9/bits/specfun.h:45,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp9uaufq_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:954:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator>=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  954 |\
    \     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:954:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpp9uaufq_.cpp:12:18: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018int\u2019\n   12 |     while(end >= 0 && it < end) {\n      |    \
    \              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpp9uaufq_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:961:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator>=(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  961 |     operator>=(cons"
  stdout: ''
  timestamp: 1660093657
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    long l=x.size();\n    long count=0;\n    std::vector<long> ans;\n\
    \    for (long i=0;i<l;i++)\n    {\n        if (i%2==0)\n        {\n         \
    \   for (long j=i;j<l;j++)\n            {\n                if (x[j]%2==0)\n  \
    \              {\n                    count++;\n                    break;\n \
    \               }\n            }\n        }\n        else\n        {\n       \
    \     count++;\n        }\n    }\n    std::vector<long> result;\n    for (long\
    \ i=0;i<count;i++)\n    {\n        long j=i;\n        while (j<l)\n        {\n\
    \            if (x[j]%2==0)\n            {\n                j++;\n           \
    \ }\n            else\n            {\n                result.push_back(x[j]);\n\
    \                j--;\n            }\n        }\n    }\n    std::sort(result.begin(),result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // code here\n   \
    \ \n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpgklgxp87: /tmp/tmpgklgxp87.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093658
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long sum = 0;\n  \
    \  \n    for(long x: x)\n        sum += x;\n    \n    std::vector<long> ans;\n\
    \    for(long x: x)\n        if(!(x%10))\n            ans.push_back(x);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpeu9ej7b9: /tmp/tmpeu9ej7b9.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093658
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ v(x.begin(), x.end());\n    std::sort(v.begin(), v.end());\n    \n    std::unordered_set<long>\
    \ seen;\n    std::vector<long> result;\n    \n    for(long i : v) {\n        if((i&1)\
    \ == 0) result.push_back(i);\n        else { \n            auto itr = seen.find(i);\n\
    \            if(itr != seen.end()) {\n                result.push_back(i);\n \
    \               seen.erase(itr);\n            }\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpynjf6ld_: /tmp/tmpynjf6ld_.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093658
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long ans = 0;\n\
    \    for(long long x : x)\n    {\n      if(x % 2 == 0)\n      {\n        ans++;\n\
    \      }\n    }\n    std::vector<long> ans;\n    for(long long i = 0 ; i != x.size()\
    \ ; i++)\n    {\n      if(x[i] % 2 != 0)\n      {\n        ans.push_back(x[i]);\n\
    \      }\n    }\n    return ans;\n  }\n  \n  int main()\n  {\n    int t;\n   \
    \ scanf(\"%d\", &t);\n    while (t--) {\n      long long n, k;\n      scanf(\"\
    %lld%lld\", &n, &k);\n      std::vector<long> x(n);\n      for (int i = 0; i <\
    \ n; i++) {\n        scanf(\"%lld\", &x[i]);\n      }\n      std::vector<long>\
    \ ans = unique_digits(x);\n      sort(ans.begin(), ans.end());\n      for (int\
    \ i = 0; i < k; i++) {\n        scanf(\"%lld\", &k);\n      }\n      std::vector<long>\
    \ ks;\n      ks.push_back(k);\n      ks.push_back(k-1);\n      ks.push_back(k+1);\n\
    \      std::vector<bool> vs(ks.size(), false);\n      for (int i = 0; i < ks.size();\
    \ i++) {\n        long long cur = ans[*std::max_element(ans.begin(), ans.end())];\n\
    \        if (vs[cur]) \n        {\n          vs[cur] = false;\n        } else\
    \ {\n          vs[cur] = true;\n          ks.push_back(cur);\n        }\n    \
    \  }\n      \n      for (int i = 0; i < ks.size(); i++) {\n        if (vs[i])\
    \ {\n          std::cout << ks[i] << std::endl;\n        }\n      }\n      std::cout\
    \ << \"\\n\";\n    }\n  }\n</code>\n<|/ a dscore=1 tags=algorithm,c++,arrays,performance\
    \ |>\n<| c |>\nThanks for the answer!  I went ahead and tested this in VS and\
    \ your algorithm is roughly 10 times faster that my current implementation (I\
    \ did some testing after you pointed it out - I should've been more careful).\
    \  The problem now is that the original question specifically says to only sort\
    \ the elements that are odd, so I can't change it to do that.  So it's still O(n^2)\
    \ to solve it that way.  Do you see a way to improve that?\n<|/ c |>\n<| c |>\n\
    I guess you could keep an array of the even numbers, sort them, then find the\
    \ two numbers that maximize the number of odd numbers in that set (and then discard\
    \ the set if there's only one odd number in the list).\n<|/ c |>\n<| c |>\nYes,\
    \ it seems that's the \n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpex9mjtlf.cpp:70:192: warning: character constant too long for its\
    \ type\n   70 | Thanks for the answer!  I went ahead and tested this in VS and\
    \ your algorithm is roughly 10 times faster that my current implementation (I\
    \ did some testing after you pointed it out - I should've been more careful).\
    \  The problem now is that the original question specifically says to only sort\
    \ the elements that are odd, so I can't change it to do that.  So it's still O(n^2)\
    \ to solve it that way.  Do you see a way to improve that?\n      |          \
    \                                                                            \
    \                                                                            \
    \                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpex9mjtlf.cpp:70:360: warning: missing terminating ' character\n   70 |\
    \ Thanks for the answer!  I went ahead and tested this in VS and your algorithm\
    \ is roughly 10 times faster that my current implementation (I did some testing\
    \ after you pointed it out - I should've been more careful).  The problem now\
    \ is that the original question specifically says to only sort the elements that\
    \ are odd, so I can't change it to do that.  So it's still O(n^2) to solve it\
    \ that way.  Do you see a way to improve that?\n      |                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^\n/tmp/tmpex9mjtlf.cpp:70:360: error: missing\
    \ terminating ' character\n   70 | Thanks for the answer!  I went ahead and tested\
    \ this in VS and your algorithm is roughly 10 times faster that my current implementation\
    \ (I did some testing after you pointed it out - I should've been more careful).\
    \  The problem now is "
  stdout: ''
  timestamp: 1660093657
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long ans=0;\n    for(long i=0;i<x.size();i++){\n        ans=x[i];\n\
    \        for(int j=i;j>=0;j--){\n            if(ans % 10 == 0){\n            \
    \    ans = ans / 10;\n                ans.push_back(ans);\n                break;\n\
    \            }\n            ans /= 10;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8k3yulwj.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8k3yulwj.cpp:9:10: error: conflicting declaration \u2018\
    long int ans\u2019\n    9 |     long ans=0;\n      |          ^~~\n/tmp/tmp8k3yulwj.cpp:8:23:\
    \ note: previous declaration as \u2018std::vector<long int> ans\u2019\n    8 |\
    \     std::vector<long> ans;\n      |                       ^~~\n/tmp/tmp8k3yulwj.cpp:11:16:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   11 |         ans=x[i];\n\
    \      |                ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8k3yulwj.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to \u2018const std::vector<long int>&\u2019\n  199\
    \ |     operator=(const vector<_Tp, _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8k3yulwj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018st"
  stdout: ''
  timestamp: 1660093657
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n        long long sum\
    \ = 0;\n        std::vector<long> ret;\n        for (auto i: x){\n           \
    \ sum += i;\n        }\n        long long mod = sum % 10;\n        for (long long\
    \ i = sum; i < mod; i++){\n            ret.push_back(i);\n        }\n        for\
    \ (long long i = 0; i < mod; i++){\n            ret.push_back(0);\n        }\n\
    \        return ret;\n    }\n    \n    \n    \nint main() {\n    std::vector<long>\
    \ num = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvx11prqq.cpp: In function \u2018int main()\u2019:\n/tmp/tmpvx11prqq.cpp:28:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   28\
    \ | int main() {\n      | ^~~\n/tmp/tmpvx11prqq.cpp:34:1: error: expected \u2018\
    }\u2019 at end of input\n   34 | }\n      | ^\n/tmp/tmpvx11prqq.cpp:25:12: note:\
    \ to match this \u2018{\u2019\n   25 | int main() {\n      |            ^\n"
  stdout: ''
  timestamp: 1660093657
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  // code here\n  assert(x.size()\
    \ >= 1);\n  std::vector<long> ans;\n  long res = 0;\n  for (long &i : x) {\n \
    \   long d = i % 10;\n    if (d % 2 == 0) {\n      res += d;\n      continue;\n\
    \    }\n    ans.push_back(i);\n  }\n  std::sort(ans.begin(), ans.end());\n  for\
    \ (long i = ans.size(); i > 0; --i) {\n    if (ans[i - 1] % 10 != ans[i] / 10)\n\
    \      ans.erase(ans.begin() + i);\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093658
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    long n = x.size();\n    for (long i = 0; i < n; i++) {\n        long\
    \ sum = 0;\n        for (long j = 0; j < n; j++) {\n            sum += x[j];\n\
    \        }\n        for (long j = 0; j < n; j++) {\n            if (sum % 2 !=\
    \ 0) {\n                res.push_back(x[j]);\n            }\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpsswwt424: /tmp/tmpsswwt424.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093658
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    // count the number of even digits in a number\n    long even = 0;\n\
    \    for (long &x: x) even = even*10 + (x % 10);\n    std::sort(x.begin(), x.end());\n\
    \    // check whether each number is even\n    for (long &x: x) {\n        if\
    \ (x % 10 == 0) x--;\n        if (even % 2 == 0 && x % 10 != 0) res.push_back(x);\n\
    \    }\n    // reverse the result and return\n    res.reverse();\n    return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w5i09gs.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_w5i09gs.cpp:19:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018reverse\u2019; did you mean \u2018reserve\u2019\
    ?\n   19 |     res.reverse();\n      |         ^~~~~~~\n      |         reserve\n"
  stdout: ''
  timestamp: 1660093658
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long even_count = 0;\n    long temp = 0;\n    long cnt = 0;\n    for\
    \ (auto &i : x) {\n        if (i % 2 == 0) {\n            temp = i;\n        \
    \    cnt++;\n            while (temp != 0) {\n                if (temp % 10 ==\
    \ 0) {\n                    ans.push_back(temp / 10);\n                    temp\
    \ = 0;\n                    cnt--;\n                }\n                temp/=10;\n\
    \            }\n        } else {\n            ans.push_back(i);\n            even_count++;\n\
    \        }\n    }\n    std::vector<long> res = ans;\n    while (even_count) {\n\
    \        res.push_back(1);\n        even_count--;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp3v_mh_0n: /tmp/tmp3v_mh_0n.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    std::vector<long> digits(10);\n    long t = 0;\n    int size = x.size();\n\
    \    assert(size > 0);\n    for (auto i : x) {\n        if (i % 2 == 0) {\n  \
    \          digits[i / 2]++;\n        }\n        else {\n            ans.push_back(i);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    for (auto i : ans)\
    \ {\n        if (digits[i / 2] != 0) {\n            ans.push_back(i);\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpq5qw0rwg: /tmp/tmpq5qw0rwg.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093658
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    assert(x.size() >=\
    \ 2);\n    std::vector<long> res(x.size()-1);\n    int n = 0;\n    for (long i\
    \ : x) {\n        n += i / 10;\n        i %= 10;\n        if (i == 0) res[n]++;\n\
    \    }\n    for (long i : res)\n        if (i != 1)\n            std::swap(i,\
    \ n--);\n    std::reverse(x.begin(), x.end());\n    return x;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhhhiy8j.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvhhhiy8j.cpp:18:29: error: no matching function for call\
    \ to \u2018swap(long int&, int)\u2019\n   18 |             std::swap(i, n--);\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvhhhiy8j.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpvhhhiy8j.cpp:18:29: note:   deduced conflicting types for parameter\
    \ \u2018_Tp\u2019 (\u2018long int\u2019 and \u2018int\u2019)\n   18 |        \
    \     std::swap(i, n--);\n      |                             ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_pair.h:59,\n                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpvhhhiy8j.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:205:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpvhhhiy8j.cpp:18:29:\
    \ note:   mismatched types \u2018_Tp [_Nm]\u2019 and \u2018long int"
  stdout: ''
  timestamp: 1660093658
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    // Write your code here\n    long num = 0;\n    for(long &n:x){\n\
    \        num = num*10 + n;\n        \n    }\n    std::vector<long> result(num);\n\
    \    for(long &n:x){\n        long temp = n%10;\n        for(long i=0;i<result.size();i++){\n\
    \            if(result[i]==temp){\n                if(i==0){\n               \
    \     result[i] = n;\n                }else{\n                    result[i+1]\
    \ = result[i];\n                }\n                result.erase(result.begin()+i);\n\
    \            }\n        }\n    }\n    for(long i=0;i<result.size();i++){\n   \
    \     ans.push_back(result[i]);\n    }\n    sort(ans.begin(), ans.end());\n  \
    \  ans.erase(unique(ans.begin(), ans.end()), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpeffqj54c: /tmp/tmpeffqj54c.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    std::vector<long> res;\n    long long sum=0;\n    for(long i=0;i<x.size();i++){\n\
    \        sum+=x[i];\n        if(sum%2==0){\n            res.push_back(x[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpuka7sey6: /tmp/tmpuka7sey6.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    // sort x\n    std::sort(x.begin(), x.end());\n    // append odd digits\
    \ to the ans.\n    for (long i : x) {\n        while (i != 0) {\n            ans.push_back(i%10);\n\
    \            i /= 10;\n        }\n    }\n    // sort ans in reverse order.\n \
    \   std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnpb03mqi: /tmp/tmpnpb03mqi.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    for(auto itr = x.begin(); itr != x.end(); ++itr) {\n        long\
    \ digit = *itr;\n        if(digit % 2 == 0)\n            continue;\n        long\
    \ remainder;\n        if(digit > 0){\n            remainder = digit % 10;\n  \
    \          digit /= 10;\n        } else\n            remainder = 0;\n        while(remainder\
    \ != 0) {\n            result.push_back(remainder);\n            remainder /=\
    \ 10;\n        }\n    }\n    std::sort(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmppnzd3umk: /tmp/tmppnzd3umk.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> res;\n\
    \  // your code goes here\n  int n = x.size();\n  long sum = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    sum += x[i];\n  }\n  for (int i = 0; i < n; i++) {\n\
    \    int index = sum % 10;\n    if (index < 2) {\n      res.push_back(x[i]);\n\
    \    }\n  }\n  std::sort(res.begin(), res.end());\n  return res;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpylm4iyx0: /tmp/tmpylm4iyx0.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    long long int\
    \ sum = 0;\n    long long int counter = 1;\n    std::vector<long> sorted_x;\n\
    \    // sort x.\n    for (long long int e : x) {\n        sum += e;\n    }\n \
    \   std::sort(x.begin(), x.end());\n    for (long long int e : x) {\n        std::cout\
    \ << sum << std::endl;\n        if (sum % 2 == 0) {\n            std::cout <<\
    \ \"even\" << std::endl;\n            sorted_x.push_back(e);\n        }\n    \
    \    counter *= 10;\n        sum += e;\n        std::cout << sum << std::endl;\n\
    \    }\n    return sorted_x;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpfr5n0paj: /tmp/tmpfr5n0paj.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: '1471

    1472

    1472

    even

    1487

    1487

    1520

    1520

    even

    2942

    '
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    for(long i : x) {\n        while(x % 10 != 0) {\n            x.erase(x.begin());\n\
    \        }\n        y.push_back(i);\n        x /= 10;\n    }\n    \n    return\
    \ y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi873f131.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi873f131.cpp:10:17: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   10 |         while(x % 10 != 0) {\n      |               ~ ^ ~~\n      | \
    \              |   |\n      |               |   int\n      |               std::vector<long\
    \ int>\nIn file included from /usr/include/c++/9/valarray:603,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n            \
    \     from /tmp/tmpi873f131.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpi873f131.cpp:10:19: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   10 |         while(x % 10 != 0) {\n      |                   ^~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpi873f131.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include"
  stdout: ''
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // code here\n   \
    \ // your code here\n    \n    // write your code here\n    // you can use unordered_map\
    \ for better space efficiency \n    // unordered_map map will store the elements\
    \ in increasing order \n    unordered_map<long, bool> hash;\n    \n    for(long\
    \ i=0;i<x.size();i++){\n        // check all digits in x[i]\n        for(long\
    \ j=0;j<(10-x[i]);j++){\n            // if current digit is even then store in\
    \ hash\n            if(hash[x[i]+j]) break;\n        }\n        // if i is odd\
    \ then increment i otherwise add it \n        if(i%2==1) hash[x[i]]= true;\n \
    \       else hash[x[i]]= false;\n    }\n    \n    // return your list here\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6guj6z52.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6guj6z52.cpp:14:5: error: \u2018unordered_map\u2019 was\
    \ not declared in this scope\n   14 |     unordered_map<long, bool> hash;\n  \
    \    |     ^~~~~~~~~~~~~\n/tmp/tmp6guj6z52.cpp:14:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/unordered_map:47,\n                 from\
    \ /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp6guj6z52.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:102:11: note:\
    \   \u2018std::unordered_map\u2019\n  102 |     class unordered_map\n      | \
    \          ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6guj6z52.cpp:2:\n/usr/include/c++/9/unordered_map:68:13:\
    \ note:   \u2018std::pmr::unordered_map\u2019\n   68 |       using unordered_map\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmp6guj6z52.cpp:14:19: error: expected\
    \ primary-expression before \u2018long\u2019\n   14 |     unordered_map<long,\
    \ bool> hash;\n      |                   ^~~~\n/tmp/tmp6guj6z52.cpp:20:16: error:\
    \ \u2018hash\u2019 was not declared in this scope; did you mean \u2018std::hash\u2019\
    ?\n   20 |             if(hash[x[i]+j]) break;\n      |                ^~~~\n\
    \      |                std::hash\nIn file included from /usr/include/c++/9/string_view:43,\n\
    \                 from /usr/include/c++/9/bits/basic_string.h:48,\n          \
    \       from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \   "
  stdout: ''
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    std::vector<long> res;\n    long t=0;\n    for(long i=0;i<x.size();i++){\n\
    \        for(long j=i+1;j<x.size();j++){\n            if(x[i]>0){\n          \
    \      res[res[res[res[res[t++]]]]+=x[i];\n                res[res[res[t]]]+=x[j];\n\
    \                res[t]+=1;\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42z_knuc.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp42z_knuc.cpp:14:50: error: expected \u2018]\u2019 before\
    \ \u2018;\u2019 token\n   14 |                 res[res[res[res[res[t++]]]]+=x[i];\n\
    \      |                                                  ^\n      |         \
    \                                         ]\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // TODO: Implement\
    \ your function here\n    vector<long> ans;\n    for (auto i = 0L; i < x.size();\
    \ i++) {\n        int count = 0;\n        long n = x[i];\n        while ((n %\
    \ 10) != 0) {\n            n /= 10;\n            count++;\n        }\n       \
    \ if (count == 0)\n            ans.push_back(x[i]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhi73eeg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbhi73eeg.cpp:9:5: error: \u2018vector\u2019 was not declared\
    \ in this scope\n    9 |     vector<long> ans;\n      |     ^~~~~~\n/tmp/tmpbhi73eeg.cpp:9:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbhi73eeg.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbhi73eeg.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpbhi73eeg.cpp:9:12:\
    \ error: expected primary-expression before \u2018long\u2019\n    9 |     vector<long>\
    \ ans;\n      |            ^~~~\n/tmp/tmpbhi73eeg.cpp:18:13: error: \u2018ans\u2019\
    \ was not declared in this scope; did you mean \u2018abs\u2019?\n   18 |     \
    \        ans.push_back(x[i]);\n      |             ^~~\n      |             abs\n\
    /tmp/tmpbhi73eeg.cpp:20:12: error: \u2018ans\u2019 was not declared in this scope;\
    \ did you mean \u2018abs\u2019?\n   20 |     return ans;\n      |            ^~~\n\
    \      |            abs\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  long long ans = 1;\n\
    \  int i = 1;\n  while(i < x.size()) {\n    ans = ans * 10 + x[i]%10;\n    i++;\n\
    \  }\n  std::vector<long> ans_list;\n  ans_list.push_back(ans);\n  while(i<x.size())\
    \ {\n    ans = ans * 10 + x[i]%10;\n    while(i<x.size() && ans*10 + x[i]%10 ==\
    \ ans) {\n      ans_list.push_back(ans);\n      i++;\n    }\n  }\n  std::sort(ans_list.begin(),\
    \ ans_list.end());\n  return ans_list;\n}\nint main() {\n    auto candidate =\
    \ unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpi_6lg2xq: /tmp/tmpi_6lg2xq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    // code here\n    std::vector<long> ans;\n    long temp;\n    int\
    \ i = 0;\n    while (i < x.size()) {\n        temp = x[i];\n        while (i <\
    \ x.size() && x[i] % 10 == 0) {\n            i++;\n        }\n        if (i <\
    \ x.size() && temp % 10 == 0) {\n            ans.push_back(temp);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093664
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res; // result vector\n    std::set<long> seen;\n    for (long &x: x) {\n  \
    \      x = x % 10;\n        if (!seen.insert(x).second) {\n            x.erase(std::remove(x.begin(),\
    \ x.end(), 0), x.end()); // remove element from list\n            res.push_back(x);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o9_7gzg.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9o9_7gzg.cpp:13:15: error: request for member \u2018erase\u2019\
    \ in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n   13 | \
    \            x.erase(std::remove(x.begin(), x.end(), 0), x.end()); // remove element\
    \ from list\n      |               ^~~~~\n/tmp/tmp9o9_7gzg.cpp:13:35: error: request\
    \ for member \u2018begin\u2019 in \u2018x\u2019, which is of non-class type \u2018\
    long int\u2019\n   13 |             x.erase(std::remove(x.begin(), x.end(), 0),\
    \ x.end()); // remove element from list\n      |                             \
    \      ^~~~~\n/tmp/tmp9o9_7gzg.cpp:13:46: error: request for member \u2018end\u2019\
    \ in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n   13 | \
    \            x.erase(std::remove(x.begin(), x.end(), 0), x.end()); // remove element\
    \ from list\n      |                                              ^~~\n/tmp/tmp9o9_7gzg.cpp:13:59:\
    \ error: request for member \u2018end\u2019 in \u2018x\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   13 |             x.erase(std::remove(x.begin(),\
    \ x.end(), 0), x.end()); // remove element from list\n      |                \
    \                                           ^~~\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::sort(x.begin(),\
    \ x.end());\n\n    std::vector<long> y;\n    long t = 0;\n    for(int i = x.size();\
    \ i-- > 0;){\n        if(t++ % 2 == 0){\n            y.push_back(x[i]);\n    \
    \    }\n    }\n\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpiyggqwel: /tmp/tmpiyggqwel.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    for(long i=0; i<x.size(); i++){\n        while(x[i] != 0 && x[i]\
    \ % 2 == 0){\n            x[i] /= 2;\n            result.push_back(x[i]);\n  \
    \      }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpngf4cr63: /tmp/tmpngf4cr63.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long ans = 0;\n\
    \    long long ans2 = 0;\n    for(long long i : x)\n    {\n        while((ans\
    \ % 10) < i)\n        {\n            ans /= 10;\n            ans2 += 1;\n    \
    \    }\n    }\n    for(long long i = 0; i < x.size(); i++)\n    {\n        while((ans2\
    \ % 10) < x[i])\n        {\n            ans2 /= 10;\n        }\n    }\n    std::vector<long>\
    \ an;\n    for(long long i = 0; i < ans2;)\n    {\n        long long temp = ans[i];\n\
    \        for(long long j = i + 1; j < ans2; j++)\n        {\n            if(temp\
    \ == ans[j])\n            {\n                an[j - 1]++;\n                an[j]\
    \ = 0;\n            }\n            else\n            {\n                break;\n\
    \            }\n        }\n        i += ans2;\n    }\n    return an;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95ra2cwb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp95ra2cwb.cpp:28:31: error: invalid types \u2018long long\
    \ int[long long int]\u2019 for array subscript\n   28 |         long long temp\
    \ = ans[i];\n      |                               ^\n/tmp/tmp95ra2cwb.cpp:31:29:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   31 |             if(temp == ans[j])\n      |                             ^\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        long curr\
    \ = *it;\n        long lastDigit = 0;\n        for (auto it = ++it; it != x.end();\
    \ ++it) {\n            if (*it == curr) {\n                curr = *it * 10 + lastDigit;\n\
    \            } else {\n                lastDigit = curr/10;\n                curr\
    \ = curr%10;\n                break;\n            }\n        }\n        if (lastDigit\
    \ % 2 == 0) {\n            ans.push_back(curr);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvyp_h0yk.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvyp_h0yk.cpp:12:26: error: use of \u2018it\u2019 before\
    \ deduction of \u2018auto\u2019\n   12 |         for (auto it = ++it; it != x.end();\
    \ ++it) {\n      |                          ^~\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n        \n    std::vector<long>\
    \ nums(x);\n    std::sort(nums.begin(), nums.end());\n    std::vector<long> ans;\n\
    \    \n    for(long i=0; i<nums.size(); i++){\n        if(nums[i]%2 == 0){\n \
    \           ans.push_back(nums[i]);\n        }\n    }\n    \n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2j2pvh3a: /tmp/tmp2j2pvh3a.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    auto it = std::unique(x.begin(),\
    \ x.end());\n    x.erase(it, x.end());\n    std::sort(x.begin(), x.end());\n \
    \   return x;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpyqtmbtr_: /tmp/tmpyqtmbtr_.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int size = x.size();\n\
    \    std::vector<long> ans;\n    int temp = 0;\n    for (int i = 0; i < size;\
    \ i++) {\n        if (i % 2 == 0) {\n            temp = temp * 10 + x[i];\n  \
    \      }\n    }\n    long long an = temp % 10;\n    for (int i = 0; i < size;\
    \ i++) {\n        if (x[i] % 2 == 0 && i != size - 1) {\n            if (x[i]\
    \ == an) {\n                ans.push_back(x[i]);\n            }\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpr6a9s9pi: /tmp/tmpr6a9s9pi.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> result;\n\
    \  long curr = 0;\n  // check all elements have even digits\n  for (long i = x.size()\
    \ - 1; i >= 0; i--) {\n    if (x[i] % 2 == 0) {\n      // add current and next\
    \ element to the result set\n      result.emplace_back(curr);\n      curr = x[i]\
    \ + curr; // add next element to the current element\n    }\n  }\n  result.emplace_back(curr);\n\
    \  std::sort(result.begin(), result.end());\n  return result;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpnqr0nno9: /tmp/tmpnqr0nno9.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    for (auto i : x) {\n        long evens = 0;\n        for (auto\
    \ j : x) {\n            if (j % i == 0) {\n                evens += 1;\n     \
    \       }\n        }\n        if (!(evens & 1)) {\n            result.push_back(i);\n\
    \        }\n    }\n    std::sort(result.begin(), result.end());\n    return result;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpumluim0z: /tmp/tmpumluim0z.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    sort(x.begin(), x.end());\n    std::vector<long> ans;\n    long sum\
    \ = 0;\n    for (long i = x.begin(); i != x.end(); ++i) {\n        sum += *i;\n\
    \        if (sum >= 10) {\n            ans.push_back(*i);\n            sum -=\
    \ *i;\n        }\n    }\n    sort(ans.begin(), ans.end());\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1u2wz_4p.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1u2wz_4p.cpp:12:26: error: cannot convert \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} to \u2018long int\u2019 in initialization\n   12 |     for (long\
    \ i = x.begin(); i != x.end(); ++i) {\n      |                   ~~~~~~~^~\n \
    \     |                          |\n      |                          std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\n/tmp/tmp1u2wz_4p.cpp:12:32: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   12 |     for (long i = x.begin(); i != x.end(); ++i) {\n      |       \
    \                       ~ ^~ ~~~~~~~\n      |                              | \
    \        |\n      |                              long int  std::vector<long int>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1u2wz_4p.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp1u2wz_4p.cpp:12:41: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   12 |     for (long i = x.begin(); i "
  stdout: ''
  timestamp: 1660093659
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // code here\n   \
    \ std::vector<long> res;\n    for(int i = 0; i < x.size(); i++){\n        res.push_back(x[i]);\n\
    \    }\n    res.sort();\n    for(int i = 0; i < x.size(); i++){\n        for(int\
    \ j = 0; j < x.size(); j++){\n            if(x[i] != x[j]){\n                if((x[i]/(x[j]/10)%10)%2\
    \ == 0){\n                    res.erase(std::remove(\n                       \
    \     res.begin(), res.end(), x[j]);\n                            }\n        \
    \                    }\n                            }\n                      \
    \  }\n                    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpidwoktlb.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpidwoktlb.cpp:13:9: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   13 |     res.sort();\n \
    \     |         ^~~~\n/tmp/tmpidwoktlb.cpp:19:58: error: expected \u2018)\u2019\
    \ before \u2018;\u2019 token\n   19 |                             res.begin(),\
    \ res.end(), x[j]);\n      |                                                 \
    \         ^\n      |                                                         \
    \ )\n/tmp/tmpidwoktlb.cpp:18:30: note: to match this \u2018(\u2019\n   18 |  \
    \                   res.erase(std::remove(\n      |                          \
    \    ^\n/tmp/tmpidwoktlb.cpp:24:21: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   24 |                     }\n      |           \
    \          ^\n/tmp/tmpidwoktlb.cpp: At global scope:\n/tmp/tmpidwoktlb.cpp:25:5:\
    \ error: expected unqualified-id before \u2018return\u2019\n   25 |     return\
    \ res;\n      |     ^~~~~~\n/tmp/tmpidwoktlb.cpp:26:1: error: expected declaration\
    \ before \u2018}\u2019 token\n   26 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long ans = 0;\n\
    \    for (long long i = 0; i < x.size(); ++i) {\n        ans = ans + x[i];\n \
    \       long long q = ans / 10;\n        if (q & 1) {\n            ans = ans -\
    \ q * 10;\n        }\n    }\n    std::vector<long> ans_list;\n    long long ans2\
    \ = 0;\n    while (ans > 0) {\n        if (ans % 10 == 0) {\n            ans2\
    \ = ans + ans2 + 1;\n        }\n        if (ans2 > ans) {\n            ans_list.push_back(ans2);\n\
    \            ans = ans - ans2;\n        }\n        else {\n            ans_list.push_back(ans);\n\
    \            ans = ans2 + ans;\n        }\n    }\n    return ans_list;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for (long n : x) {\n        int a = n % 10;\n        if (a % 2 ==\
    \ 0) {\n            ans.push_back(n);\n        }\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpdwib20dz: /tmp/tmpdwib20dz.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long xdigit[26] =\
    \ {-1};\n    for(auto i = x.begin(); i != x.end(); ++i) {\n        xdigit[*i%10]++;\n\
    \    }\n    std::vector<long> y;\n    for(int i = 0; i != 26; ++i) {\n       \
    \ if(xdigit[i] != 0) {\n            y.push_back(static_cast<long>(i));\n     \
    \   }\n    }\n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpt27e04wm: /tmp/tmpt27e04wm.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ answer;\n    long long ans = 0, sum = 0;\n    for (long i = 0; i <= x.size();\
    \ i++) {\n        if (i != x.size() - 1 && x[i] % 2 != 0) {\n            sum +=\
    \ x[i];\n        }\n        if (x[i] % 2 == 0) {\n            ans += x[i];\n \
    \       }\n    }\n    if (sum != 0) {\n        ans = ans / sum * -1;\n    }\n\
    \    answer.push_back(ans);\n    for (long i = 0; i < x.size(); i++) {\n     \
    \   if (x[i] % 2 == 0) {\n            answer.push_back(x[i]);\n        }\n   \
    \ }\n    return answer;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpokg8pxq5: /tmp/tmpokg8pxq5.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    assert(x.size() >\
    \ 0);\n    long maxValue = *std::max_element(x.begin(), x.end()); // get the max\
    \ value\n    long minValue = *std::min_element(x.begin(), x.end()); // get the\
    \ min value\n    std::vector<long> y(x.size()); // the return vector \n    for\
    \ (long i = 0; i < x.size(); i++)\n    {\n        long val = x[i];\n        //\
    \ find the min and max value \n        if(val >= minValue && val <= maxValue)\n\
    \        {\n            if(val % 2 == 0) // if val is even \n            {\n \
    \               y.push_back(x[i]); // add it to the return list\n            }\n\
    \        }\n    }\n    // sort the return list \n    std::sort(y.begin(), y.end());\
    \ \n    return y;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpcarlob3r: /tmp/tmpcarlob3r.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    std::set<long> st;\n    \n    for(long &i: x) {\n        while(i /\
    \ 10 != 0) {\n            st.insert(i % 10);\n            i = i / 10;\n      \
    \  }\n    }\n    \n    // remove duplicated digits.\n    for(std::set<long>::iterator\
    \ it = st.begin();\n            it != st.end(); it++) {\n        if(ans.find(*it)\
    \ != ans.end()) {\n            continue;\n        }\n        ans.push_back(*it);\n\
    \    }\n    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczr3d8jz.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpczr3d8jz.cpp:21:16: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   21 |         if(ans.find(*it)\
    \ != ans.end()) {\n      |                ^~~~\n"
  stdout: ''
  timestamp: 1660093659
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    std::vector<long> result;\n    for(long i=0;i<x.size();i++)\n    {\n\
    \        long current=x[i];\n        if(current % 2 != 0)\n            result.push_back(current);\n\
    \    }\n    sort(result.begin(),result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp8osetppq: /tmp/tmp8osetppq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)152,
    (long)323, (long)1422, (long)10}))) == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n\tlong result = 0;\n\t\
    std::vector<long> temp;\n\tstd::vector<long> y;\n\tfor (int i = 0; i < x.size();\
    \ i++) {\n\t\tbool flag = false;\n\t\tlong d = x[i];\n\t\twhile (d > 0) {\n\t\t\
    \tflag = (flag == true) || (d % 2 == 0);\n\t\t\td = d/10;\n\t\t}\n\t\tif (!flag)\
    \ {\n\t\t\ttemp.push_back(x[i]);\n\t\t}\n\t}\n\tstd::sort(temp.begin(), temp.end());\n\
    \tfor (int i = 0; i < temp.size(); i++) {\n\t\tif (temp[i] < 10) {\n\t\t\tresult\
    \ += temp[i] * 10000;\n\t\t} else {\n\t\t\tresult += temp[i] * 100;\n\t\t}\n\t\
    }\n\tstd::cout << result << std::endl;\n\treturn y;\n}\nint main() {\n    auto\
    \ candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpz580khsm: /tmp/tmpz580khsm.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: '14800

    '
  timestamp: 1660093660
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    long long int u = 0;\n    long long int d = 0;\n    std::vector<long>\
    \ v;\n    for(long long int i : x) {\n        if(i%2 == 0) {\n            u +=i;\n\
    \        }else {\n            d+=i;\n        }\n    }\n    for(long long int i\
    \ : x) {\n        if(d%2 == 0) {\n            v.push_back(i);\n        }else {\n\
    \            v.push_back(u+i);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvh72h10i: /tmp/tmpvh72h10i.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093660
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    long n = x.size();\n    long s = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        s = s * 10 + x[i];\n    }\n    long k = s;\n    long j = 0;\n   \
    \ std::vector<long> result;\n    while (k != 0) {\n        if (k % 2 == 0) {\n\
    \            j = j + 1;\n        } else {\n            result.push_back(j);\n\
    \            k = k / 2;\n            j = 0;\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093665
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long max_element\
    \ = x[0];\n    for (auto e : x) {\n        if (e > max_element)\n            max_element\
    \ = e;\n    }\n    long long max_index = max_element % 10;\n    max_index = max_index\
    \ + 1;\n    std::vector<long> ans;\n    for (auto e : x) {\n        long long\
    \ temp = (e % 10) + max_index;\n        for (auto &a : ans) {\n            if\
    \ (a <= temp) {\n                ans.push_back(a);\n                break;\n \
    \           }\n        }\n        if (ans.size() == 0) {\n            ans.push_back(e);\n\
    \        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpvx_serbj: /tmp/tmpvx_serbj.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  assert(x.size() >= 1);\n\
    \  std::sort(x.begin(), x.end());\n  std::vector<long> result(x.size());\n  long\
    \ prev = 0, ans = 0;\n  for (size_t i = 0; i < x.size(); ++i) {\n    if (x[i]\
    \ % 2 != 0) {\n      result[ans] = x[i];\n      ans ++;\n      while (x[i] / 10\
    \ % 2 == 0) {\n        x[i] /= 10;\n        ++i;\n      }\n    }\n    if (prev\
    \ != 0 && x[i] != prev && x[i] % 2 != 0) {\n      std::sort(result.begin() + ans,\
    \ result.end());\n      result.erase(std::unique(result.begin() + ans, result.end()),\
    \ result.end());\n    }\n    prev = result[i];\n  }\n  std::sort(result.begin()\
    \ + ans, result.end());\n  return result;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp7qce1gq4: /tmp/tmp7qce1gq4.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n\tstd::vector<long> ret;\n\
    \tfor (long i : x)\n\t{ \n\t\tret.resize(ret.size() + 1); \n\t\tlong digit = i\
    \ % 10;\n\t\twhile (digit % 2 == 0)\n\t\t\tdigit /= 2;\n\t\tret[ret.size() - 1]\
    \ = i;\n\t}\n\tstd::sort(ret.begin(), ret.end());\n\treturn ret;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp057rpsvl: /tmp/tmp057rpsvl.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    \n    for(auto x: x) {\n        while(x > 0) {\n            long temp\
    \ = x / 10;\n            if( temp % 2 == 0) {\n                ans.push_back(temp);\n\
    \            }\n            x = x % 10;\n        }\n    }\n    \n    ans.resize(ans.size()-1);\n\
    \    \n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    long result = 0;\n    for (long &i : x) {\n        i = i % 10;\n \
    \       result += i * i;\n    }\n    long max = (long) result;\n    std::vector<long>\
    \ ans;\n    long an = result;\n    while (an != 0) {\n        if (an % 2 == 0)\n\
    \            ans.push_back(an);\n        an = an / 10;\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmprapjkg7w: /tmp/tmprapjkg7w.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ y;\n    for (auto num : x){\n        long temp;\n        temp = num;\n     \
    \   while(temp > 0) {\n            long c = temp % 10;\n            if (c % 2\
    \ == 0)\n                y.push_back(temp % 10);\n            temp /= 10;\n  \
    \      }\n    }\n    std::sort(y.begin(), y.end());\n    return y;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp9d3cjc6_: /tmp/tmp9d3cjc6_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Write your code\
    \ here.\n    long long count=0;\n    for(long long i=0;i<x.size();i++)\n    {\n\
    \        if(x[i]%2==0)\n        {\n            count=count+1;\n        }\n   \
    \ }\n    std::vector<long> y;\n    for(long long i=0;i<x.size();i++)\n    {\n\
    \        if(x[i]==0)\n        {\n            y.push_back(x[i]);\n        }\n \
    \   }\n    if(count!=x.size())\n    {\n        std::cout<<\"error \"<<count<<\"\
    =\"<<x.size()<<std::endl;\n    }\n    std::sort(y.begin(),y.end());\n    long\
    \ long num=0;\n    for(long long i=0;i<y.size();i++)\n    {\n        if((y[i]/10)%2==0)\n\
    \        {\n            num=num+1;\n        }\n    }\n    std::cout<<\"error \"\
    <<num<<\"=\"<<y.size()<<std::endl;\n    return y;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmplkoim3oy: /tmp/tmplkoim3oy.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: 'error 1=4

    error 0=0

    '
  timestamp: 1660093661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // Write your code\
    \ here\n    std::unordered_set<long> hash;\n    for(int i=0; i<x.size(); i++)\
    \ {\n        hash.insert(x[i]);\n    }\n    std::vector<long> ans;\n    while(!hash.empty())\
    \ {\n        long curr = hash.begin()->first;\n        hash.remove(curr);\n  \
    \      for(int i=0; i<x.size(); i++) {\n            long dig = x[i];\n       \
    \     if( dig < curr) {\n                continue;\n            }\n          \
    \  if( hash.count(dig) == 0) {\n                ans.push_back(dig);\n        \
    \        hash.insert(dig);\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgzvc0dne.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgzvc0dne.cpp:15:35: error: request for member \u2018first\u2019\
    \ in \u2018* hash.std::unordered_set<long int>::begin().std::__detail::_Node_iterator<long\
    \ int, true, false>::operator->()\u2019, which is of non-class type \u2018const\
    \ long int\u2019\n   15 |         long curr = hash.begin()->first;\n      |  \
    \                                 ^~~~~\n/tmp/tmpgzvc0dne.cpp:16:14: error: \u2018\
    class std::unordered_set<long int>\u2019 has no member named \u2018remove\u2019\
    \n   16 |         hash.remove(curr);\n      |              ^~~~~~\n"
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long long n=0, digit;\n    // use unordered_set here\n    std::unordered_set<long>\
    \ unq;\n    for (long i : x){\n        digit = i % 10;\n        if (unq.find(digit)!=unq.end()){\n\
    \            ans.push_back(i);\n        }\n        unq.insert(digit);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp8wvdqthv: /tmp/tmp8wvdqthv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  int n = x.size();\n\
    \  for(int i=0;i<n;i++){\n    int even = 0;\n    for(int j=0;j<i;j++){\n     \
    \ if(j%2==0){\n        even++;\n      }\n      if(even == 0){\n        break;\n\
    \      }\n    }\n    if(even!=0){\n      x.erase(x.begin() + i);\n      i--;\n\
    \      n--;\n    }\n  }\n  std::vector<long> y;\n  for(const long &x: x){\n  \
    \  y.push_back(x);\n  }\n  return y;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmputwskbsu: /tmp/tmputwskbsu.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    assert(x.size()>0);\n\
    \    int flag[MAXN];\n    long temp=0;\n    for(int i=0;i<x.size();i++)\n    {\n\
    \        temp=x[i];\n        for(int j=i;j<MAXN;j++)\n        {\n            if((flag[j]==0)\
    \ && (temp%10==0))\n            {\n                flag[j]=1;\n              \
    \  break;\n            }\n        }\n    }\n    std::vector<long> ans;\n    for(int\
    \ i=0;i<MAXN;i++)\n    {\n        if((flag[i]==0))\n        {\n            ans.push_back(i);\n\
    \        }\n    }\n    std::sort(ans.begin(),ans.end());\n    return ans;\n}\n\
    int main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ro8jg9q.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3ro8jg9q.cpp:9:14: error: \u2018MAXN\u2019 was not declared\
    \ in this scope\n    9 |     int flag[MAXN];\n      |              ^~~~\n/tmp/tmp3ro8jg9q.cpp:16:17:\
    \ error: \u2018flag\u2019 was not declared in this scope\n   16 |            \
    \ if((flag[j]==0) && (temp%10==0))\n      |                 ^~~~\n/tmp/tmp3ro8jg9q.cpp:26:13:\
    \ error: \u2018flag\u2019 was not declared in this scope\n   26 |         if((flag[i]==0))\n\
    \      |             ^~~~\n"
  stdout: ''
  timestamp: 1660093661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // your code goes\
    \ here\n    std::vector<long> y;\n    long t;\n    for (long i=0;i<x.size();i++)\
    \ {\n        t=x[i];\n        for(int j=i;j<x.size();j++) {\n            if(x[j]%t==0)\
    \ {\n                break;\n            }\n        }\n        if(j==x.size())\
    \ {\n            y.push_back(t);\n        }\n    }\n    \n    return y;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8d6fgn6k.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8d6fgn6k.cpp:18:12: error: \u2018j\u2019 was not declared\
    \ in this scope\n   18 |         if(j==x.size()) {\n      |            ^\n"
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    int N = x.size();\n\
    \    std::vector<long> ans(N);\n    std::iota(ans.begin(), ans.end(), 0);\n\n\
    \    for(int i = 0; i < N; i++) {\n        int sum = 0;\n        for(int j = 0;\
    \ j < i; j++) sum += x[j];\n        for(int j = i; j < N; j++) sum += x[j];\n\
    \        if(sum % 2 == 0) ans[i] = 1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpbbnukvyn: /tmp/tmpbbnukvyn.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093661
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp2_4ngr_l: /tmp/tmp2_4ngr_l.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // do something\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp5o6s0u8l: /tmp/tmp5o6s0u8l.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    long prev;\n    for(long &x : x)\n    {\n        while(x>=0)\n   \
    \     {\n            int digit = x%10;\n            if(digit%2==0) ans.push_back(digit);\n\
    \            x /= 10;\n        }\n        prev = x;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660093666
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n  std::vector<long> ans;\n\
    \  long long int ux=0, uy=0;\n  for (long long int i=0;i<x.size();i++) {\n   \
    \ ux=ux<<2;\n    uy+=x[i];\n    if (ux<uy) {\n      ans.push_back(x[i]);\n   \
    \   ux=uy;\n    }\n    uy=0;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpawfjgayz: /tmp/tmpawfjgayz.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ nums;\n    // We sort the given nums here.\n    nums = std::move(x);\n    //\
    \ To keep track of all the already seen digits\n    std::vector<bool> seen(x.size(),\
    \ false);\n    // We go through the original nums.\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        // We get a new num for the next iteration and \n        //\
    \ find out if the current num is even or odd.\n        long j = nums[i];\n   \
    \     long digit = j % 10;\n        // If it is even, we check whether the current\
    \ digit \n        // is one of the already seen ones or not.\n        if (seen[i])\
    \ {\n            // If it is, we add it to the returned list.\n            if\
    \ (seen[digit])\n                nums.push_back(nums[i]);\n        } else\n  \
    \      // If it is not we add the num to the seen digits.\n        seen[digit]\
    \ = true;\n    }\n    return nums;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // TODO\n    long\
    \ long sum = 0;\n    for (long long i = 0; i < x.size(); i++)\n    {\n       \
    \ sum += x[i];\n    }\n    long long res = sum;\n    std::vector<long> result(x.size());\n\
    \    for (long long i = 0; i < x.size(); i++)\n    {\n        if (sum % 2 == 0\
    \ && result[i] == 0)\n        {\n            result[i] = x[i];\n        }\n  \
    \  }\n    sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpp9b1tfxw: /tmp/tmpp9b1tfxw.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    std::unordered_map<long, std::set<long>> m;\n    for(long i: x) {\n\
    \        m[i]={};\n    }\n    for(long i=0;i<x.size();i++) {\n        long t=x[i];\n\
    \        for(long j=i;j<x.size();j++) {\n            long u=x[j];\n          \
    \  if(m[u]!=m[u].insert(t).second) {\n                ans.push_back(t);\n    \
    \        }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = unique_digits;\n    assert(candidate((std::vector<long>({(long)15, (long)33,\
    \ (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33})));\n\
    \    assert(candidate((std::vector<long>({(long)152, (long)323, (long)1422, (long)10})))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4i7hs4qn.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4i7hs4qn.cpp:17:20: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::unordered_map<long int, std::set<long int> >::mapped_type\u2019\
    \ {aka \u2018std::set<long int>\u2019} and \u2018bool\u2019)\n   17 |        \
    \     if(m[u]!=m[u].insert(t).second) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4i7hs4qn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp4i7hs4qn.cpp:17:37:\
    \ note:   \u2018std::unordered_map<long int, std::set<long int> >::mapped_type\u2019\
    \ {aka \u2018std::set<long int>\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   17 |             if(m[u]!=m[u].insert(t).second) {\n      |             \
    \                        ^~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp4i7hs4qn.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1112:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4i7hs4qn.cpp:17:37: note:   \u2018std::unordered_map<long int,\
    \ std::set<long int> >::mapped_type\u2019 {aka \u2018std::set<long int>\u2019\
    } is not derived from \u2018std::_"
  stdout: ''
  timestamp: 1660093661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long ans[1000];\n\
    \    for(int i = 0; i < x.size(); i++){\n        ans[x[i]/10] = x[i]%10;\n   \
    \ }\n    for(int i = 0; i < ans.size(); i++){\n        if(ans[i] != 0) ans[i]\
    \ = -1;\n    }\n    for(int i = 0; i < ans.size(); i++){\n        if(ans[i] ==\
    \ 0) ans[i] = i;\n    }\n    for(int i = 0; i < ans.size(); i++){\n        if(ans[i]\
    \ == -1) ans[i] = i;\n    }\n    std::vector<long> ans(ans, ans+ans+1);\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps91qpl_u.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps91qpl_u.cpp:12:28: error: request for member \u2018size\u2019\
    \ in \u2018ans\u2019, which is of non-class type \u2018long int [1000]\u2019\n\
    \   12 |     for(int i = 0; i < ans.size(); i++){\n      |                   \
    \         ^~~~\n/tmp/tmps91qpl_u.cpp:15:28: error: request for member \u2018size\u2019\
    \ in \u2018ans\u2019, which is of non-class type \u2018long int [1000]\u2019\n\
    \   15 |     for(int i = 0; i < ans.size(); i++){\n      |                   \
    \         ^~~~\n/tmp/tmps91qpl_u.cpp:18:28: error: request for member \u2018size\u2019\
    \ in \u2018ans\u2019, which is of non-class type \u2018long int [1000]\u2019\n\
    \   18 |     for(int i = 0; i < ans.size(); i++){\n      |                   \
    \         ^~~~\n/tmp/tmps91qpl_u.cpp:21:23: error: conflicting declaration \u2018\
    std::vector<long int> ans\u2019\n   21 |     std::vector<long> ans(ans, ans+ans+1);\n\
    \      |                       ^~~\n/tmp/tmps91qpl_u.cpp:8:10: note: previous\
    \ declaration as \u2018long int ans [1000]\u2019\n    8 |     long ans[1000];\n\
    \      |          ^~~\n/tmp/tmps91qpl_u.cpp:21:35: error: invalid operands of\
    \ types \u2018long int [1000]\u2019 and \u2018long int [1000]\u2019 to binary\
    \ \u2018operator+\u2019\n   21 |     std::vector<long> ans(ans, ans+ans+1);\n\
    \      |                                ~~~^~~~\n      |                     \
    \           |   |\n      |                                |   long int [1000]\n\
    \      |                                long int [1000]\n/tmp/tmps91qpl_u.cpp:22:19:\
    \ error: request for member \u2018begin\u2019 in \u2018ans\u2019, which is of\
    \ non-class type \u2018long int [1000]\u2019\n   22 |     std::sort(ans.begin(),\
    \ ans.end());\n      |                   ^~~~~\n/tmp/tmps91qpl_u.cpp:22:32: error:\
    \ request for member \u2018end\u2019 in \u2018ans\u2019, which is of non-class\
    \ type \u2018long int [1000]\u2019\n   22 |     std::sort(ans.begin(), ans.end());\n\
    \      |                                ^~~\n/tmp/tmps91qpl_u.cpp:23:12: error:\
    \ could not convert \u2018ans\u2019 from \u2018long int [1000]\u2019 to \u2018\
    std::vector<long int>\u2019\n   23 |     return ans;\n      |            ^~~\n\
    \    "
  stdout: ''
  timestamp: 1660093661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    long long sum = 0;\n\
    \    long long ans = 0;\n    for (long long i = 0; i < x.size(); i++) {\n    \
    \    if (i > 0) {\n            sum += x[i];\n            ans = max(ans, sum %\
    \ 10);\n            sum = 0;\n        }\n    }\n    std::vector<long> ans((ans\
    \ * 10 + ans) / (10 * x.size()), -1);\n    for (long long i = 0; i < x.size();\
    \ i++) {\n        if (i > 0) {\n            sum += x[i];\n            ans[ans\
    \ / 10]++;\n            sum = 0;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3k7uns91.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3k7uns91.cpp:13:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |             ans =\
    \ max(ans, sum % 10);\n      |                   ^~~\n      |                \
    \   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n       \
    \          from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n      \
    \           from /tmp/tmp3k7uns91.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp3k7uns91.cpp:17:23: error: conflicting\
    \ declaration \u2018std::vector<long int> ans\u2019\n   17 |     std::vector<long>\
    \ ans((ans * 10 + ans) / (10 * x.size()), -1);\n      |                      \
    \ ^~~\n/tmp/tmp3k7uns91.cpp:9:15: note: previous declaration as \u2018long long\
    \ int ans\u2019\n    9 |     long long ans = 0;\n      |               ^~~\n/tmp/tmp3k7uns91.cpp:21:25:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |             ans[ans / 10]++;\n      |                         ^\n/tmp/tmp3k7uns91.cpp:25:12:\
    \ error: could not convert \u2018ans\u2019 from \u2018long long int\u2019 to \u2018\
    std::vector<long int>\u2019\n   25 |     return ans;\n      |            ^~~\n\
    \      |            |\n      |            long long int\n"
  stdout: ''
  timestamp: 1660093661
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ res;\n    long long ans = 0;\n    long long xi = x[0], xj = x[0];\n    long\
    \ long xmax = x[0];\n\n    for(long long i = 1;i < x.size();i++) {\n        xmax\
    \ = max(xmax,x[i]);\n        xj = max(xj,x[i]);\n        if(x[i] % 2 == 0) {\n\
    \            ans += xi - xj;\n            xi = x[j];\n            xj = x[i];\n\
    \        }\n    }\n    res.push_back(ans);\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfsw13vfa.cpp: In function \u2018std::vector<long int> unique_digits(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfsw13vfa.cpp:14:16: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   14 |         xmax = max(xmax,x[i]);\n\
    \      |                ^~~\n      |                std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfsw13vfa.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpfsw13vfa.cpp:18:20: error: \u2018\
    j\u2019 was not declared in this scope\n   18 |             xi = x[j];\n     \
    \ |                    ^\n"
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    \n    std::sort(x.begin(),\
    \ x.end());\n\n    long long ans = x[0];\n    for(long i = 1; i < x.size(); ++i)\
    \ {\n        if(ans % 2 == 0 && x[i] % 2 != 0) {\n            ans = (ans * (long\
    \ long)x[i]) / 2;\n        }\n    }\n    \n    std::vector<long> ans_list;\n \
    \   \n    while(ans != 0) {\n        ans_list.push_back(ans);\n        ans = ans\
    \ * (long long)ans_list.back() / 2;\n    }\n    \n    return ans_list;\n}\nint\
    \ main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpoqtasnen: /tmp/tmpoqtasnen.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    long num = x.front();\n    long count = 1;\n    for (auto it=x.begin()+1;\
    \ it!=x.end(); ++it) {\n        if ((num%10)%2 == 0) {\n            result.push_back(count*(num%10));\n\
    \        }\n        count++;\n        num = *it;\n    }\n    sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n\
    \    assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp13mxsi7e: /tmp/tmp13mxsi7e.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ result;\n    long digit = 0;\n    for (long &v : x){\n        v = v % 10;\n\
    \        digit = digit * 10 + v;\n    }\n    std::sort(x.begin(), x.end());\n\
    \    for (long &v : x){\n        v = v % 10;\n        if (v % 2 == 0)\n      \
    \      result.push_back(digit);\n        digit = digit * 10 + v;\n    }\n    result.push_back(digit);\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique_digits;\n  \
    \  assert(candidate((std::vector<long>({(long)15, (long)33, (long)1422, (long)1})))\
    \ == (std::vector<long>({(long)1, (long)15, (long)33})));\n    assert(candidate((std::vector<long>({(long)152,\
    \ (long)323, (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp58jx9zq1: /tmp/tmp58jx9zq1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    // write your code\
    \ here\n    std::vector<long> ans;\n    for (int i = 0; i < x.size(); i++) {\n\
    \        if (x[i] % 2 == 0) {\n            ans.push_back(x[i]);\n        }\n \
    \   }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmp_q861yds: /tmp/tmp_q861yds.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of positive\
    \ integers x. return a sorted list of all \n// elements that hasn't any even digit.\n\
    // Note: Returned list should be sorted in increasing order.\n// For example:\n\
    std::vector<long> unique_digits(std::vector<long> x) {\n    std::vector<long>\
    \ ans;\n    for(int i=0; i < x.size(); i++) {\n        int dig = x[i]%10;\n  \
    \      for(size_t j=i+1; j < x.size(); j++) {\n            long tmp = x[j]%10;\n\
    \            if(tmp == dig) continue;\n            else ans.push_back(tmp*10 +\
    \ dig);\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = unique_digits;\n    assert(candidate((std::vector<long>({(long)15,\
    \ (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15,\
    \ (long)33})));\n    assert(candidate((std::vector<long>({(long)152, (long)323,\
    \ (long)1422, (long)10}))) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)12345,\
    \ (long)2033, (long)111, (long)151}))) == (std::vector<long>({(long)111, (long)151})));\n\
    \    assert(candidate((std::vector<long>({(long)135, (long)103, (long)31}))) ==\
    \ (std::vector<long>({(long)31, (long)135})));\n}\n"
  status: Exception
  stderr: 'tmpxa4m3ofg: /tmp/tmpxa4m3ofg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)15,
    (long)33, (long)1422, (long)1}))) == (std::vector<long>({(long)1, (long)15, (long)33}))''
    failed.

    '
  stdout: ''
  timestamp: 1660093662
