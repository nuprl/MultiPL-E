name: HumanEval_108_count_nums
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
  \ which takes an array of integers and returns\n// the number of elements which\
  \ has a sum of digits > 0.\n// If a number is negative, then its first signed digit\
  \ will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\nlong count_nums(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
  \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
  \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
  \ (1));\n}\n"
completions: ["    long ans = 0, sum = 0, n;\n    n = arr.size();\n    while (n--)\
    \ {\n        sum += arr[n];\n    }\n    while (sum >= 10) {\n        ans += 1;\n\
    \        sum -= 10;\n    }\n    return ans;", "  long n = 0;\n  for (long &v :\
    \ arr) {\n    if (v < 0) {\n      v += pow(10, arr.size());\n    }\n    if (v\
    \ < 10 && v > 0) {\n      n++;\n    }\n  }\n  return n;", "  int len = 0;\n  for\
    \ (int i = 0; i < arr.size(); ++i) {\n    while (arr[i] > 9) {\n      ++len;\n\
    \      arr[i] /= 10;\n    }\n  }\n  return len;", "  long ans = 0, n = arr.size();\n\
    \  for (size_t i = 0; i < n; ++i) {\n    if (arr[i] >= 0) {\n      ans += arr[i]\
    \ % 10;\n    }\n  }\n  return ans;", "    // Your code here\n    // Your code\
    \ here\n    // Your code here\n    // Your code here\n    return a;", "  std::vector<long>\
    \ numbers(arr.size());\n  for (int i = 0; i < arr.size(); i++) {\n    numbers[i]\
    \ = arr[i];\n  }\n  std::sort(numbers.begin(), numbers.end());\n  int index =\
    \ 0;\n  while (index < numbers.size()) {\n    long sum = 0;\n    long number =\
    \ numbers[index];\n    while (index != numbers.size() && number > 0) {\n     \
    \ sum += number % 10;\n      number /= 10;\n      ++index;\n    }\n    if (sum\
    \ > 0) {\n      return index + 1;\n    }\n    index++;\n  }\n  return 0;", " \
    \ // Write your code here\n  long t = 0;\n  for (int i = 0; i < arr.size(); i++)\
    \ {\n    if (arr[i] >= 0)\n      t += arr[i];\n  }\n  return t;", "    int count\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) continue;\n\
    \        long l = arr[i] % 10;\n        arr[i] /= 10;\n        if (l >= 2) {\n\
    \            count += arr[i];\n        }\n    }\n    return count;", "    if (arr.empty())\
    \ return 0;\n    int firstNum = std::abs(arr[0]);\n    int secondNum = arr[0]\
    \ - firstNum;\n    long ans = 0;\n    for (int i = 1; i < arr.size(); ++i) {\n\
    \        ans += std::abs(arr[i] - firstNum);\n        ans += (arr[i] - secondNum)\
    \ * (arr[i] - firstNum);\n        firstNum = secondNum;\n        secondNum = arr[i]\
    \ - firstNum;\n    }\n    return ans;", "\tint sum = 0;\n\tfor(int i=0;i<arr.size();i++){\n\
    \t\tsum+=arr[i];\n\t}\n\twhile(sum>0){\n\t\tsum--;\n\t}\n\treturn sum;", "  long\
    \ ans = 0;\n  for (int i = 0; i < arr.size(); ++i) {\n    if (arr[i] >= 0) {\n\
    \      ans += arr[i];\n    } else {\n      ans += (arr[i] - '0');\n    }\n  }\n\
    \  return ans;", "  int n = arr.size();\n  std::vector<long> digits(n);\n  for\
    \ (int i = 0; i < n; ++i) digits[i] = abs(arr[i]);\n  int cnt = 0;\n  for (int\
    \ i = n - 1; i >= 0; --i) {\n    if (digits[i] > 0) {\n      cnt += digits[i];\n\
    \    }\n  }\n  return cnt;", "   long ans = 0;\n   for(auto x:arr) {\n      ans\
    \ += x % 10;\n      x /= 10;\n   }\n   if(ans >= 0)\n      return 0;\n   else\n\
    \      return -1*ans;", "    long n = 0, sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > 0) {\n            n = 1;\n\
    \        }\n    }\n    return n;", "    long ans = 0, neg = 0, inv = 0, digits\
    \ = 0;\n    for (long & ele : arr) digits += std::distance(std::begin(arr), std::prev(std::end(arr)));\n\
    \    // Negative numbers are handled in count_nums.\n    if (digits > 0)\n   \
    \     for (long & ele : arr) ele *= signbit(ele);\n    if (digits < 0)\n     \
    \   for (long & ele : arr) ele *= -1 * signbit(ele);\n    for (long & ele : arr)\
    \ ele -= neg;\n    // Inverse digits and get the actual digits.\n    for (long\
    \ & ele : arr) ele *= inv;\n    for (long & ele : arr) ele /= digits;\n    for\
    \ (long & ele : arr) ans += ele;\n    return ans;", "    long sum = 0;\n    std::vector<long>\
    \ nums;\n    for (long n = 0; n < arr.size(); n++) {\n        long digit = arr[n];\n\
    \        if (digit < 0) {\n            digit *= -1;\n        }\n        long temp\
    \ = sum + digit;\n        if (temp > 0) {\n            nums.push_back(temp);\n\
    \        }\n        sum = temp;\n    }\n    return nums.size();", "    long ans\
    \ = 0;\n    for (long &n : arr)\n        if ((n > 0) && (n <= 9)) {\n        \
    \    ans += n;\n        } else if (n < 0) {\n            n = -n;\n           \
    \ ans += n / 10;\n            n = n % 10;\n            if (n > 0)\n          \
    \      ans += n % 10;\n        }\n    return ans;", "    long count = 0;\n   \
    \ long digit = 0;\n    for (long num : arr) {\n        // if number is negative\n\
    \        if (num < 0) {\n            num = -num;\n            digit = -1;\n  \
    \      } else {\n            digit = num % 10;\n        }\n        // digit will\
    \ be -1 if number is negative, else is 0.\n        if (digit < 0) {\n        \
    \    digit = -digit;\n        }\n        if (digit == 0) {\n            count++;\n\
    \        } else {\n            while (digit > 0) {\n                digit = digit\
    \ / 10;\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "  long count = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] < 0) {\n      count += (std::abs(arr[i]) - arr[i]) / 10;\n    } else\
    \ {\n      count += arr[i];\n    }\n  }\n  return count;", "    int sum = 0;\n\
    \    for (long i : arr) {\n        sum += i;\n    }\n    if (sum < 0)\n      \
    \  sum *= -1;\n    return sum;", "  std::vector<long> nums(arr.size());\n  for\
    \ (size_t i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      nums[i]\
    \ = arr[i] + arr[i];\n    } else {\n      nums[i] = arr[i];\n    }\n  }\n  long\
    \ ans = 0;\n  for (size_t i = 0; i < nums.size(); i++) {\n    ans += std::isdigit(nums[i]);\n\
    \  }\n  return ans;", "    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sum += abs(arr[i]);\n    }\n    return sum;", "    long sum\
    \ = 0;\n    long sum2 = 1;\n    long sum3 = 1;\n    for (int i : arr) {\n    \
    \    sum += i;\n        if (sum > 0)\n            sum2 += sum % 10;\n        if\
    \ (sum > 10)\n            sum3 += sum % 10;\n    }\n    return sum2 * sum3;",
  "    // Write your code here.\n    long sum = 0;\n    for (auto x: arr) {\n    \
    \    sum += x;\n    }\n    return sum;", "    // Write your code here.\n    long\
    \ ans = 0, len = arr.size();\n    if(len == 0) return 0;\n    if(len == 1) return\
    \ 0;\n    for(long i = 0; i< len; i++){\n        long j = arr[i]%10;\n       \
    \ if(j != 0) ans++;\n    }\n    return ans;", '  // Your code here', "    int\
    \ len = 0;\n    for (auto it = arr.begin(); it != arr.end(); ++it)\n        len\
    \ += (arr[len] + it != arr.end()) ? (it - arr.begin()) : 1;\n    return len;",
  "    long sum = 0;\n    for (auto& el: arr) {\n        sum += el;\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for (long i : arr) {\n        if (i >= 0)\n \
    \           sum += i;\n    }\n    return sum;", "    // Write your code here.\n\
    \    if (arr.empty()) {\n        return 0;\n    }\n    int n = arr.size();\n \
    \   std::vector<bool> dp(n, false);\n    long ans = 0;\n    for (int i = 1; i\
    \ < n; i++) {\n        if (arr[i] > 0 && arr[i - 1] <= 0) {\n            dp[i]\
    \ = true;\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        ans +=\
    \ (dp[i] == true) ? (arr[i] + 1) : 0;\n        dp[i] = false;\n    }\n    return\
    \ ans;", "    long count = 0;\n    for (long d : arr) {\n        if (d < 0) return\
    \ count;\n        count += d % 10;\n        d /= 10;\n    }\n    return count;",
  "    long n = 0;\n    for (long i = 0; i < arr.size(); ++i) {\n        n += arr[i]\
    \ % 10;\n    }\n    return n;", "    int sign = 1;\n    if (arr.empty()) return\
    \ 0;\n    for (long n : arr) {\n        if (n < 0) sign = -sign;\n        else\
    \ sign = 1;\n    }\n    long sum = 0;\n    for (long n : arr) {\n        sum +=\
    \ (n % 10) * sign;\n        n /= 10;\n    }\n    return sum;", "  long result\
    \ = 0;\n  for (auto i: arr) {\n    if (i >= 0) {\n      result += i;\n    }\n\
    \  }\n  return result;", "  long n = 0;\n  for (long i : arr) {\n    n = n + (i\
    \ > 0) ? i : (-i) % 10;\n  }\n  return n;", "    long result = 0;\n    for (long\
    \ num : arr) {\n        result += num;\n    }\n    return result % 10;", "   \
    \ // Code here\n    long cnt = 0;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] < 0) {\n            cnt += (-arr[i]) - 1;\n        } else {\n\
    \            cnt += (arr[i]-1);\n        }\n    }\n    return cnt;", "  // Initialize\
    \ a result variable for number of elements having a sum of\n  // digits > 0\n\
    \  long result = 0;\n  // Iterate through all elements of the vector\n  for (size_t\
    \ i = 0; i < arr.size(); i++) {\n    // If the element isn't a negative number\
    \ or a sum of digits is 0, skip\n    if (arr[i] <= 0 || arr[i] + arr[i - 1] <\
    \ 0) {\n      continue;\n    }\n    // If the element is a sum of digits > 0,\
    \ then increment result variable\n    result += arr[i];\n  }\n  // Return the\
    \ result variable\n  return result;", "    long count = 0;\n    for (long i =\
    \ arr.size() - 1; i >= 0; i--) {\n        long cur = arr[i];\n        for (long\
    \ j = 1; j != cur; j++) {\n            if (j > 0) {\n                count +=\
    \ j;\n            }\n        }\n    }\n    return count;", "    long ans = 0;\n\
    \    for (long n : arr) {\n        int sign = n < 0 ? -n : n;\n        long sum\
    \ = 0;\n        for (long m : arr) {\n            int curr = m % 10;\n       \
    \     sum += sign * abs(curr);\n            m /= 10;\n        }\n        if (sum\
    \ > 0) {\n            ans += 1;\n        }\n    }\n    return ans;", "    int\
    \ len = 0;\n    for (auto it : arr) {\n        while (it > 0) {\n            len++;\n\
    \            it /= 10;\n        }\n    }\n    long sum = 0;\n    for (auto it\
    \ : arr) {\n        while (it > 0) {\n            sum += it;\n            it /=\
    \ 10;\n        }\n    }\n    return len - sum;", "    // code here\n    long count\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] < 0) arr[i]\
    \ += 10;\n        if (arr[i] > 9) count++;\n    }\n    return count;", "    long\
    \ n = arr.size();\n    long sum = 0;\n    // Write your code here.\n    for( long\
    \ i = 0; i < n; i++){\n        if( arr[i] < 0 ){\n            sum += (arr[i])\
    \ * (-1);\n            arr[i] = (arr[i]) * (-1);\n        } else {\n         \
    \   sum += arr[i];\n        }\n    }\n    return sum;", "    int n = arr.size();\n\
    \    long count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <\
    \ 0) {\n            count -= arr[i];\n        } else {\n            count += arr[i];\n\
    \        }\n    }\n    return count;", "  if (arr.size() == 0) {\n    return 0;\n\
    \  }\n  long count = 0;\n  for (long &elem : arr) {\n    count += elem;\n  }\n\
    \  return count;", "    assert(arr.size() > 0);\n    // Initialize a result to\
    \ zero:\n    long result = 0;\n    for (auto it = arr.begin(); it != arr.end();\
    \ ++it) {\n        result += *it % 10;\n    }\n    if (result < 0) {\n       \
    \ result -= 10;\n    }\n    return result;", "    int ans = 0;\n    for (auto\
    \ it = arr.begin(); it != arr.end(); ++it) {\n        ans += (*it);\n    }\n \
    \   return ans;", "  long count = 0;\n  for (auto i : arr) {\n    if (i >= 0)\
    \ {\n      count++;\n      continue;\n    }\n    // If i < 0, then i is positive.\n\
    \    // If i is negative, we need to subtract it from (2^N - 1)\n    // where\
    \ N is the number of bits in the long representation of i, which is 2\n    //\
    \ for 32-bit integers.\n    // For N >= 1, we subtract from (2^(N - 1)).\n   \
    \ long k = i * 2;\n    for (long j = k - 1; j >= 0; j--) {\n      if (j > (long)\
    \ bit_length(i)) {\n        continue;\n      }\n      // We are at a multiple\
    \ of 2, so the digit is\n      // greater than 0.\n      count++;\n      break;\n\
    \    }\n  }\n  return count;", "    long ret = 0;\n    for(auto n: arr)\n    {\n\
    \        if(n > 0)\n        {\n            ret += static_cast<long>(n);\n    \
    \    }\n    }\n    return ret;", "    long ans = 0;\n    for (long i = 1; i <\
    \ arr.size(); i++) {\n        long digits = 0;\n        while (arr[i] > 0) {\n\
    \            digits += arr[i] % 10;\n            arr[i] /= 10;\n        }\n  \
    \      if (digits > 0) {\n            ans += 1;\n        }\n    }\n    return\
    \ ans;", "    long num_elements = 0;\n    long sum = 0;\n    for (long i = 0;\
    \ i != arr.size(); ++i) {\n        sum += arr[i];\n        num_elements += 1;\n\
    \        if (sum > 0) {\n            break;\n        }\n    }\n    return num_elements;",
  "    long result = 0;\n    for (auto num : arr) {\n        int n = abs(num);\n \
    \       if (n >= 1000000000)\n            n = n / 1000000000L;\n        else if\
    \ (n >= 1000000)\n            n = n / 1000000L;\n        else if (n >= 1000)\n\
    \            n = n / 1000L;\n        else if (n >= 100)\n            n = n / 100L;\n\
    \        else\n            n = n / 10L;\n        result += n;\n    }\n    return\
    \ result;", "    // write your code in C++14\n    int sum = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;",
  "  // Write your code here.\n  // long sum = 0;\n  // long count = 1;\n  long sum\
    \ = 0;\n  for (auto it = arr.begin(); it != arr.end(); ++it) {\n    sum += *it;\n\
    \    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;", "  // Write\
    \ your code here\n  long count = 0;\n  long total = 0;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    total += arr[i];\n    if (total > 0)\n      count++;\n\
    \  }\n  return count;", "    if (arr.size() == 0) {\n        return 0;\n    }\n\
    \    // We will store the number of digits in a variable 'len', which is equal\
    \ to\n    // the absolute value of the sum of digits of the number\n    int len\
    \ = 0;\n    for (long i: arr) {\n        // If i is negative, then (i+abs(i))\
    \ is greater than 0, then\n        // 'i' is positive, and 'i+abs(i)' is positive,\
    \ then\n        // 'i+abs(i)' is positive.\n        if (i < 0) {\n           \
    \ i += abs(i);\n        }\n        // 'abs(i)' is positive, then the digit 'i'\
    \ is positive.\n        // The sum of digits of 'i' is 'abs(i)'.\n        len\
    \ += abs(i);\n    }\n\n    // 'len' is positive, then the number has a sum.\n\
    \    return len;", "    int sum = 0;\n    int n = arr.size();\n    for (int i\
    \ = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;", "    long\
    \ sum = 0;\n    for (long i: arr) {\n        sum += i;\n    }\n    return sum;",
  "    assert(arr.size() > 0);\n    long ans = 0;\n    long t = 0;\n    for (auto\
    \ i = arr.begin(); i != arr.end(); ++i) {\n        t += (*i);\n        if (t <\
    \ 0) {\n            t += 10;\n            ans -= 1;\n        }\n    }\n    return\
    \ ans;", "    long count = 0;\n    for (long i : arr) {\n        if (i < 0)\n\
    \            i = -i;\n        long long sum = 0;\n        while(i != 0) {\n  \
    \          sum += i / 10;\n            i %= 10;\n        }\n        if (sum >\
    \ 0)\n            count++;\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto i: arr) {\n        if (i >= 0) {\n            count++;\n      \
    \  } else {\n            assert(i < 0);\n            count += i;\n        }\n\
    \    }\n    return count;", "    long ans = 0;\n    int i = 0, j = arr.size()\
    \ - 1;\n    long currSum = 0;\n    // Calculate the sum of digits of the array.\n\
    \    while (i != j) {\n        currSum += arr[i++];\n        ans += (currSum >\
    \ 0);\n        currSum -= arr[j--];\n    }\n    return ans;", "    long ret =\
    \ 0;\n    for(auto i = arr.begin(); i != arr.end(); ++i) {\n        if(*i >= 0)\
    \ {\n            if((*i & 0xf) > 0) {\n                ret += (*i & 0xf) + 1;\n\
    \            } else {\n                ret += (*i & 0xf);\n            }\n   \
    \     } else {\n            if((*i & 0x7) > 0) {\n                ret += (*i &\
    \ 0x7) + 1;\n            } else {\n                ret += (*i & 0x7);\n      \
    \      }\n        }\n    }\n    return ret;", "  int n = arr.size();\n  long sum\
    \ = 0;\n  for (int i = 1; i <= n; i++) {\n    sum += arr[i] - arr[i-1];\n  }\n\
    \  return sum;", "    long count = 0;\n    for (long val : arr) {\n        if\
    \ (val >= 0) {\n            count += val % 10;\n        }\n    }\n    return count;",
  "  if (arr.empty())\n    return 0;\n  long first_signed = arr[0] < 0 ? arr[0] :\
    \ -arr[0];\n  long ans = 0;\n  for (int i = 1; i < arr.size(); i++) {\n    long\
    \ num = arr[i] - first_signed;\n    if (num >= 0) {\n      ans += num;\n    }\
    \ else {\n      ans += num < 0 ? -num : num;\n    }\n  }\n  return ans;", "  long\
    \ ans = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long digit = arr[i];\n\
    \    if (digit < 0) {\n      digit *= -1;\n    }\n    while (digit > 0 && digit\
    \ % 10 == 0) {\n      digit = digit / 10;\n      ans++;\n    }\n  }\n  return\
    \ ans;", "  // Write your code here.\n  int n = arr.size();\n  long long ans =\
    \ 0;\n  for (int i = 0; i < n; i++) {\n    ans = ans + arr[i];\n  }\n  ans = ans\
    \ % 10;\n  return ans;", "    // Your code here\n    assert(arr.size() >= 1);\n\
    \    long ans = 0;\n    long curr = 0;\n    long sum = 0;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        curr = arr[i];\n        sum += curr;\n     \
    \   if (sum > 0) {\n            ans++;\n            sum = 0;\n        }\n    }\n\
    \    return ans;", "  // write your code here\n  std::map<int, long> m;\n  for\
    \ (long i : arr) {\n    m[i/10] += 1LL/10LL;\n  }\n  for (auto i : m) {\n    if\
    \ (i.second > 0) return i.second;\n  }\n  return 0;", "    long sum = 0;\n   \
    \ long digit;\n    for (auto it=arr.begin(); it!=arr.end(); ++it) {\n        digit\
    \ = *it;\n        sum += digit;\n    }\n    // If the first digit is negative,\
    \ then the number must be negative\n    return sum < 0 ? sum*-1 : sum;", "   \
    \ if (arr.size() == 0) return 0;\n    long sum = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            sum += abs(arr[i]) * pow(10,\
    \ -arr[i]);\n        }\n        else {\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;", "    long count = 0;\n    for (long i : arr) {\n   \
    \     assert(i >= 0);\n        while (i >= 0) {\n            long d = i % 10;\n\
    \            i += d > 0 ? 1 : 0;\n            count += d;\n        }\n    }\n\
    \    return count;", "  int num_digits = 0;\n  for (auto x : arr) {\n    num_digits\
    \ += x != 0 ? log10(x) + 1 : 0;\n  }\n  int num_negatives = arr.size() - num_digits;\n\
    \  return num_negatives + num_digits;", "  int sum = 0;\n  for (int i = arr.size()-1;\
    \ i >=0 ; i--){\n    sum += arr[i];\n  }\n  return sum;", "    long n = arr.size();\n\
    \    long sum = 0;\n    for (long i = 0; i < n; ++i) {\n        if (arr[i] > 0)\n\
    \            sum += arr[i];\n    }\n    return sum;", "\tint n = arr.size();\n\
    \tlong ans = 0;\n\tlong sum = arr[0];\n\tfor (int i = 1; i < n; i++) {\n\t\tsum\
    \ += arr[i];\n\t\tif (sum > 9) {\n\t\t\tans++;\n\t\t}\n\t}\n\treturn ans;", " \
    \   long sum = 0;\n    for (auto i: arr) {\n        if (i >= 0)\n            sum\
    \ += i;\n        else\n            sum += i - abs(i);\n    }\n    return sum;",
  "    // code here\n    long cnt = 0;\n    long sum = 0;\n    for(auto i : arr)\n\
    \    {\n        sum += i;\n        if(sum > 9)\n        {\n            cnt +=\
    \ 1;\n            sum = 0;\n        }\n    }\n    return cnt;", "  int n = arr.size();\n\
    \  if (n == 0) return 0;\n  // First count the number of positive and negative\
    \ numbers\n  long ps = 0, ns = 0;\n  for (int i = 0; i < n; i++) {\n    if (arr[i]\
    \ > 0) {\n      ps++;\n    } else {\n      ns = arr[i] < 0 ? -arr[i] : arr[i];\n\
    \      if (ns < 0) ns += n;\n    }\n  }\n  return ps - ns;", "  // Write your\
    \ code here\n  long ans = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if\
    \ (arr[i] > 0)\n      ans += arr[i] % 10;\n  }\n  return ans;", "    long num_positive\
    \ = 0;\n    long num_negative = 0;\n    long sum = 0;\n    for (auto it = arr.begin();\
    \ it != arr.end(); ++it) {\n        if ((*it < 0) & (*it > -1)) {\n          \
    \  sum += -(*it);\n            num_negative++;\n        } else if (*it > 0) {\n\
    \            sum += *it;\n            num_positive++;\n        } else {\n    \
    \        assert(0);\n        }\n    }\n    if (sum == 0) {\n        return 0;\n\
    \    }\n    return num_positive + num_negative;", "    long sum = 0;\n    // Loop\
    \ through the numbers in arr\n    for (long val : arr) {\n        if (val > 0)\
    \ {\n            // If val has more than 1 digit, add it to the sum\n        \
    \    sum += val;\n        } else if (val < 0) {\n            // If val has negative\
    \ digit, add its first digit\n            sum += (-1) * val;\n        }\n    }\n\
    \    return sum;", "  if (arr.size() == 0)\n    return 0;\n  // Count the number\
    \ of negative numbers as well.\n  long num_neg = 0;\n  long n = arr.size();\n\
    \  for (long i = 0; i < n; i++) {\n    long cur = arr[i];\n    if (cur < 0) {\n\
    \      num_neg++;\n    }\n  }\n  long num = 0;\n  while (true) {\n    if (num_neg\
    \ == n) {\n      return num;\n    }\n    if (arr[num] == 0)\n      return num;\n\
    \    num++;\n  }", "    // Your code here\n    long sum = 0, i = 0, j = 0;\n \
    \   while (i < arr.size()) {\n        j = i - 1;\n        while (j >= 0) {\n \
    \           sum += arr[i]%10;\n            arr[i]/=10;\n            j--;\n   \
    \     }\n        i++;\n    }\n    return sum;", "    long count=0;\n    for (auto\
    \ i : arr) {\n        count+=i;\n        if (i>0) {\n            break;\n    \
    \    }\n    }\n    return count;", "    long result = 0;\n    for (long val :\
    \ arr) {\n        result += abs(val);\n    }\n    return result;", "  long count\
    \ = 0;\n  long prev_sum = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n  \
    \  int cur_sum = arr[i] + prev_sum;\n    if (cur_sum < 0)\n      cur_sum -= 1;\n\
    \    count += (cur_sum == 0) ? 1 : 0;\n    prev_sum = cur_sum;\n  }\n  return\
    \ count;", "  // write your code in C++14\n  long count = 0, i;\n  for (i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] >= 0) count++;\n  }\n  return count;",
  "    long cnt = 0;\n    for (int i = 0; i < arr.size(); ++i) {\n        cnt += arr[i]\
    \ < 0 ? arr[i] % 10 + 10 : arr[i];\n    }\n    return cnt;", "    std::map<long,\
    \ std::set<long>> map;\n    for (auto&& x : arr) {\n        int n = x;\n     \
    \   auto it = map.find(x);\n        if (it == map.end()) {\n            long cnt\
    \ = 0;\n            while (n) {\n                cnt += n % 10;\n            \
    \    n /= 10;\n            }\n            map.insert({x, {cnt}});\n        } else\
    \ {\n            it->second.insert(x);\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (auto&& x : map) {\n        if (x.second.size() > 1) {\n     \
    \       ans.push_back(x.first);\n        }\n    }\n    return ans.size();", " \
    \   long ans = 0;\n    long sign = arr[0] > 0 ? 1 : -1;\n    for (long i : arr)\
    \ {\n        long temp = sign * i;\n        if (temp > 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long count = 0;\n    for (auto val :\
    \ arr) {\n        if (val < 0)\n            val = -val;\n        long digit =\
    \ val % 10;\n        while (digit)\n            count += digit % 10;\n       \
    \     digit /= 10;\n    }\n    return count;", "  long sum = 0;\n  for (auto i\
    \ : arr) {\n    sum += i;\n  }\n  return sum;", "  int n = arr.size();\n  long\
    \ ans = 0;\n  // Find the first negative number\n  while (n > 0) {\n    if (arr[n]\
    \ < 0)\n      ans = -ans - 1;\n    n -= 1;\n  }\n  for (int i = 0; i < n; i++)\n\
    \    ans += arr[i];\n  return ans;", "  if (arr.size() == 0) return 0;\n  long\
    \ ans = 0;\n  for (int i = 0; i < (arr.size() - 1); i++) {\n    ans += arr[i]\
    \ * pow(10, arr.size() - i - 1);\n  }\n  ans += arr[i] * pow(10, arr.size() -\
    \ 1);\n  return ans;", '  // your code', "  std::vector<long> arr1 = arr;\n  for\
    \ (int i = 0; i < arr1.size(); i++) {\n    if (arr1[i] < 0) arr1[i] = -arr1[i];\n\
    \  }\n  std::vector<long> arr2 = arr1;\n  int sum = 0;\n  int count = 0;\n  for\
    \ (int i = 0; i < arr2.size(); i++) {\n    sum += arr2[i];\n    if (sum > 0) {\n\
    \      count++;\n    }\n  }\n  return count;", "  long result = 0;\n  for (auto\
    \ it = arr.begin(); it != arr.end(); ++it) {\n    if (*it >= 0) {\n      result\
    \ += *it % (10LL * 10);\n    }\n  }\n  return result;", '  // code here', "  \
    \  long sum = 0;\n    // Iterate over all the elements of the array\n    for(long\
    \ i : arr) {\n        // Iterate over all the digits of i\n        for(int j =\
    \ 0; j < i && j < 10; ++j) {\n            // Add the digit of i to sum if it is\
    \ greater than 0\n            if(i%10 > 0) {\n                sum += (10 - j)\
    \ * i;\n            }\n        }\n    }\n    // Return sum\n    return sum;",
  "  int sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum += abs(arr[i]);\n\
    \  }\n  if (sum < 10)\n    return 0;\n  else\n    return 1 + count_nums(arr /\
    \ 10);", "    // code here\n    long count = 0; // initialize counter\n    for\
    \ (auto &i : arr) {\n        if ((i > 0)) {\n            count += i;\n       \
    \ }\n    }\n    return count;", "  if (arr.size() == 0)\n    return 0;\n\n  long\
    \ sum = 0;\n  for (long i = 1; i < arr.size(); i++)\n    sum += arr[i];\n  int\
    \ k = sum / 10;\n  if (sum % 10)\n    k++;\n  if (k > 0 && k < arr.size())\n \
    \   return k;\n\n  std::vector<int> ans(1, k);\n  int i = 1;\n  for (long i =\
    \ 1; i < arr.size(); i++) {\n    ans[ans.size() - 1 - i] = sum - arr[i] - ans[ans.size()\
    \ - 1 - i];\n  }\n\n  return ans.size() - 1;", "    long ans = 0;\n    for (auto\
    \ i : arr) {\n        if (i >= 0) {\n            long tmp = i;\n            while\
    \ (tmp / 10 > 0) {\n                ans++;\n                tmp /= 10;\n     \
    \       }\n        }\n    }\n    return ans;", "    long count = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        long sum_of_digits = arr[i];\n      \
    \  while (sum_of_digits > 0) {\n            sum_of_digits -= arr[i - sum_of_digits\
    \ % arr.size()];\n            i++;\n        }\n        if (sum_of_digits < 0)\
    \ {\n            sum_of_digits *= -1;\n            i--;\n        }\n        count\
    \ += sum_of_digits;\n    }\n    return count;", "  // Write your code here\n \
    \ assert(arr.size() == 10);\n  int res = 0;\n  long long sum = 0;\n  for(int i\
    \ = 0; i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum < 0) {\n      sum\
    \ *= 10;\n      res --;\n    }\n  }\n  return res;", "  int s = 0, n = arr.size();\n\
    \  for (int i = 0; i < n; ++i) {\n    s += arr[i] < 0 ? arr[i] + 1 : arr[i];\n\
    \  }\n  return s;", "  // Write your code here.\n  long count = 0;\n  long sum\
    \ = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n   \
    \   sum = sum + arr[i];\n      if (sum < 0) {\n        sum = 0;\n      }\n   \
    \ } else {\n      sum += arr[i];\n    }\n    if (sum > 0) {\n      count++;\n\
    \      sum = 0;\n    }\n  }\n  return count;", "    long sum = 0, count = 0;\n\
    \    for (long val : arr) {\n        if (val >= 0) {\n            sum += val;\n\
    \            count += 1;\n            if (sum >= 10 && sum % 10 == 0) {\n    \
    \            sum += 10 - sum % 10;\n                count += 1;\n            }\n\
    \        }\n    }\n    return count;", "    if (arr.empty()) return 0;\n    long\
    \ ans = 0;\n    for (long t : arr) {\n        if (t < 0) t = -lt;\n        ans\
    \ += t % 10;\n        t /= 10;\n    }\n    return ans;", "    // TODO\n    int\
    \ n = arr.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n     \
    \   if (arr[i] < 0) {\n            arr[i] += 10;\n        }\n        sum += arr[i];\n\
    \    }\n    return sum;", "    int n = arr.size();\n    long ans = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = 0; j <\
    \ i; j++) sum += arr[j];\n        if (sum > 0) {\n            ans += 1;\n    \
    \    }\n    }\n    return ans;", "  long n = 0;\n  for (int i : arr) {\n    n\
    \ += count_digits(i);\n  }\n  return n;", "    int size = arr.size();\n    long\
    \ long ans = 0;\n    for (int i = 0; i < size; i++) {\n        int digit = arr[i]\
    \ % 10;\n        int ndigits = digit >= 0 ? digit : -digit;\n        ans += ndigits;\n\
    \    }\n    return ans;", "    long res = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < 0) {\n            arr[i] = arr[i]*-1; // first\
    \ digit will become negative\n        }\n        res += arr[i];\n    }\n    return\
    \ res;", "    long sum = 0;\n    long ans = 0;\n    for (auto it=arr.begin();\
    \ it!=arr.end(); ++it) {\n        long x = *it;\n        sum += x;\n        if\
    \ (sum > 9) {\n            ans += 1;\n            sum -= 10;\n        }\n    }\n\
    \    return ans;", "    // Your code here\n    long sum = 0;\n    for (auto x:\
    \ arr) {\n        sum += x;\n    }\n    if (sum > 0) {\n        return 1;\n  \
    \  } else {\n        return 0;\n    }", "    // Code here\n    long sum = 0;\n\
    \    for(long i=0;i<arr.size();i++)\n    {\n        sum += arr[i];\n    }\n  \
    \  return sum;", "    std::stack<long> st;\n    for (long i : arr)\n        if\
    \ (i >= 0) // positive number\n            st.push(i);\n        else {\n     \
    \       long firstNegative = st.top();\n            st.pop();\n            if\
    \ (firstNegative < 0)\n                return firstNegative + 1 + count_nums(std::vector<\
    \ long >(st | std::cref(arr)));\n            else\n                return firstNegative\
    \ + 1 + count_nums(std::vector< long >(st | std::cref(arr)));\n        }", " \
    \   int len = arr.size();\n    long ans = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        ans += arr[i];\n    }\n    if (arr[0] >= 0) {\n        ans -= arr[0];\n\
    \    }\n    return ans;", "    // Your code goes here\n    long ans = 0;\n   \
    \ long sum = 0;\n    for (long i = 0; i < arr.size(); ++i) {\n        if (arr[i]\
    \ < 0) {\n            sum += abs(arr[i]);\n        } else {\n            sum +=\
    \ arr[i];\n        }\n        if (sum >= 10) {\n            ans++;\n         \
    \   sum = 0;\n        }\n    }\n    return ans;", "    int n = arr.size();\n \
    \   long count = 0;\n    for (long i : arr) {\n        if (i >= 0) count += i;\n\
    \        if (i < 0) i += 10;\n    }\n    return n;", "    long count = 0;\n  \
    \  for (long & i : arr) {\n        if (i < 0) {\n            i -= abs(i);\n  \
    \      }\n        if (i >= 10) {\n            count += 1;\n        }\n    }\n\
    \    return count;", "    long res = 0;\n    for(auto x : arr) {\n        int\
    \ d = abs(x);\n        if(d < 0) d *= -1;\n        res += d;\n    }\n    return\
    \ res;", "  int n = arr.size();\n  long ans = 0;\n  for (int i = 0; i < n; i++)\
    \ {\n    long t = arr[i];\n    while (t > 0) {\n      ans += (t % 10);\n     \
    \ t /= 10;\n    }\n  }\n  return ans;", "    long count = 0;\n    for (long value\
    \ : arr) {\n        if (value == 0 || value < 0) {\n            if (value < 0)\n\
    \                ++count;\n            else\n                count += value %\
    \ 10;\n        } else {\n            while (value > 0) {\n                count\
    \ += value % 10;\n                value /= 10;\n            }\n        }\n   \
    \ }\n    return count;", "    // code here\n    long sum = 0;\n    for (int i\
    \ = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    if (sum < 0)\
    \ sum *= -1;\n    return sum;", "    long ans = 0;\n    long carry = 0, sum =\
    \ 0;\n\n    for (auto &el : arr) {\n        sum += el;\n        carry = sum /\
    \ 10;\n        sum += carry % 10;\n\n        if (sum > 0) {\n            ans++;\n\
    \        }\n\n        sum -= carry % 10;\n    }\n\n    return ans;", '    // code
    here', "    long count = 0;\n    for (long i = 0; i < (int) arr.size(); i++) {\n\
    \        if (arr[i] > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (long x: arr)\n        count += x;\n\
    \    return count;", "    long res = 0;\n    for (auto i : arr) {\n        //\
    \ We are considering a negative number as if it has its first digit as -ve.\n\
    \        if (i > 0) {\n            res = (res * 10) + i;\n        }\n    }\n \
    \   return res;", "  long num_zero = 0;\n  long num_one = 0;\n  for (auto it =\
    \ arr.begin(); it != arr.end(); ++it) {\n    long cur = *it % 10;\n    if (cur\
    \ > 0) {\n      num_one += cur;\n    } else {\n      num_zero += -cur;\n    }\n\
    \  }\n  return num_one + num_zero;", "  // Write your code here\n  // long num=0,\
    \ sum=0;\n  // for(int i=0;i<arr.size();i++){\n  //   sum+=arr[i];\n  //   if(sum>0){\n\
    \  //     num++;\n  //   }\n  // }\n  // return num;\n  // if(arr.size()>0){\n\
    \  //   for(int i=0;i<arr.size();i++){\n  //     sum+=arr[i];\n  //     if(sum>0){\n\
    \  //       num++;\n  //     }\n  //   }\n  // }\n  // return num;\n  long num=0;\n\
    \  for(int i=0;i<arr.size();i++){\n    if(arr[i]>0){\n      num++;\n    }\n  }\n\
    \  return num;", "  // Your code here\n  std::size_t i = 0;\n  long n = 0;\n \
    \ for (; arr[i] != 0; ++i) {\n    n += arr[i] - '0';\n  }\n  return n;", "   \
    \ long cnt = 0;\n    for (auto &n : arr)\n    {\n        if (n == 0)\n       \
    \ {\n            continue;\n        }\n        int i = 1;\n        while ((n &\
    \ 1) && (n >> i) > 0)\n        {\n            ++i;\n        }\n        cnt +=\
    \ (n >> i) - 1;\n    }\n    return cnt;", "    // write your code here\n    long\
    \ count = 0;\n    int len = arr.size();\n    for (long i = 0; i < len; i++) {\n\
    \        int sum = 0;\n        int digit = arr[i] - '0';\n        for (long j\
    \ = 0; j < len; j++) {\n            sum += arr[j];\n            if (sum > 0) {\n\
    \                digit--;\n                break;\n            }\n        }\n\
    \        if (digit > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;", "    long ans = 0;\n    for (long i : arr) {\n        while (i >= 10)\
    \ {\n            ans += i / 10;\n            i %= 10;\n        }\n        ans\
    \ += i;\n    }\n    return ans;", "  long ans = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] >= 0) ans += abs(arr[i]);\n  }\n  return ans;", "  long\
    \ count = 0;\n  for (long i = 0; i <= arr.size(); i++)\n    count += (arr[i] >\
    \ 0);\n  return count;", "    long ans = 0;\n    for (auto i : arr)\n        ans\
    \ += count_nums(arr.begin(), arr.begin() + i + 1);\n    return ans;", "  // Initialize\
    \ first digit as -1 for negative numbers.\n  long first = -1;\n  // Initialize\
    \ count as 0.\n  long count = 0;\n  // Run through each element in array.\n  for\
    \ (size_t i = 0; i < arr.size(); i++) {\n    // Add current element to count and\
    \ subtract first from current\n    // element to check for negatives.\n    count\
    \ = (count + arr[i]) - first;\n    // If first is negative, add current element\
    \ to count and subtract 1\n    // from current element to check for negatives.\n\
    \    if (first < 0) {\n      count = (count + 1) - 1;\n    }\n    // If current\
    \ element has accumulated a digit, increment count.\n    if (count > 9) {\n  \
    \    return i + 1;\n    }\n    // Initialize current digit to first to check for\
    \ next digit accumulation.\n    first = arr[i];\n  }\n  // Return total number\
    \ of elements which has sum of digits > 0.\n  return arr.size();", "    // Your\
    \ code here\n    return 0;", "    long count = 0;\n    for (long &val : arr) {\n\
    \        if (val < 0) val = (val / 10) * 10;\n        // cout << val << \"\\n\"\
    ;\n        count += std::count(arr.begin(), arr.end(), val);\n    }\n    return\
    \ count;", "    long result = 0;\n    for (auto i : arr) {\n        int count\
    \ = 1;\n        while (i != 0) {\n            i = i / 10;\n            ++count;\n\
    \        }\n        if (count > 1) {\n            result += count;\n        }\n\
    \    }\n    return result;", "        long answer = 0;\n        for (auto &e :\
    \ arr) {\n                assert(e > 0);\n                answer += abs(e);\n\
    \        }\n        return answer;", "  // Your code goes here:\n  long ans =\
    \ 0;\n  for (long i = 0; i < arr.size(); ++i) {\n    long d = arr[i];\n    if\
    \ (d < 0) {\n      d *= -1;\n    }\n    long sum = 0;\n    while (d) {\n     \
    \ sum += d % 10;\n      d /= 10;\n    }\n    ans += sum > 0 ? 1 : 0;\n  }\n  return\
    \ ans;", "    long ans = 0;\n    for (long &i : arr) i = abs(i);\n    for (long\
    \ &i : arr) if (i != 0) ans += i / 10;\n    return ans;", "  long result = 0;\n\
    \  for (long i = 0; i != arr.size(); i++) {\n    if (arr[i] < 0) {\n      result\
    \ += arr[i] + 2 * arr[i] % 10;\n    } else {\n      result += arr[i];\n    }\n\
    \  }\n  return result;", "  int n = arr.size();\n  int ans = 0, sum = 0;\n  long\
    \ cur = 0;\n  for (int i = 0; i < n; ++i) {\n    sum += arr[i];\n    while (sum\
    \ > 0) {\n      if (cur == 0) {\n        cur = arr[i];\n      } else {\n     \
    \   if (cur * 10 < sum) {\n          cur = arr[i];\n          break;\n       \
    \ }\n        sum -= cur;\n      }\n    }\n    ans += (cur > 0);\n  }\n  return\
    \ ans;", "    long count = 0;\n    int i = 0;\n    // To count the digits, use\
    \ a while loop that increases i until i is greater than or equal to the number\
    \ of elements in arr.\n    while (i + 1 < arr.size()) {\n        // if the current\
    \ element is less than 10, add it to count.\n        if (arr[i] < 10) {\n    \
    \        count += arr[i];\n            // if the current element is greater than\
    \ 0, subtract it from the sum.\n        } else if (arr[i] > 0) {\n           \
    \ count -= arr[i];\n            // if it is the first element, add it to the sum.\n\
    \        } else {\n            count += arr[i];\n        }\n        ++i;\n   \
    \ }\n    return count;", "  // code here\n  int n = arr.size();\n  if (n < 0)\n\
    \    arr = -arr;\n  std::vector<int> digi_list(n, 0);\n  for (long &x : arr)\n\
    \    digi_list[x] += 1;\n  for (int i = 0; i < n; i++)\n    if (digi_list[i] >\
    \ 0)\n      return digi_list[i];\n  return -1;", "\tint N = (int) arr.size();\n\
    \tstd::sort(arr.begin(), arr.end());\n\tint count_nums = 0;\n\twhile (std::adjacent_difference(arr.begin(),\
    \ arr.end()) == 1) {\n\t\tcount_nums++;\n\t\tarr.erase(arr.begin());\n\t}\n\t\
    return count_nums;", "  long sum = 0;\n  int count = 0;\n  for (long &i : arr)\
    \ {\n    sum += i;\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;",
  "  long cnt = 0;\n  for (long i = 0; i < arr.size(); ++i) {\n    cnt += arr[i];\n\
    \  }\n  if (cnt < 0) {\n    cnt *= -1;\n    cnt -= arr[0];\n  }\n  return cnt;",
  "    long sum = 0;\n    for (auto i : arr) {\n        if (i >= 0) sum += i;\n  \
    \  }\n    return sum;", "    int len = arr.size();\n    long ans = 0;\n    for(int\
    \ i = 0; i < len; i++){\n        if(arr[i] >= 0) ans ++;\n    }\n    return ans;",
  "  long ans = 0;\n  for (long i : arr) {\n    if (i < 0) return -1;\n    long tmp\
    \ = i;\n    while (!(tmp % 10)) {\n      tmp /= 10;\n    }\n    if (tmp == 0)\
    \ ans++;\n  }\n  return ans;", "  int ans = 0, sign = 1;\n  for (int i = 0; i\
    \ < arr.size(); ++i) {\n    long digit = arr[i];\n    long s = 1;\n    while (digit)\
    \ {\n      s *= 10;\n      s += digit;\n      digit = digit / 10;\n    }\n   \
    \ if (s >= sign) {\n      sign *= -1;\n      ans += sign;\n    }\n  }\n  return\
    \ ans;", "    if (arr.size() == 0) return 0;\n    long ans = 0, carry = 1;\n \
    \   for (long n : arr) {\n        if (n == carry) {\n            ans += 1;\n \
    \           carry = 1;\n        } else if (n < 0) {\n            carry = 1;\n\
    \            ans += (n / 10) + 1;\n        } else {\n            carry = n % 10;\n\
    \            ans += (n / 10) + carry + 1;\n        }\n    }\n    return ans;",
  "    long ans = 0;\n    for(int i = 0;i < arr.size();i++) {\n        long cur =\
    \ arr[i];\n        while(cur > 0) {\n            long d = cur % 10;\n        \
    \    ans += (d*d)/10;\n            cur /= 10;\n        }\n    }\n    return ans;",
  "    // write your code here\n    long sum = 0;\n    for (long num : arr) {\n  \
    \      sum += num;\n    }\n    if (sum > 0) {\n        return 1;\n    }\n    if\
    \ (sum < 0) {\n        long first = std::numeric_limits<long>::min();\n      \
    \  for (long num : arr) {\n            if (num < first) {\n                return\
    \ 0;\n            }\n        }\n        return 1;\n    }\n    return 0;", "  \
    \ assert(arr.size() > 0);\n   long num = 0;\n   for (auto &i : arr) {\n      \
    \ if (i >= 0) num++;\n   }\n   return num;", "    long ans = 0;\n    for (auto\
    \ i : arr) {\n        if (i != 0) {\n            ans += i / 10;\n            ans\
    \ -= i % 10;\n        }\n    }\n    return ans;", "    long ans = 0;\n    for\
    \ (long &i: arr) ans += i;\n    return ans;", "  long ans = 0;\n  for (long x\
    \ : arr)\n    if (x > 0)\n      ans += x % 10;\n  return ans;", "    long result\
    \ = 0;\n    long ans = 0;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  while (arr[i] > 0) {\n            ans += arr[i] % 10;\n            arr[i] /=\
    \ 10;\n        }\n        if (arr[i] > 0) {\n            ans -= arr[i];\n    \
    \    }\n        if (ans > 0) {\n            ans *= -1;\n        }\n        result\
    \ += ans;\n        ans = 0;\n    }\n    return result;", "    // Write your code\
    \ here\n    long sum = 0;\n    for(long n: arr) {\n        sum += n;\n    }\n\
    \    for(long n: arr) {\n        if(n < 0) {\n            n -= n;\n          \
    \  sum += n;\n        }\n    }\n    return sum;", "  std::set<long> ans;\n  for\
    \ (auto d : arr) {\n    ans.insert(d);\n  }\n  return ans.size();", "    // code\
    \ here\n    ", "    // Your code goes here\n    int sum = 0;\n    for(size_t i\
    \ = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n\n    if (sum <\
    \ 0) {\n        sum = -sum;\n    }\n\n    return sum;", "    long result = 0;\n\
    \    for (auto i : arr) {\n        result += i / 10;\n        result += i % 10;\n\
    \    }\n    return result;", "    // your code goes here\n    // for(int i=0;\
    \ i<arr.size(); i++)\n    // {\n    //       if (arr[i] >= 0)\n    //       {\n\
    \    //           if(arr[i] >= 10)\n    //               arr[i] += 9-10;\n   \
    \ //           else if(arr[i] < 10)\n    //               arr[i] += 9;\n    //\
    \       }\n    // }\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++)\n\
    \    {\n        long l = arr[i];\n        if (l >= 0)\n        {\n           \
    \ int digit = l / 10;\n            if (digit >= 0)\n            {\n          \
    \      if (digit >= 10)\n                    sum -= 9 - digit;\n             \
    \   else if (l < 10)\n                    sum += digit;\n            }\n     \
    \   }\n    }\n    return sum;", "  // Write your code here\n  assert(arr.size()\
    \ >= 1);\n  long ans = 0;\n  for (long x: arr)\n    ans += x >> 31;\n  return\
    \ ans;", "    // Write your code here.\n    long count = 0;\n    for(std::size_t\
    \ i = 0; i < arr.size(); ++i){\n        if(arr[i] > 0){\n            count +=\
    \ std::count(arr.begin(), arr.end(), arr[i]);\n        }\n    }\n    return count;",
  "    long cnt = 0;\n    for (long &num : arr) {\n        cnt += __builtin_popcount(num);\n\
    \    }\n    return cnt;", "    int len = arr.size();\n    long ans = 0;\n    for\
    \ (int i = 0; i < len; i++) {\n        if (arr[i] < 0) ans += (arr[i] % 10);\n\
    \        else ans += arr[i];\n    }\n    return ans;", "    long cnt = 0;\n  \
    \  for (auto i : arr) {\n        if ((i == 0) || (i & 1)) { // 0 ^ (-1 | 1) is\
    \ 0\n            cnt += i;\n        }\n    }\n    return cnt;", "    long count\
    \ = 0;\n    // Your code goes here\n    for(auto iter = arr.cbegin(); iter !=\
    \ arr.cend(); ++iter) {\n        if((*iter) > 0 && (*iter) % 10 != 0) {\n    \
    \        if((*iter) % 10 >= 0) {\n                count += (*iter) % 10;\n   \
    \         } else {\n                count += (*iter) % 10;\n            }\n  \
    \      }\n    }\n    return count;", "    // code here\n    long count = 0;\n\
    \    int n = arr.size();\n    for (int i = 0; i < n; i++) {\n        if (arr[i]\
    \ > 0)\n            count += arr[i];\n    }\n    return count;", "    // Your\
    \ code here\n    long sum = 0;\n    long n = arr.size();\n    long index = 0;\n\
    \    for (int i = 0; i < n; i++)\n    {\n        index = arr[i] % 10;\n      \
    \  arr[i] /= 10;\n        sum += index;\n    }\n    return sum;", "    long count\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n\
    \            count++;\n        } else {\n            long temp = arr[i]; // store\
    \ the first signed digit\n            arr[i] = arr[i] - 1; // subtract 1 from\
    \ the first digit\n            if (arr[i] < 0) {\n                arr[i] = temp\
    \ + 1; // if the first digit is negative, add 1 too\n            }\n        }\n\
    \    }\n    return count;", "  long ret = 0;\n  for (int i = 0; i < arr.size();\
    \ i++)\n    if (arr[i] >= 0) {\n      ret += arr[i];\n    }\n  return ret;", " \
    \   long ans = 0;\n    long size = arr.size();\n    long sum = 0;\n    for (int\
    \ i = 0; i < size; i++) {\n        sum += arr[i];\n        if (sum > 0) {\n  \
    \          ans += 1;\n            sum -= arr[i];\n        }\n    }\n    return\
    \ ans;", "    long cnt=0;\n    for(long i=0; i<arr.size(); i++) {\n        if(arr[i]\
    \ > 0) {\n            cnt += arr[i]%10;\n        }\n    }\n    return cnt;", " \
    \   long count{0};\n    bool sumDigitsLessThanZero{true};\n    // A number with\
    \ a sum greater than 0 has some digits that sum to zero,\n    // so we can use\
    \ those digits to determine if that number has a sum greater\n    // than zero.\n\
    \    long firstSignedDigits{1};\n    // If there are no digits, a number will\
    \ have a sum less than zero.\n    long sumDigitsLessThanZeroDigits{0};\n\n   \
    \ // Using a for loop to iterate through the array and sum the digits:\n    for\
    \ (long v : arr) {\n        // Add the current value to sumDigitsLessThanZeroDigits.\n\
    \        sumDigitsLessThanZeroDigits += v;\n        // Check if sumDigitsLessThanZero\
    \ is less than zero, and\n        // if it is, set sumDigitsLessThanZero to false\
    \ and continue\n        // the loop. Otherwise, we are done looping and don't\
    \ need to check\n        // the other digits, so we can break.\n        if (sumDigitsLessThanZero\
    \ && sumDigitsLessThanZeroDigits < 0) {\n            sumDigitsLessThanZero = false;\n\
    \            continue;\n        }\n        // Add the current value to count.\n\
    \        count++;\n        // If the current value sumDigitsLessThanZeroDigits\
    \ is >= 0,\n        // then that number is positive, so we can stop the loop.\n\
    \        if (sumDigitsLessThanZeroDigits) {\n            break;\n        }\n \
    \   }\n    // If there are no numbers with a sum greater than zero digits, return\
    \ zero.\n    return sumDigitsLessThanZero ? count : 0;", "    int n = arr.size();\n\
    \    if (n < 3)\n        return 0;\n    long ans = 0;\n    long long carry = 1;\n\
    \    for (long i = 0; i <= n; i++) {\n        long long tmp = arr[i] + carry;\n\
    \        ans += tmp;\n        if (tmp >= 10) {\n            carry += tmp % 10;\n\
    \            ans -= tmp / 10;\n        }\n    }\n    if (carry != 0)\n       \
    \ ans++;\n    return ans;", "    long res = 0;\n    for (long i = 0; i < arr.size();\
    \ ++i) {\n        long sum = 0;\n        while (arr[i] > 9) {\n            arr[i]\
    \ /= 10;\n            sum += arr[i] * 10;\n        }\n        if (sum > 0) {\n\
    \            arr[i] = sum - arr[i];\n        }\n        long digit = arr[i] %\
    \ 10;\n        res += digit * pow(10, arr.size() - i - 1);\n    }\n    return\
    \ res;", "    // Your code goes here\n    long s = 0;\n    for (int i = 0; i <\
    \ arr.size(); i++)\n    {\n        if(arr[i] < 0) {\n            s += arr[i]*2;\n\
    \        } else {\n            s += arr[i];\n        }\n    }\n    return s;",
  "   long count = 0;\n   long i = 0;\n   long sum = 0;\n   while (i < arr.size())\
    \ {\n       sum = (arr[i] - '0') + sum;\n       count++;\n       i++;\n   }\n\
    \   if (sum > 0) {\n       while (sum > 9) {\n           sum -= 9;\n         \
    \  count++;\n       }\n   }\n   return count;", "  // TODO: Use a set to store\
    \ seen numbers and then subtract the seen number from the total.\n  long sum =\
    \ 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < 0) {\n      sum\
    \ += arr[i];\n    } else {\n      sum += arr[i] * arr[i];\n    }\n  }\n  return\
    \ sum;", "    long count = 0;\n    for (long i : arr) {\n        if (i == 0) continue;\n\
    \        bool isNegative = true;\n        // Find the first negative digit:\n\
    \        while (i&1) {\n            i = i >> 1;\n            isNegative = !isNegative;\n\
    \        }\n        if (isNegative) {\n            count += 1;\n        }\n  \
    \      if (i != 0) break;\n    }\n    return count;", "  long ans = 0;\n  for\
    \ (long i = 0; i < arr.size(); i++)\n    ans += (arr[i] > 0) ? 1 : 0;\n  return\
    \ ans;", "    if(arr.size() < 2) {\n        std::cout << std::endl << \"Oops,\
    \ too few numbers for summing!\" << std::endl;\n    }\n    long ans = 0;\n   \
    \ long sum = 0;\n    for(auto i: arr) {\n        sum += i;\n        if(sum < 0)\
    \ {\n            sum += 10;\n        }\n        if(sum > 0) {\n            ans++;\n\
    \        }\n    }\n    return ans;", "    long sum = 0;\n    for(auto i : arr)\
    \ {\n        sum += i;\n    }\n    if(sum < 0) {\n        sum += ~(sum & 1);\n\
    \    }\n    return sum;", "    // Initialize result to 0.\n    long result = 0;\n\
    \    // Iterate through array arr element by element\n    for (auto i : arr) {\n\
    \        // If i is positive, add it to result\n        if (i >= 0) {\n      \
    \      result += i;\n        }\n    }\n    return result;", "    long count =\
    \ 0;\n    for (long i: arr) {\n        if (i < 0) {\n            i += 10L;\n \
    \       }\n        int sum = 0;\n        while (i) {\n            sum += i % 10;\n\
    \            i /= 10;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    return count;", "    // your code here\n    long ans =\
    \ 0;\n    for (auto i : arr) {\n        if(i >= 0) {\n            if(i % 10 ==\
    \ 0) {\n                ans++;\n            }\n        }\n    }\n    return ans;",
  "    long ans = 0;\n    for (long v : arr) {\n        if (v > 0)\n            ans\
    \ += v / 10 + (v % 10 != 0);\n        else\n            ans += v % 10;\n    }\n\
    \    return ans;"]
stop_tokens:
- "\n}"
