language: cpp
name: HumanEval_76_is_simple_power
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n==0)\n        return true;\n\
    \    if (n==1)\n        return x==1;\n    if (x<0)\n        return false;\n  \
    \  long num=1;\n    while(num<n) {\n        num*=x;\n    }\n    if (x==num)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe7vj8v4v: /tmp/tmpe7vj8v4v.cpp:25: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// your code here\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplkfowu4x: /tmp/tmplkfowu4x.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 1)\n    return 1;\n  if (n\
    \ == 0)\n    return 0;\n  if (n % 2 == 0)\n    return !is_simple_power(x, n /\
    \ 2);\n  if (x * n == x)\n    return true;\n  if (x * n == n * (x * 3))\n    return\
    \ true;\n  if (x * n == n * (x * 3) / 2)\n    return true;\n  return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpptv8c5pd: /tmp/tmpptv8c5pd.cpp:24: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long long ans = 1L;\n    while (n--\
    \ != 0)\n        ans *= x;\n    return (x == ans);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1r7t__og: /tmp/tmp1r7t__og.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   assert(n>0);\n   long long a = 0;\n\
    \   while(n >= 1) {\n      a = a * x;\n      n = n - 1;\n   }\n   if(a*x == x)\
    \ return true;\n   else return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9e8c9pt3: /tmp/tmp9e8c9pt3.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    long c = 1;\n\
    \    long f = 0;\n    long r = x;\n\n    while (r != 0) {\n        if (r % 2 ==\
    \ 1) {\n            if (f == 1) {\n                f = 2;\n                c =\
    \ 2;\n            } else if (f == 2) {\n                c *= 2;\n            }\n\
    \        }\n        r = (r / 2);\n    }\n\n    if (c * n == x)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpewl4a7df: /tmp/tmpewl4a7df.cpp:32: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\tint i;\n\tfor(i=1;i<=n;i++) {\n\t\t\
    if(x%i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp23wybghu: /tmp/tmp23wybghu.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 1) return true;\n    if (x\
    \ == n) return true;\n    long ans = 1;\n    while (x % 2 == 0) x = x / 2;\n \
    \   long tmp = 1;\n    while (x > 1) {\n        if (x % 2 != 0) tmp *= x;\n  \
    \      x /= 2;\n    }\n    long res = tmp;\n    if (tmp < ans && tmp > 1) res\
    \ = tmp;\n    if (x == n && tmp == ans) return true;\n    if (tmp == ans && n\
    \ == 1) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpust5p983: /tmp/tmpust5p983.cpp:25: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long i=1;\n    while(x>n) {\n    \
    \    if(x%i==0)\n            return false;\n        i=i*10;\n        x=x/i;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7nwg8zpk: /tmp/tmp7nwg8zpk.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// your code is here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzwwc1tib: /tmp/tmpzwwc1tib.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 1) {\n        return true;\n\
    \    } else if (n < 1 || n > 3) {\n        return false;\n    }\n    long counter\
    \ = 0;\n    long remainder = 0;\n    while (remainder != 0) {\n        remainder\
    \ = 0;\n        if (x <= 1) {\n            return false;\n        }\n        long\
    \ r = 1;\n        while ((r << 1) != x) {\n            r = r * x;\n        }\n\
    \        remainder = x % r;\n        x = r;\n        counter++;\n    }\n    return\
    \ counter == n;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpswcom3xp: /tmp/tmpswcom3xp.cpp:32: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || x == 1) return true;\n\
    \    for (int i = 1; i < n; i++) {\n        if (x%i==0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpos6hflrg: /tmp/tmpos6hflrg.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\t// Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9m_dmr02: /tmp/tmp9m_dmr02.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 1) return true;\n  if (x ==\
    \ 0 || x == 1) return false;\n  return is_simple_power(x>>1, n-1) && is_simple_power(x<<1,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_0d2y6jl: /tmp/tmp_0d2y6jl.cpp:14: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int temp=1;\n    for (int i=n;i>0;i--)\n\
    \        temp*=x;\n    return temp==x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppfoahra1: /tmp/tmppfoahra1.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  \n    // Your code goes here\n    \n\
    \    if(x==0 || x==1) return true;\n    if(x<n && x%n!=0) return false;\n    \n\
    \    long temp = n;\n    long count = 0;\n    while(temp!=0) {\n        if(x%temp==0)\
    \ count++;\n        temp/=temp;\n    }\n    \n    return count==1;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    return (!(x%n));\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl7jzv27t: /tmp/tmpl7jzv27t.cpp:18: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  assert(x>0 && n>0);\n  if (n==1 || x==1)\
    \ return true;\n  \n  // n^int=x\n  long r = n;\n  while (1) {\n    if (r == 0)\
    \ break;\n    long t = r * x;\n    if (t == x) return true;\n    r = t;\n  }\n\
    \  \n  // n^int=x\n  // n<=x\n  \n  // n>x\n  \n  return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppfi8krm7: /tmp/tmppfi8krm7.cpp:29: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\tif (x == 0 || n == 0)\n\t\treturn true;\n\
    \t\n\tlong counter = 0;\n\twhile (n % 2 == 0) {\n\t\tcounter++;\n\t\tn /= 2;\n\
    \t}\n\t\n\tfor (long i = 1; i <= counter; i++) {\n\t\tif (x%i == 0)\n\t\t\treturn\
    \ false;\n\t}\n\t\n\treturn true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgam8iwnk: /tmp/tmpgam8iwnk.cpp:26: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    //assert(n>0);\n    int i=1, c=0;\n\
    \    while(x!=0){\n        x/=n;\n        c++;\n    }\n    \n    while(i<c){\n\
    \        if(x==n*n){\n            return true;\n        }\n        i++;\n    \
    \    x*=n;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp44beg_93: /tmp/tmp44beg_93.cpp:26: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 0) return true;\n  long r =\
    \ x;\n  long count = 1;\n  while (n >= 1) {\n    if (n % 2 == 0) {\n      r =\
    \ r * x;\n      count++;\n    }\n    n = n / 2;\n    x = x * x;\n  }\n  return\
    \ (r == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp73aanv4l: /tmp/tmp73aanv4l.cpp:23: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (x == 1) {\n    return true;\n  }\n\
    \  if (n % 2 == 0) {\n    if (x&1 == 0) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6q13mplr: /tmp/tmp6q13mplr.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    return 0;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp050t84h3: /tmp/tmp050t84h3.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  assert(n>0);\n  \n  // Write your code\
    \ here\n  long result = 1;\n  for(long i=1; i<n; i++) {\n    result = result *\
    \ x;\n  }\n  if(result==x)\n    return true;\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxw2coqah: /tmp/tmpxw2coqah.cpp:24: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long power = 0;\n    while (x != 0){\n\
    \        power = power % n;\n        x = x % n;\n    }\n    return (power == 0);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    return (n!=0);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsefdrsht: /tmp/tmpsefdrsht.cpp:14: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    assert(n>0);\n    long long ans =\
    \ 1;\n    for(long long i=1;i<n;i++) {\n        ans = ans*x;\n        x = x/2;\n\
    \    }\n    return ans == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp33upwe38: /tmp/tmp33upwe38.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    // assert that\
    \ the value of n and x are integers\n    assert(x >= 0);\n    assert(x <= n);\n\
    \    long result = 1;\n    for (long i = 1; i <= x; i++) {\n        result *=\
    \ n;\n    }\n    if (n == result) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqng03j0a: /tmp/tmpqng03j0a.cpp:11: bool is_simple_power(long int, long
    int): Assertion `x <= n'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long int power = 1;\n    for (int\
    \ i = 0; i < n; ++i) {\n        power *= x;\n    }\n    return power == x;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp73zem58w: /tmp/tmp73zem58w.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n <= 0) return false;\n    long\
    \ res = 1;\n    while (x > 0) {\n        if (x % n == 0) return false;\n     \
    \   x /= n;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxjp83s8w: /tmp/tmpxjp83s8w.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\t// YOUR CODE HERE\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcfsyguwk: /tmp/tmpcfsyguwk.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int i = 1;\n    long ans = 1;\n  \
    \  while(ans%n != 0){\n        ans *= x;\n        ++i;\n    }\n    return i%2\
    \ == 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3gp7kemr: /tmp/tmp3gp7kemr.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Code goes here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpws2euh86: /tmp/tmpws2euh86.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int counter;\n    for (counter=1;\
    \ counter<n; counter++) {\n        if (counter*counter==x) \n            return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_rsqjrya: /tmp/tmp_rsqjrya.cpp:17: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // Your code here\n  long a[n];\n  int\
    \ i;\n  for (i = 0; i < n; i++) {\n    a[i] = (long) pow(double(n), i);\n  }\n\
    \  for (int i = 0; i < n; i++) {\n    if (a[i] == x) {\n      return true;\n \
    \   }\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr5fxv_sn: /tmp/tmpr5fxv_sn.cpp:23: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code goes here\n    long result\
    \ = 1;\n    int d = 1;\n    while(n >= d){\n        result *= d;\n        n--;\n\
    \        d++;\n    }\n    result *= x;\n    return result;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3f4qy6gn: /tmp/tmp3f4qy6gn.cpp:22: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code here\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdkx43xv5: /tmp/tmpdkx43xv5.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long p = 1;\n    for (int i = 1; i\
    \ < n; i++) {\n        p = p * x;\n    }\n    return p == x;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdzxw1f2e: /tmp/tmpdzxw1f2e.cpp:19: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Write your solution here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2bv7_ayn: /tmp/tmp2bv7_ayn.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    bool result = true;\n    long int_power\
    \ = 1;\n    while (int_power < n) {\n        result = result && (x%int_power==0);\n\
    \        int_power *= 10;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpymprwggg: /tmp/tmpymprwggg.cpp:23: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n     long m = 1;\n     while (m <= n)\
    \ {\n         if (x % m == 0)\n             return false;\n         m = m * 10;\n\
    \     }\n     return true;\n }\n\n// Your task is to find and print the greatest\
    \ power of 10 less than a number x\nvoid find_max_power(long x) {\n    // Your\
    \ code here\n    int x = 10;\n    int ans = 0;\n    while(x >= 100){\n       \
    \ ans = x / ans;\n        x = x % ans;\n    }\n    printf(\"The greatest power\
    \ of 10 that is less than %d is %d\", x, ans);\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3020vs0.cpp: In function \u2018void find_max_power(long int)\u2019\
    :\n/tmp/tmpm3020vs0.cpp:20:9: error: declaration of \u2018int x\u2019 shadows\
    \ a parameter\n   20 |     int x = 10;\n      |         ^\n"
  stdout: ''
  timestamp: 1660099533
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw6bsxqzs: /tmp/tmpw6bsxqzs.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || x == 1)\n        return\
    \ true;\n    while (x != 0) {\n        if (x & 1)\n            return false;\n\
    \        x >>= 1;\n        if (x != 1)\n            n ^= x;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpojaxu565: /tmp/tmpojaxu565.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int temp = n;\n    while(temp > 0)\
    \ {\n        if(temp&1) return (x==n*n*n*n);\n        temp>>=1;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2tvykn03: /tmp/tmp2tvykn03.cpp:19: int main(): Assertion `candidate((4),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  assert(n!=0);\n  int i = 1;\n  while(x\
    \ > 0) {\n    x /= i;\n    i++;\n  }\n  return i == n;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1anmizmd: /tmp/tmp1anmizmd.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    \n    \n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1zygg_06: /tmp/tmp1zygg_06.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n//your code here\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj2xj2imk: /tmp/tmpj2xj2imk.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099535
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long y = 1;\n    for (long i = 0;\
    \ i < n; i++)\n        y *= x;\n    return y == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp51ac9lu4: /tmp/tmp51ac9lu4.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  int i;\n  for (i = 1; i <= n; i++) {\n\
    \    if (x%i == 0)\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprfu4prkh: /tmp/tmprfu4prkh.cpp:17: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n    // Write\
    \ your code here\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyktq7a8i: /tmp/tmpyktq7a8i.cpp:14: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    return x > 0 && x > n;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmj_b3aiz: /tmp/tmpmj_b3aiz.cpp:13: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // code here\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpex5txso4: /tmp/tmpex5txso4.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // code here\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_uw1wcra: /tmp/tmp_uw1wcra.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x==1) {\n        return true;\n\
    \    }\n    \n    long r = 1;\n    long nr = 1;\n    long nr1 = x;\n    long nr2\
    \ = x;\n    long nr3 = x;\n    long nr4 = x;\n    long nr5 = x;\n    \n    while\
    \ (true) {\n        long tmp = nr1;\n        \n        if (nr1>n) break;\n   \
    \     \n        nr1 = nr2;\n        nr2 = nr3;\n        nr3 = tmp;\n        \n\
    \        tmp = nr4;\n        \n        if (nr4>n) break;\n        \n        nr4\
    \ = nr5;\n        nr5 = tmp;\n        \n        nr += nr1;\n        nr += nr2;\n\
    \        nr += nr3;\n        nr += nr4;\n        nr += nr5;\n    }\n    \n   \
    \ r = (r*x)/(nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpen_5kqiy.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpen_5kqiy.cpp:43:537: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   43 |     r = (r*x)/(nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr*nr\n\
    \      |               ~                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            ^\n      |                                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                           )\n   44 | }\n      | ~                          \
    \                                                                            \
    \                                                                            \
    \                                                          "
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long y=x&(1<<(n-1));\n    long z=(y<<1)+y;\n\
    \    if(z==x || z==0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpij3p85h4: /tmp/tmpij3p85h4.cpp:17: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x<0)\n        return false;\n\
    \    long long pow=1;\n    while (n!=0) {\n        if (n&1)\n            pow*=x;\n\
    \        x*=x;\n        n>>=1;\n    }\n    return pow==x;\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcm_bb1zu: /tmp/tmpcm_bb1zu.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) {\n        return true;\n\
    \    } else if (x != 0) {\n        return is_simple_power(x / n, n);\n    } else\
    \ {\n        return false;\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_dmlrdut: /tmp/tmp_dmlrdut.cpp:23: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    assert(n >= 0);\n    if (n == 1) return\
    \ true;\n    if (x <= 1) return false;\n    if (x == 1) return true;\n    if (n\
    \ == 2) return true;\n    long s = 0, r = x;\n    while (true) {\n        long\
    \ d = (r % n) * n;\n        if (d > r) break;\n        s = s + 1;\n        r =\
    \ d;\n    }\n    if (s == n) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int i = 0;\n    long tmp = x;\n  \
    \  while (i < n) {\n        tmp = tmp * x;\n        i++;\n    }\n    return (tmp\
    \ == x);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyq0pg2zr: /tmp/tmpyq0pg2zr.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n}\n// For testing, you may use the assert\
    \ macro.\n// assert is_simple_power(3, 4) == true\n// assert is_simple_power(4,\
    \ 3) == false\n// assert is_simple_power(4, 4) == true\n// assert is_simple_power(5,\
    \ 7) == false\n// assert is_simple_power(6, 5) == true\n// If x is not a power\
    \ of n, then assert is_simple_power(x, n) == false\n// You can use the assert\
    \ macro provided by this file.\n\n#include<iostream>\nusing namespace std;\nint\
    \ main()\n{\n  int testcase;\n  cin>>testcase;\n  while(testcase--)\n  {\n   \
    \  long x,y,n;\n     cin>>x>>y>>n;\n     if(is_simple_power(x,n))\n        cout<<\"\
    YES\"<<endl;\n     else\n        cout<<\"NO\"<<endl;\n  }\n  return 0;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyg16qbn1.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpyg16qbn1.cpp:8:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n    8 | }\n      | ^\n/tmp/tmpyg16qbn1.cpp:\
    \ At global scope:\n/tmp/tmpyg16qbn1.cpp:35:5: error: redefinition of \u2018int\
    \ main()\u2019\n   35 | int main() {\n      |     ^~~~\n/tmp/tmpyg16qbn1.cpp:20:5:\
    \ note: \u2018int main()\u2019 previously defined here\n   20 | int main()\n \
    \     |     ^~~~\n"
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // TODO: Write code here\n  assert(\
    \ x%n==0 && n!=0&& n>0);\n  bool flag = false;\n  if(n != 1) {\n    if(x%n==0)\
    \ {\n      x = x/n;\n      flag = true;\n    }\n  }\n  return flag;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgz6kmb9i: /tmp/tmpgz6kmb9i.cpp:9: bool is_simple_power(long int, long
    int): Assertion `x%n==0 && n!=0&& n>0'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int pow_of_x=1;\n    int pow_of_n=1;\n\
    \    int i;\n    // loop till n\n    for(i=1;i<=n;i++){\n        // if the last\
    \ digit is equal to any digit\n        // of x then x is not a simple power of\
    \ n.\n        if(i%10==(x%10)) \n            return false;\n        // get the\
    \ last digit of x\n        x=x/10;\n        // get the last digit of n\n     \
    \   n=n/10;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7htp835f: /tmp/tmp7htp835f.cpp:27: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long sum = 0;\n    int power = 1;\n\
    \    while (x <= n) {\n        sum += power;\n        power *= x;\n        x++;\n\
    \    }\n    \n    if (sum == x) {\n        return true;\n    } else {\n      \
    \  return false;\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi8mmrh9v: /tmp/tmpi8mmrh9v.cpp:24: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n==1) return true;\n    if (n%2==0)\
    \ return false;\n    return is_simple_power(x, n/2);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyd_p33qc: /tmp/tmpyd_p33qc.cpp:14: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Write your code here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu0eyi7er: /tmp/tmpu0eyi7er.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  assert(x > 0);\n  long a = 1, b = 0,\
    \ c;\n  while (n > 1) {\n    c = a * n - b;\n    if (c >= 0) {\n      b = c;\n\
    \    } else {\n      b += a;\n    }\n    a <<= 1;\n    n >>= 1;\n  }\n  return\
    \ (b == 1);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb204w9su: /tmp/tmpb204w9su.cpp:24: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    long\
    \ t = x;\n    long p = 1;\n    while (n>0) {\n        if (n%2 == 1) t = t*x;\n\
    \        x = x*x;\n        n = n/2;\n    }\n    return t == x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyfqgz_0m: /tmp/tmpyfqgz_0m.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0) {\n        return false;\n\
    \    }\n    if (n == 0) {\n        return true;\n    }\n    // Write your code\
    \ here\n    return (x == pow(n, (x / n)));\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6g8p837l: /tmp/tmp6g8p837l.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n//assert(n>0);\n//assert(n<10);\n//bool\
    \ flag = true;\n//int count = 0;\n//for (int i=0; i<n; i++){\n// //cout<<i<<endl;\n\
    //count++;\n//int c = i%10;\n//if(c==0)\n//{\n//if(i%n==0){\n//flag = true;\n\
    //break;\n//}\n//}\n//else{\n//flag = false;\n//}\n//}\n//if(flag==true)\n//cout<<\"\
    The number is a simple power of \"<<n<<endl;\n//else{\n//cout<<\"The number is\
    \ not a simple power of \"<<n<<endl;\n//}\n//return flag;\n//}\n\nint main()\n\
    {\n    int t;\n    cin>>t;\n    while(t--){\n        long n,k;\n        cin>>n>>k;\n\
    \        if(is_simple_power(n,k)==true)\n            cout<<\"The number is a simple\
    \ power of \"<<k<<endl;\n        else{\n            cout<<\"The number is not\
    \ a simple power of \"<<k<<endl;\n        }\n    }\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpva3bfoju.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpva3bfoju.cpp:36:1: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n   36 | {\n      | ^\n/tmp/tmpva3bfoju.cpp:50:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   50 | int main() {\n      |            ^\n/tmp/tmpva3bfoju.cpp:62:1: error:\
    \ expected \u2018}\u2019 at end of input\n   62 | }\n      | ^\n/tmp/tmpva3bfoju.cpp:7:38:\
    \ note: to match this \u2018{\u2019\n    7 | bool is_simple_power(long x, long\
    \ n) {\n      |                                      ^\n/tmp/tmpva3bfoju.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   62 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660099536
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x < 0) return false;\n    if (x\
    \ == 1) return true;\n    if (n%2 == 0) {\n        if (is_simple_power(x*x, n/2))\n\
    \            return true;\n        else\n            return false;\n    }\n  \
    \  else\n        if (is_simple_power(x*x, n/2))\n            return true;\n  \
    \      else\n            return false;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) return true;\n    if (n\
    \ == 0 || x == n) return true;\n    if (x % n == 0) return false;\n    return\
    \ is_simple_power(x / n, n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0qfyio2x: /tmp/tmp0qfyio2x.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // Write your code here\n  assert(x\
    \ >= 0);\n  assert(n >= 0);\n  long long power = 0;\n  while (n) {\n    power\
    \ = power*x;\n    n--;\n  }\n  return power == x;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxeng46v7: /tmp/tmpxeng46v7.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x < 0)\n        return false;\n\
    \    int p = 1;\n    while (x <= n) {\n        p = (p * x) % n;\n        x /=\
    \ n;\n    }\n    return (p == 1);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp84lfo5h1: /tmp/tmp84lfo5h1.cpp:20: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long i=1;\n    while(i<n){\n     \
    \   if(x%i==0) return true;\n        i+=i;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzwm0cbjt: /tmp/tmpzwm0cbjt.cpp:18: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if(n==0) return true;\n    if(n==1)\
    \ return x==1;\n    if(x%n==0) return is_simple_power(x/n,n);\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqr8cpbtu: /tmp/tmpqr8cpbtu.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code here\n    long r = x;\n\
    \    long s = 0;\n    while (r > 1) {\n        s = s + r%n;\n        r = r/n;\n\
    \    }\n    if (s == x) {\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv1c9sftj: /tmp/tmpv1c9sftj.cpp:24: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long sum = 0;\n    while(x > 1)\n\
    \    {\n        if(x % n == 0)\n        {\n            sum = sum + n / x;\n  \
    \          if(n == 1)\n            {\n                return true;\n         \
    \   }\n            else\n            {\n                x = x / n;\n         \
    \   }\n        }\n        else\n        {\n            x = x/n;\n        }\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu78e3zl9: /tmp/tmpu78e3zl9.cpp:32: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x < 0)\n        return false;\n\
    \    long temp = 1;\n    while (n > 0)\n        if (x % n == 0) {\n          \
    \  if (n % 2 != 0)\n                temp *= x;\n            n = n/2;\n       \
    \ } else {\n            temp *= x;\n            x = x*x;\n        }\n    return\
    \ temp == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0aywzcx3: /tmp/tmp0aywzcx3.cpp:27: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\t// your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmprrcvqg0o: /tmp/tmprrcvqg0o.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code goes here\nreturn true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp122p5zxj: /tmp/tmp122p5zxj.cpp:14: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    bool result = true;\n    if (x ==\
    \ 1) {\n        result = true;\n    }\n    if (n == 0) {\n        result = false;\n\
    \    }\n    if (n % 2 == 0) {\n        result = false;\n    }\n    if (n % 3 ==\
    \ 0) {\n        result = false;\n    }\n    if (n % 4 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 5 == 0) {\n        result = false;\n    }\n   \
    \ if (n % 6 == 0) {\n        result = false;\n    }\n    if (n % 7 == 0) {\n \
    \       result = false;\n    }\n    if (n % 8 == 0) {\n        result = false;\n\
    \    }\n    if (n % 9 == 0) {\n        result = false;\n    }\n    if (n % 10\
    \ == 0) {\n        result = false;\n    }\n    if (n % 11 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 12 == 0) {\n        result = false;\n    }\n  \
    \  if (n % 13 == 0) {\n        result = false;\n    }\n    if (n % 14 == 0) {\n\
    \        result = false;\n    }\n    if (n % 15 == 0) {\n        result = false;\n\
    \    }\n    if (n % 16 == 0) {\n        result = false;\n    }\n    if (n % 17\
    \ == 0) {\n        result = false;\n    }\n    if (n % 18 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 19 == 0) {\n        result = false;\n    }\n  \
    \  if (n % 20 == 0) {\n        result = false;\n    }\n    if (n % 21 == 0) {\n\
    \        result = false;\n    }\n    if (n % 22 == 0) {\n        result = false;\n\
    \    }\n    if (n % 23 == 0) {\n        result = false;\n    }\n    if (n % 24\
    \ == 0) {\n        result = false;\n    }\n    if (n % 25 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 26 == 0) {\n        result = false;\n    }\n  \
    \  if (n % 27 == 0) {\n        result = false;\n    }\n    if (n % 28 == 0) {\n\
    \        result = false;\n    }\n    if (n % 29 == 0) {\n        result = false;\n\
    \    }\n    if (n % 30 == 0) {\n        result = false;\n    }\n    if (n % 31\
    \ == 0) {\n        result = false;\n    }\n    if (n % 32 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 33 == 0) {\n        result = false;\n    }\n  \
    \  if (n % 34 == 0) {\n        result = false;\n    }\n    if (n % 35 == 0) {\n\
    \        result = false;\n    }\n    if (n % 36 == 0) {\n        result = false;\n\
    \    }\n    if (n % 37 == 0) {\n        result = false;\n    }\n    if (n % 38\
    \ == 0) {\n        result = false;\n    }\n    if (n % 39 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 40 == 0) {\n        result = false;\n    }\n  \
    \  if (n % 41 == 0) {\n        result = false;\n    }\n    if (n % 42 == 0) {\n\
    \        result = false;\n    }\n    if (n % 43 == 0) {\n        result = false;\n\
    \    }\n    if (n % 44 == 0) {\n        result = false;\n    }\n    if (n % 45\
    \ == 0) {\n        result = false;\n    }\n    if (n % 46 == 0) {\n        result\
    \ = false;\n    }\n    if (n % 47 == 0) {\n        result = false;\n    }\n  \
    \  if (n % 48 == 0) {\n        result = false;\n    }\n    if (n % 49 == 0) {\n\
    \        result = false;\n    }\n    if (n % 50 == 0) {\n        result = false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmwib4hjk: /tmp/tmpmwib4hjk.cpp:165: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if(x<0 || n<1)\n        return false;\n\
    \    long long i=1;\n    while(x!=(n*i))\n        i=i*2;\n    if(x==(n*i))\n \
    \       return true;\n    else return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099541
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n//Complete the code\nbool flag=true;\n\
    int pow=1;\nwhile(n!=0)\n{\npow=pow*n;\nn=n/10;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe78bzs5g.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpe78bzs5g.cpp:16:12: error: a function-definition is\
    \ not allowed here before \u2018{\u2019 token\n   16 | int main() {\n      | \
    \           ^\n/tmp/tmpe78bzs5g.cpp:28:1: error: expected \u2018}\u2019 at end\
    \ of input\n   28 | }\n      | ^\n/tmp/tmpe78bzs5g.cpp:7:38: note: to match this\
    \ \u2018{\u2019\n    7 | bool is_simple_power(long x, long n) {\n      |     \
    \                                 ^\n/tmp/tmpe78bzs5g.cpp:28:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   28 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1)\n        return true;\n\
    \    if (x == 0)\n        return false;\n    if (x < 0)\n        return false;\n\
    \    // Your code goes here\n    return ((x%n)==0);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjb_o65ur: /tmp/tmpjb_o65ur.cpp:24: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Write your code here\n    long\
    \ p = 1;\n    while (n>0) {\n        p = p * x;\n        n = n-1;\n    }\n   \
    \ return p==x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp03p91o3n: /tmp/tmp03p91o3n.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  int a = (int) x;\n  int b = (int) n;\n\
    \  // If x = 2^a then a>1\n  // If n = 2^b then b>1\n  // In other words: a>n\n\
    \  // If a>n then n^a=x\n  // If a<n then x^a=n\n  // If a==n (a is 1) then n^a=1\n\
    \  // If a>1 then n^a=1\n  // If a is 1 then a>1\n  // If a==1 then a=1\n  //\
    \ Thus if a==n then a==b\n  // Thus if a>b then a>b\n  // Thus if a>n then a>n\n\
    \  // Thus if a<n then a<n\n  if (a == b) {\n    // If a=b then a=n\n    // Thus\
    \ if a==n then a==b\n    // Thus if a>b then a>b\n    // Thus if a>n then a>n\n\
    \    // Thus if a<n then a<n\n    return a == n;\n  } else {\n    // If a<b then\
    \ a<n\n    if (a > b) {\n      // if a>b then a>n\n      // Thus if a<n then a<n\n\
    \      return a < n;\n    } else {\n      // If a<n then a<b\n      // Thus if\
    \ a<b then a<b\n      return a > b;\n    }\n  }\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuos6c5yu: /tmp/tmpuos6c5yu.cpp:45: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    return 1ULL << x == x && (1ULL <<\
    \ n) == (1ULL << n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8xkdfhvu: /tmp/tmp8xkdfhvu.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099536
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int result = 1;\n    for (int i =\
    \ 0; i <= n; i++) {\n        result *= x;\n    }\n    if (result == x) {\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_ivezs43: /tmp/tmp_ivezs43.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    return (x == 1) || ((x*n) % x == 0);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnqkjqxj8: /tmp/tmpnqkjqxj8.cpp:13: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long i = 1;\n    while (x%n!=0){\n\
    \        if(x%n==0){\n            return true;\n        }\n        n=n/i;\n  \
    \      i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp83tdv5od: /tmp/tmp83tdv5od.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099537
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long pow_of_n = n * (long) n;\n  \
    \  if (x == pow_of_n)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm8kmrxxh: /tmp/tmpm8kmrxxh.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Fill here\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeldhg99t: /tmp/tmpeldhg99t.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 1) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if (x <= 0 || x >\
    \ n) return false;\n  return is_simple_power(x * x, n / 2);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmphdiarf55: /tmp/tmphdiarf55.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // write your code in C++98\n    long\
    \ long int l=1;\n    while(n!=0)\n    {\n        l=l*n;\n        n--;\n    }\n\
    \    return (x==l);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5o4q446t: /tmp/tmp5o4q446t.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099538
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   // code goes here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4g44wz9r: /tmp/tmp4g44wz9r.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Base case: n is 1\n    if (n ==\
    \ 1) {\n        return true;\n    }\n    // If n is less than 2, x is not a power\
    \ of n\n    if (n < 2) {\n        return false;\n    }\n    // The base case:\
    \ n is 2\n    if (n == 2) {\n        return true;\n    }\n    // If x is 1, x\
    \ is not a power of n\n    if (x == 1) {\n        return false;\n    }\n    //\
    \ The recursive step: check if x%n==0\n    return is_simple_power(x%n, n) && is_simple_power(x,\
    \ n);\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// your code here\nreturn 1;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpao3qb_j2: /tmp/tmpao3qb_j2.cpp:14: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    assert(n>0);\n    return (x == n*n);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpprbcfv8k: /tmp/tmpprbcfv8k.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    if (n == 1)\n        return (x == 0);\n    if (n <= 0)\n        return false;\n\
    \    if (x == 0)\n        return true;\n    long res = 1;\n    for (int i = 1;\
    \ i < n; i++) {\n        res = res * x;\n    }\n    return (res == x);\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp51zaw0da: /tmp/tmp51zaw0da.cpp:27: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeoa02w_b: /tmp/tmpeoa02w_b.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    //write your code here\n    if (x\
    \ <= 1 || n <= 0) {\n        return false;\n    }\n    int d = 1;\n    for (int\
    \ i = 1; i <= n; i++) {\n        if (x % i == 0) {\n            d = d * (n / i);\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzgbmj__p: /tmp/tmpzgbmj__p.cpp:27: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long r = 1;\n    for (long i = 0;\
    \ i < n; i++) {\n        if (r != 1) {\n            r *= x;\n        }\n     \
    \   x *= x;\n    }\n    return x == r;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjld5atq0: /tmp/tmpjld5atq0.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  int res = 1;\n  while (n != 0) {\n \
    \   if (x % n == 0) return false;\n    x /= n;\n    res++;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjh7w3twm: /tmp/tmpjh7w3twm.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return false;\n\
    \    int i = 0;\n    while (x % n == 0) {\n        x = x / n;\n        i++;\n\
    \    }\n    if (i == n)\n        return true;\n    else\n        return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpua9rz9oy: /tmp/tmpua9rz9oy.cpp:22: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0)\n        return true;\n\
    \    if (n <= 0)\n        return false;\n    if (x <= 1)\n        return is_simple_power(x,\
    \ n);\n    if (n % 2 == 0) {\n        // x is even and n even\n        return\
    \ is_simple_power(x, n / 2);\n    } else {\n        // x is odd n odd\n      \
    \  // Find a number greater than x with n bits\n        long upper_bound = x <<\
    \ ((n / 2) + 1);\n        long lower = upper_bound >> 1;\n        // Find a number\
    \ greater than x with n bits + 1\n        while (x < upper_bound) {\n        \
    \    if (is_simple_power(x, n)) {\n                return true;\n            }\n\
    \            lower -= 1;\n        }\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660099539
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Write your code here\n    if(n==0)\n\
    \        return false;\n    if(n==1)\n        return true;\n    if(x%n==0)\n \
    \       return true;\n    if(x%n==1)\n        return false;\n    long m=1;\n \
    \   while(x%n!=m){\n        m*=n;\n    }\n    if(x==m)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660099544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code goes here\n  assert(x>=0);\n\
    \  assert(n>=1);\n  // Your code goes here\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0jdrbm2n: /tmp/tmp0jdrbm2n.cpp:15: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Write your code here.\n    return\
    \ (n == 0) || (n == 1);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiakp68_x: /tmp/tmpiakp68_x.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // The code below is your implementation\n\
    \    long l=x/n;\n    long r=x%n;\n    long k=0;\n    if(n==2)\n        k=1;\n\
    \    while(l>=1){\n        if(r==0)\n            return false;\n        if(r==1)\n\
    \            k=k+l;\n        l=l/2;\n        r=r*2;\n    }\n    if(x%n==0)\n \
    \       k+=n;\n    while(k>=1){\n        if(x==0)\n            return false;\n\
    \        x-=n;\n        k--;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzzgtoq_8: /tmp/tmpzzgtoq_8.cpp:34: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 1) {\n        return true;\n\
    \    }\n    // Base cases\n    if (n == 0) {\n        return false;\n    }\n \
    \   if (n < 0){\n        return is_simple_power(x, -n);\n    }\n    // Now we\
    \ have n**int=x\n    // We have to find n. There are some algorithms for it\n\
    \    // like binary search or using modular arithmetic\n    // but we will use\
    \ some simple method\n    // and we know that if n**int=x then x is a simple power\n\
    \    // of n\n    // and if n**int!=x then n**int is not a power of n and hence\
    \ x is not a simple power\n    long m = 1;\n    while (m < n) {\n        if (x\
    \ % m == 0) {\n            return false;\n        }\n        m *= 2;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n  \
    \  assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm4csdrdv: /tmp/tmpm4csdrdv.cpp:36: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if(x % n != 0)\n        return false;\n\
    \    int i = 1;\n    while(true) {\n        i <<= 1;\n        if(i * n == x)\n\
    \            return true;\n        else if(i > x)\n            return false;\n\
    \    }\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu8xti5ik: /tmp/tmpu8xti5ik.cpp:24: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\tlong a[n+2];\n\ta[1] = 1;\n\tfor(long\
    \ i=2; i<n+1; i++) {\n\t\ta[i] = a[i-1] * 2;\n\t}\n\treturn (x == a[n]);\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2zzpukht: /tmp/tmp2zzpukht.cpp:17: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if(n == 1)\n        return true;\n\
    \    if(x < 0)\n        return false;\n    if(x%n == 0)\n        return true;\n\
    \    if(x > n || x < 0)\n        return false;\n    while(n > 1) {\n        if(x\
    \ % n == 0)\n            return false;\n        n /= 2;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpua28qfcw: /tmp/tmpua28qfcw.cpp:30: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code here\n    long long sq =\
    \ x*x;\n    long long res = 1;\n    for(int i = 1; i < n; i++){\n        sq +=\
    \ x*i;\n        res = res * sq;\n    }\n    return (sq == res);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0jskf68h: /tmp/tmp0jskf68h.cpp:22: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    return ((long long)n) * x == x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp98ip330d: /tmp/tmp98ip330d.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    return __builtin_popcount(x) == __builtin_popcount(n);\
    \ // power of 2\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcjwqfxo4: /tmp/tmpcjwqfxo4.cpp:18: int main(): Assertion `candidate((128),
    (4)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x < 0 || n < 0)\n        return\
    \ false;\n    if (n == 0)\n        return true;\n    if (n == 1)\n        return\
    \ ((x & 1) != 0);\n    long i = (long) n;\n    long x = x >> i;\n    while (i--)\
    \ {\n        long y = x & 1;\n        x = x * n >> i;\n        if (x != y & 1)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbb5ji8wq.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpbb5ji8wq.cpp:15:10: error: declaration of \u2018long\
    \ int x\u2019 shadows a parameter\n   15 |     long x = x >> i;\n      |     \
    \     ^\n"
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code goes here\n    long res\
    \ = 1;\n    while (n>1) {\n        if (n%2 == 0) {\n            res = res*x;\n\
    \        }\n        x *= x;\n        n /= 2;\n    }\n    return res == x;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4refu54b: /tmp/tmp4refu54b.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // Your code goes here\n  bool ans;\n\
    \  \n  ans = (n == 1 || n == 0);\n  if (!ans) {\n    long i = 1;\n    while (i\
    \ * i <= x) {\n      if (x * i == n) {\n        ans = true;\n        break;\n\
    \      }\n      i++;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy8ejrgz4: /tmp/tmpy8ejrgz4.cpp:26: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    // Use bitwise\
    \ operations to find the number that represents that power of n\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9ccxts4x: /tmp/tmp9ccxts4x.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0) \n        return true;\n\
    \    int y = 1;\n    while(y <= n/2) {\n        if (x%y == 0) \n            return\
    \ false;\n        y++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpysp0d7_c: /tmp/tmpysp0d7_c.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n     // Your code here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_yql8i53: /tmp/tmp_yql8i53.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // Your code here\n  assert(n>0);\n\
    \  long long m = 1;\n  while (n != 0) {\n    if (n % 2 == 1) {\n      m = m *\
    \ x;\n    }\n    x = x * x;\n    n /= 2;\n  }\n  if (m * x == x) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjg4oslz9: /tmp/tmpjg4oslz9.cpp:26: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long ans = 1;\n    for (int i = 1;\
    \ i < n; i++) {\n        ans *= x;\n    }\n    return (x == ans);\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_vcxsgon: /tmp/tmp_vcxsgon.cpp:19: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0) {\n        return true;\n\
    \    }\n    \n    while (x != 0) {\n        if (x % n == 0) {\n            return\
    \ false;\n        }\n        x = x/n;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy__fubu7: /tmp/tmpy__fubu7.cpp:22: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x==0) return true;\n    if (x==1)\
    \ return false;\n    if (x%n==0) return false;\n    if (x%n>0) return is_simple_power(x/n,\
    \ n);\n    if (x%n<0) return is_simple_power(x*n/n, n);\n}\nint main() {\n   \
    \ auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa57qtd5d: /tmp/tmpa57qtd5d.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099539
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  int intx= (int)x;\n  for(int i=0;i<n;i++)\n\
    \  {\n    if(x%intx==0)\n    {\n      return 1;\n    }\n    intx--;\n  }\n  return\
    \ 0;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgsw9k6po: /tmp/tmpgsw9k6po.cpp:22: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0) return true;\n    \n \
    \   if (x != n) return false;\n    \n    if (x & 1 == 0) return true;\n    \n\
    \    if (n == 1) return true;\n    \n    if (n & 1 == 1) return true;\n    \n\
    \    for (int i = 3; i <= n / 2; i *= 2)\n    {\n        if (x % i == 0) return\
    \ false;\n    }\n    \n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnlktlk3f: /tmp/tmpnlktlk3f.cpp:27: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code goes here\n    if(n==1)\
    \ return true;\n    if(n==0) return false;\n    if(n<0) return false;\n    long\
    \ int d=1;\n    long int q=1;\n    int i=1;\n    while(i<n){\n        q*=x;\n\
    \        i+=1;\n    }\n    return q==x;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp45kq5dru: /tmp/tmp45kq5dru.cpp:26: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code here\n    return 1;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoy7_2isx: /tmp/tmpoy7_2isx.cpp:14: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n\t// Write your code here\n\tassert(x\
    \ != 0);\n\tassert(n != 0);\n\tlong long res = 1;\n\tlong long pow_n_times_x =\
    \ 1;\n\twhile(pow_n_times_x <= n)\n\t{\n\t\tpow_n_times_x *= x;\n\t\tres += pow_n_times_x;\n\
    \t}\n\tif(res == n) return true;\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpeqbi9ihv: /tmp/tmpeqbi9ihv.cpp:23: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n    int i = 0;\n\
    \    while (i<n) {\n        if (x%n==0) {\n            return true;\n        }\n\
    \        i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr_1u3bv1: /tmp/tmpr_1u3bv1.cpp:25: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099540
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code here\n    return x;\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc17wt8f2: /tmp/tmpc17wt8f2.cpp:14: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n < 1) return false;\n    // Your\
    \ code here\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyk9fvdnk: /tmp/tmpyk9fvdnk.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    int i=0;\n    while(x>1 && n>=1){\n\
    \        ++i;\n        x/=n;\n        n/=i;\n    }\n    if(x==1)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6egjeje2: /tmp/tmp6egjeje2.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long result = 1;\n    while (n) {\n\
    \        if (x % n == 0) {\n            result *= n;\n        }\n        x /=\
    \ n;\n        n--;\n    }\n    return result == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp84ziv_i7: /tmp/tmp84ziv_i7.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Write your code here\n    long\
    \ temp = x;\n    for(int i = 1 ; i <= n; i++){\n        temp *= temp;\n    }\n\
    \    return (x == temp);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf92b97ha: /tmp/tmpf92b97ha.cpp:17: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 1) { return true; } // base\
    \ case\n    int res = 1;\n    while (n >= res) {\n        res *= x; // this reduces\
    \ x to the simple power\n    }\n    return res == x;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx47vqs42: /tmp/tmpx47vqs42.cpp:18: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    assert(n>0);\n    // your code here\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3t6l6ev8: /tmp/tmp3t6l6ev8.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    //assert(n > 1);\n    //assert(x <=\
    \ 0);\n    if(n==1) {\n        return true;\n    }\n    long t = 1;\n    long\
    \ p = 0;\n    long q = 1;\n    while(p != n) {\n        if(t < x) {\n        \
    \    q = q*p;\n            t++;\n        }\n        p++;\n    }\n    return t==x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm_og4ia6: /tmp/tmpm_og4ia6.cpp:27: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long ans = 1;\n    long d = n-1;\n\
    \    for (int i = 1; i<=n; i++) {\n        ans = ans*x;\n        d = d/2;\n  \
    \  }\n    return ans == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplf81_wf5: /tmp/tmplf81_wf5.cpp:18: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code here\nreturn true;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqtz4bple: /tmp/tmpqtz4bple.cpp:14: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // base case\n    if (n == 1) {\n\
    \        return true;\n    }\n    \n    // recursive case\n    // Write a for\
    \ loop for iterating over all powers of n starting from 1\n    bool result = false;\n\
    \    for (int i = 1; i < n; i++) {\n        if (x == pow(n, i)) {\n          \
    \  result = true;\n            break;\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3xbi7h3h: /tmp/tmp3xbi7h3h.cpp:26: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // YOUR CODE HERE\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmppwbfgcim: /tmp/tmppwbfgcim.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099541
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    //Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv91_o5mo: /tmp/tmpv91_o5mo.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if (n == 1) return (x & 1) == 0;\n \
    \ return (x == n*n);\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpldusldpi: /tmp/tmpldusldpi.cpp:13: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // TODO: Complete this function\n\
    \    int power = 1;\n    while (n!=power) {\n        power *= n;\n    }\n    for\
    \ (int i = 1; i<=power; i++) {\n        if (pow(x, i)==i) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfb7_bfp8: /tmp/tmpfb7_bfp8.cpp:22: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   long ans = 1;\n   while (n>0) {\n \
    \     if (x % n == 0) {\n         ans = ans * n;\n         return true;\n    \
    \  }\n      ans = ans * n;\n      n = n/2;\n   }\n   return false;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpni77wtny: /tmp/tmpni77wtny.cpp:22: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbls7708w: /tmp/tmpbls7708w.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return true;\n\
    \    else if (n < 0)\n        return false;\n    else if (n%2 == 0)\n        return\
    \ is_simple_power(x, n-1);\n    else\n        return is_simple_power(x>>1, n-1);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwqi4irph: /tmp/tmpwqi4irph.cpp:20: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8qp0xcrm: /tmp/tmp8qp0xcrm.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   assert(n>0&&n<2);\n   if (n==1) return\
    \ true;\n   else if (n==2) return (x==1);\n   else if (x==1) return false;\n \
    \  else if (x==2) return (x==1);\n   else if (x>1) return is_simple_power(x%2,n);\n\
    \   else return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfbrmxdxe: /tmp/tmpfbrmxdxe.cpp:8: bool is_simple_power(long int, long
    int): Assertion `n>0&&n<2'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Code here\n}\nint main() {\n  \
    \  auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_lwv8y29: /tmp/tmp_lwv8y29.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Complete the function here\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5wxilisv: /tmp/tmp5wxilisv.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // YOUR CODE HERE\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw_gy4ggu: /tmp/tmpw_gy4ggu.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4hhljuuq: /tmp/tmp4hhljuuq.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // Fill this in.\n  long a = x;\n  long\
    \ b = 1;\n  while (b <= n) {\n    if (a%b != 0) return false;\n    b = b * 2;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsybn1dje: /tmp/tmpsybn1dje.cpp:22: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   assert(x > 0);\n   assert(n > 0);\n\
    \   //write your logic here\n   return true;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplfzl72pa: /tmp/tmplfzl72pa.cpp:16: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // base case\n    if (x==1) return\
    \ true;\n    // If x is not a simple power of n, then return false\n    if (n==1)\
    \ return false;\n    // If n is a power of 2 then return true if x is odd and\
    \ false otherwise\n    if (n&1)  return (x&1)?true:false;\n    // If n is a power\
    \ of 3, then return true if x is a power of 3 and false otherwise.\n    // If\
    \ n is a power of 3, then return true only if x is power of 3 and false otherwise\n\
    \    // example: 5 is a power of 3\n    // return is_power_of_3(x)?true:false;\n\
    \    // If n is a power of 5, then return true if x is a power of 5 and false\
    \ otherwise.\n    // If n is a power of 5, then return true only if x is power\
    \ of 5 and false otherwise\n    // example: 25 is a power of 5\n    // return\
    \ is_power_of_5(x)?true:false;\n    // The loop below will be executed for x =\
    \ 3 and n = 5\n    // 3 ^ 5 = 625\n    // 3 ^ 4 = 9\n    // 3 ^ 3 = 27\n    //\
    \ 3 ^ 2 = 9\n    // 3 ^ 1 = 3\n    // 3 ^ 0 = 1\n    // 3 ^ -1 = 3\n    // 3 ^\
    \ -2 = 9\n    // 3 ^ -3 = 27\n    // 3 ^ -4 = 3\n    // 3 ^ -5 = 9\n    // 3 ^\
    \ -6 = 3\n    // 3 ^ -7 = 1\n    // 3 ^ -8 = 9\n    // 3 ^ -9 = 27\n    // 3 ^-10\
    \ = 3\n    // 3 ^-11 = 9\n    // 3 ^-12 = 3\n    // 3 ^-13 = 1\n    // 3 ^-14\
    \ = 9\n    // 3 ^-15-27 = 3\n    // 3 ^-16 = 15\n    // 3 ^-17 = 45\n    // 3\
    \ ^-18 = 67\n    // 3 ^-19 = 109\n    // 3 ^-20 = 177\n    // 3 ^-21 = 253\n \
    \   // 3 ^-22 = 461\n    // 3 ^-23 = 732\n    // 3 ^-24 = 1137\n    // 3 ^-25\
    \ = 1863\n    // 3 ^-26 = 2629\n    // 3 ^-27 = 4331\n    // 3 ^-28 = 6213\n \
    \   // 3 ^-29 = 8819\n    // 3 ^-30 = 10239\n    // 3 ^-31 = 13759\n    // 3 ^-32\
    \ = 17143\n    // 3 ^-33 = 20349\n    // 3 ^-34 = 24591\n    // 3 ^-35 = 38031\n\
    \    // 3 ^-36 = 44201\n    // 3 ^-37 = 59455\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpv00xfkhk: /tmp/tmpv00xfkhk.cpp:69: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long res = 1;\n    while (n) {\n \
    \       if (n%2 == 0) {\n            res *= x;\n            x /= 2;\n        }\n\
    \        else {\n            x *= x;\n        }\n        n /= 2;\n    }\n    return\
    \ x == 1;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxd688oz2: /tmp/tmpxd688oz2.cpp:23: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n     // TODO: Write your code here\n \
    \   long int result = 1;\n    while (x>1) {\n        if (x % n == 0) {\n     \
    \       result = x*result;\n        }\n        x/=n;\n    }\n    return result\
    \ == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8li7z31c: /tmp/tmp8li7z31c.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n < 0) {\n        return false;\n\
    \    }\n    if (n%2==0) {\n        return false;\n    }\n    int d = 1;\n    while\
    \ (n%2==0) {\n        n /= 2;\n        ++d;\n    }\n    for (long i = 2; i <=\
    \ x; i += 2) {\n        if (x % i == 0) {\n            if (n%i == 0) {\n     \
    \           n = n/i;\n                return true;\n            }\n          \
    \  n = n%i;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyzy4a4gt: /tmp/tmpyzy4a4gt.cpp:32: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// your code here\n}\nint main() {\n \
    \   auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmplkfowu4x: /tmp/tmplkfowu4x.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099534
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\nassert(n>0);\nlong y=x%n;\nif(n==1)\n\
    return 1;\nif(y==0)\nreturn 0;\nif(n==2)\nreturn (x==n*n);\nreturn ((n%2)==y&&is_simple_power(x,n/2));\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmptjc0qd6e: /tmp/tmptjc0qd6e.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0) return true;\n    if (n\
    \ == 1) return false;\n    long temp = (n-1)*x;\n    long result = 0;\n    while(temp\
    \ != 0) {\n        result += (temp % n == 0);\n        temp /= n;\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = is_simple_power;\n   \
    \ assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg2bi0hol: /tmp/tmpg2bi0hol.cpp:21: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if(x==1 && n>0)\n        return true;\n\
    \    if(x==0 && n<=0)\n        return false;\n    if(n==0)\n        return true;\n\
    \    if(n==1)\n        return false;\n\n    if( (x%n)==0 ){\n        if(is_simple_power(x,\
    \ n/2))\n            return true;\n        if(is_simple_power(x, n/2))\n     \
    \       return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpm40xe3cb: /tmp/tmpm40xe3cb.cpp:27: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 1)\n        return true;\n\
    \    if (n % 2 == 0)\n        if (x % n == 0)\n            return true;\n    else\n\
    \        if (x % n != 0)\n            return false;\n    long n1 = n / 2;\n  \
    \  long n2 = n / 2;\n    while (n > 1 && n1 != n2) {\n        if (x % n == 0)\
    \ {\n            n = n2;\n            n2 = n1;\n            n1 = n1;\n       \
    \ }\n        n2 = n / 2;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9psh8rpl: /tmp/tmp9psh8rpl.cpp:33: int main(): Assertion `candidate((9),
    (3)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    return (n == 0) || (((n&(n-1))%n)==0);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcjapz2zl: /tmp/tmpcjapz2zl.cpp:13: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Solution part 1: Check if x^n is\
    \ equal to n^x\n    if(x==0 || n==0) return true;\n    if(!(n % x)) return false;\n\
    \    // Solution part 2: Check if n^x is a power of n.\n    // Here x is greater\
    \ than n**2.\n    long temp = n*x;\n    for(int i=1;i<x;i++) temp = temp*n;\n\
    \    if(temp == n) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_1q5b_db: /tmp/tmp_1q5b_db.cpp:20: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    assert(x>0 && n>0);\n    if(n==0)\
    \ return false;\n    long d=x&(n-1);\n    while(d>0) \n    {\n        if(x==n)\
    \ return true;\n        n|=(n-1);\n        x&=(x-1);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq999wtvk: /tmp/tmpq999wtvk.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099542
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n// Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp17f1b4d1: /tmp/tmp17f1b4d1.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return false;\n\
    \    if (n != 1 && (n % 2) == 0)\n        return false;\n    if (n == 1)\n   \
    \     return true;\n    if (n < 0)\n        return false;\n    if (n < 10)\n \
    \       return (x == n) ? true : is_simple_power(x, n / 2);\n    if (n < 100)\n\
    \        return ((x == n / 2) || x == (n / 4)) ? true : is_simple_power(x, n /\
    \ 2);\n    if (n < 1000)\n        return ((x == n / 100) || x == (n / 400)) ?\
    \ true : is_simple_power(x, n / 2);\n    if (n < 10000)\n        return ((x ==\
    \ n / 1000) || x == (n / 2000)) ? true : is_simple_power(x, n / 2);\n    if (n\
    \ < 100000)\n        return ((x == n / 100000) || x == (n / 1000000)) ? true :\
    \ is_simple_power(x, n / 2);\n    if (n < 10000000)\n        return ((x == n /\
    \ 10000000) ? true : is_simple_power(x, n / 2));\n    if (n < 1000000000)\n  \
    \      return ((x == n / 1000000000) ? true : is_simple_power(x, n / 2));\n  \
    \  if (n < 1000000000000)\n        return ((x == n / 1000000000000) ? true : is_simple_power(x,\
    \ n / 2));\n    return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2be8x73s: /tmp/tmp2be8x73s.cpp:36: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // your code\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuk_wlvo4: /tmp/tmpuk_wlvo4.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0ucqa_4q: /tmp/tmp0ucqa_4q.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if(n==0)\n        return false;\n\
    \    if(n==1)\n        return true;\n    long res = n%x;\n    if(res == 0)\n \
    \       return true;\n    if(res<0)\n        return is_simple_power(x, n/res);\n\
    \    else\n        return is_simple_power(x, n/res);\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw4mvfryr: /tmp/tmpw4mvfryr.cpp:23: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   assert(n != 0);\n   assert(x != 0 &&\
    \ n != 0 && n % 2 == 1);\n   // return true if x is a simple power of n and false\
    \ otherwise\n   // if n**int=x, return true\n   return (pow(n, x) == x);\n}\n\
    int main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2_t320ns: /tmp/tmp2_t320ns.cpp:9: bool is_simple_power(long int, long
    int): Assertion `x != 0 && n != 0 && n % 2 == 1'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long r = 1;\n    long remain = x;\n\
    \    while (remain != 0) {\n        if (remain & 1) {\n            r *= n;\n \
    \       }\n        remain >>= 1;\n        n *= n;\n    }\n    return (r == x);\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvytw9xu9: /tmp/tmpvytw9xu9.cpp:21: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x != 0) {\n        if (n % 2 ==\
    \ 0) {\n            if (x % n == 0) {\n                return true;\n        \
    \    }\n        }\n        else {\n            if (x % n == 0 || x % (n - 1) ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqrl7q7w0: /tmp/tmpqrl7q7w0.cpp:29: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 0)\n        return false;\n\
    \    if (n < 0)\n        return false;\n    if (x == 0)\n        return true;\n\
    \    if (x == 1)\n        return true;\n    if (x % n == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpx8k4ri8w: /tmp/tmpx8k4ri8w.cpp:27: int main(): Assertion `candidate((24),
    (2)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0)\n        return true;\n\
    \    if (n % 2 == 0)\n        return is_simple_power(x / 2, n);\n    return is_simple_power(x/\
    \ 2, n-1) * x == x;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5xz9447d: /tmp/tmp5xz9447d.cpp:17: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxfn7l80h: /tmp/tmpxfn7l80h.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n     assert(x>0);\n     assert(n>0);\n\
    \     long ans=1;\n     long m=n;\n     while(m>1)\n     {\n         if(ans%x==0)\n\
    \         return false;\n         ans=(ans*x)%m;\n         m=(m*m)%n;\n     }\n\
    \     return true;\n}\nint main() {\n    auto candidate = is_simple_power;\n \
    \   assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfh7mfrgw: /tmp/tmpfh7mfrgw.cpp:24: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long res = 1;\n    while(x>0){\n \
    \       long temp = x/n;\n        res = res && (temp%n == 0);\n        x = temp;\n\
    \    }\n    return !res;\n}\nint main() {\n    auto candidate = is_simple_power;\n\
    \    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214), (16))\
    \ == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0qynmx2a: /tmp/tmp0qynmx2a.cpp:19: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (n == 1) return true;\n    if (x\
    \ == 1) return false;\n    return is_simple_power(x, n-1);\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpisxqa2tx: /tmp/tmpisxqa2tx.cpp:15: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    if (x == 0 || x == 1) return x ==\
    \ 0;\n    // x must be a power of n\n    if (n <= 0) return false;\n    if (n\
    \ == 1) return true;\n    // n must be odd\n    if (n & 1) return false;\n   \
    \ // n must be even\n    // Your code goes here\n}\nint main() {\n    auto candidate\
    \ = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4azq2w7p: /tmp/tmp4azq2w7p.cpp:19: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099544
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Write your code here\n    if(n==1)\n\
    \        return true;\n    \n    long long ans=1;\n    for(int i=0;i<=n;i++){\n\
    \        if(x%i==0)\n            ans*=i;\n    }\n    return ans==x;\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660099544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long k;\n    k = n;\n    long power\
    \ = 1;\n    while (k != 0) {\n        if (power > x) {\n            return false;\n\
    \        }\n        power *= k;\n        k--;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu05ytgt2: /tmp/tmpu05ytgt2.cpp:26: int main(): Assertion `candidate((16),
    (4)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    bool flag;\n    flag = (n%2==0 &&\
    \ x%2==0)? true :\n           (n%2!=0 && x%2!=0) ? false : true;\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl41a21zy: /tmp/tmpl41a21zy.cpp:16: int main(): Assertion `candidate((143214),
    (16)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  if(n == 1)\n  {\n     return true;\n\
    \  }\n  if(x != 1)\n  {\n     return false;\n  }\n  long p = 2;\n  long q = 1;\n\
    \  long ans = 0;\n  while(p <= n)\n  {\n     ans += (q << p);\n     q *= x;\n\
    \     p += 1;\n  }\n  return x == ans;\n}\nint main() {\n    auto candidate =\
    \ is_simple_power;\n    assert(candidate((16), (2)) == (true));\n    assert(candidate((143214),\
    \ (16)) == (false));\n    assert(candidate((4), (2)) == (true));\n    assert(candidate((9),\
    \ (3)) == (true));\n    assert(candidate((16), (4)) == (true));\n    assert(candidate((24),\
    \ (2)) == (false));\n    assert(candidate((128), (4)) == (false));\n    assert(candidate((12),\
    \ (6)) == (false));\n    assert(candidate((1), (1)) == (true));\n    assert(candidate((1),\
    \ (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwbsq0kmj: /tmp/tmpwbsq0kmj.cpp:29: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099544
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   if(x < 1 || n > 9) return false;\n\
    \   long long mod = pow(x, n)%n;\n   return mod == 0;\n}\nint main() {\n    auto\
    \ candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdb03av3e.cpp: In function \u2018bool is_simple_power(long int,\
    \ long int)\u2019:\n/tmp/tmpdb03av3e.cpp:9:29: error: invalid operands of types\
    \ \u2018double\u2019 and \u2018long int\u2019 to binary \u2018operator%\u2019\n\
    \    9 |    long long mod = pow(x, n)%n;\n      |                    ~~~~~~~~~^~\n\
    \      |                       |      |\n      |                       double\
    \ long int\n"
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    long long fact = 1;\n    for(int i\
    \ = 1; i <= n; i++) {\n        fact = fact*x;\n    }\n    return fact == x;\n\
    }\nint main() {\n    auto candidate = is_simple_power;\n    assert(candidate((16),\
    \ (2)) == (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuv7pu8hp: /tmp/tmpuv7pu8hp.cpp:16: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n   //Write your code in here\n}\nint main()\
    \ {\n    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) ==\
    \ (true));\n    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy_e1gpa0: /tmp/tmpy_e1gpa0.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  int flag=0;\n  while(n!=0){\n    flag++;\n\
    \    n=n/2;\n  }\n  if(x==n)\n    return true;\n  if(flag==1){\n    return false;\n\
    \  }\n  if(flag==2){\n    return true;\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4jr2qym5: /tmp/tmp4jr2qym5.cpp:29: int main(): Assertion `candidate((16),
    (4)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099543
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n  // TODO your code\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbpjkqp6m: /tmp/tmpbpjkqp6m.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099544
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to write\
    \ a function that returns true if a number x is a simple\n// power of n and false\
    \ in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n\
    bool is_simple_power(long x, long n) {\n    // Your code here\n}\nint main() {\n\
    \    auto candidate = is_simple_power;\n    assert(candidate((16), (2)) == (true));\n\
    \    assert(candidate((143214), (16)) == (false));\n    assert(candidate((4),\
    \ (2)) == (true));\n    assert(candidate((9), (3)) == (true));\n    assert(candidate((16),\
    \ (4)) == (true));\n    assert(candidate((24), (2)) == (false));\n    assert(candidate((128),\
    \ (4)) == (false));\n    assert(candidate((12), (6)) == (false));\n    assert(candidate((1),\
    \ (1)) == (true));\n    assert(candidate((1), (12)) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqdm9337: /tmp/tmpjqdm9337.cpp:12: int main(): Assertion `candidate((16),
    (2)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660099509
