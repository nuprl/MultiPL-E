name: HumanEval_55_fib
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n\
  long fib(long n) {\n"
tests: "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
  \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
  \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
completions: ["  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);",
  "    if (n <= 1)\n        return n;\n    else\n        return fib(n-1) + fib(n-2);",
  "\tassert(n >= 0);\n\tif (n == 0 || n == 1) return n;\n\tlong res = fib(n - 1) +\
    \ fib(n - 2);\n\treturn res;", "   assert(n >= 0);\n   long a = 1;\n   long b\
    \ = 1;\n   while (n > 0) {\n       long c = a + b;\n       a = b;\n       b =\
    \ c;\n       n--;\n   }\n   return b;", "\tif (n < 2) {\n\t\treturn n;\n\t} else\
    \ if (n == 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib(n - 1) + fib(n - 2);\n\
    \t}", "\tif (n < 0) return -1;\n\tlong a = 0, b = 1, c = 1;\n\twhile (n > 1) {\n\
    \t\tlong tmp = c;\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = tmp;\n\t\tn--;\n\t}\n\t\
    return c;", "    if (n <= 1)\n        return n;\n    long sum = 0;\n    for (int\
    \ i = 0; i < n; i++)\n        sum += fib(n - i);\n    return sum;", "    if (n\
    \ < 2) return n;\n    return fib(n - 1) + fib(n - 2);", "    long first = 0, second\
    \ = 1, result = 1;\n    for (long i = 0; i < n; i++) result = result + second;\n\
    \    first = second;\n    second = result;\n    return result;", "  if (n <= 1)\n\
    \    return n;\n  return fib(n - 1) + fib(n - 2);", "  if (n == 0)\n    return\
    \ 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);", "  assert(n\
    \ > 0);\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  long prev1\
    \ = 1, prev2 = 1;\n  for (long i = 2; i <= n; i++) {\n    long temp1 = prev1 +\
    \ prev2;\n    long temp2 = prev2;\n    prev1 = temp1;\n    prev2 = temp2;\n  }\n\
    \  return prev1;", "\tassert(n > 0);\n\treturn n < 2 ? n : fib(n - 1) + fib(n\
    \ - 2);", "    long long f1, f2, f;\n    if (n < 2) {\n        return n;\n   \
    \ }\n    f1 = f2 = 1;\n    f = 1;\n    while (n) {\n        f = f1 + f2;\n   \
    \     f1 = f2;\n        f2 = f;\n        n -= 1;\n    }\n    return f;", "   \
    \ assert(n >= 0 && n < 1000);\n    if (n==0) return 0;\n    else if (n==1) return\
    \ 1;\n    return fib(n - 2) + fib(n - 1);", "\tif (n == 0)\n\t\treturn 0;\n\t\
    if (n == 1)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n - 2);", "    if(n==0)\n\
    \        return 0;\n    if(n==1)\n        return 1;\n    return fib(n - 1) + fib(n\
    \ - 2);", "\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n - 2) + fib(n - 1);", " \
    \   if (n<=1) return n;\n    else return fib(n - 1) + fib(n - 2);", "    if(n\
    \ < 2) {\n        return 1;\n    }\n    long fib_1 = fib(n - 1);\n    long fib_2\
    \ = fib(n - 2);\n    return fib_1 + fib_2;", "    // base case\n    if (n == 0\
    \ || n == 1)\n        return n;\n    else {\n        return fib(n - 1) + fib(n\
    \ - 2);\n    }", "    if (n <= 1) {\n        return 1;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);", "    long x = 0, y = 1;\n    while (n > 1){\n        long\
    \ c = x;\n        x = y;\n        y = c + y;\n        n--;\n    }\n    return\
    \ x;", "    assert(n >= 0 && n < 1000000000);\n    if (n <= 1) return n;\n   \
    \ return fib(n-2) + fib(n-1);", "    long a = 0, b = 1, c = 1;\n    // Initialize\
    \ to 1st Fibonacci number.\n    while (n--) {\n        int c = a + b; // Use temporary\
    \ variable c to save value of a.\n        a = b;\n        b = c;\n    }\n    return\
    \ c;", "    long f1 = 1;\n    long f2 = 1;\n    long f = 0;\n    while (n) {\n\
    \        f = f1 + f2;\n        f1 = f2;\n        f2 = f;\n        n--;\n    }\n\
    \    return f;", "    long f = 1;\n    for (int i = 1; i < n; ++i) {\n       \
    \ f += i;\n    }\n    return f;", "\tassert(n >= 0);\n\tlong ret = 0;\n\tif (n\
    \ < 2)\n\t\treturn n;\n\telse\n\t\tret = fib(n - 1) + fib(n - 2);\n\treturn ret;",
  "    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n   \
    \ return fib(n - 1) + fib(n - 2);", "\tif (n<0)\n\t\treturn 0;\n\tlong fib0=0,\
    \ fib1=1;\n\tfor (int i=2;i<=n;i++) {\n\t\tlong temp=fib0;\n\t\tfib0=fib1;\n\t\
    \tfib1=temp+fib1;\n\t}\n\treturn fib1;", "\tif (n <= 1)\n\t\treturn 1;\n\telse\n\
    \t\treturn fib(n - 1) + fib(n - 2);", "    assert(n >= 0L);\n    if (n == 0L)\
    \ {\n        return 1L;\n    }\n    if (n == 1L) {\n        return 2L;\n    }\n\
    \    long ans = 1L;\n    for (long i = 2L; i <= n; i++) {\n        ans = ans +\
    \ i;\n    }\n    return ans;", "  assert(n >= 0);\n  long ret = 1;\n  long f1\
    \ = 1;\n  long f2 = 1;\n  for (long i = 3; i <= n; i++) {\n    long temp = f1\
    \ + f2;\n    f1 = f2;\n    f2 = temp;\n    ret += f2;\n  }\n  return ret;", " \
    \ assert(n >= 0);\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);", "    if(n == 1)\n        return 1;\n    if(n == 2)\n        return\
    \ 2;\n    return fib(n - 1) + fib(n - 2);", "\tif (n < 2) return n;\n\treturn\
    \ fib(n - 2) + fib(n - 1);", "    long a = 1, b = 0, c = 0;\n    while(n--){\n\
    \        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;", "\t\
    if (n<2) {\n\t\treturn n;\n\t}\n\tlong f = fib(n-1) + fib(n-2);\n\treturn f;",
  "    if (n == 1 || n == 2)\n        return 1;\n    long result = 0;\n    for (int\
    \ i = 2; i <= n; i++) {\n        result += (n % i);\n        n /= i;\n    }\n\
    \    return result;", '    return n < 2 ? 1 : fib(n-1) + fib(n-2);', "    if(n<2)\n\
    \        return n;\n    else return fib(n - 1) + fib(n - 2);", "    if(n == 0\
    \ || n == 1) {\n        return n;\n    }\n    long long ans = fib(n-2) + fib(n-1);\n\
    \    return ans;", "    assert(n > 1);\n    if (n == 1 || n == 2) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    long f = 1, a = 2, b =\
    \ 3, tmp;\n    long res = 0;\n    while (n > 1){\n        tmp = a;\n        a\
    \ = b;\n        b = tmp + b;\n        tmp = a + b;\n        res = f + tmp;\n \
    \       n--;\n    }\n    return res;", "    assert (0<n && n<100);\n    if (n==0)\n\
    \        return 0;\n    if (n==1)\n        return 1;\n    return fib(n - 1) +\
    \ fib(n - 2);", "  if (n < 2) {\n    return n;\n  }\n\n  long a = 1;\n  long b\
    \ = 1;\n  for (long i = 3; i <= n; ++i) {\n    long temp = a;\n    a = b;\n  \
    \  b = temp + b;\n  }\n  return a;", "    long ans = 0;\n    if(n <= 1) {\n  \
    \      return n;\n    }\n    long a = 1;\n    long b = 1;\n    for(int i = 0;\
    \ i < n; ++i) {\n        long c = a + b;\n        a = b;\n        b = c;\n   \
    \     ans += a;\n    }\n    return ans;", "    if (n<2) return 1;\n    return\
    \ fib(n-1) + fib(n-2);", "    assert(n >= 0);\n    long fibs[3];\n    fibs[0]\
    \ = fibs[1] = 1;\n    for (int i = 2; i < n; i++) {\n        long new_val = fibs[i\
    \ - 1] + fibs[i - 2];\n        fibs[i] = new_val;\n    }\n    return fibs[n];",
  "   if(n<0) return -1;\n   if(n==0 || n==1) return 1;\n   return fib(n - 1) + fib(n\
    \ - 2);", "  if(n<2)return n;\n  return fib(n-1) + fib(n-2);", "    if(n <= 2)\
    \ return n;\n    long a = 0, b = 1, c;\n    for(long i = 3; i < n; i++){\n   \
    \     c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;", "   \
    \ if (n == 0 || n == 1) {\n        return n;\n    }\n    long a = fib(n-2);\n\
    \    long b = fib(n-1);\n    return a + b;", "  if (n == 0 || n == 1) return n;\n\
    \  return fib(n-1) + fib(n-2);", "\tassert((n > 0 && n < 50) || (n > 100 && n\
    \ < 200));\n\tif(n == 0) return 0;\n\tif(n == 1) return 1;\n\tlong a = 1;\n\t\
    long b = 1;\n\tlong c;\n\tc = a + b;\n\ta = b;\n\tb = c;\n\tlong f;\n\tf = fib(n-1);\n\
    \treturn f;", "    long a = 0, b = 1;\n    long res = 0;\n    while(n--) {\n \
    \       res = a + b;\n        a = b;\n        b = res;\n    }\n    return res;",
  "    if (n < 2) return n;\n    return fib(n-2) + fib(n-1);", "  if (n <= 1) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);", "    if(n == 0)\n        return 0;\n\
    \    if(n == 1)\n        return 1;\n    long fib_n = fib(n / 2) + fib(n / 2);\n\
    \    return fib_n;", "\tassert(n >= 0);\n\tlong a=0, b=1, x;\n\tfor (long i =\
    \ 1; i < n; ++i) {\n\t\tx = a + b;\n\t\ta = b;\n\t\tb = x;\n\t}\n\treturn x;",
  "    assert(n >= 1);\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n   \
    \ return fib(n - 1) + fib(n - 2);", "    long a=1, b=2;\n    for(long i=3; i<=n;\
    \ i++) {\n        if(i%2 == 0)\n            a += b;\n        else\n          \
    \  b += a;\n    }\n    return a;", "    if (n == 0 || n == 1)\n        return\
    \ n;\n    long a = fib(n - 2);\n    long b = fib(n - 1);\n    return a + b;",
  "  assert(n > 1);\n  long f[n + 1];\n  f[0] = 0;\n  f[1] = 1;\n  for (long i = 2;\
    \ i < n; ++i) {\n    long j = f[i - 1] + f[i - 2];\n    f[i] = j;\n  }\n  return\
    \ f[n];", "  if (n < 2) {\n    return n;\n  } else {\n    return fib(n - 1) +\
    \ fib(n - 2);\n  }", "    assert(n >= 0 && n < 64);\n    long ret = 1;\n    long\
    \ f = 1;\n    for (long i = 1; i < n; ++i) {\n        ret = ret + f;\n       \
    \ f += 2;\n    }\n    return ret;", "    assert(n >= 0 && n < 20);\n    if (n\
    \ == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n-2) + fib(n-1);",
  "    // Initialize a constant array and two variables.\n    long fibs[n];\n    long\
    \ a = 0;\n    long b = 1;\n\n    // Compute the n-th Fibonacci number using the\
    \ following algorithm:\n    // If n is 0, return 0;\n    // If n is 1, return\
    \ 1;\n    // If n is 2, return 1;\n    // If n is even, add 1 and return fib(3n);\n\
    \    // If n is odd, multiply a and add b and return fib(3n-1) - fib(n-2);\n \
    \   \n    for(int i=0;i<n;i++)\n        fibs[i]=a+b;\n    \n    return fibs[n-1];",
  "\tif (n < 0 || n > 15)\n\t\texit(1);\n\tlong f1 = 0, f2 = 1, f = 3;\n\twhile (n\
    \ > 0) {\n\t\tf = f1 + f2;\n\t\tf1 = f2;\n\t\tf2 = f;\n\t\t--n;\n\t}\n\treturn\
    \ f;", "    long prev = 0;\n    long curr = 1;\n    long result = 1;\n    while\
    \ (n > 1) {\n        prev = curr;\n        curr = curr + prev;\n        result++;\n\
    \        n--;\n    }\n    return curr - prev;", "    long a=1, b=2, c;\n    if(n<=0)\n\
    \        cout<<\"The Fibonacci number of first \"<<n<<\" number is 1!\\n\";\n\
    \    else if(n==1)\n        cout<<\"The Fibonacci number of first \"<<n<<\" number\
    \ is 1!\\n\";\n    else if(n==2)\n        cout<<\"The Fibonacci number of first\
    \ \"<<n<<\" number is 1!\\n\";\n    else\n    {\n        cout<<\"The Fibonacci\
    \ number of first \"<<n<<\" number is \"<<a;\n        for(int i=2;i<=n;i++)\n\
    \        {\n            c=a+b;\n            cout<<\",\" << c;\n            a=b;\n\
    \            b=c;\n        }\n        cout<<\"\\n\";\n    }", '    return n <
    2 ? n : fib(n-2) + fib(n-1);', "    if (n == 0) return 0;\n    if (n == 1) return\
    \ 1;\n    long prev = fib(n - 1);\n    return prev + fib(n - 2);", "    if (n\
    \ <= 0) return 0;\n    if (n == 1) return 1;\n    long ans = fib(n - 1) + fib(n\
    \ - 2);\n    return (ans >> 1) ^ ans;", "    assert(n >= 0);\n    if (n == 0 ||\
    \ n == 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);", " \
    \   assert(n>=0 && n<=31);\n    if(n<2)\n        return 1;\n    if(n==2)\n   \
    \     return 2;\n    long prev1=prev2=1;\n    long cur=1;\n    long i=2;\n   \
    \ while(i<n)\n    {\n        prev1=cur;\n        cur+=prev1;\n        i+=1;\n\
    \    }\n    return cur;", "    long fib[] = {0, 1};\n    long i = 0;\n    while\
    \ (i<n) {\n        long val = fib[i] - fib[i-1];\n        fib[i] = val;\n    \
    \    ++i;\n    }\n    return fib[n];", "    long first = 0, second = 1;\n    if\
    \ (n <= 1) {\n        return n;\n    }\n    while ((n -= 1) > 1) {\n        long\
    \ tmp = second;\n        second = first + second;\n        first = tmp;\n    }\n\
    \    return first;", "    // Write code here\n    long result = 0;\n    if(n <=\
    \ 1)\n    {\n        result = n;\n    }\n    else\n    {\n        result = (fib(n\
    \ - 1) + fib(n - 2)) % 10000007;\n    }\n    return result;", "\tif(n<2) return\
    \ n;\n\treturn fib(fib(fib(fib(fib(n-1)))) );", "    if (n < 0)\n        return\
    \ 0;\n    if (n == 0 || n == 1)\n        return n;\n    return fib(n - 1) + fib(n\
    \ - 2);", "\tif (n <= 1) {\n\t\treturn n;\n\t}\n\treturn fib(n - 1) + fib(n -\
    \ 2);", "    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);",
  "    assert(n >= 0);\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n\
    \ - 1) + fib(n - 2);", "    long fib1=1, fib2=1;\n    if( n==0 ) return 0;\n \
    \   for(long i=2;i<=n;i++) fib2=fib1+fib2;\n    return fib2;", "  assert(n >=\
    \ 0);\n  long fibs[2] = {0, 1};\n  for (long i = 2; i < n; i++)\n    fibs[i] =\
    \ fibs[i - 1] + fibs[i - 2];\n  return fibs[n];", "  if (n < 2)\n    return 1;\n\
    \  long a = 0;\n  long b = 1;\n  for (long i = 2; i <= n; i++)\n    {\n      long\
    \ tmp = a;\n      a = b;\n      b = tmp + b;\n    }\n  return b;", "  assert((n\
    \ >= 0) && (n <= 10));\n  long a = 1;\n  long b = 1;\n  for (long i = 0; i < n;\
    \ ++i) {\n    long tmp = a;\n    a = b;\n    b = tmp + b;\n  }\n  return b;",
  '    return n < 2 ? n : fib(n - 1) + fib(n - 2);', "   if(n<2)\n      return n;\n\
    \   return fib(n-2)+fib(n-1);", "    if(n<2)\n        return 1;\n    else\n  \
    \      return fib(n - 1) + fib(n - 2);", "     if (n <= 1)\n         return n;\n\
    \     return fib(n - 1) + fib(n - 2);", "    assert (n>0);\n    if(n==1) return\
    \ 1;\n    long first=0,second=1,temp;\n    while(n>1) {\n        temp=first+second;\n\
    \        first=second;\n        second=temp;\n        n--;\n    }\n    return\
    \ first;", "    if (n <= 1) return 1;\n    return fib(n - 1) + fib(n - 2);", " \
    \ // Initialize first two numbers.\n  long a = 0;\n  long b = 1;\n  // For every\
    \ number after the first two, subtract the previous two\n  // numbers and then\
    \ add the next number to the sum.\n  for (long i = 3; i <= n; i++) {\n    long\
    \ tmp = b;\n    b = a;\n    a = tmp + a;\n  }\n  return a;", "  assert(n >= 0);\n\
    \  if (n==1 || n==2)\n    return 1;\n  else {\n    long prev=fib(--n-1);\n   \
    \ return prev+prev;\n  }", "    assert(n>=0);\n    if (n<=1) return 1;\n    if\
    \ (n==2) return 1;\n    if (n==3) return 2;\n    long prev=0,curr=1;\n    long\
    \ i=2;\n    while (i<n) {\n        long temp=curr;\n        curr=prev;\n     \
    \   prev=temp;\n        i+=1;\n    }\n    return curr;", "    long a = 1, b =\
    \ 1;\n    while (--n > 0) {\n        long c = a + b;\n        a = b;\n       \
    \ b = c;\n    }\n    return a;", "     assert(n<=1L);\n     if(n<2L)\n       \
    \ return n;\n     return fib(n-1) + fib(n-2);", "\tif (n <= 1)\n\t\treturn 1;\n\
    \telse\n\t\treturn fib(n - 1) + fib(n - 2);", "\tif (n == 0) {\n\t\treturn 0;\n\
    \t} else if (n == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fib(n - 1) + fib(n\
    \ - 2);\n\t}", "    if (n<1) return 0;\n    long fib1=0, fib2=1;\n    while (n)\
    \ {\n        long temp = fib1;\n        fib1 = fib2;\n        fib2 = temp + fib2;\n\
    \        n--;\n    }\n    return fib2;", "    long a = 0,\n        b = 1; // Fibonacci\
    \ numbers are defined by its two preceding numbers.\n    if (n <= 1) {\n     \
    \   return a;\n    } else {\n        while (n) {\n            long temp = a;\n\
    \            a = b;\n            b = temp + b;\n            n -= 1;\n        }\n\
    \        return b;\n    }", "  assert(n >= 0);\n  if (n < 2) return n;\n  if (n\
    \ < 4) return fib(n-1) + fib(n-2);\n  return fib(n-1) + fib(n-2) + fib(n-3);",
  "    long ret = 0;\n    long f1 = 0, f2 = 1;\n    for (int i = 1; i < n; i++) {\n\
    \        ret = f2;\n        f2 = f1;\n        f1 = ret + f1;\n    }\n    return\
    \ ret;", "    if(n <= 1) return 1;\n    return fib(n - 1) + fib(n - 2);", "  \
    \  if (n <= 1)\n        return n;\n    else\n        return fib(n - 1) + fib(n\
    \ - 2);", "    assert(n > 0);\n    if (n == 0 || n == 1)\n        return n;\n\
    \    return fib(n-1) + fib(n-2);", "     assert(n > 0);\n     if (n == 1)\n  \
    \      return 1;\n     if (n == 2)\n        return 1;\n     return fib(n - 1)\
    \ + fib(n - 2);", "  if (n == 0)\n    return 0;\n  else if (n == 1)\n    return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);", "    if (n <= 0) return 0;\n    if (n\
    \ == 1) return 1;\n    return fib(n - 1) + fib(n - 2);", "    assert(n >= 0 &&\
    \ n <= 5000000);\n    if (n == 0 || n == 1)\n        return n;\n    return fib(n\
    \ - 2) + fib(n - 1);", "\tlong a = 0;\n\tlong b = 1;\n\tfor (long i = 2; i <=\
    \ n; i++) {\n\t\tlong c = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;", " \
    \ if (n <= 1)\n    return n;\n  else\n    return fib(n-1) + fib(n-2);", "  assert(n\
    \ >= 0);\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return fib(n - 1)\
    \ + fib(n - 2);", "    if (n < 2)\n        return n;\n    return fib(n-2) + fib(n-1);",
  "  if (n <= 1) return n;\n  return fib(n - 1) + fib(n - 2);", "  assert((n > 0)\
    \ && (n <= 30));\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  // Base\
    \ Cases\n  if (n == 2) return 1;\n  if (n == 3) return 2;\n  // Recursive Cases\n\
    \  return fib(n - 1) + fib(n - 2);", "    if(n<2) return 1;\n    return fib(n-1)\
    \ + fib(n-2);", "\tlong f1, f2;\n\tlong result = 0;\n\tassert(n >= 0);\n\n\tif\
    \ (n == 0 || n == 1) return n;\n\n\tf1 = f2 = n;\n\twhile (1) {\n\t\tlong k =\
    \ f1 + f2;\n\t\tif (k >= n) result = k;\n\t\telse f1 = f2;\n\t\tf2 = k;\n\t}\n\
    \treturn result;", "\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn\
    \ fib(n - 1) + fib(n - 2);", "    if (n < 2) {\n        return n;\n    }\n   \
    \ return fib(n - 1) + fib(n - 2);", "    // assert(n > 0);\n    if (n <= 1)\n\
    \        return n;\n    return fib(n - 1) + fib(n - 2);", "\tassert(n >= 0);\n\
    \tif (n == 0 || n == 1)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n - 2);", " \
    \   assert(n > 1);\n    if (n <= 1) return n;\n    return fib(n-1) + fib(n-2);",
  "  long ans = 0;\n  if (n <= 1) return 1;\n  if (n == 2) return 2;\n  ans = fib(n\
    \ - 1) + fib(n - 2);\n  return ans;", "    // base cases: if (n == 0) return 1;\
    \ if (n == 1) return 1;\n    assert(n >= 0 && n <= 1);\n    if (n == 0) return\
    \ 1;\n    if (n == 1) return 1;\n    // compute fibonacci up to n\n    long a\
    \ = fib(n-1);\n    long b = fib(n-2);\n    // compute fib(n)\n    return a + b;",
  "  if (n < 2) {\n    return 1;\n  }\n  long a = 1;\n  long b = 1;\n  for (long i\
    \ = 2; i <= n; i++) {\n    long tmp = a;\n    a = b;\n    b = tmp + b;\n  }\n\
    \  return a;", "    if(n < 2) return 1;\n    long res = fib(n - 1) + fib(n - 2);\n\
    \    return res;", "    long prev[n + 2] = { 0, 0 };\n    for (long i = 2; i <=\
    \ n; i++) {\n        long c = prev[i] - prev[i - 1];\n        prev[i] = prev[i\
    \ - 1] + c;\n    }\n    return prev[n];", "  assert(n >= 0);\n  // Declare and\
    \ initialize two variables.\n  long a = 0;\n  long b = 1;\n  // Print 'n' before\
    \ calculating 'Fibonacci number'.\n  cout << \"n before fibonacci: \" << n <<\
    \ endl;\n  long sum = 0;\n  // Calculate 'Fibonacci number' by repeated addition\
    \ until\n  // 'n' becomes equal to 'sum of Fibonacci number'.\n  long fibNo =\
    \ 0;\n  long i = 0;\n  while (i < n) {\n    sum += fibNo;\n    fibNo = a+b;\n\
    \    ++i;\n    a = b;\n    b = fibNo;\n  }\n  cout << \"Sum of Fibonacci number:\
    \ \" << sum << endl;\n  cout << \"Fibonacci number: \" << fibNo << endl;\n  return\
    \ fibNo;", "    long a = 1, b = 1;\n    for (int i = 0; i < n; i++) {\n      \
    \  long c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;", " \
    \   if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "  //\
    \ Base cases: 0 or 1.\n  if (n < 2) return n;\n  // Recursion.\n  return fib(n-2)\
    \ + fib(n-1);", "    if (n < 2)\n        return n;\n    long a = 1;\n    long\
    \ b = 1;\n    for (long i = 2; i <= n; i++) {\n        long tmp = a;\n       \
    \ a = b;\n        b = tmp + b;\n    }\n    return b;", "  long long fibs[5] =\
    \ {0, 1, 0, 2, 3};\n  long long sum = fibs[n];\n  for (long i = n; i < 5; ++i)\n\
    \    sum += fibs[i];\n  return sum;", "    if (n==1 || n==2)\n        return n;\n\
    \    else\n        return fib(n - 1) + fib(n - 2);", "    long ret=0,i,a,b;\n\
    \    assert(n >= 1);\n    for (i=2; i<=n; i++) {\n        a = b = 1; b = a + b;\n\
    \        ret = b;\n    }\n    return ret;", "  if (n < 2)\n    return 1;\n  else\n\
    \    return fib(n - 2) + fib(n - 1);", "    long previous = 0;\n    long current\
    \ = 1;\n    long next = 1;\n    while (current < n) {\n        next = previous\
    \ + current;\n        previous = current;\n        current = next;\n    }\n  \
    \  return previous;", "    long long F[100];\n    F[0] = 0;\n    F[1] = 1;\n \
    \   for (int i = 2; i < n; i++)\n        F[i] = F[i - 1] + F[i - 2];\n    return\
    \ F[n];", "\tif (n<=1)\n\t\treturn n;\n\telse\n\t\treturn fib(n - 2) + fib(n -\
    \ 1);", "    assert(n>=2);\n    if (n==2)\n        return 1;\n    return fib(n\
    \ - 1) + fib(n - 2);", "    if (n < 2) {\n        return 1;\n    }\n    return\
    \ fib(n - 2) + fib(n - 1);", "    assert(n >= 0 && n < 8000000);\n    if (n <=\
    \ 1)\n        return n;\n    long a = 1;\n    long b = 1;\n    for (long i = 2;\
    \ i <= n; i++) {\n        long temp = a;\n        a = b;\n        b = temp + b;\n\
    \    }\n    return b;", "    long long int f[n+1];\n    f[0] = 0;\n    f[1] =\
    \ 1;\n    for(long long int i = 2; i <= n; i++)\n        f[i] = f[i-1] + f[i-2];\n\
    \    return f[n];", "    if (n <= 1) return 1;\n    if (n == 2) return 1;\n  \
    \  return fib(n - 1) + fib(n - 2);", "  assert(n >= 0);\n  long a = 1, b = 1;\n\
    \  for (int i = 1; i <= n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n\
    \  }\n  return b;", "  // assert(n >= 0) && assert(n <= 31);\n  if (n <= 1) return\
    \ n;\n  if (n <= 2) return 1;\n  return fib(n-1) + fib(n-2);", "  if (n == 0)\
    \ return 0;\n  else if (n == 1) return 1;\n  else return fib(n - 1) + fib(n -\
    \ 2);", "    if (n <= 1) return n;\n    long a = 1;\n    long b = 1;\n    for\
    \ (long i = 2; i <= n; i++) {\n        long temp = a + b;\n        a = b;\n  \
    \      b = temp;\n    }\n    return b;", "    if(n == 0 || n == 1)\n        return\
    \ n;\n    return fib(n - 1) + fib(n - 2);", "    if (n <= 1) return 1;\n    long\
    \ prev = fib(n - 1);\n    long curr = fib(n - 2);\n    return prev + curr;", " \
    \   long sum=1;\n    long curr;\n    for(long i=2;i<=n;i++)\n    {\n        curr=sum;\n\
    \        sum=sum+curr;\n    }\n    return sum;", "    assert(n >= 0);\n    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return\
    \ fib(n - 1) + fib(n - 2);", "    long fibs[2] = {0, 1};\n    long long sum =\
    \ 0;\n    long long a = 0;\n    long long b = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        long long temp = a;\n        a = b;\n        b = temp + fibs[i];\n\
    \        sum += b;\n    }\n    return sum;", "    if(n == 0 || n == 1)\n     \
    \   return n;\n    return fib(n - 1) + fib(n - 2);", "    long int fib0=1, fib1=1;\n\
    \    long int temp;\n    for(int i=1; i<=n; i++)\n    {\n        temp = fib0;\n\
    \        fib0 = fib1;\n        fib1 = temp + fib0;\n    }\n    return fib1;",
  "\tassert(n >= 0);\n\tif (n==0) return 0;\n\tif (n==1) return 1;\n\treturn fib(n\
    \ - 2) + fib(n - 1);", "    if(n<=0 || n>=1) return 0;\n    return fib(n-1)+fib(n-2);",
  "\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n - 1) + fib(n - 2);", "  assert(n >=\
    \ 0 && n < 10);\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2);", "    if(n <= 0) return 0;\n    long f = 0;\n    long g\
    \ = 1;\n    while(n > 1) {\n        long long x = sqrt(g);\n        long long\
    \ next = (x / 2) * g;\n        if(n & 1) g = g + next;\n        else f = f + next;\n\
    \        n--;\n    }\n    return f;", "    long fibArray[5], i, f1, f2, f3;\n\
    \    int arr[100];\n    if(n == 0) return 0;\n    if(n == 1) return 1;\n    if(n\
    \ == 2) return 2;\n    fibArray[0] = 0;\n    fibArray[1] = 1;\n    fibArray[2]\
    \ = 1;\n    fibArray[3] = 2;\n    fibArray[4] = 1;\n    // Scan the numbers from\
    \ fib array for n\n    for(i = 0; i < 5; i++) {\n        f1 = fibArray[i];\n \
    \       for(j = i + 1; j < 5; j++) {\n            f2 = fibArray[j];\n        \
    \    f3 = f1 + f2;\n            fibArray[j] = f3;\n        }\n    }\n    arr[n]\
    \ = fibArray[4];\n    long a = arr[n];\n    return a;", "    if(n<2)\n       \
    \ return n;\n    return fib(--n)+fib(--n);", "    if (n <= 2) return 1;\n    else\
    \ return fib(n - 1) + fib(n - 2);", "    if (n < 2) return n;\n    return fib(n\
    \ - 1) + fib(n - 2);", "    if (n == 0 || n == 1) {\n        return n;\n    }\n\
    \    return fib(n - 1) + fib(n - 2);", "  assert(n >= 0 && n < 4000000);\n  if\
    \ (n < 2) return 1;\n  if (n < 4) return fib(n - 1) + fib(n - 2);\n  return fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4);", "    if (n < 2) return n;\n \
    \   return fib(n - 1) + fib(n - 2);", "    if (n == 1 || n == 2) {\n        return\
    \ 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    if (n <= 1)\n        return\
    \ n;\n    return fib(n - 1) + fib(n - 2);", "  if(n < 2)\n    return n;\n  return\
    \ fib(n-1)+fib(n-2);", "\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n - 1) + fib(n\
    \ - 2);", "\tlong fib1 = 0, fib2 = 1, result;\n\twhile (n--) {\n\t\tresult = fib1\
    \ + fib2;\n\t\tfib2 = fib1;\n\t\tfib1 = result;\n\t}\n\treturn result;", "   \
    \ long a = 0;\n    long b = 1;\n    long i;\n    for(i = 0; i < n; i++)\n    {\n\
    \        long c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;",
  "    assert(n >= 0);\n    if(n == 0) return 0;\n    if(n == 1) return 1;\n    return\
    \ fib(n - 2) + fib(n - 1);", "    long f = 1;\n    long f1 = 1;\n    for (long\
    \ i = 2; i < n; i++) {\n        f = f * i + f1;\n        f1 = f;\n    }\n    return\
    \ f;", "    if (n == 0 || n == 1)\n        return n;\n    return fib(n - 1) +\
    \ fib(n - 2);", "    long a = 0,\n        b = 1,\n        c = a + b,\n       \
    \ d = c;\n    long result = 0;\n    while (n > 1) {\n        result = a;\n   \
    \     a = b;\n        b = c;\n        c = d;\n        d = a + b;\n        n--;\n\
    \    }\n    return result;", "    // Calculate n-th fibonacci number in O(1) time.\n\
    \    if (n == 0 || n == 1)\n        return n;\n    long f1 = fib(n-1) + fib(n-2);\n\
    \    return f1;", "  // Base cases.\n  if (n <= 1) return 1;\n  if (n <= 2) return\
    \ 2;\n  // Recursion.\n  return fib(n - 1) + fib(n - 2);", "  if (n<=1)\n    return\
    \ n;\n  else if (n==2)\n    return 1;\n  else\n    return fib(n - 1) + fib(n -\
    \ 2);", "\t// If n is 0, return 0\n\tif (n == 0) return 0;\n\tlong a = 0;\n\t\
    long b = 1;\n\t// If n is 1, return 1\n\tif (n == 1) return 1;\n\t// If n is more\
    \ than 1, calculate Fibonacci of n-1\n\tfor (int i = 1; i < n; i++) {\n\t\tlong\
    \ tmp = a;\n\t\ta = b;\n\t\tb = tmp + b;\n\t}\n\treturn a;", "    if (n < 2) {\n\
    \        return n;\n    }\n    return fib(n-1) + fib(n-2);", "    if (n == 0 ||\
    \ n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    return fib(n\
    \ - 2) + fib(n - 1);", "\tassert(n >= 0);\n\tif (n == 0 || n == 1)\n\t\treturn\
    \ n;\n\treturn fib(n-1) + fib(n-2);", "  if (n <= 1) return n;\n  return fib(n\
    \ - 1) + fib(n - 2);", "    assert(n >= 1);\n    if (n == 0)\n        return 0;\n\
    \    if (n == 1)\n        return 1;\n    return fib(n - 1) + fib(n - 2);", " \
    \   assert(n >= 0); \n    if (n < 2) return n;\n    if (n == 2) return 1;\n  \
    \  return fib(n - 1) + fib(n - 2);", "    long prev1 = 0, prev2 = 1, curr = 0;\n\
    \    while (n--)\n    {\n        curr += prev1 + prev2;\n        prev2 = prev1;\n\
    \        prev1 = curr;\n    }\n    return prev1;", "\tlong long f[100];\n\tif(n<0)\
    \ return 0;\n\tif(n==0) return 1;\n\tif(n<2) return n;\n\tfib(--n,f,f+1,f+2);\n\
    \treturn f[n];", "    // Initialisation.\n    long a=0, b=1, c=0;\n    // Base\
    \ case.\n    if (n == 0)\n        return 0;\n    // Main loop.\n    while (n >\
    \ 1) {\n        c = a + b;\n        a = b;\n        b = c;\n        n--;\n   \
    \ }\n    return c;", "  if (n == 0 || n == 1)\n    return n;\n  return fib(n -\
    \ 1) + fib(n - 2);", "    assert(n >= 0);\n    if (n == 0 || n == 1) return n;\n\
    \    return fib(n - 1) + fib(n - 2);", "    assert(n>=0);\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 1;\n    long long a0 = 0, a1 = 1, i = 2;\n    while(i\
    \ < n){\n        long long b = a1 + a0; // a1 = 1, a0 = 0, a1 = b, a0 = b - a1,\
    \ i = 2\n        a1 = a0;\n        a0 = b;\n        i++;\n    }\n    return a1;",
  "    int f1 = 0;\n    int f2 = 1;\n    long f = f1 + f2;\n    if(f<0) f = -f;\n\
    \    while(n > 0){\n        long f = f1 + f2;\n        if(f<0) f = -f;\n     \
    \   if(f%2==0){\n            f1 = f2;\n            f2 = f;\n        }\n      \
    \  else{\n            long long x = f1;\n            f1 = f2;\n            f2\
    \ = x;\n        }\n        n -= 1;\n    }\n    return f1;", "\tif (n == 0 || n\
    \ == 1)\n\t\treturn n;\n\treturn fib(n - 1) + fib(n - 2);", "    assert(n >= 0\
    \ && n < 100);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return\
    \ fib(n - 1) + fib(n - 2);", "  if(n < 0) return -1;\n  long long int f[n + 1];\n\
    \  f[0] = 0;\n  f[1] = 1;\n  for(long long int i = 2; i <= n; i++) {\n    long\
    \ long int j = f[i - 1] + f[i - 2];\n    f[i] = j;\n  }\n  return f[n];"]
stop_tokens:
- "\n}"
