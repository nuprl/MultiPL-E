name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ list of integers as an input.\n// it returns True if there are two distinct elements\
  \ in the list that\n// sum to zero, and False otherwise.\nbool pairs_sum_to_zero(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
  \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
completions: ["  int n1 = l.size() - 1;\n  int n2 = l.size() - 2;\n  int sum = 0;\n\
    \  // calculate the sum of the first two elements in the list\n  sum = l[n1] +\
    \ l[n2];\n  // if sum is zero, then the lists are in pairs since they have at\
    \ least two distinct elements\n  // otherwise, the lists are not pairs.\n  if\
    \ (sum == 0) {\n    return true;\n  } else {\n    return false;\n  }", "    //\
    \ Base case: two zero elements are already in the set.\n    if (l.size() == 2\
    \ && l[0]==0 && l[1]==0)\n        return true;\n    // Check how many zeroes can\
    \ we make from l.\n    int count = 0;\n    for (long i : l)\n        if ( i==0\
    \ )\n            count++;\n    // If there are two distinct elements, we already\
    \ know it's zero.\n    if (l.size() == 2 && count == 2)\n        return true;\n\
    \    // If there are no two distinct elements, we have another problem.\n    if\
    \ (l.size() == 2)\n        return false;\n    // We need to check each of the\
    \ pairs of elements to see if there\n    // is any other pair that sum to zero.\n\
    \    for (long i : l) {\n        for (long j : l) {\n            // There can\
    \ be only one pair of elements that sum to zero.\n            if (i == 0 || j\
    \ == 0)\n                continue;\n            // One of these pairs will have\
    \ our two distinct elements.\n            if (i == j && i != 0)\n            \
    \    continue;\n            // One of these pairs will have at least one zero.\n\
    \            if (i == 0 && j != 0)\n                continue;\n            //\
    \ If two zeroes can make one from i, one from j, we have two\n            // distinct\
    \ elements that sum to zero.\n            if (count == 2) {\n                //\
    \ We need to return false because there is no pair of elements\n             \
    \   // that will sum up to zero.\n                return false;\n            }\n\
    \            else if (count == 1) {\n                // We need to return true\
    \ because there is only one pair of\n                // elements that sum to zero.\n\
    \                return true;\n            }\n        }\n    }\n    // If we get\
    \ here, we don't have a pair that sums to zero.\n    return false;", "    long\
    \ long s = 0;\n    for (long i : l) {\n        if (i > 0)\n            s = s +\
    \ i;\n    }\n    // if there exist two numbers in the list that sum to zero, then\n\
    \    // the list contains pairs of distinct integers.\n    // if not, the list\
    \ contains single integer.\n    return (s == 0);", "    int sum = 0;\n    long\
    \ ans = 0;\n    for (int i = 0; i < l.size(); ++i) {\n        sum += l[i];\n \
    \       if (sum == 0) {\n            ans = l[i];\n        }\n    }\n    return\
    \ ans == 0;", "    long sum = 0;\n    for(int i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    for(int i = 0; i < l.size(); i++) {\n        long\
    \ left = sum - l[i];\n        long right = sum + l[i];\n        if(left != right)\
    \ {\n            return false;\n        }\n    }\n    return true;", "    std::vector<bool>\
    \ b(bl.size());\n    \n    for(long i : l) {\n        if(i > 0) {\n          \
    \  for(long j : l) {\n                if(!(b[i]^b[j])) {\n                   \
    \ return true;\n                }\n            }\n        }\n        \n      \
    \  b[i] = true;\n    }\n    return false;", "    // write your code here\n   \
    \ long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n        for (long\
    \ j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n     \
    \           sum++;\n            }\n        }\n    }\n    return sum == 2;", " \
    \   long n = 0;\n    for (long i : l)\n        n += i;\n    if (n < 2)\n     \
    \   return true;\n    long k = 0;\n    for (long i : l)\n        if (i == 0)\n\
    \            k += 1;\n        else\n            if (k != 0)\n                return\
    \ false;\n    return true;", "    long long sum = 0;\n    long long count = 0;\n\
    \    bool bret = false;\n    for (long long val : l) {\n        sum += val;\n\
    \        count += 1;\n        if (sum == 0) {\n            bret = true;\n    \
    \        break;\n        }\n    }\n    return bret;", "    if (l.size() < 2)\n\
    \        return false;\n    long long result = 0;\n    for (long long i = 1; i\
    \ < l.size(); i++) {\n        if (result[i - 1] != l[i - 1] + l[i])\n        \
    \    return false;\n        result += l[i];\n    }\n    return true;", "    //\
    \ The first element in the input list is paired with the first element\n    //\
    \ of the output list. We check this by checking the first two elements\n    //\
    \ of the output list against the first element of the input list.\n    if (l.size()\
    \ >= 2) {\n        int sum = l[0] + l[1];\n        if (sum == 0) {\n         \
    \   return true;\n        }\n    }\n    // We are now in a situation where we\
    \ are checking if l[0] == l[1] and\n    // l[0] > 0, which means we can safely\
    \ add l[1] to l[0]. If l[0] ==\n    // l[1] and l[0] == 0, then l[1] cannot be\
    \ added to l[0] without making the\n    // addition result in zero. So, we check\
    \ if l[0] is 0, and if so we\n    // can safely add l[1] to l[0].\n    if (l.size()\
    \ == 1) {\n        if (l[0] == 0) {\n            return true;\n        }\n   \
    \ }\n    // l[0] cannot be greater than 0, so l[1] is safe.\n    return false;",
  "    long long sum = 0;\n    for (long i : l) {\n        sum += i;\n    }\n    if\
    \ (sum == 0)\n        return false;\n    for (long i : l) {\n        for (long\
    \ j : l) {\n            if (i == j) continue;\n            if (i + j == sum) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;",
  "    // write your code here\n    \n    \n    \n    if(l[1]+l[2] == 0)\n    {\n\
    \        return true;\n    }\n    \n    return false;\n    ", "  std::sort(l.begin(),\
    \ l.end());\n  long s = 0;\n  for (long e : l) {\n    s += e;\n    if (s > 0)\n\
    \      return false;\n  }\n  return true;", "    // Base case\n    if (l.size()\
    \ == 0) {\n        return false;\n    }\n    // Base case 2\n    if (l.size()\
    \ == 1) {\n        return l[0] == 0;\n    }\n    // Sort the list and check for\
    \ pairs that sum to zero\n    std::sort(l.begin(), l.end());\n    for (long i\
    \ = l.size() - 1; i >= 0; i--) {\n        if (l[i] + l[i + 1] == 0) {\n      \
    \      return true;\n        }\n    }\n    return false;", "    long long int\
    \ sum = 0;\n    std::vector<bool> v(l.size(), false);\n    for (long i = 0; i\
    \ < l.size(); i++) {\n        v[i] += l[i] > 0;\n        if (v[i] == v[i + 1])\
    \ {\n            sum += l[i];\n        }\n    }\n    long long int maxSum = -(std::numeric_limits<long\
    \ long int>::max() - 1);\n    for (long i = 0; i < v.size(); i++) {\n        if\
    \ (v[i]) {\n            if (sum > maxSum) {\n                return false;\n \
    \           }\n            maxSum = sum;\n        }\n    }\n    return true;",
  "    // Write your code here\n    int n = l.size();\n    if (n == 0) return true;\n\
    \    long long sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += l[i];\n\
    \    }\n    for (int i = 0; i < n; ++i) {\n        int j = i + 1;\n        while\
    \ (j < n && sum - l[j] == 0) {\n            ++j;\n        }\n        if (j ==\
    \ n) return true;\n    }\n    return false;", "\tint cnt = 0;\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (long & i : l) {\n\t\tif (i != 0) {\n\t\t\tint j = cnt % 2;\n\
    \t\t\tif ((j == 0) || ((j == 1) && i != l[j - 1])) {\n\t\t\t\tcnt += 1;\n\t\t\t\
    \tif (cnt > 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcnt += 1;\n\
    \t\t}\n\t}\n\treturn true;", "  // your code here\n  for (long i = 0; i < l.size();\
    \ ++i) {\n    for (long j = i + 1; j < l.size(); ++j) {\n      if (l[i] + l[j]\
    \ == 0) {\n        return true;\n      }\n    }\n  }\n  return false;", "    int\
    \ n = l.size();\n    int sum = 0;\n    for (int i = 0; i < n; i++)\n        for\
    \ (int j = i + 1; j < n; j++)\n            sum += l[i] + l[j];\n    return sum\
    \ % 2 == 0;", "    int sum = 0;\n    for(int i : l) {\n        sum += i;\n   \
    \ }\n    for(int i : l) {\n        if(i != sum) return false;\n    }\n    return\
    \ true;", "    // Your code here\n    long long int sum = 0;\n    for (long long\
    \ int x: l) {\n        sum += x;\n    }\n    int size = l.size();\n    for (int\
    \ i = 0; i < size; i++) {\n        for (int j = i + 1; j < size; j++) {\n    \
    \        if (l[i] + l[j] == 0) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;", "    int n=l.size();\n    \n    // Initialize\
    \ two sets to compare with\n    std::set<int> set1(l.begin(), l.begin()+(n-1)/2);\n\
    \    std::set<int> set2(l.begin()+(n-1)/2, l.end());\n    \n    // return true\
    \ if both sets are empty\n    if(set1.empty() && set2.empty()) {\n        return\
    \ true;\n    }\n    \n    // return false if one set has any element\n    if(set1.size()==0)\
    \ {\n        return false;\n    }\n    \n    // return false if the other set\
    \ has any element\n    if(set2.size()==0) {\n        return false;\n    }\n  \
    \  \n    // return false if one set has all the elements of another set\n    if(set1.size()!=set2.size())\
    \ {\n        return false;\n    }\n    \n    // return true if both sets have\
    \ at least one element\n    if(set1.size()==1) {\n        return true;\n    }\n\
    \    \n    // return true if one set is subset of another\n    return set1.find(set2.begin())!=set2.end();",
  "    int n = l.size();\n    if (n == 0) return false;\n    std::vector<long> d(2\
    \ * n, 0);\n    bool flag = false;\n    long temp = 0;\n    for (int i = 0; i\
    \ < n; i++) {\n        d[2 * i] += l[i];\n        d[2 * i + 1] += l[i];\n    \
    \    if (d[2 * i + 1] == 0) flag = true;\n        for (int j = i + 1; j < n; j++)\
    \ {\n            temp = d[2 * i] + d[2 * j];\n            d[2 * j] = temp;\n \
    \           if (temp == 0) {\n                flag = true;\n                break;\n\
    \            }\n        }\n    }\n    return flag;", "    long long count = 0;\n\
    \    long long sum = 0;\n    for (long i : l) {\n        if (i > 0)\n        \
    \    sum += i;\n        else\n            count += 1;\n        if (count == 2)\
    \ {\n            if (sum == 0)\n                return true;\n            sum\
    \ -= 1;\n            count = 0;\n        }\n    }\n    return false;", "  long\
    \ long int sum = 0;\n  long long int max_sum = 0;\n  for (long long int i : l)\
    \ {\n    sum += i;\n    max_sum = max_sum < sum ? max_sum : sum;\n  }\n  for (long\
    \ long int i : l) {\n    sum += i;\n    if (sum > max_sum) {\n      return false;\n\
    \    }\n  }\n  return true;", "    // write your code here\n    long long int\
    \ sum=0;\n    for (long i = 0; i < l.size(); ++i) {\n        sum += l[i];\n  \
    \  }\n    long long int sum2=0;\n    for (long i = 0; i < l.size(); ++i) {\n \
    \       sum2 += l[i];\n    }\n    if (sum==0) {\n        if (sum2==0) {\n    \
    \        return true;\n        }\n    }\n    return false;", "    auto begin =\
    \ l.begin();\n    auto end = l.end();\n    auto result = std::accumulate(begin,\
    \ end, false);\n    if (result != 0) {\n        l.erase(std::remove_if(l.begin(),\
    \ l.end(), [result](const long &x) { return result -= x; }), l.end());\n     \
    \   return pairs_sum_to_zero(l);\n    }\n    return false;", "    // Your code\
    \ goes here\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n  \
    \  }\n    long k = 0;\n    long a = l[k++];\n    long b = l[k++];\n    long c\
    \ = l[k++];\n    if (a + b == c && a + c == b) {\n        return true;\n    }\
    \ else {\n        return false;\n    }", "    // write your code here\n\tbool\
    \ result = true;\n    long long sum = 0;\n\tfor (long i = 0; i < l.size(); i++){\n\
    \t\tsum += l[i];\n\t}\n\tif (sum == 0){\n\t\treturn true;\n\t}\n\treturn false;",
  "    // write your code here\n    long x = 0;\n    long y = 0;\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        x += l[i];\n        if (x > y) {\n      \
    \      return true;\n        }\n    }\n    return false;", "  int n = l.size();\n\
    \  int a = 0, b = n - 1, sum = 0;\n  while (a < b) {\n    sum += l[a];\n    if\
    \ (sum > 0) a++;\n    else\n      sum -= l[b];\n    b--;\n  }\n  if (a == b) return\
    \ true;\n  else return false;", "    long long sum = 0;\n    for (long i = 0;\
    \ i < l.size(); i++){\n        sum += l[i];\n    }\n    for (long i = 0; i < l.size();\
    \ i++){\n        for (long j = i + 1; j < l.size(); j++){\n            sum +=\
    \ l[j];\n            if (sum == 0){\n                return true;\n          \
    \  }\n        }\n    }\n    return false;", "  // write your code here\n  long\
    \ sum = 0;\n  for (int i = 0; i < l.size(); i++)\n    for (int j = i + 1; j <\
    \ l.size(); j++)\n      sum += l[i] + l[j];\n  \n  return (sum == 0);", "  assert(l.size()\
    \ > 0);\n  long long int s = 0;\n  long long int p = 0;\n  for (int i = 0; i <\
    \ l.size(); ++i) {\n    s += l[i];\n    if (s > 0) {\n      p += s;\n      s =\
    \ 0;\n    }\n  }\n  if (p == 0 && s == 0) return true;\n  return false;", "  \
    \  int n = l.size();\n    int count = 0;\n    for (int i = 1; i < n; ++i) {\n\
    \        long current = l[i];\n        int j;\n        for (j = 0; j < i; ++j)\
    \ {\n            if (current + l[j] == 0) {\n                count++;\n      \
    \          break;\n            }\n        }\n    }\n    return count == 2;", " \
    \   // Your code here\n    int n = l.size();\n    int count = 0;\n    for (int\
    \ i = 0; i < n - 1; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n      \
    \      if (l[i] + l[j] == 0) {\n                count++;\n            }\n    \
    \    }\n    }\n    if (count == 2) {\n        return true;\n    } else {\n   \
    \     return false;\n    }", "    long long sum = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) sum += l[i];\n    if (sum == 0) return true;\n    for (long i\
    \ = 0; i < l.size(); i++) sum += l[i];\n    return sum > 0;", "  long long sum\
    \ = 0;\n  for (long i = 0; i < l.size(); i++) {\n    sum += l[i];\n    if (sum\
    \ < 0) {\n      return false;\n    }\n  }\n  return true;", "    long long int\
    \ sum = 0;\n    for (long long int x : l)\n    {\n        sum += x;\n    }\n \
    \   \n    for (long long int i = l.size(); i > 1; i--) {\n        for (long long\
    \ int j = i - 2; j >= 0; j--) {\n            if (l[j] + l[j + 1] == sum)\n   \
    \         {\n                return true;\n            }\n        }\n    }\n \
    \   return false;", "    bool ans = false;\n    long a = 0, b = 0;\n    for(int\
    \ i=0; i<l.size(); i++) {\n        a = l[i];\n        for(int j=0; j<l.size();\
    \ j++) {\n            b = l[j];\n            if(a+b == 0) ans = true;\n      \
    \  }\n    }\n    return ans;", "    long long ans = 0;\n    for (long i = 0; i\
    \ < l.size(); i++)\n        ans += l[i];\n    if (ans == 0)\n        return true;\n\
    \    return false;", "  long long ans = 0, i = 1, j;\n  for (; i < (long long)\
    \ l.size(); i++) {\n    for (j = i + 1; j < l.size(); j++) {\n      if (l[i] +\
    \ l[j] == 0) {\n        ans = l[j];\n        break;\n      }\n    }\n  }\n  return\
    \ ans == 0;", "  std::sort(l.begin(), l.end());\n  int s = l.back();\n  for (long\
    \ i = l.size() - 2; i >= 0; --i) {\n    s += l[i];\n    if (s == 0) return true;\n\
    \  }\n  return false;", "    for (auto i : l) {\n        if (l.size() > 1) {\n\
    \            for (auto j : l) {\n                if (i != j && i+j == 0 ) {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "    long long n = l.size();\n    long long count\
    \ = 0;\n    for (long long i = 0; i < n; i++) {\n        long long sum = l[i]\
    \ + l[i];\n        if (sum != 0) {\n            count++;\n            if (count\
    \ > 1) {\n                return false;\n            }\n        }\n    }\n   \
    \ return true;", "    // Your code here\n    \n    // Initialize a flag to check\
    \ whether the pair has been seen before.\n    bool seen[(1 << 30) + 1] = {0};\n\
    \    // Loop through the list and check whether the current number is in the list.\n\
    \    for (size_t i = 0; i < l.size(); i++) {\n        if (!seen[(l[i] << 1) +\
    \ 1]) {\n            seen[(l[i] << 1) + 1] = true;\n        }\n    }\n    // If\
    \ there is no pair in the list that sums to zero, return False\n    return !seen[(l[0]\
    \ << 1) + 1];", "    auto it1 = l.begin();\n    auto it2 = l.begin();\n    while\
    \ (it1 != l.end()) {\n        if (it2 != l.end()) {\n            if (*it1 + *it2\
    \ <= 0) {\n                std::cout << *it1 << \" \";\n                it1 =\
    \ it2++;\n            } else {\n                std::cout << *it2 << \" \";\n\
    \                it2 = it1++;\n            }\n        } else {\n            it1\
    \ = it2++;\n        }\n    }\n    std::cout << std::endl;\n    return false;",
  "    // write your code here\n    long long sum = 0;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n    }\n    long long count = 0;\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (sum - l[i] == 0) {\n            count\
    \ += 1;\n        }\n    }\n    return (count % 2 != 0);", "    long long int sum\
    \ = 0;\n    long long int x = 0;\n    long long int y = 0;\n    for (long long\
    \ int i : l) {\n        sum += i;\n        if (sum == 0) {\n            x = i;\n\
    \        }\n        else {\n            y = sum - x;\n            if (x == y)\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;", "    for (long i = 0; i < l.size(); i += 2) {\n        long a = l[i],\
    \ b = l[i+1];\n        if (a + b != 0 && b + a != 0) {\n            return false;\n\
    \        }\n    }\n    return true;", "    std::sort(l.begin(), l.end());\n  \
    \  size_t n = l.size();\n    int sum = 0;\n    for (size_t i = 0; i < n; ++i)\n\
    \        sum += l[i];\n    if (sum == 0)\n        return false;\n    size_t mid\
    \ = (n + 1) >> 1;\n    for (size_t i = 0; i < mid; ++i) {\n        if (l[i] ==\
    \ 0)\n            continue;\n        int left = l[i - 1];\n        int right =\
    \ l[i];\n        if (left == 0)\n            return sum - right == 0;\n      \
    \  if (right == 0)\n            return sum - left == 0;\n        return sum -\
    \ left + right == 0;\n    }", "    long long s = 0;\n    for (auto i : l)\n  \
    \      s += i;\n    if (s < 0)\n        s = 0;\n    long long t = 0;\n    for\
    \ (auto i : l)\n        t += i;\n    if (t < 0)\n        t = 1;\n    for (long\
    \ long i = 0; i < l.size() - 1; i++) {\n        if (s == t) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    int n = l.size();\n    if\
    \ (n%2 != 0) {\n        return false;\n    }\n    // Sort the list.\n    std::sort(l.begin(),\
    \ l.end());\n    // Initialize two pointers to point at two elements of the list\n\
    \    int left = 0, right = n - 1;\n    while (left < right) {\n        // Check\
    \ if the current elements are equal.\n        if (l[left] + l[right] == 0) {\n\
    \            // The two elements are equal, increment the left pointer.\n    \
    \        left++;\n            // We have checked every element in the list so\
    \ far.\n            // If the current pointer is greater than the right pointer,\n\
    \            // there are no non-zero elements in the list, hence a pair\n   \
    \         // sums to zero.\n            if (left >= right) {\n               \
    \ return true;\n            }\n        } else {\n            // The two elements\
    \ are distinct, hence increment the right pointer.\n            right--;\n   \
    \     }\n    }\n    return false;", "    long long int ans = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        ans += l[i];\n    }\n    return ans <=\
    \ 0;", "    // Your code here\n    int n = l.size();\n    int count = 0;\n   \
    \ long prev_val = 0;\n    for(int i = 0; i < n; ++i){\n        if(prev_val - l[i]\
    \ > 0){\n            if(count == 1)\n                return true;\n          \
    \  else{\n                prev_val = 0;\n                count = 0;\n        \
    \    }\n        }\n        else if(prev_val - l[i] < 0){\n            count ++;\n\
    \        }\n        prev_val = l[i];\n    }\n    return false;", "    if (l.size()\
    \ < 2) {\n        return false;\n    }\n\n    for (long a = l.front(), b = l.back();\
    \ a != b; a++, b--) {\n        if (a+b != 0) {\n            for (int i = 0; i\
    \ < l.size(); i++) {\n                if (l[i] >= a + b && l[i] <= b - a) {\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    return false;", "  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  long long ans = 0;\n  long long last_seen = l[0];\n  for (int i = 1; i < n;\
    \ ++i) {\n    if (l[i] == last_seen) {\n      ans++;\n    } else {\n      if (ans\
    \ == 2) {\n        return true;\n      }\n      ans = 0;\n    }\n    last_seen\
    \ = l[i];\n  }\n  return false;", "    // write your code here\n    long long\
    \ long sum=0;\n    for(long i=0;i<l.size();i++){\n        sum+=l[i];\n    }\n\
    \    for(long i=0;i<l.size();i++){\n        sum-=l[i];\n        if(sum==0)\n \
    \           return true;\n    }\n    return false;", "    int pairs = 0;\n   \
    \ for (long i = 0; i != l.size()-1; i++) {\n        for (int j = i+1; j != l.size();\
    \ j++) {\n            if (l[i] + l[j] == 0) {\n                pairs++;\n    \
    \        }\n        }\n    }\n    if (pairs > 1) {\n        return true;\n   \
    \ }\n    return false;", "    long long sum = 0;\n    for (auto i : l) {\n   \
    \     sum += i;\n    }\n    for (auto i : l) {\n        if (sum == i - 1)\n  \
    \          return true;\n        sum += i;\n    }\n    return false;", "    int\
    \ n = l.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1;\
    \ j < n; j++) {\n            if (l[i] + l[j] == 0)\n                return true;\n\
    \        }\n    }\n    return false;", "    auto first = l.begin();\n    auto\
    \ last = l.end();\n    for (auto it = first; it != last; ++it)\n        for (auto\
    \ it2 = first; it2 != last; ++it2) {\n            assert(it < it2);\n        \
    \    if (*it + it2 < *it2 && *it + it2 <= 0)\n                return true;\n \
    \           if (*it - it2 > *it2 && *it - it2 <= 0)\n                return true;\n\
    \        }\n    return false;", "    long long ans = 0, sum = 0;\n    for (long\
    \ i = 0; i < l.size(); ++i) {\n        sum += l[i];\n        if (sum > 0) {\n\
    \            ans += (sum - 1);\n            sum = 0;\n        }\n        if (ans\
    \ > 0) {\n            return false;\n        }\n    }\n    return true;", "  \
    \  // Write your code here.\n    int len = l.size();\n    long sum = 0;\n    for\
    \ (int i = 0; i < len; i++) {\n        sum += l[i];\n    }\n    bool flag = false;\n\
    \    long temp;\n    for (int i = 0; i < len; i++) {\n        temp = sum;\n  \
    \      sum = l[i];\n        if (sum == 0)\n        {\n            flag = true;\n\
    \            break;\n        }\n    }\n    return flag;", "    std::vector<std::pair<long,\
    \ long>> temp;\n    for (long x : l) {\n        temp.push_back(std::make_pair(x,\
    \ 0));\n    }\n    // sort the array in descending order of first element\n  \
    \  std::sort(temp.begin(), temp.end(), greater<std::pair<long, long> >());\n \
    \   for (long i = 1; i < temp.size(); i++) {\n        if (temp[i].first + temp[i\
    \ - 1].first == 0) {\n            return true;\n        }\n    }\n    return false;",
  "  std::unordered_set<long> s;\n  for (long &i : l)\n    if (s.find(i) == s.end())\
    \ s.insert(i);\n  for (long &i : l)\n    if (s.find(i) == s.end()) return false;\n\
    \  return true;", "    // Write your code here.\n    std::vector<int> arr1(l.size()),\
    \ arr2(l.size());\n    for (int i = 0; i < l.size(); i++) {\n        for (int\
    \ j = 0; j < l.size(); j++) {\n            if (l[i] < l[j]) {\n              \
    \  arr1[i] = l[i];\n                arr2[j] = l[j];\n            }\n        }\n\
    \    }\n    int count = 0;\n    for (int i = 0; i < l.size(); i++) {\n       \
    \ if (arr1[i] == 0) {\n            if (arr2[i] == 0) {\n                count++;\n\
    \            }\n        }\n    }\n    if (count == 2) {\n        return true;\n\
    \    }\n    return false;", "    if (l.size() < 2) {\n        return false;\n\
    \    }\n    long ans = 0;\n    long maxv = *std::max_element(l.begin(), l.end())\
    \ - 1;\n    for (long i = 0; i < maxv; i++) {\n        long cur = i + 1;\n   \
    \     long next = i + 2;\n        if (cur > maxv || next > maxv) {\n         \
    \   break;\n        }\n        if (l[i] != l[next] && l[i] > l[next]) {\n    \
    \        ans += l[cur];\n            if (ans % 2 == 0) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    int n = l.size();\n\
    \    long long int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ l[i];\n    }\n    if (sum % 2 == 1) {\n        return false;\n    }\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n     \
    \       if (l[i] + l[j] == 0) {\n                return true;\n            }\n\
    \        }\n    }\n    return false;", "    long long sum = 0;\n    long long\
    \ ans = 0;\n    for (long long i = 0; i<l.size(); i++) {\n        sum = sum +\
    \ l[i];\n        if (sum == 0) {\n            ans = ans + 1;\n        }\n    }\n\
    \    return ans == 2;", "    long s = 0;\n    long zero = 0;\n    long ans = 0;\n\
    \    \n    for (long i = 0; i < l.size(); i++) {\n        s += l[i];\n       \
    \ zero -= l[i];\n    }\n    \n    if (s == zero) {\n        ans = true;\n    }\n\
    \    return ans;", "    // your code goes here\n    for (int i = 0; i < l.size()-1;\
    \ i++) {\n        for (int j = i+1; j < l.size(); j++) {\n            if (l[i]\
    \ + l[j] == 0) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "  std::set<long> sums;\n  for (long i : l) {\n    if\
    \ (sums.count(i) > 0) {\n      return false;\n    }\n    sums.insert(i);\n  }\n\
    \  return true;", "    // Write your code here\n    for (int i = 0; i < l.size();\
    \ i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i]\
    \ + l[j] == 0) return true;\n        }\n    }\n    return false;", "    int sum\
    \ = 0;\n    long max_sum = std::numeric_limits<long>::max();\n    for (long i\
    \ : l) {\n        sum += i;\n        if (sum == 0)\n            continue;\n  \
    \      if (sum > max_sum) {\n            max_sum = sum;\n            continue;\n\
    \        }\n        std::vector<long>::iterator it = std::find(l.begin(), l.end(),\
    \ sum);\n        if (it == l.end()) {\n            return false;\n        }\n\
    \        if (*it != sum) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    std::unordered_set<long> element;\n    for (long e : l)\n     \
    \   element.insert(e);\n    long sum = 0;\n    for (auto it = element.begin();\
    \ it != element.end(); ++it)\n        sum += *it;\n    if (sum == 0)\n       \
    \ return true;\n    return false;", "    long sum = 0;\n    // iterate over all\
    \ the elements in the list\n    for (long i : l) {\n        // add the current\
    \ element to the sum\n        sum += i;\n        // if sum is zero, return True\n\
    \        if (sum == 0) {\n            return true;\n        }\n    }\n    // sum\
    \ is 0, return False\n    return false;", "    // write your code in here.\n \
    \   long sum;\n    for (long i = 0; i < l.size(); ++i) {\n        for (long j\
    \ = i + 1; j < l.size(); ++j) {\n            sum += l[i] + l[j];\n           \
    \ if (sum == 0)\n                return true;\n        }\n    }\n    return false;",
  "    int N = l.size();\n    for (int i = 0; i < N; i++) {\n        for (int j =\
    \ i + 1; j < N; j++) {\n            if (l[i] + l[j] == 0)\n                return\
    \ true;\n        }\n    }\n    return false;", "    // Write your code here\n\
    \    int a = 0, b = 0, c = 0, x = 0;\n    for (int i = 0; i < l.size(); ++i) {\n\
    \        x = x + l[i];\n        if (x == 0)\n            return true;\n      \
    \  if (x == b)\n            return true;\n        if (x == a + b)\n          \
    \  return false;\n        a = b;\n        b = c;\n        c = x;\n    }\n    return\
    \ false;", "   long long sum = 0;\n   for (int i = 0; i < l.size(); ++i) {\n \
    \     sum += l[i];\n      if (sum == 0) return true;\n   }\n   return false;",
  "    int n = l.size();\n    // iterate through each element of the list\n    for\
    \ (int i = 0; i < n; ++i) {\n        // iterate through each element of the list\n\
    \        for (int j = i + 1; j < n; ++j) {\n            // if the current elements'\
    \ sum to zero\n            // return True\n            if (l[i] + l[j] == 0) {\n\
    \                return true;\n            }\n        }\n    }\n\n    // return\
    \ False as no two elements in the list sum to zero\n    return false;", "    std::vector<int>\
    \ u;\n    std::vector<int> v;\n    int u_index = 0;\n    int v_index = 0;\n  \
    \  for(int i=0; i<l.size(); i++) {\n        if (u[u_index] == l[i]) {\n      \
    \      u[u_index] = l[i];\n            u_index++;\n        } else if (v[v_index]\
    \ == l[i]) {\n            v[v_index] = l[i];\n            v_index++;\n       \
    \ } else {\n            return false;\n        }\n    }\n    return u_index ==\
    \ v.size() && v_index == u.size() - 1;", "    // Two different elements in the\
    \ list may sum to zero if and only if they\n    // are different.\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        for (size_t j = i + 1; j < l.size(); j++)\
    \ {\n            if (l[i] + l[j] == 0) return true;\n        }\n    }\n    return\
    \ false;", "\t// O(n)\n\tlong long n = l.size();\n\tlong long s = l[0];\n\tfor\
    \ (long long i = 0; i < n; i++) {\n\t\ts += l[i];\n\t\tif (s == 0) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "  int n = l.size();\n  int sum = 0;\n\
    \  int i;\n\n  // Loop through list to find if any two elements in list sum to\
    \ zero.\n  for (i = 0; i < n; i++) {\n    // Check if current element is equal\
    \ to next element.\n    if (i != n - 1 - i) {\n      if (l[i] + l[i + 1] == 0)\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;", "    // initialize\
    \ sum array \n    long long sum[6][6] = {{0}};\n    long long count = 0;\n   \
    \ long long sum2[6][6] = {{0}};\n    \n    // traverse the vector and update sum,\
    \ sum2, count\n    for (long i = 0; i < 6; i++) {\n        sum[0][i] = 0;\n  \
    \      sum2[0][i] = 0;\n    }\n    for (long i = 0; i < l.size(); i++) {\n   \
    \     sum[0][l[i]] += 1;\n        sum2[0][l[i]] += 1;\n    }\n\n    for (long\
    \ i = 0; i < 6; i++) {\n        for (long j = 0; j < 6; j++) {\n            count\
    \ += abs(sum[i][j] - sum2[i][j]);\n        }\n    }\n    return count == 0;",
  "    int N;\n    if (l.size() < 2) return false;\n    N = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    long s = 0;\n    for (int i = 0; i < N; i++) {\n        long\
    \ d = l[i] + s;\n        if (d > 0) return false;\n        s = d;\n    }\n   \
    \ return true;", "\tint n = l.size();\n\tint s = 0;\n\t// loop from 0 to n-1 to\
    \ check if there are two distinct elements\n\t// that sum to zero.\n\tfor (int\
    \ i = 0; i < n-1; i++) {\n\t\ts += l[i];\n\t\tif (s == 0) {\n\t\t\t// we have\
    \ found a pair of distinct elements.\n\t\t\t// return True and exit the function.\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;", "    if (l.size() <= 1) {\n\
    \        return false;\n    }\n    // Initialize a dp array\n    int dp[l.size()\
    \ + 1][l.size() + 1];\n    // Initialize dp to zero\n    for (int i = 0; i < l.size();\
    \ i++) {\n        dp[0][i] = 0;\n    }\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        for (int j = 0; j < l.size(); j++) {\n            if (j > i) {\n\
    \                dp[i][j] = (dp[i][j - 1] + l[j] +\n                        l[j\
    \ - 1] - l[i] + l[i - 1]) % 10;\n            } else {\n                dp[i][j]\
    \ = l[j];\n            }\n        }\n    }\n    bool ans = false;\n    for (int\
    \ i = 0; i < l.size() + 1; i++) {\n        for (int j = 0; j < l.size() + 1; j++)\
    \ {\n            if (dp[i][j] == 0) {\n                ans = true;\n         \
    \   }\n        }\n    }\n    return ans;", "    int s = 0;\n    // Iterate over\
    \ each element in the list\n    for (auto i : l) {\n        s += i;\n    }\n \
    \   bool result = (s == 0);\n    return result;", "    \n    // Your code goes\
    \ here\n    \n    return false;", "    int n = l.size();\n    for (int i = 0;\
    \ i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n            if (l[i]\
    \ + l[j] == 0) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "  // your code goes here\n  long sum = 0;\n  for (long\
    \ i : l) {\n    sum += i;\n  }\n\n  if (l.size() % 2 != 0) {\n    return false;\n\
    \  }\n\n  for (long i = 0; i < l.size(); i = i + 2) {\n    if (sum - l[i] < 0)\
    \ {\n      return false;\n    }\n  }\n\n  return true;", "  for (long i = 0; i\
    \ < l.size(); i++) {\n    for (long j = i + 1; j < l.size(); j++) {\n      if\
    \ (l[i] + l[j] == 0)\n        return true;\n    }\n  }\n  return false;", "  \
    \  int n = l.size();\n    long max_sum = std::numeric_limits<long>::min();\n \
    \   long min_sum = std::numeric_limits<long>::max();\n    for (int i = 0; i <\
    \ n; i++) {\n        max_sum = max(max_sum, l[i]);\n        min_sum = min(min_sum,\
    \ l[i]);\n    }\n    for (int i = 0; i < n; i++) {\n        long diff = max_sum\
    \ - min_sum;\n        if (l[i] - diff == 0)\n            return true;\n    }\n\
    \    return false;", "    if(l.size() < 2) {\n        return false;\n    }\n \
    \   std::sort(l.begin(), l.end());\n    long long int n = l.size();\n    long\
    \ long int k = 0;\n    for(int i = 1; i < n; ++i) {\n        if(k == n) {\n  \
    \          return true;\n        }\n        if(l[i] == l[k] + k) {\n         \
    \   k++;\n        } else {\n            return false;\n        }\n    }", "  \
    \  int n = l.size();\n    int zeroes = 0;\n    int count = 0;\n    long int sum\
    \ = 0;\n    // If there are two elements in the list that sum to zero, then\n\
    \    // they are equivalent\n    for (int i = 0; i < n; i++) {\n        sum +=\
    \ l[i];\n        if (sum == 0) {\n            zeroes++;\n        }\n    }\n  \
    \  if (zeroes == 2) {\n        return true;\n    }\n    return false;", "    std::map<long,\
    \ bool> count_map;\n    for (long i : l) {\n        if (count_map.find(i) == count_map.end())\
    \ {\n            count_map[i] = true;\n        } else {\n            count_map[i]\
    \ = false;\n        }\n    }\n    for (long i : l) {\n        if (count_map[i]\
    \ != true) {\n            return false;\n        }\n    }\n    return true;",
  "    long long int sum=0;\n    for (long long int i=0; i<l.size(); i++) {\n    \
    \    sum += l[i];\n        if (sum==0)\n            return true;\n    }\n    return\
    \ false;", "    long sum = 0;\n    long zero = -1;\n    long last_item = INT_MIN;\n\
    \n    for (long i : l) {\n        sum += i;\n        if (sum == zero) {\n    \
    \        return true;\n        }\n\n        if (sum > zero) {\n            if\
    \ (sum == last_item) {\n                return false;\n            }\n       \
    \     last_item = sum;\n        }\n\n        zero = -1;\n    }\n    return false;",
  "    assert(l.size() >= 2);\n    long mid = l.size() / 2;\n    int left_sum = 0;\n\
    \    int right_sum = 0;\n    for (int i = 0; i < mid; i++)\n        left_sum +=\
    \ l[i];\n    for (int i = mid; i < l.size(); i++)\n        right_sum += l[i];\n\
    \    if (left_sum == right_sum)\n        return false;\n    else if (left_sum\
    \ + right_sum == 0)\n        return true;\n    else\n        return pairs_sum_to_zero(l);",
  "    for (long i = 0; i < l.size(); i++) {\n        // j is the index of the first\
    \ element that doesn't sum to zero.\n        // The next j elements are the pairs\
    \ that sum to zero.\n        long j = 0;\n        while (j < l.size() && (l[j]\
    \ + l[j + 1]) == 0) {\n            j++;\n        }\n        if (j == l.size()\
    \ || l[j] != 0) {\n            // If j isn't at the end of the list, there aren't\
    \ any pairs\n            // that sum to zero.\n            return false;\n   \
    \     }\n        // j has reached its final element; there are some pairs\n  \
    \      // that sum to zero.\n        return true;\n    }", "    int counter =\
    \ 0;\n    // Traverse in the input list\n    for (long i : l) {\n        // Traverse\
    \ in the second list\n        for (long j : l) {\n            // Check for a match\
    \ of i+j to zero\n            if (i + j == 0)\n                // if match, increment\
    \ counter\n                counter++;\n        }\n    }\n    // return true if\
    \ two elements in the list have same sum of value\n    return (counter == 2);",
  "    long sum = 0;\n    for (long &num : l) {\n        sum += num;\n    }\n    if\
    \ (sum % 2 == 1) {\n        return false;\n    } else {\n        long num1 = l.front();\n\
    \        long num2 = l.back();\n        while (l.front() + l.back() != 0) {\n\
    \            l.push_back(0);\n        }\n        l.insert(l.begin(), num1);\n\
    \        l.insert(l.end(), num2);\n        return true;\n    }", "    // Write\
    \ your code here.\n    long long int n = 0;\n    for (long long int i = 0; i <\
    \ l.size(); i++) {\n        n += l[i];\n        if (n < 0) return false;\n   \
    \ }\n    return ((l.size() - 1) * (l.size() - 1)) == n;", "    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum % 2 ==\
    \ 0) {\n        return true;\n    } else {\n        return false;\n    }", "\t\
    // We need to count the number of pairs we are checking.\n\tlong pair_count =\
    \ 0;\n\t// Iterate through each element in the list.\n\tfor (long i = 0; i < l.size();\
    \ i++) {\n\t\t// Check if this pair (current index + element) exists\n\t\t// in\
    \ the list.\n\t\tif (pair_count > 0 && i + pair_count < l.size()) {\n\t\t\tlong\
    \ tmp_i = i + pair_count;\n\t\t\tlong tmp_j = i;\n\t\t\t// Check if the sum of\
    \ (current index + element)\n\t\t\t// is equal to the next element in the list.\n\
    \t\t\tif (l[tmp_i] + l[tmp_j] == 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    \t// Add element to the list of elements to check.\n\t\tpair_count += l[i];\n\t\
    }\n\treturn false;", "    std::set<std::pair<long, long> > s;\n    for (long i\
    \ : l) s.insert({i, 0});\n    for (long i : l) {\n        if (s.find({i, i - i}))\
    \ return true;\n        s.erase({i, i - i});\n    }\n    return false;", "   \
    \ // code here\n    int sum = 0;\n    long max = 0;\n    for (size_t i = 0; i\
    \ < l.size(); i++) {\n        sum += l[i];\n        if (sum > max) {\n       \
    \     max = sum;\n        }\n    }\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        sum += l[i];\n        if (sum == max) {\n            return true;\n\
    \        }\n    }\n    return false;", "  long long int sum = 0;\n  // iterate\
    \ through each element\n  for (long i = 0; i < l.size(); i++) {\n    // if an\
    \ element exists that sum to zero, then return False\n    if (l.at(i) == 0)\n\
    \      return false;\n    else {\n      // otherwise, sum it up and store it in\
    \ sum\n      sum += l.at(i);\n      // if the sum is zero, then return True\n\
    \      if (sum == 0)\n        return true;\n    }\n  }\n  // if the last element\
    \ doesn't sum to zero, then return false\n  return false;", "    long long count\
    \ = 0;\n    for (long long i : l) {\n        for (long long j : l) {\n       \
    \     count += i + j;\n            if (count == 0) return true;\n        }\n \
    \   }\n    return false;", "    long long ans = 0;\n    std::vector<bool> visited(l.size(),\
    \ false);\n    for(int i = 1; i < l.size(); ++i) {\n        long long curr = l[i]\
    \ - l[i - 1];\n        ans += curr;\n        if(visited[i - 1] == false && visited[i]\
    \ == false) {\n            visited[i - 1] = true;\n            visited[i] = true;\n\
    \            ans = ans - curr;\n        }\n    }\n    return ans == 0;", "  if\
    \ (l.size() < 2) {\n    return false;\n  }\n  long a = l[0], b = l[1], c = l[2],\
    \ d = l[3];\n  long sum = a;\n  long ans = a + b;\n  a += c;\n  b += d;\n  c +=\
    \ sum;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c +=\
    \ d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n\
    \  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d\
    \ += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d +=\
    \ ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n\
    \  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans\
    \ += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans +=\
    \ c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n\
    \  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c\
    \ += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c +=\
    \ d;\n  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n\
    \  d += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d\
    \ += ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n  c += d;\n  d +=\
    \ ans;\n  ans += c;\n  c += d;\n  d += ans;\n  ans += c;\n", "    long sum = 0;\n\
    \    for (long num : l)\n        sum += num;\n\n    long ans = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        long num = l[i];\n        for (long j =\
    \ i + 1; j < l.size(); j++)\n            if (abs(num - l[j]))\n              \
    \  ans = 1;\n    }\n    return ans == 0;", "    // Your code here\n    auto it\
    \ = l.begin();\n    auto last = l.end() - 1;\n    long sum = 0;\n    bool found\
    \ = false;\n\n    while (it != last) {\n        if (*it == 0) {\n            sum\
    \ = 0;\n            found = true;\n        } else {\n            sum += *it;\n\
    \        }\n        ++it;\n    }\n    if (found) {\n        return sum != 0;\n\
    \    }\n    return false;", "    int sum = 0;\n    for (long i = 0; i < l.size();\
    \ i++)\n        sum += l[i];\n    if (l.size() == 0) {\n        return false;\n\
    \    }\n    int zero = 0;\n    for (int i = 0; i < l.size(); i++) {\n        if\
    \ (l[i] == 0 && i != 0) {\n            zero = 0;\n        }\n        else if (l[i]\
    \ == 0 && i == 0) {\n            zero++;\n        }\n        else {\n        \
    \    return false;\n        }\n    }\n    return zero == 2;", "    // write your\
    \ code here\n    if (l.size() < 2) {\n        return false;\n    }\n    auto it\
    \ = l.begin();\n    auto it_end = l.end();\n    std::unordered_set<long> seen;\n\
    \    while ( it != it_end ) {\n        long num = *it;\n        if (seen.find(num)\
    \ != seen.end()) {\n            return false;\n        }\n        seen.insert(num);\n\
    \        it++;\n    }\n    return true;", "    // write your code here\n    long\
    \ long s = 0;\n    bool flag = true;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        if (i == 0 || i == (l.size() - 1))\n            break;\n        if (l[i\
    \ - 1] + l[i] + l[i + 1] != 0) {\n            s = l[i - 1] + l[i] + l[i + 1];\n\
    \            flag = false;\n            break;\n        }\n    }\n    if (flag)\
    \ {\n        return flag;\n    } else {\n        return flag;\n    }", "  // write\
    \ your code here\n  \n  int sizeOfArray = l.size();\n  for (int i = 0; i < sizeOfArray\
    \ - 1; i++) {\n    int j = i + 1;\n    while (j < sizeOfArray) {\n      long val\
    \ = l[i] + l[j];\n      if (val == 0)\n        return true;\n      else if (val\
    \ != 0)\n        return false;\n      else\n        j++;\n    }\n  }\n  return\
    \ false;", "    long long sum = 0;\n    // find min and max elements in the list\n\
    \    long long min_element, max_element;\n    for(int i=0; i < l.size(); ++i)\
    \ {\n        if(l[i] > max_element) max_element = l[i];\n        if(l[i] < min_element)\
    \ min_element = l[i];\n    }\n    \n    // if the list's min and max are equal,\
    \ it doesn't sum to zero\n    if(min_element == max_element)\n        return false;\n\
    \    \n    // for each element in the list, subtract the min element and \n  \
    \  // the max element, and if the result is non-zero, return true\n    for(int\
    \ i=0; i < l.size(); ++i) {\n        sum += l[i] - min_element;\n        if(sum\
    \ > 0) {\n            return true;\n        }\n    }\n    return false;", "  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() < 2) {\n    return false;\n  }\n  int left_sum = 0;\n\
    \  int right_sum = 0;\n  for (auto i = l.begin(); i != l.end() - 1; ++i) {\n \
    \   left_sum += *i;\n    right_sum += *(i + 1);\n  }\n  if (left_sum != right_sum)\
    \ {\n    return false;\n  }\n  int center = l.size() / 2;\n  int left_count =\
    \ 0;\n  int right_count = 0;\n  for (auto i = l.begin(); i != l.end() - 1; ++i)\
    \ {\n    if (*i == center) {\n      left_count++;\n    } else {\n      right_count++;\n\
    \    }\n  }\n  if (left_count > right_count) {\n    return true;\n  } else {\n\
    \    return false;\n  }", "    int n = l.size();\n    int zeros = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n     \
    \       if (l[i] + l[j] == 0) {\n                return true;\n            }\n\
    \        }\n        zeros++;\n    }\n    return false; // if all elements are\
    \ zero, there are no two distinct elements.", "    // initialize sum variable\n\
    \    long long sum = 0;\n    // iterate through the list\n    for (long i = 0;\
    \ i < l.size(); ++i) {\n        // add current element to sum\n        sum +=\
    \ l[i];\n        // if sum is zero, return true\n        if (sum == 0) return\
    \ true;\n        // otherwise, subtract current element from sum\n        sum\
    \ -= l[i];\n        // if sum is zero, return false\n        if (sum == 0) return\
    \ false;\n    }\n    // if we reach here, then sum is zero\n    return false;",
  "  long long two = 0;\n  long long three = 0;\n  long long four = 0;\n  long long\
    \ twoThree = 0;\n  for (long long i = 0; i < l.size(); i++) {\n    if (l[i] ==\
    \ 0) {\n      return false;\n    }\n    if (l[i] > two) {\n      two = l[i];\n\
    \    }\n    if (l[i] == two && l[i] > three) {\n      twoThree = l[i];\n    }\n\
    \    if (l[i] > three && l[i] > four) {\n      three = l[i];\n      four = twoThree;\n\
    \    }\n  }\n  return true;", "    long long s = 0;\n    for (int i = 0; i < l.size()\
    \ - 1; i++) {\n        s = s + l[i] + l[i + 1];\n        if (s == 0) {\n     \
    \       return true;\n        }\n    }\n    return false;", "    // Complete this\
    \ function\n    \n    \n    ", "    std::sort(l.begin(), l.end());\n    for (long\
    \ i=0;i<l.size()-1;i++) {\n        if (l[i]+l[i+1] == 0)\n            return true;\n\
    \    }\n    return false;", "    // Your code here\n    return 0;", "    // Write\
    \ your code here.\n    for(auto i=l.begin();i<l.end();i++)\n    {\n        for(auto\
    \ j=i;j<l.end();j++)\n        {\n            if(*i==*j)\n            {\n     \
    \           return false;\n            }\n        }\n    }\n    return true;",
  "    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for (int j =\
    \ i + 1; j < n; j++) {\n            assert(l[i] + l[j] == 0);\n        }\n   \
    \ }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n\
    \            if (i == j) {\n                continue;\n            }\n       \
    \     if (l[i] + l[j] != 0) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;", "    int n = l.size();\n    long long sum\
    \ = 0;\n    for (int i = 0; i < n; ++i)\n        sum += l[i];\n    long long count\
    \ = 0;\n    for (int i = 0; i < n; ++i) {\n        if (sum == l[i] && i != n -\
    \ 1)\n            ++count;\n    }\n    return (count % 2) == 0;", "    // Write\
    \ your code here.\n    long long s = 0;\n    bool flag = 0;\n    for (int i =\
    \ 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n\
    \            s += l[i];\n            if (s == 0) {\n                flag = 1;\n\
    \                break;\n            }\n        }\n    }\n    return flag;", " \
    \ // write your code here\n  std::set<long> v;\n  std::unordered_set<long> u;\n\
    \  for (long i : l)\n  {\n    if (u.find(i) == u.end())\n    {\n      u.insert(i);\n\
    \      v.insert(i);\n    }\n    else\n    {\n      if (v.find(i) == v.end())\n\
    \      {\n        if (l.find(i) != l.end())\n        {\n          v.insert(i);\n\
    \          u.insert(i);\n        }\n      }\n    }\n  }\n  return (v.size() ==\
    \ 2);", "    // write your code here\n    auto it = l.begin();\n    auto prev\
    \ = std::prev(l.end());\n    for (; it != prev; ++it, ++prev) {\n        long\
    \ s = *prev + *it;\n        if (s == 0) return true;\n    }\n    return false;",
  "    std::vector<long> t;\n    t.reserve(l.size());\n    for (long &x: l)\n    \
    \    if (x.size() >= 2)\n            t.push_back(x);\n    for (long &x: l)\n \
    \       for (long &y: l)\n            if (x != y && t.find(x + y) != t.end())\n\
    \                return false;\n    return true;", "    assert(l.size() > 1);\n\
    \    std::vector<std::pair<long, long> > pairs(l.size());\n    long s = l.front();\n\
    \    long b = l.back();\n    for (long i = 1; i < l.size(); i++) {\n        pairs[i].first\
    \ = pairs[i-1].first + s;\n        pairs[i].second = pairs[i-1].second + b;\n\
    \        s = pairs[i].first;\n        b = pairs[i].second;\n    }\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (pairs[i].first == 0) {\n          \
    \  return false;\n        }\n    }\n    return true;", "\tstd::pair<long, long>\
    \ first = std::make_pair(0, 0);\n\tstd::pair<long, long> second = std::make_pair(0,\
    \ 0);\n\n\tlong s = 0;\n\tfor (long val : l) {\n\t\ts += val;\n\t}\n\tif (s ==\
    \ 0) {\n\t\treturn false;\n\t}\n\n\tlong l1 = 0, l2 = 0, i;\n\tfor (i = 0; i <\
    \ l.size(); i++) {\n\t\tl1 += l[i];\n\t\tl2 += l[i];\n\t\tif (l1 == l2) {\n\t\t\
    \treturn true;\n\t\t}\n\t}\n\treturn false;", "  for (int i = 0; i < l.size();\
    \ i++) {\n    for (int j = i + 1; j < l.size(); j++) {\n      if (l[i] + l[j]\
    \ == 0)\n        return true;\n    }\n  }\n  return false;", "    long long long\
    \ zero = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        for (long\
    \ long j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n\
    \                return true;\n            }\n            if (l[i] + l[j] > zero)\
    \ {\n                zero = l[i] + l[j];\n            }\n        }\n    }\n  \
    \  return false;", "    // write your code in here.\n    long n = l.size();\n\
    \    long long ans = 0;\n    for (long i = 0; i < n; ++i) {\n        long j;\n\
    \        for (j = i+1; j < n; ++j) {\n            long s = 0;\n            s ^=\
    \ l[i] + l[j];\n            if (s == 0)\n                ans ^= 1;\n        }\n\
    \    }\n    return (ans == 0);", "    int N = l.size();\n    int dp[N];\n    memset(dp,\
    \ -1, sizeof(dp));\n    // initialize dp array to 0\n    for (int i = 0; i < N;\
    \ ++i)\n        dp[i] = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int\
    \ j = i + 1; j < N; ++j) {\n            if (l[i] + l[j] <= 0)\n              \
    \  break;\n            dp[i] += l[j];\n            dp[j] += l[i];\n        }\n\
    \    }\n    // if there are two distinct elements that sum to 0\n    // return\
    \ true, else false\n    if (dp[N - 2] >= 0)\n        return true;\n    return\
    \ false;", "\tlong sum = 0;\n\tfor (int i = 0; i < l.size(); ++i) {\n\t\tsum +=\
    \ l[i];\n\t\tauto it = (sum > 0);\n\t\tif (it == pairs(l, sum)) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;", "    int len = l.size();\n    int pairsum\
    \ = 0;\n    for (int i = 0; i < len - 1; i++) {\n        pairsum += l[i] + l[i+1];\n\
    \    }\n    return pairsum == 0;", "  std::vector<pair<long, long> > v(l.size());\n\
    \  for (size_t i = 0; i != l.size(); ++i) {\n    v[i] = {l[i], i};\n  }\n  sort(v.begin(),\
    \ v.end());\n  v.erase(unique(v.begin(), v.end()), v.end());\n  for (size_t i\
    \ = 0; i != v.size(); ++i) {\n    for (size_t j = i+1; j < v.size(); ++j) {\n\
    \      if (v[i].first + v[j].first == 0) return false;\n    }\n  }\n  return true;",
  "    long sum = 0;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n     \
    \   sum += *it;\n        if (sum == 0) {\n            return true;\n        }\n\
    \    }\n    return false;", "\tstd::map<long, bool> m; // map stores the elements\
    \ mapped to true\n\tfor (long i : l) {\n\t\tif (m[i] != true) {\n\t\t\tm[i] =\
    \ true;\n\t\t\tfor (int j = i + 1; j < l.size(); j++) {\n\t\t\t\tif (m[j] == true)\
    \ {\n\t\t\t\t\tm[j] = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn m[l.back()];", "  long long sum = 0;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    sum += l[i];\n    if (sum != 0) {\n      return true;\n   \
    \ }\n  }\n  return false;", "    long long ans = 0;\n    long long cnt = 0;\n\
    \    // for each pair sum them and add 1 if it sums to zero\n    // then if the\
    \ sum is zero then it is a valid pair\n    for (long i = 0; i < l.size(); ++i)\
    \ {\n        for (long j = i + 1; j < l.size(); ++j) {\n            ans += l[i]\
    \ + l[j];\n            if (ans == 0) cnt++;\n            if (cnt > 2) return true;\n\
    \        }\n    }\n    // if the cnt reaches 2 or 3 (or more), it cannot be the\
    \ case\n    return false;", "    long long sum = 0;\n    for (long i = 0; i <\
    \ l.size(); i++)\n        sum += l[i];\n    if (sum == 0)\n        return true;\n\
    \    return false;", "    int N = l.size();\n    for (int i = 0; i < N - 1; i++)\
    \ {\n        for (int j = i + 1; j < N; j++) {\n            if (l[i] + l[j] ==\
    \ 0)\n                return true;\n        }\n    }\n    return false;", "  //\
    \ the variable 'i' counts how many times an element has been seen so far\n  //\
    \ the variable 'k' counts how many times we've seen each element\n  for (int i\
    \ = 0; i < l.size(); ++i) {\n    // k tells us how many times we've seen this\
    \ element\n    // if we've seen it once, we don't need to count it again\n   \
    \ int k = 0;\n    // j tells us how many times we've seen the same element as\
    \ i\n    int j = 0;\n    // loop through all pairs that add up to i\n    // we\
    \ stop when we encounter a pair that adds up to zero\n    while (j < (l.size()\
    \ - i) && k < (l.size() - i)) {\n      // if either element adds up to i then\
    \ we can stop searching\n      if (l[j] + l[k] == i) {\n        return true;\n\
    \      }\n      // if we haven't seen j before, then add it to the count of k\n\
    \      else if (j == 0) {\n        k++;\n      }\n      // otherwise increment\
    \ the count of j and update k\n      else {\n        j++;\n        k++;\n    \
    \  }\n    }\n  }\n  return false;", "    int n = l.size();\n    long long ans\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        long long sum = 0;\n      \
    \  for (int j = i + 1; j < n; j++) {\n            sum += l[j];\n            if\
    \ (sum == 0) ans = 1;\n        }\n    }\n    return ans == 0;", "    long a =\
    \ l[0];\n    long b = l[1];\n    long c = 0;\n    for (long i = 0; i < l.size()\
    \ - 1; i++) {\n        if (a+l[i+1] == b) c++;\n        else if (a-l[i+1] == b)\
    \ c--;\n        else return false;\n        a = a + l[i+1];\n    }\n    return\
    \ c == 0;", "    int n = l.size();\n    int s = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        s += l[i];\n    }\n    // check if all the elements in the list\
    \ sum to zero\n    if (s == 0)\n        return true;\n    // check if all elements\
    \ in the list are zero\n    for (int i = 0; i < n; i++) {\n        if (l[i] ==\
    \ 0)\n            return false;\n    }\n    return false;", "  std::sort(l.begin(),\
    \ l.end());\n  std::reverse(l.begin(), l.end());\n  long ans = l[0];\n  long sum\
    \ = l[0] + l[1];\n  for (int i = 2; i < l.size(); ++i) {\n    if (l[i] - l[i -\
    \ 2] != sum)\n      return false;\n    sum += l[i];\n    ans = max(ans, l[i]);\n\
    \  }\n  return ans == 0;", "    if (l.size() < 2)\n        return false;\n   \
    \ // find two distinct elements.\n    int i, j;\n    int s = l[0] + l[1];\n  \
    \  for (i = 2; i < l.size(); i++)\n        s += l[i];\n    if (s == 0)\n     \
    \   return true;\n    // sum up to the first distinct element.\n    j = l[0];\n\
    \    for (i = 0; i < l.size(); i++) {\n        if (l[i] < j)\n            return\
    \ false;\n        j += l[i];\n    }\n    return true;", "    // TODO : Write your\
    \ code here\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        sum += l[i];\n    }\n    int count = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        if (l[i] == 0) {\n            count++;\n        }\n\
    \    }\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (l[j] ==\
    \ 0) {\n            sum += l[i];\n            count++;\n        } else {\n   \
    \         j++;\n        }\n    }\n    return count % 2 == 1;", "    // Your code\
    \ goes here\n    int m = l.size();\n    long temp = 0;\n    for (int i = 0; i\
    \ < m; ++i) {\n        temp = temp + l[i];\n    }\n    int cnt = 0;\n    bool\
    \ ans = false;\n    for (int i = 0; i < m; ++i) {\n        if (i != cnt && temp\
    \ == 0) \n            ans = true;\n        if (temp != 0) {\n            if (temp\
    \ == l[i]) {\n                cnt++;\n            }\n        }\n        temp =\
    \ 0;\n    }\n    return ans;", "    int n = (int) l.size();\n    std::vector<std::pair<long,\
    \ long> > v(n);\n    for (int i = 0; i < n; i++)\n        v[i] = std::make_pair(l[i],\
    \ 0);\n    for (int i = 0; i < n - 1; i++)\n        for (int j = i + 1; j < n;\
    \ j++)\n            if (v[i].first + v[j].first == 0)\n                v[j].second\
    \ += v[i].second;\n    return (std::find(v.begin(), v.end(), std::make_pair(0,\
    \ 0)) == v.end());", "    int len = (int) l.size();\n    // initialize sum to\
    \ zero\n    long sum = 0;\n    for (int i = 0; i < len; i++) {\n        sum +=\
    \ l[i];\n        if (sum == 0)\n            return true;\n    }\n    return false;",
  "    long s = 0;\n    for (long i : l) {\n        s += i;\n    }\n    if (s == 0)\n\
    \        return true;\n    for (long i : l) {\n        if (i != 0)\n         \
    \   return false;\n    }\n    return true;", "    // your code goes here\n   \
    \ int n = l.size();\n    // Create a Hash Map\n    std::unordered_map<int, int>\
    \ mp;\n    for (int i = 0; i < n; ++i) {\n        mp[l[i]]++;\n    }\n    // If\
    \ there are two distinct elements that sum to zero, return True\n    for (int\
    \ i = 0; i < n; ++i) {\n        if (mp[l[i]] > 1) {\n            return false;\n\
    \        }\n    }\n    // If there are no two distinct elements that sum to zero,\
    \ return False\n    return true;", "  long int sum = 0;\n  for (auto i : l) {\n\
    \    sum += i;\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return\
    \ true;", "    long sum = 0;\n    long long count = 0;\n    for (size_t i = 0;\
    \ i < l.size(); i++) {\n        for (size_t j = i + 1; j < l.size(); j++) {\n\
    \            sum += l[i] + l[j];\n            if (sum == 0) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count == 2;", '    //
    code here', "    long long sum = 0;\n    for (int i = 0; i < l.size(); i++) {\n\
    \        sum += l[i];\n        if (sum == 0) {\n            return true;\n   \
    \     }\n    }\n    return false;", "    long long sum = l.back();\n    // loop\
    \ through each element in the list\n    for (auto it = l.begin() + 1; it < l.end();\
    \ ++it) {\n        // if the current element and the next element sum to zero\n\
    \        // then return true\n        if (sum == (*it + l.back())) {\n       \
    \     return true;\n        }\n        // if the current element and the next\
    \ element do not sum to zero\n        // then add it to the sum\n        sum +=\
    \ *it;\n    }\n    // if we are here then no two distinct elements in l sum to\
    \ zero.\n    return false;", "    int n1=l.size();\n    if (n1<2) return false;\n\
    \    int j=n1-1,i=n1-1,count=0;\n    while (j>=0&&i<n1) {\n        if (l[j]+l[i]==0)\
    \ {\n            if (count==0) return false;\n            else count--;\n    \
    \    }\n        else if (l[j]+l[i]<0) {\n            count++;\n        }\n   \
    \     else if (l[j]+l[i]>0) {\n            count--;\n        }\n        else {\n\
    \            if (count==0) return false;\n            else count--;\n        }\n\
    \        j--;\n        i--;\n    }\n    return count==0;", "    std::vector<long>\
    \ v;\n    std::vector<long> w;\n    for (long e : l) {\n        v.push_back(e);\n\
    \    }\n    sort(v.begin(), v.end());\n    for (long i = v.size() - 1; i >= 1;\
    \ i--) {\n        long y = v[i];\n        for (long j = i + 1; j < v.size(); j++)\
    \ {\n            long z = v[j];\n            if (z + y == 0) {\n             \
    \   w.push_back(z);\n                w.push_back(y);\n            }\n        }\n\
    \    }\n    return w.size() == 2;", "    int zero = 0;\n    int count = 0;\n \
    \   for (auto i = l.begin(); i != l.end(); ++i) {\n        if (*i == 0) {\n  \
    \          zero = zero + 1;\n        }\n        else {\n            count = count\
    \ + 1;\n        }\n    }\n    if (zero != 1 && count != l.size()) {\n        return\
    \ false;\n    }\n    return true;", "    long sum = 0;\n    for (long i : l) {\n\
    \        sum += i;\n    }\n    if (sum % 2 == 0) {\n        return true;\n   \
    \ }\n    return false;", "  long long sum = 0;\n  for (long i = 0; i < l.size();\
    \ i++) {\n    sum += l[i];\n    if (sum == 0) return true;\n  }\n  return false;",
  "    // Create a set S of all the positive elements of l.\n    std::set<long> s(l.begin(),\
    \ l.end());\n    // Create a dictionary D that maps each element of l to its index\n\
    \    // in S.\n    std::vector<int> d(l.size());\n    for(int i = 0; i < l.size();\
    \ ++i) d[i] = i;\n    // Iterate through the pairs (d[i],d[pairs[i]]), summing\
    \ up the values\n    // in the two lists.\n    for(int i = 1; i < l.size(); ++i)\n\
    \    {\n        long t = s[d[i]] + s[d[i-1]];\n        if(t > 0) s.erase(t);\n\
    \    }\n    return s.empty();", "    int n = (int)l.size();\n    long sum = 0;\n\
    \    for (long i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    // pairs\
    \ is a list of pairs that sum to zero.\n    std::vector<std::pair<long, long>\
    \ > pairs;\n    pairs.push_back(make_pair(0, l[0]));\n    pairs.push_back(make_pair(0,\
    \ 0));\n    for (int i = 1; i < n; i++) {\n        long l = pairs[i - 1].w;\n\
    \        long r = pairs[i - 2].w;\n        if (sum - l == 0 || sum - r == 0) {\n\
    \            pairs.push_back(make_pair(l, r));\n        }\n    }\n    return pairs.size()\
    \ == 2;", "    if (l.size() < 2) return false;\n    long long sum = 0;\n    long\
    \ long count = 0;\n    for (long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \        count++;\n    }\n    if (sum != 0 && count == 2) {\n        return true;\n\
    \    }\n    return false;", "  for (long i = 0; i < l.size() - 1; i++) {\n   \
    \ for (long j = i + 1; j < l.size(); j++) {\n      if (l[i] + l[j] == 0)\n   \
    \     return true;\n    }\n  }\n  return false;", "    auto end = l.end();\n \
    \   std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != end; ++it)\
    \ {\n        long n = *it;\n        for(auto j = it+1; j < l.end(); ++j)\n   \
    \         n += *j;\n        if (n < 0) return false;\n        while(it != l.begin())\
    \ {\n            if (*it == 0)\n                return false;\n            else\
    \ if (n == 0) {\n                *it = -1;\n                break;\n         \
    \   }\n            else if (*it != -1)\n                n -= *it;\n          \
    \  ++it;\n        }\n    }\n    return true;", "  std::vector<std::pair<long,\
    \ long>> res;\n  std::sort(l.begin(), l.end());\n  for (int i = 1; i < l.size()\
    \ - 1; ++i) {\n    if (l[i] == l[i - 1]) {\n      res.push_back(std::make_pair(l[i],\
    \ l[i - 1]));\n    }\n  }\n  std::sort(res.begin(), res.end());\n  return res.size()\
    \ == 1;", "  std::sort(l.begin(), l.end());\n  long long sum = 0;\n  for (auto\
    \ el : l) {\n    sum += el;\n  }\n  for (auto i : l) {\n    for (auto j : l) {\n\
    \      if (i != j && sum == 0) return true;\n      if (i != j && sum != 0) return\
    \ false;\n    }\n  }\n  return false;", "    long long res = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        res += l[i];\n        if (res == 0) {\n\
    \            return true;\n        }\n    }\n    return false;", "    int n =\
    \ l.size();\n    if (n == 0) return true;\n    long prev = l[0], curr = l[0],\
    \ sum = 0;\n    for (int i = 1; i < n; i++) {\n        sum += prev;\n        if\
    \ (sum == curr) \n            return false;\n        prev = curr;\n        curr\
    \ = l[i];\n    }\n    return true;", "    int sz = l.size();\n    for (int i =\
    \ 1; i <= sz; i++) {\n        int j = i - 1;\n        while (j > 0 && l[j] + l[j\
    \ - 1] != 0) {\n            l[j] += l[j - 1];\n            l[j - 1] = 0;\n   \
    \         j--;\n        }\n    }\n    for (long & it : l) {\n        if (it !=\
    \ 0) return false;\n    }\n    return true;", "    assert(l.size() > 1);\n   \
    \ long sum = 0;\n    for (long i: l) sum += i;\n    if (sum == 0) return true;\n\
    \    bool res = false;\n    for (long i: l) if (sum - i == 0) res = true;\n  \
    \  return res;", "    long long int sum = 0;\n    for(auto i : l) {\n        sum\
    \ += i;\n    }\n    if(sum == 0) {\n        return true;\n    } else {\n     \
    \   return false;\n    }", "    int n = l.size();\n    int res = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          \
    \  int sum = (l[i] + l[j]) % 10;\n            if (sum == 0) return true;\n   \
    \         res += sum;\n        }\n    }\n    return res == 0;", "    // your code\
    \ here\n    long sum = 0;\n    long last_sum = 0;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        sum += l[i];\n        if (sum == 0) {\n            if (last_sum\
    \ == 0) {\n                return false;\n            }\n            last_sum\
    \ = sum;\n        } else {\n            if (sum == last_sum) {\n             \
    \   return false;\n            }\n            last_sum = sum;\n        }\n   \
    \ }\n    return true;", "    int n = l.size();\n    // check if there are two\
    \ distinct elements in the list that sum to zero.\n    long l1 = 0, l2 = 0, sum\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n        if (sum\
    \ == 0)\n            return true;\n        if (sum < 0)\n            sum = 0;\n\
    \    }\n    l1 = l[n - 1];\n    for (int i = n - 2; i >= 0; i--) {\n        sum\
    \ += l[i];\n        if (sum < 0)\n            sum = 0;\n        if (sum == 0)\
    \ {\n            l2 = l[i];\n            break;\n        }\n    }\n    if (sum\
    \ != 0)\n        return false;\n    // two distinct elements sum to zero, return\
    \ True\n    return true;", "  // initialize variables\n  int n = l.size();\n \
    \ long s = 0;\n\n  // iterate through the list and sum up the numbers\n  for(int\
    \ i=0; i < n; i++) {\n    s += l[i];\n  }\n  // if there are two distinct elements\
    \ with the same sum\n  // to zero then the list must contain two distinct elements.\n\
    \  return ((n==2) || ((s == 0) || (s > 0)));", "    long long ans = 0, sum = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n      \
    \  if (sum < 0) sum *= -1;\n        ans += (sum - i);\n        if (ans < (sum\
    \ + i)) return false;\n    }\n    return true;", "    // Write your code here\n\
    \    \n    return false; ", "    long long sum = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        sum += l[i];\n    }\n    if (sum == 0) return true;\n\
    \    return false;", "\tlong long n = l.size();\n\tfor (long long i = 0; i < n;\
    \ i++) {\n\t\tlong long sum = 0;\n\t\tfor (long long j = 0; j < n; j++) {\n\t\t\
    \tsum += l[j];\n\t\t\tif (sum == 0) return true;\n\t\t}\n\t}\n\treturn false;",
  "    int n = l.size();\n    if (n <= 0) return false;\n\n    int i, j;\n    int\
    \ sum = 0;\n    for (i = 0, j = n-1; i < n && j >= 0; i++, j--) {\n        sum\
    \ += l[i];\n        if (sum == 0) return true;\n    }\n\n    for (i = 1, j = n-1;\
    \ i < n && j >= 0; i++, j--) {\n        sum += l[i];\n        if (sum > 0) return\
    \ false;\n    }\n\n    return false;", "    long int k = 0; // k is the current\
    \ element in the pair.\n    long int j = 0;\n    long int sum = 0; // sum is the\
    \ sum of the current pair.\n    for(auto i:l) {\n        // if the sum is non-zero,\
    \ increment k\n        if(sum != 0) {\n            k = j + 1;\n            sum\
    \ = sum - i;\n        }\n        // if the sum is zero, increment j\n        else\
    \ {\n            j++;\n            sum = i;\n        }\n    }\n    return (k ==\
    \ j);", "\tlong long ans = 0;\n\tlong long i = 0;\n\tlong long j = 1;\n\twhile(j\
    \ < l.size()) {\n\t\tif(l[j] + l[i] != 0) {\n\t\t\tans = l[j] + l[i];\n\t\t\t\
    i++;\n\t\t\tj++;\n\t\t}\n\t\telse {\n\t\t\tj++;\n\t\t}\n\t}\n\treturn (ans ==\
    \ 0);", "\t// initialize two iterators to list l\n\tstd::vector<long>::iterator\
    \ iter1;\n\tstd::vector<long>::iterator iter2;\n\t\n\t// initialize two booleans\
    \ to false\n\tbool foundOne = false;\n\tbool foundTwo = false;\n\t\n\t// initialize\
    \ two variables to zero\n\tlong sumOne = 0;\n\tlong sumTwo = 0;\n\t\n\t// iterate\
    \ the list l\n\tfor( iter1 = l.begin(); iter1 != l.end(); ++iter1 ) {\n\t\t//\
    \ iterate each element in list l\n\t\tfor( iter2 = iter1; iter2 != l.end(); ++iter2\
    \ ) {\n\t\t\t\n\t\t\t// if sum is zero, break inner loop\n\t\t\tif( (sumOne +\
    \ iter1->second) == 0 ) {\n\t\t\t\tfoundOne = true;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t\t\n\t\t\t// if sum is zero, break outer loop\n\t\t\telse if( (sumTwo + iter2->second)\
    \ == 0 ) {\n\t\t\t\tfoundTwo = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t\
    // otherwise, keep adding sum to sum\n\t\t\telse {\n\t\t\t\tsumOne += iter1->second;\n\
    \t\t\t\tsumTwo += iter2->second;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// if the list has\
    \ one distinct element that sums to zero, \n\t\t// break the inner loop\n\t\t\
    if(foundOne) {\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// if the list has two distinct\
    \ elements that sums to zero, \n\t\t// break the outer loop\n\t\tif(foundTwo)\
    \ {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// return true if the list has two distinct\
    \ elements that sums to zero\n\treturn foundOne && foundTwo;", "    assert(l.size()\
    \ > 1);\n    for (long i = l.size() - 1; i > 0; i--) {\n        long x = l[i];\n\
    \        long y = l[i - 1];\n        if (x + y == 0) {\n            return true;\n\
    \        }\n    }\n    return false;", "    int n = l.size();\n    std::vector<int>\
    \ d[n];\n    for (int i = 0; i < n; i++)\n        d[i] = 0;\n    for (int i =\
    \ 0; i < n; i++)\n        for (int j = 0; j < n; j++) {\n            if (d[j]\
    \ + l[i] <= 0)\n                d[i] += l[j];\n        }\n    for (int i = 0;\
    \ i < n; i++)\n        if (d[i] < n)\n            return false;\n    return true;"]
stop_tokens:
- "\n}"
