language: cpp
name: HumanEval_91_is_bored
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long freq\
    \ = 0;\n    size_t pos = 0;\n    while (pos < S.size()) {\n        if (S.at(pos)\
    \ == 'I') {\n            freq++;\n        }\n        pos += 1;\n    }\n    return\
    \ freq;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphc4i9guq: /tmp/tmphc4i9guq.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count=0;\n\
    \    for (int i=0;i<S.size();i++) {\n        if(S[i]=='i')\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxdn348ut: /tmp/tmpxdn348ut.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n\tint len = 0;\n\
    \tfor (int i = 0; i < S.size(); ++i) {\n\t\tint temp = S[i];\n\t\tif (temp ==\
    \ '.' || temp == '?' || temp == '!') {\n\t\t\t++len;\n\t\t}\n\t}\n\treturn len;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphkzg6s2j: /tmp/tmphkzg6s2j.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n\tint counter\
    \ = 0;\n\tstd::string boredoms = {\"I\", \"He\", \"She\", \"It\"};\n\tfor(unsigned\
    \ int i=0; i<S.size(); i++)\n\t{\n\t\tif(boredoms.find(S[i]) != boredoms.end())\n\
    \t\t\tcounter++;\n\t}\n\treturn counter;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl17i7i_a.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl17i7i_a.cpp:9:48: error: could not convert \u2018{\"I\", \"He\", \"\
    She\", \"It\"}\u2019 from \u2018<brace-enclosed initializer list>\u2019 to \u2018\
    std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019}\n    9 |\
    \  std::string boredoms = {\"I\", \"He\", \"She\", \"It\"};\n      |         \
    \                                       ^\n      |                           \
    \                     |\n      |                                             \
    \   <brace-enclosed initializer list>\n/tmp/tmpl17i7i_a.cpp:12:26: error: no match\
    \ for \u2018operator!=\u2019 (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   12 |   if(boredoms.find(S[i]) != boredoms.end())\n      |    \
    \  ~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~\n      |                   |        \
    \             |\n      |                   |                     std::__cxx11::basic_string<char>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >}\n\
    \      |                   std::__cxx11::basic_string<char>::size_type {aka long\
    \ unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpl17i7i_a.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpl17i7i_a.cpp:"
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int n = S.size();\n\
    \  long boredom_cnt = 0;\n  for (int i = 0; i < n; i++)\n    if (S[i] == 'I' &&\
    \ S[i + 1] == '.' && S[i + 2] == '?' && S[i + 3] == '!')\n      boredom_cnt++;\n\
    \  return boredom_cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdqc96coh: /tmp/tmpdqc96coh.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    assert(S.size() > 0);\n    long n = S.size()-1;\n    while (n>=0)\
    \ {\n        if (S[n] == '.') {\n            if (S[n-1] == '!') {\n          \
    \      boredoms -= 1;\n                S += 'a';\n            }\n            else\
    \ {\n                S += 'a';\n            }\n        }\n        else if (S[n]\
    \ == '?') {\n            S += 'a';\n        }\n        else if (S[n] == '!') {\n\
    \            S += 'a';\n        }\n        else {\n            break;\n      \
    \  }\n        n = n - 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps_0apnpm: /tmp/tmps_0apnpm.cpp:38: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int i;\n \
    \   int n = 0;\n    for(int i=0; i < S.length(); i++){\n        if(S[i] =='i'){\n\
    \            n++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpduoaxl46: /tmp/tmpduoaxl46.cpp:21: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Your code\
    \ here\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfnge9ky1: /tmp/tmpfnge9ky1.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    auto first_I\
    \ = S.find(\"I\");\n    bool boredom = false;\n    if (first_I != S.npos) {\n\
    \        boredom = S.substr(0, first_I).find(\"!\") != std::string::npos\n   \
    \         || S.substr(0, first_I).find(\"?\") != std::string::npos\n         \
    \   || S.substr(0, first_I).find(\",\") != std::string::npos;\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4wsi4fx_: /tmp/tmp4wsi4fx_.cpp:21: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int n = S.size();\n\
    \    long sum = 0;\n    for(int i = 0; i < n; i++) {\n        if(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') {\n            sum += 1;\n        }\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuxhgds56: /tmp/tmpuxhgds56.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored=0;\n\
    \    for(int i=0;i<S.length();i++) {\n        if(S[i]=='I') {\n            bored++;\n\
    \        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdsuokrs4: /tmp/tmpdsuokrs4.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n   long num_bored\
    \ = 0;\n   \n   for(int i = 0; i != S.size(); ++i) {\n      if(S[i] == '.') {\n\
    \         continue;\n      }\n      if(S[i] == '?') {\n         continue;\n  \
    \    }\n      if(S[i] == '!') {\n         continue;\n      }\n      if(S[i] ==\
    \ ' ') {\n         continue;\n      }\n      if(S[i] == 'I') {\n         num_bored++;\n\
    \         continue;\n      }\n      if(S[i] == '.' || S[i] == '?' || S[i] == '!')\
    \ {\n         continue;\n      }\n      if(S[i] == 'I') {\n         num_bored++;\n\
    \         continue;\n      }\n      if(S[i] == '.' || S[i] == '?' || S[i] == '!'\
    \ || S[i] == 'I') {\n         num_bored++;\n         continue;\n      }\n    \
    \  if(S[i] == ' ') {\n         continue;\n      }\n      if(S[i] == 'I') {\n \
    \        num_bored++;\n         continue;\n      }\n   }\n   return num_bored;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpeiglajvm: /tmp/tmpeiglajvm.cpp:51: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int bored\
    \ = 0;\n    std::string temp = S;\n    temp.remove_if([&](char c) {\n        switch\
    \ (c) {\n            case '?':\n            case '!':\n                return\
    \ false;\n            case '.':\n                return true;\n            default:\n\
    \                return true;\n        }\n    });\n    for (char &c : temp) {\n\
    \        if (c != 'I')\n            return 0;\n    }\n    return ++bored;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_z_xmkl8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp_z_xmkl8.cpp:10:10: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018remove_if\u2019\
    \n   10 |     temp.remove_if([&](char c) {\n      |          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    char boredoms[100]; // I guess this could be a dynamic array but we\
    \ are not allowed\n    for(int i = 0; i<S.length(); i++) {\n        // If the\
    \ current character of S is 'i' add 1 to boredoms\n        if(S[i] == 'i') {\n\
    \            boredoms++;\n        } else {\n            // If it is not I then\
    \ check if it is part of a boredom\n            int index = boredoms.index(S[i]);\n\
    \            if(index != -1) {\n                boredoms--;\n            }\n \
    \       }\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwmls0xl.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfwmls0xl.cpp:9:10: error: conflicting declaration \u2018char boredoms\
    \ [100]\u2019\n    9 |     char boredoms[100]; // I guess this could be a dynamic\
    \ array but we are not allowed\n      |          ^~~~~~~~\n/tmp/tmpfwmls0xl.cpp:8:9:\
    \ note: previous declaration as \u2018int boredoms\u2019\n    8 |     int boredoms\
    \ = 0;\n      |         ^~~~~~~~\n/tmp/tmpfwmls0xl.cpp:16:34: error: request for\
    \ member \u2018index\u2019 in \u2018boredoms\u2019, which is of non-class type\
    \ \u2018int\u2019\n   16 |             int index = boredoms.index(S[i]);\n   \
    \   |                                  ^~~~~\n"
  stdout: ''
  timestamp: 1660094417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom\
    \ = 0;\n    std::string boredom_word = \"I\";\n    std::string boredom_last_char\
    \ = \"I\";\n    for (unsigned int i = 0; i < S.size(); ++i) {\n        if (S[i]\
    \ == boredom_last_char) {\n            boredom++;\n            boredom_last_char\
    \ = \"I\";\n            boredom_word.clear();\n        } else {\n            if\
    \ (boredom_word == \"I\") {\n                boredom++;\n                boredom_last_char\
    \ = \"I\";\n                boredom_word.clear();\n            } else if (boredom_word\
    \ != \"\") {\n                assert(boredom_word != \"I\");\n               \
    \ boredom++;\n            }\n            boredom_last_char = S[i];\n         \
    \   boredom_word += S[i];\n        }\n    }\n    return boredom;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkadid2ut.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkadid2ut.cpp:12:18: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   12 |         if (S[i] == boredom_last_char) {\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkadid2ut.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkadid2ut.cpp:12:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   12 |         if (S[i] == boredom_last_char) {\n \
    \     |                     ^~~~~~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkadid2ut.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkadid2ut.cpp:12:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char"
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int counter\
    \ = 0;\n    for (int i = 0; i < S.size(); i++)\n        if (S[i] == 'I')\n   \
    \         counter++;\n    return counter;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpojeyaczj: /tmp/tmpojeyaczj.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom_count\
    \ = 0; // count the number of boredoms.\n    for (auto &&i : S) { // iterate over\
    \ each word\n        if (S[0] == 'I' && i == '.') // check if the word is a boredom\n\
    \            boredom_count++; // if so, increment the boredom counter\n    }\n\
    \    return boredom_count; // return the final result\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpoexb8xxh: /tmp/tmpoexb8xxh.cpp:19: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    std::string st;\n    std::istringstream\
    \ iss(S);\n    std::string word;\n    while (std::getline(iss, word, '.') || std::getline(iss,\
    \ word, '?') || std::getline(iss, word, '!'))\n    {\n        if (word == \"I\"\
    )\n        {\n            count++;\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnazovuwb: /tmp/tmpnazovuwb.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094419
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored\
    \ = 0;\n    int size = S.size();\n    bool isBored = true;\n    for(int i = 0;\
    \ i < size; ++i) {\n        if(S[i] == '.') {\n            ++bored;\n        }\n\
    \        else if(S[i] == '?') {\n            ++bored;\n        }\n        else\
    \ if(S[i] == '!') {\n            ++bored;\n        }\n        else {\n       \
    \     isBored = false;\n        }\n    }\n    if(isBored) {\n        return bored;\n\
    \    }\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprw9ptvbt: /tmp/tmprw9ptvbt.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094417
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom\
    \ = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!')\n            boredom++;\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpozuev_qu: /tmp/tmpozuev_qu.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Return\
    \ 0 if the sentence starts with \"I\".\n    if (S[0] == 'I')\n        return 1;\n\
    \    long count = 0;\n    // Iterate through the sentence.\n    for (auto i =\
    \ 2; i < S.size(); ++i) {\n        // Count each boredom that starts with a capital\
    \ letter or an 'I'.\n        if (S[i] == 'I' || S[i] == ' ')\n            count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjs8rrrcr: /tmp/tmpjs8rrrcr.cpp:22: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long cnt =\
    \ 0;\n    for (int i = 0; i < S.size(); i++)\n        if (S[i] == 'I')\n     \
    \       cnt++;\n    return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2zvmk2ew: /tmp/tmp2zvmk2ew.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Your code\
    \ here\n    long boredoms = 0;\n    for (int i = 0; i < S.size(); i++) {\n   \
    \     if (S[i] == \"I\") {\n            boredoms++;\n        }\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfnq6gm3.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpkfnq6gm3.cpp:11:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   11 |         if (S[i] == \"I\") {\n      |  \
    \                   ^~~\n"
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // The string\
    \ is delimited by '.', '?' or '!'.\n    assert(S.size() != 0);\n    assert(S[0]\
    \ == '.' || S[0] == '?' || S[0] == '!');\n    std::stack<char> stk;\n    bool\
    \ is_bored = false;\n    for (size_t i = 1; i < S.size(); ++i) {\n        char\
    \ c = S[i];\n        if (c == '.') stk.push('.')\n        else if (c == '?') stk.push('?')\n\
    \        else if (c == '!') stk.push('!');\n        else if (stk.empty() || stk.top()\
    \ != '!') stk.push(c);\n        else if (stk.top() == '!') stk.pop();\n      \
    \  else is_bored = true;\n    }\n    return is_bored ? stk.size() - 1 : 0;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6dxjbk4.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpl6dxjbk4.cpp:15:36: error: expected \u2018;\u2019 before \u2018else\u2019\
    \n   15 |         if (c == '.') stk.push('.')\n      |                       \
    \             ^\n      |                                    ;\n   16 |       \
    \  else if (c == '?') stk.push('?')\n      |         ~~~~                    \
    \    \n"
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Your code\
    \ here\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfnge9ky1: /tmp/tmpfnge9ky1.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int num_bored\
    \ = 0;\n    for(int i = 0; i < S.size(); i++){\n        if(S[i] == 'I'){\n   \
    \         num_bored++;\n        }\n    }\n    return num_bored;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfkcgkj1a: /tmp/tmpfkcgkj1a.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom_count\
    \ = 0;\n    for(size_t i = 0; i < S.size(); i++) {\n        if(S[i] == '.' ||\
    \ S[i] == '?' || S[i] == '!') boredom_count++;\n    }\n    return boredom_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpevoua0zm: /tmp/tmpevoua0zm.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    long boredom = 1;\n    for (int i = 0; i < S.size(); i++) {\n    \
    \    if (S[i] == '.') {\n            boredom = 1;\n        } else if (S[i] ==\
    \ '?' || S[i] == '!') {\n            boredom = 0;\n        } else if (S[i] ==\
    \ 'I') {\n            count += boredom;\n            boredom = 0;\n        } else\
    \ {\n            boredom++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgtn_es4e: /tmp/tmpgtn_es4e.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int n = S.size();\n\
    \  int bored = 0;\n  for(int i = 1; i<n; i++){\n    if(S[i] == '.' || S[i] ==\
    \ '?' || S[i] == '!')\n      bored++;\n  }\n  return bored;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi6eemu7_: /tmp/tmpi6eemu7_.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n        if(S[i] ==\
    \ '.') {\n            if(S[i+1] == '.' || S[i+1] == '?' || S[i+1] == '!') {\n\
    \                count++;\n                i += 2;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph6s40flv: /tmp/tmph6s40flv.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int N=0;\n \
    \ if(S.find(\"I\")!=std::string::npos){\n    N=1;\n  }\n  for(int i=0;i<S.size();i++){\n\
    \    if(S[i]!=S[i-1] && S[i]!=S[i+1]){\n      N++;\n    }\n  }\n  return N;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbovya995: /tmp/tmpbovya995.cpp:21: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    // Return an int with the number of boredoms in the string S.\n\
    \    // You may assume that S contains only lowercase letters.\n    \n    long\
    \ n = 0, i = 0;\n    for (auto &it : S) {\n        if (it == '.' || it == '!'\
    \ || it == '?') {\n            i++;\n        }\n    }\n    \n    if (i == 0) {\n\
    \        return n;\n    }\n    for (auto &it : S) {\n        if (it == '.' ||\
    \ it == '!' || it == '?') {\n            n++;\n        }\n    }\n    return n;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqx_hmq_7: /tmp/tmpqx_hmq_7.cpp:32: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    assert(S != \"\"); // no empty string\n    for(int i = 0; i < S.size();\
    \ i++) {\n        count += S[i] == '.' || S[i] == '?' || S[i] == '!';\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqirvh31l: /tmp/tmpqirvh31l.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n\tassert (S.length()\
    \ >= 2); // Must be at least two chars long.\n\tlong boredom_count = 0;\n\tstd::string\
    \ boredom_prefix = \"\";\n\tfor (auto c : S) {\n\t\tif (c == '.' || c == '?' ||\
    \ c == '!') {\n\t\t\t// We found a boredom, so increment our counter.\n\t\t\t\
    boredom_count++;\n\t\t\tboredom_prefix += c;\n\t\t} else { // Not a boredom.\n\
    \t\t\t// Add one to our counter, except for the first word we see.\n\t\t\tif (boredom_prefix.empty())\n\
    \t\t\t\tboredom_count++;\n\t\t\telse\n\t\t\t\tboredom_count--;\n\t\t\tboredom_prefix\
    \ = \"\";\n\t\t}\n\t}\n\treturn boredom_count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgn2zye_a: /tmp/tmpgn2zye_a.cpp:29: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    assert(S.size()\
    \ > 0);\n    long bored = 0;\n    int i = 0;\n    int n = S.size();\n    while\
    \ (i < n && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n        i++;\n    }\n\
    \    i++; // skip the '.'\n    while (i < n) {\n        char curr = S[i];\n  \
    \      while (i < n && S[i] != '.' && S[i] != '?' && S[i] != '!') {\n        \
    \    i++;\n        }\n        if (curr == 'I') {\n            if (i == n) {\n\
    \                return -1;\n            }\n            bored++;\n        }\n\
    \        i++;\n    }\n    return bored;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmph7ag6ztq: /tmp/tmph7ag6ztq.cpp:35: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string::size_type start = 0;\n    while (start != S.size()) {\n\
    \        std::string::size_type end = S.find(' ', start);\n        if (end !=\
    \ std::string::npos) {\n            std::string boredom = S.substr(start, end\
    \ - start);\n            if (boredom[0] == \"I\")\n                boredoms +=\
    \ 1;\n            start = end + 1;\n        } else {\n            start = S.find('\
    \ ', start);\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpynjo4p1s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpynjo4p1s.cpp:14:31: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   14 |             if (boredom[0] == \"I\")\n \
    \     |                               ^~~\n"
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored=0;\n\
    \    for(auto &word:S){\n        if(word.compare(0,4,\"I\")==0){\n           \
    \ bored++;\n        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ktb34o2.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp8ktb34o2.cpp:10:17: error: request for member \u2018compare\u2019 in\
    \ \u2018word\u2019, which is of non-class type \u2018char\u2019\n   10 |     \
    \    if(word.compare(0,4,\"I\")==0){\n      |                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    for (int i = 0; i <= S.size(); ++i) {\n        if (S[0] == 'i' &&\
    \ S[i] != '.' && S[i] != '?' && S[i] != '!') ++count;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0536zi7a: /tmp/tmp0536zi7a.cpp:18: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    for(int i = 0; i < S.length(); i++)\n    {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!')\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0r8acg6t: /tmp/tmp0r8acg6t.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::map<std::string,\
    \ long> bored;\n    // Build a map with word as key and count of its boredoms\
    \ as value.\n    for (int i = 0; i != S.size(); ++i)\n        if (S[i] != '.'\
    \ &&\n            S[i] != '?' &&\n            S[i] != '!')\n            bored[S[i]]++;\n\
    \    // Return sum of values of map.\n    return std::accumulate(bored.begin(),\
    \ bored.end(), 0L);\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4e0xz7q.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpp4e0xz7q.cpp:14:18: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::map<std::__cxx11::basic_string<char>, long int>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   14 |             bored[S[i]]++;\n      |       \
    \           ^\nIn file included from /usr/include/c++/9/map:61,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n           \
    \      from /tmp/tmpp4e0xz7q.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:490:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n\
    \  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:490:34:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const\
    \ key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:510:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&)\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int;\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic"
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    assert(S.size() > 0);\n    for(size_t i = 0; i<S.size();i++) {\n \
    \       if(S[i] >= 'a' && S[i] <= 'z') {\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpa8x93woj: /tmp/tmpa8x93woj.cpp:19: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    // your code goes here\n    int count=0;\n    for(int i=0;i<S.size();i++){\n\
    \        if(S[i]=='i'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps32fg768: /tmp/tmps32fg768.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094417
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    auto begin\
    \ = S.begin();\n    auto end = S.end();\n    long boredoms = 0;\n    while (begin\
    \ != end) {\n        if (std::strncmp(begin, \"I\", 2) == 0)\n            ++boredoms;\n\
    \        ++begin;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2zk9ujf.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpu2zk9ujf.cpp:12:26: error: cannot convert \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 to \u2018const char*\u2019\n   12 |\
    \         if (std::strncmp(begin, \"I\", 2) == 0)\n      |                   \
    \       ^~~~~\n      |                          |\n      |                   \
    \       __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpu2zk9ujf.cpp:2:\n/usr/include/string.h:140:33:\
    \ note:   initializing argument 1 of \u2018int strncmp(const char*, const char*,\
    \ size_t)\u2019\n  140 | extern int strncmp (const char *__s1, const char *__s2,\
    \ size_t __n)\n      |                     ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  assert(S !=\
    \ \"\");\n  bool flag = true;\n  for(int i=0; i<S.length()-1; i++){\n    if(S[i]\
    \ == '.'){\n      flag = false;\n    }\n  }\n  if(flag){\n    return true;\n \
    \ }\n  else{\n    return false;\n  }\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw6nroa1d: /tmp/tmpw6nroa1d.cpp:24: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0, i;\n    for (i = 0; i<S.size();i++){\n        if(S[i]=='I'){\n        \
    \    count++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpl8cs4yes: /tmp/tmpl8cs4yes.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int n = S.size();\n\
    \  int ans = 0;\n  char last = '\\0';\n  for (int i = 0; i < n; ++i) {\n    if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n      if (last == '.' || last\
    \ == '?' || last == '!')\n        ans += 1;\n    }\n    last = S[i];\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2trkh6_b: /tmp/tmp2trkh6_b.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094418
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int boredoms\
    \ = 0;\n  int i, len;\n  for (i = 0, len = S.length(); i < len; ) {\n    switch\
    \ (S[i]) {\n    case '?':\n    case '!':\n      i++;\n      break;\n    case '.':\n\
    \      i++;\n      boredoms++;\n    }\n  }\n  return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n   long count\
    \ = 0;\n   for(int i = 0; S[i] != 0; i++)\n      if(S[i] == 'I')\n         count++;\n\
    \   return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmn6lmrv1: /tmp/tmpmn6lmrv1.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom=0;\n\
    \    for(int i=0;i<S.size();i++) {\n        if (S[i] == 'i' && S[i+1] == '.' &&\
    \ S[i+2] == '?') {\n            boredom++;\n        }\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpo_5rwjfu: /tmp/tmpo_5rwjfu.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int n = S.size();\n\
    \    long long int count = 0;\n    for (int i = 0; i < (int) n; ++i) {\n     \
    \   // The current character is a non-space character, so it's not bored.\n  \
    \      if (S[i] != ' ') {\n            // Count the number of non-space characters.\n\
    \            count += 1;\n            if (S[i] == '.' || S[i] == '!' || S[i] ==\
    \ '?') {\n                // Found a non-space character. Check to see if it is\n\
    \                // a bored character.\n                count += 1;\n        \
    \    }\n        }\n        // If we reach the end (or the next character), or\
    \ we've found a\n        // bored character, add 1 to the count.\n        if ((i\
    \ + 1) >= (int) n || S[i + 1] == ' ' || S[i + 1] == '!' || S[i + 1] == '?') {\n\
    \            count += 1;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpii_qb4qv: /tmp/tmpii_qb4qv.cpp:31: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // code goes\
    \ here\n  assert(S.size() > 0);\n  long count = 0;\n  for (int i = 0; i < S.size();\
    \ i++)\n    if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n      count++;\n \
    \ return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpprhbe7ur: /tmp/tmpprhbe7ur.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  long boredom\
    \ = 0;\n  for(auto &iter:S) {\n    if (iter == '.' || iter == '!' || iter == '?')\
    \ ++boredom;\n  }\n  return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpe8_jcnib: /tmp/tmpe8_jcnib.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::map<char,\
    \ long> freq;\n    for (int i = 0; S[i]; ++i)\n        freq[S[i]]++;\n    for\
    \ (char &v : freq) {\n        if (v == '.' || v == '?' || v == '!') {\n      \
    \      return freq[v];\n        }\n    }\n    return 0;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhfpad35.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpfhfpad35.cpp:11:20: error: invalid initialization of reference of type\
    \ \u2018char&\u2019 from expression of type \u2018std::pair<const char, long int>\u2019\
    \n   11 |     for (char &v : freq) {\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n   long N = 0;\n\
    \   assert(S.size() > 0);\n   assert(S.size() % 3 == 0);\n   auto I = S.begin();\n\
    \   auto E = [&]() { ++N; return I == S.end(); }; // returns true if I moved to\
    \ end of S\n\n   while (I != S.end() && std::isalpha(*I)) { // checks if current\
    \ word starts with \"I\"\n      if (std::strncmp(S, \"I\", 2) == 0) {\n      \
    \   ++N;\n         ++I;\n         while (I != S.end() && std::isalpha(*I)) { //\
    \ checks if I moved to end of S\n            ++I;\n         }\n         while\
    \ (I != S.end() && std::isalpha(*I)) // checks if I moved to end of S\n      \
    \      ++I;\n      }\n   }\n   return N;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvap0r1tv.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpvap0r1tv.cpp:15:24: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018const char*\u2019\n \
    \  15 |       if (std::strncmp(S, \"I\", 2) == 0) {\n      |                 \
    \       ^\n      |                        |\n      |                        std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/cstring:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpvap0r1tv.cpp:2:\n/usr/include/string.h:140:33:\
    \ note:   initializing argument 1 of \u2018int strncmp(const char*, const char*,\
    \ size_t)\u2019\n  140 | extern int strncmp (const char *__s1, const char *__s2,\
    \ size_t __n)\n      |                     ~~~~~~~~~~~~^~~~\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long counter\
    \ = 0;\n    int boredom = 0;\n    for(int i = 0; i < S.size(); ++i){\n       \
    \ if(S[i] != '.' && S[i] != '?' && S[i] != '!') continue;\n        if(S[i] ==\
    \ 'I' && S[i+1] == '.' && S[i+2] != '?' && S[i+2] != '!') boredom++;\n    }\n\
    \    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpr88csseo: /tmp/tmpr88csseo.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long cnt =\
    \ 0;\n    for(int i=0;i<S.length();i++) {\n        if(S[i]=='.')\n           \
    \ cnt++;\n        if(S[i]=='?' || S[i]=='!')\n            cnt++;\n    }\n    return\
    \ cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmps3i_uur0: /tmp/tmps3i_uur0.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // TODO: Your\
    \ code goes here\n    long count = 0;\n    \n    for(auto &it: S){\n        if(it\
    \ == '.')\n            count ++;\n    }\n    \n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpotw7qbep: /tmp/tmpotw7qbep.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // I love\
    \ you!\n    // I love cats!\n    // I don't like fish!\n    // I do not like dogs!\n\
    \    // I like cats and dogs.\n    // I? I? I! I!\n    // I love I! I!\n    //\
    \ I! I!\n\n    int n_boredoms = 0;\n    int count = 0;\n    int i = 0;\n    while(i\
    \ < S.length()) {\n        if (S[i] == 'I') {\n            count++;\n        }\n\
    \        else if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n       \
    \     if((i + 1) < S.length() && S[i + 1] == '.') {\n                count++;\n\
    \                i += 1;\n            }\n            else if((i + 1) < S.length()\
    \ && S[i + 1] == '?') {\n                count++;\n                i += 1;\n \
    \           }\n            else if((i + 1) < S.length() && S[i + 1] == '!') {\n\
    \                count++;\n                i += 1;\n            }\n          \
    \  else if((i + 2) < S.length() && S[i + 2] == '.') {\n                count++;\n\
    \                i += 2;\n            }\n            else if((i + 2) < S.length()\
    \ && S[i + 2] == '?') {\n                count++;\n                i += 2;\n \
    \           }\n            else if((i + 2) < S.length() && S[i + 2] == '!') {\n\
    \                count++;\n                i += 2;\n            }\n          \
    \  else {\n                n_boredoms++;\n            }\n        }\n        i++;\n\
    \    }\n    return n_boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11clh1gr.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp11clh1gr.cpp:24:26: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   24 |         else if (S[i] == \".\" || S[i] ==\
    \ \"?\" || S[i] == \"!\") {\n      |                          ^~~\n/tmp/tmp11clh1gr.cpp:24:41:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   24 |         else if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n\
    \      |                                         ^~~\n/tmp/tmp11clh1gr.cpp:24:56:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   24 |         else if (S[i] == \".\" || S[i] == \"?\" || S[i] == \"!\") {\n\
    \      |                                                        ^~~\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom_count\
    \ = 0;\n    for (auto it : S) {\n        switch (it) {\n            case \".\"\
    : boredom_count++; break;\n            case \"?\": boredom_count++; break;\n \
    \           case \"!\": boredom_count++; break;\n        }\n    }\n    return\
    \ boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6f7pfaj.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpb6f7pfaj.cpp:11:18: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   11 |             case \".\": boredom_count++;\
    \ break;\n      |                  ^~~\n      |                  |\n      |  \
    \                const char*\n/tmp/tmpb6f7pfaj.cpp:11:18: error: \u2018(int)((const\
    \ char*)\".\")\u2019 is not a constant expression\n/tmp/tmpb6f7pfaj.cpp:12:18:\
    \ error: invalid conversion from \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n\
    \   12 |             case \"?\": boredom_count++; break;\n      |            \
    \      ^~~\n      |                  |\n      |                  const char*\n\
    /tmp/tmpb6f7pfaj.cpp:12:18: error: \u2018(int)((const char*)\"?\")\u2019 is not\
    \ a constant expression\n/tmp/tmpb6f7pfaj.cpp:13:18: error: invalid conversion\
    \ from \u2018const char*\u2019 to \u2018int\u2019 [-fpermissive]\n   13 |    \
    \         case \"!\": boredom_count++; break;\n      |                  ^~~\n\
    \      |                  |\n      |                  const char*\n/tmp/tmpb6f7pfaj.cpp:13:18:\
    \ error: \u2018(int)((const char*)\"!\")\u2019 is not a constant expression\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long ans =\
    \ 0;\n    for (auto it=S.begin();it!=S.end();++it) {\n        if ((*it)=='.')\
    \ {\n            if ((*it-1)=='.') ans++;\n        }\n        else if ((*it)=='?')\
    \ {\n            if ((*it-1)=='?') ans++;\n        }\n        else if ((*it)=='!')\
    \ {\n            if ((*it-1)=='!') ans++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpecq0x5u1: /tmp/tmpecq0x5u1.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int len =\
    \ S.length();\n    long count = 0;\n    for(int i = 0; i < len; i++){\n      \
    \  if(S[i] == 'I'){\n            count++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy5uffuym: /tmp/tmpy5uffuym.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    std::size_t found = S.find(\"I\");\n    while (found != std::npos)\
    \ {\n        found = S.find(\".\", found);\n        if (found != std::npos) {\n\
    \            found = S.find(\"?\", found);\n            if (found != std::npos)\
    \ {\n                found = S.find(\"!\", found);\n            }\n        }\n\
    \        count++;\n        found = S.find(\".\", found);\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12fo_vr8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp12fo_vr8.cpp:10:26: error: \u2018npos\u2019 is not a member of \u2018\
    std\u2019; did you mean \u2018fpos\u2019?\n   10 |     while (found != std::npos)\
    \ {\n      |                          ^~~~\n      |                          fpos\n\
    /tmp/tmp12fo_vr8.cpp:12:27: error: \u2018npos\u2019 is not a member of \u2018\
    std\u2019; did you mean \u2018fpos\u2019?\n   12 |         if (found != std::npos)\
    \ {\n      |                           ^~~~\n      |                         \
    \  fpos\n/tmp/tmp12fo_vr8.cpp:14:31: error: \u2018npos\u2019 is not a member of\
    \ \u2018std\u2019; did you mean \u2018fpos\u2019?\n   14 |             if (found\
    \ != std::npos) {\n      |                               ^~~~\n      |       \
    \                        fpos\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long result\
    \ = 0;\n    size_t n = S.size();\n    for(size_t i = 0; i < n; i++) {\n      \
    \  if (S[i] == '.') {\n            result += 1;\n        } else if (S[i] == '!')\
    \ {\n            result += 2;\n        } else if (S[i] == '?') {\n           \
    \ result += 3;\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprexzqbsi: /tmp/tmprexzqbsi.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::istringstream\
    \ is(S);\n    long bored = 0;\n    std::string word;\n    while (is >> word) {\n\
    \        if (word == \"I\") {\n            ++bored;\n        } else if (word ==\
    \ \".\") {\n            ++bored;\n        } else if (word == \"?\") {\n      \
    \      ++bored;\n        } else if (word == \"!\") {\n            ++bored;\n \
    \       }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprfnmv369: /tmp/tmprfnmv369.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    std::map<std::string,int> bcounts;\n    for(int i=0;i<S.size();i++){\n\
    \        if(S[i]==\"I\"){\n            bcounts[\"I\"]++;\n        }\n        else\
    \ if(S[i]==\".\"){\n            bcounts[\".\"]++;\n        }\n        else if(S[i]==\"\
    ?\"){\n            bcounts[\"?\"]++;\n        }\n        else if(S[i]==\"!\"){\n\
    \            bcounts[\"!\"]++;\n        }\n    }\n    return bcounts[\"I\"]+bcounts[\"\
    .\"]+bcounts[\"?\"]+bcounts[\"!\"];\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphayd5y2s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmphayd5y2s.cpp:11:18: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   11 |         if(S[i]==\"I\"){\n      |      \
    \            ^~~\n/tmp/tmphayd5y2s.cpp:14:23: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   14 |         else if(S[i]==\"\
    .\"){\n      |                       ^~~\n/tmp/tmphayd5y2s.cpp:17:23: error: ISO\
    \ C++ forbids comparison between pointer and integer [-fpermissive]\n   17 | \
    \        else if(S[i]==\"?\"){\n      |                       ^~~\n/tmp/tmphayd5y2s.cpp:20:23:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   20 |         else if(S[i]==\"!\"){\n      |                       ^~~\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored\
    \ = 0;\n    for(int i = 0; i < S.size(); i++) {\n        if(S[i] == 'I') {\n \
    \           if(S[i + 1] == '.') {\n                if(S[i + 2] == '.') {\n   \
    \                 if(S[i + 3] == '?' || S[i + 3] == '!') {\n                 \
    \       bored += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9cazbe8f: /tmp/tmp9cazbe8f.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // ++count\
    \ for boredom sentences\n    // return 0 for normal sentences\n    long count\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        char c = S[i];\n   \
    \     if (c == '.') {\n            if (i == 0 || S[i-1] != '?' || S[i-1] != '!')\
    \ {\n                ++count;\n            }\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpn_5ai2zf: /tmp/tmpn_5ai2zf.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n\tassert(S.size()\
    \ > 2);\n\tstd::string first_word(S.substr(0, 2));\n\tif (first_word != \"I\"\
    ) return 0;\n\tint bored_count = 0;\n\tfor (int i = 3; i < S.size(); i++) {\n\t\
    \tif (S[i] == '.' || S[i] == '?' || S[i] == '!') bored_count++;\n\t}\n\treturn\
    \ bored_count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphtjmlguq: /tmp/tmphtjmlguq.cpp:21: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int n = 0;\n\
    \    for (auto c : S) {\n        if (c == 'I' || c == '.' || c == '?' || c ==\
    \ '!') {\n            n++;\n        }\n    }\n    return n;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprbdw3v_a: /tmp/tmprbdw3v_a.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int count =\
    \ 0; // Your code goes here\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5ji4tfec: /tmp/tmp5ji4tfec.cpp:15: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  if (S.length()\
    \ <= 2) return 0;\n  int n = 0;\n  for (int i = 0; i < S.length(); i++) {\n  \
    \  if (S[i] == '.') n++;\n    if (S[i] == '!') n--;\n    if (S[i] == '?') n++;\n\
    \  }\n  return n;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5t076dz1: /tmp/tmp5t076dz1.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count=0;\n\
    \    for(string::iterator i=S.begin();i!=S.end();i++)\n    {\n        if(*i==\"\
    I\")\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuljh82wx.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpuljh82wx.cpp:9:9: error: \u2018string\u2019 has not been declared\n\
    \    9 |     for(string::iterator i=S.begin();i!=S.end();i++)\n      |       \
    \  ^~~~~~\n/tmp/tmpuljh82wx.cpp:9:38: error: \u2018i\u2019 was not declared in\
    \ this scope\n    9 |     for(string::iterator i=S.begin();i!=S.end();i++)\n \
    \     |                                      ^\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int l=S.length();\n\
    \    int n=0,c=0;\n    for (int i=0;i<l;i++)\n    {\n        if (S[i]=='I')\n\
    \        {\n            n++;\n        }\n        if (S[i]=='.' || S[i]=='?' ||\
    \ S[i]=='!')\n        {\n            c++;\n        }\n    }\n    return n;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppswbl3j8: /tmp/tmppswbl3j8.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Return\
    \ the number of boredoms in a string S\n    long res = 0;\n    for(int i=0; S[i]!='\\\
    0'; i++){\n        if(S[i]=='I'){\n            res++;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt9_oiyhi: /tmp/tmpt9_oiyhi.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  long ans = 0;\n\
    \  for (auto i = S.begin(); i != S.end(); i++) {\n    if (*i == '.') {\n     \
    \ ans += 1;\n      if (*(i + 1) == '?') ans += 1;\n      if (*(i + 1) == '!')\
    \ ans += 1;\n    } else if (*i == '!') {\n      ans += 1;\n    } else if (*i ==\
    \ '?') {\n      ans += 1;\n    } else if (*i == '.' && *(i + 1) == '.') {\n  \
    \    ans += 1;\n    } else if (*i == '.' && *(i + 1) == '!') {\n      ans += 1;\n\
    \    } else if (*i == '.' && *(i + 1) == '?') {\n      ans += 1;\n    } else if\
    \ (*i == '?' && *(i + 1) == '.') {\n      ans += 1;\n    } else if (*i == '?'\
    \ && *(i + 1) == '!') {\n      ans += 1;\n    } else if (*i == '?' && *(i + 1)\
    \ == '?') {\n      ans += 1;\n    } else {\n      ans += 0;\n    }\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0us52zd7: /tmp/tmp0us52zd7.cpp:39: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int bored =\
    \ 0;\n  int n = S.size();\n  // TODO: Write your code here\n  return 0;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6n07jar4: /tmp/tmp6n07jar4.cpp:17: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int boredoms\
    \ = 0;\n  for (int i = 0; i < (int) S.length(); ++i) {\n    if (S[i] == '.') {\n\
    \      ++boredoms;\n    } else if (S[i] == '?') {\n      ++boredoms;\n    } else\
    \ if (S[i] == '!') {\n      ++boredoms;\n    }\n  }\n  return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprohyx9s_: /tmp/tmprohyx9s_.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom\
    \ = 0;\n    if (S.find(\"/\") != std::string::npos) {\n        for (int i = 0;\
    \ i < S.length(); i++) {\n            if (S[i] == '.')\n                boredom++;\n\
    \            if (S[i] == '?')\n                boredom++;\n            if (S[i]\
    \ == '!')\n                boredom++;\n        }\n    }\n    return boredom;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5adsvq_g: /tmp/tmp5adsvq_g.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int freq[26];\n\
    \    for(auto x:S) {\n        freq[x-'a']++;\n    }\n    int ans = 0;\n    for(int\
    \ i = 65;i<91;i++) {\n        if(freq[i]==0) continue;\n        if(strncmp(\"\
    i\",S.c_str(),i)==0) {\n            ans++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptck1hmgb: /tmp/tmptck1hmgb.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094420
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Complete\
    \ the is_bored function below.\n  // Feel free to use any method you like!\n \
    \ std::ifstream is;\n  is.open(S.c_str());\n  if (is.fail()) {\n    cout << \"\
    Error opening file!\" << endl;\n    return -1;\n  }\n  string word;\n  long count\
    \ = 0;\n  while (getline(is, word, '.')) {\n    if (word == \"I\") {\n      count++;\n\
    \    }\n  }\n  is.close();\n  return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpipiy1gkk.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpipiy1gkk.cpp:13:5: error: \u2018cout\u2019 was not declared in this\
    \ scope; did you mean \u2018std::cout\u2019?\n   13 |     cout << \"Error opening\
    \ file!\" << endl;\n      |     ^~~~\n      |     std::cout\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n               \
    \  from /tmp/tmpipiy1gkk.cpp:2:\n/usr/include/c++/9/iostream:61:18: note: \u2018\
    std::cout\u2019 declared here\n   61 |   extern ostream cout;  /// Linked to standard\
    \ output\n      |                  ^~~~\n/tmp/tmpipiy1gkk.cpp:13:38: error: \u2018\
    endl\u2019 was not declared in this scope; did you mean \u2018std::endl\u2019\
    ?\n   13 |     cout << \"Error opening file!\" << endl;\n      |             \
    \                         ^~~~\n      |                                      std::endl\n\
    In file included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpipiy1gkk.cpp:2:\n/usr/include/c++/9/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599 |     endl(basic_ostream<_CharT,\
    \ _Traits>& __os)\n      |     ^~~~\n/tmp/tmpipiy1gkk.cpp:16:3: error: \u2018\
    string\u2019 was not declared in this scope\n   16 |   string word;\n      | \
    \  ^~~~~~\n/tmp/tmpipiy1gkk.cpp:16:3: note: suggested alternatives:\nIn file included\
    \ from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpipiy1gkk.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                  "
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'i') {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgri0vajo: /tmp/tmpgri0vajo.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Your code\
    \ goes here\n  long count = 0;\n  for(int i = 0; i<S.size();i++){\n    if(S[i]\
    \ == \"I\"){\n      count++;\n    }\n  }\n  return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqo0kvjd.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppqo0kvjd.cpp:11:16: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   11 |     if(S[i] == \"I\"){\n      |        \
    \        ^~~\n"
  stdout: ''
  timestamp: 1660094420
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    for (auto i = S.begin(); i != S.end(); ++i) {\n        if (*i == 'I')\
    \ count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9zpe3gxx: /tmp/tmp9zpe3gxx.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count=0;\n\
    \    for (int i = 0; i < S.length(); i++)\n    {\n        if (S[i] == 'i')\n \
    \       {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpntelxa1j: /tmp/tmpntelxa1j.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom\
    \ = 0;\n    for(int i = 0; i < S.size(); ++i)\n    {\n        if(S[0] == 'i')\n\
    \            boredom++;\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg5kp87so: /tmp/tmpg5kp87so.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // TODO: Write\
    \ code here\n  assert(S.size() >= 2);\n  int count = 0;\n  for (int i = 0; i <\
    \ S.size(); i++) {\n    if (S[0] == 'I' && S[i+1] == '.') {\n      count++;\n\
    \    }\n  }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjax5n8qq: /tmp/tmpjax5n8qq.cpp:22: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ logic here\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxkuixfgd: /tmp/tmpxkuixfgd.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int N = 0;\n\
    \    for(int i=0; i<S.length(); i++){\n        if(S.at(i)=='i'){\n           \
    \ N+=1;\n        }\n    }\n    return N;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpjzjbf2_n: /tmp/tmpjzjbf2_n.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int n = S.size();\n\
    \  long bored = 0;\n  for (int i = 0; i < n; i++) {\n    if (S[i] == 'I' || S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!')\n      bored++;\n  }\n  return bored;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvw5zgnks: /tmp/tmpvw5zgnks.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::vector<std::pair<std::string,\
    \ int> > words;\n    std::string token;\n    long boredoms = 0;\n    std::stringstream\
    \ ss(S);\n    \n    while(getline(ss, token, ',')) {\n        words.emplace_back(token,\
    \ 0);\n    }\n    \n    for(auto &word : words) {\n        if(word.first == \"\
    I\") {\n            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg9y2nras: /tmp/tmpg9y2nras.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    long count = 0;\n    for (size_t i = 0; i < S.size(); i++)\n\
    \    {\n        if (S[i] == 'I')\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpgzt7jb1s: /tmp/tmpgzt7jb1s.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094422
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::map<std::string,long>\
    \ m;\n    long ans = 0;\n    for(int i=0;i<S.size();i++){\n        auto it = m.find(S[i]);\n\
    \        if (it != m.end()) {\n            ans += it->second;\n        } else\
    \ {\n            long temp = 0;\n            std::istringstream is(S[i]);\n  \
    \          is >> temp;\n            m.insert(std::pair<std::string,long>(S[i],\
    \ temp));\n            ans += temp;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23n6fp8l.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp23n6fp8l.cpp:11:30: error: no matching function for call to \u2018\
    std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   11 |         auto it = m.find(S[i]);\n      |\
    \                              ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp23n6fp8l.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc\
    \ = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int>\
    \ >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const\
    \ std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const\
    \ key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const\
    \ key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:1174:2:\
    \ note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare,\
    \ _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x))\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key\
    \ = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>,\
    \ long int> >]\u2019\n 1174 |  find(const _Kt& __x) -> decltype(_M_t._M_f"
  stdout: ''
  timestamp: 1660094421
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom_count\
    \ = 0;\n    for(int i = 0; S[i] != '\\0'; i++)\n    {\n        if(S[i] == 'I'\
    \ && i != 0) {\n            boredom_count++;\n        }\n    }\n    return boredom_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9tnqby84: /tmp/tmp9tnqby84.cpp:22: int main(): Assertion `candidate(("bIt"))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    size_t pos;\n    for (pos = S.size() - 1; pos >= 0; --pos) {\n   \
    \     if (S[pos] == '.') {\n            count = 0;\n        }\n        else if\
    \ (S[pos] == '?') {\n            count = 1;\n        }\n        else if (S[pos]\
    \ == '!') {\n            count = 2;\n        }\n        else {\n            assert(false);\n\
    \        }\n        if (count == 3) {\n            break;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnl9kciqm: /tmp/tmpnl9kciqm.cpp:21: long int is_bored(std::string): Assertion
    `false'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i <S.length(); i++)\n    {\n        if(S[i] == '.'\
    \ || S[i] == '?' || S[i] == '!')\n            count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmpkq8b9q: /tmp/tmpmpkq8b9q.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::map<long,\
    \ bool> m;\n    m.insert(std::pair<long, bool>(1, false));\n    long boredoms\
    \ = 0;\n    std::string ss[];\n    for (size_t i = 0; i != S.size(); i++) {\n\
    \        if (S[i] == '.') {\n            boredoms += 1;\n            ss[i] = S;\n\
    \        } else if (S[i] == '!') {\n            boredoms += 1;\n            ss[i]\
    \ = S;\n        } else if (S[i] == '?') {\n            boredoms += 1;\n      \
    \      ss[i] = S;\n        }\n    }\n    std::string ss[5];\n    for (int i =\
    \ 0; i != 5; i++) {\n        boredoms += is_bored_helper(ss[i]);\n    }\n    return\
    \ boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbm1tusn6.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpbm1tusn6.cpp:11:17: error: array size missing in \u2018ss\u2019\n \
    \  11 |     std::string ss[];\n      |                 ^~\n/tmp/tmpbm1tusn6.cpp:24:17:\
    \ error: conflicting declaration \u2018std::string ss [5]\u2019\n   24 |     std::string\
    \ ss[5];\n      |                 ^~\n/tmp/tmpbm1tusn6.cpp:11:17: note: previous\
    \ declaration as \u2018std::string ss [1]\u2019\n   11 |     std::string ss[];\n\
    \      |                 ^~\n/tmp/tmpbm1tusn6.cpp:26:21: error: \u2018is_bored_helper\u2019\
    \ was not declared in this scope\n   26 |         boredoms += is_bored_helper(ss[i]);\n\
    \      |                     ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660094422
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int n = S.length();\n\
    \    int bored = 0;\n    for (int i = 0; i < n; ++i) {\n        // Your code goes\
    \ here\n        bored = bored + __builtin_popcount(S[i]);\n    }\n    return bored;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp9ag00bhc: /tmp/tmp9ag00bhc.cpp:18: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredoms\
    \ = 0;\n    for(int i=0; S[i]; i++) {\n        if(S[i] == '.') {\n           \
    \ boredoms++;\n        } else if(S[i] == '?') {\n            boredoms++;\n   \
    \     } else if(S[i] == '!') {\n            boredoms++;\n        }\n    }\n  \
    \  return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmphcqs8emr: /tmp/tmphcqs8emr.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0; // To keep count of the number of boredoms\n    std::string boredoms =\
    \ {\"I.\", \"i.\", \"I am\", \"I am \",\n                           \"I?\", \"\
    am I\", \"I was\", \"I his\",\n                           \"I was?\", \"am I not\"\
    , \"am I was?\"};\n    for (int i = 0; i <= S.size(); i++) {\n        if (boredoms.find(S[i])\
    \ != boredoms.end()) count++;\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgknfp5xl.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpgknfp5xl.cpp:11:61: error: could not convert \u2018{\"I.\", \"i.\"\
    , \"I am\", \"I am \", \"I?\", \"am I\", \"I was\", \"I his\", \"I was?\", \"\
    am I not\", \"am I was?\"}\u2019 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   11 |                            \"I was?\", \"am I not\", \"am I was?\"\
    };\n      |                                                             ^\n  \
    \    |                                                             |\n      |\
    \                                                             <brace-enclosed\
    \ initializer list>\n/tmp/tmpgknfp5xl.cpp:13:33: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::__cxx11::basic_string<char>::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019} and \u2018std::__cxx11::basic_string<char>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019})\n   13 |         if (boredoms.find(S[i]) != boredoms.end()) count++;\n\
    \      |             ~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~\n      |          \
    \                |                     |\n      |                          | \
    \                    std::__cxx11::basic_string<char>::iterator {aka __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >}\n      |                          std::__cxx11::basic_string<char>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpgknfp5xl.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_Iterato"
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Print \"\
    The string S starts with \"I\"\"\n  // Print \"The string S contains \".\"\n \
    \ // Print \"The string S contains \"?\"\n  // Print \"The string S contains \"\
    !\"\n  assert(S.size() > 0);\n  assert(S.size() <= 100);\n  long result = 0;\n\
    \  assert(S[0] == 'I');\n  int count_dot = 0;\n  int count_question = 0;\n  int\
    \ count_exclamation = 0;\n  for(int i = 1; i < S.size(); ++i) {\n    char c =\
    \ S[i];\n    if(c == '.') {\n      count_dot++;\n    } else if(c == '?') {\n \
    \     count_question++;\n    } else if(c == '!') {\n      count_exclamation++;\n\
    \    } else {\n      assert(false);\n    }\n    if(c == '.' || c == '?' || c ==\
    \ '!') {\n      assert(false);\n    }\n  }\n  assert(count_dot < count_question);\n\
    \  assert(count_question < count_exclamation);\n  assert(count_dot == 0 || count_question\
    \ < count_dot);\n  assert(count_dot == 0 || count_exclamation < count_question);\n\
    \  result += (count_dot == 0) ? 1 : 0;\n  result += (count_question < count_dot)\
    \ ? 1 : 0;\n  result += (count_exclamation < count_question) ? 1 : 0;\n  assert(result\
    \ <= 2);\n  return result;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpghdhxbc1: /tmp/tmpghdhxbc1.cpp:15: long int is_bored(std::string): Assertion
    `S[0] == ''I'''' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Your code\
    \ goes here\n    std::istringstream iss(S);\n    std::string token;\n    bool\
    \ bored = false;\n    int boredom_count = 0;\n\n    std::getline(iss, token);\n\
    \    while (iss)\n    {\n        if (token == \"I\")\n        {\n            bored\
    \ = true;\n        }\n\n        std::getline(iss, token);\n    }\n    if (iss)\n\
    \    {\n        bored = true;\n    }\n    return bored? boredom_count : 0;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplkmc69hb: /tmp/tmplkmc69hb.cpp:34: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // ++p is\
    \ used to increment the count of boredoms\n    long p = 0;\n    // i is the index\
    \ pointer of the first occurrence of 'I'\n    long i = 0;\n    // while loop checks\
    \ the string\n    while (i < S.size()) {\n        // If 'I' is the first character\
    \ of the string and there is no\n        // space between consecutive 'I' then\
    \ increment the count\n        if (S[i] == 'I' && i < S.size() - 1) {\n      \
    \      ++p;\n        }\n        // If there is a space between consecutive 'I',\
    \ then decrement\n        // the count.\n        else if (S[i] == ' ') {\n   \
    \         --p;\n        }\n        // increment index pointer\n        ++i;\n\
    \    }\n    return p;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0kenbxg6: /tmp/tmp0kenbxg6.cpp:31: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Get the first\
    \ character of the string\n  char c = S[0];\n  // If it's not a \".\", \"?\",\
    \ or \"!\" then it's not bored\n  if (c != '.' && c != '?' && c != '!')\n    return\
    \ 0;\n  // If the string starts with \"I\", it's bored\n  if (c == 'I')\n    return\
    \ 1;\n  // Get the first character of the next string\n  c = S[1];\n  // If it's\
    \ not a \".\", \"?\", or \"!\" then it's not bored\n  if (c != '.' && c != '?'\
    \ && c != '!')\n    return 0;\n  // If it's \"I\", it's bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"!\" then it's\
    \ not bored\n  if (c != '.' && c != '?' && c != '!')\n    return 0;\n  // If it's\
    \ not \"I\" and not \".\", \"?\", or \"!\" then it's not bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"!\" then it's\
    \ not bored\n  if (c != '.' && c != '?' && c != '!')\n    return 0;\n  // If it's\
    \ not \"I\" and not \".\", \"?\", or \"!\" then it's not bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"!\" then it's\
    \ not bored\n  if (c != '.' && c != '?' && c != '!')\n    return 0;\n  // If it's\
    \ not \"I\" and not \".\", \"?\", or \"!\" then it's not bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"!\" then it's\
    \ not bored\n  if (c != '.' && c != '?' && c != '!')\n    return 0;\n  // If it's\
    \ not \"I\" and not \".\", \"?\", or \"!\" then it's not bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"!\" then it's\
    \ not bored\n  if (c != '.' && c != '?' && c != '!')\n    return 0;\n  // If it's\
    \ not \"I\" and not \".\", \"?\", or \"!\" then it's not bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"!\" then it's\
    \ not bored\n  if (c != '.' && c != '?' && c != '!')\n    return 0;\n  // If it's\
    \ not \"I\" and not \".\", \"?\", or \"!\" then it's not bored\n  if (c == 'I')\n\
    \    return 1;\n  // If it's not \"I\" and not \".\", \"?\", or \"\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8hgbklxy: /tmp/tmp8hgbklxy.cpp:66: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Complete\
    \ this function\n  long boredoms = 0;\n\n  for (int i = 0; i < S.size(); i++)\
    \ {\n    if (S[i] == 'I') {\n      boredoms += 1;\n    }\n  }\n\n  return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6axumifj: /tmp/tmp6axumifj.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::map<std::string,long>\
    \ m; //key = boredoms , value = number of occurences\n    int pos = 0;\n    int\
    \ boredom_count = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!') {\n            pos = i;\n        }\n \
    \       if (S[i] == S[0]) {\n            boredom_count++;\n            S.replace(pos,\
    \ 1, \" \"); //remove first char of sentence\n        }\n    }\n    int size =\
    \ S.size();\n    for (int i = 1; i < size; i++) {\n        if (S[i] == S[0]) {\n\
    \            boredom_count++;\n            S.replace(i, 1, \" \"); //remove first\
    \ char of sentence\n        }\n    }\n    m.insert({S, boredom_count});\n    for\
    \ (auto i : m) {\n        if (i.first == \"I\") {\n            return i.second;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpz9qwelm4: /tmp/tmpz9qwelm4.cpp:37: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  std::map<std::string,long>\
    \ boredoms;\n  \n  for (auto &s : S){\n    boredoms.insert(std::pair<std::string,\
    \ long>(s,0));\n  }\n  \n  for (auto &s : S){\n    if (s[0] == 'I'){\n      boredoms[s]\
    \ += 1;\n    }\n  }\n  return boredoms.size();\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_c4n8q2.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpm_c4n8q2.cpp:11:53: error: no matching function for call to \u2018\
    std::pair<std::__cxx11::basic_string<char>, long int>::pair(char&, int)\u2019\n\
    \   11 |     boredoms.insert(std::pair<std::string, long>(s,0));\n      |    \
    \                                                 ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpm_c4n8q2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:436:9:\
    \ note: candidate: \u2018template<class ... _Args1, long unsigned int ..._Indexes1,\
    \ class ... _Args2, long unsigned int ..._Indexes2> std::pair<_T1, _T2>::pair(std::tuple<_Args1\
    \ ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2\
    \ ...>)\u2019\n  436 |         pair(tuple<_Args1...>&, tuple<_Args2...>&,\n  \
    \    |         ^~~~\n/usr/include/c++/9/bits/stl_pair.h:436:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpm_c4n8q2.cpp:11:53: note: \
    \  mismatched types \u2018std::tuple<_Tps ...>\u2019 and \u2018char\u2019\n  \
    \ 11 |     boredoms.insert(std::pair<std::string, long>(s,0));\n      |      \
    \                                               ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpm_c4n8q2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:375:9:\
    \ note: candidate: \u2018template<class ... _Args1, class ... _Args2> std::pair<_T1,\
    \ _T2>::pair(std::piecewise_construct_t, std::tuple<_Args1 ...>, std::tuple<_Args2\
    \ ...>)\u2019\n  375 |         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);\n\
    \      |         ^~~~\n/usr/include/c++/9/bits/stl_pair.h:375:9: note:   template\
    \ argument dedu"
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored\
    \ = 0;\n    std::string sentence = S;\n    \n    // Start with 0 boredoms for\
    \ each word.\n    std::transform(sentence.begin(), sentence.end(), sentence.begin(),\
    \ ::tolower);\n    \n    // Ignore punctuations\n    auto it = std::find_if(sentence.begin(),\
    \ sentence.end(), [](char c){ return !std::isalnum(c); });\n    sentence.erase(it,\
    \ sentence.end());\n    \n    // Ignore special chars\n    it = std::find_if(sentence.begin(),\
    \ sentence.end(), [](char c){ return !std::isspace(c); });\n    sentence.erase(it,\
    \ sentence.end());\n    \n    // Find any word that starts with \"I\"\n    std::string::size_type\
    \ Ipos = 0;\n    it = std::find_if(sentence.begin(), sentence.end(), [&Ipos](char\
    \ c){ return c == 'i'; });\n    Ipos = it - sentence.begin();\n    \n    // If\
    \ 'I' has been found, find the following period and the following period\n   \
    \ it = std::find_if(sentence.begin()+Ipos, sentence.end(), [&Ipos](char c){ return\
    \ c == '.' && Ipos == 2});\n    \n    // If period is found then increase boredom\
    \ by 1\n    if(it != sentence.end() && Ipos == 2) {\n        bored++;\n    }\n\
    \    \n    // Return boredom\n    return bored;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv868cmjw.cpp: In lambda function:\n/tmp/tmpv868cmjw.cpp:28:107:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   28 |     it = std::find_if(sentence.begin()+Ipos,\
    \ sentence.end(), [&Ipos](char c){ return c == '.' && Ipos == 2});\n      |  \
    \                                                                            \
    \                             ^\n      |                                     \
    \                                                                      ;\n"
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    // Your code goes here!\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsx3szn64: /tmp/tmpsx3szn64.cpp:16: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0, bored = 1;\n    for (int i = 0; i < S.size(); i++) {\n        switch (S[i])\
    \ {\n        case '?':\n        case '!':\n            bored = 0;\n          \
    \  count++;\n            break;\n        default:\n            if (S[i] == '.')\
    \ {\n                count++;\n            }\n        }\n    }\n    return bored\
    \ && count == 1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpnp6q46xe: /tmp/tmpnp6q46xe.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    int count = 0;\n    for(int i=0;i<S.size();i++) {\n        if(S[i]\
    \ == 'I') {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp18vdej6e: /tmp/tmp18vdej6e.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2azmczm5: /tmp/tmp2azmczm5.cpp:15: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int countI\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        switch (S[i]) {\n  \
    \      case 'I':\n            countI++;\n            break;\n        }\n    }\n\
    \    return countI;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp58txksoi: /tmp/tmp58txksoi.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    assert(S.size()\
    \ > 0);\n    long ans = 0;\n    int pos = 0;\n    while(pos < S.size()) {\n  \
    \      if(S[pos] == '.') {\n            ans = ans + 1;\n            while(pos\
    \ < S.size() && S[pos] != '.') {\n                pos++;\n            }\n    \
    \    }\n        if(S[pos] == '?') {\n            ans = ans + 1;\n            while(pos\
    \ < S.size() && S[pos] != '?') {\n                pos++;\n            }\n    \
    \    }\n        if(S[pos] == '!') {\n            ans = ans + 1;\n            while(pos\
    \ < S.size() && S[pos] != '!') {\n                pos++;\n            }\n    \
    \    }\n        pos++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpqickuczw: /tmp/tmpqickuczw.cpp:37: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    long n = 0;\n    for (char &c : S)\n        if (std::tolower(c) ==\
    \ '.' || std::tolower(c) == '?' || std::tolower(c) == '!')\n            ++count;\n\
    \        else\n            ++n;\n    return count;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpfdxpec2_: /tmp/tmpfdxpec2_.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredCount\
    \ = 0;\n    int i = 0;\n    char boredoms[5][5] = {\n        \"bored.\", \"bored.\"\
    , \"boreed.\", \"boreed\", \"borein\"\n    };\n\n    while (S[i] != '\\0') {\n\
    \        if (isupper(S[i])) {\n            boredCount++;\n            i++;\n \
    \       }\n        else {\n            if (boredCount == 0) {\n              \
    \  i = 0;\n                boredCount++;\n            }\n            else if (boredCount\
    \ > 0) {\n                if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n \
    \                   i++;\n                    boredCount--;\n                }\n\
    \            }\n        }\n    }\n    return boredCount;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpplxb8_kl.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpplxb8_kl.cpp:11:9: error: initializer-string for array of chars is\
    \ too long [-fpermissive]\n   11 |         \"bored.\", \"bored.\", \"boreed.\"\
    , \"boreed\", \"borein\"\n      |         ^~~~~~~~\n/tmp/tmpplxb8_kl.cpp:11:19:\
    \ error: initializer-string for array of chars is too long [-fpermissive]\n  \
    \ 11 |         \"bored.\", \"bored.\", \"boreed.\", \"boreed\", \"borein\"\n \
    \     |                   ^~~~~~~~\n/tmp/tmpplxb8_kl.cpp:11:29: error: initializer-string\
    \ for array of chars is too long [-fpermissive]\n   11 |         \"bored.\", \"\
    bored.\", \"boreed.\", \"boreed\", \"borein\"\n      |                       \
    \      ^~~~~~~~~\n/tmp/tmpplxb8_kl.cpp:11:40: error: initializer-string for array\
    \ of chars is too long [-fpermissive]\n   11 |         \"bored.\", \"bored.\"\
    , \"boreed.\", \"boreed\", \"borein\"\n      |                               \
    \         ^~~~~~~~\n/tmp/tmpplxb8_kl.cpp:11:50: error: initializer-string for\
    \ array of chars is too long [-fpermissive]\n   11 |         \"bored.\", \"bored.\"\
    , \"boreed.\", \"boreed\", \"borein\"\n      |                               \
    \                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    // Declare a vector of strings to store the words.\n    std::vector<std::string>\
    \ words;\n    // Initialize a vector to store the boredom words.\n    // For boredom\
    \ words, the vector will be empty.\n    for (auto &word : S) {\n        // If\
    \ the current word is a boredom word.\n        if (word == \"I\") {\n        \
    \    // Add the word to the boredom vector.\n            boredoms += 1;\n    \
    \    }\n        // If the current word is a punctuation mark.\n        else if\
    \ (word == \".\" || word == \"?\" || word == \"!\") {\n            // Add the\
    \ word to the punctuation vector.\n            words.push_back(word);\n      \
    \  }\n    }\n    // Return the number of boredoms.\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxu_xq2v0.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpxu_xq2v0.cpp:15:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   15 |         if (word == \"I\") {\n      |  \
    \                   ^~~\n/tmp/tmpxu_xq2v0.cpp:20:26: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   20 |         else if (word ==\
    \ \".\" || word == \"?\" || word == \"!\") {\n      |                        \
    \  ^~~\n/tmp/tmpxu_xq2v0.cpp:20:41: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   20 |         else if (word == \".\" ||\
    \ word == \"?\" || word == \"!\") {\n      |                                 \
    \        ^~~\n/tmp/tmpxu_xq2v0.cpp:20:56: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   20 |         else if (word == \".\" ||\
    \ word == \"?\" || word == \"!\") {\n      |                                 \
    \                       ^~~\n/tmp/tmpxu_xq2v0.cpp:22:33: error: no matching function\
    \ for call to \u2018std::vector<std::__cxx11::basic_string<char> >::push_back(char&)\u2019\
    \n   22 |             words.push_back(word);\n      |                        \
    \         ^\nIn file included from /usr/include/c++/9/vector:67,\n           \
    \      from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpxu_xq2v0.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ value_type&\u2019 {aka \u2018const std::__cxx11::basi"
  stdout: ''
  timestamp: 1660094423
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long N = 0;\n\
    \    int i = 0;\n    while (i != S.size()) {\n        if (islower(S[i])) {\n \
    \           while (i != S.size() && islower(S[i - 1])\n                    &&\
    \ S[i] == S[i - 1]) {\n                i++;\n            }\n            if (i\
    \ != S.size() && isupper(S[i])) {\n                N++;\n                while\
    \ (i != S.size() && !islower(S[i - 1])\n                        && S[i] == S[i\
    \ - 1]) {\n                    i++;\n                }\n            }\n      \
    \  } else if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            while\
    \ (i != S.size() && S[i] == S[i - 1]) {\n                i++;\n            }\n\
    \        }\n    }\n    return N;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    int n = S.size();\n    for (int i = 0; i < n; i++) {\n        if (S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!')\n            count++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm7dnvh0z: /tmp/tmpm7dnvh0z.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long cnt =\
    \ 0;\n    // Loop through the given string from left to right\n    for (int i\
    \ = 0; i <= S.size(); i++) {\n        // If the ith character is '.', then increment\
    \ the count\n        // If the ith character is ?, increment the count\n     \
    \   // If the ith character is !, increment the count\n        if (S[i] == '.')\
    \ {\n            cnt += 1;\n        } else if (S[i] == '?') {\n            cnt\
    \ += 1;\n        } else {\n            cnt += 1;\n        }\n    }\n    return\
    \ cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsw34450x: /tmp/tmpsw34450x.cpp:26: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long N = 0;\n\
    \    std::string st = \"I\";\n    for (auto &word : S) {\n        if (word ==\
    \ st) {\n            N++;\n        }\n    }\n    return N;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6oi11ha5.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp6oi11ha5.cpp:11:18: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018char\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   11 |         if (word == st) {\n      |             ~~~~ ^~ ~~\n      |\
    \             |       |\n      |             char    std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp6oi11ha5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp6oi11ha5.cpp:11:21:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   11 |         if (word == st) {\n      |           \
    \          ^~\nIn file included from /usr/include/c++/9/regex:62,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n        \
    \         from /tmp/tmp6oi11ha5.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp6oi11ha5.cpp:11:21: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018char\u2019\n   11 |         if (word\
    \ == st) {\n      |                     ^~\nIn file included from /usr/includ"
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int len = 0;\n\
    \  int count = 0;\n  char last = ' ';\n  for (int i = 0; i < S.size(); i++) {\n\
    \    last = S[i];\n    if (last == '.' || last == '?' || last == '!') {\n    \
    \  count++;\n    }\n    if (last == 'I') {\n      len++;\n    }\n  }\n  return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplyierdsq: /tmp/tmplyierdsq.cpp:25: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long cnt =\
    \ 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!')\n            cnt++;\n    }\n    return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdko0ko8w: /tmp/tmpdko0ko8w.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    int len1 = S.size();\n    std::string str = S;\n    bool flag\
    \ = false;\n    long ans = 0;\n    for (int i = 0; i < len1; i++) {\n        if\
    \ (S[i] == '.') {\n            if (flag) {\n                ans += 1;\n      \
    \      }\n            flag = true;\n        } else {\n            if (flag) {\n\
    \                ans += 1;\n            }\n            flag = false;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpga26byt9: /tmp/tmpga26byt9.cpp:32: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored\
    \ = 0;\n    // TODO: Your code goes here\n    return bored;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi_wzxouw: /tmp/tmpi_wzxouw.cpp:16: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094423
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n\tint boredom_count\
    \ = 0;\n\tint i = 0, j = 0; // index\n\twhile (i < S.size() && j < S.size() &&\
    \ S[i] != \".\" && S[j] != \".\" && S[i] != '?' && S[j] != '?' && S[i] != '!'\
    \ && S[j] != '!') {\n\t\tif (S[i] == 'I' && S[j] == 'I') {\n\t\t\tboredom_count++;\n\
    \t\t\ti++; j++;\n\t\t} else if (S[i] == 'I' && S[j] == '.') {\n\t\t\tboredom_count++;\n\
    \t\t\ti++; j++;\n\t\t} else if (S[i] == '.' && S[j] == '.') { // dot \".\" is\
    \ a sentence-delimiter\n\t\t\ti++; j++;\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\
    \treturn boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpywskh0ec.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpywskh0ec.cpp:10:49: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   10 |  while (i < S.size() && j < S.size() &&\
    \ S[i] != \".\" && S[j] != \".\" && S[i] != '?' && S[j] != '?' && S[i] != '!'\
    \ && S[j] != '!') {\n      |                                                 ^~~\n\
    /tmp/tmpywskh0ec.cpp:10:64: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   10 |  while (i < S.size() && j < S.size() &&\
    \ S[i] != \".\" && S[j] != \".\" && S[i] != '?' && S[j] != '?' && S[i] != '!'\
    \ && S[j] != '!') {\n      |                                                 \
    \               ^~~\n"
  stdout: ''
  timestamp: 1660094423
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int i;\n  long\
    \ num = 0;\n  int flag = 0;\n  for (i = 0; i < S.size(); i++) {\n    if (S[i]\
    \ == '.') {\n      if (flag == 1) {\n        flag = 0;\n        num = num + 1;\n\
    \      }\n    } else if (S[i] == '?') {\n      if (flag == 0) {\n        flag\
    \ = 1;\n        num = num + 1;\n      }\n    } else if (S[i] == '!') {\n     \
    \ if (flag == 0) {\n        flag = 1;\n        num = num + 1;\n      }\n    }\n\
    \  }\n  return num;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5_6d9q7g: /tmp/tmp5_6d9q7g.cpp:34: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    bool b1 = S.find(\"I\") != std::string::npos;\n    bool b2 = S.find(\"\
    .\") != std::string::npos;\n    bool b3 = S.find(\"?\") != std::string::npos;\n\
    \    bool b4 = S.find(\"!\") != std::string::npos;\n    bool b5 = S.find(\"bore\"\
    ) != std::string::npos;\n    bool b6 = S.find(\"bored\") != std::string::npos;\n\
    \    bool b7 = S.find(\"bores\") != std::string::npos;\n    bool b8 = S.find(\"\
    bores\") != std::string::npos;\n    bool b9 = S.find(\"bored\") != std::string::npos;\n\
    \    bool b10 = S.find(\"bored\") != std::string::npos;\n    bool b11 = S.find(\"\
    bores\") != std::string::npos;\n    bool b12 = S.find(\"bore\") != std::string::npos;\n\
    \    bool b13 = S.find(\"bore\") != std::string::npos;\n    bool b14 = S.find(\"\
    bored\") != std::string::npos;\n    bool b15 = S.find(\"bore\") != std::string::npos;\n\
    \    bool b16 = S.find(\"bored\") != std::string::npos;\n    bool b17 = S.find(\"\
    bored\") != std::string::npos;\n    bool b18 = S.find(\"bored\") != std::string::npos;\n\
    \    bool b19 = S.find(\"bored\") != std::string::npos;\n    bool b20 = S.find(\"\
    bored\") != std::string::npos;\n    bool b21 = S.find(\"bored\") != std::string::npos;\n\
    \    bool b22 = S.find(\"bore\") != std::string::npos;\n    bool b23 = S.find(\"\
    bore\") != std::string::npos;\n    bool b24 = S.find(\"bored\") != std::string::npos;\n\
    \    bool b25 = S.find(\"bored\") != std::string::npos;\n    bool b26 = S.find(\"\
    bored\") != std::string::npos;\n    bool b27 = S.find(\"bore\") != std::string::npos;\n\
    \    bool b28 = S.find(\"bored\") != std::string::npos;\n    bool b29 = S.find(\"\
    bored\") != std::string::npos;\n    bool b30 = S.find(\"bore\") != std::string::npos;\n\
    \    bool b31 = S.find(\"bored\") != std::string::npos;\n\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppsn18odv: /tmp/tmppsn18odv.cpp:44: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int N = S.length();\n\
    \  int cnt = 0;\n  for (int i = 0; i < N; i++) {\n    char c = S[i];\n    if (c\
    \ == '.' || c == '?' || c == '!') {\n      cnt++;\n    }\n  }\n  return cnt;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_6bli4ah: /tmp/tmp_6bli4ah.cpp:21: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  long n = 0;\n\
    \  for(int i = 0; i<S.length(); i++){\n    \n    if(S[i]=='I'){\n      n++;\n\
    \    }\n    \n    \n  }\n  \n  return n;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpwd8flu3n: /tmp/tmpwd8flu3n.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    std::string word;\n    std::istringstream iss(S);\n    std::string\
    \ token;\n    while(std::getline(iss,token,'.','?','!')) {\n        if(token ==\
    \ \"I\") count ++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9wjrjvo.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpw9wjrjvo.cpp:12:45: error: no matching function for call to \u2018\
    getline(std::istringstream&, std::string&, char, char, char)\u2019\n   12 |  \
    \   while(std::getline(iss,token,'.','?','!')) {\n      |                    \
    \                         ^\nIn file included from /usr/include/c++/9/string:56,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw9wjrjvo.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::getline(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Allocator>&, _CharT)\u2019\n 1538 |     getline(basic_istream<_CharT,\
    \ _Traits>& __in,\n      |     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.tcc:1538:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpw9wjrjvo.cpp:12:45:\
    \ note:   candidate expects 3 arguments, 5 provided\n   12 |     while(std::getline(iss,token,'.','?','!'))\
    \ {\n      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:5"
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom_count\
    \ = 0;\n    for (char c : S) {\n        if (c == 'I' || c == '.' || c == '?' ||\
    \ c == '!') {\n            boredom_count++;\n        }\n    }\n    return boredom_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2az0t8_u: /tmp/tmp2az0t8_u.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  if (S.length()<=1)\n\
    \    return 0;\n  if (S[0]!='I')\n    return 0;\n  int freq[100];\n  assert(S.size()<100);\n\
    \  for (auto &c:S) {\n    freq[c-'A']++;\n  }\n  return freq[S.size()-1];\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpm5nbs1h5: /tmp/tmpm5nbs1h5.cpp:22: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    return 1;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppe6qqmc1: /tmp/tmppe6qqmc1.cpp:13: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // TODO: Build\
    \ a std::unordered_map of the string words and the frequencies\n    // of the\
    \ words before we start counting boredoms.\n    // Your code should use the map\
    \ to check whether the string S starts with \"I\",\n    // but should NOT count\
    \ \"I\" itself as a frequency.\n\n    // Example string \"Isaac!?? was a great.\"\
    \ --> frequency of \"I\" should be 1.\n    // \"Isaac!?? was a great!\" --> frequency\
    \ of \"I\" should be 1.\n    // \"Isaac!?? was a great.?\" --> frequency of \"\
    I\" should be 2.\n    // \"Isaac!?? was a great!?\" --> frequency of \"I\" should\
    \ be 2.\n    // \"Isaac!?? was a great?\" --> frequency of \"I\" should be 2.\n\
    \    // \"Isaac!?? was a great!??\" --> frequency of \"I\" should be 2.\n    //\
    \ \"Isaac!?? was a great.!\" --> frequency of \"I\" should be 2.\n    // \"Isaac!??\
    \ was a great!.\" --> frequency of \"I\" should be 2.\n\n    // Example string\
    \ \"Hey! Hey! Hey!\" --> frequency of \"Hey\" should be 3.\n    // \"Hey! Hey!\
    \ Hey!!\" --> frequency of \"Hey\" should be 3.\n    // \"Hey! Hey! Hey!?\" -->\
    \ frequency of \"Hey\" should be 3.\n    // \"Hey! Hey! Hey!!?\" --> frequency\
    \ of \"Hey\" should be 3.\n\n    // NOTE: Do not count white spaces in the frequencies.\n\
    \    // We may get tricky if the string S contains multiple sentences.\n    //\
    \ If multiple sentences are there, then your code should add each separate\n \
    \   // sentence's frequency to the previous frequency. Example: \"Isaac!?? was\
    \ a\n    // great. Isaac!?? was a great. Isaac!?? was a great.\"\n\n    // Once\
    \ you finish your code, return the total frequencies of boredoms.\n    // The\
    \ code below is for you to debug (do not write main() functions).\n    return\
    \ 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpw0a0is85: /tmp/tmpw0a0is85.cpp:41: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    \n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpf0wztgnu: /tmp/tmpf0wztgnu.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    assert(S.size()\
    \ > 0);\n    int n = 0;\n    for (int i = 0; i < S.size(); ++i) {\n        if\
    \ (S[i] == '.' || S[i] == '?' || S[i] == '!')\n            ++n;\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2dptkj94: /tmp/tmp2dptkj94.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    for (int i = 0; S[i] != '\\0'; i++) {\n        if (S[i] == '.') {\n\
    \            if (S[i + 1] == '.') {\n                count += 1;\n           \
    \ }\n            if (S[i + 1] == '?') {\n                count += 1;\n       \
    \     }\n            if (S[i + 1] == '!') {\n                count += 1;\n   \
    \         }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzgqc1vrh: /tmp/tmpzgqc1vrh.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094424
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    if (S == \"\
    .\")\n        return 0;\n    if (S == \"?\")\n        return 0;\n    if (S ==\
    \ \"!\")\n        return 0;\n\n    bool isVowel = false;\n    for (int i = 0;\
    \ i < S.length(); i++) {\n        if (S[i] == 'a' || S[i] == 'e' || S[i] == 'i'\
    \ || S[i] == 'o' || S[i] == 'u' || S[i] == 'y')\n            isVowel = true;\n\
    \    }\n\n    if (isVowel == true) {\n        int count = 0;\n        for (int\
    \ i = 0; i < S.length(); i++)\n            if (S[i] == 'i' || S[i] == 'e' || S[i]\
    \ == 'o' || S[i] == 'u') {\n                count++;\n            }\n\n      \
    \  return count;\n    }\n\n    int count = 0;\n    for (int i = 0; i < S.length();\
    \ i++) {\n        if (S[i] == 'i' || S[i] == 'e' || S[i] == 'o' || S[i] == 'u')\n\
    \            count++;\n    }\n\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpiprocajv: /tmp/tmpiprocajv.cpp:41: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    assert(S.length()\
    \ > 1);\n    int bored = 0;\n    for (size_t i = 0; i < S.length(); ++i) {\n \
    \       if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            bored +=\
    \ 1;\n        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpy1uu6jm3: /tmp/tmpy1uu6jm3.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int counter\
    \ = 0;\n    // TODO\n    for(int i = 0; i < S.length(); i++) {\n        if(S[i]\
    \ == 'I'){\n            counter++;\n        }\n    }\n    return counter;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp2rlsfd1s: /tmp/tmp2rlsfd1s.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int n = S.size();\n\
    \    int boredom = 0;\n    for(int i=0; i<n; i++)\n    {\n        if(S[i] == 'I'\
    \ && S[i+1] == '.')\n            boredom++;\n        if(S[i] == 'I' && S[i+1]\
    \ == '?')\n            boredom++;\n        if(S[i] == 'I' && S[i+1] == '!')\n\
    \            boredom++;\n    }\n    return boredom;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpblq75hb1: /tmp/tmpblq75hb1.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int result\
    \ = 0;\n    std::string word;\n    int counter = 0;\n    for (auto& c: S) {\n\
    \        if (c == '.') {\n            counter++;\n            word = \"\";\n \
    \       } else if (c == '?') {\n            counter++;\n            word = \"\"\
    ;\n        } else if (c == '!') {\n            counter++;\n            word =\
    \ \"\";\n        } else {\n            word += c;\n        }\n    }\n    while(word.size()\
    \ > 0) {\n        if(word.at(0) == 'I'){\n            result++;\n        }\n \
    \       word.erase(0, 1);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpp54qaynf: /tmp/tmpp54qaynf.cpp:37: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Your code\
    \ goes here\n    long bored = 0;\n    for (long i = 0; i < S.size(); i++)\n  \
    \  {\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!')\n        {\n    \
    \        if (S[i] == S[0])\n            {\n                bored++;\n        \
    \    }\n        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpflabfqrh: /tmp/tmpflabfqrh.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int n = S.size();\n\
    \    long ans = 0;\n    for(int i=0; i<n; ++i) {\n        if(S[i] == '.') {\n\
    \            ans += 1;\n        }\n        if(S[i] == '?') {\n            ans\
    \ += 1;\n        }\n        if(S[i] == '!') {\n            ans += 1;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpvwl4ikt3: /tmp/tmpvwl4ikt3.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  assert(S.size()\
    \ > 0);\n  int cnt = 0;\n  for (int i = 0; i < S.size(); ++i) {\n    if (S[i]\
    \ == '.') cnt++;\n    else if (S[i] == '?' || S[i] == '!') cnt--;\n    else cnt++;\n\
    \  }\n  return cnt;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpzm6afall: /tmp/tmpzm6afall.cpp:19: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  std::map<std::string,long>\
    \ m;\n  std::string temp;\n  for (int i = 0; i < S.length(); i++) {\n    if (S[i]\
    \ == '.') {\n      if (i == 0 || S[i-1] == '?' || S[i-1] == '!')\n        m[temp]++;\n\
    \      temp = S.substr(0, i);\n    }\n  }\n  if(m.count(temp))\n    return m[temp];\n\
    \  else\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpuw31bfp1: /tmp/tmpuw31bfp1.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    assert(S.size()\
    \ == 5);\n    // Declare and initialize the count variable.\n    int count = 0;\n\
    \n    // Read each character in S into char variable.\n    for (int i = 0; i <\
    \ S.size(); ++i) {\n        // If current character is equal to 'I', increment\
    \ the count by 1.\n        if (S[i] == 'I') {\n            ++count;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = is_bored;\n \
    \   assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpdhyqbpux: /tmp/tmpdhyqbpux.cpp:8: long int is_bored(std::string): Assertion
    `S.size() == 5'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0 ;\n    char boredoms_str[] = \"I\" ;\n    std::string boredom_str = \" \"\
    \ ;\n    for(int i = 0; i < S.length(); i++) {\n        boredoms += boredoms_str.count(S[i]);\n\
    \        boredom_str += S[i];\n    }\n    return boredoms ;\n}\nint main() {\n\
    \    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqfb3stj.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmppqfb3stj.cpp:12:34: error: request for member \u2018count\u2019 in\
    \ \u2018boredoms_str\u2019, which is of non-class type \u2018char [2]\u2019\n\
    \   12 |         boredoms += boredoms_str.count(S[i]);\n      |              \
    \                    ^~~~~\n"
  stdout: ''
  timestamp: 1660094425
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom_count\
    \ = 0;\n    long i = 0;\n    for (auto &word: S) {\n        if (word == \"I\"\
    ) {\n            if (i == 0) {\n                boredom_count += 1;\n        \
    \    }\n            i += 1;\n        } else if (word == \".\") {\n           \
    \ if (i == 0) {\n                boredom_count += 1;\n            }\n        \
    \    i += 1;\n        } else if (word == \"?\") {\n            if (i == 0) {\n\
    \                boredom_count += 1;\n            }\n            i += 1;\n   \
    \     } else if (word == \"!\") {\n            if (i == 0) {\n               \
    \ boredom_count += 1;\n            }\n            i += 1;\n        }\n    }\n\
    \    return boredom_count;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpajsn5bv8.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpajsn5bv8.cpp:11:21: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   11 |         if (word == \"I\") {\n      |  \
    \                   ^~~\n/tmp/tmpajsn5bv8.cpp:16:28: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   16 |         } else if (word\
    \ == \".\") {\n      |                            ^~~\n/tmp/tmpajsn5bv8.cpp:21:28:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   21 |         } else if (word == \"?\") {\n      |                        \
    \    ^~~\n/tmp/tmpajsn5bv8.cpp:26:28: error: ISO C++ forbids comparison between\
    \ pointer and integer [-fpermissive]\n   26 |         } else if (word == \"!\"\
    ) {\n      |                            ^~~\n"
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::string\
    \ words[] = {\"I\", \"are\", \"good\", \"!\", \"!\", \"!\", \"?\", \"?\", \".\"\
    , \".\"};\n    std::sort(std::begin(words), std::end(words));\n    for(auto it\
    \ = std::begin(words); it != std::end(words); ++it) {\n        if(S.find(*it)\
    \ != 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8pms3lhm: /tmp/tmp8pms3lhm.cpp:19: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int cnt=0;\n\
    \  if(S == \"I\")\n    return 1;\n  for(int i=0;i<S.length();++i)\n    if(S[i]\
    \ == '.' || S[i] == '?' || S[i] == '!')\n      cnt++;\n  return cnt;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpd8bq_zgj: /tmp/tmpd8bq_zgj.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    auto count_i\
    \ = [](std::string S) {\n        std::cin >> S;\n        long count = 0;\n   \
    \     for(int i = 0; i < S.size(); i++)\n        {\n            if(S[i] == \"\
    I\") ++count;\n        }\n        return count;\n    };\n    auto count_i = [&count_i](std::string\
    \ S) {\n        auto count_i = [](std::string S) {\n            std::cin >> S;\n\
    \            long count = 0;\n            for(int i = 0; i < S.size(); i++)\n\
    \            {\n                if(S[i] == \"I\") ++count;\n            }\n  \
    \          return count;\n        };\n        std::cin >> S;\n        long count\
    \ = 0;\n        for(int i = 0; i < S.size(); i++)\n        {\n            if(S[i]\
    \ == \"I\") ++count;\n        }\n        return count;\n    };\n    std::cin >>\
    \ S;\n    long count = 0;\n    for(int i = 0; i < S.size(); i++)\n    {\n    \
    \    if(S[i] == \"I\") ++count;\n    }\n    return count;\n}\nint main() {\n \
    \   auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38kv0hdb.cpp: In lambda function:\n/tmp/tmp38kv0hdb.cpp:13:24:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   13 |             if(S[i] == \"I\") ++count;\n      |                     \
    \   ^~~\n/tmp/tmp38kv0hdb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp38kv0hdb.cpp:17:10: error: conflicting declaration \u2018auto count_i\u2019\
    \n   17 |     auto count_i = [&count_i](std::string S) {\n      |          ^~~~~~~\n\
    /tmp/tmp38kv0hdb.cpp:8:10: note: previous declaration as \u2018is_bored(std::string)::<lambda(std::string)>\
    \ count_i\u2019\n    8 |     auto count_i = [](std::string S) {\n      |     \
    \     ^~~~~~~\n/tmp/tmp38kv0hdb.cpp: In lambda function:\n/tmp/tmp38kv0hdb.cpp:23:28:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   23 |                 if(S[i] == \"I\") ++count;\n      |                 \
    \           ^~~\n/tmp/tmp38kv0hdb.cpp: In lambda function:\n/tmp/tmp38kv0hdb.cpp:31:24:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   31 |             if(S[i] == \"I\") ++count;\n      |                     \
    \   ^~~\n/tmp/tmp38kv0hdb.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp38kv0hdb.cpp:39:20: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   39 |         if(S[i] == \"I\") ++count;\n   \
    \   |                    ^~~\n"
  stdout: ''
  timestamp: 1660094425
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Complete\
    \ the code here\n  // You do not have to check for empty string S\n  std::string\
    \ boredoms_found;\n  boredoms_found = \"I\";\n  int boredoms = 0;\n  for (size_t\
    \ i = 0; i < S.size(); i++) {\n    if (S[i] == 'I') {\n      boredoms = boredoms\
    \ + 1;\n      boredoms_found = boredoms_found + \".\";\n    }\n  }\n  return boredoms;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0vlvyi3i: /tmp/tmp0vlvyi3i.cpp:24: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int count\
    \ = 0;\n    for(int i = 0; i <= S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxgujli7t: /tmp/tmpxgujli7t.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    auto it =\
    \ std::find(S.begin(), S.end(), '.');\n    if (it == S.end()) {\n        it =\
    \ std::find(S.begin(), S.end(), '?');\n    }\n    if (it == S.end()) {\n     \
    \   it = std::find(S.begin(), S.end(), '!');\n    }\n    if (it != S.begin())\
    \ {\n        return S.size() - std::distance(S.begin(), it);\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpt41l29w6: /tmp/tmpt41l29w6.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  long cnt = 0;\n\
    \  int pos = 0;\n  for (; pos < S.size(); pos++) {\n    if (S[pos] == '.' || S[pos]\
    \ == '?' || S[pos] == '!') cnt++;\n  }\n  return cnt;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpoqziriji: /tmp/tmpoqziriji.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    for (long i = 0; i < S.size(); i++) {\n        if (S[i] == '.') {\n\
    \            if (S[i+1] == '!' || S[i+1] == '?') {\n                count++;\n\
    \                i++;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpk1lmrpdf: /tmp/tmpk1lmrpdf.cpp:23: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for (int i = 0; S[i]; i++) {\n        if (S[i] == 'I')\n         \
    \   boredoms += 1;\n    }\n    return boredoms;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp4a91nyo4: /tmp/tmp4a91nyo4.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int counter\
    \ = 0;\n    int pos = 0;\n    for (;pos < S.size();pos++) {\n        // Iterate\
    \ through each character in each word\n        switch (S.at(pos)) {\n        \
    \    case 'I':\n                counter++;\n                break;\n         \
    \   case '!':\n                counter--;\n                break;\n          \
    \  case '.':\n            case '?':\n                break;\n            default:\n\
    \                break;\n        }\n    }\n    return counter;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpcoobp0iz: /tmp/tmpcoobp0iz.cpp:31: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int i=0;\n\
    \    long boredom = 0;\n    for (int i = 0; i<S.length(); i++){\n        if (S[i]\
    \ == 'I' && S[i+1] == '.'){\n            boredom++;\n        }\n    }\n    return\
    \ boredom;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_iy4bjkk: /tmp/tmp_iy4bjkk.cpp:21: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == '.' || S[i]\
    \ == '?' || S[i] == '!') {\n            if (S[i] == '.') boredom++;\n        }\n\
    \    }\n    return boredom;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpat5eyol1: /tmp/tmpat5eyol1.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // TODO: Your\
    \ code goes here\n    std::set<char> words;\n    std::string word;\n    std::istringstream\
    \ iss(S);\n    while(iss >> word){\n        words.insert(word[0]);\n    }\n  \
    \  long count = 0;\n    for (char ch : words){\n        if (ch == 'I'){\n    \
    \        count +=1;\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpps67c3_6: /tmp/tmpps67c3_6.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094426
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long cnt =\
    \ 0;\n    std::unordered_map<unsigned long, int> freq;\n    for (size_t i = 0;\
    \ i < S.size(); ++i) {\n        char c = S[i];\n        if (c == '.' || c == '!'\
    \ || c == '?') {\n            if (freq.find(freq.end() + 1) == freq.end()) {\n\
    \                freq.insert(std::pair<unsigned long, int>(i, 1));\n         \
    \   } else {\n                freq[i]++;\n            }\n        }\n    }\n  \
    \  for (auto& f : freq) {\n        if ((f.second == 1) && (f.first == 0)) {\n\
    \            cnt++;\n        }\n    }\n    return cnt;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzld1h35t.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpzld1h35t.cpp:13:38: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::unordered_map<long unsigned int, int>::iterator\u2019 {aka\
    \ \u2018std::__detail::_Node_iterator<std::pair<const long unsigned int, int>,\
    \ false, false>\u2019} and \u2018int\u2019)\n   13 |             if (freq.find(freq.end()\
    \ + 1) == freq.end()) {\n      |                           ~~~~~~~~~~ ^ ~\n  \
    \    |                                   |    |\n      |                     \
    \              |    int\n      |                                   std::unordered_map<long\
    \ unsigned int, int>::iterator {aka std::__detail::_Node_iterator<std::pair<const\
    \ long unsigned int, int>, false, false>}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzld1h35t.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzld1h35t.cpp:13:40:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   13 |             if (freq.find(freq.end() + 1) == freq.end())\
    \ {\n      |                                        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzld1h35t.cpp:2:\n/usr/include/c++/9/bits/stl_itera"
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long n = 0;\n\
    \    for(int i=0; S[i] != '\\0'; i++)\n    {\n        // S[i] == ' ' means it\
    \ is a boredom\n        if(S[i] == ' ' && S[i+1] == ' ') n++;\n    }\n    return\
    \ n;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpsef2it70: /tmp/tmpsef2it70.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here.\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpey612o36: /tmp/tmpey612o36.cpp:15: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int N = S.size();\n\
    \  // You can use a vector to save the frequency of words.\n  // You will need\
    \ a vector to save the number of boredoms\n  // for each word in S.\n  std::vector<std::pair<std::string,\
    \ int>> frequency;\n  for (int i = 0; i < N; i++) {\n    int boredom = 0;\n  \
    \  for (size_t j = 0; j < S.size(); j++) {\n      if (S[i] == '.') boredom++;\n\
    \      if (S[i] == '?') boredom++;\n      if (S[i] == '!') boredom++;\n      if\
    \ (S[j] == S[i]) boredom = 0;\n    }\n    frequency.push_back(std::make_pair(S[i\
    \ - boredom], 1));\n  }\n  // Now sort the frequency by count.\n  sort(frequency.begin(),\
    \ frequency.end());\n  // Return how many boredoms exist.\n  return frequency.size();\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz4phz4yv.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpz4phz4yv.cpp:21:58: error: no matching function for call to \u2018\
    std::vector<std::pair<std::__cxx11::basic_string<char>, int> >::push_back(std::pair<char,\
    \ int>)\u2019\n   21 |     frequency.push_back(std::make_pair(S[i - boredom],\
    \ 1));\n      |                                                          ^\nIn\
    \ file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz4phz4yv.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::pair<std::__cxx11::basic_string<char>, int>; _Alloc = std::allocator<std::pair<std::__cxx11::basic_string<char>,\
    \ int> >; std::vector<_Tp, _Alloc>::value_type = std::pair<std::__cxx11::basic_string<char>,\
    \ int>]\u2019\n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known conversion for\
    \ argument 1 from \u2018std::pair<char, int>\u2019 to \u2018const value_type&\u2019\
    \ {aka \u2018const std::pair<std::__cxx11::basic_string<char>, int>&\u2019}\n\
    \ 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = std::pair<std::__cxx11::basic_string<char>,\
    \ int>; _Alloc = std::allocator<std::pair<std::__cxx11::basic_string<char>, int>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::pair<std::__cxx11::basic_string<char>,\
    \ int>]\u2019\n 1200 |       push_back(value_type&& __x)\n      |       ^~~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion for\
    \ argument 1 from \u2018std::pair<char, int>\u2019 to \u2018std::vecto"
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int flag = 0;\n\
    \  int counter = 0;\n  for (int i = 0; i < S.size(); i++) {\n    if (S[i] == 'I')\
    \ {\n      counter++;\n      if (i == 0 || S[i - 1] == '.' || S[i - 1] == '?'\
    \ || S[i - 1] == '!') {\n        flag = 1;\n      }\n    }\n  }\n  return counter;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp_05ub6my: /tmp/tmp_05ub6my.cpp:23: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    bool has_bored = false;\n    // Iterate through each word in the string.\n\
    \    for(const auto& word : S) {\n        // If we have a bored sentence and a\
    \ word that starts with \"I\".\n        if (has_bored && word.at(0) == 'I') {\n\
    \            ++count;\n        }\n        // If we have a bored sentence and a\
    \ word that starts with \"i\".\n        else if (has_bored && word.at(0) == 'i')\
    \ {\n            ++count;\n        }\n        // If we have a bored sentence and\
    \ a word that starts with \"i\".\n        else if (has_bored && word.at(0) ==\
    \ 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"I\".\n        else if (has_bored && word.at(0)\
    \ == 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'i') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'i') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'i') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'i') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"i\".\n        else if (has_bored && word.at(0)\
    \ == 'i') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"I\".\n        else if (has_bored && word.at(0)\
    \ == 'I') {\n            ++count;\n        }\n        // If we have a bored sentence\
    \ and a word that starts with \"I\".\n        else if (has_bored && word.\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpax5j1e0s.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpax5j1e0s.cpp:13:31: error: request for member \u2018at\u2019 in \u2018\
    word\u2019, which is of non-class type \u2018const char\u2019\n   13 |       \
    \  if (has_bored && word.at(0) == 'I') {\n      |                            \
    \   ^~\n/tmp/tmpax5j1e0s.cpp:17:36: error: request for member \u2018at\u2019 in\
    \ \u2018word\u2019, which is of non-class type \u2018const char\u2019\n   17 |\
    \         else if (has_bored && word.at(0) == 'i') {\n      |                \
    \                    ^~\n/tmp/tmpax5j1e0s.cpp:21:36: error: request for member\
    \ \u2018at\u2019 in \u2018word\u2019, which is of non-class type \u2018const char\u2019\
    \n   21 |         else if (has_bored && word.at(0) == 'I') {\n      |        \
    \                            ^~\n/tmp/tmpax5j1e0s.cpp:25:36: error: request for\
    \ member \u2018at\u2019 in \u2018word\u2019, which is of non-class type \u2018\
    const char\u2019\n   25 |         else if (has_bored && word.at(0) == 'I') {\n\
    \      |                                    ^~\n/tmp/tmpax5j1e0s.cpp:29:36: error:\
    \ request for member \u2018at\u2019 in \u2018word\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   29 |         else if (has_bored && word.at(0)\
    \ == 'i') {\n      |                                    ^~\n/tmp/tmpax5j1e0s.cpp:33:36:\
    \ error: request for member \u2018at\u2019 in \u2018word\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   33 |         else if (has_bored && word.at(0)\
    \ == 'I') {\n      |                                    ^~\n/tmp/tmpax5j1e0s.cpp:37:36:\
    \ error: request for member \u2018at\u2019 in \u2018word\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   37 |         else if (has_bored && word.at(0)\
    \ == 'i') {\n      |                                    ^~\n/tmp/tmpax5j1e0s.cpp:41:36:\
    \ error: request for member \u2018at\u2019 in \u2018word\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   41 |         else if (has_bored && word.at(0)\
    \ == 'I') {\n      |                                    ^~\n/tmp/tmpax5j1e0s.cpp:45:36:\
    \ error: request for member \u2018at\u2019 in \u2018word\u2019, which is of non-class\
    \ type \u2018const char\u2019\n   45 |         else if (has_bored && word.at(0)"
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // TODO: Write\
    \ your code here\n  long sum=0;\n  for(int i=0;i<S.size();i++)\n  {\n    if(S[i]=='?')\n\
    \    {\n      sum++;\n    }\n    else if(S[i]=='!' || S[i]=='.')\n    {\n    \
    \  break;\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmppg6ul4o1: /tmp/tmppg6ul4o1.cpp:26: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0, boredom_cnt = 0, i, n = S.length();\n    for(i = 0; i < n; i++)\n    {\n\
    \        if (S[i] == 'I' && i != 0 && S[i-1] == '.') boredom_cnt++;\n        if\
    \ (S[i] == '?' && i != 0 && S[i-1] == '!') boredom_cnt++;\n    }\n    for(i =\
    \ 0; i < n; i++)\n    {\n        if (S[i] == '.' && i != 0 && S[i-1] == '?') boredom_cnt++;\n\
    \        if (S[i] == '!' && i != 0 && S[i-1] == '.') boredom_cnt++;\n        if\
    \ (S[i] == '.' && i != 0 && S[i-1] == '!') boredom_cnt++;\n        if (S[i] ==\
    \ '?' && i != 0 && S[i-1] == '.') boredom_cnt++;\n        if (S[i] == '!' && i\
    \ != 0 && S[i-1] == '?') boredom_cnt++;\n    }\n    if (boredom_cnt > 0) boredoms\
    \ = boredom_cnt;\n    return boredoms;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5q0b54bc: /tmp/tmp5q0b54bc.cpp:29: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    //Complete\
    \ this function\n    if(S.find(\"I\") != std::string::npos) {\n        long boredoms\
    \ = 0;\n        for(int i = 0 ; i < S.size() ; i++) {\n            if(S[i] ==\
    \ '.') {\n                boredoms += 1;\n            }\n        }\n        return\
    \ boredoms;\n    } else {\n        //throw an exception\n    }\n    return 0;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5601cdv7: /tmp/tmp5601cdv7.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long res =\
    \ 0;\n    for (long i = 0; i < S.size(); i++) {\n        if (S[i] == 'I')\n  \
    \          res++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpq3eta4v5: /tmp/tmpq3eta4v5.cpp:18: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    if (S.size()\
    \ < 2) return 0;\n    std::unordered_map<std::string, int> mymap;\n    for (auto\
    \ itr = S.begin(); itr != S.end(); ++itr) {\n        if (mymap.find(*itr) == mymap.end())\
    \ mymap[*itr] = 1;\n        else mymap[*itr]++;\n    }\n    for (auto itr = mymap.begin();\
    \ itr != mymap.end(); ++itr) {\n        if (itr->second > 1) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyxigcjj.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpdyxigcjj.cpp:11:28: error: no matching function for call to \u2018\
    std::unordered_map<std::__cxx11::basic_string<char>, int>::find(char&)\u2019\n\
    \   11 |         if (mymap.find(*itr) == mymap.end()) mymap[*itr] = 1;\n     \
    \ |                            ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/c++/9/functional:61,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdyxigcjj.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:921:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::find(const key_type&) [with\
    \ _Key = std::__cxx11::basic_string<char>; _Tp = int; _Hash = std::hash<std::__cxx11::basic_string<char>\
    \ >; _Pred = std::equal_to<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const\
    \ std::__cxx11::basic_string<char>, int> >; std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>::iterator = std::__detail::_Node_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int>, false, true>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n  921 |       find(const key_type&\
    \ __x)\n      |       ^~~~\n/usr/include/c++/9/bits/unordered_map.h:921:28: note:\
    \   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  921 |       find(const\
    \ key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/unordered_map.h:925:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::find(const key_type&) const\
    \ [with _Key = std::__cxx11::basic_string<char>; _Tp = int; _Hash = std::hash<std::__cxx11::basic_strin"
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count=0,counter=0,flag;\n\
    \    int i;\n    for(i=0;i<S.size();i++){\n        flag=0;\n        counter=1;\n\
    \        for(int j=0;j<S.size();j++){\n            if(i==j)\n                continue;\n\
    \            if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n                counter=counter*2;\n\
    \                flag=1;\n            }\n        }\n        if(flag==1)\n    \
    \        count=count+counter;\n    }\n    return count;\n}\nint main() {\n   \
    \ auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n\
    \    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpevuwxbvc: /tmp/tmpevuwxbvc.cpp:29: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    std::sort(S.begin(),\
    \ S.end());\n    long ans = 0;\n    int cnt = 0, curr = 0, next = 0;\n    while\
    \ (curr < S.size()) {\n        if (S.at(curr) == 'I') {\n            cnt++;\n\
    \        }\n        curr++;\n    }\n    // cnt is the number of boredoms found\n\
    \    long boredom = cnt / 2;\n    for (long i = 0; i < cnt; i++) {\n        if\
    \ (S.at(i) == 'I') {\n            boredom--;\n        }\n    }\n    if (boredom\
    \ == 0) {\n        ans = 1;\n    } else if (boredom == 1) {\n        ans = 0;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6ir70ygt: /tmp/tmp6ir70ygt.cpp:33: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    vector<string>\
    \ v;\n    v.push_back(S);\n    long boredoms = 0;\n    sort(v.begin(), v.end());\n\
    \    string tmp;\n    for (string s : v) {\n        if (s[0] == 'I') {\n     \
    \       tmp = \"\";\n            for (int i = 0; i < s.length(); i++) {\n    \
    \            if (isalpha(s[i])) {\n                    tmp += s[i];\n        \
    \        }\n            }\n            if (tmp == s) {\n                boredoms++;\n\
    \            }\n        }\n    }\n    return boredoms;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp96pw7ykq.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp96pw7ykq.cpp:8:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n    8 |     vector<string> v;\n      |     ^~~~~~\n/tmp/tmp96pw7ykq.cpp:8:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp96pw7ykq.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp96pw7ykq.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp96pw7ykq.cpp:8:12:\
    \ error: \u2018string\u2019 was not declared in this scope\n    8 |     vector<string>\
    \ v;\n      |            ^~~~~~\n/tmp/tmp96pw7ykq.cpp:8:12: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp96pw7ykq.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included"
  stdout: ''
  timestamp: 1660094426
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Complete\
    \ the function\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpc6o4xkph: /tmp/tmpc6o4xkph.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I') {\n\
    \            boredoms++;\n        }\n    }\n    return boredoms;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6tn99kke: /tmp/tmp6tn99kke.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredoms\
    \ = 0;\n    std::string s = \"I\";\n    for (auto i : S) {\n        if (i == '.'\
    \ || i == '?' || i == '!') {\n            if (i == '.') {\n                if\
    \ (s == 'I') {\n                    s = \"I'll\";\n                } else {\n\
    \                    s = \"I'm\";\n                }\n            } else if (i\
    \ == '?') {\n                if (s == 'I') {\n                    s = \"I am\"\
    ;\n                } else {\n                    s = \"I am\";\n             \
    \   }\n            } else if (i == '!') {\n                if (s == 'I') {\n \
    \                   s = \"I don't\";\n                } else {\n             \
    \       s = \"I doesn't\";\n                }\n            }\n        } else if\
    \ (i == 'I') {\n            s = \"I'm\";\n        }\n        boredoms += 1;\n\
    \    }\n    return boredoms;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg5r8zj5v.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmpg5r8zj5v.cpp:13:23: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   13 |                 if (s == 'I') {\n      |    \
    \                 ~ ^~ ~~~\n      |                     |    |\n      |      \
    \               |    char\n      |                     std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpg5r8zj5v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpg5r8zj5v.cpp:13:26:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   13\
    \ |                 if (s == 'I') {\n      |                          ^~~\nIn\
    \ file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpg5r8zj5v.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpg5r8zj5v.cpp:13:26: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018char\u2019\n   13 |"
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  std::sort(S.begin(),\
    \ S.end());\n  for (auto &c : S) {\n    if (c == '.' || c == '?' || c == '!')\
    \ {\n      return 0;\n    }\n  }\n  return 1;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp5u_fqv07: /tmp/tmp5u_fqv07.cpp:18: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your code goes here\n  // Your code goes here\n  // Your code\
    \ goes here\n  // Your \n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxpumcn3v: /tmp/tmpxpumcn3v.cpp:97: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom_count\
    \ = 0;\n    // write your logic here\n    return boredom_count;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpg0pur0_0: /tmp/tmpg0pur0_0.cpp:16: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Your code\
    \ here\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmplzhm5l0a: /tmp/tmplzhm5l0a.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Write your\
    \ code here\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp8uqb8og3: /tmp/tmp8uqb8og3.cpp:12: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // Write your\
    \ code here\n    int count = 0;\n    for(int i = 0 ; i < S.length() ; i++) {\n\
    \        if(S[i] == 'I') {\n            count ++;\n        }\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxdzkaz3n: /tmp/tmpxdzkaz3n.cpp:20: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    size_t i = 0, j = 0;\n    bool bored = false;\n    while (i < S.size())\
    \ {\n        if (!bored && S[i] == 'I') {\n            bored = true;\n       \
    \     count++;\n        }\n        while (j < S.size() && S[i] == S[j]) {\n  \
    \          j++;\n        }\n        if (bored && j == S.size()) {\n          \
    \  count++;\n            bored = false;\n        }\n        i++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmptys5g06j: /tmp/tmptys5g06j.cpp:30: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int flag;\n\
    \  int count=0;\n  int len = S.size();\n  string s1 = S;\n  string s2 = S;\n \
    \ for (int i=0; i<len-1;i++)\n    {\n      flag=0;\n      if (s1[i]=='I' && s1[i+1]=='.'\
    \ || s1[i]=='I' && s1[i+1]=='?' || s1[i]=='I' && s1[i+1]=='!')\n        {\n  \
    \        flag=1;\n        }\n      count+=flag;\n      s1 = s2;\n      s2 = S;\n\
    \    }\n  return count;\n}\nint main() {\n    auto candidate = is_bored;\n   \
    \ assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is the\
    \ sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n \
    \   assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp99twdrfp.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmp99twdrfp.cpp:11:3: error: \u2018string\u2019 was not declared in this\
    \ scope\n   11 |   string s1 = S;\n      |   ^~~~~~\n/tmp/tmp99twdrfp.cpp:11:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp99twdrfp.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp99twdrfp.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp99twdrfp.cpp:12:9: error: expected \u2018;\u2019 before \u2018s2\u2019\
    \n   12 |   string s2 = S;\n      |         ^~~\n      |         ;\n/tmp/tmp99twdrfp.cpp:16:11:\
    \ error: \u2018s1\u2019 was not declared in this scope; did you mean \u2018y1\u2019\
    ?\n   16 |       if (s1[i]=='I' && s1[i+1]=='.' || s1[i]=='I' && s1[i+1]=='?'\
    \ || s1[i]=='I' && s1[i+1]=='!')\n      |           ^~\n      |           y1\n\
    /tmp/tmp99twdrfp.cpp:21:7: error: \u2018s1\u2019 was not declared in this scope;\
    \ did you mean \u2018y1\u2019?\n   21 |       s1 = s2;\n      |       ^~\n   \
    \   |       y1\n/tmp/tmp99twdrfp"
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Write your\
    \ code here\n  std::map<char,int> m;\n  for(int i=0;i<S.size();i++){\n      if(S[i]\
    \ == '.'){\n          m[S[i]]++;\n      }\n  }\n  if(S[0] == 'I'){\n      return\
    \ m[S[0]];\n  }\n  return -1;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp6hx6u7ay: /tmp/tmp6hx6u7ay.cpp:22: int main(): Assertion `candidate(("Hello
    world")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  int bored =\
    \ 0;\n  int i = 0;\n  int count = 0;\n  while (i < S.size()) {\n    if (S[i] ==\
    \ '.') {\n      i++;\n      while (i < S.size() && S[i] != '.') {\n        i++;\n\
    \      }\n      count++;\n      i++;\n    } else if (S[i] == '?' || S[i] == '!')\
    \ {\n      i++;\n      while (i < S.size() && S[i] != S[i]) {\n        i++;\n\
    \      }\n      count++;\n      i++;\n    } else if (S[i] == 'I') {\n      bored++;\n\
    \    }\n    i++;\n  }\n  return bored;\n}\nint main() {\n    auto candidate =\
    \ is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpmo4iu_hf: /tmp/tmpmo4iu_hf.cpp:36: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    // ++count\n\
    \    // If S is \"I\" return 1\n    // Else return 0\n    long count = 1;\n  \
    \  char first[20];\n    memset(first, '\\0', 20);\n    // The length of the first\
    \ word is strlen(\"I\")\n    first[strcspn(\"I\", first)] = 'I';\n    if (S[0]\
    \ == 'I')\n    {\n        count++;\n    }\n    std::string temp;\n    bool bored\
    \ = false;\n    for (int i = 1; i < S.size(); i++)\n    {\n        temp = S[i]\
    \ + \".\" + S[i+1] + \".\" + S[i+2];\n        if (S[i] == 'I')\n        {\n  \
    \          bored = true;\n            temp = S[i] + \".\" + S[i+1] + \".\" + S[i+2];\n\
    \        }\n        bool found = false;\n        for (int j = 0; j < first.length;\
    \ j++)\n        {\n            if (temp == first[j])\n            {\n        \
    \        found = true;\n                break;\n            }\n        }\n   \
    \     if (!found)\n        {\n            break;\n        }\n    }\n    if (bored)\n\
    \    {\n        return count;\n    }\n    return 0;\n}\nint main() {\n    auto\
    \ candidate = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n  \
    \  assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8_enqu6.cpp: In function \u2018long int is_bored(std::string)\u2019\
    :\n/tmp/tmph8_enqu6.cpp:24:36: error: invalid operands of types \u2018const char*\u2019\
    \ and \u2018const char [2]\u2019 to binary \u2018operator+\u2019\n   24 |    \
    \     temp = S[i] + \".\" + S[i+1] + \".\" + S[i+2];\n      |                \
    \                    ^ ~~~\n      |                                      |\n \
    \     |                                      const char [2]\n/tmp/tmph8_enqu6.cpp:28:40:\
    \ error: invalid operands of types \u2018const char*\u2019 and \u2018const char\
    \ [2]\u2019 to binary \u2018operator+\u2019\n   28 |             temp = S[i] +\
    \ \".\" + S[i+1] + \".\" + S[i+2];\n      |                                  \
    \      ^ ~~~\n      |                                          |\n      |    \
    \                                      const char [2]\n/tmp/tmph8_enqu6.cpp:31:35:\
    \ error: request for member \u2018length\u2019 in \u2018first\u2019, which is\
    \ of non-class type \u2018char [20]\u2019\n   31 |         for (int j = 0; j <\
    \ first.length; j++)\n      |                                   ^~~~~~\n/tmp/tmph8_enqu6.cpp:33:22:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} and \u2018char\u2019)\n \
    \  33 |             if (temp == first[j])\n      |                 ~~~~ ^~ ~~~~~~~~\n\
    \      |                 |              |\n      |                 |         \
    \     char\n      |                 std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmph8_enqu6.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmph8_enqu6.cpp:33:32:\
    \ note:   \u2018std::string\u2019 "
  stdout: ''
  timestamp: 1660094427
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int boredom_count\
    \ = 0;\n    int boredom_counter = 0;\n    for (int i = 0; i < S.size(); i++) {\n\
    \        char current = S[i];\n        if (current == '.') {\n            boredom_counter++;\n\
    \        }\n        if (current == '!' || current == '?') {\n            boredom_count++;\n\
    \        }\n    }\n    long ans = boredom_counter;\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\")) ==\
    \ (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp0f4h4qy3: /tmp/tmp0f4h4qy3.cpp:26: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long answer\
    \ = 0;\n    for (auto &it : S) {\n        if (it == 'I') answer++;\n    }\n  \
    \  return answer;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmp64hl1m8e: /tmp/tmp64hl1m8e.cpp:17: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long bored\
    \ = 0;\n    assert(S.size() > 0);\n    for(int i = 1; i < S.size(); i++)\n   \
    \ {\n        if(S[0] == 'I' && S[i] == '.')\n        {\n            bored += 1;\n\
    \        }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpbwhhrqzo: /tmp/tmpbwhhrqzo.cpp:23: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int freq[26]\
    \ = {0};\n    int size = S.size();\n    for (int i = 0; i < size; i++) {\n   \
    \     if (S[i] == '.') freq[S[i]-'a']++;\n        if (S[i] == '?') freq[S[i]-'a']++;\n\
    \        if (S[i] == '!') freq[S[i]-'a']++;\n    }\n    long bored = 0;\n    for\
    \ (int i = 0; i < 26; i++) {\n        if (freq[i] > 0) bored++;\n    }\n    return\
    \ bored;\n}\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"\
    Hello world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpi_gsu9_d: /tmp/tmpi_gsu9_d.cpp:25: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n  // Write your\
    \ code here\n  int n=0;\n  for (int i=0;i<S.length();i++) {\n    if (S[i]=='I')\n\
    \      n++;\n  }\n  return n;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxg3llesc: /tmp/tmpxg3llesc.cpp:19: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    assert(S.size()>0);\n\
    \    long boredoms = 0;\n    // Write your code here\n    return boredoms;\n}\n\
    int main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello world\"\
    )) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n    assert(candidate((\"\
    I love It !\")) == (1));\n    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"\
    I feel good today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpr1fhe7ck: /tmp/tmpr1fhe7ck.cpp:17: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long boredom_count\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        // For each character,\
    \ we check if its the 'I' letter\n        if (S[i] == 'I' && i != 0) {\n     \
    \       // If we haven't encountered the letter \"I\" yet\n            if (S[i-1]\
    \ == '.') {\n                // If we haven't encountered the \".\" yet\n    \
    \            if (S[i-2] == '?' || S[i-2] == '!') {\n                    // If\
    \ we haven't encountered the '?' or '!' yet\n                    boredom_count++;\n\
    \                }\n            }\n        }\n    }\n    return boredom_count;\n\
    }\nint main() {\n    auto candidate = is_bored;\n    assert(candidate((\"Hello\
    \ world\")) == (0));\n    assert(candidate((\"Is the sky blue?\")) == (0));\n\
    \    assert(candidate((\"I love It !\")) == (1));\n    assert(candidate((\"bIt\"\
    )) == (0));\n    assert(candidate((\"I feel good today. I will be productive.\
    \ will kill It\")) == (2));\n    assert(candidate((\"You and I are going for a\
    \ walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmprwkwmnl3: /tmp/tmprwkwmnl3.cpp:28: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    if (S == \"\
    I\") return 1;\n    if (S == \"a\") return 1;\n    if (S == \"the\") return 1;\n\
    \    if (S == \"of\") return 1;\n    if (S == \"to\") return 1;\n    if (S ==\
    \ \"of\") return 1;\n    return 0;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpxqi2bp_5: /tmp/tmpxqi2bp_5.cpp:20: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    long count\
    \ = 0;\n    // loop through each character of the string, in order\n    // and\
    \ check if it is a boredom\n    for (char c : S) {\n        switch (c) {\n   \
    \         case '.':\n            case '?':\n            case '!':\n          \
    \      count++;\n                break;\n            default:\n              \
    \  break;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = is_bored;\n    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"\
    Is the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpab8i78n7: /tmp/tmpab8i78n7.cpp:27: int main(): Assertion `candidate(("Is
    the sky blue?")) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You'll be given a string\
    \ of words, and your task is to count the number\n// of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n// Sentences are delimited by '.',\
    \ '?' or '!'.\n// For example:\nlong is_bored(std::string S) {\n    int bored\
    \ = 0;\n    for (int i = 0; i < S.size(); i++) {\n        if (S[i] == '.') {\n\
    \            if (S[i + 1] == '!') {\n                bored++;\n            } else\
    \ if (S[i + 1] == '?') {\n                bored += 2;\n            }\n       \
    \ }\n    }\n    return bored;\n}\nint main() {\n    auto candidate = is_bored;\n\
    \    assert(candidate((\"Hello world\")) == (0));\n    assert(candidate((\"Is\
    \ the sky blue?\")) == (0));\n    assert(candidate((\"I love It !\")) == (1));\n\
    \    assert(candidate((\"bIt\")) == (0));\n    assert(candidate((\"I feel good\
    \ today. I will be productive. will kill It\")) == (2));\n    assert(candidate((\"\
    You and I are going for a walk\")) == (0));\n}\n"
  status: Exception
  stderr: 'tmpr7du9wy7: /tmp/tmpr7du9wy7.cpp:24: int main(): Assertion `candidate(("I
    love It !")) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660094428
