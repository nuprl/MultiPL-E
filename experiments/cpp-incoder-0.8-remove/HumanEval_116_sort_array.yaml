name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort an array of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\nstd::vector<long>\
  \ sort_array(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["  long sum = 0;\n  for (long i : arr) {\n    sum += i;\n  }\n  long\
    \ len = arr.size();\n  long power = 1;\n  std::vector<long> answer;\n  while (power\
    \ * len < sum) {\n    power *= len;\n    answer.push_back(power);\n  }\n  answer.push_back(sum);\n\
    \  for (long i = power, pow = sum - power; i < pow; i++) {\n    answer.push_back(1);\n\
    \  }\n  std::sort(answer.begin(), answer.end());\n  answer.pop_back();\n  answer.push_back(-1);\n\
    \  return answer;", "    int N = arr.size();\n    std::vector<long> ret(N ,0);\n\
    \    for (int i = 0; i < N; i++) {\n        ret[i] = arr[i];\n    }\n    std::vector<long>::iterator\
    \ it;\n    sort(ret.begin(), ret.end());\n    ret[0] = 0;\n    for (it=ret.begin();\
    \ it!=ret.end(); ++it) {\n        long n = *it;\n        if (n == 0) continue;\n\
    \        long tmp = 0;\n        for (int i = 0; i < N; i++) {\n            if\
    \ ((tmp & (1LL << i)) == (1LL << i)) {\n                tmp += n; break;\n   \
    \         }\n        }\n        *it = tmp;\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    ret.push_back(arr[0]);\n    // We use std::map for counting the number\
    \ of 1's\n    typedef std::map<long, std::pair<long, long> > Counter;\n    Counter\
    \ counter;\n    for (long i : arr) {\n        counter[i]->first++;\n    }\n  \
    \  // And then, we just need to sort the vector based on number of 1's\n    for\
    \ (auto& item : counter) {\n        ret.push_back(item.second->first);\n     \
    \   ret.push_back(item.second->second);\n    }\n    return ret;", "    std::vector<long>\
    \ res;\n    for (long x : arr) {\n        long bin = __builtin_popcount(x);\n\
    \        long dec = x / bin;\n        if (dec > res.size())\n            res.resize(dec);\n\
    \        res[dec] += x;\n    }\n    // sort descending\n    std::sort(res.begin(),\
    \ res.end(), std::greater<long>());\n    return res;", "    std::vector<long>\
    \ counts(256);\n    for (auto &it : arr) ++counts[it];\n\n    std::sort(\n   \
    \         arr.begin(), arr.end(),\n            [] (const long &a, const long &b)\
    \ -> bool {\n                return counts[a] < counts[b];\n            }\n  \
    \  );\n    return arr;", "    std::sort(arr.begin(), arr.end(), [](const long&\
    \ a, const long& b) {\n        return std::bitset<sizeof(long)>(a).test(b);\n\
    \    });\n    long res = 0;\n    for (long i : arr) res += i;\n    std::vector<long>\
    \ resVec;\n    for (long i : arr) resVec.push_back(res / i);\n    return resVec;",
  '    // Your code goes here', "   assert(arr.size() != 0);\n   long one_count =\
    \ 0;\n   long max_num = INT_MIN;\n   for (long i = 0; i < arr.size(); i++) {\n\
    \      if (arr[i] != 0) {\n         if (one_count > max_num) {\n            max_num\
    \ = one_count;\n         }\n         one_count++;\n      }\n   }\n   long base\
    \ = 0, last_index = 0;\n   std::vector<long> result;\n   while (one_count > 0)\
    \ {\n      result.push_back(arr[last_index]);\n      one_count--;\n      last_index++;\n\
    \   }\n   for (long i = 0; i < arr.size(); i++) {\n      if (arr[i] != 0) {\n\
    \         long value = arr[last_index] - base;\n         assert(value >= 0 &&\
    \ value <= max_num);\n         result.push_back(value * pow(2, one_count) + base);\n\
    \         one_count--;\n         last_index++;\n      }\n   }\n   return result;",
  '    // Your code here', "    long n = arr.size();\n    std::vector<long> new_arr(n);\n\
    \    for (long i = 0; i < n; i++) {\n        new_arr[i] = 0;\n        for (long\
    \ j = 0; j < n; j++)\n            if (arr[j] & 1L)\n                new_arr[i]\
    \ += 1;\n    }\n    for (long i = 0; i < n; i++)\n        new_arr[i] = new_arr[i]\
    \ > n ? n : new_arr[i];\n    for (long i = 0; i < n; i++) {\n        for (long\
    \ j = i + 1; j < n; j++) {\n            if (new_arr[i] > new_arr[j])\n       \
    \         std::swap(new_arr[i], new_arr[j]);\n        }\n    }\n    return new_arr;",
  "    std::vector<long> res;\n    // First sort according to number of ones in binary\
    \ representation in ascending order.\n    for(long i=0; i<arr.size(); ++i)\n \
    \       res.push_back((int)arr[i]+1);\n    std::sort(res.begin(), res.end());\n\
    \    // Second sort according to decimal value.\n    std::sort(res.begin(), res.end(),\
    \ [](const long& lhs, const long& rhs) { return lhs > rhs; });\n    return res;",
  "    std::vector<long> new_arr(arr.size());\n    for (int i = 0; i < arr.size();\
    \ i++)\n        new_arr[i] = 0;\n    for (long &val: new_arr) {\n        val =\
    \ ~val;\n    }\n    std::sort(new_arr.begin(), new_arr.end());\n    std::vector<long>\
    \ result(new_arr.size());\n    for (int i = 0; i < arr.size(); i++)\n        result[i]\
    \ = new_arr[i];\n    return result;", "    long temp = 0;\n    std::vector<long>\
    \ res(arr.size());\n    std::sort(res.begin(), res.end());\n    int count_ones\
    \ = 0;\n    for(int i = 0; i<arr.size(); i++){\n        if (arr[i] == 1){\n  \
    \          count_ones++;\n        }\n    }\n    for(int i = 0; i<arr.size(); i++){\n\
    \        if (arr[i] == 1){\n            temp = temp * 2 + count_ones;\n      \
    \      res[i] = temp;\n            count_ones = 0;\n        }\n        else{\n\
    \            res[i] = arr[i];\n        }\n    }\n    return res;", "    assert(arr.size()\
    \ != 0);\n    int num_bits = __builtin_popcount(arr[0]);\n    if (num_bits ==\
    \ 0) return arr;\n\n    std::vector<long> ret(arr.size());\n\n    // first we\
    \ count how many times each number appears\n    std::vector<int> counts(num_bits,\
    \ 0);\n    for (auto i : arr) ++counts[__builtin_popcount(i)];\n\n    // then\
    \ we sort by number of ones in their binary representation\n    // we use std::sort\
    \ because it is stable sort and we can use binary count\n    // to sort\n    int\
    \ i = 0;\n    for (auto c : counts) ret[i++] = c + counts[i];\n    std::sort(ret.begin(),\
    \ ret.end());\n\n    // if we have two numbers with same number of ones in their\
    \ binary\n    // representation, we sort by decimal value\n    for (int j = 0;\
    \ j < i; ++j) {\n        int sum = 0;\n        for (int k = j + 1; k < i; ++k)\
    \ sum += counts[k];\n        if (sum > 0) {\n            for (int k = j + 1; k\
    \ < i; ++k) ret[k] -= sum;\n            std::sort(ret.begin(), ret.end());\n \
    \       }\n    }\n    return ret;", "    int n = arr.size();\n    int max_bin\
    \ = 0;\n    int max_decimal = 0;\n    int max_count = 0;\n    int max_decimal_index\
    \ = 0;\n    for (int i = 0; i < n; ++i) {\n        int bin = arr[i] % 2;\n   \
    \     int decimal = arr[i] / 2;\n        auto it = std::find(bins.begin(), bins.end(),\
    \ bin);\n        int count = it - bins.begin();\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_bin = bin;\n            max_decimal\
    \ = decimal;\n            max_decimal_index = i;\n        }\n    }\n    if (max_count\
    \ == 1) {\n        // binary representation of decimal number equals to number\
    \ of ones\n        assert(max_decimal >= 0 && max_decimal <= 90);\n        std::vector<int>\
    \ bins(max_decimal + 1);\n        std::iota(bins.begin(), bins.end(), 0);\n  \
    \      std::sort(bins.begin(), bins.end(),\n                  [&](int a, int b)\
    \ { return bins[a] - bins[b]; });\n        std::vector<int> arr(max_decimal_index\
    \ + 1);\n        std::iota(arr.begin(), arr.end(), 0);\n        std::sort(arr.begin(),\
    \ arr.end(),\n                  [&](int a, int b) { return arr[a] - arr[b]; });\n\
    \        return arr;\n    }\n    assert(max_count == 2);\n    // binary representation\
    \ of decimal number equals to number of ones\n    assert(max_decimal >= 0 && max_decimal\
    \ <= 90);\n    std::vector<int> bins(max_decimal + 1);\n    std::iota(bins.begin(),\
    \ bins.end(), 0);\n    std::sort(bins.begin(), bins.end(),\n              [&](int\
    \ a, int b) { return bins[a] - bins[b]; });\n    // We sort decimal part with\
    \ decimal value, because binary representation\n    // doesn't change if decimal\
    \ part is equals to number of ones\n    std::sort(bins.begin(), bins.end(),\n\
    \              [&](int a, int b) { return arr[a] - arr[b]; });\n    return bins;",
  "   auto zero_bits = 0; // Number of bits set to 0.\n   std::size_t pos = 0; //\
    \ Position of next bit set to 1.\n   std::vector<long> ans;\n   for (auto i :\
    \ arr)\n      if (i % 2 == 1) {\n         if (zero_bits == 0)\n            ans.push_back(i);\n\
    \         zero_bits += 1;\n      } else {\n         if (zero_bits == 1)\n    \
    \        ans.push_back(zero_bits - 1);\n         zero_bits = 0;\n      }\n   if\
    \ (zero_bits != 0)\n      ans.push_back(zero_bits - 1);\n   return ans;", "  \
    \  assert(arr.size() >= 1);\n    long long zeros = 0;\n    long long ones = 0;\n\
    \    long long cur = 0;\n    for (long long i : arr) {\n        cur = i;\n   \
    \     ones += cur;\n        zeros -= cur;\n    }\n    std::vector<long> ans;\n\
    \    long long i = 1;\n    while (i < arr.size()) {\n        if (arr[i] == 1)\
    \ {\n            ans.push_back(i++);\n        } else if (arr[i] != 0) {\n    \
    \        while (arr[i] == 1) {\n                i++;\n            }\n        \
    \    while (arr[i] == 0) {\n                ans.push_back(i++);\n            }\n\
    \        }\n    }\n    long long an = std::accumulate(ans.begin(), ans.end(),\
    \ 0);\n    ans.push_back(std::max(0, (an - ones) * 2));\n    ans.push_back(std::max(0,\
    \ (an - zeros) * 2));\n    std::sort(ans.begin(), ans.end());\n    return ans;",
  "    std::sort(arr.begin(), arr.end(), [](long l, long r) {\n        long ones =\
    \ l ^ r;\n        return ones < 0 ? 1 : l < r;\n    });\n    return arr;", " \
    \   // fill 'count' with number of ones in binary representation of each\n   \
    \ // element of 'arr'\n    std::vector<long> count(arr.size());\n    for (long\
    \ &elem : arr)\n        ++count[count_bits(elem)];\n    // sort in ascending order\
    \ according to number of ones\n    std::sort(count.begin(), count.end());\n  \
    \  // sort according to decimal value\n    std::stable_sort(count.begin(), count.end(),\
    \ [](long &a, long &b) {\n        return a > b;\n    });\n    // create result\n\
    \    std::vector<long> res(arr.size());\n    for (long &elem : arr)\n        res[count_bits(elem)]\
    \ = elem;\n    return res;", '    // Your code here', "    // sort arr based on\
    \ the number of ones in its binary representation\n    // using bitwise operator\n\
    \    // and use std::stable_sort() to sort the array in ascending order.\n   \
    \ std::stable_sort(\n        arr.begin(), arr.end(), [&arr](long a, long b) {\
    \ return (a ^ b) >> 1; });\n    return arr;", "    std::vector<long> output(arr.size());\n\
    \    // One way to implement this Kata is to sort an array of booleans\n    //\
    \ to represent number of ones in binary representation of numbers.\n    // For\
    \ example:\n    // input:\n    // {1, 4, 12, 1}\n    // Output:\n    // {1, 4,\
    \ 1, 12}\n    // Note:\n    // If you use booleans to represent a number, the\
    \ size of the array\n    // will be equal to the number of unique numbers. For\
    \ example, if\n    // the number of numbers is 5, the array will include 5 elements,\
    \ and\n    // the elements are initialized to false.\n    // If you only use numbers,\
    \ you can use a map to store a count for\n    // each number.\n    bool flag[26]\
    \ = { false };\n    // To find number of ones in a binary representation\n   \
    \ for (auto i : arr) {\n        flag[i] = true;\n        for (int j = sizeof(std::bitset<sizeof(long)>)\
    \ * 8; j--;) {\n            flag[i] = flag[i] && flag[j];\n        }\n    }\n\
    \    for (auto i : arr) {\n        output[flag[i]]++;\n    }\n    // To sort an\
    \ array based on decimal value\n    int count = 0;\n    for (auto i : arr) {\n\
    \        output[count++] = i;\n    }\n    output.insert(output.begin(), 0);\n\
    \    std::sort(output.begin(), output.end(), [&](long a, long b) {\n        return\
    \ std::count(arr.begin(), arr.end(), a) < std::count(arr.begin(), arr.end(), b);\n\
    \    });\n    return output;", "    long n = arr.size();\n    std::vector<long>\
    \ ret(n);\n    for (long i = 0; i < n; ++i) {\n        ret[i] = 0;\n        for\
    \ (long j = 0; j < n; ++j) {\n            if (i != j)\n                if (arr[j]\
    \ == 1) {\n                    ret[i]++;\n                }\n        }\n    }\n\
    \    for (long i = 0; i < n; ++i) {\n        long m = ret[i];\n        while (m\
    \ > 0) {\n            ret[i]--;\n            m--;\n        }\n    }\n    for (long\
    \ i = 0; i < n; ++i) {\n        ret[i] = ret[i] / 10;\n    }\n    return ret;",
  "    long max_ones = 0;\n    for (auto it : arr)\n        max_ones = std::max(max_ones,\
    \ it);\n    std::vector<long> res(max_ones);\n    for (auto it : arr)\n      \
    \  for (auto bit : to_binary(it))\n            res[bit] ^= 1;\n    for (auto it\
    \ = res.rbegin(), end_it = res.rend(); it != end_it; ++it)\n        std::cout\
    \ << *it << \" \";\n    std::cout << \"\\n\";\n    return res;", "\tlong long\
    \ bin = 0;\n\tlong long d = 0;\n\tstd::vector<long> sorted_arr;\n\n\tfor (int\
    \ i = 0; i < arr.size(); i++) {\n\t\tbin += arr[i];\n\t\td += (bin*bin)/i;\n\t\
    \tsorted_arr.push_back(d + arr[i]);\n\t}\n\tstd::stable_sort(sorted_arr.begin(),\
    \ sorted_arr.end());\n\treturn sorted_arr;", "    long ones = 0, decimal = arr[0];\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] == 1)\n      \
    \      ones++;\n        else\n            decimal += arr[i] / 10 * ones;\n   \
    \     ones = 0;\n    }\n\n    std::vector<long> ans;\n    long last_one = 0;\n\
    \    long last_decimal = 0;\n    long last_decimal2 = 0;\n    ans.push_back(decimal);\n\
    \    long base = 1;\n    while (decimal != 0) {\n        if (decimal >= last_decimal2)\
    \ {\n            ans.push_back(last_decimal2);\n            last_decimal2 = 0;\n\
    \        }\n        last_decimal2 = last_decimal;\n        last_decimal = decimal;\n\
    \        decimal -= last_decimal * base;\n        base <<= 1;\n    }\n    last_one\
    \ = 0;\n    base = 1;\n    while (ones != 0) {\n        if (ones <= last_one)\
    \ {\n            ans.push_back(last_one);\n            last_one = 0;\n       \
    \ }\n        last_one = last_decimal;\n        last_decimal -= ones;\n       \
    \ ones >>= 1;\n        base *= 10;\n    }\n    return ans;", "    if (arr.size()\
    \ == 0) return arr;\n    \n    std::sort(arr.begin(), arr.end(), [&arr](int a,\
    \ int b) {\n        return count_ones(a) > count_ones(b) ? a : b;\n    });\n \
    \   \n    if (arr.size() == 1) return arr;\n    \n    return sort_array(arr);",
  "    // your code goes here\n    // return arr;", '    // implement here', "   \
    \ std::vector<long> nums;\n    // Write your code here", "    std::vector<long>\
    \ ret(arr.size());\n    // Counting 1's in binary of numbers arr[0..arr.size()-1]\n\
    \    std::unordered_map<long, int> ones;\n    for (long i : arr) {\n        ones[i\
    \ & 1]++;\n    }\n    for (std::size_t i = 0; i < arr.size(); i++) {\n       \
    \ ret[i] = ones[arr[i]] + ((arr[i] >> 1) << 1);\n    }\n    return ret;", "  \
    \  int n = arr.size();\n    std::vector<long> newarr(n);\n    for (int i = 0;\
    \ i < n; i++) {\n        // use bit manipulations to find out the number of 1s\
    \ in arr[i]\n        int ones = static_cast<int>((arr[i] >> 1) & 1);\n       \
    \ // store arr[i] in newarr and also store its corresponding number\n        //\
    \ in num_ones\n        newarr[i] = arr[i];\n        newarr[i + 1] = ones;\n  \
    \  }\n    // now just sort the array according to num_ones\n    std::sort(newarr.begin(),\
    \ newarr.end());\n\n    return newarr;", "    std::vector<long> sorted_arr;\n\
    \    for (long i : arr) {\n        sorted_arr.push_back(std::count(std::begin(i),\
    \ std::end(i), '1'));\n        sorted_arr.push_back(std::count(std::begin(i),\
    \ std::end(i), '0'));\n    }\n    sorted_arr.push_back(std::count(std::begin(arr),\
    \ std::end(arr), '0'));\n    sorted_arr.push_back(std::count(std::begin(arr),\
    \ std::end(arr), '1'));\n\n    std::sort(std::begin(sorted_arr), std::end(sorted_arr));\n\
    \    return sorted_arr;", '  // Your code goes here', "    // Your code goes here\n\
    \    long long count = 0;\n    for (long i : arr) {\n        count += i;\n   \
    \ }\n    long long pos = 0;\n    std::vector<long> res(arr.size());\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        res[i] = i;\n    }\n    long long max_val\
    \ = 0, max_val_bin = 0;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ long val_bin =  (arr[i] >> pos) & 1;\n        pos = pos + 1;\n        if (val_bin\
    \ > max_val_bin) {\n            max_val_bin = val_bin;\n            max_val =\
    \ i;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] == arr[max_val]) {\n            res[i] = arr[max_val];\n        }\n\
    \    }\n    return res;", "    // code goes here\n    // Sort arr here\n    std::vector<long>\
    \ arr(arr.begin(),arr.end());\n    std::sort(arr.begin(),arr.end(),std::greater<long>());\n\
    \    return arr;", "    std::vector<long> result(arr.size());\n    for (auto &it\
    \ : arr) result[it - 1] += 1;\n    std::vector<long> sorted;\n    std::sort(result.begin(),\
    \ result.end(), [&](long &lhs, long &rhs) {\n        return lhs < rhs;\n    });\n\
    \    long decimal_value = 1;\n    sorted.reserve(arr.size());\n    for (auto &it\
    \ : arr) sorted.push_back(it);\n    for (size_t i = 0; i < sorted.size(); i++)\
    \ {\n        sorted[i] /= decimal_value;\n        decimal_value *= 10;\n    }\n\
    \    return result;", "    std::vector<long> temp;\n    std::vector<long> res;\n\
    \    res.reserve(arr.size());\n    for (long &i : arr) {\n        int num_bin\
    \ = 0;\n        while (i != 0) {\n            num_bin++;\n            i /= 2;\n\
    \        }\n        temp.push_back(num_bin);\n    }\n    // Sorting based on number\
    \ of ones.\n    // Time complexity: O(nlogn)\n    std::sort(temp.begin(), temp.end());\n\
    \    for (long i : temp) {\n        temp.push_back(i);\n    }\n    for (long &i\
    \ : temp) {\n        res.push_back(i);\n    }\n    // Sorting based on decimal\
    \ value.\n    // Time complexity: O(n)\n    std::sort(res.begin(), res.end(),\
    \ [](long l, long r) { return l > r; });\n    return res;", "    // Your code\
    \ here\n    long sum = 0;\n    for (auto elem : arr)\n        sum += elem;\n \
    \   std::sort(arr.begin(), arr.end(),\n        [](long a, long b) { return (a\
    \ > b) - (a < b); });\n    for (auto elem : arr)\n        sum += elem;\n    std::sort(arr.begin(),\
    \ arr.end(),\n        [](long a, long b) { return (a > b) - (a < b); });\n   \
    \ for (auto elem : arr)\n        sum += elem;\n    std::sort(arr.begin(), arr.end(),\n\
    \        [](long a, long b) { return (a > b) - (a < b); });\n    for (auto elem\
    \ : arr)\n        sum += elem;\n    return arr;", "    assert(arr.size() > 0);\n\
    \    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        count\
    \ += arr[i];\n    }\n    std::vector<long> ret;\n    long base = count;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        long tmp = arr[i];\n        long\
    \ remainder = tmp % base;\n        long power = base - remainder;\n        ret.push_back(tmp\
    \ / power);\n    }\n    std::sort(ret.begin(), ret.end());\n    return ret;",
  "    // Write your code here\n    return arr;", "    // Write your code here\n \
    \   int counter = 0;\n    std::vector<long> sorted_arr;\n    for(auto i : arr)\n\
    \    {\n        if(counter > 0)\n        {\n            int temp = counter;\n\
    \            sorted_arr.resize(sorted_arr.size() + 1);\n            sorted_arr[sorted_arr.size()-1]\
    \ = temp;\n        }\n        counter = counter + i;\n    }\n    sorted_arr.resize(sorted_arr.size()\
    \ + 1);\n    sorted_arr[sorted_arr.size()-1] = counter;\n    for(int i = 0; i\
    \ < arr.size(); i++)\n    {\n        for(int j = i + 1; j < arr.size(); j++)\n\
    \        {\n            if(arr[i] == arr[j])\n            {\n                if(j\
    \ - i > 1)\n                {\n                    int temp = arr[i];\n      \
    \              arr[i] = arr[j];\n                    arr[j] = temp;\n        \
    \            temp = sorted_arr[i];\n                    sorted_arr[i] = sorted_arr[j];\n\
    \                    sorted_arr[j] = temp;\n                }\n            }\n\
    \        }\n    }\n    return sorted_arr;", "    std::vector<long> sorted_arr(arr.size());\n\
    \    std::vector<long> sorted_array_reverse(arr.size());\n\n    for (long i =\
    \ 0; i < (long)arr.size(); i++) {\n        sorted_arr[i] = i;\n        sorted_array_reverse[i]\
    \ = -(i - 1);\n    }\n    \n    std::sort(sorted_arr.begin(), sorted_arr.end(),\
    \ [](const long& a, const long& b) {\n        return a>b;\n    });\n    std::sort(sorted_array_reverse.begin(),\
    \ sorted_array_reverse.end(), [](const long& a, const long& b) {\n        return\
    \ a>b;\n    });\n    \n    for (int i = 0; i < arr.size(); i++) {\n        long\
    \ index = sorted_arr[i];\n        sorted_arr[i] = sorted_array_reverse[index];\n\
    \        sorted_array_reverse[index] = index;\n    }\n    \n    return sorted_arr;",
  "    // Your code here\n    // Your code here\n    // Your code here\n    return\
    \ arr;", "    if (arr.size() == 0) return arr;\n    std::vector<long> ans;\n \
    \   long last_one = 1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] != last_one) {\n            ans.push_back(arr[i]);\n            last_one\
    \ = arr[i];\n        }\n    }\n    std::sort(ans.begin(), ans.end());\n    return\
    \ ans;", "    std::sort(arr.begin(), arr.end(), [](long a, long b) { return count_ones(a)\
    \ < count_ones(b); });\n    auto it = std::max_element(arr.begin(), arr.end());\n\
    \    std::vector<long> output(it - arr.begin(), arr.end());\n    std::reverse(output.begin(),\
    \ output.end());\n    return output;", "    assert(arr.size() > 0);\n    std::vector<long>\
    \ res(arr.size());\n    std::vector<std::pair<long, long>> count_arr(arr.size());\n\
    \    long count = 0;\n    for (long i : arr) {\n        if (i == 1) {\n      \
    \      count++;\n        } else {\n            count_arr[count - 1].second = count_arr[count\
    \ - 1].second + 1;\n            if (count_arr[count - 1].second > res[count -\
    \ 1]) {\n                res[count - 1] = count_arr[count - 1].second;\n     \
    \       }\n            count_arr[count - 1].first++;\n        }\n    }\n    for\
    \ (size_t i = 0; i < res.size(); i++) {\n        if (res[i] != 0) {\n        \
    \    res[i] = std::pow(10, i);\n        }\n    }\n    std::vector<long> ans;\n\
    \    ans.reserve(res.size());\n    for (size_t i = 0; i < res.size(); i++) {\n\
    \        ans.push_back(res[i]);\n    }\n    return ans;", "    std::vector<long>\
    \ arr2;\n    int counter = 0;\n    int sum = 0;\n    for (long i : arr) {\n  \
    \      if (i==0) counter++;\n        else {\n            sum+=i;\n           \
    \ arr2.push_back(sum);\n            counter = 1;\n            sum = 0;\n     \
    \   }\n    }\n    arr2.push_back(sum);\n    arr2.push_back(counter);\n    return\
    \ arr2;", "    long ret = 0;\n    for (long &x : arr)\n        ret += x;\n   \
    \ return arr;", '    // Write your code here', "    // Write your code here\n\
    \    std::vector<long> res(arr.size());\n    for (long i : arr)\n        res[i]\
    \ = i;\n\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ ans;\n    for (size_t i = 0; i < arr.size(); ++i) {\n        long cnt = 0;\n\
    \        while (arr[i] != 0) {\n            cnt += arr[i] & 1;\n            arr[i]\
    \ >>= 1;\n        }\n        ans.push_back(cnt);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;", "    std::vector<long> res;\n    long max_count\
    \ = 0;\n    long cur_count = 0;\n    for (auto n : arr) {\n        if (n == 1)\
    \ {\n            cur_count++;\n        } else {\n            if (cur_count > max_count)\
    \ {\n                res.clear();\n                res.push_back(cur_count);\n\
    \                max_count = cur_count;\n            } else {\n              \
    \  res.push_back(cur_count);\n                cur_count = 0;\n            }\n\
    \        }\n    }\n    if (cur_count > max_count) {\n        res.clear();\n  \
    \      res.push_back(cur_count);\n        max_count = cur_count;\n    }\n    long\
    \ decimal_value = 0;\n    for (auto n : arr) {\n        if (n == 1) {\n      \
    \      decimal_value += 10;\n        } else {\n            decimal_value += n\
    \ % 10;\n        }\n    }\n    if (decimal_value > max_count) {\n        res.clear();\n\
    \        res.push_back(decimal_value);\n        max_count = decimal_value;\n \
    \   }\n    for (auto n : res) {\n        std::cout << n << std::endl;\n    }\n\
    \    return res;", "    std::vector<long> temp;\n    for(int i=0; i<arr.size();\
    \ i++)\n    {\n        if(arr[i] <= 0) // negative number\n            continue;\n\
    \        long int c = 0;\n        int j = 0;\n        while((j<i) && (arr[j]>0))\n\
    \        {\n            c = c + ((arr[j]&1)<<j);\n            j++;\n        }\n\
    \        temp.push_back(c);\n    }\n    std::sort(temp.begin(), temp.end());\n\
    \    return temp;", "    // Write your code here\n    return 0;", "    // Your\
    \ code here\n    long long max_bits = 0;\n    for (long long i = 1; i < arr.size();\
    \ i++) {\n        max_bits = std::max(max_bits, arr[i]);\n    }\n    int size\
    \ = max_bits/10;\n    std::vector<long> ret(size);\n    for (int i = 0; i < size;\
    \ i++) {\n        int index = i;\n        std::vector<long> ones;\n        while\
    \ (index >= 0) {\n            ones.push_back((arr[index / 10] & (1UL << index%10))\
    \ != 0);\n            index -= index%10;\n        }\n        ret[i] = sort_array(ones);\n\
    \    }\n    return ret;", "    long count[32];\n    // initialize count with 0's\n\
    \    std::fill(count, count+32, 0);\n    // count occurences\n    for (auto &i\
    \ : arr) {\n        for (auto &bit : i) {\n            count[bit]++;\n       \
    \ }\n    }\n    // initialize result array\n    std::vector<long> res(arr.size());\n\
    \    for (auto &i : arr) {\n        res[i] = i;\n    }\n    // sort according\
    \ to count\n    for (auto &i : arr) {\n        for (auto &bit : i) {\n       \
    \     int index = count[bit];\n            if (index > 0) {\n                res[i]\
    \ = res[i] ^ 1 << bit;\n                res[i] = res[i] ^ 1 << (bit + 1);\n  \
    \              res[i] = res[i] ^ 1 << (bit + 2);\n                res[i] = res[i]\
    \ ^ 1 << (bit + 3);\n            }\n        }\n    }\n    return res;", "    std::vector<long>\
    \ counter(arr.size());\n    for (size_t i = 0; i < arr.size(); i++) {\n      \
    \  int num = arr[i];\n        counter[i] = __builtin_popcount(num);\n    }\n \
    \   bool is_sorted = false;\n    while (!is_sorted) {\n        is_sorted = true;\n\
    \        for (size_t i = 0; i < arr.size() - 1; i++) {\n            int num =\
    \ arr[i];\n            int count = 1;\n            int j = i + 1;\n          \
    \  while (j < arr.size() && count > 0 && num == arr[j]) {\n                count\
    \ += 1;\n                j += 1;\n            }\n            if (count < counter[i])\
    \ {\n                std::swap(num,arr[i]);\n                std::swap(counter[i],count);\n\
    \                is_sorted = false;\n            }\n        }\n    }\n    return\
    \ arr;", "    std::vector<long> res(arr.size());\n    long ones = 0;\n    long\
    \ dec = 0;\n    for (long i : arr) ones += i;\n    for (long i : arr) {\n    \
    \    if (i != 0) {\n            dec = dec + i / ones;\n        }\n    }\n    for\
    \ (long i : arr) {\n        if (i != 0) {\n            res[ones - i] = dec - i;\n\
    \        }\n    }\n    return res;", "    // Complete code here\n    int n = arr.size();\n\
    \    int cnt = 0;\n    for (int i = 0; i < n; ++i) {\n        if ((arr[i] & 1)\
    \ == 1) {\n            cnt++;\n        }\n    }\n    std::sort(arr.begin(), arr.end(),\
    \ [&cnt](int a, int b) {\n        return cnt > cnt[a] - cnt[b];\n    });\n   \
    \ return arr;", "    int ones = 0;\n    long max = 0;\n    for (const auto& elem\
    \ : arr) {\n        ones += elem & 1;\n        max = elem > max ? elem : max;\n\
    \    }\n    std::vector<long> sol;\n    long cur = 0;\n    for (const auto& elem\
    \ : arr) {\n        if (elem > max) {\n            std::swap(cur, max);\n    \
    \        max = cur;\n        }\n        if (cur == ones) {\n            std::swap(cur,\
    \ ones);\n            ones = cur;\n        }\n        sol.push_back(elem);\n \
    \   }\n    return sol;", // write your sorting code here, "    std::vector<long>\
    \ ans;\n    for (size_t i = 0; i < arr.size(); ++i) {\n        long n = arr[i];\n\
    \        ans.push_back(n);\n    }\n    std::sort(ans.begin(), ans.end(), [](const\
    \ long & a, const long & b){\n        long d = count_ones(a);\n        return\
    \ d < count_ones(b) ? 1 : d > count_ones(b) ? -1 : a<b;\n    });\n    return ans;",
  "    std::vector<long> ret;\n    for (long i : arr) {\n        auto bin = to_string(i);\n\
    \        auto ones = bin.find_first_of(\"01\");\n        auto dec = 0;\n     \
    \   if (ones != std::string::npos) {\n            dec = bin.substr(ones).to_ulong()\
    \ - '0';\n        } else {\n            dec = std::stoll(bin);\n        }\n  \
    \      ret.push_back(dec);\n    }\n    std::sort(ret.begin(), ret.end());\n  \
    \  return ret;", "    long n = 0;\n    for(auto x : arr) {\n        n += x;\n\
    \    }\n    std::vector<long> ret;\n    for(auto x : arr) {\n        if(x != 0)\
    \ {\n            ret.push_back(n + x);\n        }\n    }\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;", "  long ans = arr[0];\n  long max = arr[0];\n\
    \  for (size_t i = 1; i < arr.size(); i++) {\n    if (arr[i] > max) {\n      max\
    \ = arr[i];\n    } else if (arr[i] == max) {\n      ans++;\n      max = arr[i];\n\
    \    }\n  }\n  std::vector<long> ret;\n  while (ans > 0) {\n    ret.push_back(max);\n\
    \    max--;\n    ans--;\n  }\n  return ret;", "    long num_ones = 0;\n    for\
    \ (long i : arr) {\n        num_ones += i;\n    }\n    std::vector<long> ans;\n\
    \    std::sort(arr.begin(), arr.end(), [&num_ones, &ans](long a, long b) {\n \
    \       if (a > b) {\n            return false;\n        } else if (a < b) {\n\
    \            return true;\n        }\n        long num_ones_a = a;\n        long\
    \ num_ones_b = b;\n        long diff = num_ones_a - num_ones_b;\n        return\
    \ diff != 0 && diff < num_ones;\n    });\n    for (long i : arr) {\n        ans.push_back(i);\n\
    \    }\n    return ans;", "    // Write your code here\n    long zero = 1, one\
    \ = 0;\n    std::map<long, long> count;\n    for (long i : arr) {\n        if\
    \ (0 == i) {\n            one++;\n        }\n        else {\n            if (1\
    \ == count[i]) {\n                count[i]++;\n            }\n            else\
    \ {\n                count[i] = 0;\n                count[one]++;\n          \
    \      one = 0;\n            }\n        }\n    }\n\n    std::vector<long> res;\n\
    \    for (long i : arr) {\n        if (1 == count[i]) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "  assert(arr.size() > 0);\n  long long n\
    \ = 1LL;\n  for (auto e : arr) {\n    n = (n * e) + e;\n  }\n  long long result\
    \ = 0;\n  for (auto e : arr) {\n    result = ((result * e) + e) / n;\n  }\n  std::vector<long>\
    \ ans;\n  for (auto e : arr) {\n    ans.push_back(result / e);\n    result %=\
    \ e;\n  }\n  return ans;", "    assert(arr.size() != 0);\n    int num_ones = 0;\n\
    \    for (auto n : arr) {\n        num_ones += __builtin_popcount(n);\n    }\n\
    \    long sum = 0;\n    for (int i = 0; i < num_ones; i++) {\n        sum += __builtin_popcount(arr[i]);\n\
    \    }\n    std::sort(arr.begin(), arr.end(), [](const long& a, const long& b)\
    \ {\n        return __builtin_popcount(a) > __builtin_popcount(b);\n    });\n\
    \    for (int i = 0; i < num_ones; i++) {\n        int idx = sum - __builtin_popcount(arr[i]);\n\
    \        arr[idx] = arr[i] ^ __builtin_popcount(arr[i]);\n    }\n    return arr;",
  '    // Write your code here', "    std::vector<long> output(arr.size());\n    std::iota(output.begin(),\
    \ output.end(), 0);\n    for (long & v : arr) {\n        int ones = 0;\n     \
    \   while (true) {\n            if (v & 1) ++ones;\n            else break;\n\
    \            v >>= 1;\n        }\n        output[ones++] = v;\n    }\n    std::sort(output.begin(),\
    \ output.end(), [](const long &a, const long &b){\n        return a == b ? 0 :\
    \ (a > b ? -1 : 1);\n    });\n    return output;", "    std::vector<long> res(arr.size());\n\
    \    for (long &x : res)\n        x = -1;\n    // sorting\n    bool swapped;\n\
    \    do\n    {\n        swapped = false;\n        for (long i = arr.size() - 2;\
    \ i >= 0; i--)\n        {\n            if (arr[i] < arr[i + 1])\n            {\n\
    \                long temp = arr[i];\n                arr[i] = arr[i + 1];\n \
    \               arr[i + 1] = temp;\n                swapped = true;\n        \
    \    }\n        }\n    } while (swapped == true);\n    // storing res\n    std::vector<long>::iterator\
    \ it_begin = res.begin();\n    for (long &x : arr)\n    {\n        if (x != -1)\n\
    \        {\n            it_begin = std::upper_bound(it_begin, arr.end(), x);\n\
    \        }\n    }\n    return res;", '  // Your code goes here', "    // write\
    \ your code here\n    long temp;\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n\
    \    for (long i = 0; i < (sizeof(arr)/sizeof(arr[0])); i++) {\n        // binary\
    \ representation of current number\n        temp = 0;\n        for (long j = i;\
    \ j >= 0; j--) {\n            temp += (arr[j] & 1); // bitwise and between current\
    \ number and previous ones\n        }\n        // if number of ones in the binary\
    \ representation is greater than previous ones, sort\n        if (temp > arr[i-1])\
    \ {\n            std::swap(arr[i-1], temp);\n        }\n    }\n    return arr;",
  "  // sort based on number of ones in its binary representation\n  sort(arr.begin(),\
    \ arr.end(), [](int a, int b) -> bool {\n    return __builtin_popcount(a) < __builtin_popcount(b);\n\
    \  });\n  // sort based on decimal value with comparator function\n  sort(arr.begin(),\
    \ arr.end(), [](int a, int b) -> bool {\n    int re = __builtin_popcount(a);\n\
    \    int rf = __builtin_popcount(b);\n    if (re == 0 && rf == 0) {\n      return\
    \ a > b;\n    }\n    if (re > rf) {\n      return true;\n    } else if (re < rf)\
    \ {\n      return false;\n    } else {\n      return a > b;\n    }\n  });\n  return\
    \ arr;", "    std::vector<long> result(arr.size());\n    std::iota(result.begin(),\
    \ result.end(), 0);\n    auto res = std::count_if(arr.begin(), arr.end(),\n  \
    \                          [&](auto &i) { return i & 1;});\n    // If binary representation\
    \ of numbers in arr is same, sort by decimal\n    // values\n    // Otherwise\
    \ sort by descending order of binary values\n    if (res == arr.size()) return\
    \ arr;\n    return std::stable_sort(arr.begin(), arr.end(),\n                \
    \            [&](auto &a, auto &b) { return res - a < b - res; });", '    // Write
    your code here', '    // Write your solution here', "    // Solution 1\n    std::vector<long>\
    \ result;\n    for (long i : arr)\n        result.push_back(std::count(std::begin(arr),\
    \ std::end(arr), i));\n    // Solution 2\n    std::vector<std::pair<long, long>>\
    \ result;\n    for (long i : arr)\n        result.push_back(std::pair<long, long>(i,\
    \ std::count(std::begin(arr), std::end(arr), i)));\n    // Solution 3\n    std::vector<std::tuple<long,\
    \ long>> result;\n    for (long i : arr)\n        result.push_back(std::make_tuple(i,\
    \ std::count(std::begin(arr), std::end(arr), i)));\n    // Solution 4\n    std::vector<std::tuple<long,\
    \ long, long>> result;\n    for (long i : arr)\n        result.push_back(std::make_tuple(i,\
    \ std::count(std::begin(arr), std::end(arr), i), std::count(std::begin(arr), std::end(arr),\
    \ i)));\n    // Solution 5\n    std::vector<std::tuple<long, long, long, long>>\
    \ result;\n    for (long i : arr)\n        result.push_back(std::make_tuple(i,\
    \ std::count(std::begin(arr), std::end(arr), i), std::count(std::begin(arr), std::end(arr),\
    \ i), std::count(std::begin(arr), std::end(arr), i)));\n    std::sort(result.begin(),\
    \ result.end(), [](const std::tuple<long, long, long, long>& l, const std::tuple<long,\
    \ long, long, long>& r)->bool {\n        // sort based on the tuple elements\n\
    \        return std::get<0>(l) < std::get<0>(r);\n    });\n    return std::move(std::get<0>(result));",
  "  long temp = 0;\n  long res = 0;\n  for (long i = 0; i < arr.size(); i++)\n  \
    \  res += arr[i];\n  if (res > 0)\n    temp = res;\n  for (int i = arr.size()\
    \ - 1; i >= 0; i--) {\n    arr[i] = arr[i] - ((arr[i] & 1) + 1) + temp;\n    temp\
    \ -= (arr[i] & 1);\n  }\n  return arr;", "  assert(arr.size() != 0);\n  std::vector<long>\
    \ sorted_arr;\n  long max_ones = 0, max_dec = 0;\n  for (long i : arr) {\n   \
    \ if (max_ones < i) max_ones = i;\n    if (max_dec < i) max_dec = i;\n  }\n  long\
    \ ones = 0, dec = 0;\n  for (long i : arr) {\n    if (i > max_ones) continue;\n\
    \    while (ones < i && ones + ones > max_ones) ones += 1;\n    while (dec < i\
    \ && dec + dec > max_dec) dec += 1;\n    sorted_arr.push_back(ones);\n    sorted_arr.push_back(dec);\n\
    \  }\n  return sorted_arr;", "    //code here\n    return arr;", "  std::vector<long>\
    \ res;\n  std::sort(arr.begin(), arr.end(), [&](int i, int j) {\n    int one_count\
    \ = bin(i).size() - bin(j).size();\n    if (one_count > 0)\n      return bin(i).size()\
    \ - bin(j).size();\n    return bin(i).size() - bin(i).size();\n  });\n  return\
    \ res;", '    // Your code goes here', "  // Write your code here.\n  return 0;",
  "    long size = arr.size();\n    std::sort(arr.begin(), arr.end(), [](long l, long\
    \ r) -> bool {\n        return l == r;\n    });\n    std::vector<long> res(size);\n\
    \    for (long i = 0; i < size; ++i)\n        res[i] = arr[i];\n    return res;",
  "  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    return __builtin_popcount(static_cast<int>(a))\
    \ - __builtin_popcount(static_cast<int>(b));\n  });\n  std::reverse(arr.begin(),\
    \ arr.end());\n  return arr;", "    assert(arr.size() >= 2);\n    // Store the\
    \ number of ones in arr[].\n    // You can use __builtin_popcountll(arr[]) in\
    \ C++ but not in C.\n    // We can use following trick to compute the number of\
    \ ones quickly.\n    long ones = 1;\n    long cnt = 0;\n    for (long i : arr)\
    \ {\n        cnt += (i & (-ones)) - ones;\n        ones <<= 1;\n    }\n    //\
    \ You can do sort based on decimal value by using __builtin_cmplong and friends.\n\
    \    // We can use following trick to compute sort based on decimal value.\n \
    \   // Note that __builtin_clzll is defined for long long.\n    // See https://gcc.gnu.org/onlinedocs/gcc-3.4/gcc/Other-Builtins.html\n\
    \    long n = arr.size();\n    std::vector<long> res(n, -1);\n    for (long i\
    \ = 0; i < n; i++) {\n        res[arr[i] - 1] = (i & (-ones)) - ones;\n    }\n\
    \    std::vector<long> sorted_res(n, -1);\n    std::iota(sorted_res.begin(), sorted_res.end(),\
    \ 0);\n    // You can sort using std::sort but it will not give you expected result.\n\
    \    std::sort(res.begin(), res.end());\n    std::sort(sorted_res.begin(), sorted_res.end());\n\
    \    // Now compute the number of ones in res[].\n    long zeros = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        if (res[i] == -1) {\n            zeros++;\n\
    \        } else {\n            break;\n        }\n    }\n    // Sort the res array\
    \ according to decimal value of number of ones.\n    std::vector<long> res_dec;\n\
    \    for (long i = 0; i < n; i++) {\n        if (res[i] != -1) {\n           \
    \ res_dec.push_back((i & (-ones)) - ones);\n        }\n    }\n    std::vector<long>\
    \ res_dec_inverse(res_dec.size(), -1);\n    std::iota(res_dec_inverse.begin(),\
    \ res_dec_inverse.end(), -1);\n    for (long i = 0; i < n; i++) {\n        if\
    \ (res[i] != -1) {\n            long j = res_dec_inverse[res[i] - 1];\n      \
    \      res_dec_inverse[res[i] - 1] = i;\n            res[i] = j;\n        }\n\
    \    }\n    // Now return sorted array, res_dec_inverse stores the index of sorted\
    \ array.\n    return res;", "\tassert(arr.size() > 0);\n\tstd::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) -> bool {\n\t\treturn count_ones(static_cast<char>(a))\
    \ < count_ones(static_cast<char>(b));\n\t});\n\tstd::stable_sort(arr.begin(),\
    \ arr.end(), [](long a, long b) -> bool {\n\t\treturn a == b;\n\t});\n\treturn\
    \ arr;", "    // Your code here\n    return arr;", "    std::vector<long> sorted_arr;\n\
    \    int n = arr.size();\n    std::vector<bool> visited(n, false);\n    for (int\
    \ i = 0; i < n; i++) {\n        if (visited[i]) {\n            continue;\n   \
    \     }\n        long val = arr[i];\n        long num_ones = 0;\n        while\
    \ (!visited[num_ones]) {\n            num_ones++;\n        }\n        visited[num_ones]\
    \ = true;\n        for (int j = num_ones - 1; j >= 0; j--) {\n            if (val\
    \ & (1 << j)) {\n                val = val | (1 << (num_ones - 1));\n        \
    \        sorted_arr.push_back(val);\n                break;\n            }\n \
    \       }\n    }\n    return sorted_arr;", "    // your code here\n    std::vector<long>\
    \ results;\n    for (int i = 0; i < arr.size(); i++) {\n        int res = 0;\n\
    \        for (int j = i; j < arr.size(); j++)\n            bitset<sizeof(long)>::test(arr[j]);\n\
    \        for (int j = i; j < arr.size(); j++)\n            res += arr[j];\n  \
    \      results.push_back(res);\n    }\n    results.sort();\n    return results;",
  "   assert(arr.size() >= 1);\n   std::vector<long> res;\n   for (auto it : arr)\
    \ {\n      if (it == 0) continue;\n      long count = 1;\n      while (it != 0)\
    \ {\n         it = it & (it - 1);\n         count++;\n      }\n      res.push_back(count);\n\
    \   }\n   std::sort(res.begin(), res.end());\n   return res;", "    long ones\
    \ = 0;\n    std::vector<long> res;\n    for (auto& i : arr) {\n        ones +=\
    \ i;\n        res.push_back(i);\n    }\n    long min_ones = ones;\n    for (auto&\
    \ i : arr) {\n        ones -=i;\n    }\n    std::vector<long> ans;\n    for (long\
    \ i=ones; i>0; i--) {\n        long tmp = 0;\n        for (long j=0; j<res.size();\
    \ j++) {\n            tmp += (res[j] * i);\n            if (tmp >= min_ones) {\n\
    \                ans.push_back(res[j]);\n                break;\n            }\n\
    \        }\n    }\n    return ans;", "    long long max_count = 0, res = 0;\n\
    \    for (long long i : arr) {\n        if (i > 0) {\n            max_count =\
    \ std::max(max_count, i);\n        }\n    }\n    for (long long i : arr) {\n \
    \       if (i > 0) {\n            res = res * 10 + max_count - i;\n        }\n\
    \    }\n    std::vector<long> ans;\n    while (max_count > 0) {\n        long\
    \ long last = res;\n        while (true) {\n            res *= 10;\n         \
    \   if (res > max_count) {\n                res -= max_count;\n              \
    \  break;\n            }\n            res += max_count;\n            ans.push_back(res);\n\
    \        }\n        max_count -= last;\n    }\n    return ans;", "    long temp[1\
    \ << arr.size()];\n    for (long &x : temp) {\n        x = 0;\n        for (long\
    \ y : arr) {\n            if (y & x)\n                ++x;\n        }\n    }\n\
    \    long long ans = 0;\n    for (long &x : temp) {\n        ans += (long long)x;\n\
    \    }\n    std::vector<long> result;\n    long long temp = ans;\n    for (long\
    \ &x : temp) {\n        result.push_back(x);\n    }\n    return result;", '    //
    Write your code here', "    if (arr.size() == 0) {\n        return arr;\n    }\n\
    \    long num = arr[0];\n    long sum = 0;\n    for (long i : arr) {\n       \
    \ sum += i;\n    }\n    if (sum < num) {\n        std::vector<long> new_arr(arr.begin(),\
    \ arr.begin() + 1);\n        return new_arr;\n    }\n    std::vector<long> new_arr(arr.begin(),\
    \ arr.end() - 1);\n    for (long i = 0; i < arr.size() - 1; i++) {\n        long\
    \ left = arr[i];\n        long right = arr[arr.size() - 1 - i];\n        long\
    \ diff = right - left;\n        if (diff >= num) {\n            long new_val =\
    \ right - num;\n            while (diff > 0) {\n                new_val--;\n \
    \               diff--;\n            }\n            new_arr.push_back(new_val);\n\
    \            diff = new_val - left;\n        }\n    }\n    return new_arr;", " \
    \   // write your code here\n    int size = arr.size();\n    int count = 0;\n\
    \    for (int i = 0; i < size; i++) {\n        if (arr[i] != 0) {\n          \
    \  count++;\n        }\n    }\n\n    for (int i = 0; i < size - 1; i++) {\n  \
    \      for (int j = i + 1; j < size; j++) {\n            if (arr[i] == 0 && arr[j]\
    \ == 0) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n            }\n        }\n    }\n\n    for (int\
    \ i = 0; i < size; i++) {\n        if (arr[i] != 0) {\n            int pos = i;\n\
    \            while (true) {\n                int j = i - 1;\n                while\
    \ (j >= 0 && (arr[j] != 0 && arr[j] < arr[pos])) {\n                    j--;\n\
    \                }\n                if (j == -1) {\n                    break;\n\
    \                }\n                int temp = arr[i];\n                arr[i]\
    \ = arr[j];\n                arr[j] = temp;\n                pos = j;\n      \
    \      }\n        }\n    }\n    std::vector<long> ret;\n    for (int i = 0; i\
    \ < size; i++) {\n        if (arr[i] != 0) {\n            ret.push_back(arr[i]);\n\
    \        }\n    }\n    return ret;", "    std::sort(arr.begin(), arr.end(), [](int\
    \ a, int b) { return count_bits(a) < count_bits(b); });\n    std::sort(arr.begin(),\
    \ arr.end(), [](int a, int b) { return a < b ? a < b : false; });\n    return\
    \ arr;", "\tassert(arr.size() > 0);\n\tstd::vector<long> result(arr.size());\n\
    \tstd::iota(result.begin(), result.end(), 0);\n\tstd::sort(result.begin(), result.end(),\
    \ [](long a, long b){return (a & b) < 0;});\n\tstd::iota(result.begin(), result.end(),\
    \ 0);\n\tstd::sort(result.begin(), result.end(), [](long a, long b){return (a\
    \ & b) > 0;});\n\treturn result;", "    // Write your code here.\n    std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) {\n        return a > b;\n    });\n    int sum\
    \ = 0;\n    long max_sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n  \
    \      long num = arr[i];\n        while (1) {\n            int bin = static_cast<int>(num\
    \ % 2);\n            num /= 2;\n            sum += bin;\n            if (sum >\
    \ max_sum) {\n                max_sum = sum;\n            }\n            if (num\
    \ == 0)\n                break;\n        }\n    }\n    std::vector<long> ret(max_sum\
    \ + 1);\n    for (int i = 0; i <= max_sum; i++) {\n        ret[i] = 0;\n    }\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        int bin = static_cast<int>(arr[i]\
    \ % 2);\n        arr[i] /= 2;\n        ret[bin] += 1;\n    }\n    std::reverse(ret.begin(),\
    \ ret.end());\n    return ret;", "    std::vector<long> new_arr;\n    for (const\
    \ auto& i : arr) {\n        long num = 0;\n        std::bitset<sizeof(long)> bits(i);\n\
    \        for (int j = 0; j < sizeof(long); ++j) {\n            num += bits.test(\
    \ j );\n        }\n        new_arr.emplace_back(std::move(num));\n    }\n    std::sort(new_arr.begin(),\
    \ new_arr.end());\n    return new_arr;", "    std::vector<long> ret(arr.size());\n\
    \    // find number of 1s\n    long num_ones = 0;\n    for (auto i: arr) {\n \
    \       num_ones += i;\n    }\n    // sort them\n    for (auto i: arr) {\n   \
    \     ret[i] += num_ones;\n    }\n    // now find the order according to their\
    \ decimal values\n    for (auto i: arr) {\n        ret[i] += num_ones * 10;\n\
    \    }\n    return ret;", "    // Your code goes here\n    long res = 0;\n   \
    \ for (long i : arr)\n        res += i;\n\n    std::vector<long> result;\n   \
    \ int ones = 0;\n    for (long i : arr) {\n        if (ones < i) {\n         \
    \   ones = i;\n        }\n    }\n\n    for (long i = ones; i > 0; i /= 2)\n  \
    \      for (long j = 2; i * j < arr.size(); j++)\n            std::nth_element(arr.begin()\
    \ + i * j, arr.begin() + j * j);\n    std::sort(arr.begin(), arr.end());\n   \
    \ for (long i : arr)\n        result += i;\n    return result;", "    std::vector<long>\
    \ tmp(arr.size());\n    std::vector<long> res(arr.size());\n\n    for(size_t i\
    \ = 0; i < arr.size(); i++) {\n        for(size_t j = i; j < arr.size(); j++)\
    \ {\n            if((arr[j] == 1LL << i)) {\n                res[j] = i;\n   \
    \             tmp[j] = arr[j];\n            }\n        }\n    }\n\n    if(res.size()\
    \ == arr.size()) res.resize(arr.size());\n    if(tmp.size() == res.size()) tmp.resize(res.size());\n\
    \n    for(size_t i = 0; i < arr.size(); i++) {\n        arr[i] = tmp[i];\n   \
    \ }\n\n    return res;", '    // Your code here', "    int ones = 0;\n    int\
    \ decimal = 0;\n    std::vector<long> sorted;\n    for (long value : arr) {\n\
    \        if (value == 1) {\n            ones++;\n        } else {\n          \
    \  decimal = (decimal << 1) + value;\n        }\n    }\n    if (ones == 0) {\n\
    \        std::sort(arr.begin(), arr.end());\n        return arr;\n    }\n    long\
    \ ones_count = ones / 2;\n    long decimal_count = decimal + ones_count * (decimal\
    \ >> 1);\n    long decimal_decimal_count = (decimal + (decimal >> 1)) / 2;\n \
    \   std::vector<long> decimal_decimal_sorted_arr(decimal_decimal_count);\n   \
    \ for (int i = 0; i < decimal_decimal_count; i++) {\n        decimal_decimal_sorted_arr[i]\
    \ = arr[i * decimal_count + decimal_decimal_count - i - 1];\n    }\n    std::sort(decimal_decimal_sorted_arr.begin(),\
    \ decimal_decimal_sorted_arr.end());\n    std::vector<long> decimal_sorted_arr(decimal_decimal_count\
    \ + ones_count);\n    std::transform(decimal_decimal_sorted_arr.begin(), decimal_decimal_sorted_arr.end(),\
    \ decimal_sorted_arr.begin(), [](long n) { return n % 10; });\n    std::vector<long>\
    \ ones_sorted_arr(ones_count);\n    std::transform(ones_sorted_arr.begin(), ones_sorted_arr.end(),\
    \ ones_sorted_arr.begin(), [](long n) { return n + ones_count; });\n    std::vector<long>\
    \ sorted_arr(ones_count + decimal_decimal_count);\n    std::transform(ones_sorted_arr.begin(),\
    \ ones_sorted_arr.end(), sorted_arr.begin(), [](long n) { return n; });\n    std::transform(decimal_decimal_sorted_arr.begin(),\
    \ decimal_decimal_sorted_arr.end(), sorted_arr.begin(), [](long n) { return n;\
    \ });\n    std::merge(sorted_arr.begin(), sorted_arr.end(), sorted_arr.begin()\
    \ + ones_count, sorted_arr.end(), sorted.begin());\n    std::merge(sorted.begin(),\
    \ sorted.end(), sorted.begin() + ones_count, sorted.end(), sorted.begin() + decimal_decimal_count,\
    \ sorted.end());\n    return sorted;", "    // Your code here\n    return arr;",
  '    // your code here', "    std::vector<long> new_arr(arr.size());\n    std::vector<std::pair<long,\
    \ long> > v;\n    for (int i = 0; i < arr.size(); ++i) {\n        v.emplace_back(arr[i],\
    \ count_ones_bin(arr[i]));\n    }\n    sort(v.begin(), v.end());\n    int j =\
    \ 0;\n    for (int i = 0; i < v.size(); ++i) {\n        new_arr[j] = v[i].first;\n\
    \        new_arr.push_back(v[i].second);\n    }\n    return new_arr;", "    //\
    \ Solution begins\n    std::vector<long> arrSorted(arr.size());\n    int zeroCount\
    \ = 0;\n    for (long i : arr) {\n        if (0 == (i & 1)) {\n            arrSorted[zeroCount++]\
    \ = i;\n        }\n    }\n    int oneCount = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (1 == arr[i]) {\n            arrSorted[oneCount++] = i;\n\
    \        }\n    }\n    int temp = zeroCount;\n    zeroCount = oneCount;\n    oneCount\
    \ = temp;\n    int zeroIndex = zeroCount - 1;\n    int oneIndex = oneCount - 1;\n\
    \    int smaller = 0;\n    while (zeroIndex >= 0 && oneIndex >= 0) {\n       \
    \ swap(arrSorted[zeroIndex], arrSorted[oneIndex]);\n        zeroIndex--;\n   \
    \     oneIndex--;\n    }\n    int i;\n    for (i = 0; i < oneCount; i++) {\n \
    \       swap(arrSorted[zeroIndex], arrSorted[i]);\n        zeroIndex--;\n    }\n\
    \    while (zeroIndex >= 0) {\n        swap(arrSorted[zeroIndex], arrSorted[0]);\n\
    \        zeroIndex--;\n    }\n    // Solution ends\n    return arrSorted;", " \
    \   // Write your code here\n    long num = 0;\n    for (auto i : arr) {\n   \
    \     num += i;\n    }\n    std::sort(arr.begin(), arr.end(),\n              [&num](long\
    \ l, long r) -> bool {\n                  return num < num + r;\n            \
    \  });\n\n    return arr;", "    assert(arr.size() == 1 || arr.size() == 0 ||\
    \ arr[0] == 0);\n    // To convert a number with leading zeros to a binary representation,\n\
    \    // shift the digits one bit to the right and then XOR all the digits\n  \
    \  // together.\n    // Example: for decimal 8, the binary representation of 8\
    \ is 10000000\n    // and shifting it one bit to the right and XORing it with\
    \ other digits,\n    // we will get 00000000 XOR 10000000 == 00000000\n    //\
    \ Now we can use std::bit_cast to convert it to an integer.\n    // The std::bit_cast\
    \ function will take an integral and convert\n    // it into a bit sequence of\
    \ type T.\n    // For example, std::bit_cast<uint64_t>(8) == 64.\n    uint64_t\
    \ x = std::bit_cast<uint64_t>(arr[0]);\n    std::vector<long> new_arr(arr.size());\n\
    \    new_arr[0] = arr[0];\n    for (size_t i = 1; i < arr.size(); ++i) {\n   \
    \     x ^= std::bit_cast<uint64_t>(arr[i]);\n        new_arr[i] = x;\n    }\n\
    \    return new_arr;", "    std::vector<long> result;\n    int size = arr.size();\n\
    \    if (size == 0) {\n        return result;\n    }\n    // count number of 1s\
    \ in arr\n    int num_ones = 0;\n    for (int i = 0; i < size; i++) {\n      \
    \  if (arr[i] == 1) {\n            num_ones++;\n        }\n    }\n    // count\
    \ how many times there are num_ones ones\n    int count = 0;\n    for (int i =\
    \ 0; i < size; i++) {\n        if (arr[i] == 1) {\n            count++;\n    \
    \    }\n    }\n    // create an array with same size as the original array filled\
    \ with 0s\n    std::vector<long> new_arr(size, 0);\n    // fill the first count\
    \ number of 0s with 1s and rest of elements with 0s\n    for (int i = 0; i < count;\
    \ i++) {\n        new_arr[i] = 1;\n    }\n    // copy the original array to new\
    \ array by iterating through arr\n    // and putting 1 in positions indicated\
    \ by new_arr\n    for (int i = 0; i < size; i++) {\n        if (new_arr[i] ==\
    \ 1) {\n            result[size - 1 - i] = arr[i];\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    return arr;", "    // Write your code\
    \ here\n    long sum = 0;\n    for (long &i : arr) {\n        sum = sum + i;\n\
    \    }\n    std::vector<long> sorted_arr;\n    long i = 1;\n    while(sum !=0){\n\
    \        sorted_arr.push_back(i);\n        sum -= i;\n        ++i;\n    }\n  \
    \  return sorted_arr;", '    // your code here', "    // sort array of non-negative\
    \ integers according to\n    // number of ones in their binary representation\
    \ in ascending order.\n    long long num_ones = 0;\n    long long i = 0;\n   \
    \ for (int v : arr) {\n        i++;\n        if (v) num_ones++;\n    }\n    long\
    \ long size = arr.size();\n    while (size > 0) {\n        long long remainder\
    \ = size % 10;\n        size = (size / 10) - 1;\n        long long j = 0;\n  \
    \      while (j < (size - 1) && arr[j] == remainder) {\n            j++;\n   \
    \     }\n        if (j == size - 1) {\n            arr.push_back(arr[j]);\n  \
    \          break;\n        }\n        else {\n            arr.insert(arr.begin()\
    \ + j, arr[j]);\n        }\n    }\n\n    // sort array of non-negative integers\
    \ according to\n    // number of ones in their binary representation in ascending\
    \ order.\n    long long num_ones = 0;\n    long long i = 0;\n    for (int v :\
    \ arr) {\n        i++;\n        if (v) num_ones++;\n    }\n    std::vector<long>\
    \ sorted_arr(arr.size());\n    long long j = 0;\n    long long k = 0;\n    while\
    \ (k < arr.size()) {\n        long long remainder = arr[k] % 10;\n        if (num_ones\
    \ == sorted_arr[j]) {\n            sorted_arr[k] = arr[k];\n        }\n      \
    \  else {\n            if (num_ones < sorted_arr[j]) {\n                std::swap(arr[k],\
    \ sorted_arr[j]);\n            }\n        }\n        i++;\n        if (arr[k])\
    \ {\n            arr[k] = 0;\n            k += 1;\n        }\n        else {\n\
    \            k += 1;\n        }\n        if (i == arr.size()) {\n            break;\n\
    \        }\n    }\n    return sorted_arr;", "    // Write your code here\n   \
    \ int n = arr.size();\n    int max_ones = 0, max_dec = 0;\n    for (int i = 1;\
    \ i < n; i++) {\n        if (arr[i] % 2 == 0) {\n            max_ones = max(max_ones,\
    \ i - 1);\n        } else {\n            max_dec = max(max_dec, i - 1);\n    \
    \    }\n    }\n\n    if (max_ones < max_dec) {\n        std::swap(max_ones, max_dec);\n\
    \    }\n\n    long temp = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            temp = max(temp, arr[max_ones]);\n        } else {\n\
    \            temp += pow(10, i - max_dec - 1);\n        }\n    }\n\n    int swapped\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          int temp1 = arr[max_ones];\n            arr[max_ones] = arr[i];\n \
    \           arr[i] = temp1;\n            swapped += 1;\n        }\n    }\n   \
    \ return arr;", "  // Write your code here\n  long count = 0;\n  long index =\
    \ 0;\n  std::vector<long> sorted_arr;\n  while (index < arr.size()) {\n    long\
    \ current_count = arr[index] & 1;\n    arr[index] >>= 1;\n    sorted_arr.push_back(current_count);\n\
    \    count += current_count;\n    if (count > sorted_arr.size()) {\n      sorted_arr.resize(count);\n\
    \    }\n    ++index;\n  }\n  return sorted_arr;", '    // Your code goes here',
  "  long long result = 0;\n  for (auto &i : arr) {\n    result += i;\n  }\n  std::vector<long>\
    \ res(arr.size());\n  long long t = 0;\n  for (size_t i = 0; i < arr.size(); ++i)\
    \ {\n    t = t << 1;\n    if (arr[i]) {\n      t += 1;\n    }\n    res[i] = t;\n\
    \  }\n  return res;", "    // Complete this function.\n    // It will return sorted\
    \ vector. \n\n    assert(arr.size() > 0);\n    std::vector<long> sorted_arr(arr.size());\n\
    \    long num_ones = 0;\n    long num_binaries = 0;\n    long decimal_value =\
    \ 0;\n    for (auto val : arr) {\n        if (val == 1) {\n            num_ones++;\n\
    \            decimal_value += 1;\n        } else {\n            num_ones = 0;\n\
    \            decimal_value = 0;\n        }\n        num_binaries += num_ones;\n\
    \    }\n    long decimal_value = decimal_value;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sorted_arr[i] = arr[i];\n    }\n    if (num_binaries < arr.size())\
    \ {\n        std::stable_sort(\n            sorted_arr.begin(),\n            sorted_arr.end(),\n\
    \            [decimal_value](long left, long right) -> bool {\n              \
    \  long left_bin_size = __builtin_popcount(left);\n                long right_bin_size\
    \ = __builtin_popcount(right);\n                if (left_bin_size == right_bin_size)\
    \ {\n                    return left_bin_size == 0;\n                }\n     \
    \           return left_bin_size > right_bin_size;\n            });\n        return\
    \ sorted_arr;\n    }\n    if (decimal_value < arr.size()) {\n        std::stable_sort(\n\
    \            sorted_arr.begin(),\n            sorted_arr.end(),\n            [decimal_value](long\
    \ left, long right) -> bool {\n                return left < right;\n        \
    \    });\n        return sorted_arr;\n    }\n    return sorted_arr;", "    std::vector<long>\
    \ ans;\n    long size = arr.size();\n    for (long i = 0; i < size; i++) {\n \
    \       int cnt = std::count(arr.begin(), arr.end(), static_cast<long>(1));\n\
    \        long temp = arr[i];\n        long count = 0;\n        while (temp !=\
    \ 0) {\n            temp = temp >> 1;\n            count++;\n        }\n     \
    \   long temp2 = count * 1000;\n        long temp = temp2 - temp;\n        long\
    \ power = 1;\n        while (temp2 > temp) {\n            temp2 = temp2 >> 1;\n\
    \            power *= 10;\n        }\n        ans.push_back(power * temp + cnt);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;", "    // your\
    \ implementation here\n    return arr;", "    // Your code here\n    // It must\
    \ be done in O(n) time\n    std::vector<long> ans;\n    for(long i : arr){\n \
    \       // If not the first element in array, check if it is odd\n        if(ans.size()>0\
    \ && i%2){\n            // If it is odd, add it to the sorted array\n        \
    \    ans.push_back(i);\n        }\n        else{\n            // If it is not\
    \ odd, compare its decimal value to another\n            // element in the sorted\
    \ array\n            long j = ans.back();\n            long cmp = (int)std::count(std::begin(ans),std::end(ans),i,std::greater<long>());\n\
    \            if(cmp==0){\n                // If it is 0, add it to the sorted\
    \ array\n                ans.push_back(i);\n            }\n            else{\n\
    \                // If it is 1, compare its decimal value to another\n       \
    \         // element in the sorted array\n                long cmp2 = (long)std::count(std::begin(ans),std::end(ans),j,std::greater<long>());\n\
    \                if(cmp2<cmp){\n                    // Swap them\n           \
    \         std::swap(ans.back(),ans.back()+cmp);\n                }\n         \
    \   }\n        }\n    }\n    return ans;", "    // 1. count number of ones in\
    \ arr's binary\n    long zero = 0;\n    long one = 0;\n    for (auto const &i\
    \ : arr) {\n        zero += i;\n        one += 1 & (i >> 1);\n    }\n\n    //\
    \ 2. count number of ones in arr's decimal\n    long count = 0;\n    for (auto\
    \ const &i : arr) {\n        count += i >> 1;\n    }\n\n    // 3. sort according\
    \ to number of ones in arr's binary\n    std::vector<long> res(arr.size());\n\
    \    std::vector<long> tmp(zero);\n    for (auto &i : arr) {\n        tmp += i\
    \ >> 1;\n    }\n    std::sort(tmp.begin(), tmp.end());\n\n    // 4. convert arr's\
    \ binary to dec\n    std::vector<long> tmp2(zero);\n    for (auto const &i : tmp)\
    \ {\n        tmp2 += i;\n    }\n    int i = tmp2.size();\n    while (i > 0 &&\
    \ tmp2[i - 1] == 0) {\n        i--;\n    }\n    std::vector<long> res2(i + (i\
    \ > 0 ? 1 : 0));\n\n    for (auto &i : tmp2) {\n        res2[i] += 1;\n    }\n\
    \n    // 5. sort according to decimal value\n    std::sort(res.begin(), res.end());\n\
    \n    return res;", "    // Write your code here\n    long long ret = 0;\n   \
    \ for (long long i = 0; i < arr.size(); i++) {\n        int cur = arr[i];\n  \
    \      for (int j = i; j > 0; j--) {\n            if (cur % 2 == 1) {\n      \
    \          ret += cur / 2;\n                arr[j] = arr[j - 1];\n           \
    \ }\n            cur /= 2;\n        }\n    }\n    return std::vector<long>(arr.begin(),\
    \ arr.begin() + ret);", "    long long ans = 0;\n    for (long long x: arr) {\n\
    \        ans += x;\n    }\n    long long rem = ans;\n    for (long long x: arr)\
    \ {\n        ans -= rem;\n        rem = (rem + x) % 10;\n    }\n    std::cout\
    \ << \"Original array:\\n\";\n    for (long long x : arr) {\n        std::cout\
    \ << x << \" \";\n    }\n    std::cout << \"\\n\";\n    std::cout << \"Sorted\
    \ array:\\n\";\n    for (long long x : arr) {\n        std::cout << x << \" \"\
    ;\n    }\n    std::cout << \"\\n\";\n    std::cout << ans << \"\\n\";\n    std::vector<long>\
    \ ans1{1};\n    for (long long i = 2; i < ans; i += 2) {\n        ans1.push_back(i);\n\
    \    }\n    for (long long i = 2; i < ans; i += 2) {\n        ans1.push_back(i);\n\
    \    }\n    for (long long i = 1; i < ans; i += 2) {\n        ans1.push_back(i);\n\
    \    }\n    ans1.push_back(ans);\n    ans.clear();\n    long long x = ans1[ans1.size()\
    \ - 1];\n    std::vector<long> ans2 = {x};\n    for (long long i = x; i < ans1[ans1.size()\
    \ - 1] + 10; i++) {\n        ans2.push_back(i);\n    }\n    ans1.clear();\n  \
    \  for (long long i = x; i < ans1[ans1.size() - 1] + 10; i++) {\n        ans1.push_back(i);\n\
    \    }\n    for (long long i = 0; i < ans.size(); i++) {\n        ans[i] = ans2.at(i);\n\
    \    }\n    std::vector<long> ans3 = {x};\n    for (long long i = x; i < ans1[ans1.size()\
    \ - 1] + 10; i++) {\n        ans3.push_back(i);\n    }\n    ans1.clear();\n  \
    \  for (long long i = x; i < ans1[ans1.size() - 1] + 10; i++) {\n        ans1.push_back(i);\n\
    \    }\n    for (long long i = 0; i < ans.size(); i++) {\n        ans[i] = ans3.at(i);\n\
    \    }\n    return ans;", "    long long count = 0;\n    for (auto i : arr) {\n\
    \        count += i;\n    }\n    std::vector<long> output;\n    for (auto i :\
    \ arr) {\n        output.push_back(count - i);\n    }\n    return output;", " \
    \ // Write your answer below.\n  std::vector<long> arr2;\n  std::vector<long>\
    \ arr3;\n  for (int i = 0; i < arr.size(); ++i) {\n    if (arr[i] == 1) {\n  \
    \    arr2.push_back(arr[i]);\n    }\n  }\n  for (int i = 0; i < arr2.size(); ++i)\
    \ {\n    for (int j = 0; j < arr2.size() - 1; ++j) {\n      if (arr2[j] >= arr2[j\
    \ + 1]) {\n        long temp = arr2[j];\n        arr2[j] = arr2[j + 1];\n    \
    \    arr2[j + 1] = temp;\n        arr3.push_back(arr2[j]);\n      }\n    }\n \
    \ }\n  long k = 0;\n  int l = arr3.size();\n  for (int i = 0; i < l; ++i) {\n\
    \    while (k >= arr3[i]) {\n      arr3.at(k) = 0;\n      k--;\n    }\n  }\n \
    \ k = arr3.size() - 1;\n  while (k >= 0) {\n    arr3.at(k) = 0;\n    k--;\n  }\n\
    \  return arr3;", "    std::vector<long> res;\n    int size = (int) arr.size();\n\
    \    for(int i=0;i<size;i++){\n        long count = 0;\n        for(int j=i;j<size;j++){\n\
    \            if((arr[j]&1)==1)\n                count++;\n        }\n        if(count>0){\n\
    \            int index = count%10;\n            int number = count/10;\n     \
    \       for(int k=0;k<index;k++)\n                res.push_back(number);\n   \
    \     }\n    }\n    if(!res.empty())\n        std::sort(res.begin(),res.end());\n\
    \    return res;", "    // Complete this\n    sort(arr.begin(), arr.end());\n\
    \    return arr;", "    // write your code here\n    long long ans = 0;\n    long\
    \ long ones = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > 0) {\n            ones = arr[i];\n        }\n        for (long j = i + 1;\
    \ j < arr.size(); j++) {\n            if (arr[j] == 0) {\n                break;\n\
    \            }\n            if (arr[j] == 1) {\n                ans += ones;\n\
    \                j--;\n                break;\n            }\n            if (arr[j]\
    \ > 0) {\n                ones = arr[j];\n            }\n        }\n    }\n  \
    \  return std::vector<long>(ans);", "  // YOUR CODE HERE\n  long long int sum\
    \ = 0;\n  long long int n = arr.size();\n  for (long long int i = 0; i < n; i++)\
    \ {\n    sum += arr[i];\n  }\n  long long int maxSum = sum;\n  std::vector<int>\
    \ nums(n);\n  for (long long int i = 0; i < n; i++) {\n    nums[n - i - 1] = -arr[n];\n\
    \    sum += nums[n - i - 1];\n  }\n  long long int minNum = -sum;\n  long long\
    \ int binSum = 0;\n  for (long long int i = 0; i < n; i++) {\n    if (nums[n -\
    \ i - 1] > 0) {\n      binSum++;\n    }\n    if (binSum < minNum) {\n      minNum\
    \ = binSum;\n    }\n  }\n  std::vector<long> res;\n  res.resize(maxSum - sum +\
    \ minNum);\n  int index = 0;\n  for (long long int i = 0; i < n; i++) {\n    long\
    \ long int diff = arr[i] - sum;\n    long long int ones = diff / minNum;\n   \
    \ long long int tens = diff % minNum;\n    long long int bin = 1 << ones;\n  \
    \  bin = bin * (10 - tens) + tens;\n    long long int num = bin;\n    long long\
    \ int pow = 1;\n    while (bin > 0) {\n      num *= bin;\n      bin--;\n    }\n\
    \    res.at(index) = (num == 0 ? 0 : num);\n    index++;\n  }\n  return res;",
  "  // Write your code here\n  return 0;", "    int count = 0;\n    for (long &x:\
    \ arr)\n        count += __builtin_popcount(x);\n    long max = count;\n    std::vector<long>\
    \ ret(arr.size());\n    for (long &x: arr)\n        ret[count++] = x;\n    std::sort(ret.begin(),\
    \ ret.end(),\n              [max](long a, long b) { return (a > b) ? a < b : (a\
    \ < b) ? a > b : 0; });\n    ret.shrink_to_fit();\n    return ret;", "    auto\
    \ ones = std::count(arr.begin(), arr.end(), 1);\n    std::vector<long> ret;\n\
    \    for(long i : arr){\n        ret.push_back(i - ones);\n    }\n    sort(ret.begin(),\
    \ ret.end());\n    return ret;", "    assert(arr.size() > 0);\n    int counter[32]\
    \ = {0};\n    for (int i = 0; i < arr.size(); i++) {\n        counter[arr[i]]\
    \ += 1;\n    }\n    // create an array of zeros\n    std::vector<long> res(32);\n\
    \    for (int i = 0; i < 32; i++) {\n        res[i] = 0;\n    }\n    // count\
    \ and sort\n    for (int i = 0; i < 32; i++) {\n        if (counter[i] > 1) {\n\
    \            res[i] += counter[i] * pow(10, (int)ceil(log10((double)i)));\n  \
    \      }\n    }\n    // sort it\n    for (int i = 0; i < 32; i++) {\n        for\
    \ (int j = i + 1; j < 32; j++) {\n            if (res[j] < res[i]) {\n       \
    \         long tmp = res[i];\n                res[i] = res[j];\n             \
    \   res[j] = tmp;\n            }\n        }\n    }\n    // return it\n    return\
    \ res;", "  // Your code goes here\n  std::sort(arr.begin(), arr.end(), [](long\
    \ l, long r) { return (l < r); });\n  auto ones = std::count_if(arr.begin(), arr.end(),\
    \ [](long x) { return (x & 1); });\n  std::vector<long> res(std::begin(arr), std::begin(arr)\
    \ + ones);\n  std::transform(std::begin(res), std::end(res), std::begin(arr),\
    \ [](long x) { return (x >> 1); });\n  return res;", "    // Write your code here\n\
    \    std::vector<long> res(arr.size());\n    std::iota(res.begin(), res.end(),\
    \ 0);\n\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = i +\
    \ 1; j < arr.size(); j++) {\n            if (arr[i] != 1 && arr[j] != 1) {\n \
    \               long temp = (arr[j] - arr[i]) * pow(10, i);\n                long\
    \ min_index = i;\n                for (int k = j; k > i; k--) {\n            \
    \        if (arr[k] < arr[min_index]) {\n                        min_index = k;\n\
    \                    }\n                }\n                res[i] = res[min_index];\n\
    \                res[j] = temp;\n                i = min_index;\n            }\n\
    \        }\n    }\n    return res;", "    // Your code here\n    return arr;",
  "    // Your code goes here\n    return arr;", "    // Write your code here\n  \
    \  auto ones_count = std::count_if(arr.begin(), arr.end(), [](const long &v) {\
    \ return v == 1; });\n    auto decimal_count = std::count_if(arr.begin(), arr.end(),\
    \ [](const long &v) { return v < 1; });\n    std::vector<long> sorted_arr;\n \
    \   if (ones_count <= decimal_count) {\n        std::sort(arr.begin(), arr.end(),\
    \ [](const long &a, const long &b) { return a < b; });\n        std::stable_sort(arr.begin(),\
    \ arr.end(), [](const long &a, const long &b) { return a < b; });\n    }\n   \
    \ return arr;", "    // Write your code here\n    assert(arr.size() >= 1);\n \
    \   std::vector<long> sorted_arr(arr.size());\n    std::iota(sorted_arr.begin(),\
    \ sorted_arr.end(), 0);\n    for (auto &item : sorted_arr) {\n        auto pos\
    \ = item % 2;\n        for (auto i = sorted_arr.size() - 1; i >= pos; --i) {\n\
    \            auto j = sorted_arr.size() - 1;\n            while (j > i) {\n  \
    \              sorted_arr[j - 1] = sorted_arr[j];\n                --j;\n    \
    \        }\n            sorted_arr[j] = item;\n        }\n    }\n    return sorted_arr;",
  "    long long res = 0;\n    for (auto& i : arr) {\n        int bit = 1;\n     \
    \   while (bit < i) {\n            bit = bit << 1;\n        }\n        res = (res\
    \ + bit) % 10;\n    }\n    return std::vector<long>(arr.begin(), arr.end());",
  '  // Write your code here', '    // Write your code here', "    int n = arr.size();\n\
    \    if (n < 2) {\n        return arr;\n    }\n\n    std::vector<long> result(n);\n\
    \n    std::iota(result.begin(), result.end(), 0);\n\n    for (int i = 1; i < n;\
    \ ++i) {\n        int carry = 0;\n\n        for (int j = 0; j < i; ++j) {\n  \
    \          if (arr[j] & 1) {\n                result[j] += carry;\n          \
    \  }\n            carry = 1;\n            arr[j] >>= 1;\n        }\n        result[i]\
    \ += carry;\n    }\n\n    return result;", "    // Write your code here\n    long\
    \ max_value = 0, min_value = 0, temp_sum = 0;\n    long sum_of_zeros = 0;\n\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) {\n    \
    \        sum_of_zeros += 1;\n        } else {\n            temp_sum += arr[i];\n\
    \        }\n\n        if (temp_sum > max_value) {\n            max_value = temp_sum;\n\
    \        }\n\n        if (temp_sum < min_value) {\n            min_value = temp_sum;\n\
    \        }\n    }\n\n    auto sort = [&arr]() {\n        if (min_value >= max_value)\
    \ {\n            return arr;\n        }\n\n        if (min_value == max_value)\
    \ {\n            std::vector<long> new_arr(arr);\n            std::sort(new_arr.begin(),\
    \ new_arr.end(), [&sum_of_zeros](long x, long y) -> bool {\n                return\
    \ sum_of_zeros == x && sum_of_zeros == y;\n            });\n            return\
    \ new_arr;\n        }\n\n        int mid = (max_value + min_value) / 2;\n    \
    \    std::vector<long> new_arr(arr);\n        std::sort(new_arr.begin(), new_arr.end(),\
    \ [&mid](long x, long y) -> bool {\n            return mid <= x && x <= mid +\
    \ y;\n        });\n\n        if (sum_of_zeros < mid) {\n            std::swap(new_arr[mid\
    \ + 1], new_arr[mid]);\n        }\n        return sort_array(new_arr);\n    };\n\
    \n    return sort();", "    // Your code goes here\n    int size = arr.size();\n\
    \    assert(size > 0);\n    std::vector<long> num(size, 0);\n    int pos = 0;\n\
    \    for (int i = 0; i < size; i++) {\n        while (arr[i] & 1) {\n        \
    \    num[pos]++;\n            arr[i] >>= 1;\n        }\n        pos++;\n    }\n\
    \    std::sort(num.begin(), num.end());\n    int n = num.size();\n    std::vector<long>\
    \ sorted_array(n, 0);\n    for (int i = 0; i < n; i++)\n        sorted_array[i]\
    \ = arr[n * num[i] + i];\n    return sorted_array;", "    long sum = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++)\n        sum += arr[i];\n    if (sum != 0)\n\
    \        return std::vector<long>(std::max_element(arr.begin(), arr.end(), [](long\
    \ lhs, long rhs) { return lhs - rhs < 0; }));\n    else\n        return arr;",
  "    // sort array of non-negative integers according to number of ones in their\
    \ binary representation\n    // and return result", '    // Your code goes here',
  "  std::vector<long> num(arr.size());\n  for (size_t i = 0; i < arr.size(); i++)\
    \ {\n    num[i] = std::bitset<64>(arr[i]).count();\n  }\n  std::sort(num.begin(),\
    \ num.end(), [&arr](int x, int y) {\n    return arr[x] > arr[y];\n  });\n  std::sort(arr.begin(),\
    \ arr.end(), [&num](int x, int y) {\n    return num[x] > num[y];\n  });\n  return\
    \ arr;", "    int n = 0;\n    for (const auto& i : arr) {\n        n += 1;\n \
    \   }\n    std::vector<long> ret;\n    ret.reserve(2 * n);\n    for (int i = 0;\
    \ i < n; i++) {\n        for (int j = n; j < 2 * n; j++) {\n            if (arr[j]\
    \ & (1 << i)) {\n                ret.push_back(arr[j]);\n                arr[j]\
    \ = arr[j] & (1 - (1 << i));\n            }\n        }\n    }\n    ret.push_back(arr[0]);\n\
    \    return ret;", "    // Write your code here\n    int n = arr.size();\n   \
    \ long max_bit_rep = 0;\n    long max_decimal_rep = 0;\n    long max_binary_rep\
    \ = 0;\n    std::vector<long> arr2;\n\n    for (int i = 0; i < n; ++i) {\n   \
    \     int bit_rep = std::count_bits(arr[i]);\n        int decimal_rep = arr[i]\
    \ / bit_rep;\n        int binary_rep = arr[i] % bit_rep;\n        if (bit_rep\
    \ > max_bit_rep) {\n            max_bit_rep = bit_rep;\n        }\n        if\
    \ (decimal_rep > max_decimal_rep) {\n            max_decimal_rep = decimal_rep;\n\
    \        }\n        if (binary_rep > max_binary_rep) {\n            max_binary_rep\
    \ = binary_rep;\n        }\n    }\n\n    for (int i = 0; i < n; ++i) {\n     \
    \   long decimal_rep = arr[i] / max_bit_rep;\n        long binary_rep = arr[i]\
    \ % max_bit_rep;\n        if (decimal_rep < max_decimal_rep) {\n            arr2.push_back(decimal_rep\
    \ * max_binary_rep + binary_rep);\n        } else {\n            arr2.push_back(decimal_rep\
    \ + (binary_rep - max_binary_rep));\n        }\n    }\n    return arr2;", '    //
    Your code here', "    long long binary[10] = {0};\n    long long dec = 0;\n  \
    \  for (auto &i : arr) {\n        binary = bincount (i, binary);\n        dec\
    \ += i;\n    }\n    std::vector<long> output = {dec};\n    for (auto &i : arr)\
    \ {\n        long long new_dec = dec;\n        binary = bincount (i, binary);\n\
    \        new_dec += i;\n        if (new_dec > output[0]) {\n            output[0]\
    \ = new_dec;\n        }\n    }\n    return output;", "    long cnt = 0;\n    for\
    \ (long &n : arr)\n        cnt += __builtin_popcount(n);\n    if (cnt < arr.size())\n\
    \        return arr;\n    std::vector<long> new_arr;\n    long base = pow(10,\
    \ arr.size() - 1);\n    for (long &n : arr)\n        n = n / base;\n    for (long\
    \ &n : arr) {\n        new_arr.push_back(n);\n    }\n    sort(new_arr.begin(),\
    \ new_arr.end(), std::greater<long>());\n    for (long &n : new_arr)\n       \
    \ cnt += __builtin_popcount(n);\n    return new_arr;", "    // Write your code\
    \ here\n    long long int max=0;\n    int count=0;\n    long long int largest=0;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]==1){\n            count++;\n\
    \        }\n        else if(count>max){\n            max=count;\n            largest=arr[i];\n\
    \        }\n        count=0;\n    }\n    \n    std::vector<long> result;\n   \
    \ for(int i=0;i<arr.size();i++){\n        if(arr[i]==1){\n            result.push_back(arr[i]);\n\
    \        }\n        if(arr[i]==largest){\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    for(int i=0;i<result.size();i++){\n        for(int j=0;j<result.size();j++){\n\
    \            if(result[i]<result[j]){\n                std::swap(result[i],result[j]);\n\
    \            }\n        }\n    }\n    std::sort(result.begin(),result.end(),[](long\
    \ long int a,long long int b)\n    {\n        if(a>b) return true;\n        else\
    \ if(b>a) return false;\n        return true;\n    });\n    \n    return result;",
  "    std::vector<long> rev_arr(arr.size());\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        rev_arr[i] = ~arr[i];\n    }\n    std::sort(rev_arr.begin(),\
    \ rev_arr.end(),\n        [&arr] (long a, long b) {\n        // Here you have\
    \ to implement the code by yourself. Do not use any library function.\n      \
    \  // Just write your code and try to solve the problem by yourself.\n       \
    \ // Don't forget to test your code on all the test cases.\n        return __builtin_popcount(a)\
    \ < __builtin_popcount(b);\n    });\n    rev_arr.insert(rev_arr.begin(), arr.begin(),\
    \ arr.end());\n    return rev_arr;", '    // code here', "    std::vector<long>\
    \ output(arr.size());\n    for (long &val: output) {\n        long sum = 0;\n\
    \        for(int i = 0; i < sizeof(val)*8; i++) sum = (sum << 1) | val;\n    \
    \    int pos = std::count_if(output.begin(), output.end(), [&sum](int x){ return\
    \ sum == x; });\n        val = arr[pos];\n    }\n    return output;", "    //\
    \ Write your code here.\n    std::vector<long> nums(arr.size());\n    for (long\
    \ i : arr) {\n        if (i > 1)\n            nums[i / 2]++;\n    }\n    std::sort(nums.begin(),\
    \ nums.end());\n    for (long i : nums) {\n        if (i > 1) {\n            long\
    \ low = nums[i - 1];\n            long high = nums[i - 1] - low;\n           \
    \ nums[i - 1] = 1;\n            nums[i] = (high < i) ? low : i;\n        }\n \
    \   }\n    return nums;", "    std::vector<long> sorted_arr(arr.size());\n   \
    \ std::iota(sorted_arr.begin(), sorted_arr.end(), 0);\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end(), [&arr](auto a, auto b) {\n        return std::count_if(arr.begin(),\
    \ arr.end(), [&a](auto val) {\n            return ((val & a) == a);\n        })\
    \ < std::count_if(arr.begin(), arr.end(), [&b](auto val) {\n            return\
    \ ((val & b) == b);\n        });\n    });\n    return sorted_arr;", "    // Your\
    \ code goes here\n    std::vector<long> arr1;\n    for (auto i : arr) {\n    \
    \    if (i == 0) {\n            arr1.push_back(i);\n        }\n        else if\
    \ (i > 0) {\n            arr1.push_back(i | 0);\n        }\n    }\n    for (int\
    \ i = 0; i < arr1.size() - 1; i++) {\n        for (int j = i + 1; j < arr1.size();\
    \ j++) {\n            if (arr1[i] > arr1[j]) {\n                long a = arr1[i];\n\
    \                arr1[i] = arr1[j];\n                arr1[j] = a;\n          \
    \  }\n        }\n    }\n    return arr1;", "    // Your code goes here\n    assert(arr.size()\
    \ != 0);\n    long ones = 0;\n    for (auto i : arr) {\n        ones += i;\n \
    \   }\n    long d = 0;\n    for (auto i : arr) {\n        d += i;\n    }\n   \
    \ if (ones > d) {\n        std::sort(arr.begin(), arr.end(), \n              \
    \  [&](long a, long b) {\n                return std::counts_sum((a & 1) + 1,\
    \ (a & 1) + 2, \n                        (a & 1) + 4, (a & 1) + 8, (a & 1) + 16)\
    \ == \n                std::counts_sum((b & 1) + 1, (b & 1) + 2, (b & 1) + 4,\
    \ \n                        (b & 1) + 8, (b & 1) + 16); \n            });\n  \
    \  } else {\n        std::sort(arr.begin(), arr.end(), \n                [&](long\
    \ a, long b) {\n                return std::counts_sum((a & 1) + 1, (a & 1) +\
    \ 2, \n                        (a & 1) + 4, (a & 1) + 8, (a & 1) + 16) < \n  \
    \              std::counts_sum((b & 1) + 1, (b & 1) + 2, (b & 1) + 4, \n     \
    \                   (b & 1) + 8, (b & 1) + 16);\n                });\n    }\n\
    \    return arr;", "  // sort arr\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    long temp = arr[i];\n    int pos = 0;\n    while (temp) {\n      pos = (pos\
    \ + 1) % arr.size();\n      if (arr[pos] != 0) break;\n      temp = temp / 2;\n\
    \    }\n    if (pos != i) {\n      int swap = arr[pos];\n      arr[pos] = arr[i];\n\
    \      arr[i] = swap;\n    }\n  }\n  // return sorted array\n  return arr;", '    //
    Write your code here', "    long cnt = 0;\n    for (long i : arr) {\n        cnt\
    \ += i;\n    }\n    long max_cnt = 0, max_pos = 0;\n    for (long i : arr) {\n\
    \        cnt -= i;\n        if (cnt > max_cnt) {\n            max_cnt = cnt;\n\
    \            max_pos = i;\n        }\n    }\n    std::vector<long> res;\n    res.push_back(max_pos);\n\
    \    for (long i : arr) {\n        if (i == max_pos && cnt > 0) {\n          \
    \  cnt += max_cnt - max_pos;\n            res.push_back(cnt);\n        }\n   \
    \ }\n    return res;", "    // code goes here\n    return arr;", "  assert(arr.size()\
    \ != 0);\n  std::sort(arr.begin(), arr.end(), [](long a, long b) { return a >\
    \ b; });\n  std::sort(arr.begin(), arr.end(), [](long a, long b) { return (a &\
    \ b) < 0; });\n  return arr;", "    long size = arr.size();\n    assert(size !=\
    \ 0);\n    std::vector<long> numOfOnes(size);\n    for (long i = 0; i < size;\
    \ ++i) {\n        numOfOnes[i] = count_ones(arr[i]);\n    }\n    std::sort(numOfOnes.begin(),\
    \ numOfOnes.end());\n    std::vector<long> result;\n    for (long i = 0; i < size;\
    \ ++i) {\n        long j = std::find(numOfOnes.begin(), numOfOnes.end(), numOfOnes[i])\
    \ - numOfOnes.begin();\n        result.push_back(arr[j]);\n    }\n    return result;",
  "    assert(arr.size() > 0);\n    long long n = arr.size();\n    long long maxOnes\
    \ = 0;\n    for (long i = 0; i < n; i++)\n        maxOnes = max(maxOnes, arr[i]);\n\
    \    std::vector<long> out(n);\n    for (long i = 0; i < n; i++)\n        if (arr[i]\
    \ == 1)\n            out[i] = maxOnes - 1;\n        else\n            out[i] =\
    \ arr[i] - 1;\n    for (long i = 0; i < n - 1; i++) {\n        for (long j = i\
    \ + 1; j < n; j++) {\n            if (out[i] > out[j]) {\n                long\
    \ temp = out[i];\n                out[i] = out[j];\n                out[j] = temp;\n\
    \            }\n        }\n    }\n    return out;", '    // Complete this function',
  "    // Write your code here\n    long num_ones = 0;\n    for (long elem : arr)\
    \ {\n        num_ones += (1 << elem);\n    }\n\n    std::vector<long> ret;\n \
    \   for (long elem : arr) {\n        long diff = num_ones - (1 << elem);\n   \
    \     if (diff == 0) {\n            ret.push_back(elem);\n        } else {\n \
    \           ret.push_back((elem * 10) + diff);\n        }\n    }\n\n    return\
    \ ret;", "    long ones = 0;\n    for (auto &x: arr) {\n        x *= 10;\n   \
    \     ones += x % 10;\n        x /= 10;\n    }\n    long result = 0;\n    for\
    \ (auto &x: arr) {\n        result += ones * x;\n    }\n    std::sort(arr.begin(),\
    \ arr.end(), [&](long lhs, long rhs) {\n        return lhs < rhs;\n    });\n \
    \   std::reverse(arr.begin(), arr.end());\n    std::vector<long> temp(arr.size());\n\
    \    for (auto &x: arr) {\n        x /= 10;\n        temp.push_back(x);\n    }\n\
    \    for (auto &x: temp) {\n        temp.push_back(x * 10 + temp.size());\n  \
    \  }\n    return temp;", "    std::vector<long> tmp;\n    for (long & i: arr)\n\
    \        if (i & 1) tmp.push_back(i);\n    tmp.sort();\n    return tmp;", "  \
    \  // your code goes here\n    assert(arr.size() > 0);\n    long long ans = 0;\n\
    \    long long t = 0;\n    for (size_t i = 0; i != arr.size(); ++i) {\n      \
    \  for (size_t j = 0; j != arr.size(); ++j) {\n            ans += arr[j] & (1L\
    \ << j);\n            ans += ans * arr[j];\n            ans *= arr[i];\n     \
    \   }\n    }\n    long long ret = 0;\n    for (size_t i = 0; i != arr.size();\
    \ ++i) {\n        ret += arr[i] & (1L << i);\n        ret *= t;\n    }\n    for\
    \ (size_t i = 0; i != arr.size(); ++i) {\n        ans += ret & (1L << i);\n  \
    \      ret *= arr[i];\n    }\n    ans *= arr.size();\n    std::vector<long> ret;\n\
    \    ret.reserve(arr.size());\n    for (size_t i = 0; i != arr.size(); ++i) {\n\
    \        ret.push_back(ans & (1L << i));\n        ans >>= i;\n    }\n    return\
    \ ret;", "  // your code here\n  std::vector<long> ans;\n  long ones = 0;\n  for\
    \ (auto i : arr) {\n    ones += i;\n  }\n  assert(ones > 0);\n  ans.push_back(ones);\n\
    \  long dec = 0;\n  while (ones > 0) {\n    dec = ones - 1L;\n    ones = ones\
    \ / 2;\n    ans.push_back(dec);\n  }\n  std::sort(ans.begin(), ans.end());\n \
    \ return ans;", "    std::vector<long> newArr; // Your array after sorting\n \
    \   int size = arr.size();\n    for (int i = 0; i < size; i++) {\n        if (arr[i]\
    \ != 0) {\n            long count = 0;\n            while (arr[i] != 0) {\n  \
    \              arr[i] = arr[i] & -arr[i];\n                count++;\n        \
    \    }\n            newArr.push_back(count);\n        }\n    }\n    for (int i\
    \ = 0; i < size - 1; i++) {\n        for (int j = i + 1; j < size; j++) {\n  \
    \          if (newArr[i] > newArr[j]) {\n                long temp = newArr[i];\n\
    \                newArr[i] = newArr[j];\n                newArr[j] = temp;\n \
    \           }\n        }\n    }\n    return newArr;", "    long ans = 0, sum =\
    \ 0;\n    for (auto &i : arr) {\n        sum += i;\n    }\n    for (auto &i :\
    \ arr) {\n        long temp = i;\n        while (temp) {\n            ans += temp\
    \ % 10;\n            temp /= 10;\n        }\n    }\n    long ones = sum - ans;\n\
    \    ans += ones;\n    std::vector<long> sorted_arr(arr.begin(), arr.end());\n\
    \    std::vector<long> temp_arr;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] == 1) {\n            long a = sorted_arr[i];\n           \
    \ long b = ans - sorted_arr[i];\n            temp_arr.push_back((long long)a +\
    \ (long long)b);\n        } else {\n            temp_arr.push_back(arr[i]);\n\
    \        }\n    }\n    std::sort(temp_arr.begin(), temp_arr.end());\n    return\
    \ temp_arr;", "    std::sort(arr.begin(), arr.end());\n    int sum = 0;\n    for\
    \ (auto v : arr) {\n        sum += v;\n    }\n    int pos = 0;\n    int tmp =\
    \ 0;\n    int max_idx = 0;\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] == 1) {\n            tmp++;\n            if (tmp > max_idx) {\n\
    \                max_idx = tmp;\n            }\n        } else {\n           \
    \ tmp--;\n        }\n    }\n    for (int i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] < max_idx) {\n            int idx = i-(max_idx-arr[i])+1;\n   \
    \         if (pos < idx) {\n                pos = idx;\n            }\n      \
    \  }\n    }\n    std::vector<long> ans;\n    ans.push_back(arr[pos]);\n    for\
    \ (int i = pos+1; i < arr.size(); i++) {\n        ans.push_back(arr[i]);\n   \
    \ }\n    return ans;", '    // Your code goes here', "    std::vector<long> sorted_arr;\n\
    \    long temp;\n    for (int i = 0; i < arr.size() - 1; i++) {\n        sorted_arr.push_back(i);\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[j] &\
    \ (1 << j)) {\n                sorted_arr.push_back(j);\n            }\n     \
    \   }\n    }\n\n    for (int i = 0; i < arr.size() - 1; i++) {\n        temp =\
    \ sorted_arr[i];\n        sorted_arr[i] = sorted_arr[i + 1];\n        sorted_arr[i\
    \ + 1] = temp;\n    }\n\n    return sorted_arr;", '    // write your code here',
  "  std::vector<long> sorted_arr;\n  for (long i = 0; i != arr.size(); i++) {\n \
    \   long count = 1;\n    while (arr[i] == arr[i])\n      count++;\n    sorted_arr.push_back(count\
    \ * arr[i]);\n  }\n  std::sort(sorted_arr.begin(), sorted_arr.end());\n  return\
    \ sorted_arr;", "    std::vector<long> ret;\n    long curr = INT_MAX;\n    std::vector<bool>\
    \ visited(arr.size(), false);\n    std::vector<bool> reversed(arr.size(), false);\n\
    \    for (long i : arr) {\n        while (visited[i]) {\n            auto j =\
    \ reversed[i] ? i : ret - 1;\n            std::swap(ret[j], ret[i]);\n       \
    \     visited[j] = true;\n            reversed[j] = false;\n        }\n      \
    \  visited[i] = true;\n        curr = i;\n    }\n    return ret;", '    // Your
    code goes here', "    std::sort(arr.begin(), arr.end(), [](int a, int b) {\n \
    \       return count_bits(a) < count_bits(b);\n    });\n    return arr;", "  \
    \  assert(arr.size() > 0);\n    // Your code goes here\n    int ones_count = 0,\
    \ dec_count = 0;\n    long decimal_pos = 0, decimal_val = 0;\n    for (const auto&\
    \ i : arr) {\n        ones_count += i & 1;\n        dec_count += i >> 1;\n   \
    \ }\n    decimal_val = dec_count;\n    for (int i = 0; i < ones_count; i++) {\n\
    \        decimal_val = dec_val << 1;\n        decimal_val += ones_count - i;\n\
    \        arr.insert(arr.begin(), decimal_val);\n    }\n    long decimal_val2 =\
    \ 0;\n    for (int i = 0; i < ones_count; i++) {\n        decimal_val2 = decimal_val2\
    \ << 1;\n        decimal_val2 += ones_count - i;\n        arr.insert(arr.begin(),\
    \ decimal_val2);\n    }\n    return arr;", "    std::vector<long> result;\n  \
    \  long ans = std::numeric_limits<long>::max();\n    for (auto it: arr) {\n  \
    \      if (it) {\n            ans = min(ans, it + 1);\n        }\n    }\n    std::vector<long>\
    \ res(arr.size());\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i])\
    \ {\n            res[i] = ans - arr[i];\n        }\n        else {\n         \
    \   res[i] = ans;\n        }\n    }\n    for (auto it: arr) {\n        if (it)\
    \ {\n            ans = min(ans, it - 1);\n        }\n    }\n    for (auto it:\
    \ res) {\n        if (it) {\n            ans = min(ans, it);\n        }\n    }\n\
    \    for (auto it: res) {\n        if (it) {\n            result.push_back(it);\n\
    \        }\n    }\n    return result;", "    //Sort based on number of ones\n\
    \    std::sort(arr.begin(), arr.end(), [&](long x, long y){\n        return !(x&y);\n\
    \    });\n    //Sort based on decimal value\n    std::sort(arr.begin(), arr.end(),\
    \ [&](long x, long y){\n        return x < y;\n    });\n    return arr;", '    //
    write your code here', "    // Write your code here\n    long long int sum = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        int val = arr[i];\n     \
    \   sum += val;\n    }\n    long long int num = 1;\n    int count = 0;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (arr[i] == 0) {\n           \
    \ num++;\n            count += num;\n        }\n    }\n    long long int max =\
    \ 0;\n    int maxCount = 0;\n    for (int i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] == 0) {\n            max = arr[i];\n            maxCount = count;\n\
    \        }\n    }\n    std::vector<long> arr1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == 0) {\n            arr1.push_back(max);\n     \
    \       arr1.push_back(maxCount);\n        }\n    }\n    int count = 0;\n    int\
    \ lastMax = 0;\n    long long int maxCount = 1;\n    for (int i = 0; i < arr1.size();\
    \ i++) {\n        count += arr1[i];\n        if (arr1[i] > max) {\n          \
    \  lastMax = max;\n            maxCount = count;\n        }\n    }\n    long long\
    \ int sum = 0;\n    int sumCount = 0;\n    for (int i = 0; i < arr1.size(); i++)\
    \ {\n        sum += arr1[i];\n        sumCount += arr1[i];\n    }\n    std::vector<long>\
    \ arr2;\n    for (int i = 0; i < arr1.size(); i++) {\n        if (arr1[i] == 0)\
    \ {\n            arr2.push_back(max);\n            arr2.push_back(sumCount);\n\
    \        }\n    }\n    std::vector<long> arr3;\n    for (int i = 0; i < arr1.size();\
    \ i++) {\n        if (arr1[i] == 0) {\n            arr3.push_back(arr2[i]);\n\
    \        }\n    }\n    long long int maxCount1 = 0;\n    int maxCount2 = 0;\n\
    \    int maxCount3 = 0;\n    int maxCount4 = 0;\n    for (int i = 0; i < arr3.size();\
    \ i++) {\n        if (arr3[i] == max) {\n            if (arr3[i] == maxCount1)\
    \ {\n                if (arr3[i] == maxCount2) {\n                    if (arr3[i]\
    \ == maxCount3) {\n                        if (arr3[i] == maxCount4) {\n     \
    \                       arr3.push_back(0);\n                        }\n      \
    \              } else {\n                        arr3.push_back(maxCount4);\n\
    \                    }\n                } else {\n                    arr3.push_back(maxCount3);\n\
    \                }\n            } else {\n                arr3.push_back(maxCount2);\n\
    \            }\n        } else {\n            arr3.push_back(maxCount1);\n   \
    \     }\n    }\n    for (int i = 0; i < arr3.size(); i++) {\n        if (arr3[i]\
    \ == 0) {\n            arr3.push_back(arr2[i]);\n        }\n    }\n    for (int\
    \ i = 0; i < arr3.size(); i++) {\n        if (arr3[i] == 0) {\n            arr3.push_back(arr1[i]);\n\
    \        }\n    }\n    return arr3;", "    assert(arr.size() > 0);\n    long n\
    \ = arr.size();\n    // get number of ones in binary representation of arr[i]\n\
    \    long num_ones = 0;\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ == 1) {\n            num_ones++;\n        }\n    }\n    // sort according to\
    \ num_ones\n    std::vector<long> temp(arr.size());\n    for (long i = 0; i <\
    \ n; i++) {\n        if (num_ones == 0) {\n            temp[i] = arr[i];\n   \
    \     }\n        else if (num_ones == 1) {\n            temp[i] = arr[i];\n  \
    \      }\n        else if (num_ones > 1 && num_ones <= 10) {\n            temp[i]\
    \ = arr[i] + (arr[i] / 10) + (arr[i] / 100) + (arr[i] / 1000);\n            num_ones\
    \ -= 1;\n        }\n        else if (num_ones > 10) {\n            temp[i] = arr[i]\
    \ + (arr[i] / 1000) + (arr[i] / 1000000);\n            num_ones -= 10;\n     \
    \   }\n    }\n    return temp;", '    // code here']
stop_tokens:
- "\n}"
