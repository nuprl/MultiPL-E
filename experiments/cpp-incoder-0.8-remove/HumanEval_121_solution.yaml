name: HumanEval_121_solution
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list of\
  \ integers, return the sum of all of the odd elements that are in even positions.\n\
  // Examples\n// >>> solution([5, 8, 7, 1]) \n// 12\n// >>> solution([3, 3, 3, 3,\
  \ 3]) \n// 9\nlong solution(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = solution;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)8, (long)7, (long)1}))) == (12));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)3, (long)3, (long)3, (long)3}))) == (9));\n    assert(candidate((std::vector<long>({(long)30,\
  \ (long)13, (long)24, (long)321}))) == (0));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)9}))) == (5));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)8}))) == (0));\n    assert(candidate((std::vector<long>({(long)30, (long)13,\
  \ (long)23, (long)32}))) == (23));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)13, (long)2, (long)9}))) == (3));\n}\n"
completions: ["  long sum = 0;\n  for (int i = 0; i < lst.size(); i+= 2) {\n    sum\
    \ += lst[i];\n  }\n  return sum;", "    long sum = 0;\n    long a = lst[0];\n\
    \    long b = lst[1];\n    for (long i = 2; i < lst.size(); i++) {\n        a\
    \ = a + lst[i];\n        if (i % 2 == 0) {\n            sum += a;\n        }\n\
    \    }\n    return sum;", "    auto it = lst.begin();\n    long result = 0;\n\
    \    while(it!=lst.end()){\n        if((it+2)%2!=0){\n            result+=*it;\n\
    \            it++;\n        }else{\n            it++;\n        }\n    }\n    return\
    \ result;", "    long odd_sum = 0;\n    for (long &i : lst)\n        if (i % 2\
    \ == 1)\n            odd_sum += i;\n    return odd_sum;", "    long sum = 0, flag\
    \ = 1;\n    for (long &i : lst) {\n        if (i % 2 == 0) {\n            sum\
    \ += i;\n        } else {\n            sum += i - flag;\n            flag = 1;\n\
    \        }\n    }\n    return sum;", "  // Write your code here\n   assert(lst.size()\
    \ > 0);\n   if (lst.size() % 2 != 0){\n      return 0;\n   }\n   long sum = 0;\n\
    \   for (std::size_t i = 0; i < lst.size(); i++) {\n      sum += std::abs(lst[i\
    \ + (lst.size() - 1)] - lst[i]);\n   }\n   return sum % 2;", "    long sum = 0;\n\
    \    for(long i = lst.size()-1; i >= 0; i--) {\n        if(lst[i] % 2 == 0) {\n\
    \            sum = sum + lst[i];\n        }\n    }\n    return sum;", "   assert(lst.size()>0);\n\
    \   long sum = 0;\n   for(long i = 0; i < lst.size(); i++)\n   {\n      if(i %\
    \ 2 == 0)\n      {\n        sum += lst[i];\n      }\n   }\n   return sum;", " \
    \   if (lst.size() % 2 == 0) {\n        long sum = 0;\n        for (long i = 0;\
    \ i < lst.size(); i += 2)\n            sum += lst[i];\n        return sum;\n \
    \   }\n    else return 0;", "    // Write your code in C++11\n    // You can use\
    \ std::accumulate to find sum of all odd elements of lst in even position \n \
    \   // Example \n    // lst = [5,8,7,1]\n    // accumulate \n    // 5 + 8 + 7\
    \ + 1 + 0 + 0 + 0 = 12\n    // then return 12\n    // you can use std::find and\
    \ std::distance to find the position of first odd number in lst \n    // example\
    \ \n    // lst = [3,3,3,3]\n    // std::find returns the iterator pointing to\
    \ the first element in lst with value 3. \n    // std::distance returns the number\
    \ of elements in lst\n    // std::distance( std::find(lst.begin(), lst.end(),\
    \ 3), lst.end()) \n    // will return 4\n    // You can then use the above 2 elements\
    \ to get the sum of all odd numbers in even positions. \n    // Example \n   \
    \ // lst = [3,3,3,3]\n    // std::find(lst.begin(), lst.end(), 3) \n    // will\
    \ return iterator pointing to 5\n    // std::distance( std::find(lst.begin(),\
    \ lst.end(), 3), lst.end() ) \n    // will return 4\n    // Now the trick is that\
    \ you can get the odd positions in even positions using the above 2 elements \n\
    \    // and use the std::accumulate to find the sum of all odd numbers\n    //\
    \ Example \n    // lst = [3,3,3,3]\n    // std::find(lst.begin(), lst.end(), 3)\
    \ \n    // will return iterator pointing to 5\n    // std::distance( std::find(lst.begin(),\
    \ lst.end(), 3), lst.end() ) \n    // will return 4\n    // now use the above\
    \ iterator and std::accumulate to calculate the sum\n    // Example\n    // lst\
    \ = [5,8,7,1]\n    // std::find(lst.begin(), lst.end(), 3) \n    // will return\
    \ iterator pointing to 5\n    // std::distance( std::find(lst.begin(), lst.end(),\
    \ 3), lst.end() ) \n    // will return 4\n    // now use accumulate to find the\
    \ sum\n    // Example \n    // accumulate \n    // 5 + 8 + 7 + 1 + 0 + 0 + 0 =\
    \ 12\n    // return 12\n    // You can write this in 1 line with std::accumulate\
    \ and std::find, but you have to write multiple lines \n    // Example \n    //\
    \ accumulate \n    // return std::accumulate(lst.begin(), lst.end(), 0ll)\n  \
    \  //             + std::accumulate(std::find(lst.begin(), lst.end(), 3), lst.end(),\
    \ 0ll)\n    // return 12\n    // return std::accumulate(lst.begin(), lst.end(),\
    \ 0ll) + std::accumulate(std::find(lst.begin(), lst.end(), 3), lst.end(), 0ll)\n\
    \    // return 12", "    // Write your code here.\n    int i=0;\n    long sum=0;\n\
    \    for(i=0;i<lst.size();i++){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n\
    \        }\n    }\n    return sum;", "    assert(lst.size() > 0);\n    long sum\
    \ = 0;\n    for(auto &i : lst) {\n        if (i%2 == 0)\n            sum += i;\n\
    \        else\n            sum -= i;\n    }\n    return sum;", "    assert(lst.size()\
    \ != 0);\n    long sum = 0;\n    for (long x : lst) {\n        if (x % 2 != 0)\
    \ sum += x;\n    }\n    return sum;", "  // code here\n  std::sort(lst.begin(),lst.end());\n\
    \  \n  for(long i=0;i<lst.size();i++){\n    if(lst[i]%2!=0){\n      if(lst[(i+1)%lst.size()]%2==1){\n\
    \      lst[(i+1)%lst.size()]-=1;\n      lst[i]+=1;\n      }\n    }\n  }\n  \n\
    \  return std::accumulate(lst.begin(),lst.end(),0);", "    assert(lst.size() >\
    \ 0);\n    int sum = 0;\n    for (auto it: lst)\n        if (it % 2 != 0)\n  \
    \          sum += it;\n    return sum;", "    // write your code in C++14\n  \
    \  long ans = 0, odds = 0, evens = 0, total = 0;\n    for (long i = 0; i != lst.size();\
    \ ++i)\n    {\n        if (i % 2 == 0)\n            evens += lst[i];\n       \
    \ else\n            odds += lst[i];\n    }\n    ans = evens + odds;\n    total\
    \ = ans;\n    for (int i = 0; i < lst.size(); ++i)\n    {\n        if (i % 2 ==\
    \ 0)\n            total += lst[i];\n    }\n    return total;", "    // write your\
    \ code in C++14\n    // return 0L;\n    long sum = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 != 0 && lst[i] % 2 != 0) {\n       \
    \     sum += lst[i];\n        }\n    }\n    return sum;", "    // code here\n\
    \    int sum = 0;\n    for (int i=0; i<lst.size(); i++)\n        if (lst[i] %\
    \ 2 != 0 && lst[i+1] % 2 == 0)\n            sum += lst[i];\n    return sum;",
  "    // code here\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i+=2)\n\
    \    {\n        sum += lst[i];\n    }\n    return sum;", "    std::sort(lst.begin(),\
    \ lst.end());\n    long sum = 0;\n    for (std::size_t i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 0)\n            sum += lst[i];\n    }\n    return\
    \ sum;", "    if (lst.size() <= 0) return 0;\n    assert(lst.size() >= 2); //\
    \ If lst size is 0, return 0.\n    for (long &i : lst) {\n        i = i + (lst.size()\
    \ - i) % 2;\n    }\n    return lst[0];", "    // code here\n    long sum = 0;\n\
    \    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n        if (i\
    \ % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    \n    // code here\n    long sum = 0;\n    for (long i = 0; i < lst.size();\
    \ ++i){\n        if (lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n\
    \    \n    return sum;", "  std::sort(lst.begin(), lst.end());\n  int sum = 0;\n\
    \  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] % 2 == 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;", "    long long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++)\n    {\n        if(i % 2 == 0)\n            sum\
    \ += lst[i];\n    }\n    return sum;", "    long sum = 0;\n    for(long i = 0;\
    \ i< lst.size(); i++) {\n        if(lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long ans = 0;\n    long sum = 0;\n \
    \   long val = 0;\n    for(std::size_t i = 0; i< lst.size(); i++) {\n        val\
    \ = lst[i];\n        if (val % 2 == 0) {\n            ans += val;\n          \
    \  sum += val;\n        }\n    }\n    return ans - sum;", "    std::set<long>\
    \ even;\n    for(long i : lst) {\n        if(i%2==0) even.insert(i);\n    }\n\
    \    long ans = 0;\n    for(long i : even) {\n        ans += i;\n    }\n    return\
    \ ans;", "    std::sort(lst.begin(), lst.end());\n    long res = 0;\n    for(long\
    \ i = 0; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0) {\n            for(int\
    \ j = i; j > lst.size()/2 - i; j--)\n                res += lst[j];\n        }\n\
    \    }\n    return res;", "  std::vector<bool> is_even_pos(lst.size()/2);\n  for(auto&\
    \ i : lst) {\n    is_even_pos[i / 2] = !is_even_pos[i / 2];\n  }\n  long ans =\
    \ 0;\n  for(long i = 0; i < lst.size(); ++i) {\n    if(is_even_pos[i]) ans +=\
    \ lst[i];\n  }\n  return ans;", "    long long result = 0;\n    for (long long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 != 0 && lst[i] % 2 !=\
    \ 1) {\n            result += lst[i];\n        }\n    }\n    return result;",
  "    // code here\n    long sum=0;\n    for(long i=0;i<lst.size();i++)\n    {\n\
    \        if(lst[i]%2==1)\n        {\n            sum+=lst[i];\n        }\n   \
    \ }\n    return sum;", "    long sum = 0;\n    bool flag = false;\n    for (long\
    \ i : lst) {\n        if (i % 2 != 0) {\n            sum += i;\n        } else\
    \ {\n            flag = true;\n        }\n    }\n    return flag ? sum : -1;",
  "    long sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n    {\n        if\
    \ (i & 1)\n        {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;", "    // code here\n    std::vector<bool> v(lst.size());\n    for (int\
    \ i = 0; i < lst.size(); i++)\n    {\n        v[i] = lst[i] % 2 != 0;\n    }\n\
    \    long s = 0;\n    for (auto i : v)\n    {\n        if (i)\n            s +=\
    \ lst[i];\n    }\n    return s;", "    std::set<long> s;\n    std::set<long> v;\
    \ // set for the values present in odd position\n    long sum = 0;\n    // to\
    \ remove duplicates\n    for(auto i : lst)\n    {\n        v.insert(i);\n    }\n\
    \    // to remove duplicates\n    for(auto i : v)\n    {\n        if(i % 2 ==\
    \ 1)\n        {\n            s.insert(i);\n        }\n    }\n    // to remove\
    \ duplicates\n    for(auto i : s)\n    {\n        sum+=i;\n    }\n    return sum;",
  "   // code here\n   return 0;", "     std::sort(lst.begin(), lst.end());\n    \
    \ long long int sum=0;\n     for(int i = 0; i < lst.size(); i++)\n     {\n   \
    \      if(lst[i]%2==0)\n         {\n            sum+=lst[i];\n         }\n   \
    \      if(lst[i]%2!=0)\n         {\n            sum-=lst[i];\n         }\n   \
    \  }\n     return sum;\n }\n</code>\n<|/ a dscore=0 |>\n<| a tags=algorithm,c\
    \ |>\nPython Implementation\n<code>\ndef odd_sum2(arr):\n    odd_sum = 0\n   \
    \ even_sum = 0\n    for x in arr:\n        if x % 2 == 0:\n            even_sum\
    \ += x\n        else:\n            odd_sum += x\n    return even_sum, odd_sum\n\
    \narr = [1,3,5,7,8,9]\nprint odd_sum2(arr)\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n   long\
    \ long int arr[] = {1, 3, 5, 7, 8, 9};\n   long long int sum = 0;\n   int size\
    \ = sizeof(arr)/sizeof(arr[0]);\n   for (int i = 0; i < size; i++)\n   {\n   \
    \   if(arr[i]%2==1)\n         sum += arr[i];\n   }\n   cout<<sum<<endl;\n   return\
    \ 0;", "    long sum = 0;\n    for(int i=0;i<lst.size();i++){\n        if(i %\
    \ 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return sum;", " \
    \ // write your code here\n  assert(lst.size()%2==0);\n  \n  int sum=0,cnt=0;\n\
    \  for(long i:lst)\n  {\n    if(i%2==0)\n    {\n      cnt++;\n      if(cnt==2)\n\
    \      {\n        sum+=i;\n        cnt=0;\n      }\n    }\n  }\n  return sum;",
  "    long sum = 0;\n    for (auto i : lst) {\n        // Odd positions first\n \
    \       sum += (i % 2 == 1);\n        // Odd positions next\n        sum += (i\
    \ + 1) % 2 == 0;\n    }\n    return sum;", "    // Write your code here\n    long\
    \ ans = 0;\n    for(long i: lst)\n        if(i % 2 == 0)\n            ans += i;\n\
    \    return ans;", "  // Your code here\n  if(lst.empty())\n    return 0;\n  \n\
    \  long sum = 0;\n  for (long i = 0; i < lst.size(); i++)\n  {\n     if( (i &\
    \ 1) == 1) \n     {\n       sum += lst[i];\n     }\n  }\n  return sum;", "   \
    \ int i, count = 0;\n    for(i=0; i<lst.size(); ++i){\n        if(lst[i] % 2 !=\
    \ 0){\n            count += lst[i];\n        }\n    }\n    return count;", '    return
    lst.at(2);', "  int evens = 0;\n  int odds = 0;\n  long sum = 0;\n  for (auto\
    \ it : lst)\n  {\n    if (it % 2 == 0)\n    {\n      evens++;\n    }\n    else\n\
    \    {\n      odds++;\n    }\n  }\n  for (auto it : lst)\n  {\n    if (it % 2\
    \ == 0)\n    {\n      if (odds > 1)\n      {\n        sum += it + 1;\n      }\n\
    \    }\n    else if (odds > 0)\n    {\n      sum += it;\n    }\n  }\n  return\
    \ sum;", "    int n = lst.size();\n    long sum = 0;\n    long maxValue = 0;\n\
    \n    for (int i = 0; i < n; i++) {\n        if (lst[i] % 2 != 0)\n          \
    \  sum += lst[i];\n    }\n    return sum;", "    // your code here\n     return\
    \ 0;", "    long sum = 0;\n    for(auto i = lst.begin()+1; i < lst.end(); i++)\
    \ {\n        if(lst[i]%2==0 && lst[i-1]%2!=0)\n            sum += lst[i];\n  \
    \  }\n    return sum;", "    if(lst.size()<2)\n        return 0;\n    long sum=0;\n\
    \    for(int i=0; i<lst.size(); i++)\n    {\n        sum+=lst[i]%2==0? lst[i]+1\
    \ : lst[i];\n    }\n    return sum;", "    assert(lst.size() == lst.front());\n\
    \    long sum = 0;\n    int i = 0;\n    while (i < lst.size()) {\n        if (lst.at(i)\
    \ % 2 != 0) {\n            sum += lst.at(i);\n            i++;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for(auto it : lst) {\n        if(it%2==1) {\n            sum+=it;\n     \
    \   }\n    }\n    return sum;", "    std::vector<int> evenPos(lst);\n    for (auto\
    \ x : evenPos)\n        x /= 2; // For each even element in the list, divide it\
    \ by 2 and store it in evenPos\n    std::vector<long> sumEvenPos(evenPos.begin(),\
    \ evenPos.end());\n    long sum = 0;\n    for (auto x : sumEvenPos)\n        sum\
    \ += x;\n    return sum;", "    long sum = 0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(lst[i]%2==0) sum+=lst[i];\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for (int i = 0; i < lst.size() - 1; i++) {\n        sum += lst[i];\n\
    \        if (lst[i] % 2 == 0) {\n            sum += lst[i + 1];\n        }\n \
    \   }\n    return sum;", "    long ans = 0, sum = 0;\n    int count = 0;\n   \
    \ for (long x : lst) {\n        if (x%2 == 0) {\n            sum += x;\n     \
    \       count++;\n        }\n        else {\n            if (count == 0) {\n \
    \               ans = sum;\n                break;\n            }\n          \
    \  sum += x - count*2;\n            count--;\n        }\n    }\n    return ans;",
  "    long sum = 0;\n    for(long i = 0; i <lst.size(); i++){\n        if((i%2) ==\
    \ 0){\n            sum += lst[i];\n        }\n    }\n    return sum;", "    long\
    \ res = 0;\n    std::sort(lst.begin(), lst.end()); // sort list \n    for (long\
    \ &i : lst) {\n        bool isOdd = i % 2 == 1; // find out if number in even\
    \ position\n        if (isOdd)\n            res += i;\n    }\n    return res;",
  "    long oddSum = 0;\n    for (auto i : lst) {\n        if (i % 2 == 1) {\n   \
    \         oddSum = i + oddSum;\n        }\n    }\n    return oddSum;", "    long\
    \ long sum = 0;\n    for(auto i:lst){\n        if(i % 2 != 0)\n            sum\
    \ += i;\n    }\n    return sum;", "    assert(lst.size() > 0);\n    long res =\
    \ 0;\n    long prev = 0;\n    for (long &x: lst) {\n        if (x % 2 != 0)\n\
    \            prev = x;\n        else\n            res += prev;\n    }\n    return\
    \ res;", "    long long sum=0;\n    for(auto &elem: lst)\n    {\n        if(elem%2==0)\n\
    \        {\n            sum+=elem;\n        }\n    }\n    return sum;", "    //\
    \ code here\n    long sum = 0;\n    for (int i = 0; i < lst.size() ; i++) {\n\
    \        int k = lst[i];\n        \n        for(int j = i; j < lst.size(); j++){\n\
    \            sum += (k * j) % 2 ? 1 : 2;\n        }\n    }\n    return sum;",
  "   assert(lst.size()>=2);\n   long result=0;\n   for(long i=1; i<lst.size(); i++)\
    \ {\n      if(lst[i]%2!=0) result+=lst[i];\n   }\n   return result;", "    //\
    \ code here\n\tlong sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t\tif\
    \ (i%2==0) sum += lst[i];\n\t}\n\treturn sum;", "    // write your code in C++11\n\
    \    long odd_sum = 0;\n    for(long index = 0; index < lst.size(); index++) {\n\
    \        if(index % 2 == 1) {\n            odd_sum += lst[index];\n        }\n\
    \    }\n    return odd_sum;", "    long sum = 0, odd = 0;\n    for(auto x: lst)\n\
    \    {\n        if(x%2 == 1)\n        {\n            sum += x;\n            odd\
    \ += 1;\n        }\n        else\n        {\n            if(odd > 0)\n       \
    \     {\n                sum += x/2;\n                odd -= 1;\n            }\n\
    \        }\n    }\n    return sum;", "    // Write your code here\n    if (lst.empty()){\n\
    \        return 0;\n    }\n\n    std::sort(lst.begin(), lst.end());\n    long\
    \ sum = 0;\n    for(int i = 1; i < lst.size(); i++){\n        long n = lst[i];\n\
    \        if (n % 2 == 0){\n            sum += n;\n        }\n    }\n    return\
    \ sum;", "  long s = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i %\
    \ 2 == 1) {\n      s += lst[i];\n    }\n  }\n  return s;", "    int sum = 0;\n\
    \    \n    if(lst.size() == 0){\n        return 0;\n    }\n    \n    for (int\
    \ i=0; i < lst.size(); i++){\n        if(lst.at(i) % 2 == 0){\n            sum\
    \ += lst.at(i);\n        }\n    }\n    \n    return sum;", "    // write your\
    \ code in C\n    long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n \
    \       if (i%2 != 0)\n            sum += lst[i];\n    }\n    return sum;", " \
    \   long ans = 0;\n    long long x = 0;\n    for(long i = 0; i < lst.size(); ++i)\
    \ {\n        x += lst[i];\n        if(x % 2 != 0) {\n            ans += x;\n \
    \       }\n    }\n    return ans;", "    if (lst.size() <= 0) {\n        return\
    \ 0;\n    }\n    long ans = 0;\n    std::vector<bool> isEven(lst.size(), true);\n\
    \    std::for_each(lst.begin(), lst.end(), [&](long n) {\n        std::for_each(lst.begin(),\
    \ lst.end(), [&](long n1) {\n            if (n1 % 2 != 0 && isEven[n1]) {\n  \
    \              ans += n;\n                isEven[n1] = false;\n            }\n\
    \        });\n    });\n    return ans;", "    // Your code here\n    // std::map<long,\
    \ int> t;\n    long sum = 0;\n    for(auto i: lst)\n    {\n        if(i % 2 ==\
    \ 0)\n        {\n            sum+=i;\n        }\n    }\n    return sum;", "  \
    \  assert(lst.size() > 0);\n    long sum = 0, n = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        sum += lst[i];\n        n++;\n    }\n    long l\
    \ = sum;\n    if (n == 0) return l; \n    for (int i = 1; i < n; i++) {\n    \
    \    if (lst[i] % 2 == 0) l++;\n    }\n    return l % 2 == 0 ? sum : sum - sum\
    \ % 2;", "  long sum = 0;\n  for (int i=0; i<lst.size(); i++){\n    sum+=lst[i]%2==0?\
    \ lst[i]*2+lst[i]: lst[i];\n  }\n  return sum;", "  // Your code here\n  long\
    \ even = 0, odd = 0, sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    if\
    \ (i % 2 == 0)\n      even += lst[i];\n    else\n      odd += lst[i];\n  }\n \
    \ return even * odd;", "    long sum = 0;\n    for(int i = 0; i < lst.size();\
    \ i++) {\n        if(lst[i] % 2 == 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;", "   // code here\n    long total = 0;\n    long mid\
    \ = lst.size() / 2;\n    for (long i = 0; i < mid; i++) {\n        if (lst[i]\
    \ % 2 == 0)\n            total += lst[i];\n    }\n    for (long i = 0; i < mid;\
    \ i++) {\n        if (lst[i] % 2 == 1)\n            total += lst[i];\n    }\n\
    \    return total;", "    //code here\n    long sum = 0;\n    \n    //Find position\
    \ of first even element\n    long pos = 0;\n    while(pos < lst.size())\n    {\n\
    \        if(lst[pos] % 2 == 0)\n        {\n            pos = pos + 1;\n      \
    \  }\n        else\n        {\n            break;\n        }\n    }\n    \n  \
    \  //Find position of last odd element\n    long pos2 = lst.size() - 1;\n    while(pos2\
    \ > 0)\n    {\n        if(lst[pos2] % 2 != 0)\n        {\n            pos2 = pos2\
    \ - 1;\n        }\n        else\n        {\n            break;\n        }\n  \
    \  }\n    \n    //Add odd element between the first even element and the last\
    \ odd element \n    long mid = (pos + pos2)/2;\n    sum += lst[mid];\n    \n \
    \   //add even elements between the first and last even elements\n    for(int\
    \ i = 0; i < pos; i++)\n    {\n        sum += lst[i];\n    }\n    \n    for(int\
    \ i = pos; i <= pos2; i++)\n    {\n        sum += lst[i];\n    }\n    \n    return\
    \ sum;", "    // code here\n    long ans = 0;\n    \n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 1) {\n            ans += lst[i];\n        }\n \
    \   }\n    \n    return ans;", "    // code here\n    long sum = lst[0];\n   \
    \ for(int i=1;i<lst.size();i++){\n        if(lst[i]%2!=0){\n            sum+=lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum =0;\n    for (long i = 0; i\
    \ < lst.size();i++ )\n    {\n        sum+=lst[i];\n    }\n\n    for (long i =\
    \ 0; i < lst.size();i++ )\n    {\n        if( (i+1) % 2 ==0 )\n        {\n   \
    \         sum-=lst[i];\n        }\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] % 2 != 0 && lst[i]\
    \ % 2 != 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    std::stack<long> stk;\n    long sum = 0;\n    long sum1 = 0, sum2 = 0;\n  \
    \  for(long i = 0; i< lst.size();++i)\n    {\n        stk.push(i);\n        while(!stk.empty()){\n\
    \            sum1 = sum1 + lst[stk.top()];\n            stk.pop();\n         \
    \   sum2 = sum2 + sum1;\n        }\n        sum += sum2;\n    }\n    return sum;",
  "    int n = lst.size();\n    assert(n>0);\n    int sum=0;\n    int pos=0;\n   \
    \ for(int i=0;i<n;i++) {\n        if(i%2==0) {\n            sum+=lst[pos];\n \
    \       }\n        pos++;\n    }\n    return sum;", "    // code here\n    long\
    \ ans = 0;\n    for (int i = 0; i < lst.size(); i++){\n        if( (i & 1) ==\
    \ 1)\n            ans += lst[i];\n    }\n    \n    return ans;", "    // code\
    \ here\n    std::vector<long> even;\n    for(auto v : lst)\n        if(v%2 ==\
    \ 0)\n            even.push_back(v);\n    return even.at(even.size()-2);", " \
    \   long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if\
    \ (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    // Write your code in C++17\n    int odd = 0, even = 0;\n    long sum = 0;\n\
    \    for (auto i : lst)\n        if (i % 2 == 1) odd++;\n        else even++;\n\
    \    for (int i = 0; i < even; i++)\n        if (lst[i] % 2 == 1)\n          \
    \  sum += lst[i];\n    return sum;", "  std::vector<long> even;\n  std::vector<long>\
    \ odd;\n  for (int i = 0; i < (int) lst.size(); i++) {\n    if (lst[i] % 2 ==\
    \ 0) {\n      even.push_back(lst[i]);\n    } else {\n      odd.push_back(lst[i]);\n\
    \    }\n  }\n  if (odd.size() == 0) {\n    return 0;\n  }\n  int i = 0;\n  long\
    \ sum = 0;\n  while (i != even.size()) {\n    sum += odd.at(i / 2);\n    i++;\n\
    \  }\n  return sum;", "    int sum = 0;\n    for(int i=0; i<lst.size(); i++) {\n\
    \        if(lst[i] % 2 == 0)\n            sum += lst[i];\n    }\n    return sum;",
  "    long sum = 0;\n    for (long i : lst) {\n        if (i % 2 != 0) {\n      \
    \      sum += i;\n        }\n    }\n    return sum;", "    // Write your code\
    \ here\n    long sum = 0;\n    for(auto i : lst) {\n        if(i % 2 != 0) {\n\
    \            sum += i;\n        }\n    }\n    return sum;", "  long odd_sum =\
    \ 0;\n  long even = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    even = even\
    \ + (lst[i] & 1);\n    if (lst[i] & 1) {\n      odd_sum += lst[i];\n    }\n  }\n\
    \  return odd_sum + even;", "    long s = 0;\n    for(long i=0; i<lst.size();\
    \ i++){\n        if(i%2==0){\n            s += lst[i];\n        }\n    }\n   \
    \ return s;", "    long result = 0;\n    for (int i=0; i<lst.size(); i++) {\n\
    \        if(lst[i] % 2 != 0)\n            result += lst[i];\n    }\n    return\
    \ result;", "    // Write your code here.\n    \n    std::stack<long> stk;\n \
    \   long sum=0;\n    \n    std::for_each(lst.begin(),lst.end(),[&stk,&sum](int\
    \ &x){\n        if(stk.empty()) stk.push(x);\n        else if(stk.top()%2==0 &&\
    \ x%2==0) sum+=stk.top();\n        else stk.push(x);\n    });\n    \n    return\
    \ sum;", "  assert(lst.size() > 0);\n  long ans = 0, curr = 0;\n  for (int i =\
    \ 0; i < lst.size(); i++) {\n    if (i % 2 != 0) {\n      ans += lst[i];\n   \
    \ }\n  }\n  return ans;", "    long long sum = lst[0];\n    for (long i = 1; i\
    \ < lst.size(); i++) {\n        sum += lst[i] - lst[i / 2] + lst[(i + 1) / 2]\
    \ ;\n    }\n    return sum;", "    std::sort(lst.begin(), lst.end());\n    \n\
    \    long sum = 0;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst.at(i)\
    \ % 2 != lst.at(i - 1) % 2) {\n            sum += lst.at(i);\n        }\n    }\n\
    \    return sum;", "    long res = 0;\n    for(auto i : lst){\n        if(i %\
    \ 2 != 0){\n            res += i;\n        }\n    }\n    return res;", "    //\
    \ code here\n    std::stack<long> stk={0}, result=0;\n    for(auto i : lst){\n\
    \        if(stk.empty()){\n            stk.push(i);\n            continue;\n \
    \       }\n        if(stk.top()%2==0){\n            stk.push(i);\n        }else{\n\
    \            result += stk.top();\n            stk.pop();\n        }\n    }\n\
    \    return result.front();", "    long sum = 0;\n    for (int i=0; i<lst.size();\
    \ i++) {\n        if (i%2 == 0)\n            sum += lst[i];\n    }\n    return\
    \ sum;", "    assert(lst.size() > 0);\n    long ans = 0;\n    for (auto i : lst)\n\
    \        if (i % 2 != 0)\n            ans += i;\n    return ans;", "  long long\
    \ sum = 0;\n  for(long i = 0; i < lst.size(); ++i){\n    if(lst[i] % 2 == 0)\n\
    \      sum += lst[i];\n  }\n  return sum;", "    int sum = 0;\n    for (int i\
    \ = 0; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0)\n            sum +=\
    \ lst[i];\n        else\n            lst[i] += sum;\n    }\n    return sum;",
  "    int sum = 0;\n    int cur = 0;\n    for (int i = 0; i < lst.size(); i++) {\n\
    \        cur = lst[i];\n        if (i % 2 == 0) {\n            sum += cur;\n \
    \       } else {\n            if (sum % 2 != 0) {\n                sum += cur;\n\
    \            }\n        }\n    }\n    return sum;", "// Write your code here\n\
    \    long count = 0;\n    for (long &x: lst)\n    {\n        if ((x%2 == 1) &&\
    \ (x%4 != 0))\n        {\n            count += x;\n        }\n    }\n    return\
    \ count;", "    long sum = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] % 2 == 1) sum += lst[i];\n    }\n    return sum;", " \
    \   long ans = 0;\n    for (std::size_t i = 0 ; i < lst.size(); i++)\n    {\n\
    \        if(lst[i]%2==0)\n        {\n            ans = ans + lst[i];\n       \
    \ }\n    }\n    return ans;", "    std::sort(lst.begin(), lst.end());\n    long\
    \ long sum = 0;\n    for (long long i = 0; i < lst.size(); i++) {\n        sum\
    \ += lst[(i + 1) % lst.size()];\n    }\n    return sum % 10;", "    int len =\
    \ lst.size();\n    int odd_sum = 0;\n    int i = 0;\n    while(i < len) {\n  \
    \      if(lst[i] % 2 != 0) {\n            odd_sum += lst[i];\n        }\n    \
    \    i++;\n    }\n    return odd_sum;", "    std::sort(lst.begin(), lst.end());\
    \ // Sort the numbers from low to high. \n    long long evenSum = 0, oddSum =\
    \ 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n\
    \            evenSum += lst[i];\n        } else {\n            oddSum += lst[i];\n\
    \        }\n    }\n    return oddSum;", "    // code here\n    long sum = 0;\n\
    \    std::for_each(lst.begin(), lst.end(), [&sum, &lst](long &value) {\n     \
    \   sum += (value & 1) ? value : -value;\n    });\n    return sum;", "    long\
    \ long sum = 0;\n    for (auto i : lst)\n    {\n        if(i % 2 != 0)\n     \
    \   {\n            sum += i;\n        }\n    }\n    return sum;", "    //code\
    \ here\n    long sum = 0;\n    long sumEven = 0;\n    for (long i = 0; i < lst.size();\
    \ i++){\n        if (lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n\
    \        if (lst[i] % 2 == 1){\n            sumEven += lst[i];\n        }\n  \
    \  }\n    return sumEven;", "    // write your code here\n    long sum = 0;\n\
    \    long evenSum = 0;\n    for(auto i = lst.begin(); i != lst.end(); i++) {\n\
    \        evenSum += *i;\n        if(*i & 1)\n            sum += *i;\n    }\n \
    \   assert(evenSum == sum);\n    return sum;", "    long sum = 0;\n    // O(n\
    \ log n)\n    for (std::size_t i = 0; i < lst.size(); ++i)\n        sum += (lst[(i\
    \ + 1) % lst.size()] % 2 == 1) ? lst[i] : 0;\n    return sum;", "    long sum\
    \ = 0;\n    for (auto x: lst)\n        if (x % 2 == 0)\n            sum += x;\n\
    \    return sum;", "    \n    // Write your code here\n    \n    if(lst.size()<2)\n\
    \        return 0;\n    long mid = lst.size()/2;\n    \n    if(mid==0)\n     \
    \   return lst[lst.size()-1];\n    \n    long ls=0;\n    long rs=0;\n    \n  \
    \  for(int i=0;i<mid;i++)\n    {\n        if(lst[i]%2==1)\n            ls += lst[i];\n\
    \        else\n            rs += lst[i];\n    }\n    return ls+rs;", "    // write\
    \ your code in C++14 (g++ 6.3 -std=c++14 -Wall -Wextra -O2)\n    long sum = 0;\n\
    \    long i = 0;\n    for (; i < lst.size(); i++) {\n        if (lst[i] % 2 !=\
    \ 0){\n            sum+=lst[i];\n        }\n    }\n    return sum;", "    long\
    \ sum=0;\n    int j;\n    for(j=0;j<lst.size();j++)\n    {\n        if(j%2==0)\n\
    \        {\n            sum+=lst[j];\n        }\n    }\n    return sum;", "  \
    \  \n    long ans = 0;\n    \n    for(long i=0; i<lst.size(); i++) {\n       \
    \ if(i%2==0) ans += lst[i];\n    }\n    return ans;", "    long total = 0;\n \
    \   long i;\n    for (i = 0; i < lst.size(); i++) {\n        total += lst[i];\n\
    \        long j;\n        for (j = i; j < lst.size(); j++) {\n            if (j\
    \ % 2 == 1) {\n                total += lst[j];\n                break;\n    \
    \        }\n        }\n    }\n    return total;", "    if(lst.size()%2!=0){\n\
    \        std::cin>>\"The size of the vector should be divisible by 2\"<<std::endl;\n\
    \        return 0;\n    }\n    long sum=0;\n    for(auto i=0;i<lst.size()/2;i++){\n\
    \        sum+=lst[i];\n    }\n    return sum;", "    // write your code in C++17\n\
    \    long sum = 0;\n    std::sort(lst.begin(), lst.end());\n    for(int i = 0;\
    \ i < lst.size(); ++i)\n    {\n        if(lst[i] % 2 != 0)\n            sum +=\
    \ lst[i];\n    }\n    return sum;", "  int n = lst.size();\n  // int even=0, odd=1;\n\
    \  \n  int counter=0;\n  // for(long i=0;i<n;i++)\n  // {\n  //   if(i%2==0)\n\
    \  //   {\n  //     if(lst.at(i)%2==0)\n  //     {\n  //       counter++;\n  //\
    \     }\n  //   }\n  //   else\n  //   {\n  //     if(lst.at(i)%2==1)\n  //  \
    \   {\n  //       counter++;\n  //     }\n  //   }\n  // }\n  // if(counter%2==0)\n\
    \  // {\n  //   return 0;\n  // }\n  // else\n  // {\n  //   return 1;\n  // }\n\
    \  // return (lst[n-1]%2==0)?0:1;\n  int even=0,odd=1;\n  for (long i = 0; i <\
    \ n; i++)\n  {\n    if (lst.at(i) % 2 == 0)\n    {\n      even = even + lst.at(i);\n\
    \    }\n    else\n    {\n      odd = odd + lst.at(i);\n    }\n  }\n\n  if (even\
    \ % 2 == 0)\n  {\n    return 0;\n  }\n  else\n  {\n    return 1;\n  }\n\n  //\
    \ return (lst[n-1]%2==0)?0:1;", "    long odd_sum = 0;\n    for(long i : lst)\
    \ {\n        if(i % 2 == 1) {\n            odd_sum += i;\n        }\n    }\n \
    \   return odd_sum;", "    long sum = 0;\n    for (auto item : lst) {\n      \
    \  if (item % 2 == 1) {\n            sum += item;\n        }\n    }\n    return\
    \ sum;", "    long sum = 0, oddSum = 0, count = 0;\n    for (auto it = lst.begin();\
    \ it != lst.end(); it++) {\n        if ((*it & 1) == 1)\n            count++;\n\
    \        else\n            sum+=*it;\n    }\n    oddSum = sum - ((count - 1) *\
    \ sum);\n    return oddSum;", "    long evenSum = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            evenSum += lst[i];\n\
    \        }\n    }\n    return evenSum;", "  // write your code in C++14 (g++ 7.3\
    \ or higher)\n  long ans = 0;\n  for(long n: lst)\n  {\n    if(n % 2 == 1)\n \
    \     ans += n;\n  }\n  return ans;", "    if(lst.empty()){\n        return 0;\n\
    \    }\n    int res = 0;\n    int size = lst.size();\n    long even[size + 1]\
    \ = {0};\n    for(int i = 0; i < size; i++){\n        even[i+1] = even[i] + lst[i];\n\
    \    }\n    for(int i = 1; i < size; i++){\n        if(even[i] % 2 == 0){\n  \
    \          res += even[i];\n        }\n    }\n    return res;", "    // Write\
    \ your code here\n    long sum = 0;\n    for (long i = 0; i < lst.size(); i++)\n\
    \    {\n        if (lst[i] % 2 == 0) \n        {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    int i = 0;\n    for(i;\
    \ i<lst.size(); i+=2){\n        sum += lst[i];\n    }\n    return sum;", "   \
    \ int sum=0;\n    for(int i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n \
    \           sum+=lst[i];\n        }\n    }\n    return sum;", "  int ans = 0;\n\
    \  \n  int size = lst.size();\n  for(int i = 0 ; i < size ; ++i){\n      if(lst[i]\
    \ % 2 == 0){\n        ans += lst[i];\n      }\n  }\n  \n  return ans;", "  int\
    \ sum = 0;\n  for (auto it = lst.cbegin(); it != lst.cend(); ++it) {\n    if (*it\
    \ % 2 == 1) {\n      sum += *it;\n    }\n  }\n  return sum;", "    // code here\n\
    \    long sum = 0;\n    for(long i=1; i<lst.size(); i++){\n        if(lst[i]%2==1)\n\
    \            sum+=lst[i];\n    }\n    return sum;", "    // Write your code here\n\
    \    if (lst.size() == 0)\n        return 0;\n    std::vector<long>::iterator\
    \ it = lst.begin();\n    long sum = 0;\n    for (it++; it != lst.end(); it++)\n\
    \        if ((*it) & 1)\n            sum += *it;\n    return sum;", "    long\
    \ odd = lst[lst.length() - 1];\n    for (long i = lst.size() - 2; i >= 0; i--)\
    \ {\n        if (lst[i] % 2 == 0) {\n            odd += lst[i];\n        }\n \
    \   }\n    return odd;", "    // Write your code here\n    return 0;", "    long\
    \ long sum = 0;\n    for(long long i=0; i<lst.size();i++){\n        if(lst[i]%2\
    \ == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;", "  \
    \  if (lst.empty()) return 0;\n    std::vector<long> even;\n    std::vector<long>\
    \ odd;\n    for (int i=0; i < lst.size(); ++i) {\n        if (i % 2 == 0) {\n\
    \            even.push_back(lst[i]);\n        } else {\n            odd.push_back(lst[i]);\n\
    \        }\n    }\n    return std::accumulate(even.begin(), even.end(), 0L, std::plus<long>(),\
    \ std::minus<long>()) + std::accumulate(odd.begin(), odd.end(), 0L, std::plus<long>(),\
    \ std::minus<long>());", "    assert(lst.size() != 0);\n    long evenSum = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if(lst[i] % 2 == 0) evenSum\
    \ += lst[i];\n    }\n    return evenSum;", "  long sum = 0;\n  for (long i = 1;\
    \ i < lst.size(); i++) {\n    if (lst[i] % 2 != 0 && lst[i] % 2 == lst[i - 1]\
    \ % 2) {\n      sum += lst[i];\n    }\n  }\n  return sum;", "    long sum = 0;\n\
    \    for (long i : lst) {\n        if (i & 1)\n            sum += i;\n    }\n\
    \    return sum;", "    int sum = 0;\n    for (long &val : lst) {\n        if\
    \ (val % 2 != 0)\n            sum += val;\n    }\n    return sum;", "  assert(lst.size()\
    \ != 0);\n  long long ans = 0;\n  for (long i = 0; i < lst.size(); i++) {\n  \
    \  if (i % 2 == 0) {\n      ans += lst[i];\n    }\n  }\n  return ans;", "    std::vector<long>\
    \ nums = lst;\n    long sum=0;\n    long countOdd = 0, countEven = 0;\n    for(long\
    \ i=0;i<nums.size();i++){\n        if (nums[i&1]>0) countEven++;\n        else\
    \ countOdd++;\n    }\n    sum = (countOdd-countEven)*nums[0]+countEven*nums[1];\n\
    \    return sum;", "    long sum = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if ((i % 2) == 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;", "    int size=lst.size();\n    long sum=0;\n    for(int i=0;i<size;i++)\n\
    \    {\n        if(lst[i]%2==0)\n        {\n            sum+=lst[i];\n       \
    \ }\n    }\n    return sum;", "    long ans = 0;\n    int i = 0;\n    while(i\
    \ < lst.size()) {\n        if (lst[i] % 2 != 0) \n            ans += lst[i];\n\
    \        i += 1;\n    }\n    return ans;", "    long result = 0;\n    for (auto\
    \ it: lst) {\n        result += it%2?*it:0;\n    }\n    return result;", "   \
    \ long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;",
  "    long evenSum = 0;\n    for(long &it:lst)\n    {\n        if(it%2)\n       \
    \     evenSum += it;\n        else\n        {\n            it = std::remove(lst.begin(),\
    \ lst.end(), it);\n        }\n    }\n    return evenSum;", "    // code here\n\
    \    int sum = 0;\n    int size = lst.size();\n    for (int i = 1; i < size; i++)\
    \ {\n        if (lst[i] % 2 == 1) {\n            int pos = lst[i] / 2;\n     \
    \       sum += lst[i];\n            for (int j = i + 1; j < size; j++) {\n   \
    \             if (lst[j] % 2 == 0) {\n                    int pos = lst[j] / 2;\n\
    \                    if (pos == i) {\n                        sum += lst[j];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return sum;", "    // your code here\n    \n    std::sort(lst.begin(), lst.end());\n\
    \    \n    long oddSum = 0;\n    for(long i = 0; i < lst.size(); ++i) {\n    \
    \    if(i % 2 == 0) {\n            oddSum += lst[i];\n        }\n    }\n    return\
    \ oddSum;", "    assert(lst.size()>0);\n    long sum = 0;\n    for (auto i:lst)\
    \ {\n        if (i%2==0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;", "  // code here\n  std::cout << std::accumulate(lst.begin(),lst.end(),\
    \ 0LL);\n  return 0;", "    std::vector<long> temp = {lst[0]};\n    long sum =\
    \ 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(i % 2 == 1) {\n \
    \           sum += temp[i];\n        }\n        temp.push_back(lst[i]);\n    }\n\
    \    return sum;", "   long sum = 0;\n   // loop through all the integers\n  \
    \ for (auto n : lst)\n     // if n is even, add it to sum\n     if (n % 2 == 0)\n\
    \       sum += n;\n     // if n is odd, ignore it\n     else\n       continue;\n\
    \     // if sum is now zero, the list is empty\n     if (sum == 0)\n       return\
    \ 0L;\n     // otherwise, add one to sum\n     else\n       sum += 1;\n     return\
    \ sum;", "    if (lst.empty())\n        return 0;\n    long sum = 0;\n    int\
    \ size = lst.size();\n    int evenPos = 0;\n    int oddPos = 0;\n    std::vector<int>\
    \ v;\n    v.push_back(0);\n    for (int i = 0; i < size; i++) {\n        if (lst[i]\
    \ % 2 == 0)\n            evenPos++;\n        else\n            oddPos++;\n   \
    \     if (oddPos > evenPos) {\n            v.push_back(lst[i]);\n        }\n \
    \   }\n    std::sort(v.begin(), v.end());\n    size_t evenSize = v.size() - 1;\n\
    \    size_t oddSize = v.size();\n    int curSum = 0;\n    for (size_t i = 0; i\
    \ < oddSize; i++)\n        curSum += v[i];\n    for (size_t i = 0; i < evenSize;\
    \ i++)\n        curSum -= v[i];\n    return curSum;", "    // Write your code\
    \ in here.\n    return sumOddElements(lst);", "    // code here\n    assert(lst.size()>0);\n\
    \    long ans = 0;\n    for (long i = 0;i<lst.size();i+=2){\n        ans += lst[i];\n\
    \    }\n    return ans;", "    long long ans = 0;\n    std::vector<bool> bvec;\n\
    \    for(long i : lst)\n    {\n        bvec.push_back(i%2==0?true:false);\n  \
    \  }\n    for (long i = 1; i < lst.size(); i++)\n    {\n        bool flag = bvec[i];\n\
    \        if (flag)\n        {\n            ans += lst[i];\n            bvec[i]\
    \ = false;\n        }\n    }\n    return ans;", "    int sum=0;\n    for(int i=0;i<lst.size();i++){\n\
    \        if(lst[i]%2==0)\n            sum+=lst[i];\n    }\n    return sum;", " \
    \   long total = 0;\n    for(long i=0; i < lst.size(); i++) {\n        if(lst[i]\
    \ & 1) total += lst[i];\n    }\n    return total;", "    assert(lst.size() >=\
    \ 2);\n    long sum = 0;\n    for (long i = 0; i < lst.size() - 1; ++i)\n    {\n\
    \        if(lst[i] % 2 != 0 && lst[i + 1] % 2 == 0)\n            sum += lst[i];\n\
    \    }\n    return sum;", "    std::vector<long> v(lst.size());\n    long ans\
    \ = 0;\n    for(int i = 0; i < lst.size(); ++i)\n    {\n        if(lst[i] % 2)\n\
    \            v[i] = lst[i] + lst[i] - 2 * lst[i + 1];\n        else\n        \
    \    ans += v[i];\n    }\n    return ans;", "    long sum=0;\n    long odd=0;\n\
    \    long even=0;\n    for (long i=0;i<lst.size();i++)\n    {\n        if(lst[i]%2==0)\n\
    \            even+=lst[i];\n        else if(lst[i]%2!=0)\n            odd+=lst[i];\n\
    \    }\n    return even+odd;", "    long ans = 0;\n    for (auto i : lst) {\n\
    \        if (i%2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    for(auto itr = lst.begin(); itr != lst.end();\
    \ ++itr) {\n        long val = *itr;\n        if(val % 2 == 0){\n            ans\
    \ += val;\n        }\n    }\n    return ans;", "    // Write your code here\n\
    \    long ans = 0;\n    int i = 0;\n    while (i < lst.size()){\n        if (lst[i]\
    \ % 2 == 1){\n            ans += lst[i];\n            i++;\n        }\n    }\n\
    \    return ans;", "    long ans = 0;\n    \n    std::sort(lst.begin(), lst.end());\n\
    \    \n    for(long i=0; i<lst.size(); i++){\n        long tmp = lst[i];\n   \
    \     \n        if(i % 2 == 0){\n            ans += tmp;\n        }\n    }\n \
    \   return ans;", "    \n    int size = lst.size();\n    if(size <= 0)\n     \
    \   return 0;\n    \n    std::vector<int> evenIndices;\n    std::vector<int> oddIndices;\n\
    \    \n    for(int i = 0; i < size; i++){\n        if(lst[i] % 2 == 0){\n    \
    \        evenIndices.push_back(i);\n        }\n        else{\n            oddIndices.push_back(i);\n\
    \        }\n    }\n    \n    int evenSum = 0;\n    for(auto i : evenIndices){\n\
    \        evenSum += lst[i];\n    }\n    \n    long result = evenSum;\n    \n \
    \   if(size > 1){\n        \n        for(auto i : oddIndices){\n            result\
    \ += lst[i];\n        }\n        \n    }\n    \n    return result;", "  assert(lst.size()\
    \ >= 1);\n  long ans = 0;\n  for(long i=0;i<lst.size();i+=2){\n    ans += lst[i];\n\
    \  }\n  return ans;", "    long odd_sum = 0, even_sum = 0;\n    for (long i =\
    \ 0; i < lst.size(); i++)\n    {\n        if (i % 2 == 0)\n        {\n       \
    \     even_sum += lst[i];\n        }\n        else\n        {\n            odd_sum\
    \ += lst[i];\n        }\n    }\n    return odd_sum + even_sum;", "    if (lst.size()\
    \ == 0) {\n        return 0;\n    }\n\n    int sum = 0;\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;", "    long ans = 0;\n    int i = 0;\n    while(i\
    \ < lst.size()){\n        if(lst[i] % 2 ==0 && i != lst.size()-1 && lst[i+1] %\
    \ 2 == 0){\n            ans += lst[i];\n        }\n        i++;\n    }\n    return\
    \ ans;", "    long long int sum = 0;\n    for(long long int i = 0; i< lst.size();i++)\n\
    \    {\n        if(lst[i] %2==0)\n        {\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;", "    // code here\n    long long res = 0;\n \
    \   int n = lst.size();\n    for (int i = 0; i < n; i++) {\n        if (i % 2\
    \ == 1) {\n            res += lst[i];\n        }\n    }\n    return res;", " \
    \   int n = lst.size();\n    long long arr[n];\n    long long sum = 0;\n    for(int\
    \ i = 0; i < n; i++){\n        arr[i] = lst[i];\n    }\n    for(int i = 0; i <\
    \ n; i++){\n        if (i % 2 == 1){\n            sum += arr[i];\n        }\n\
    \    }\n    return sum;", "    // code here\n    long sum = 0;\n    for (auto\
    \ &x: lst) {\n        if ((x & 1) == 0) {\n            sum += x;\n        }\n\
    \    }\n    return sum;", "    //Code here\n    long odd_sum = 0, even_sum = 0;\n\
    \    for (int i = 0; i < lst.size(); i++)\n    {\n        if (lst[i] % 2 != 0)\n\
    \            even_sum += lst[i];\n        else\n            odd_sum += lst[i];\n\
    \    }\n    return odd_sum + even_sum;", "    // Write your code here\n    int\
    \ n = lst.size();\n    long sum = 0;\n    for(int i = 0; i < n; i++) {\n     \
    \   if(i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;", "    if(lst.empty())\n        return 0;\n    long sum = 0;\n    for(long\
    \ i = 0; i< lst.size(); i++)\n    {\n        if((i % 2) == 0) sum += lst[i];\n\
    \    }\n    return sum;", "// code here\n    long sum=0;\n    for(long i:lst)\n\
    \    {\n       if(i%2==0)\n       {\n            sum=sum+i;\n        }\n    }\n\
    \    return sum;", "    // Write your code here.\n    long sum = 0;\n    for (long\
    \ i : lst)\n        if (i % 2 == 1)\n            sum += i;\n    return sum;",
  "    long long res=0;\n    for(auto i=lst.begin(); i!=lst.end(); ++i){\n       \
    \ if((*i)%2 ==0){\n            res+=(*i);\n        }\n    }\n    return res;",
  "    \n    long sum = 0;\n    \n    for(long i = 0; i < lst.size(); i++)\n    {\n\
    \        if(lst[i] % 2 != 0)\n        {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;", "    // Your code goes here\n    long sum = 0;\n   \
    \ for(long i=0;i<lst.size();i++){\n        if(lst[i]%2==0)\n            sum+=lst[i];\n\
    \    }\n    return sum;", "    // code here\n    int sum = 0;\n    for( int i=0;\
    \ i< lst.size(); i++)\n    {\n        if( ((i+1)%2) == 0)\n        {\n       \
    \     sum += lst[i];\n        }\n    }\n    return sum;", "    long long ans=0;\n\
    \    for(auto x:lst)\n    {\n        if(x%2==0)\n        {\n            ans+=x;\n\
    \        }\n    }\n    return ans;", "    // your code goes here\n    long sum\
    \ = 0;\n    for (int i = 0; i < lst.size(); ++i)\n        if (i % 2 == 1)\n  \
    \          sum += lst[i];\n    return sum;", "    // code here\n    if(lst.size()\
    \ == 0 || lst.size() == 1){\n        return 0;\n    }\n    int sum = 0;\n    for\
    \ (auto val : lst){\n        if(val % 2 == 0){\n            sum += val;\n    \
    \    }\n    }\n    return sum;", "    long sum = 0, even = 0, odd = 0;\n    for\
    \ (auto i : lst) \n        if (i % 2 != 0)\n            sum += i;\n        else\n\
    \            even += i;\n    for (auto i : lst) \n        if (i % 2 == 0)\n  \
    \          odd += i;\n    return sum + even-odd;", "    assert(lst.size() != 0);\n\
    \    long ans = 0;\n    for (long i : lst) {\n        if (i % 2 == 0) ans += i;\n\
    \    }\n    return ans;", "    long ans = 0;\n    for (int i = 0; i < lst.size();\
    \ ++i){\n        if (i % 2 == 0){\n            ans += lst[i];\n        }\n   \
    \ }\n    return ans;"]
stop_tokens:
- "\n}"
