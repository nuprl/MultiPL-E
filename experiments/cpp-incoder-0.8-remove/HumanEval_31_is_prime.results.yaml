language: cpp
name: HumanEval_31_is_prime
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    return n\
    \ == 2 || (n & 1) == 0 && is_prime(n >> 1);\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqizvl_43: /tmp/tmpqizvl_43.cpp:10: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n \
    \           return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp3p6y92q: /tmp/tmpp3p6y92q.cpp:13: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // The primes\
    \ less than the square root of n are not necessarily\n    // prime.\n    if (n\
    \ > sqrt(n)) {\n        return false;\n    }\n    \n    // n can only be even\
    \ if the number is odd.\n    // So we need to take mod 2 too.\n    // If n is\
    \ odd then return false.\n    return (n%2==0);\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6pt9d0kj: /tmp/tmp6pt9d0kj.cpp:19: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // A prime\
    \ number has only two possible factors: 1 and itself.\n    // Check for these\
    \ two factors separately.\n    if (n == 1 || n == 0) {\n        return false;\n\
    \    }\n    // Now we know that n has at least two factors, namely 1 and n.\n\
    \    // Sieve of Eratosthenes.\n    long limit = sqrt(n);\n    for (long i = 2;\
    \ i <= limit; i++) {\n        if (n % i == 0) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Write your\
    \ code here\n  long i = 1L;\n  while (i <= sqrt(n)) {\n    if (n % i == 0) {\n\
    \      return false;\n    }\n    i = i + 2;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpbmkqb2db: /tmp/tmpbmkqb2db.cpp:18: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Base\
    \ case\n    if (n == 2) return true;\n    // A composite number is divisible only\
    \ by itself.\n    if (n % 2 == 0) return false;\n    // Otherwise iterate from\
    \ 3 to sqrt(n) to check for factors.\n    for (int i = 3; i * i <= n; i += 2)\
    \ {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpqubrwxj8: /tmp/tmpqubrwxj8.cpp:23: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n ==\
    \ 1)\n        return true;\n    for(long i = 2; i < n; i++)\n        if(n % i\
    \ == 0)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv64i4ev1: /tmp/tmpv64i4ev1.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Primality\
    \ tests.\n    // Limit upper bound of trial division to sqrt(n).\n    // Trial\
    \ division is fast on prime numbers, because trial division only requires checking\n\
    \    // the divisibility by 2 and no need for prime number factorization.\n  \
    \  if (n > 1)\n        n -= 1;\n    for (long i = 2; i*i <= n; ++i)\n        if\
    \ (n % i == 0)\n            return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq9m5yd5y: /tmp/tmpq9m5yd5y.cpp:18: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Write\
    \ your logic here\n    // For now, use asserts to test your logic.\n    assert(n\
    \ % 2 == 0);\n    assert(n >= 2);\n    long n2 = 2 * n;\n    long n3 = n2 * n;\n\
    \    long n5 = n3 * n;\n    long n7 = n5 * n;\n    long n11=n7 * n;\n    long\
    \ n13=n11 * n;\n    long n17=n13 * n;\n    long n19=n17 * n;\n    long n23=n19\
    \ * n;\n    long n27=n23 * n;\n    long n31=n27 * n;\n    long n37=n31 * n;\n\
    \    long n41=n37 * n;\n    long n43=n41 * n;\n    long n47=n43 * n;\n    long\
    \ n53=n47 * n;\n    long n59=n53 * n;\n    long n61=n59 * n;\n    long n67=n61\
    \ * n;\n    long n71=n67 * n;\n    long n73=n71 * n;\n    long n79=n73 * n;\n\
    \    long n83=n79 * n;\n    long n87=n83 * n;\n    long n89=n87 * n;\n    long\
    \ n97=n89 * n;\n    long n101=n97 * n;\n    long n103=n101 * n;\n    long n105=n103\
    \ * n;\n    long n107=n105 * n;\n    long n109=n107 * n;\n    long n111=n109 *\
    \ n;\n    long n113=n111 * n;\n    long n115=n113 * n;\n    long n117=n115 * n;\n\
    \    long n119=n117 * n;\n    long n121=n119 * n;\n    long n123=n121 * n;\n \
    \   long n125=n123 * n;\n    long n127=n125 * n;\n    long n129=n127 * n;\n  \
    \  long n131=n129 * n;\n    long n133=n131 * n;\n    long n135=n133 * n;\n   \
    \ long n137=n135 * n;\n    long n139=n137 * n;\n    long n141=n139 * n;\n    long\
    \ n143=n141 * n;\n    long n145=n143 * n;\n    long n147=\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpocx_tf7p.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpocx_tf7p.cpp:59:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   59 | }\n      | ^\n/tmp/tmpocx_tf7p.cpp:59:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   59 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tfor (long\
    \ i = 2; i <= n; i++)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8t1m2uyo: /tmp/tmp8t1m2uyo.cpp:13: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // If n is\
    \ 2, then it is prime by definition.\n  if (n == 2)\n    return true;\n  // If\
    \ n is even and smaller than 3, then it is not prime.\n  if (n & 1)\n    return\
    \ false;\n  // If n is odd, then it is prime.\n  for (long i = 2; i * i <= n;\
    \ ++i) {\n    if (n % i == 0)\n      return false;\n  }\n  // If we make it here,\
    \ then n is prime.\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwy_t5xbg: /tmp/tmpwy_t5xbg.cpp:22: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2) return true;\n    if (n <= 1) return false;\n    // Trial division avoids\
    \ reprieve of long division when n is prime.\n    long d = sqrt(n);\n    for (long\
    \ i=2; i<=d; ++i) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int i =\
    \ 1;\n    while (i <= sqrt(n))\n    {\n        if (n % i == 0)\n            return\
    \ false;\n        ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfzzqconj: /tmp/tmpfzzqconj.cpp:17: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 2);\n    for(long i = 2; i * i <= n; i++)\n        if(n % i == 0)\n      \
    \      return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe1wuc7k5: /tmp/tmpe1wuc7k5.cpp:5: bool is_prime(long int): Assertion
    `n > 2'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int count\
    \ = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      count++;\n        }\n    }\n    return count <= 2;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppv8i2xzr: /tmp/tmppv8i2xzr.cpp:20: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Return\
    \ true if n is prime\n    for (int i = 2; i * i <= n; i++)\n        if (n % i\
    \ == 0)\n            return false;\n\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2guc14j7: /tmp/tmp2guc14j7.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n<2)\n\
    \    return false;\n  if (n%2==0)\n    return false;\n  long i=3,j=3;\n  while\
    \ (i<n) {\n    if (n%i==0)\n      return false;\n    i+=2;\n    j+=2;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n == 2)\
    \ return true;\n  if (n <= 3) return n == 2;\n\n  // We know that n is odd, since\
    \ that's the only even prime.\n  // We need to calculate the smallest odd divisor\
    \ of n.\n  // It can even be equal to n - 1 (e.g. 5).\n  // We can use Sieve of\
    \ Eratosthenes to find this value.\n  long squareRoot = sqrt(n);\n  for (long\
    \ i = 3; i <= squareRoot; i += 2) {\n    if (n % i == 0) return false;\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpz5ec26l9: /tmp/tmpz5ec26l9.cpp:20: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // write\
    \ your code here\n    long res = 1;\n    for(int i = 1; i <= sqrt(n); i++){\n\
    \        if(n % i == 0) res = 0;\n    }\n    return res == 0;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqv0mx988: /tmp/tmpqv0mx988.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n < 2)\
    \ return false;\n  if (n == 2) return true;\n  long d = sqrt(n);\n  for (int i\
    \ = 2; i <= d; i++) if (n % i == 0) return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084033
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // The only\
    \ even prime is 2.\n    if (n % 2 == 0) return n == 2;\n\n    // All even numbers\
    \ except 2 are candidates for primality.\n    if (n % 4 == 0) return false;\n\n\
    \    // All numbers are either 1 or 3.\n    // If any of the following is true,\
    \ the number is prime.\n    if (n % 6 == 0 || n % 8 == 0 || n % 10 == 0) return\
    \ true;\n\n    // All other candidates must be prime or composite, except the\
    \ number 3.\n    long s = 3L;\n    long r = 2L;\n    for (long i = 3L; i <= n;\
    \ i += 2L) {\n        // If s is divisible by i, the number is prime.\n      \
    \  if (n % i == 0) {\n            return false;\n        }\n        // Set r to\
    \ i+1, so that 2i+1 will always be a candidate.\n        r = i;\n        while\
    \ (r / i != s) {\n            s *= s;\n            r *= r;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660084038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n < 2)\
    \ return false;\n    if(n == 2 || n == 3) return true;\n    for(long i = 4; i\
    \ <= sqrt(n); i += 2) {\n        if(n%i==0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsa57d_lr: /tmp/tmpsa57d_lr.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n   if (n <=\
    \ 1) return false;\n   if (n == 2) return true;\n   if (n % 2 == 0 || n % 3 ==\
    \ 0) return false;\n   long sqr = sqrt(n);\n   for (int i = 3; i <= sqr; i +=\
    \ 3) {\n      if (n % i == 0 || n % (i + 2) == 0) return false;\n   }\n   return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpae27b68k: /tmp/tmpae27b68k.cpp:27: int main(): Assertion `candidate((77))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 0) return false;\n    // Prime test: only even numbers greater than 2 are tested.\n\
    \    if (n & 1) return false;\n    // Even numbers other than 2 are not prime.\n\
    \    for (long m = 3; m <= n / 2; m += 2) {\n        if (n % m == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_n9fvqon: /tmp/tmp_n9fvqon.cpp:17: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Write\
    \ your code here.\n    long i,j;\n    if(n==2)\n        return true;\n    if(n<2)\n\
    \        return false;\n    for(i=2;i<=n/2;i++)\n    {\n        if(n % i == 0)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    // We start our search at 2, skipping even numbers.\n    long p\
    \ = 2;\n    while ((p * p) <= n) {\n        if (n % p == 0) {\n            return\
    \ false;\n        }\n        ++p;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph4mkst5b: /tmp/tmph4mkst5b.cpp:5: bool is_prime(long int): Assertion
    `n >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\n\
    \    return false;\n  if (n <= 3)\n    return true;\n  if (n % 2 == 0 || n % 3\
    \ == 0)\n    return false;\n  int a = 3, f = 2;\n  while (f < n - 2) {\n    if\
    \ (n % f == 0) {\n      return false;\n    }\n    a = f + 1;\n    f = a * a +\
    \ 1;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphlyhenmm: /tmp/tmphlyhenmm.cpp:33: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2)\n        return true;\n    else if (n % 2 == 0)\n        return false;\n\
    \    else if (n % 3 == 0)\n        return false;\n    // All prime numbers except\
    \ 2 and 3 are of the form 6n+1 or 6n-1.\n    long limit = (long) sqrt((double)\
    \ n);\n    for (long i = 3; i <= limit; i += 6)\n        if (n % i == 0)\n   \
    \         return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp68n2l2c_: /tmp/tmp68n2l2c_.cpp:26: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long limit\
    \ = sqrt(n);\n    for (int i = 2; i * i <= limit; ++i)\n        if (n % i == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0z84hev8: /tmp/tmp0z84hev8.cpp:13: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long max\
    \ = (long long)(sqrt(n) + 1);\n    for(int i = 2; i <= max; i++) {\n        if(n%i==0)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp49v1ss6v: /tmp/tmp49v1ss6v.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    bool prime\
    \ = false;\n    for(int i=2;i*i<=n;i++) {\n        if(n%i == 0) {\n          \
    \  prime = true;\n            break;\n        }\n    }\n    return prime;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpy_zpynuf: /tmp/tmpy_zpynuf.cpp:16: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  for (int i\
    \ = 0; i <= n; ++i) {\n    if (n % i == 0)\n      return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 1);\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n\
    \ % 2 == 0 || n % 3 == 0) return false;\n\n    long long nSquared = n * n;\n \
    \   long long sqrtNSquared = sqrt(nSquared);\n\n    for (long long i = 5; i <=\
    \ sqrtNSquared; i += 6) {\n        if (n % i == 0 || n % (i + 4) == 0) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpda0egd7i: /tmp/tmpda0egd7i.cpp:23: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long k;\n\
    \    for (k = 2; k <= n/2; k++) if (n % k == 0) {\n        return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphcbidpan: /tmp/tmphcbidpan.cpp:19: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp30tewpi1: /tmp/tmp30tewpi1.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660083913
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  int i;\n \
    \ // Make sure n is positive.\n  if (n < 2) return false;\n  // If n is evenly\
    \ divisible by 2, then n is prime.\n  if (n % 2 == 0) return true;\n  // If n\
    \ is odd, then n is not prime.\n  for (i = 3; i * i <= n; i += 2) {\n    if (n\
    \ % i == 0) return false;\n  }\n  // If we reached here, then n is prime.\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpc04a6y6m: /tmp/tmpc04a6y6m.cpp:19: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n == 1)\
    \ return false;\n\tif (n == 2) return true;\n\tif (n % 2 == 0) return false;\n\
    \tlong m = 3, ni = 2;\n\twhile (m <= ni) {\n\t\tif (n % m == 0) return false;\n\
    \t\tlong long a = m * m, b = m * a + n;\n\t\tif (b < n) m++, b = a;\n\t\telse\
    \ b += ni;\n\t\tni = b;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppb42a5ni: /tmp/tmppb42a5ni.cpp:30: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\
    \ return false;\n  if (n == 2 || n == 3) return true;\n  if (n % 2 == 0 || n %\
    \ 3 == 0) return false;\n  long sqrtn = sqrt(n);\n  for (long i = 5; i <= sqrtn;\
    \ i += 6) {\n    if (n % i == 0 || n % (i + 2) == 0) return false;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084035
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n < 2)\
    \ return false;\n  if (n % 2 == 0) return false;\n  long sqrt_n = sqrt(n);\n \
    \ for (long i = 3; i <= sqrt_n; i += 2)\n    if (n % i == 0)\n      return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084035
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1) return false;\n    // if n is smaller than or equal to 3, n is prime already\n\
    \    if (n <= 3) return true;\n    // if n is odd, then n is prime\n    if (n\
    \ % 2 == 0) return false;\n\n    long sq = sqrt(n);\n    for (long i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long i =\
    \ sqrt(n);\n    for(long j=2; j < i; j++){\n        if(n%j == 0)\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdjm5etn7: /tmp/tmpdjm5etn7.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int flag\
    \ = 0;\n    long i = 1;\n    long p;\n    for (p = 2; p <= n / i; p++) {\n   \
    \     if (n % i == 0) {\n            flag = 1;\n            break;\n        }\n\
    \        i += p;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqb6klo2x: /tmp/tmpqb6klo2x.cpp:19: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1)\n        return true;\n    if (n == 2)\n        return true;\n    if (n %\
    \ 2 == 0 || n % 3 == 0 || n % 5 == 0)\n        return false;\n    int i = 5;\n\
    \    while (i >= 2 && n % i == 0) {\n        i = i / 2;\n    }\n    if (i == 5)\n\
    \        return false;\n    if (i == 3 || i == 7)\n        return true;\n    //\
    \ If i is prime or if n is square,\n    // then n is prime.\n    long long factor\
    \ = 3;\n    while (factor <= sqrt(n)) {\n        if (n % factor == 0)\n      \
    \      return false;\n        factor = factor * 2 + 1;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdhpm7o01: /tmp/tmpdhpm7o01.cpp:32: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int count\
    \ = 1;\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n  \
    \          n = n / i;\n            count++;\n        }\n    }\n    return (count\
    \ == 2);\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmproqnre4b: /tmp/tmproqnre4b.cpp:16: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Loop\
    \ over all numbers up to and including n.\n    for (int i = 0; i <= n; i++) {\n\
    \        // If i is a prime, return true.\n        if (i == 1)\n            return\
    \ true;\n\n        // If i is odd and less than i, it is not prime.\n        if\
    \ (i % 2 == 1 && i != n - 1)\n            return false;\n\n        // If i is\
    \ even, divide by two and try again.\n        if (i % 2 == 0)\n            i /=\
    \ 2;\n    }\n    // If i reached n without a prime, it is not prime.\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8e0rc03n: /tmp/tmp8e0rc03n.cpp:24: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ % 2 == 0);\n    for (int i = 3; i < n; i+=2) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpuamvri6f: /tmp/tmpuamvri6f.cpp:5: bool is_prime(long int): Assertion
    `n % 2 == 0'' failed.

    '
  stdout: ''
  timestamp: 1660084035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\
    \ {\n    return false;\n  }\n  bool flag = true;\n  for (int i = 1; i <= (n /\
    \ 2); i++) {\n    if (n % i == 0) {\n      flag = false;\n    }\n  }\n  return\
    \ flag;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpas3rvihb: /tmp/tmpas3rvihb.cpp:19: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Return\
    \ false if n is 0\n    if (n == 0) return false;\n\n    // Return true if n is\
    \ 1, false otherwise\n    if (n == 1) return true;\n\n    // Initialize is_prime\
    \ to be true if n is greater than 2\n    bool is_prime = (n > 2);\n\n    // Loop\
    \ over all possible values of n.  If a number is not prime,\n    // then return\
    \ false after checking that only odd numbers are prime.\n    for (long i = 2;\
    \ i <= n / 2; i++) {\n        // Check if i is prime\n        if (n % i == 0)\
    \ {\n            // If i is not prime, set is_prime to be false\n            is_prime\
    \ = false;\n            break;\n        }\n    }\n\n    // Return is_prime\n \
    \   return is_prime;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4ch9vj1t: /tmp/tmp4ch9vj1t.cpp:36: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long k;\n\
    \    if(n<2) return false;\n    for(k=2; k<n; k++){\n        if(n%k==0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n>1);\n\
    \    // Assume n is odd.\n    long sqrt_n = sqrt(n);\n    for (long i = 2; i <=\
    \ sqrt_n; i++){\n        if (n%i == 0)\n            return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprsdye2mr: /tmp/tmprsdye2mr.cpp:5: bool is_prime(long int): Assertion
    `n>1'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1) return true;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3hen91bl: /tmp/tmp3hen91bl.cpp:21: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// Base case\n\
    \tif (n <= 1) return false;\n\t// Check divisibility by small primes (2, 3, 5,\
    \ 7, ...)\n\tif (is_prime_fast(n)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ is_prime_fast(n - 1);\n\t}\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwoc5gcl_.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpwoc5gcl_.cpp:8:6: error: \u2018is_prime_fast\u2019 was not declared in\
    \ this scope; did you mean \u2018is_prime\u2019?\n    8 |  if (is_prime_fast(n))\
    \ {\n      |      ^~~~~~~~~~~~~\n      |      is_prime\n"
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 2);\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxrmvn1js: /tmp/tmpxrmvn1js.cpp:5: bool is_prime(long int): Assertion
    `n > 2'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Your code\
    \ here\n  if(n <= 1) return false;\n  // Use Sieve of Eratosthenes\n  for(int\
    \ i = 2; i <= n; ++i) {\n    if(n % i == 0) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpif456rwy: /tmp/tmpif456rwy.cpp:18: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Only\
    \ odd numbers need to be tested.\n    if (n == 2) return true;\n    // If n has\
    \ no even divisors, it is not prime.\n    if (n % 2 == 0) return false;\n    //\
    \ Scan for factors up to sqrt(n).\n    for (int i = 3; i * i <= n; i += 2)\n \
    \       if (n % i == 0) return false;\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvsocortj: /tmp/tmpvsocortj.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // n is even,\
    \ so we only need to test up to the square root of n.\n  for (long long int i\
    \ = 3; i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsntemy5a: /tmp/tmpsntemy5a.cpp:14: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\
    \ return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n\
    \  // Trial divisors 2...n/2\n  for (int i = 3; i <= n / 2; i += 2) {\n    if\
    \ (n % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n == 2)\n\
    \t\treturn true;\n\tif (n % 2 == 0) {\n\t\tn = n / 2;\n\t\twhile (n % 2 == 0)\n\
    \t\t\tn = n / 2;\n\t\treturn n == 2;\n\t}\n\tfor (long i = 3; i <= sqrt(n); i\
    \ += 2) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnu8mvhap: /tmp/tmpnu8mvhap.cpp:27: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// n is prime\
    \ if any prime factor of n is greater than 1.\n\tfor (long i = 1; i <= n / 2;\
    \ ++i)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8iz5gtpb: /tmp/tmp8iz5gtpb.cpp:14: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Check\
    \ 1 as its the only even prime number\n    if (n == 2) return true;\n    // Check\
    \ for all even numbers up to sqrt(n)\n    for (int i = 2; i < sqrt(n); i++) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjb48eg35: /tmp/tmpjb48eg35.cpp:22: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n == 2)\
    \ return true;\n  if (n%2 == 0) return false;\n  // Test that n is odd.\n  if\
    \ (n%2 == 1) return false;\n  long limit = (n-1)/2;\n  for (long i = 2; i*i <=\
    \ limit; i++)\n    if (n%i == 0) return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp836ck3ja: /tmp/tmp836ck3ja.cpp:17: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  int i;\n \
    \ for (i = 2; i <= sqrt(n); i++)\n    if (n % i == 0)\n      return false;\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpaycut72x: /tmp/tmpaycut72x.cpp:19: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n   if (n <=\
    \ 1) return false;\n   if (n == 2) return true;\n   // If n is even, then its\
    \ only factor is 2, which is not prime.\n   if (n % 2 == 0) return false;\n  \
    \ // Check only up to sqrt(n), that is sqrt(n) rounded up.\n   long limit = floor(sqrt(n))\
    \ + 1;\n   // Check that each factor of n except 2 is a prime.\n   for (long i\
    \ = 3; i <= limit; i+=2) {\n      if (n % i == 0) return false;\n   }\n   return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // n is\
    \ divisible by 2 or 3\n    // if n % 2 == 0 or n % 3 == 0\n    // we return false\n\
    \    if (n < 2 || n % 2 == 0 || n % 3 == 0)\n        return false;\n\n    // n\
    \ is always divisible by 3 or 5, so loop 5 times\n    for (int i = 3; i <= sqrt(n);\
    \ i += 5)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \n    // If n is prime then it is also divisible by 7\n    // so loop 3 times\n\
    \    for (int i = 1; i <= sqrt(n); i += 3)\n        if (n % i == 0)\n        \
    \    return false;\n\n    // n is prime for all odd numbers greater than 3\n \
    \   // so loop 2 times\n    for (int i = 1; i <= sqrt(n); i += 2)\n        if\
    \ (n % i == 0)\n            return false;\n\n    // n is prime for all numbers\
    \ divisible by 5\n    // so loop 2 times\n    for (int i = 1; i <= sqrt(n); i\
    \ += 2)\n        if (n % i == 0)\n            return false;\n\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4dkgwei4: /tmp/tmp4dkgwei4.cpp:39: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Check from\
    \ 2 to n/2\n  for (int i = 2; i <= n / 2; i++) {\n    // Check if i is a prime\n\
    \    if (n % i == 0) {\n      return false;\n    }\n  }\n  // Check from n/2 to\
    \ n\n  for (int i = n / 2 + 1; i <= n; i++) {\n    // Check if i is a prime\n\
    \    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpip1pjnbi: /tmp/tmpip1pjnbi.cpp:24: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1) return false;\n    long counter = 2;\n    while (counter < n) counter +=\
    \ 2;\n    for (long i = 2; i < counter; ++i)\n        if (n % i == 0) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmponowof3r: /tmp/tmponowof3r.cpp:15: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long d =\
    \ sqrt(n);\n    for (long i = 3; i <= d; i += 2) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3nc_vhxt: /tmp/tmp3nc_vhxt.cpp:15: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tassert(n >\
    \ 0);\n\tfor (long i=2; i<n; i++) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphcbd17wl: /tmp/tmphcbd17wl.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 1);\n    if (n == 2)\n        return true;\n    if (n % 2 == 0) {\n      \
    \  for (int i = 3; i * i <= n; i += 2)\n            if (n % i == 0)\n        \
    \        return false;\n        return true;\n    }\n    long max = (long) sqrt(n);\n\
    \    for (int i = 3; i <= max; i += 2)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpby2a04k0: /tmp/tmpby2a04k0.cpp:22: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ % 2 == 0 && n != 1);\n    for (long i = 2; i < n; ++i) {\n        if (n % i\
    \ == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpiog1afor: /tmp/tmpiog1afor.cpp:5: bool is_prime(long int): Assertion
    `n % 2 == 0 && n != 1'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ % 2 == 0);\n    int max_divisor = sqrt(n);\n    for (int i = 3; i <= max_divisor;\
    \ i+=2) {\n        if (n % i == 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprw5ubqsb: /tmp/tmprw5ubqsb.cpp:16: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Returns\
    \ true if the number is prime (true) or not (false).\n    // We start by checking\
    \ all the numbers from 2 through n-1.\n    for (long i = 2; i <= n; i++)\n   \
    \     // We only need to check for primes up to sqrt(n).\n        // If any number\
    \ <= sqrt(n) is not a prime, then it is not prime.\n        if (n % i == 0)\n\
    \            return false;\n    // All numbers are primes.\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp3volkcza: /tmp/tmp3volkcza.cpp:18: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 2);\n    if (n == 2) return true;\n    if (n & 1) return false;\n    for (long\
    \ i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp6w9gqgmc: /tmp/tmp6w9gqgmc.cpp:15: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\n\
    \    return false;\n  if (n <= 3) return true;\n  long a = ceil(sqrt(n));\n  for\
    \ (long b = 2; b < a; b++) {\n    if (n % b == 0) {\n      long c = a / b;\n \
    \     if (c >= b)\n        return false;\n      long d = b * b;\n      while (c\
    \ % d == 0)\n        c = c / d;\n      a += c;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpa06l08kx: /tmp/tmpa06l08kx.cpp:24: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 1);\n    for (long i = 2; i * i <= n; i++) {\n        if (n % i == 0)\n  \
    \          return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpby6eahes: /tmp/tmpby6eahes.cpp:5: bool is_prime(long int): Assertion
    `n > 1'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Prime\
    \ numbers are greater than 1 and not divisible by anything other than 1 and itself.\n\
    \    if (n <= 1 || n % 2 == 0 || n % 3 == 0) return false;\n\n    // Sieve of\
    \ Eratosthenes for large numbers. Especially useful if your number is\n    //\
    \ very large.\n    long max_divisor = (long)sqrt(n);\n    long i = 3L;\n    vector<bool>\
    \ primes(max_divisor + 1, true);\n    for (long i = 2; i <= max_divisor; i +=\
    \ 2) {\n        if (primes[i]) {\n            for (long j = i * i; j <= n; j +=\
    \ i) {\n                primes[j] = false;\n            }\n        }\n    }\n\n\
    \    // Check all numbers for divisibility.\n    for (long i = 2; i <= n; i++)\
    \ {\n        if (primes[i]) return false;\n    }\n\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpejpamgyn.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpejpamgyn.cpp:12:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   12 |     vector<bool> primes(max_divisor\
    \ + 1, true);\n      |     ^~~~~~\n      |     std::vector\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpejpamgyn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpejpamgyn.cpp:12:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n   12 |     vector<bool>\
    \ primes(max_divisor + 1, true);\n      |            ^~~~\n/tmp/tmpejpamgyn.cpp:14:13:\
    \ error: \u2018primes\u2019 was not declared in this scope\n   14 |         if\
    \ (primes[i]) {\n      |             ^~~~~~\n/tmp/tmpejpamgyn.cpp:23:13: error:\
    \ \u2018primes\u2019 was not declared in this scope\n   23 |         if (primes[i])\
    \ return false;\n      |             ^~~~~~\n"
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// If n is\
    \ prime, return true.\n\tif (n == 1) return true;\n\t// If n is divisible by 2\
    \ or 3, return false.\n\tlong sqr = sqrt(n);\n\tfor (long i = 3; i <= sqr; i +=\
    \ 2) {\n\t\tif (n % i == 0 || n % (i + 2) == 0) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp4vba8evj: /tmp/tmp4vba8evj.cpp:16: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1) return false;\n    if (n & 1 == 0) return false;\n\n    // test whether any\
    \ number is divisble by all odd numbers from 2 to sqrt(n)\n    for (long d = 2;\
    \ d * d <= n; d += 2) {\n        if (n % d == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpve_mztbn: /tmp/tmpve_mztbn.cpp:26: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    // Sieve of Eratosthenes for positive integers\n    std::vector<bool>\
    \ isPrime(n / 2, true);\n    for (int i = 2; i < isPrime.size(); i++) {\n    \
    \    if (!isPrime[i]) {\n            for (int j = i*i; j < isPrime.size(); j +=\
    \ i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n\
    \    return isPrime[n];\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv9a0bobh: /tmp/tmpv9a0bobh.cpp:19: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // check if\
    \ n is prime\n  for (int i = 2; i * i <= n; ++i) {\n    // if n is divisible by\
    \ i, n is prime\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpiftlw5g3: /tmp/tmpiftlw5g3.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// To make\
    \ the code more efficient we will first check that the number is divisible by\
    \ 2 and \n\t// then divide the number by 2 until the number is odd (or we reach\
    \ 1)\n\t// We then check whether the number 2 is prime (for our purposes we can\
    \ ignore the fact that\n\t// 2 is a factor of every number except for 2)\n\n\t\
    long divisor = 2;\n\n\twhile (divisor < n) {\n\t\tif (n % divisor == 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t\tdivisor++;\n\t}\n\n\tif (n == 2) {\n\t\treturn true;\n\
    \t}\n\n\t// If we have found 2 then we can skip the remainder\n\twhile (n % 2\
    \ == 0) {\n\t\tn = n / 2;\n\t\tif (n == 2) {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \n\treturn false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsxioh2c9: /tmp/tmpsxioh2c9.cpp:36: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int i;\n\
    \    for (i = 2; i <= sqrt(n); ++i)\n        if (n % i == 0) return false;\n \
    \   return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp5fpgpead: /tmp/tmp5fpgpead.cpp:18: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(!(n\
    \ == 0));\n    // check if n is a prime\n    // this can be improved by using\
    \ Sieve of Eratosthenes (sieve of Atkin), \n    // by only checking odd numbers\
    \ up to sqrt(n)\n    if (n < 2) return false; \n    for (long i = 2; i <= (int)\
    \ sqrt(n); i++) {\n        if (n % i == 0)\n            return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long i =\
    \ 2;\n    while (i * i <= n) {\n        if (n % i == 0)\n            return false;\n\
    \        i = i + 1;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp07eeaxzl: /tmp/tmp07eeaxzl.cpp:21: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 3) return true;\n    long f = 3;\n    while (f * f <= n) {\n        if (n %\
    \ f == 0) return false;\n        f = f + 2;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptgxn14g1: /tmp/tmptgxn14g1.cpp:15: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n <= 1)\n\
    \t\treturn false;\n\n\t// Check for small divisors.\n\tfor (long divisor = 3;\
    \ divisor < n; divisor += 2)\n\t\tif (n % divisor == 0)\n\t\t\treturn false;\n\
    \n\t// Check for an exact divisor.\n\tif (n % 2 == 0)\n\t\treturn true;\n\n\t\
    // Check all odd numbers.\n\tfor (long divisor = 3; divisor < n; divisor += 2)\n\
    \t\tif (n % divisor == 0) {\n\t\t\tn = n / divisor;\n\t\t\tbreak;\n\t\t}\n\n\t\
    return n > 1;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1f1vhqiq: /tmp/tmp1f1vhqiq.cpp:33: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n==0\
    \ || n==1) return false;\n    long i=2;\n    while(n%i){\n        if(!(n%i)) break;\n\
    \        i+=1;\n    }\n    return (n==i);\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n<2)\
    \ return false;\n    for(long i=3;i*i<=n;i+=2) {\n        if(!(n%(i+1))) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpav9opb7t: /tmp/tmpav9opb7t.cpp:13: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // 0 isn't\
    \ prime\n    if (n < 2)\n        return false;\n\n    // 1 is prime\n    if (n\
    \ == 2)\n        return true;\n\n    // Iterate through every prime number from\
    \ 2 up to sqrt(n)\n    for (long x = 2; x < sqrt(n); x++) {\n        // If n is\
    \ divisible by x, then n is not prime\n        if (n % x == 0)\n            return\
    \ false;\n    }\n\n    // n is prime\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpil0pgi7j: /tmp/tmpil0pgi7j.cpp:30: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084040
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Base\
    \ case: less than or equal to 2\n    if (n <= 1) {\n        return false;\n  \
    \  }\n    // Check from 3 upwards\n    for (long i = 2; i <= n / i; i++) {\n \
    \       if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    if (n == 2) return true;\n    long long i = 2;\n    long long m\
    \ = n / i;\n    while (i < m) i += i;\n    m = n % i;\n    if (m == 0) return\
    \ false;\n    for (long long j = i; j < m; j += i) {\n        if (n % j == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptciffmyi: /tmp/tmptciffmyi.cpp:19: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084040
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n<=1)\
    \ return false;\n    for (int i=2; i<=sqrt(n); i++)\n        if (n%i==0)\n   \
    \         return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 1);\n    long p = sqrt(n);\n    for (long i = 2; i * i <= n; ++i)\n     \
    \   if (n % i == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp03or9i2t: /tmp/tmp03or9i2t.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 0) return false;\n    // If the number is odd, then it is prime.\n    if (n\
    \ == 1) return true;\n    // If the number is even, then it is not prime.\n  \
    \  if (n & 1 == 0) return false;\n    // If a number greater than the square root\
    \ of the number is prime,\n    // then it is prime.\n    int max = (int)sqrt((double)n);\n\
    \    long i = 2;\n    for(; i <= max; i+=2) {\n        if (n%i==0) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphwxq_itk: /tmp/tmphwxq_itk.cpp:29: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1) {\n        return false;\n    }\n    int sqrt_n = sqrt(n);\n    for (long\
    \ i = 3; i * i <= sqrt_n; i += 2) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp53upq511: /tmp/tmp53upq511.cpp:18: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ % 2 == 0 && \"input is not a positive integer\");\n    // Check only even numbers.\n\
    \    if (n & 1)\n        return false;\n    for (long i = 3; i * i <= n; i +=\
    \ 2)\n        if (n % i == 0)\n            return false;\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpep1tas5n: /tmp/tmpep1tas5n.cpp:16: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1) return false;\n    for (int i = 2; i*i <= n; ++i)\n        if (n % i == 0)\
    \ return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n==2)\
    \ return true;\n\tif (n<1) return false;\n\tlong m=n/2;\n\tfor (int i=2;i<m;i++)\
    \ if (n%i==0) return false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuz4ffh80: /tmp/tmpuz4ffh80.cpp:18: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int flag\
    \ = 0;\n    // Test for prime numbers.\n    for (int i = 2; i < n; i++) {\n  \
    \      if (n % i == 0) {\n            flag = 1;\n            break;\n        }\n\
    \    }\n    return !flag;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpknr_9gus: /tmp/tmpknr_9gus.cpp:23: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Check\
    \ for even numbers.\n    if (n%2 == 0) return false;\n    // A composite number\
    \ (except for 2) is greater than 1 and\n    // divisible only by itself and 1.\n\
    \    for (long i = 3; i <= sqrt(n); i+=2) {\n        if (n%i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa7co214n: /tmp/tmpa7co214n.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n<2)\
    \ {\n        return false;\n    }\n    for(long m=2;m<n;m++) {\n        if(n%m==0)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    return !(n%11);\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuhh58xfd: /tmp/tmpuhh58xfd.cpp:10: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n>=2);\n\
    \    int a[n/2] = {0};\n    for(int i = 0; i<= n/2; i++){\n        if(a[i]==1)\n\
    \            return false;\n        a[i]=1;\n    }\n    for(int i=2; i<=n; i++)\n\
    \        if(a[i]!=0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpzjtdtc2g: /tmp/tmpzjtdtc2g.cpp:20: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int count\
    \ = 0;\n    for (long i = 2; i <= n; i++) {\n        if (n % i == 0) {\n     \
    \       count++;\n            if (count == 2) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn6hvo6er: /tmp/tmpn6hvo6er.cpp:18: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tlong i = 2;\
    \ long flag = 0;\n\t\n\twhile ( i <= n ) {\n\t\tif (n % i == 0){\n\t\t\tflag =\
    \ 1;\n\t\t}\n\t\ti = i + 2;\n\t}\n\n\treturn flag;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2l4jl1k4: /tmp/tmp2l4jl1k4.cpp:18: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // If the\
    \ number is less than 2 it is not prime\n    if(n < 2){\n        return false;\n\
    \    }\n    // Assume that the number is prime until proven otherwise\n    bool\
    \ prime = true;\n    // Test for factors up to sqrt(n)\n    for(int i = 2; i <=\
    \ sqrt(n); i++) {\n        // If i is a factor of n then the number is prime\n\
    \        if(n%i == 0){\n            prime = false;\n            break;\n     \
    \   }\n    }\n    // If n is prime then return true\n    return prime;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Check that\
    \ the number is greater than 1.\n  if (n < 2)\n    return false;\n  // Check that\
    \ the number is odd.\n  if ((n & 1) == 0)\n    return false;\n  // Check that\
    \ all of the even numbers are smaller than the square of n.\n  for (int i = 3;\
    \ i <= n / 2; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    bool flag\
    \ = false;\n    for (int i = 0; i <= n/2; i++) {\n        if(n%i == 0) {\n   \
    \         flag = true;\n            break;\n        }\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    // 0 and 1 are not prime.\n    if (n == 0 || n == 1) {\n       \
    \ return false;\n    }\n    // Only even numbers have all distinct prime factors.\n\
    \    if (n % 2 == 0) {\n        return false;\n    }\n    // Only odd numbers\
    \ have odd prime factors.\n    if (n % 2 == 1) {\n        // 0 and 1 are not prime.\n\
    \        if (n == 0 || n == 1) {\n            return false;\n        }\n     \
    \   long c = 2;\n        while (c < n) {\n            if (n % c == 0) {\n    \
    \            return false;\n            }\n            c += 2;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp51k2akld: /tmp/tmp51k2akld.cpp:5: bool is_prime(long int): Assertion
    `n >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2) {\n        return true;\n    }\n    // We could make use of bit manipulation\
    \ as well.\n    if (n & 1LL) {\n        return false;\n    }\n    for (long d\
    \ = 2; d * d <= n; d += 2) {\n        // Prime numbers are greater than 1LL.\n\
    \        if (n % (d * 2) == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjxrzr00m: /tmp/tmpjxrzr00m.cpp:22: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n < 2)\
    \ return false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n\
    \  long i = 3, m = n - 2;\n  while (i <= m) {\n    if (n % i == 0) return false;\n\
    \    i += 2;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n\
    \    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n         \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int i;\n\
    \    int x = n / 2;\n    for (i = 2; i <= x; ++i) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp96xwvycz: /tmp/tmp96xwvycz.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    for (int\
    \ i = 2; i <= sqrt(n); ++i) {\n        if (n % i == 0)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfwu427ef: /tmp/tmpfwu427ef.cpp:19: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Make sure\
    \ n is positive and that n is even.\n  if (n <= 0 || n % 2 == 0) return false;\n\
    \  // Check all odd numbers up to sqrt(n).\n  for (long i = 2; i <= sqrt(n); i\
    \ += 2) {\n    // If n is divisible by i, then n must be prime.\n    if (n % i\
    \ == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo1uog062: /tmp/tmpo1uog062.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long m =\
    \ sqrt(n);\n    for (long i = 2; i <= m; i++) {\n        if (n % i == 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq0zk0kwv: /tmp/tmpq0zk0kwv.cpp:21: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1)\n        return false;\n    if (n % 2 == 0 || n == 3)\n        return false;\n\
    \    for (long i = 3; i <= n / i; i += 2) {\n        if (n % i == 0)\n       \
    \     return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n <= 1)\n\
    \t\treturn false;\n\tif (n <= 3 && 3L * n <= 2L)\n\t\treturn true;\n\tif (n %\
    \ 2 == 0 || n % 3 == 0)\n\t\treturn false;\n\tfor (long d = 4L; d * d <= n; d\
    \ += 2L)\n\t\tif (n % d == 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptualwfpx: /tmp/tmptualwfpx.cpp:28: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n == 0\
    \ || n == 1)\n\t\treturn false;\n\tfor (long d = 2; d * d <= n; d++)\n\t\tif (n\
    \ % d == 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Check for\
    \ divisibility by 2, 3, 5 & 7.\n  if (n & 3)\n    return false;\n  if (n & 5)\n\
    \    return false;\n  if (n & 7)\n    return false;\n  // Now check the squares.\n\
    \  for (int i = 2; i <= n / i; i++) {\n    if (n % i)\n      return false;\n \
    \ }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfnwswjid: /tmp/tmpfnwswjid.cpp:22: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    long sqrtn = sqrt(n);\n    for (long i = 2; i * i <= n; i++) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n        if (n\
    \ % i == sqrtn) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgoo5i0s2: /tmp/tmpgoo5i0s2.cpp:20: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Check\
    \ if n is less than or equal to 2\n    if (n < 2) return false;\n    // Check\
    \ for special case\n    if (n == 2) return true;\n    // Check if n is an integer\
    \ square number (a prime squares)\n    // by dividing n by 2\n    long s = (n/2)*2;\n\
    \    // Loop through all odd numbers between 2 and s\n    for (long i=3; i*i <=\
    \ n; i+=2)\n    // Check if number is divisible by i or its square root\n    if\
    \ ( (n % i == 0) || (n % (i+1) == 0) && (n/(i+1))*(i+1) < n ) return false;\n\
    \    // If it passed all above checks, number is prime\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2wintpw: /tmp/tmpo2wintpw.cpp:21: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\
    \ return false;\n  for (int i = 2; i <= n / 2; i++) {\n    if (n % i == 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n < 2)\n\
    \    return false;\n  long i = sqrt(n);\n  for (int k = 2; k <= i; k++) {\n  \
    \  if (n % k == 0)\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n == 1)\
    \ return false;\n  for (long i = 2; i <= sqrt(n); i++) {\n    if (n % i == 0)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// We only\
    \ need to test up to sqrt(n).\n\tif (n < 3)\n\t\treturn false;\n\tlong sqr = sqrt(n);\n\
    \t// If sqr = 1, then n is not prime, but we want it to be true to make\n\t//\
    \ the loop stop immediately and not loop forever if it is prime.\n\tif (sqr ==\
    \ 1)\n\t\treturn false;\n\tfor (long i = 3; i <= sqr; i += 2)\n\t\tif (n % i ==\
    \ 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptrupcthc: /tmp/tmptrupcthc.cpp:20: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2)\n        return true;\n    if (n == 0 || n == 1)\n        return false;\n\
    \    // Check only odd numbers.\n    if (n % 2 == 0)\n        return false;\n\
    \    // If n is odd, then check up to the square root of n to\n    // determine\
    \ if n is prime.\n    for (int i = 3; i * i <= n; i += 2)\n        if (n % i ==\
    \ 0)\n            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Write\
    \ your code here\n    \n    for (int i = 2; i < n; i++) {\n        if (n % i ==\
    \ 0)\n            return false;\n    }\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpgmgucll3: /tmp/tmpgmgucll3.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // return\
    \ true;\n  assert(!(n&1)); //make sure n is odd\n  for (long m = 2; m*m <= n;\
    \ m++) {\n    if (n%m == 0) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkr0zvvru: /tmp/tmpkr0zvvru.cpp:6: bool is_prime(long int): Assertion
    `!(n&1)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 0 || n == 1) {\n        return false;\n    }\n    for (int i = 2; i <= n/2;\
    \ i++) {\n        if (n % i == 0) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\n            return\
    \ false;\n        ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5cz1z8rg: /tmp/tmp5cz1z8rg.cpp:21: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\n\
    \    return false;\n  int count = 0;\n  int sqrtn = sqrt(n);\n  for (int x = 2;\
    \ x <= sqrtn; x++) {\n    if (n % x == 0)\n      return false;\n    count++;\n\
    \  }\n  return count == 1;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeen0oyjz: /tmp/tmpeen0oyjz.cpp:19: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ > 1);\n    for (int i = 2; i * i <= n; ++i) {\n        if (n % i == 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwpffm_mq: /tmp/tmpwpffm_mq.cpp:5: bool is_prime(long int): Assertion
    `n > 1'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Check\
    \ for divisors other than 1 and n.\n    for (long i = 2; i < n; i++) {\n     \
    \   if (n % i == 0) {\n            return false;\n        }\n    }\n    // If\
    \ no divisors are found, n must be prime.\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp09l7sv_1: /tmp/tmp09l7sv_1.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  int flag =\
    \ 0;\n  if (n == 1)\n    return true;\n  if (n < 2)\n    return false;\n  for\
    \ (long i = 3; i * i <= n; i += 2) {\n    if (n % i == 0) {\n      flag = 1;\n\
    \      break;\n    }\n  }\n  return flag;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfz23tho6: /tmp/tmpfz23tho6.cpp:21: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n        i++;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpafqug3ey: /tmp/tmpafqug3ey.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // base\
    \ case 1: If n is even, return false.\n    if (n & 1) return false;\n\n    //\
    \ base case 2: If n is 1, return true.\n    if (n == 2) return true;\n\n    //\
    \ the smallest prime > n is n+1\n    // the largest prime < n is 2n \u2212 1\n\
    \    // so all prime numbers have to have n \u2212 1 \u2212 1 factors\n    //\
    \ all factors of n > 2 are in {2, n/2, n/4}\n    for (long i = 2; i * i <= n;\
    \ i++)\n        if (n % i == 0) return false;\n\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpt51vfr9i: /tmp/tmpt51vfr9i.cpp:23: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084044
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n<2)\
    \ {\n        return false; \n    }\n    if (n%2==0){\n        return false;\n\
    \    }\n    for(int i=3;i*i<=n;i+=2){\n        if(n % i == 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084045
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    bool result\
    \ = false;\n    if (n <= 1)\n        return result;\n\n    for(long i=2; i<=sqrt(n);\
    \ i++)\n        if(n % i == 0)\n            result = true;\n\n    return result;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxl2s4ylu: /tmp/tmpxl2s4ylu.cpp:17: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif(n==2)\n\
    \t\treturn true;\n\tif(n==1)\n\t\treturn false;\n\tfor(int i=3;i*i<=n;i+=2) {\n\
    \t\tif(n % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpanpp8f31: /tmp/tmpanpp8f31.cpp:17: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\n\
    \    return false;\n  if (n <= 3)\n    return true;\n  if (n % 2 == 0)\n    return\
    \ false;\n  int i = 3;\n  while (i <= sqrt(n))\n    if (n % i == 0)\n      return\
    \ false;\n    else\n      i += 2;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // Return\
    \ false if n is negative.\n  if (n < 0)\n    return false;\n  // Check from 2\
    \ to sqrt(n).\n  for (long i = 2; i <= sqrt(n); i++)\n    // If i divides n, then\
    \ n is not prime.\n    if (n % i == 0)\n      return false;\n  // If we get here,\
    \ n must be prime.\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq8jkjyp9: /tmp/tmpq8jkjyp9.cpp:24: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2) return true;\n    if (n <= 1) return false;\n\n    // If n is even and there\
    \ is no factor of 2 in n, then n is not prime.\n    if ((n & 1) == 0 && n != 2)\
    \ return false;\n\n    // Find all factors of n.\n    long a = n / 2;\n    while\
    \ (a > 1) {\n        if (n % a == 0) {\n            return false;\n        }\n\
    \        a = a / 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmps2grttwp: /tmp/tmps2grttwp.cpp:34: int main(): Assertion `candidate((77))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n <= 1)\
    \ return false;\n\tlong div = sqrt(n);\n\tfor (long i = 3; i * i <= n; i += 2)\
    \ {\n\t\tif (n % i == 0) return false;\n\t\tif (n % (i + 1) == 0) return false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphhz7zlcy: /tmp/tmphhz7zlcy.cpp:15: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  long i = 3;\n\
    \  while(i <= n / 2) {\n    if(n % i == 0) {\n      return false;\n    }\n   \
    \ i += 2;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx48gwb4e: /tmp/tmpx48gwb4e.cpp:21: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Initialize\
    \ flag as true.\n    bool flag = true;\n    // Create a for-loop to find factors.\n\
    \    for (long i = 2; i <= n; ++i) {\n        // If n is divisible by any number\
    \ between 2 and i-1,\n        // the for-loop will terminate, and flag will be\
    \ set to false.\n        if (flag && n % i == 0) {\n            flag = false;\n\
    \        }\n    }\n    // Return flag indicating whether n is prime or not.\n\
    \    return flag;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpszj_nd_m: /tmp/tmpszj_nd_m.cpp:21: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long isprime\
    \ = 2;\n    if (n <= 1) return false;\n    for (int i = 2; i <= sqrt(n); i++)\n\
    \        if (n % i == 0)\n            return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <\
    \ 2) return false;\n    if (n == 2) return true;\n    long div = 2;\n    while\
    \ (div * div <= n) {\n        if (n % div == 0) {\n            return false;\n\
    \        }\n        div += 2;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9brzj88m: /tmp/tmp9brzj88m.cpp:28: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 2) return true;\n    if (n <= 1) return false;\n    for (int i = 3; i <= sqrt(n);\
    \ i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpub00ubdd: /tmp/tmpub00ubdd.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Your\
    \ code here.\n    long i=2;\n    if(n==0)\n        return false;\n    while(n%i==0)\n\
    \    {\n        i=i*i;\n    }\n    if(n==i)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpcwppyzsp: /tmp/tmpcwppyzsp.cpp:21: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n<=2){\n\
    \        return false;\n    }\n    for(long i=2;i<=(n/2);i++){\n        if(n%i\
    \ == 0){\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// The simplest\
    \ test for primeness is to return false if n > 1\n\tif (n > 1) {\n\t\t// if n\
    \ is odd, then n is prime if and only if 2 divides n\n\t\tif (n & 1)\n\t\t\treturn\
    \ 0;\n\t\tlong sqrt_n = sqrt(n);\n\t\tfor (long i = 3; i <= sqrt_n; i += 2)\n\t\
    \t\tif (n % i == 0)\n\t\t\t\treturn 0;\n\t\treturn 1;\n\t} else {\n\t\t// The\
    \ efficient test for primeness is to return true only if n = 1.\n\t\treturn n\
    \ == 1;\n\t}\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpvmnni8bj: /tmp/tmpvmnni8bj.cpp:22: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // We check\
    \ only up to the square root of n.\n  for (int i = 2; i * i <= n; i++) {\n   \
    \ if (n % i == 0)\n      return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsc5bqvz0: /tmp/tmpsc5bqvz0.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <\
    \ 2)\n        return false;\n    // We use 'long long' rather than 'long' for\
    \ 'long long'\n    // to avoid overflow and UB for many 'n' values.\n    long\
    \ long i;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0)\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpq8au5ebl: /tmp/tmpq8au5ebl.cpp:19: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif(n == 2)\n\
    \t\treturn true;\n\tlong s = sqrt(n);\n\tfor (long i = 2; i <= s; i++)\n\t\tif\
    \ (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4r5kxcxj: /tmp/tmp4r5kxcxj.cpp:21: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  int i, count\
    \ = 0;\n  for (i = 2; i < sqrt(n); i++) {\n    if (n % i == 0)\n      count++;\n\
    \  }\n  if (count == 2)\n    return true;\n  else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9nhm7ck0: /tmp/tmp9nhm7ck0.cpp:18: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n <=\
    \ 1)\n        return false;\n    int m = 3;\n    for(int i = 3; i <= sqrt(n);\
    \ i += 2) {\n        if(n % i == 0) {\n            m = i;\n            break;\n\
    \        }\n    }\n    return m>=3;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvpunr5s1: /tmp/tmpvpunr5s1.cpp:18: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    return !(n\
    \ == 1 || n == 0);\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_sfgam41: /tmp/tmp_sfgam41.cpp:9: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert (n>1);\n\
    \    if (n<2) return false;\n    if (n==2) return true;\n    if (n%2==0) return\
    \ false;\n    long m=n-1;\n    while (m>2 && n%2==0) m/=2;\n    long k=0;\n  \
    \  while (m>2) {\n        if (n%m==0) return false;\n        m/=2;\n        k++;\n\
    \    }\n    // If n is composite then the only factor is n\n    if (n==m) return\
    \ true;\n    // All numbers that divided n into m-1 will also divide n\n    //\
    \ into m without remainder, except for n=2 (because 2 divides evenly).\n    //\
    \ Here we check whether all such numbers divide n into m-1\n    for (long i=1;i<=m;i++)\
    \ {\n        if (n%(i+m)==0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp5z0pe95c: /tmp/tmp5z0pe95c.cpp:5: bool is_prime(long int): Assertion
    `n>1'' failed.

    '
  stdout: ''
  timestamp: 1660084046
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\tif (n < 2)\
    \ return false;\n\tlong sqroot = sqrt(n);\n\tfor (long i = 3; i <= sqroot; i +=\
    \ 2) \n\t{\n\t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpz29ea4pe: /tmp/tmpz29ea4pe.cpp:15: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084047
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1)\n        return false;\n    if (n % 2 == 0)\n        return n == 3;\n   \
    \ for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  assert(n %\
    \ 2 == 0 || n == 1);\n  if (n <= 1) return false;\n  for (int i = 3; i * i <=\
    \ n; i += 2)\n    if (n % i == 0) return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6zff9i_u: /tmp/tmp6zff9i_u.cpp:13: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 0) return false;\n    // If n is 1 or 2, then n is prime.\n    if (n == 1 ||\
    \ n == 2) return true;\n    // If n is divisible by any number between 2 and itself,\
    \ then n is prime.\n    // In other words, n must be dividable by numbers less\
    \ than n.\n    // If n is not divisible by 2, then n is prime.\n    // If n is\
    \ not divisible by 2, n can only be a factor of 2, and so n is not prime.\n  \
    \  long next_smaller_n = n + 1;\n    bool prime = true;\n    for (long i = 2;\
    \ i <= next_smaller_n; ++i) {\n        if (n % i == 0) {\n            prime =\
    \ false;\n            break;\n        }\n    }\n    return prime;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyu37fqk1: /tmp/tmpyu37fqk1.cpp:25: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1)\n        return true;\n\n    // If n is evenly divisible by 2, then 2 is\
    \ the only prime factor.\n    if (n % 2 == 0)\n        return false;\n\n    //\
    \ If n is evenly divisible by 3,\n    // then it is only divisible by itself and\
    \ 1.\n    if (n % 3 == 0)\n        return true;\n\n    // If n is evenly divisible\
    \ by 5, then it can only be divisible by 3\n    // and 1.\n    if (n % 5 == 0)\n\
    \        return false;\n\n    // Since n is greater than 1 and divisible by only\
    \ 2 and 3, then n is prime.\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl09ra7ee: /tmp/tmpl09ra7ee.cpp:33: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    int counter\
    \ = 0;\n    for(int i=2; i<n; i++) {\n        if(n%i==0)\n            return false;\n\
    \        counter++;\n    }\n    return counter==0;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp5vr7wel: /tmp/tmpp5vr7wel.cpp:16: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// base case\n\
    \tif (n == 1)\n\t\treturn false;\n\t// If the number is evenly divisible by 2,\
    \ then it is not prime.\n\tif (n % 2 == 0)\n\t\treturn false;\n\t// If the number\
    \ is odd, then test if it is divisible by any prime\n\t// up to sqrt(n).\n\tfor\
    \ (long m = 3; m <= n / 2; m += 2)\n\t\tif (n % m == 0)\n\t\t\treturn false;\n\
    \t// If n is prime.\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ % 2 == 0 && \"The number should be an odd number\");\n    if (n <= 1) return\
    \ false;\n    for (long d = 2; d * d <= n; d++)\n        if (n % d == 0) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpylmv2o2y: /tmp/tmpylmv2o2y.cpp:5: bool is_prime(long int): Assertion
    `n % 2 == 0 && "The number should be an odd number"'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert (n>0);\n\
    \    if (n==1) return false;\n    for (int i=2;i<=n/2;i++) {\n        if (n%i==0)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// The numbers\
    \ 2 and 3 are special cases that aren't worth checking.\n\tif (n <= 3) return\
    \ true;\n\t// Check all the odd numbers starting at 2.\n\tfor (long i = 2; i <=\
    \ sqrt(n); i += 2) {\n\t\t// Check if any even number divides the number at i.\n\
    \t\t// If so, it's not a prime.\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\t// If all the numbers were checked out, then n is prime.\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpa54ju_qu: /tmp/tmpa54ju_qu.cpp:26: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ % 2 != 0);\n    for (long d = 3; d <= n / 2; d += 2)\n        if (n % d == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp47jwgmsp: /tmp/tmp47jwgmsp.cpp:5: bool is_prime(long int): Assertion
    `n % 2 != 0'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // A prime\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself.\n    if (n <= 1) return false;\n    // Start with 2 since any\
    \ odd number divides two.\n    for (long divisor = 2; divisor <= n / 2; divisor++)\
    \ {\n        if (n % divisor == 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1) return false;\n    // First check for small factors, if any then go to the\
    \ square root of the number.\n    for (long d = 2; d < n; d *= d) \n        if\
    \ (n % d == 0) return false;\n    // If n is composite then it is no divisible\
    \ by any factor except one.\n    return (n == 2) || (n % 4 == 0 && n % 8 == 0);\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuodzmqio: /tmp/tmpuodzmqio.cpp:15: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // We have\
    \ to do all our prime tests at sqrt(n).\n    if (n <= 1) return false;\n    //\
    \ If n is even then it's trivially prime.\n    if (n % 2 == 0) return true;\n\
    \    // All even numbers are composite, so test every prime higher than n.\n \
    \   for (long i = 3; i * i <= n; i += 2) {\n        // If n is composite it is\
    \ either 1 or i/2.\n        if (n % i == 0 || n % (i + 2) == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz_ebh0d5: /tmp/tmpz_ebh0d5.cpp:18: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n < 2)\n\
    \    return false;\n\n  // Test all even numbers up to sqrt(n).\n  long m = n\
    \ / 2;\n  while (m <= sqrt(n))\n    if (n % m == 0)\n      return false;\n   \
    \ m += 2;\n\n  // Test all odd numbers up to sqrt(n).\n  m = n / 2;\n  while (m\
    \ <= sqrt(n))\n    if (n % m == 1)\n      return false;\n    m += 2;\n\n  // Test\
    \ odd numbers.\n  m = n;\n  while (m > 2)\n    if (m % 2 == 0)\n      return false;\n\
    \    m /= 2;\n\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660084054
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Check\
    \ for even numbers.\n    if (n % 2 == 0) return n == 2;\n    // Check for composite\
    \ numbers.\n    if (n % 3 == 0) return n == 3 || n == 5;\n    // Check for perfect\
    \ squares.\n    if (n == 2 || n == 3) return n == 4;\n    // Check for perfect\
    \ cubes.\n    if (n == 3 || n == 5)\n        return (n % 6 == 0 && n != 15) ||\
    \ n == 17;\n    // Check if n is a prime.\n    if (n <= 1) return false;\n   \
    \ // Check all the numbers from 3 to sqrt(n) using square roots.\n    for (long\
    \ i = 6; i <= sqrt(n); i += 6) {\n        if (n % i == 0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuurcni4v: /tmp/tmpuurcni4v.cpp:31: int main(): Assertion `candidate((5))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    long i;\n\
    \    if(n<2)\n        return false;\n    for(i=2;i<=n;i++)\n        if(n%i==0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx_vkdutg: /tmp/tmpx_vkdutg.cpp:16: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n<2)\n\
    \        return false;\n    long sqroot = (sqrt(n)+1);\n    for(long i=3; i<=sqroot;\
    \ i++)\n        if(n%i == 0)\n            return false;\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp25txtwiq: /tmp/tmp25txtwiq.cpp:20: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084048
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1) return false;\n    \n    for (int i = 2; i * i <= n; ++i) {\n        if (n\
    \ % i == 0) return false;\n    }\n\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084048
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert (n>=2\
    \ && n<=3L);\n    // Check if n is prime.\n    if (n%2==0) {\n        if (n<3L)\
    \ return true;\n        return is_prime(n/2);\n    }\n    if (n%3==0) return false;\n\
    \    // n is prime.\n    long d = 6L;\n    while(d*d<=n) {\n        if (n%d==0)\
    \ return false;\n        d+=6L;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbqw36v2w: /tmp/tmpbqw36v2w.cpp:5: bool is_prime(long int): Assertion
    `n>=2 && n<=3L'' failed.

    '
  stdout: ''
  timestamp: 1660084049
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n<2)\
    \ return false;\n    for(long i=3;i<=sqrt(n);i+=2) if(n % i == 0) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxfln24zt: /tmp/tmpxfln24zt.cpp:11: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084049
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1)\n        return false;\n    // Trial division approach to check if n is prime.\n\
    \    int i = 0;\n    int x = sqrt(n);\n    while (i < x) {\n        if (n % i\
    \ == 0)\n            return false;\n        ++i;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660084049
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2);\n    // Write your code here.\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy2jqpwg8: /tmp/tmpy2jqpwg8.cpp:10: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084049
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1)\n        return true;\n    if (n % 2 == 0)\n        return false;\n    for\
    \ (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnt_galm8: /tmp/tmpnt_galm8.cpp:22: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084049
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n <= 1)\n\
    \    return false;\n  for (long i = 3; i <= n / i; i += 2)\n    if (n % i == 0)\n\
    \      return false;\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsa6wmb0n: /tmp/tmpsa6wmb0n.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // TODO:\
    \ Optimize\n    for(long i=3; i<=sqrt(n); i++) {\n        if(n%i == 0)\n     \
    \       return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx6nt7e5d: /tmp/tmpx6nt7e5d.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  // If n is\
    \ 1, then n is not prime.\n  if (n == 1)\n    return false;\n  // If n is prime\
    \ up to and including sqrt(n), then it's prime.\n  if (n > 1 && (n % 2 == 0 ||\
    \ n % 3 == 0))\n    return false;\n  // Otherwise n is composite.\n  // We know\
    \ that if n has no prime factors, it is not a prime.\n  // If n has a prime factor\
    \ of 2, then it is not prime.\n  // If n has a prime factor of 3 and a factor\
    \ of 2, then it is prime.\n  // If n has a prime factor of 5 and a factor of 3,\
    \ then it is prime.\n  // If n has a prime factor of 7 and a factor of 5 and a\
    \ factor of 3, then it is prime.\n  // If n has a prime factor of 11 and a factor\
    \ of 7 and a factor of 5 and a factor of 3, then it is prime.\n  if (n > 1) {\n\
    \    for (int i = 3; i <= n / i; i++) {\n      if (n % i == 0)\n        return\
    \ false;\n    }\n  }\n  // If we get here then we have proven that n is a prime.\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n == 1)\
    \ return false;\n  long sqr = sqrt(n);\n  for (long i = 2; i * i <= sqr; i++)\
    \ {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi7b2fk5p: /tmp/tmpi7b2fk5p.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // return\
    \ n <= 1;\n    if (n == 2) return true;\n    // if (n < 2) return false;\n   \
    \ long limit = sqrt(n);\n    for (long i = 2; i <= limit; ++i)\n        if (n\
    \ % i == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpebvxv3jg: /tmp/tmpebvxv3jg.cpp:21: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 1)\n        return true;\n    for (int i = 2; i * i <= n; i++)\n        if (n\
    \ % i == 0)\n            return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4ekpm252: /tmp/tmp4ekpm252.cpp:20: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2)\n        return true;\n    else if (n < 2)\n        return false;\n\n   \
    \ // if n is even and exactly 2, it is prime\n    if (n % 2 == 0 && n == 2)\n\
    \        return true;\n\n    // if n is even and n > 2 it is composite\n    if\
    \ (n % 2 == 0 && n > 2) {\n        return false;\n    }\n\n    // if n is odd\
    \ and exactly 2, it is not prime\n    if (n % 2 == 1 && n == 2)\n        return\
    \ false;\n\n    // if n is odd and n > 2, it is prime\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0)\n            return false;\n   \
    \ }\n\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084050
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n ==\
    \ 2)\n        return true;\n    if (n <= 1)\n        return false;\n    if (n\
    \ == 0 || n == 1 || n % 2 == 0)\n        return false;\n    for (long i = 3; i\
    \ * i <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084050
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  int i, j;\n\
    \  // Check up to sqrt(n).\n  for (int i = 3; i * i <= n; i += 2)\n    if (n %\
    \ i == 0)\n      return false;\n  // Check everything up to sqrt(n).\n  for (j\
    \ = 3; j <= n / i; j += 2)\n    if (i % j == 0)\n      return false;\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660084050
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Check\
    \ for trivial cases.\n    if (n <= 1) {\n        return false;\n    }\n\n    //\
    \ Check ranges.\n    if (n < 2) {\n        return false;\n    }\n    if (n % 2\
    \ == 0) {\n        return false;\n    }\n\n    // If n = 2, then return true.\n\
    \    if (n == 2) {\n        return true;\n    }\n\n    // Find sqrt(n).\n    long\
    \ long sqrt_n = (long long)sqrt(n);\n\n    // Loop over all odd numbers.\n   \
    \ for (long long i = 3; i <= sqrt_n; i += 2) {\n        if (n % i == 0) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    // Initialize\
    \ all non-prime numbers to zero.\n    long long int flag = 1L;\n    // Check and\
    \ set primes.\n    if (n <= 1) return false;\n    else if ((n % 2) == 0)\n   \
    \     flag += 1;\n    else if ((n % 3) == 0)\n        flag += 2;\n    else if\
    \ ((n % 5) == 0)\n        flag += 4;\n    else {\n        long long int sqrtN\
    \ = sqrt(n);\n        for (long long int i = 6L; i <= sqrtN; i += 6L) {\n    \
    \        if ((n % i) == 0)\n                flag += 8;\n        }\n    }\n   \
    \ // Check if number is prime.\n    return ((flag != 1L) && ((n % flag) == 0));\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp3lyx6_53: /tmp/tmp3lyx6_53.cpp:27: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    assert(n\
    \ >= 2 && n <= 100);\n    if (n < 2) return false;\n    for (long m = 2; m * m\
    \ < n; m++) {\n        if (n % m == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfbsbq1tn: /tmp/tmpfbsbq1tn.cpp:5: bool is_prime(long int): Assertion
    `n >= 2 && n <= 100'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// Check for\
    \ small prime numbers.\n\tif (n < 3) {\n\t\treturn true;\n\t}\n\n\t// Check that\
    \ the number is odd.\n\tif (n % 2 == 1) {\n\t\treturn false;\n\t}\n\n\t// Check\
    \ that the number isn't evenly divisible by any even number > 2.\n\t// For example,\
    \ the number 6 is divisible by 2, but not by 3.\n\tfor (int i = 3; i <= (sqrt(n)\
    \ + 1) / 2; i += 2) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \n\t// Check that the number is odd using the Riemann Hypothesis.\n\tfor (int\
    \ i = 3; i <= ((sqrt(n) + 2) / 3) / 2; i += 2) {\n\t\tif (n % i == 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpagis9qt7: /tmp/tmpagis9qt7.cpp:34: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if(n<=1)\
    \ return false;\n    long s = sqrt(n); //square root of n\n    long x = 3;\n \
    \   long d = 1;\n    // Loop through all numbers from 2 to square root of n.\n\
    \    while(x <= s) {\n        // If remainder is 0 then given number is prime\
    \ else it is composite.\n        if(n%x == 0) return false;\n        d += 1;\n\
    \        x += 1;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6zvllxci: /tmp/tmp6zvllxci.cpp:20: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n\n  // Trial division check\n\
    \  int i = 3;\n  while (i <= (n / 2)) {\n    if (n % i == 0) return false;\n \
    \   i += 2;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9et2ttz8: /tmp/tmp9et2ttz8.cpp:24: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n\t// Base case:\
    \ 1 or 0\n\tif (n == 1 || n == 0)\n\t\treturn false;\n\n\t// Sieve upto square\
    \ root of the given number.\n\t// NOTE: For better efficiency, try using Sieve\
    \ of Erathostenes,\n\t// which is more efficient than sieving upto square root\
    \ of n.\n\tint sqrt = (int)sqrt((double)n);\n\n\t// Try all odd numbers.\n\t//\
    \ NOTE: It would be better to use a more efficient sieve\n\t// than the one we\
    \ use here.\n\tint i = 3;\n\twhile (i <= sqrt) {\n\t\tif (n % i == 0)\n\t\t\t\
    return false;\n\n\t\ti += 2;\n\t}\n\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt93eunnz.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpt93eunnz.cpp:12:32: error: \u2018sqrt\u2019 cannot be used as a function\n\
    \   12 |  int sqrt = (int)sqrt((double)n);\n      |                          \
    \      ^\n"
  stdout: ''
  timestamp: 1660084050
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\nbool is_prime(long n) {\n    if (n <=\
    \ 1) return false;\n    if (n == 2) return true;\n    long f = sqrt(n);\n    for\
    \ (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0) return false;\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyv4kgerl: /tmp/tmpyv4kgerl.cpp:14: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660084050
