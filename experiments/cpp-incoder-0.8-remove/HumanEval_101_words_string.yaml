name: HumanEval_101_words_string
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a string\
  \ of words separated by commas or spaces. Your task is\n// to split the string into\
  \ words and return an array of the words.\n// For example:\nstd::vector<std::string>\
  \ words_string(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = words_string;\n    assert(candidate((\"\
  Hi, my name is John\")) == (std::vector<std::string>({(std::string)\"Hi\", (std::string)\"\
  my\", (std::string)\"name\", (std::string)\"is\", (std::string)\"John\"})));\n \
  \   assert(candidate((\"One, two, three, four, five, six\")) == (std::vector<std::string>({(std::string)\"\
  One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
  five\", (std::string)\"six\"})));\n    assert(candidate((\"Hi, my name\")) == (std::vector<std::string>({(std::string)\"\
  Hi\", (std::string)\"my\", (std::string)\"name\"})));\n    assert(candidate((\"\
  One,, two, three, four, five, six,\")) == (std::vector<std::string>({(std::string)\"\
  One\", (std::string)\"two\", (std::string)\"three\", (std::string)\"four\", (std::string)\"\
  five\", (std::string)\"six\"})));\n    assert(candidate((\"\")) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"ahmed     , gamal\")) == (std::vector<std::string>({(std::string)\"\
  ahmed\", (std::string)\"gamal\"})));\n}\n"
completions: ["    std::vector<std::string> res;\n    std::istringstream iss(s);\n\
    \    std::string word;\n    std::getline(iss, word, ',');\n    while(iss) {\n\
    \        res.push_back(word);\n        std::getline(iss, word, ',');\n    }\n\
    \    return res;", "// Split on spaces (\" \"),\nstd::vector<std::string> v;\n\
    std::istringstream ss(s);\nstd::string item;\nwhile (std::getline(ss, item, '\
    \ ')) {\nv.push_back(item);", "    std::istringstream iss(s);\n    std::string\
    \ word;\n    std::vector<std::string> result;\n    while (std::getline(iss, word,\
    \ ',') || std::getline(iss, word))\n    {\n        result.push_back(word);\n \
    \   }\n    return result;", "  std::istringstream ss(s);\n  std::string word;\n\
    \  std::vector<std::string> word_list;\n  while (ss >> word) {\n    word_list.push_back(word);\n\
    \  }\n  return word_list;", "    std::string::size_type last_index = 0, last_index2\
    \ = 0;\n    std::vector<std::string> word_array;\n    std::size_t index = 0;\n\
    \    while ((index = s.find_first_of(\",\")) != std::string::npos)\n    {\n  \
    \      // Add the part before the comma to word_array\n        word_array.push_back(s.substr(last_index,\
    \ index - last_index));\n        // Add the part after the comma\n        word_array.push_back(s.substr(index,\
    \ std::string::npos));\n        last_index = index++;\n    }\n    // Add the remaining\
    \ part to the word_array\n    word_array.push_back(s.substr(last_index, std::string::npos));\n\
    \    return word_array;", "    std::vector<std::string> words;\n    std::stringstream\
    \ ss(s);\n    std::string word;\n    int i = 0;\n    while (std::getline(ss, word,\
    \ ',')) {\n        words.push_back(word);\n        i++;\n    }\n    return words;",
  "  std::vector<std::string> words;\n  for (size_t i = 0; i < s.size(); i++) {\n\
    \    if (s[i] != ' ' && s[i] != ',') {\n      words.push_back(s[i]);\n    } else\
    \ {\n      std::string word;\n      for (int k = 1; k <= i; k++) {\n        word.push_back(s[i]);\n\
    \      }\n      words.push_back(word);\n    }\n  }\n  return words;", "    std::vector<std::string>\
    \ res;\n    size_t pos = 0;\n    std::string word = \"\";\n    while (pos <= s.size())\
    \ {\n        auto it = s.begin();\n        while (it != s.end() && *it == ','\
    \ || *it == ' ') {\n            it++;\n        }\n        auto temp = std::string(it,\
    \ s.end());\n        if (temp.empty()) {\n            break;\n        }\n    \
    \    word = temp;\n        res.push_back(word);\n        pos = it + 1;\n    }\n\
    \    return res;", "    std::vector<std::string> words;\n    std::string word;\n\
    \    std::istringstream iss(s);\n    while (std::getline(iss, word, ',')) {\n\
    \        words.push_back(word);\n    }\n    return words;", "    // Split string\
    \ into words using space as delimiter.\n    // Use strsep if you have strsep\n\
    \    // Write your code here", "  std::vector<std::string> words;\n  \n  // Your\
    \ code here\n  \n  return words;", '    //your code goes here', "    std::vector<std::string>\
    \ v;\n    std::istringstream iss(s);\n    std::string token;\n    while (std::getline(iss,\
    \ token, ',')) {\n        v.push_back(token);\n    }\n    return v;", "  std::vector<std::string>\
    \ words;\n  std::istringstream iss(s);\n  std::string word;\n  while (iss >> word)\
    \ {\n    words.push_back(word);\n  }\n  return words;", "  std::vector<std::string>\
    \ words;\n  // Write your code here\n  std::istringstream ss (s);\n  std::string\
    \ word;\n  while(std::getline(ss, word, ','))\n  {\n    words.push_back(word);\n\
    \  }\n  return words;", '    // Write your code here', "    std::vector<std::string>\
    \ v;\n    std::istringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ',')) {\n        v.push_back(word);\n    }\n    return v;", "    // Split\
    \ string into tokens using space character as delimiter\n    std::istringstream\
    \ ss(s);\n    std::string token;\n    std::vector<std::string> results;\n    while\
    \ (std::getline(ss, token, ' ')) {\n        results.push_back(token);\n    }\n\
    \    return results;", "    // Split the string into words\n    std::string delimiter\
    \ = \",\";\n    size_t pos = 0;\n    auto words_begin = s.find_first_of(delimiter,\
    \ pos);\n    while (words_begin != s.npos) {\n        auto words_end = s.find_first_of(delimiter,\
    \ words_begin);\n        auto words_str = s.substr(words_begin, words_end + 1\
    \ - words_begin);\n        auto words_vec = split(words_str);\n        std::cout\
    \ << words_str << std::endl;\n        words_begin = s.find_first_of(delimiter,\
    \ words_end + 1);\n    }", "  std::vector<std::string> words;\n  std::istringstream\
    \ iss(s);\n  std::string word;\n  while (iss >> word)\n    words.push_back(word);\n\
    \  return words;", "  std::vector<std::string> v;\n  std::string word;\n\n  //\
    \ remove spaces and commas\n  std::replace(s.begin(), s.end(), ',', ' ');\n  std::replace(s.begin(),\
    \ s.end(), ' ', '\\t');\n\n  // split by space\n  s = std::string(s.begin(), s.end()).erase(std::remove(s.begin(),\
    \ s.end(), '\\t'));\n  std::istringstream is(s);\n  while (std::getline(is, word,\
    \ ' ')) {\n    v.push_back(word);\n  }\n\n  return v;", "// Write your code here\n\
    std::string word;\nstd::vector<std::string> result;\nstd::stringstream stream(s);\n\
    while(stream >> word) {\n    if (result.size() > 0) {\n        result += \" \"\
    ;\n    }\n    result += word;", "  std::cout << s << std::endl;\n  // Implement\
    \ the above function here.", "  std::vector<std::string> words;\n  auto delimiter\
    \ = std::is_same<',', char>::value;\n  auto begin = s.begin();\n  auto end = s.end();\n\
    \  auto current = begin;\n  while (current != end) {\n    if (delimiter) {\n \
    \     words.push_back(std::string(current, current));\n      current = s.find(delimiter,\
    \ current);\n    } else {\n      words.push_back(std::string(current, s.end()));\n\
    \      current = s.begin();\n    }\n  }\n  return words;", "    assert(!s.empty());\n\
    \    std::vector<std::string> res;\n    std::string::size_type start = 0;\n  \
    \  std::string::size_type end = 0;\n    std::string::size_type pos = 0;\n    while\
    \ ((end = s.find(\",\", start)) != std::string::npos) {\n        res.push_back(s.substr(start,\
    \ end - start));\n        start = end + 1;\n    }\n    res.push_back(s.substr(start));\n\
    \    return res;", '    // Your code goes here.', "  std::vector<std::string>\
    \ v(0);\n  std::string temp;\n  bool flag = false;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] == ',') {\n      if (!flag) {\n        temp.clear();\n\
    \      }\n      v.push_back(temp);\n      flag = false;\n    } else {\n      flag\
    \ = true;\n      temp.push_back(s[i]);\n    }\n  }\n  return v;", "    std::vector<std::string>\
    \ words;\n    std::stringstream ss(s);\n    std::string str;\n    while (std::getline(ss,\
    \ str, ','))\n        words.push_back(str);\n    return words;", '    // Your
    code here', "    std::vector<std::string> words;\n    size_t pos = 0, start =\
    \ 0;\n    std::string word = s;\n    while (pos < s.size()) {\n        if (s[pos]\
    \ == ' ') {\n            if (words.size() > 0)\n                words.push_back(word.substr(start,\
    \ pos - start));\n            start = pos + 1;\n        }\n        else\n    \
    \        pos += 1;\n    }\n    if (words.size() > 0)\n        words.push_back(word.substr(start,\
    \ s.size() - start));\n    return words;", "    std::vector<std::string> result;\n\
    \    \n    std::istringstream ss(s);\n    std::string item;\n    while(std::getline(ss,\
    \ item, ',') || std::getline(ss, item, ' '))\n    {\n        result.push_back(item);\n\
    \    }\n\n    return result;", "  std::vector<std::string> words;\n  std::istringstream\
    \ iss(s);\n  std::string word;\n  while (std::getline(iss, word, ','))\n    words.push_back(word);\n\
    \  return words;", "  // Write your code here\n  std::vector<std::string> v;\n\
    \  std::string temp=\"\";\n  for (int i=0; i<s.length(); i++){\n    if (s[i]=='\
    \ '|| s[i]==','){\n      v.push_back(temp);\n      temp=\"\";\n    }\n    else\n\
    \      temp+=s[i];\n  }\n  v.push_back(temp);\n  return v;", "  std::vector<std::string>\
    \ words;\n  size_t pos = 0;\n  while (true) {\n    pos = s.find(\" \", pos);\n\
    \    if (pos == std::string::npos)\n      break;\n    std::string word = s.substr(0,\
    \ pos);\n    words.push_back(word);\n    s = s.substr(pos + 1);\n  }\n  words.push_back(s);\n\
    \  return words;", // Write your code here, "    std::vector<std::string> result;\n\
    \    size_t pos = 0;\n    size_t last_pos = 0;\n    size_t start_pos = 0;\n  \
    \  while ((pos = s.find(',', last_pos)) != std::string::npos) {\n        result.push_back(s.substr(start_pos,\
    \ pos - start_pos));\n        start_pos = pos + 1;\n        last_pos = pos;\n\
    \    }\n    result.push_back(s.substr(start_pos, last_pos - start_pos));\n   \
    \ return result;", '  // Write your code here.', "  std::vector<std::string> words;\n\
    \  std::string word;\n  for (auto it = s.begin(); it != s.end(); it++) {\n   \
    \ if (it != s.begin() && *it == ',') {\n      words.push_back(word);\n      word.clear();\n\
    \    } else {\n      word += *it;\n    }\n  }\n  words.push_back(word);\n  return\
    \ words;", "  std::vector<std::string> result;\n  std::stringstream ss(s);\n \
    \ std::string word;\n  while (std::getline(ss, word, ',')) {\n    result.push_back(word);\n\
    \  }\n  return result;", '    // code here', "    std::istringstream ss(s);\n\
    \    std::string word;\n    std::vector<std::string> result;\n    while (std::getline(ss,\
    \ word, ',')) {\n        result.push_back(word);\n    }\n    return result;",
  "  std::vector<std::string> words;\n  std::istringstream ss(s);\n  std::string word;\n\
    \  while (std::getline(ss, word, ',')) {\n    words.push_back(word);\n  }\n  return\
    \ words;", // Complete the code here., "\tstd::vector<std::string> words;\n\t\
    std::stringstream ss(s);\n\tstd::string word;\n\twhile(std::getline(ss, word,\
    \ ',')) {\n\t\twords.push_back(word);\n\t}\n\treturn words;", "    std::vector<std::string>\
    \ v;\n    std::istringstream is(s);\n    std::string word;\n    while (is >> word)\
    \ v.push_back(word);\n    return v;", "    std::vector<std::string> result;\n\
    \    std::vector<std::string> words;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (iss >> word)\n        words.push_back(word);\n    return result;",
  "   std::vector<std::string> v;\n   std::istringstream ss(s);\n   int ch;\n   while(ss\
    \ >> ch) {\n       v.push_back(std::to_string(ch));\n   }\n   return v;", "  std::string\
    \ words = \"\";\n  std::string token = \"\";\n  for (char c : s)\n  {\n    if\
    \ (isspace(c))\n    {\n      token = token.empty() ? \"\" : \" \" + token;\n \
    \     words += token;\n      token.clear();\n    }\n    else\n    {\n      token\
    \ += c;\n    }\n  }\n  if (!token.empty())\n  {\n    words += \" \" + token;\n\
    \  }\n  return SplitString(words);", "  std::vector<std::string> result; \n  std::string\
    \ temp = s; \n  int i = 0; \n  while (true) {\n    int pos = temp.find(','); \n\
    \    if (pos == std::string::npos) pos = temp.find(' '); \n    if (pos == std::string::npos)\
    \ break;\n    result.push_back(temp.substr(0, pos)); \n    temp = temp.substr(pos\
    \ + 1); \n  }\n  result.push_back(temp); \n  return result; ", "    std::vector<std::string>\
    \ v;\n    std::string word;\n    std::istringstream iss(s);\n    while (std::getline(iss,\
    \ word, ','))\n    {\n        v.push_back(word);\n    }\n    return v;", "   \
    \ std::vector<std::string> result;\n    // Write your code here\n    return result;",
  "    std::vector<std::string> v;\n    std::istringstream iss(s);\n    std::string\
    \ word;\n    while (std::getline(iss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::vector<std::string> result;\n    std::size_t\
    \ n = s.length();\n    for (std::size_t i = 0; i < n; ++i) {\n        auto it\
    \ = s.cbegin() + i;\n        auto next = it;\n        while (it != s.cend() &&\
    \ isspace(*it)) {\n            ++it;\n        }\n        result.push_back({it,\
    \ next});\n    }\n    return result;", "  assert(!s.empty());\n  std::stringstream\
    \ sStream(s);\n  std::vector<std::string> words;\n  while (sStream.peek() != EOF)\
    \ {\n    std::string word;\n    std::getline(sStream, word, ',');\n    words.append(word);\n\
    \  }\n  return words;", "    std::vector<std::string> vs;\n    size_t prev = 0,\
    \ pos = 0;\n    while ((pos = s.find(' ', prev)) != string::npos) {\n        vs.push_back(s.substr(prev,\
    \ pos - prev));\n        prev = pos + 1;\n    }\n    vs.push_back(s.substr(prev,\
    \ s.length() - prev));\n    return vs;", '    // TODO: your code here', "    //\
    \ Write your code here\n    \n    std::vector<std::string> v;\n    std::string\
    \ s = \"\";\n    for (auto &c : s) {\n        if (!isspace(c)) {\n           \
    \ s += c;\n        }\n    }\n    \n    std::string temp;\n    char c;\n    std::string\
    \ temp1;\n    for (size_t i = 0; i < s.length(); i++) {\n        c = s.at(i);\n\
    \        if (c == ',' || c == ' ') {\n            v.push_back(temp);\n       \
    \     temp = \"\";\n        }\n        else {\n            temp += c;\n      \
    \  }\n    }\n    v.push_back(temp);\n    return v;", '  // Your code goes here',
  "    std::vector<std::string> word_vec;\n    std::string word = \"\";\n    for (auto\
    \ i : s) {\n        if (i == ' ' || i == '.' || i == '?' || i == '!') {\n    \
    \        word_vec.push_back(word);\n            word = \"\";\n        } else {\n\
    \            word += i;\n        }\n    }\n    word_vec.push_back(word);\n   \
    \ return word_vec;", "    std::vector<std::string> res;\n    std::string word;\n\
    \    for(int i=0;i<s.length();i++) {\n        word = s.substr(i,1);\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    std::string\
    \ word;\n    std::vector<std::string> word_list;\n\n    // split string by spaces\
    \ first\n    while (std::getline(std::cin, word))\n    {\n        word_list.push_back(word);\n\
    \    }\n\n    for (unsigned int i = 0; i < word_list.size(); ++i)\n    {\n   \
    \     // std::cin >> word;\n        std::string word;\n        std::getline(std::cin,\
    \ word);\n        words.push_back(word);\n    }\n\n    return words;", "  std::vector<std::string>\
    \ words;\n  std::string word = \"\";\n  size_t prev_end_idx = 0;\n  for (size_t\
    \ i = 0; i < s.size(); ++i) {\n    if (s[i] == ' ' || s[i] == ',') {\n      //\
    \ add word\n      words.push_back(word);\n      word = \"\";\n    } else {\n \
    \     word += s[i];\n    }\n  }\n  // add last word\n  words.push_back(word);\n\
    \  return words;", "    std::istringstream iss(s);\n    std::string word;\n  \
    \  std::vector<std::string> words;\n    while (std::getline(iss, word, ' ,'))\
    \ {\n        words.push_back(word);\n    }\n    return words;", "  std::vector<std::string>\
    \ words;\n  std::string word;\n  std::stringstream ss;\n  ss << s;\n  while (std::getline(ss,\
    \ word, ',')) {\n    words.push_back(word);\n  }\n  return words;", "    std::vector<std::string>\
    \ v;\n    std::string seprator(\" ,.?!\");\n    for (std::string s : s.split(seprator))\
    \ {\n        if (!v.empty()) {\n            v.push_back(s);\n        } else {\n\
    \            v.push_back(s);\n        }\n    }\n    return v;", "    // Split\
    \ string s into vector of words\n    // and return the vector of words", //TODO,
  "    assert(s.size() > 0);\n    \n    std::vector<std::string> words;\n    std::string\
    \ token = \" \";\n    size_t i = 0;\n    \n    while (i < s.size()) {\n      \
    \  if (s[i] != ' ') {\n            words.push_back(token);\n            token\
    \ = s[i];\n        } else {\n            token += s[i];\n        }\n        ++i;\n\
    \    }\n    \n    words.push_back(token);\n    return words;", "    std::vector<std::string>\
    \ ans;\n    std::istringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ',')) {\n        ans.push_back(word);\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    std::string word;\n    int pos = 0;\n    while (pos < s.size())\
    \ {\n        pos = s.find_first_of(\" ,\", pos);\n        if (pos == std::string::npos)\n\
    \            pos = s.size();\n        word = s.substr(pos, pos - pos);\n     \
    \   words.push_back(word);\n    }\n    return words;", '    // TODO: Your code
    here', "    std::vector<std::string> words;\n    std::istringstream ss(s);\n \
    \   std::string word;\n\n    while (std::getline(ss, word, ','))\n        words.push_back(word);\n\
    \    return words;", "    // TODO\n    std::vector<std::string> ans;\n    return\
    \ ans;", "  std::vector<std::string> words;\n  // You should write your code here\n\
    \  return words;", '    // Split string into array of words and return it', " \
    \ std::vector<std::string> elems;\n  std::string token;\n  std::string temp;\n\
    \  std::string temp2;\n\n  for (int i = 0; i <= s.size(); i++) {\n    if (i ==\
    \ 0 || i == s.size()) {\n      elems.push_back(token);\n      token = \"\";\n\
    \    } else {\n      temp = s.substr(i, i + 1);\n      if (temp == \",\" || temp\
    \ == \" \") {\n        elems.push_back(token);\n        token = \"\";\n      }\
    \ else if (temp == \"\\\\\" || temp == \"'\" || temp == '\"' || temp == '\\'')\
    \ {\n        temp2 = s.substr(i, i + 1);\n        elems.push_back(temp2);\n  \
    \      token = temp2;\n      } else {\n        token += temp;\n      }\n    }\n\
    \  }\n  elems.push_back(token);\n  return elems;", "    // Write your code here\n\
    \    std::vector<std::string> vec;\n    std::string str = \"\";\n    for(int i\
    \ = 0;i< s.size();i++)\n    {\n        str = str.concat(s[i]);\n    }\n    std::cout\
    \ << str;\n    return vec;", "    std::vector<std::string> v;\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item)) {\n      \
    \  v.push_back(item);\n    }\n    return v;", "    std::vector<std::string> ans;\n\
    \    s.erase(remove_if(s.begin(), s.end(), isspace), s.end());\n    for(std::string\
    \ word; std::cin >> word; ) {\n        ans.push_back(word);\n    }\n    return\
    \ ans;", "    std::vector<std::string> words;\n    char delim = ',';\n    std::string\
    \ token;\n    std::istringstream in{s};\n    while (in >> token) {\n        words.push_back(token);\n\
    \        in >> token;\n        if (token != delim) {\n            words.push_back(token);\n\
    \        }\n    }\n    return words;", "    std::vector<std::string> words;\n\
    \    std::istringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \ std::vector<std::string> words;\n  // +++your code here+++\n  for(auto s : s)\n\
    \  {\n    std::string word;\n    \n    if(!std::is_space(s))\n    {\n      if(std::is_comma(s))\n\
    \      {\n        word = s.substr(0,s.find_first_of(\",\"));\n      }\n      else\n\
    \      {\n        word = s.substr(0,s.find_first_of(\" \"));\n      }\n    }\n\
    \    \n    words.push_back(word);\n  }\n  return words;", "    // Split string\
    \ into words.\n    std::vector<std::string> words;\n    std::string word;\n  \
    \  std::istringstream ss(s);\n    while (std::getline(ss, word, ','))\n    {\n\
    \        words.push_back(word);\n    }\n    return words;", "  std::vector<std::string>\
    \ tokens;\n  // Write your code here.\n  \n  return tokens;", "    auto begin\
    \ = s.begin();\n    auto end = s.end();\n    std::vector<std::string> words;\n\
    \    while (begin != end) {\n        auto current = begin;\n        begin += std::find(begin,\
    \ end, ',');\n        auto end = begin + 1;\n        words.push_back(std::string(current,\
    \ end - begin));\n        begin = end;\n    }\n    return words;", "   std::vector<std::string>\
    \ res;\n   std::string temp;\n   std::istringstream ss;\n   int i = 0;\n\n   while\
    \ ( i < s.size() ) {\n      ss << s[i];\n      if ( i < s.size() - 1 ) {\n   \
    \      ss << \",\";\n      }\n      res.push_back(temp);\n      temp = ss.str();\n\
    \      i++;\n   }\n   return res;", "    std::vector<std::string> words;\n   \
    \ // Add code here\n    return words;", "    std::istringstream stream(s);\n \
    \   std::string item;\n    std::vector<std::string> words;\n    while (std::getline(stream,\
    \ item)) {\n        std::istringstream stream(item.c_str());\n        while (std::getline(stream,\
    \ item, '.')) {\n            words.push_back(item);\n        }\n    }\n    return\
    \ words;", "    std::vector<std::string> result;\n    for (std::string::size_type\
    \ i = 0; i < s.size(); ++i) {\n        auto p = s.find_first_of(i == 0 ? ' ' :\
    \ ',', 1);\n        if (p == std::string::npos) {\n            result.push_back(s.substr(i,\
    \ s.size() - i));\n        } else {\n            result.push_back(s.substr(i,\
    \ p - i));\n        }\n    }\n    return result;", "    std::istringstream ss(s);\n\
    \    std::vector<std::string> result;\n    std::string temp;\n    while (std::getline(ss,\
    \ temp, ','))\n        result.push_back(temp);\n    return result;", "    std::vector<std::string>\
    \ v;\n    std::string word;\n    std::istringstream ss(s);\n    while (std::getline(ss,\
    \ word, ',')) {\n        v.push_back(word);\n    }\n    return v;", "    // Write\
    \ your code here\n    std::vector<std::string> word_list;\n    for(std::string\
    \ x:s){\n        word_list.push_back(x);\n    }\n    return word_list;", "  std::vector<std::string>\
    \ words;\n  if(std::all_of(s.begin(), s.end(), isspace))\n    {\n      auto temp\
    \ = s.begin();\n      while(std::all_of(s.begin(), s.end(), isspace)) // Checking\
    \ for all spaces.\n    {\n      temp.push_back(s.front()); // Adding the first\
    \ word in the string.\n      temp.back() = ' '; // Adding a space to the last\
    \ word in the string.\n      s.erase(s.begin(), s.end()); // Removing the first\
    \ word in the string.\n      s.insert(s.begin(), s.back()); // Adding the first\
    \ word in the string again.\n      s.erase(s.begin(), s.end()); // Removing the\
    \ first word in the string.\n      words.push_back(std::string(temp)); // Adding\
    \ the first word in the string.\n      temp.clear();\n    }\n    }\n  else\n \
    \   {\n      words.push_back(std::string(s)); // Adding the first word in the\
    \ string.\n    }\n  return words;", "  std::string word;\n  std::vector<std::string>\
    \ words;\n  int pos = 0;\n  while (pos != std::string::npos) {\n    pos = s.find_first_of(\"\
    \ ,\", pos);\n    if (pos != std::string::npos) {\n      word = s.substr(pos,\
    \ pos - 1);\n      words.push_back(word);\n      pos = std::string::npos;\n  \
    \  }\n  }\n  return words;", "  std::vector<std::string> v;\n  std::stringstream\
    \ ss(s);\n  std::string item;\n  while (std::getline(ss, item, ',')) {\n    v.push_back(item);\n\
    \  }\n  return v;", "    std::istringstream ss(s);\n    std::vector<std::string>\
    \ res;\n    std::string word;\n    while (std::getline(ss, word, ',')) {\n   \
    \     res.push_back(word);\n    }\n    return res;", '    // Complete the function
    here', "    std::vector<std::string> result;\n    int curr = 0;\n    int last\
    \ = 0;\n    while ((curr = s.find(',', last)) != std::string::npos) {\n      \
    \  result.emplace_back(s.substr(last, curr - last));\n        last = curr + 1;\n\
    \    }\n    result.emplace_back(s.substr(last));\n    return result;", "  // Write\
    \ your code here\n  assert(!s.empty());\n  std::vector<std::string> result;\n\
    \  for (size_t i = 0; i < s.size(); ++i) {\n    if (i == 0 || s[i] != ' ') {\n\
    \      result.push_back(s.substr(i, 1));\n    }\n  }\n  return result;", "  std::vector<std::string>\
    \ words;\n  size_t pos = 0;\n  std::string word;\n  while (pos < s.size()) {\n\
    \    pos = s.find_first_of(',', pos);\n    word = s.substr(pos, std::string::npos);\n\
    \    if (word != \"\") {\n      words.push_back(word);\n    }\n    pos = s.find_first_not_of(',',\
    \ pos + 1);\n  }\n  return words;", "    std::vector<std::string> v;\n    // Split\
    \ s by spaces.\n    const auto delim = ' ';\n    std::string::size_type i = 0;\n\
    \    // Use std::string::find to locate the next space or comma in\n    // s.\n\
    \    while ((i = s.find(delim, i)) != s.npos) {\n        // Insert a space at\
    \ index i.\n        v.emplace_back(s.substr(i, std::min(i + delim.size(), s.size())));\n\
    \        // Skip past the comma or space after i.\n        i = s.find(delim, i\
    \ + 1);\n    }\n    return v;", "  std::vector<std::string> words;\n  std::string\
    \ str = s.c_str();\n  char *pch = strtok (str, \" ,.\");\n  if (pch != nullptr)\n\
    \  {\n     words.push_back(pch);\n     while (pch = strtok (nullptr, \" ,.\"))\n\
    \     {\n         words.push_back(pch);\n     }\n  }\n  return words;", "  std::vector<std::string>\
    \ res;\n  std::istringstream iss(s);\n  std::string word;\n  while (std::getline(iss,\
    \ word, ',')) {\n    res.push_back(word);\n  }\n  return res;", "    std::vector<std::string>\
    \ words;\n    std::string word = s;\n    std::string temp = s;\n    \n    while(temp\
    \ != \"\") {\n        if(temp.at(0) != ',') {\n            words.push_back(word);\n\
    \        }\n        word = temp.substr(1,temp.size());\n        temp = temp.substr(0,1);\n\
    \    }\n    \n    return words;", "    std::vector<std::string> words;\n    std::istringstream\
    \ iss(s);\n    std::string word;\n    while (std::getline(iss, word, ',') || std::getline(iss,\
    \ word)) {\n        words.push_back(word);\n    }\n    return words;", "  std::istringstream\
    \ stream(s);\n  std::string word;\n  std::vector<std::string> words;\n\n  while\
    \ (std::getline(stream, word, ',')) {\n    words.push_back(word);\n  }\n\n  return\
    \ words;", "    std::vector<std::string> ret;\n    int i = 0;\n    int size =\
    \ s.size();\n    while (i < size) {\n        while (s[i] == ' ') i++;\n      \
    \  while (s[i] != ' ') ret.push_back(s[i++]);\n        while (s[i] == ' ') i++;\n\
    \    }\n    return ret;", "    std::vector<std::string> words;\n    std::string\
    \ word;\n    std::string delimiter = \",\";\n    auto pos = s.find_first_of(delimiter);\n\
    \    while (pos != std::string::npos) {\n        word = s.substr(0, pos);\n  \
    \      words.push_back(word);\n        s = s.substr(pos + delimiter.length());\n\
    \        pos = s.find_first_of(delimiter);\n    }\n    words.push_back(s);\n \
    \   return words;", "  std::vector<std::string> arr;\n  for(std::size_t i = 0;\
    \ i != s.size(); ++i) {\n    if (s[i] == ',' || s[i] == ' ') {\n      arr.push_back(std::string(s.begin(),\
    \ s.begin() + i + 1));\n      s.erase(i + 1, 1);\n    }\n  }\n  arr.push_back(std::string(s.begin(),\
    \ s.end()));\n  return arr;", "  std::vector<std::string> result;\n  std::istringstream\
    \ iss(s);\n  std::string word;\n  while (iss >> word)\n    result.push_back(word);\n\
    \  return result;", "    std::vector<std::string> words;\n    std::string delimiter\
    \ = \",\";\n    std::string::size_type pos;\n    while ((pos = s.find(delimiter))\
    \ != std::string::npos) {\n        words.push_back(s.substr(0, pos));\n      \
    \  s = s.substr(pos + delimiter.length());\n    }\n    words.push_back(s);\n \
    \   return words;", "    // Split string into array based on white space\n   \
    \ std::istringstream ss(s);\n    std::string item;\n    std::vector<std::string>\
    \ words;\n    while (std::getline(ss, item, ',')) {\n        words.push_back(item);\n\
    \    }\n    return words;", "    std::vector<std::string> result;\n    \n    for(auto\
    \ c : s) {\n        std::string word;\n        bool found = false;\n        if(std::isspace(c))\
    \ {\n            continue;\n        }\n        for(auto w: result) {\n       \
    \     if(std::isspace(w)) {\n                word += c;\n                found\
    \ = true;\n                break;\n            }\n            word += w;\n   \
    \     }\n        if(!found) {\n            result.push_back(word);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> words;\n    std::istringstream\
    \ iss(s);\n    std::string word;\n    while (std::getline(iss, word, ',')) {\n\
    \        words.push_back(word);\n    }\n    return words;", "  s = s.empty() ?\
    \ std::string(\"\") : s;\n  std::vector<std::string> words;\n  for (char &c :\
    \ s) {\n    if (!isspace(c) && c != ',')\n      words.push_back(c);\n  }\n  return\
    \ words;", "  std::istringstream stream(s);\n  std::string item;\n  std::vector<std::string>\
    \ items;\n  while (std::getline(stream, item, ',')) {\n    items.push_back(item);\n\
    \  }\n  return items;", "    std::vector<std::string> words;\n    std::string\
    \ str;\n    str.assign(s.begin(), s.end());\n    std::stringstream ss(str);\n\
    \    std::string word;\n    while (std::getline(ss, word, ','))\n        words.push_back(word);\n\
    \    return words;", "  auto words_array = split(s, \",\", [](char c) {\n    return\
    \ c == ' ' || c == '\\t';\n  });\n  std::string ans = \"\";\n  for (auto word\
    \ : words_array) {\n    ans += word;\n  }\n  return words_array;", "    std::vector<std::string>\
    \ result;\n    \n    for(int i = 0; i < s.size(); ++i) {\n        if(s[i] == '\
    \ ' || s[i] == ',')\n        {\n            i++;\n            result.push_back(s.substr(0,\
    \ i));\n        }\n    }\n    \n    return result;", "  std::vector<std::string>\
    \ arr;\n  std::string word;\n  bool flag = false;\n  int i = 0;\n  int index =\
    \ s.length() - 1;\n  while (index >= 0) {\n    if (s[index] == ',' || s[index]\
    \ == ' ') {\n      if (flag) {\n        arr.push_back(word);\n        word = \"\
    \";\n        flag = false;\n      }\n      index--;\n    } else if (s[index] ==\
    \ '.') {\n      arr.push_back(word);\n      word = \"\";\n      flag = true;\n\
    \    } else {\n      word += s[index];\n      index--;\n    }\n  }\n  arr.push_back(word);\n\
    \  return arr;", "  char buff[1000] = {0};\n  std::vector<std::string> words;\n\
    \  // TODO\n  std::string word = \"\";\n  int i = 0;\n  while (i != s.size())\
    \ {\n    if (s[i] == ' ' || s[i] == '\\t') {\n      if (word.empty()) {\n    \
    \    word = s.substr(i);\n      } else {\n        words.push_back(word);\n   \
    \     word = s.substr(i);\n      }\n    } else if (s[i] == ',') {\n      if (word.empty())\
    \ {\n        word = s.substr(i);\n      } else {\n        words.push_back(word);\n\
    \        word = s.substr(i);\n      }\n    } else {\n      word.push_back (s[i]);\n\
    \    }\n    i++;\n  }\n  words.push_back(word);\n  return words;", "  s = std::move(s);\n\
    \  std::vector<std::string> words;\n  std::istringstream ss(s);\n  std::string\
    \ word;\n  while (std::getline(ss, word, ',')) {\n    words.push_back(std::move(word));\n\
    \  }\n  return words;", "\tstd::vector<std::string> words;\n\tstd::stringstream\
    \ ss(s);\n\tstd::string word;\n\twhile (std::getline(ss, word, ',')) {\n\t\twords.push_back(word);\n\
    \t}\n\treturn words;", "    std::vector<std::string> v;\n    std::istringstream\
    \ iss(s);\n    std::string word;\n    while(std::getline(iss, word, ','))\n  \
    \      v.push_back(word);\n    return v;", "    std::string delimiter = \",\"\
    ;\n    std::string word = \"\";\n    std::vector<std::string> v;\n    std::istringstream\
    \ ss(s);\n    while (std::getline(ss, word, delimiter)) {\n        v.push_back(word);\n\
    \    }\n    return v;", '  // Your code goes here!', "  s = std::to_string(s);\n\
    \  std::vector<std::string> words;\n  std::istringstream iss(s);\n  std::string\
    \ item;\n  while (std::getline(iss, item, ',')) {\n    words.push_back(item);\n\
    \  }\n  return words;", "    std::string temp;\n    std::vector<std::string> words;\n\
    \    // You can use strings library, or split your input string by space and comma\n\
    \    std::istringstream iss(s);\n    std::string word;\n    while (std::getline(iss,\
    \ temp, ',')) {\n        words.push_back(temp);\n    }\n    return words;", " \
    \   int i = 0;\n    std::vector<std::string> v;\n    while (i < s.size()) {\n\
    \        while (s[i] != ',' && s[i] != ' ') {\n            i++;\n        }\n \
    \       if (s[i] != ',') {\n            v.push_back(s.substr(i, s.size() - i));\n\
    \            i = s.size();\n        } else {\n            i++;\n        }\n  \
    \  }\n    return v;", '    // Your code goes here', "    std::vector<std::string>\
    \ res;\n    std::vector<std::string> words;\n    std::istringstream ss(s);\n \
    \   std::string word;\n    while (ss)\n    {\n        ss.getline(word, ',');\n\
    \        words.append(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s == \"\") {\n        return words;\n    }\n    std::stringstream\
    \ ss(s);\n    std::string item;\n    while (std::getline(ss, item, ',')) {\n \
    \       words.push_back(item);\n    }\n    return words;", "    std::istringstream\
    \ inf(s);\n    std::vector<std::string> words;\n    std::string word;\n    while(inf\
    \ >> word) {\n        words.push_back(word);\n    }\n    return words;", "  std::vector<std::string>\
    \ words;\n  std::stringstream ss(s);\n  std::string word;\n  while (std::getline(ss,\
    \ word, ','))\n    words.push_back(word);\n  return words;", "\tstd::vector<std::string>\
    \ v;\n\t\n\tassert(!s.empty());\n\tassert(\" ,\".find(s) != std::string::npos);\n\
    \t\n\tstd::string::size_type pos = 0;\n\t\n\twhile (true) {\n\t\tpos = s.find_first_of(\"\
    \ ,\", pos);\n\t\tif (pos == std::string::npos) {\n\t\t\tbreak;\n\t\t}\n\t\tv.push_back(s.substr(0,\
    \ pos));\n\t\ts = s.substr(pos + 1);\n\t}\n\t\n\tv.push_back(s);\n\treturn v;",
  "    std::vector<std::string> result;\n    std::istringstream ss(s);\n    std::string\
    \ item;\n    while (std::getline(ss, item, '\\n')) {\n        result.push_back(item);\n\
    \    }\n    return result;", "    std::istringstream iss(s);\n    std::vector<std::string>\
    \ words;\n    std::string word;\n\n    while (std::getline(iss, word, ' ')) {\n\
    \        words.push_back(word);\n    }\n\n    return words;", "    std::vector<std::string>\
    \ result;\n    std::string temp;\n    std::stringstream ss;\n    ss << s;\n  \
    \  for (std::string line; std::getline(ss, line, '.'); ) {\n        if (line.empty())\
    \ continue;\n        ss << line;\n        std::string word;\n        while (std::getline(ss,\
    \ word, '.')) {\n            if (!word.empty()) result.push_back(word);\n    \
    \    }\n    }\n    return result;", "//      std::vector<string> v;\n//      v.push_back(\"\
    hello\");\n//      v.push_back(\"world\");\n//      return v;\n    vector<string>\
    \ words;\n    size_t pos = 0;\n    while ((pos = s.find(',', pos)) != string::npos)\
    \ {\n        words.push_back(s.substr(0, pos));\n        s = s.substr(pos + 1);\n\
    \    }\n    words.push_back(s);\n    return words;", "    std::vector<std::string>\
    \ ans;\n    int i = 0;\n    while (i != s.size() && s[i] != '\\0') {\n       \
    \ if (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z') {\n          \
    \  ans.push_back(s[i]);\n        }\n        i++;\n    }\n    return ans;", " \
    \   // Split s into a vector of strings based on spaces.\n    std::vector<std::string>\
    \ words;\n    std::istringstream ss(s);\n    std::string word;\n    while (std::getline(ss,\
    \ word, ' ')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \   std::vector<std::string> v;\n    std::istringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ',')) {\n        v.push_back(word);\n\
    \    }\n    return v;", '    // Complete the function here', "  std::vector<std::string>\
    \ result;\n  int i = 0;\n  for (auto its = s.begin(); its != s.end(); its = std::next(its))\
    \ {\n    if (*its == ',' || *its == ' ') {\n      result.push_back(std::string(its,\
    \ its));\n      i = 0;\n    } else {\n      i++;\n    }\n  }\n  return result;",
  "    std::vector<std::string> words;\n    if (s.empty()) return words;\n    std::stringstream\
    \ ss;\n    ss << s;\n    std::string item;\n    while (std::getline(ss, item,\
    \ ','))\n        words.push_back(item);\n    return words;", "    std::vector<std::string>\
    \ result;\n    std::stringstream ss;\n    ss << s;\n    std::string item;\n  \
    \  while (std::getline(ss, item, ',')) {\n        result.push_back(item);\n  \
    \  }\n    return result;", "  std::string word = \"\";\n  std::vector<std::string>\
    \ words;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == ',' || s[i]\
    \ == ' ') {\n      std::cout << word << std::endl;\n      words.push_back(word);\n\
    \      word = \"\";\n    } else {\n      word += s[i];\n    }\n  }\n  std::cout\
    \ << word << std::endl;\n  words.push_back(word);\n  return words;", "    std::istringstream\
    \ ss(s);\n    std::vector<std::string> words;\n    std::string item;\n    while\
    \ (std::getline(ss, item, ','))\n        words.push_back(item);\n    return words;",
  "    std::vector<std::string> words;\n    std::string word = \"\";\n    std::string\
    \ delimiter = \",\";\n    std::size_t found = s.find(delimiter);\n    while (found\
    \ != std::string::npos) {\n        word = s.substr(0, found);\n        words.push_back(word);\n\
    \        s = s.substr(found + delimiter.length());\n        found = s.find(delimiter);\n\
    \    }\n    words.push_back(s);\n    return words;", "    std::string words[100];\
    \ // create an array to hold the words\n    // Use a std::vector to hold the words\
    \ and then use the constructor above to split the string\n    return std::vector<\
    \ std::string > ( std::begin (words), std::end (words));", "    std::vector<std::string>\
    \ words;\n    for (char &c: s)\n        if (c == ',' || c == ' ')\n          \
    \  words.push_back(std::to_string(c));\n    return words;", "    std::vector<std::string>\
    \ result;\n    split(s, ',', result);\n    return result;", "  std::istringstream\
    \ iss(s);\n  std::string word;\n  std::vector<std::string> words;\n  while (std::getline(iss,\
    \ word, ' ,')) {\n    words.push_back(word);\n  }\n  return words;", "    std::vector<std::string>\
    \ result;\n    std::string tmp;\n    for (auto &&word : s) {\n        if (word\
    \ == ' ') {\n            tmp = tmp + word;\n        }\n        else if (word ==\
    \ ',') {\n            result.push_back(tmp);\n            tmp = word;\n      \
    \  }\n        else {\n            tmp = word;\n        }\n    }\n    if (tmp !=\
    \ \"\") {\n        result.push_back(tmp);\n    }\n    return result;", "    std::vector<std::string>\
    \ words;\n    std::string token;\n    std::istringstream iss(s);\n    while (std::getline(iss,\
    \ token, ' ,')) \n    {\n        words.push_back(token);\n    }\n    return words;",
  "  std::vector<std::string> result;\n  std::istringstream iss(s);\n  std::string\
    \ item;\n  while (std::getline(iss, item, ',')) {\n    result.push_back(item);\n\
    \  }\n  return result;", "    std::vector<std::string> words;\n    std::string\
    \ word;\n\n    std::istringstream sstream(s);\n\n    while (sstream >> word) {\n\
    \        words.push_back(word);\n    }\n\n    return words;", "    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    for (char &c: s) {\n        if (!isspace(c))\
    \ {\n            word += c;\n        } else {\n            words.push_back(word);\n\
    \            word = \"\";\n        }\n    }\n    words.push_back(word);\n    return\
    \ words;", "    // Write your function here\n    std::vector<std::string> result;\n\
    \    std::string word;\n    int i = 0; // index of current word\n    while (i\
    \ < s.size()) {\n        word = s.substr(i, 1);\n        if (!word.empty()){\n\
    \            result.push_back(word);\n        }\n        i++;\n    }\n    return\
    \ result;", "  std::vector<std::string> tokens;\n  split(s, tokens, ' ');\n  return\
    \ tokens;", "  // Split input s into words separated by space or comma characters.\n\
    \  std::vector<std::string> words;\n  size_t pos = 0;\n  // Check for empty input.\n\
    \  if (s.empty()) {\n    return words;\n  }\n\n  // Split s into a vector of strings\
    \ by space.\n  while (pos < s.size()) {\n    // Get next word.\n    std::string\
    \ word = s.substr(pos, s.find(\" \", pos)); // note the space after \" \", to\
    \ split the string by comma\n    words.append(word);\n    // Move position to\
    \ next word.\n    pos = s.find(\" \", pos + word.length()); // note the space\
    \ after \" \", to split the string by comma\n  }\n  return words;", "    std::vector<std::string>\
    \ words;\n    std::string delimiter = \",\";\n    std::string::size_type pos =\
    \ 0;\n    std::string::size_type lastPos = 0;\n    std::string::size_type lastLastPos\
    \ = 0;\n    while ((pos = s.find(delimiter, lastPos)) != std::string::npos) {\n\
    \        lastLastPos = lastPos;\n        lastPos = pos + 1;\n    }\n    if (lastPos\
    \ != s.size()) {\n        lastLastPos = lastPos;\n        lastPos = s.size();\n\
    \    }\n    while ((pos = s.find_first_not_of(\" ,.-\", lastPos)) != std::string::npos)\
    \ {\n        words.push_back(s.substr(lastLastPos, pos - lastLastPos));\n    \
    \    lastLastPos = lastPos;\n        lastPos = pos + 1;\n    }\n    if (lastLastPos\
    \ != s.size())\n        words.push_back(s.substr(lastLastPos));\n    return words;",
  "  std::vector<std::string> words;\n  size_t pos = 0;\n  while (pos < s.size())\
    \ {\n    pos = s.find_first_of(\" ,\\t\\n\", pos);\n    if (pos != std::string::npos)\
    \ {\n      words.push_back(s.substr(pos, s.size() - pos));\n    }\n  }\n  return\
    \ words;", "  std::vector<std::string> words;\n  auto words_vec = split(s);\n\
    \  for (auto &v : words_vec) {\n    words.emplace_back(v);\n  }\n  return words;",
  '    // your code goes here', '  // TODO: Write your implementation here.', "  \
    \  std::vector<std::string> words;\n    std::stringstream ss(s);\n    std::string\
    \ word;\n    while (std::getline(ss, word, ',') || std::getline(ss, word)) {\n\
    \        words.push_back(word);\n    }\n    return words;", "  std::istringstream\
    \ stream;\n  stream << s;\n  std::string token;\n  std::vector<std::string> words;\n\
    \  while (std::getline(stream, token, ' ')) {\n    words.push_back(token);\n \
    \ }\n  return words;", "    auto words_arr = new std::vector<std::string>();\n\
    \    // Write your code here", "    // Split string into words separated by commas\
    \ or spaces.\n    std::vector<std::string> words;\n    std::stringstream ss(s);\n\
    \    std::string word;\n    while (std::getline(ss, word, ',')) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    std::string\
    \ temp;\n    while (std::getline(std::cin, temp)) {\n        words.push_back(temp);\n\
    \    }\n    return words;", // code here, "    // Split string into words\n  \
    \  std::vector<std::string> words;\n    std::stringstream ss;\n    ss << s;\n\
    \    std::string item;\n    while (std::getline(ss, item, ',')) {\n        words.push_back(item);\n\
    \    }\n    return words;", "    assert(!s.empty());\n    std::vector<std::string>\
    \ words;\n    for (auto c : s) {\n        if (isspace(c)) continue;\n        words.push_back(c);\n\
    \    }\n    return words;", "    std::vector<std::string> result;\n    int start\
    \ = 0;\n    for(int i=0;i<s.length();i++){\n        if(s[i] == ',' || s[i] ==\
    \ ' '){\n            result.push_back(s.substr(start, i - start));\n         \
    \   start = i+1;\n        }\n    }\n    result.push_back(s.substr(start));\n \
    \   return result;", "    // Write your code here\n    return std::vector<std::string>();",
  "  std::vector<std::string> arr;\n  if (s.size() > 0) arr = std::ssplit(s, \",\"\
    );\n  return arr;", "  std::vector<std::string> res;\n  std::string temp = \"\"\
    ;\n  for (unsigned int i = 0; i < s.size(); i++) {\n    if (s[i] == ',') {\n \
    \     res.push_back(temp);\n      temp = \"\";\n    } else if (s[i] == ' ') {\n\
    \      res.push_back(temp);\n      temp = \"\";\n    } else {\n      temp += s[i];\n\
    \    }\n  }\n  res.push_back(temp);\n  return res;", "    // Split s by commas\
    \ and spaces.\n    // You can look on Stackoverflow for how to do that.", "  \
    \  std::istringstream stream(s);\n    std::string word;\n    std::vector<std::string>\
    \ words;\n    while (std::getline(stream, word, ',') || std::getline(stream, word,\
    \ ' ')) {\n        words.push_back(word);\n    }\n    return words;", "    //\
    \ Split string into words using space as a delimiter\n    std::vector<std::string>\
    \ results;\n    std::string word;\n    for (size_t i = 0; i < s.size(); i++) {\n\
    \        if (s[i] != ' ') {\n            word = s[i];\n            results.push_back(word);\n\
    \        } else {\n            results.push_back(\"\");\n        }\n    }\n  \
    \  return results;", "    std::vector<std::string> res;\n    std::vector<std::string>\
    \ tokens;\n    std::stringstream iss;\n    iss.str(s);\n    std::string token;\n\
    \    while (std::getline(iss, token, ',')) {\n        tokens.push_back(token);\n\
    \    }\n    for(auto i : tokens)\n        res.push_back(i);\n    return res;",
  "  std::vector<std::string> res;\n  char *str = strtok (s.c_str(), \",\");\n  while\
    \ (str != NULL) {\n    res.push_back(str);\n    str = strtok(NULL, \",\");\n \
    \ }\n  return res;", "    std::istringstream iss(s);\n    std::string word;\n\
    \    std::vector<std::string> word_vec;\n\n    while (std::getline(iss, word,\
    \ ',')) {\n        word_vec.push_back(word);\n    }\n    return word_vec;", " \
    \ std::vector<std::string> result;\n  // TODO: write your code in here\n  return\
    \ result;", "   //Split your string based on space or commas\n   //return an array\
    \ of words", "    std::vector<std::string> result;\n    std::istringstream is(s);\n\
    \    std::string word;\n    while (std::getline(is, word, ',')) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    //Your code here\n    //split string into words\
    \ by ','\n    std::string delimiter = \",\";\n    std::istringstream iss(s);\n\
    \    std::vector<std::string> tokens;\n    std::string word;\n    while (std::getline(iss,\
    \ word, delimiter)) {\n        tokens.push_back(word);\n    }\n    return tokens;",
  "  std::vector<std::string> result;\n  auto it = s.begin();\n  while (it != s.end())\
    \ {\n    std::string tmp = *it++;\n    if (tmp == ',' || tmp == ' ') result.push_back(tmp);\n\
    \  }\n  return result;", "  // split string using space as delimiter\n  std::vector<std::string>\
    \ strs;\n  std::string word = \" \";\n  std::string rest = \"\";\n  size_t pos\
    \ = 0;\n  // copy string into vector\n  while (pos < s.size()) {\n    if (s[pos]\
    \ == word) {\n      strs.push_back(rest);\n      word = \" \";\n      rest = \"\
    \";\n    } else {\n      rest += s[pos];\n    }\n    pos++;\n  }\n  if (word !=\
    \ \" \") {\n    strs.push_back(rest);\n  }\n  return strs;", "  std::vector<std::string>\
    \ words;\n  int i = 0;\n  int j = 0, k = 0;\n  while (i <= s.size() && j >= 0)\
    \ {\n    if (s[i] != ',' && s[i] != ' ' && s[i + 1] != ',' && s[i + 1] != ' ')\
    \ {\n      words[k] = s.substr(i, j - i);\n      i = j + 1;\n      j = i;\n  \
    \    k++;\n    }\n    else {\n      i = i + 2;\n      j = j + 2;\n    }\n  }\n\
    \  return words;", "    std::vector<std::string> ans;\n    char temp[2000];\n\
    \    char *p;\n    char *q;\n    char *p2;\n    // Get rid of the spaces.\n  \
    \  std::replace(s.begin(), s.end(), ' ', '\\0');\n    // Iterate through every\
    \ character.\n    for (q = s.c_str(); *q; q++) {\n        // If it's not a space,\
    \ append it to the string.\n        if (!isspace(*q)) {\n            ans.push_back(q);\n\
    \        }\n        // If it's a space, find the next space.\n        if (isspace(*q))\
    \ {\n            p = &ans.back()[ans.size() - 1];\n            while (isspace(*p))\
    \ {\n                --p;\n            }\n            // Set p2 to the next non-space.\n\
    \            p2 = p;\n            while (!isspace(*p2)) {\n                ++p2;\n\
    \            }\n            // Copy the string from p to p2.\n            strcpy(temp,\
    \ p);\n            strcpy(p, q);\n            strcpy(p2, temp);\n        }\n \
    \   }\n    return ans;", "    std::vector<std::string> result;\n    auto p = s.find_first_of(\"\
    \ ,.;\");\n    auto n = s.find_first_not_of(\" ,.;\");\n    while (p!= std::string::npos\
    \ && n!= std::string::npos) {\n        result.push_back(s.substr(p, n-p)); //s.substr(p,\
    \ n-p);\n        p = s.find_first_of(\" ,.;\", n+1);\n        n = s.find_first_not_of(\"\
    \ ,.;\", p+1);\n    }\n    return result;", '  // Your code goes here', '    //
    your code goes here', "  //your code goes here\n  std::vector<std::string> words;\n\
    \  std::string word;\n  for (int i = 0; i < s.length(); i++) {\n    if (isspace(s.at(i)))\
    \ {\n      word = words + \",\";\n    } else {\n      word = words + s.at(i);\n\
    \    }\n  }\n  words.push_back(word);\n  return words;", "    std::string words[];\n\
    \    int i = 0; // Index of string that point to the current character\n    int\
    \ j = 0; // Index of string that point to the last character\n    int n = 0; //\
    \ Index of string that point to the last word\n    for(auto &c : s) {\n      \
    \  if(c == ',' || c == ' ') {\n            words[n] = s.substr(i, j - i);\n  \
    \          i = j + 1;\n            j = 0;\n            n++;\n        }\n     \
    \   else {\n            j = i;\n            i = j + 1;\n        }\n    }\n   \
    \ words[n] = s.substr(i, j - i);\n    return words;", "  std::istringstream iss(s);\n\
    \  std::vector<std::string> v;\n  std::string w;\n  while (std::getline(iss, w,\
    \ ',')) {\n    v.push_back(w);\n  }\n  return v;", "    std::vector<std::string>\
    \ words;\n    std::string word;\n    std::stringstream ss(s);\n    while (std::getline(ss,\
    \ word, ',')) {\n        words.push_back(word);\n    }\n    return words;", " \
    \   std::vector<std::string> v;\n    for(int i = 0; i < s.length(); i++) {\n \
    \       v.push_back(s.substr(i, i + 1));\n    }\n    return v;"]
stop_tokens:
- "\n}"
