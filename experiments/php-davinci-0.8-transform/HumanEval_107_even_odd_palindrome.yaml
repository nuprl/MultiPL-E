name: HumanEval_107_even_odd_palindrome
language: php
prompt: "<?php\n// Given a positive integer n, return a tuple that has the number\
  \ of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
  // Example 1:\n// >>> even_odd_palindrome(3)\n// array(1, 2)\n// Explanation:\n\
  // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\
  // Example 2:\n// >>> even_odd_palindrome(12)\n// array(4, 6)\n// Explanation:\n\
  // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,\
  \ and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned tuple has\
  \ the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome($n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return even_odd_palindrome(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(123) !== array(8, 13)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(12) !== array(4, 6)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(3) !== array(1, 2)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(63) !== array(6, 8)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(25) !== array(5, 6)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(19) !== array(4, 6)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(4, 5)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(0, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: []
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
