name: HumanEval_58_common
language: php
prompt: "<?php\n// Return sorted unique common elements for two lists.\nfunction common($l1,\
  \ $l2) {\n"
tests: "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
  \ 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
  \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n\
    \    return $l1;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1,\
    \ $l2);\n  return array_keys($common);\n}\n", "  $l1 = array_unique($l1);\n  $l2\
    \ = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$l1 = array_intersect_key($l1,\
    \ $l2);\n\treturn array_keys($l1);\n}\n", "  $l1 = array_unique($l1);\n  $l2 =\
    \ array_unique($l2);\n  return array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1, $l2);\n  return\
    \ array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1,\
    \ $l2);\n    $common = array_flip($common);\n    sort($common);\n    return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l = array_intersect($l1,\
    \ $l2);\n  sort($l);\n  return $l;\n}\n", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    return array_intersect($l1, $l2);\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  $common = array_flip($common);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    return\
    \ array_keys($l1);\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  return array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return array_intersect($l1,\
    \ $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n \
    \   $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
