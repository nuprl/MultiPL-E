name: HumanEval_58_common
language: php
prompt: "<?php\n// Return sorted unique common elements for two lists.\nfunction common($l1,\
  \ $l2) {\n"
tests: "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
  \ 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
  \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $common =\
    \ array_intersect($l1, $l2);\n  sort($common);\n  return $common;\n}\n", "   \
    \ $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  return array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 =\
    \ array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  return array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    $common = array_flip($common);\n\
    \    sort($common);\n    return $common;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\n", "\t$l1 = array_unique($l1);\n\t\
    $l2 = array_unique($l2);\n\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\
    \t$common = array_intersect_key($l1, $l2);\n\t$common = array_flip($common);\n\
    \tsort($common);\n\treturn $common;\n}\n", "    $l1 = array_unique($l1);\n   \
    \ $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    $common = array_flip($common);\n\
    \    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = array();\n    foreach ($l1 as $e1)\
    \ {\n        foreach ($l2 as $e2) {\n            if ($e1 == $e2) {\n         \
    \       $result[] = $e1;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\treturn array_keys(array_intersect_key($l1,\
    \ $l2));\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_count = count($l1);\n    $l2_count = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $result = array();\n    while ($i < $l1_count &&\
    \ $j < $l2_count) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n   \
    \     } elseif ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n  \
    \          $result[] = $l1[$i];\n            $i++;\n            $j++;\n      \
    \  }\n    }\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $l1 = array_intersect_key($l1,\
    \ $l2);\n  $l1 = array_flip($l1);\n  sort($l1);\n  return $l1;\n}\n", "  $l1 =\
    \ array_unique($l1);\n  $l2 = array_unique($l2);\n  $common = array_intersect($l1,\
    \ $l2);\n  sort($common);\n  return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    return array_intersect($l1, $l2);\n}\n", " \
    \ $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $common = array_intersect($l1,\
    \ $l2);\n  sort($common);\n  return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_values($l1);\n\
    \  $l2 = array_values($l2);\n  $l1_count = count($l1);\n  $l2_count = count($l2);\n\
    \  $i = 0;\n  $j = 0;\n  $common = array();\n  while ($i < $l1_count && $j < $l2_count)\
    \ {\n    if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else if ($l1[$i] > $l2[$j])\
    \ {\n      $j++;\n    } else {\n      $common[] = $l1[$i];\n      $i++;\n    \
    \  $j++;\n    }\n  }\n  return $common;\n}\n", "  $l1 = array_unique($l1);\n \
    \ $l2 = array_unique($l2);\n  $l1 = array_values($l1);\n  $l2 = array_values($l2);\n\
    \  $l1_count = count($l1);\n  $l2_count = count($l2);\n  $i = 0;\n  $j = 0;\n\
    \  $common = array();\n  while ($i < $l1_count && $j < $l2_count) {\n    if ($l1[$i]\
    \ < $l2[$j]) {\n      $i++;\n    } else if ($l1[$i] > $l2[$j]) {\n      $j++;\n\
    \    } else {\n      $common[] = $l1[$i];\n      $i++;\n      $j++;\n    }\n \
    \ }\n  return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i1 = 0;\n\
    \    $i2 = 0;\n    $result = array();\n    while ($i1 < count($l1) && $i2 < count($l2))\
    \ {\n        if ($l1[$i1] == $l2[$i2]) {\n            $result[] = $l1[$i1];\n\
    \            $i1++;\n            $i2++;\n        } else if ($l1[$i1] < $l2[$i2])\
    \ {\n            $i1++;\n        } else {\n            $i2++;\n        }\n   \
    \ }\n    return $result;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $common = array_intersect($l1, $l2);\n  sort($common);\n  return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $common = array();\n  foreach ($l1 as $e) {\n \
    \   if (in_array($e, $l2)) {\n      $common[] = $e;\n    }\n  }\n  sort($common);\n\
    \  return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1,\
    \ $l2);\n    return array_keys($common);\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  return array_values(array_intersect($l1, $l2));\n\
    }\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\t\
    sort($l2);\n\t$i1 = 0;\n\t$i2 = 0;\n\t$l = array();\n\twhile ($i1 < count($l1)\
    \ && $i2 < count($l2)) {\n\t\tif ($l1[$i1] == $l2[$i2]) {\n\t\t\t$l[] = $l1[$i1];\n\
    \t\t\t$i1++;\n\t\t\t$i2++;\n\t\t} else if ($l1[$i1] < $l2[$i2]) {\n\t\t\t$i1++;\n\
    \t\t} else {\n\t\t\t$i2++;\n\t\t}\n\t}\n\treturn $l;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\t$result = array();\n\tforeach ($l1 as $e) {\n\t\t\
    if (in_array($e, $l2)) {\n\t\t\t$result[] = $e;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $common = array_intersect($l1,\
    \ $l2);\n  sort($common);\n  return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1_count = count($l1);\n    $l2_count = count($l2);\n    $i = 0;\n    $j\
    \ = 0;\n    $common = array();\n    while ($i < $l1_count && $j < $l2_count) {\n\
    \        if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i]\
    \ > $l2[$j]) {\n            $j++;\n        } else {\n            $common[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_count = count($l1);\n    $l2_count = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $common = array();\n    while ($i < $l1_count &&\
    \ $j < $l2_count) {\n        if ($l1[$i] == $l2[$j]) {\n            $common[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $common;\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 =\
    \ array_unique($l2);\n\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$l1\
    \ = array_intersect_key($l1, $l2);\n\t$l1 = array_flip($l1);\n\tsort($l1);\n\t\
    return $l1;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n \
    \ $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1,\
    \ $l2);\n  return array_keys($common);\n}\n", "  $l1 = array_unique($l1);\n  $l2\
    \ = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $common = array_intersect($l1, $l2);\n  sort($common);\n  return $common;\n\
    }\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_flip($l1);\n\
    \t$l2 = array_flip($l2);\n\t$common = array_intersect_key($l1, $l2);\n\treturn\
    \ array_keys($common);\n}\n", "    $c = array_intersect($l1, $l2);\n    sort($c);\n\
    \    return array_unique($c);\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  return array_keys(array_intersect_key($l1,\
    \ $l2));\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return\
    \ array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1,\
    \ $l2);\n    $common = array_flip($common);\n    sort($common);\n    return $common;\n\
    }\n", "    $result = array();\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n", "  $l1 = array_unique($l1);\n  $l2 =\
    \ array_unique($l2);\n  $l1 = array_values($l1);\n  $l2 = array_values($l2);\n\
    \  $l = array();\n  $i = 0;\n  $j = 0;\n  while ($i < count($l1) && $j < count($l2))\
    \ {\n    if ($l1[$i] == $l2[$j]) {\n      $l[] = $l1[$i];\n      $i++;\n     \
    \ $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else {\n    \
    \  $j++;\n    }\n  }\n  return $l;\n}\n", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n\
    \    return $l1;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1, $l2);\n  $common\
    \ = array_flip($common);\n  sort($common);\n  return $common;\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "  $l = array_intersect($l1,\
    \ $l2);\n  sort($l);\n  return array_unique($l);\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $l1 = array_intersect_key($l1, $l2);\n  $l1 = array_flip($l1);\n\
    \  sort($l1);\n  return $l1;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1,\
    \ $l2);\n  return array_keys($common);\n}\n", "  $l1 = array_unique($l1);\n  $l2\
    \ = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_count = count($l1);\n\
    \    $l2_count = count($l2);\n    $l1_index = 0;\n    $l2_index = 0;\n    $common\
    \ = array();\n    while ($l1_index < $l1_count && $l2_index < $l2_count) {\n \
    \       if ($l1[$l1_index] < $l2[$l2_index]) {\n            $l1_index++;\n   \
    \     } else if ($l1[$l1_index] > $l2[$l2_index]) {\n            $l2_index++;\n\
    \        } else {\n            $common[] = $l1[$l1_index];\n            $l1_index++;\n\
    \            $l2_index++;\n        }\n    }\n    return $common;\n}\n", "\t$l1\
    \ = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_flip($l1);\n\
    \t$l2 = array_flip($l2);\n\t$common = array_intersect_key($l1, $l2);\n\t$common\
    \ = array_flip($common);\n\tsort($common);\n\treturn $common;\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $c = array();\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $c[] = $l1[$i];\n            }\n        }\n \
    \   }\n    sort($c);\n    return $c;\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$common = array_intersect_key($l1,\
    \ $l2);\n\treturn array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $common = array_intersect($l1, $l2);\n  sort($common);\n  return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1, $l2);\n  return\
    \ array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1,\
    \ $l2);\n    return array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i1 = 0;\n\
    \    $i2 = 0;\n    $result = array();\n    while ($i1 < count($l1) && $i2 < count($l2))\
    \ {\n        if ($l1[$i1] == $l2[$i2]) {\n            $result[] = $l1[$i1];\n\
    \            $i1++;\n            $i2++;\n        } else if ($l1[$i1] < $l2[$i2])\
    \ {\n            $i1++;\n        } else {\n            $i2++;\n        }\n   \
    \ }\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1,\
    \ $l2);\n    return array_keys($common);\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n\
    \  $common = array_intersect_key($l1, $l2);\n  return array_keys($common);\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = array();\n    foreach ($l1 as $e1)\
    \ {\n        foreach ($l2 as $e2) {\n            if ($e1 == $e2) {\n         \
    \       $result[] = $e1;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  return array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1,\
    \ $l2);\n  $common = array_flip($common);\n  sort($common);\n  return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  return array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 =\
    \ array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1_count = count($l1);\n    $l2_count = count($l2);\n    $i = 0;\n    $j\
    \ = 0;\n    $result = array();\n    while ($i < $l1_count && $j < $l2_count) {\n\
    \        if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } elseif ($l1[$i]\
    \ > $l2[$j]) {\n            $j++;\n        } else {\n            $result[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return $result;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $i1 = 0;\n    $i2 = 0;\n    $result = array();\n    while\
    \ ($i1 < count($l1) && $i2 < count($l2)) {\n        if ($l1[$i1] == $l2[$i2])\
    \ {\n            $result[] = $l1[$i1];\n            $i1++;\n            $i2++;\n\
    \        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else\
    \ {\n            $i2++;\n        }\n    }\n    return $result;\n}\n", "  $l1 =\
    \ array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_values($l1);\n\
    \  $l2 = array_values($l2);\n  $l1_count = count($l1);\n  $l2_count = count($l2);\n\
    \  $i = 0;\n  $j = 0;\n  $common = array();\n  while ($i < $l1_count && $j < $l2_count)\
    \ {\n    if ($l1[$i] == $l2[$j]) {\n      $common[] = $l1[$i];\n      $i++;\n\
    \      $j++;\n    } else if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else {\n\
    \      $j++;\n    }\n  }\n  return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $result = array();\n\
    \    foreach ($l1 as $e1) {\n        foreach ($l2 as $e2) {\n            if ($e1\
    \ == $e2) {\n                $result[] = $e1;\n            }\n        }\n    }\n\
    \    return array_unique($result);\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 =\
    \ array_unique($l2);\n\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\t$common\
    \ = array_intersect_key($l1, $l2);\n\t$common = array_flip($common);\n\tsort($common);\n\
    \treturn $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_values($l1);\n  $l2 = array_values($l2);\n  $l1_count = count($l1);\n\
    \  $l2_count = count($l2);\n  $i = 0;\n  $j = 0;\n  $common = array();\n  while\
    \ ($i < $l1_count && $j < $l2_count) {\n    if ($l1[$i] < $l2[$j]) {\n      $i++;\n\
    \    } else if ($l1[$i] > $l2[$j]) {\n      $j++;\n    } else {\n      $common[]\
    \ = $l1[$i];\n      $i++;\n      $j++;\n    }\n  }\n  return $common;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  return array_keys($common);\n}\n", "    $result = array();\n    $l1_unique\
    \ = array_unique($l1);\n    $l2_unique = array_unique($l2);\n    foreach ($l1_unique\
    \ as $e) {\n        if (in_array($e, $l2_unique)) {\n            $result[] = $e;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n\
    \  $common = array_intersect_key($l1, $l2);\n  return array_keys($common);\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_count = count($l1);\n    $l2_count = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $common = array();\n    while ($i < $l1_count &&\
    \ $j < $l2_count) {\n        if ($l1[$i] == $l2[$j]) {\n            $common[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $common;\n}\n", "    return array_values(array_unique(array_intersect($l1,\
    \ $l2)));\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "    $common = array_intersect($l1, $l2);\n    sort($common);\n    return\
    \ array_unique($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1,\
    \ $l2);\n    $common = array_flip($common);\n    sort($common);\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    return array_keys(array_intersect_key($l1, $l2));\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$c = array_intersect($l1, $l2);\n\tsort($c);\n\treturn $c;\n}\n", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\t$l1 = array_flip($l1);\n\t$l2 = array_flip($l2);\n\
    \t$common = array_intersect_key($l1, $l2);\n\t$common = array_flip($common);\n\
    \tsort($common);\n\treturn $common;\n}\n", "    $l1 = array_unique($l1);\n   \
    \ $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n\
    \    return $l1;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  return array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return array_intersect($l1,\
    \ $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n \
    \   $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return array_intersect($l1,\
    \ $l2);\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return\
    \ array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i1 = 0;\n    $i2 = 0;\n    $result = array();\n\
    \    while ($i1 < count($l1) && $i2 < count($l2)) {\n        if ($l1[$i1] == $l2[$i2])\
    \ {\n            $result[] = $l1[$i1];\n            $i1++;\n            $i2++;\n\
    \        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else\
    \ {\n            $i2++;\n        }\n    }\n    return $result;\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    return array_intersect($l1,\
    \ $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n \
    \   sort($l1);\n    sort($l2);\n    $i1 = 0;\n    $i2 = 0;\n    $result = array();\n\
    \    while ($i1 < count($l1) && $i2 < count($l2)) {\n        if ($l1[$i1] == $l2[$i2])\
    \ {\n            $result[] = $l1[$i1];\n            $i1++;\n            $i2++;\n\
    \        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else\
    \ {\n            $i2++;\n        }\n    }\n    return $result;\n}\n", "    return\
    \ array_intersect($l1, $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\n", "  $l1 = array_unique($l1);\n  $l2\
    \ = array_unique($l2);\n  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n \
    \ $common = array_intersect_key($l1, $l2);\n  return array_keys($common);\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  $common = array_flip($common);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_count = count($l1);\n    $l2_count = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $result = array();\n    while ($i < $l1_count &&\
    \ $j < $l2_count) {\n        if ($l1[$i] < $l2[$j]) {\n            $i++;\n   \
    \     } elseif ($l1[$i] > $l2[$j]) {\n            $j++;\n        } else {\n  \
    \          $result[] = $l1[$i];\n            $i++;\n            $j++;\n      \
    \  }\n    }\n    return $result;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  return array_keys(array_intersect_key($l1,\
    \ $l2));\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  return array_intersect($l1, $l2);\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    return array_intersect($l1, $l2);\n}\n", "\t\
    $l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_intersect($l1,\
    \ $l2);\n\tsort($l1);\n\treturn $l1;\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i1 = 0;\n  \
    \  $i2 = 0;\n    $result = array();\n    while ($i1 < count($l1) && $i2 < count($l2))\
    \ {\n        if ($l1[$i1] == $l2[$i2]) {\n            $result[] = $l1[$i1];\n\
    \            $i1++;\n            $i2++;\n        } else if ($l1[$i1] < $l2[$i2])\
    \ {\n            $i1++;\n        } else {\n            $i2++;\n        }\n   \
    \ }\n    return $result;\n}\n", "    $a = array_unique(array_merge($l1, $l2));\n\
    \    sort($a);\n    return $a;\n}\n", "    $l1 = array_unique($l1);\n    $l2 =\
    \ array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_values($l1);\n\
    \  $l2 = array_values($l2);\n  $common = array();\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < count($l1) && $j < count($l2)) {\n    if ($l1[$i] == $l2[$j]) {\n    \
    \  $common[] = $l1[$i];\n      $i++;\n      $j++;\n    } else if ($l1[$i] < $l2[$j])\
    \ {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $common;\n}\n",
  "    $result = array();\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $e) {\n        if (in_array($e, $l2)) {\n            $result[]\
    \ = $e;\n        }\n    }\n    sort($result);\n    return $result;\n}\n", "  \
    \  $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $result = [];\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $result[] = $l1[$i];\n            }\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1,\
    \ $l2);\n  $common = array_flip($common);\n  sort($common);\n  return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n\
    \  $common = array_intersect_key($l1, $l2);\n  return array_keys($common);\n}\n",
  "\t$common = array_intersect($l1, $l2);\n\tsort($common);\n\treturn array_unique($common);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \t$i1 = 0;\n\t$i2 = 0;\n\t$l = array();\n\twhile ($i1 < count($l1) && $i2 < count($l2))\
    \ {\n\t\tif ($l1[$i1] == $l2[$i2]) {\n\t\t\t$l[] = $l1[$i1];\n\t\t\t$i1++;\n\t\
    \t\t$i2++;\n\t\t} elseif ($l1[$i1] < $l2[$i2]) {\n\t\t\t$i1++;\n\t\t} else {\n\
    \t\t\t$i2++;\n\t\t}\n\t}\n\treturn $l;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", " \
    \ $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return array_intersect($l1,\
    \ $l2);\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1\
    \ = array_flip($l1);\n  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1,\
    \ $l2);\n  $common = array_flip($common);\n  sort($common);\n  return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $common = array_intersect_key($l1, $l2);\n  $common\
    \ = array_flip($common);\n  sort($common);\n  return $common;\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $common = array();\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            $common[] = $l1[$i];\n            $i++;\n            $j++;\n\
    \        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $common = array();\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $common[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    return array_intersect($l1, $l2);\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  return array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 =\
    \ array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    return array_keys(array_intersect_key($l1, $l2));\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $c = array_intersect($l1, $l2);\n    sort($c);\n    return $c;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    return array_intersect($l1,\
    \ $l2);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n \
    \   $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l1_count = count($l1);\n\t$l2_count = count($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$common = array();\n\twhile ($i < $l1_count && $j < $l2_count)\
    \ {\n\t\tif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else if ($l1[$i] > $l2[$j])\
    \ {\n\t\t\t$j++;\n\t\t} else {\n\t\t\t$common[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $common;\n}\n", "    $l1 = array_unique($l1);\n  \
    \  $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l = array_intersect($l1,\
    \ $l2);\n  sort($l);\n  return $l;\n}\n", "  $l1 = array_unique($l1);\n  $l2 =\
    \ array_unique($l2);\n  $l1 = array_values($l1);\n  $l2 = array_values($l2);\n\
    \  $l = [];\n  $i = 0;\n  $j = 0;\n  while ($i < count($l1) && $j < count($l2))\
    \ {\n    if ($l1[$i] < $l2[$j]) {\n      $i++;\n    } else if ($l1[$i] > $l2[$j])\
    \ {\n      $j++;\n    } else {\n      $l[] = $l1[$i];\n      $i++;\n      $j++;\n\
    \    }\n  }\n  return $l;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  sort($l1);\n  sort($l2);\n  $l1 = array_values($l1);\n\
    \  $l2 = array_values($l2);\n  $i1 = 0;\n  $i2 = 0;\n  $l = array();\n  while\
    \ ($i1 < count($l1) && $i2 < count($l2)) {\n    if ($l1[$i1] == $l2[$i2]) {\n\
    \      $l[] = $l1[$i1];\n      $i1++;\n      $i2++;\n    } else if ($l1[$i1] <\
    \ $l2[$i2]) {\n      $i1++;\n    } else {\n      $i2++;\n    }\n  }\n  return\
    \ $l;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $common\
    \ = array_intersect($l1, $l2);\n  sort($common);\n  return $common;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "  $l1 = array_unique($l1);\n\
    \  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n  $l2 = array_flip($l2);\n\
    \  $common = array_intersect_key($l1, $l2);\n  return array_keys($common);\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    return array_intersect($l1,\
    \ $l2);\n}\n", "  $result = array();\n  foreach ($l1 as $e1) {\n    foreach ($l2\
    \ as $e2) {\n      if ($e1 == $e2) {\n        $result[] = $e1;\n      }\n    }\n\
    \  }\n  sort($result);\n  return array_unique($result);\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1_count = count($l1);\n    $l2_count = count($l2);\n    $i = 0;\n    $j\
    \ = 0;\n    $common = array();\n    while ($i < $l1_count && $j < $l2_count) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            $common[] = $l1[$i];\n       \
    \     $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n    \
    \        $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ $common;\n}\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t\
    sort($l1);\n\tsort($l2);\n\t$i1 = 0;\n\t$i2 = 0;\n\t$result = array();\n\twhile\
    \ ($i1 < count($l1) && $i2 < count($l2)) {\n\t\tif ($l1[$i1] == $l2[$i2]) {\n\t\
    \t\t$result[] = $l1[$i1];\n\t\t\t$i1++;\n\t\t\t$i2++;\n\t\t} else if ($l1[$i1]\
    \ < $l2[$i2]) {\n\t\t\t$i1++;\n\t\t} else {\n\t\t\t$i2++;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_count = count($l1);\n\
    \    $l2_count = count($l2);\n    $i = 0;\n    $j = 0;\n    $common = array();\n\
    \    while ($i < $l1_count && $j < $l2_count) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            $common[] = $l1[$i];\n            $i++;\n            $j++;\n\
    \        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i1 = 0;\n\
    \    $i2 = 0;\n    $l3 = array();\n    while ($i1 < count($l1) && $i2 < count($l2))\
    \ {\n        if ($l1[$i1] == $l2[$i2]) {\n            $l3[] = $l1[$i1];\n    \
    \        $i1++;\n            $i2++;\n        } else if ($l1[$i1] < $l2[$i2]) {\n\
    \            $i1++;\n        } else {\n            $i2++;\n        }\n    }\n\
    \    return $l3;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  return array_intersect($l1,\
    \ $l2);\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1\
    \ = array_flip($l1);\n  $l2 = array_flip($l2);\n  $l1 = array_intersect_key($l1,\
    \ $l2);\n  $l1 = array_flip($l1);\n  sort($l1);\n  return $l1;\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $c = array_intersect($l1, $l2);\n    sort($c);\n\
    \    return $c;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $l1 = array_intersect_key($l1, $l2);\n  $l1 = array_flip($l1);\n\
    \  sort($l1);\n  return $l1;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l = array_intersect_key($l1, $l2);\n    return\
    \ array_keys($l);\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i1 = 0;\n    $i2 = 0;\n    $result = array();\n\
    \    while ($i1 < count($l1) && $i2 < count($l2)) {\n        if ($l1[$i1] == $l2[$i2])\
    \ {\n            $result[] = $l1[$i1];\n            $i1++;\n            $i2++;\n\
    \        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else\
    \ {\n            $i2++;\n        }\n    }\n    return $result;\n}\n", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n\
    \    $l1_count = count($l1);\n    $l2_count = count($l2);\n    $i = $j = 0;\n\
    \    $common = array();\n    while ($i < $l1_count && $j < $l2_count) {\n    \
    \    if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else if ($l1[$i] >\
    \ $l2[$j]) {\n            $j++;\n        } else {\n            $common[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        }\n    }\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n  $l1 = array_flip($l1);\n\
    \  $l2 = array_flip($l2);\n  $l1 = array_intersect_key($l1, $l2);\n  $l1 = array_flip($l1);\n\
    \  sort($l1);\n  return $l1;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $common = array_intersect_key($l1, $l2);\n  \
    \  return array_keys($common);\n}\n", "    $l1 = array_unique($l1);\n    $l2 =\
    \ array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  return array_intersect($l1, $l2);\n}\n", "  $l1 = array_unique($l1);\n  $l2\
    \ = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $common = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = array_intersect($l1, $l2);\n    sort($common);\n    return $common;\n}\n",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common = array_intersect($l1,\
    \ $l2);\n    sort($common);\n    return $common;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $common = array_intersect_key($l1, $l2);\n    return array_keys($common);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $i1 = 0;\n    $i2 = 0;\n    $result = array();\n    while\
    \ ($i1 < count($l1) && $i2 < count($l2)) {\n        if ($l1[$i1] == $l2[$i2])\
    \ {\n            $result[] = $l1[$i1];\n            $i1++;\n            $i2++;\n\
    \        } else if ($l1[$i1] < $l2[$i2]) {\n            $i1++;\n        } else\
    \ {\n            $i2++;\n        }\n    }\n    return $result;\n}\n", "  $l1 =\
    \ array_unique($l1);\n  $l2 = array_unique($l2);\n  $result = array();\n  foreach\
    \ ($l1 as $e1) {\n    foreach ($l2 as $e2) {\n      if ($e1 == $e2) {\n      \
    \  $result[] = $e1;\n      }\n    }\n  }\n  sort($result);\n  return $result;\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = array();\n    foreach ($l1 as $e1) {\n        foreach ($l2 as $e2) {\n   \
    \         if ($e1 == $e2) {\n                $result[] = $e1;\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = array_intersect($l1, $l2);\n    sort($common);\n\
    \    return $common;\n}\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    return array_intersect($l1, $l2);\n}\n", "  $l1 = array_unique($l1);\n  $l2\
    \ = array_unique($l2);\n  $common = array_intersect($l1, $l2);\n  sort($common);\n\
    \  return $common;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
