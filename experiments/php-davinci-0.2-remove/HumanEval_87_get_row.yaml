name: HumanEval_87_get_row
language: php
prompt: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
  \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
  \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
  \ by rows in ascending order.\n// Also, sort coordinates of the row by columns in\
  \ descending order.\n// Examples:\nfunction get_row($lst, $x) {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $res = [];\n    foreach ($lst as $row => $row_lst) {\n        foreach\
    \ ($row_lst as $col => $val) {\n            if ($val == $x) {\n              \
    \  $res[] = [$row, $col];\n            }\n        }\n    }\n    usort($res, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst\
    \ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 1;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 9;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 8;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 7;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 6;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 4;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8", "    $result = [];\n    foreach ($lst\
    \ as $key => $value) {\n        if (in_array($x, $value)) {\n            $result[]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n \
    \   foreach ($lst as $key => $value) {\n        if (in_array($x, $value)) {\n\
    \            $result[] = $key;\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "  $res = [];\n  foreach ($lst as $i => $row) {\n    foreach\
    \ ($row as $j => $val) {\n      if ($val == $x) {\n        $res[] = [$i, $j];\n\
    \      }\n    }\n  }\n  return $res;\n}\n", "    $result = [];\n    foreach ($lst\
    \ as $i => $row) {\n        foreach ($row as $j => $col) {\n            if ($col\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $res = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $res[] = [$i, $j];\n            }\n\
    \        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $columns) {\n        foreach ($columns as $column => $value) {\n        \
    \    if ($value == $x) {\n                $result[] = [$row, $column];\n     \
    \       }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n \
    \   foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j =\
    \ 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n  \
    \              $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n      \
    \  foreach ($row as $j => $item) {\n            if ($item == $x) {\n         \
    \       $res[] = [$i, $j];\n            }\n        }\n    }\n    return $res;\n\
    }\n", "  $result = [];\n  foreach ($lst as $row => $columns) {\n    foreach ($columns\
    \ as $column => $value) {\n      if ($value == $x) {\n        $result[] = [$row,\
    \ $column];\n      }\n    }\n  }\n  return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "  $result\
    \ = [];\n  foreach ($lst as $i => $row) {\n    foreach ($row as $j => $val) {\n\
    \      if ($val == $x) {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n\
    \  return $result;\n}", "  $result = [];\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] ==\
    \ $x) {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  return $result;\n\
    }", "    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach\
    \ ($cols as $col => $value) {\n            if ($value == $x) {\n             \
    \   $result[] = [$row, $col];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5]];\nprint_r(get_row($lst, 3));", " \
    \   $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "  $result = [];\n  for ($i = 0; $i < count($lst); $i++) {\n\
    \    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x)\
    \ {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    $lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst, $x));",
  "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n\
    \        foreach ($columns as $column => $value) {\n            if ($value ==\
    \ $x) {\n                $result[] = [$row, $column];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n", "  $result = [];\n  foreach ($lst as $row\
    \ => $cols) {\n    foreach ($cols as $col => $val) {\n      if ($val == $x) {\n\
    \        $result[] = [$row, $col];\n      }\n    }\n  }\n  return $result;\n}\n",
  "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j\
    \ => $val) {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $res;\n}\n", "    $res = [];\n  \
    \  for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $res[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    return $res;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val)\
    \ {\n            if ($val == $x) {\n                $result[] = [$i, $j];\n  \
    \          }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $res;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $val) {\n            if ($val == $x) {\n \
    \               $res[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $res;\n}\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n  \
    \      if (in_array($x, $value)) {\n            $result[] = $key;\n        }\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $columns) {\n        foreach ($columns as $column => $value) {\n        \
    \    if ($value == $x) {\n                $result[] = [$row, $column];\n     \
    \       }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n \
    \   foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols\
    \ as $col => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $col];\n            }\n        }\n    }\n    return $result;\n}\n",
  "  $result = [];\n  foreach ($lst as $i => $row) {\n    foreach ($row as $j => $value)\
    \ {\n      if ($value == $x) {\n        $result[] = [$i, $j];\n      }\n    }\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        if (in_array($x, $value)) {\n            $result[] = $key;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n       \
    \     if ($v == $x) {\n                $result[] = [$key, $k];\n            }\n\
    \        }\n    }\n    return $result;\n}\n", "  $res = [];\n  for ($i = 0; $i\
    \ < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n   \
    \   if ($lst[$i][$j] == $x) {\n        $res[] = [$i, $j];\n      }\n    }\n  }\n\
    \  return $res;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n \
    \       foreach ($row as $j => $val) {\n            if ($val == $x) {\n      \
    \          $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $y => $row) {\n        foreach\
    \ ($row as $x2 => $value) {\n            if ($value == $x) {\n               \
    \ $result[] = [$y, $x2];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]];\n$x = 5;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ if (in_array($x, $value)) {\n            $result[] = $key;\n        }\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row => $columns)\
    \ {\n        foreach ($columns as $column => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $column];\n            }\n    \
    \    }\n    }\n    return $result;\n}\n", "    $res = [];\n    foreach ($lst as\
    \ $i => $row) {\n        foreach ($row as $j => $elem) {\n            if ($elem\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $row =>\
    \ $cols) {\n        foreach ($cols as $col => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $row => $columns) {\n        foreach ($columns as $column => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    return $result;\n}", "    $result = [];\n\
    \    foreach ($lst as $row => $row_lst) {\n        foreach ($row_lst as $col =>\
    \ $item) {\n            if ($item == $x) {\n                $result[] = [$row,\
    \ $col];\n            }\n        }\n    }\n    return $result;\n}\n", "  $res\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $res[] = [$i, $j];\n     \
    \ }\n    }\n  }\n  return $res;\n}\n", "    $res = [];\n    foreach ($lst as $i\
    \ => $row) {\n        foreach ($row as $j => $val) {\n            if ($val ==\
    \ $x) {\n                $res[] = [$i, $j];\n            }\n        }\n    }\n\
    \    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $row => $cols)\
    \ {\n        foreach ($cols as $col => $val) {\n            if ($val == $x) {\n\
    \                $result[] = [$row, $col];\n            }\n        }\n    }\n\
    \    return $result;\n}\n", "  $res = [];\n  foreach ($lst as $i => $row) {\n\
    \    foreach ($row as $j => $val) {\n      if ($val == $x) {\n        $res[] =\
    \ [$i, $j];\n      }\n    }\n  }\n  return $res;\n}\n", "    $result = [];\n \
    \   foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $res = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j\
    \ => $val) {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $res;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $col];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n\
    \            if ($val == $x) {\n                $res[] = [$i, $j];\n         \
    \   }\n        }\n    }\n    return $res;\n}\n", "  $result = [];\n  foreach ($lst\
    \ as $row => $columns) {\n    foreach ($columns as $column => $value) {\n    \
    \  if ($value == $x) {\n        $result[] = [$row, $column];\n      }\n    }\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    return $result;\n}", "    $result = [];\n    foreach ($lst as $y => $row)\
    \ {\n        foreach ($row as $z => $value) {\n            if ($value == $x) {\n\
    \                $result[] = [$y, $z];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "  $res = [];\n  for ($i = 0; $i < count($lst); $i++) {\n  \
    \  for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x) {\n\
    \        $res[] = [$i, $j];\n      }\n    }\n  }\n  return $res;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $col];\n            }\n        }\n    }\n    return $result;\n}\n", "    $res\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val)\
    \ {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n     \
    \       }\n        }\n    }\n    return $res;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "  $result = [];\n\
    \  foreach ($lst as $row => $cols) {\n    foreach ($cols as $col => $val) {\n\
    \      if ($val == $x) {\n        $result[] = [$row, $col];\n      }\n    }\n\
    \  }\n  return $result;\n}", "    $res = [];\n    foreach ($lst as $k => $v) {\n\
    \        $res[$k] = array_keys($v, $x);\n    }\n    return $res;\n}", "    $result\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n\
    \            if ($value == $x) {\n                $result[] = [$i, $j];\n    \
    \        }\n        }\n    }\n    return $result;\n}", "    $result = [];\n  \
    \  foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n\
    \            if ($value == $x) {\n                $result[] = [$i, $j];\n    \
    \        }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0;\
    \ $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n     \
    \           $res[] = [$i, $j];\n            }\n        }\n    }\n    return $res;\n\
    }", "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $res[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $res;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $val) {\n            if ($val == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    return $res;\n}", "    $res\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val)\
    \ {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n     \
    \       }\n        }\n    }\n    return $res;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $elem) {\n          \
    \  if ($elem == $x) {\n                $res[] = [$i, $j];\n            }\n   \
    \     }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n  \
    \  [7, 8, 9],\n    [10, 11, 12]\n];\n\nprint_r(get_row($lst, 1));\nprint_r(get_row($lst,\
    \ 2));\nprint_r(get_row($lst, 3));\nprint_r(get_row($lst, 4));\nprint_r(get_row($lst,\
    \ 5));\nprint_r(get_row($lst, 6));\nprint_r(get_row($lst, 7));\nprint_r(get_row($lst,\
    \ 8));\nprint_r(get_row($lst, 9));\nprint_r(get_row($lst, 10));\nprint_r(get_row($lst,\
    \ 11));\nprint_r(get_row($lst, 12));\nprint_r(get_row($lst, 13));\nprint_r(get_row($lst,\
    \ 14));\nprint_r(get_row($lst, 15));\nprint_r(get_row($lst, 16));\nprint_r(get_row($lst,\
    \ 17));\nprint_r(get_row($lst, 18));\nprint_r(get_row($lst, 19));\nprint_r(get_row($lst,\
    \ 20));\nprint_r(get_row($lst, 21));\nprint_r(get_row($lst, 22));\nprint_r(get_row($lst,\
    \ 23));\nprint_", "  $result = [];\n  for ($i = 0; $i < count($lst); $i++) {\n\
    \    for ($j = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x)\
    \ {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  return $result;\n}\n",
  "    $row = 0;\n    $col = 0;\n    $res = [];\n    foreach ($lst as $key => $value)\
    \ {\n        foreach ($value as $k => $v) {\n            if ($v == $x) {\n   \
    \             $res[] = [$row, $col];\n            }\n            $col++;\n   \
    \     }\n        $col = 0;\n        $row++;\n    }\n    return $res;\n}\n", " \
    \   $res = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j\
    \ => $val) {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $res;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $res = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols as\
    \ $col => $val) {\n            if ($val == $x) {\n                $res[] = [$row,\
    \ $col];\n            }\n        }\n    }\n    return $res;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value as $k\
    \ => $v) {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j =\
    \ 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n  \
    \              $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n\
    \        if (in_array($x, $value)) {\n            $result[] = [$key, array_search($x,\
    \ $value)];\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "  $result\
    \ = [];\n  foreach ($lst as $key => $value) {\n    if (in_array($x, $value)) {\n\
    \      $result[] = $key;\n    }\n  }\n  return $result;\n}\n", "  $res = [];\n\
    \  foreach ($lst as $i => $row) {\n    foreach ($row as $j => $val) {\n      if\
    \ ($val == $x) {\n        $res[] = [$i, $j];\n      }\n    }\n  }\n  return $res;\n\
    }\n", "  $result = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x) {\n      \
    \  $result[] = [$i, $j];\n      }\n    }\n  }\n  return $result;\n}\n", "    $res\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $el)\
    \ {\n            if ($el == $x) {\n                $res[] = [$i, $j];\n      \
    \      }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst\
    \ as $row => $columns) {\n        foreach ($columns as $column => $value) {\n\
    \            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n\
    \            if ($val == $x) {\n                $res[] = [$i, $j];\n         \
    \   }\n        }\n    }\n    return $res;\n}\n", "  $result = [];\n  for ($i =\
    \ 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++) {\n\
    \      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n   \
    \ }\n  }\n  return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $columns) {\n        foreach ($columns as $column => $value) {\n        \
    \    if ($value == $x) {\n                $result[] = [$row, $column];\n     \
    \       }\n        }\n    }\n    return $result;\n}\n", "  $result = [];\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n      if ($lst[$i][$j] == $x) {\n        $result[] = [$i, $j];\n      }\n\
    \    }\n  }\n  return $result;\n}", "    $result = [];\n    foreach ($lst as $row\
    \ => $cols) {\n        foreach ($cols as $col => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n\
    $x = 5;\nprint_r(get_row($lst, $x));", "  $res = [];\n  foreach ($lst as $row\
    \ => $columns) {\n    foreach ($columns as $column => $value) {\n      if ($value\
    \ == $x) {\n        $res[] = [$row, $column];\n      }\n    }\n  }\n  return $res;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n      \
    \  foreach ($row as $j => $val) {\n            if ($val == $x) {\n           \
    \     $res[] = [$i, $j];\n            }\n        }\n    }\n    return $res;\n\
    }\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n        if (in_array($x,\
    \ $value)) {\n            $result[] = $key;\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n       \
    \ for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] ==\
    \ $x) {\n                $result[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $columns) {\n        foreach ($columns as $column => $value) {\n        \
    \    if ($value == $x) {\n                $result[] = [$row, $column];\n     \
    \       }\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n           \
    \ if ($val == $x) {\n                $res[] = [$i, $j];\n            }\n     \
    \   }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n$lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5]];\n$x\
    \ = 3;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        if (in_array($x, $value)) {\n            $result[]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n           \
    \ if ($val == $x) {\n                $res[] = [$i, $j];\n            }\n     \
    \   }\n    }\n    return $res;\n}", "    $res = [];\n    foreach ($lst as $i =>\
    \ $row) {\n        foreach ($row as $j => $val) {\n            if ($val == $x)\
    \ {\n                $res[] = [$i, $j];\n            }\n        }\n    }\n   \
    \ usort($res, function ($a, $b) {\n        return $a[0] - $b[0];\n    });\n  \
    \  foreach ($res as &$row) {\n        $row = [$row[1], $row[0]];\n    }\n    usort($res,\
    \ function ($a, $b) {\n        return $b[0] - $a[0];\n    });\n    foreach ($res\
    \ as &$row) {\n        $row = [$row[1], $row[0]];\n    }\n    return $res;\n}\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst, $x));",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "  $result = [];\n  foreach ($lst as $row => $cols) {\n    foreach\
    \ ($cols as $col => $val) {\n      if ($val == $x) {\n        $result[] = [$row,\
    \ $col];\n      }\n    }\n  }\n  return $result;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n           \
    \ if ($val == $x) {\n                $res[] = [$i, $j];\n            }\n     \
    \   }\n    }\n    return $res;\n}\n", "    $result = [];\n    for ($i = 0; $i\
    \ < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n\
    \            if ($lst[$i][$j] == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "  $res = [];\n \
    \ foreach ($lst as $i => $row) {\n    foreach ($row as $j => $val) {\n      if\
    \ ($val == $x) {\n        $res[] = [$i, $j];\n      }\n    }\n  }\n  return $res;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    foreach ($lst as $key => $value) {\n  \
    \      if (in_array($x, $value)) {\n            $res[] = $key;\n        }\n  \
    \  }\n    return $res;\n}\n", "    $res = [];\n    foreach ($lst as $k => $v)\
    \ {\n        foreach ($v as $k1 => $v1) {\n            if ($v1 == $x) {\n    \
    \            $res[] = [$k, $k1];\n            }\n        }\n    }\n    return\
    \ $res;\n}", "    $result = [];\n    foreach ($lst as $row => $cols) {\n     \
    \   foreach ($cols as $col => $val) {\n            if ($val == $x) {\n       \
    \         $result[] = [$row, $col];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n\
    ];\n$x = 5;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach ($lst\
    \ as $row => $row_lst) {\n        $col = array_search($x, $row_lst);\n       \
    \ if ($col !== false) {\n            $result[] = [$row, $col];\n        }\n  \
    \  }\n    return $result;\n}\n", "  $result = [];\n  foreach ($lst as $row =>\
    \ $cols) {\n    foreach ($cols as $col => $val) {\n      if ($val == $x) {\n \
    \       $result[] = [$row, $col];\n      }\n    }\n  }\n  return $result;\n}\n",
  "    $res = [];\n    foreach ($lst as $row => $row_lst) {\n        foreach ($row_lst\
    \ as $col => $val) {\n            if ($val == $x) {\n                $res[] =\
    \ [$row, $col];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst\
    \ = [\n    [1, 2, 3, 4, 5],\n    [6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15],\n\
    \    [16, 17, 18, 19, 20],\n    [21, 22, 23, 24, 25]\n];\n\nprint_r(get_row($lst,\
    \ 1));\nprint_r(get_row($lst, 2));\nprint_r(get_row($lst, 3));\nprint_r(get_row($lst,\
    \ 4));\nprint_r(get_row($lst, 5));\nprint_r(get_row($lst, 6));\nprint_r(get_row($lst,\
    \ 7));\nprint_r(get_row($lst, 8));\nprint_r(get_row($lst, 9));\nprint_r(get_row($lst,\
    \ 10));\nprint_r(get_row($lst, 11));\nprint_r(get_row($lst, 12));\nprint_r(get_row($lst,\
    \ 13));\nprint_r(get_row($lst, 14));\nprint_r(get_row($lst, 15));\nprint_r(get_row($lst,\
    \ 16));\nprint_r(get_row($lst, 17));\nprint_r(get_row($lst, 18));\nprint_r(get_row($lst,\
    \ 19));\nprint_r(get_row($lst, 20));\nprint_r(get_row($lst,", "    $result = [];\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    foreach ($lst as $y => $row) {\n        foreach ($row as\
    \ $x1 => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$y, $x1];\n            }\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as\
    \ $j => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\n", " \
    \ $result = [];\n  foreach ($lst as $i => $row) {\n    foreach ($row as $j =>\
    \ $val) {\n      if ($val == $x) {\n        $result[] = [$i, $j];\n      }\n \
    \   }\n  }\n  return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $row => $columns) {\n        foreach ($columns as $column => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n\
    \            if ($val == $x) {\n                $res[] = [$i, $j];\n         \
    \   }\n        }\n    }\n    return $res;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n           \
    \ if ($val == $x) {\n                $res[] = [$i, $j];\n            }\n     \
    \   }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n$lst = [[1, 2, 3], [2, 3, 4], [3, 4, 5]];\n$x\
    \ = 3;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach ($lst as\
    \ $row => $columns) {\n        foreach ($columns as $column => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row => $row_data) {\n        foreach ($row_data as $col\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $col];\n            }\n        }\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns as\
    \ $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    return $result;\n}\n",
  "  $row = 0;\n  $col = 0;\n  $result = [];\n  foreach ($lst as $r) {\n    $col =\
    \ 0;\n    foreach ($r as $c) {\n      if ($c == $x) {\n        $result[] = [$row,\
    \ $col];\n      }\n      $col++;\n    }\n    $row++;\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $row_lst) {\n        foreach\
    \ ($row_lst as $col => $val) {\n            if ($val == $x) {\n              \
    \  $result[] = [$row, $col];\n            }\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n        if (in_array($x,\
    \ $value)) {\n            $result[] = $key;\n        }\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  foreach ($lst as $y => $row) {\n    foreach ($row as\
    \ $z => $value) {\n      if ($value == $x) {\n        $result[] = [$y, $z];\n\
    \      }\n    }\n  }\n  return $result;\n}\n", "  $res = [];\n  foreach ($lst\
    \ as $i => $row) {\n    foreach ($row as $j => $val) {\n      if ($val == $x)\
    \ {\n        $res[] = [$i, $j];\n      }\n    }\n  }\n  return $res;\n}\n", " \
    \   $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $res = [];\n    foreach ($lst as $row\
    \ => $cols) {\n        foreach ($cols as $col => $val) {\n            if ($val\
    \ == $x) {\n                $res[] = [$row, $col];\n            }\n        }\n\
    \    }\n    return $res;\n}\n", "    $res = [];\n    foreach ($lst as $row =>\
    \ $cols) {\n        foreach ($cols as $col => $val) {\n            if ($val ==\
    \ $x) {\n                $res[] = [$row, $col];\n            }\n        }\n  \
    \  }\n    return $res;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $col) {\n            if ($col == $x) {\n \
    \               $res[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $res;\n}\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n\
    \        foreach ($columns as $column => $value) {\n            if ($value ==\
    \ $x) {\n                $result[] = [$row, $column];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $row => $columns) {\n        foreach ($columns as $column => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "  $res = [];\n \
    \ for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $res[] = [$i, $j];\n     \
    \ }\n    }\n  }\n  return $res;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $i => $row) {\n        foreach ($row as $j => $item) {\n            if ($item\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $key\
    \ => $value) {\n        if (in_array($x, $value)) {\n            $result[] = $key;\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $row => $sub_lst) {\n        foreach ($sub_lst as $col => $val) {\n\
    \            if ($val == $x) {\n                $result[] = [$row, $col];\n  \
    \          }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        if (in_array($x, $value)) {\n\
    \            $result[] = [$key, array_search($x, $value)];\n        }\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row => $columns)\
    \ {\n        foreach ($columns as $column => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $column];\n            }\n    \
    \    }\n    }\n    return $result;\n}", "    $res = [];\n    foreach ($lst as\
    \ $i => $row) {\n        foreach ($row as $j => $elem) {\n            if ($elem\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $res;\n}", "    $result = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $item) {\n            if ($item == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $res = [];\n    foreach ($lst as $row\
    \ => $cols) {\n        foreach ($cols as $col => $val) {\n            if ($val\
    \ == $x) {\n                $res[] = [$row, $col];\n            }\n        }\n\
    \    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n \
    \           return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nprint_r(get_row($lst,\
    \ 5));", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n    \
    \    for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $result[] = [$i, $j];\n            }\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n            if ($lst[$i][$j] == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "    $res = [];\n\
    \    foreach ($lst as $k => $v) {\n        $res[] = [$k, array_search($x, $v)];\n\
    \    }\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $cols) {\n        foreach ($cols as $col => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $i => $row) {\n        foreach ($row as $j => $item) {\n            if ($item\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $i\
    \ => $row) {\n        foreach ($row as $j => $item) {\n            if ($item ==\
    \ $x) {\n                $result[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $result;\n}", "    $result = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $value) {\n            if ($value == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}", "    $result = [];\n    foreach ($lst as $y => $row) {\n     \
    \   foreach ($row as $x1 => $value) {\n            if ($value == $x) {\n     \
    \           $result[] = [$y, $x1];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 9;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 4;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 7;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 2;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 3;\nprint_r(get_row($lst,\
    \ $x));\n\n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];", "    $result = [];\n  \
    \  foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j =\
    \ 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n  \
    \              $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n      \
    \  foreach ($row as $j => $val) {\n            if ($val == $x) {\n           \
    \     $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst\
    \ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst, $x));",
  "    $res = [];\n    foreach ($lst as $i => $row) {\n        $j = array_search($x,\
    \ $row);\n        if ($j !== false) {\n            $res[] = [$i, $j];\n      \
    \  }\n    }\n    return $res;\n}\n", "    $res = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $res[] = [$i, $j];\n            }\n\
    \        }\n    }\n    return $res;\n}\n", "  $result = [];\n  foreach ($lst as\
    \ $i => $row) {\n    foreach ($row as $j => $value) {\n      if ($value == $x)\
    \ {\n        $result[] = [$i, $j];\n      }\n    }\n  }\n  return $result;\n}\n",
  "  $res = [];\n  foreach ($lst as $i => $row) {\n    foreach ($row as $j => $num)\
    \ {\n      if ($num == $x) {\n        $res[] = [$i, $j];\n      }\n    }\n  }\n\
    \  return $res;\n}\n", "    $result = [];\n    foreach ($lst as $i => $row) {\n\
    \        foreach ($row as $j => $item) {\n            if ($item == $x) {\n   \
    \             $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n\
    \        foreach ($value as $k => $v) {\n            if ($v == $x) {\n       \
    \         $result[] = [$key, $k];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $row => $cols) {\n\
    \        foreach ($cols as $col => $val) {\n            if ($val == $x) {\n  \
    \              $result[] = [$row, $col];\n            }\n        }\n    }\n  \
    \  return $result;\n}\n", "  $result = [];\n  foreach ($lst as $i => $row) {\n\
    \    foreach ($row as $j => $val) {\n      if ($val == $x) {\n        $result[]\
    \ = [$i, $j];\n      }\n    }\n  }\n  return $result;\n}\n", "    $result = [];\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\n", "  $result\
    \ = [];\n  foreach ($lst as $row_index => $row) {\n    foreach ($row as $col_index\
    \ => $value) {\n      if ($value == $x) {\n        $result[] = [$row_index, $col_index];\n\
    \      }\n    }\n  }\n  return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n       \
    \     if ($v == $x) {\n                $result[] = [$key, $k];\n            }\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++)\
    \ {\n            if ($lst[$i][$j] == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "  $res = [];\n \
    \ for ($i = 0; $i < count($lst); $i++) {\n    for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n      if ($lst[$i][$j] == $x) {\n        $res[] = [$i, $j];\n     \
    \ }\n    }\n  }\n  return $res;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        if (in_array($x, $value)) {\n            $result[]\
    \ = $key;\n        }\n    }\n    return $result;\n}\n", "  $result = [];\n  foreach\
    \ ($lst as $row => $row_lst) {\n    foreach ($row_lst as $col => $val) {\n   \
    \   if ($val == $x) {\n        $result[] = [$row, $col];\n      }\n    }\n  }\n\
    \  return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $result[] = [$i, $j];\n            }\n\
    \        }\n    }\n    return $result;\n}\n", "    $res = [];\n    foreach ($lst\
    \ as $i => $row) {\n        foreach ($row as $j => $val) {\n            if ($val\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $row =>\
    \ $columns) {\n        foreach ($columns as $column => $value) {\n           \
    \ if ($value == $x) {\n                $result[] = [$row, $column];\n        \
    \    }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    return $result;\n}\n", "   \
    \ $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0;\
    \ $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n     \
    \           $res[] = [$i, $j];\n            }\n        }\n    }\n    return $res;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n\
    \        foreach ($columns as $column => $value) {\n            if ($value ==\
    \ $x) {\n                $result[] = [$row, $column];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n", "  $res = [];\n  foreach ($lst as $i =>\
    \ $row) {\n    foreach ($row as $j => $val) {\n      if ($val == $x) {\n     \
    \   $res[] = [$i, $j];\n      }\n    }\n  }\n  return $res;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j <\
    \ count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n          \
    \      $result[] = [$i, $j];\n            }\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "  $result = [];\n  foreach ($lst as $row => $columns) {\n \
    \   foreach ($columns as $column => $value) {\n      if ($value == $x) {\n   \
    \     $result[] = [$row, $column];\n      }\n    }\n  }\n  return $result;\n}\n",
  "    $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0;\
    \ $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n     \
    \           $res[] = [$i, $j];\n            }\n        }\n    }\n    return $res;\n\
    }\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach\
    \ ($value as $k => $v) {\n            if ($v == $x) {\n                $result[]\
    \ = [$key, $k];\n            }\n        }\n    }\n    return $result;\n}", " \
    \   $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    foreach ($lst as $row => $l) {\n      \
    \  foreach ($l as $col => $v) {\n            if ($v == $x) {\n               \
    \ $res[] = [$row, $col];\n            }\n        }\n    }\n    usort($res, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst\
    \ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\necho json_encode(get_row($lst, 5)) . \"\
    \\n\";", "    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach\
    \ ($cols as $col => $value) {\n            if ($value == $x) {\n             \
    \   $result[] = [$row, $col];\n            }\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n       \
    \ for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] ==\
    \ $x) {\n                $result[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row\
    \ => $cols) {\n        foreach ($cols as $col => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        if (in_array($x, $value)) {\n            $result[]\
    \ = [$key, array_search($x, $value)];\n        }\n    }\n    return $result;\n\
    }\n", "  $result = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    for ($j\
    \ = 0; $j < count($lst[$i]); $j++) {\n      if ($lst[$i][$j] == $x) {\n      \
    \  $result[] = [$i, $j];\n      }\n    }\n  }\n  return $result;\n}", "    $res\
    \ = [];\n    foreach ($lst as $row => $row_lst) {\n        $col = array_search($x,\
    \ $row_lst);\n        if ($col !== false) {\n            $res[] = [$row, $col];\n\
    \        }\n    }\n    return $res;\n}\n", "    $res = [];\n    foreach ($lst\
    \ as $i => $row) {\n        foreach ($row as $j => $val) {\n            if ($val\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    return $res;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = 0; $j < count($lst[$i]); $j++) {\n            if\
    \ ($lst[$i][$j] == $x) {\n                $result[] = [$i, $j];\n            }\n\
    \        }\n    }\n    return $result;\n}\n", "  $result = [];\n  foreach ($lst\
    \ as $row => $cols) {\n    foreach ($cols as $col => $value) {\n      if ($value\
    \ == $x) {\n        $result[] = [$row, $col];\n      }\n    }\n  }\n  return $result;\n\
    }\n", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row\
    \ as $j => $val) {\n            if ($val == $x) {\n                $res[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    usort($res, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst = [[1, 2,\
    \ 3], [4, 5, 6], [7, 8, 9]];\n$x = 5;\nprint_r(get_row($lst, $x));\n\n$lst = [[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 1;\nprint_r(get_row($lst, $x));\n\n$lst\
    \ = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 9;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 8;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 7;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 6;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$x = 4;\nprint_r(get_row($lst, $x));\n\
    \n$lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n$"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
