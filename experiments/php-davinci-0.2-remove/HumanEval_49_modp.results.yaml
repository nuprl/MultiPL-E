language: php
name: HumanEval_49_modp
results:
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) $r = ($r * 2)\
    \ % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo39u7013.php:17\n\
    Stack trace:\n#0 /tmp/tmpo39u7013.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpo39u7013.php\
    \ on line 17\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n     \
    \       $r = ($r * 2) % $p;\n        }\n        $n = (int)($n / 2);\n        $p\
    \ = ($p * 2) % 998244353;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqc20obq.php:20\n\
    Stack trace:\n#0 /tmp/tmpiqc20obq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiqc20obq.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) $r = ($r * 2)\
    \ % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo39u7013.php:17\n\
    Stack trace:\n#0 /tmp/tmpo39u7013.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpo39u7013.php\
    \ on line 17\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = bcmod(bcmul($r, $b), $p);\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = bcmod(bcmul($b,\
    \ $b), $p);\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpdd464e30.php:8\n\
    Stack trace:\n#0 /tmp/tmpdd464e30.php(17): modp(3, 5)\n#1 /tmp/tmpdd464e30.php(21):\
    \ candidate(3, 5)\n#2 /tmp/tmpdd464e30.php(30): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpdd464e30.php on line 8\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$n = (int)$n;\n\t$p = (int)$p;\n\tif ($n == 0) return 1;\n\tif ($n\
    \ % 2 == 0) {\n\t\t$t = modp($n/2, $p);\n\t\treturn ($t*$t) % $p;\n\t} else {\n\
    \t\treturn (2*modp($n-1, $p)) % $p;\n\t}\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) $r = ($r *\
    \ $b) % $p;\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return $r;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $r = ($r * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $result = 1;\n    $base = 2;\n    while ($n > 0) {\n        if ($n\
    \ % 2 == 1) {\n            $result = ($result * $base) % $p;\n        }\n    \
    \    $n = floor($n / 2);\n        $base = ($base * $base) % $p;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n          \
    \  $r = ($r * 2) % $p;\n        }\n        $n >>= 1;\n        $p = ($p * $p) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ar22thk.php:20\n\
    Stack trace:\n#0 /tmp/tmp7ar22thk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7ar22thk.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) $r = ($r * 2)\
    \ % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo39u7013.php:17\n\
    Stack trace:\n#0 /tmp/tmpo39u7013.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpo39u7013.php\
    \ on line 17\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    if ($n == 0) {\n        return 1;\n    } else if ($n % 2 == 0) {\n\
    \        $m = modp($n / 2, $p);\n        return ($m * $m) % $p;\n    } else {\n\
    \        return (2 * modp($n - 1, $p)) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n          \
    \  $r = ($r * 2) % $p;\n        }\n        $n >>= 1;\n        $p = ($p * $p) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ar22thk.php:20\n\
    Stack trace:\n#0 /tmp/tmp7ar22thk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7ar22thk.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n = $n >> 1;\n        $b\
    \ = ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r = ($r * 2) % $p;\n\
    \  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n     \
    \       $r = ($r * 2) % $p;\n        }\n        $n = (int)($n / 2);\n        $p\
    \ = ($p * 2) % 998244353;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqc20obq.php:20\n\
    Stack trace:\n#0 /tmp/tmpiqc20obq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiqc20obq.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = $r * 2 % $p;\n\t\
    }\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $result = 1;\n  $base = 2;\n  while ($n > 0) {\n    if ($n % 2 == 1)\
    \ {\n      $result = ($result * $base) % $p;\n    }\n    $n = floor($n / 2);\n\
    \    $base = ($base * $base) % $p;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n          \
    \  $r = ($r * 2) % $p;\n        }\n        $n >>= 1;\n        $p = ($p * $p) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ar22thk.php:20\n\
    Stack trace:\n#0 /tmp/tmp7ar22thk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7ar22thk.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = bcmod(bcmul($r, $b), $p);\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = bcmod(bcmul($b,\
    \ $b), $p);\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpdd464e30.php:8\n\
    Stack trace:\n#0 /tmp/tmpdd464e30.php(17): modp(3, 5)\n#1 /tmp/tmpdd464e30.php(21):\
    \ candidate(3, 5)\n#2 /tmp/tmpdd464e30.php(30): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpdd464e30.php on line 8\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n          \
    \  $r = ($r * 2) % $p;\n        }\n        $n >>= 1;\n        $p = ($p * $p) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ar22thk.php:20\n\
    Stack trace:\n#0 /tmp/tmp7ar22thk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7ar22thk.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\t$n = $n % ($p - 1);\n\twhile ($n > 0) {\n\t\t\
    if ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b\
    \ * $b) % $p;\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n % 2 == 1) {\n     \
    \       $r = ($r * 2) % $p;\n        }\n        $n = floor($n / 2);\n    }\n \
    \   return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzayv48x6.php:19\n\
    Stack trace:\n#0 /tmp/tmpzayv48x6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzayv48x6.php\
    \ on line 19\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    $b = 2;\n    while ($n > 0) {\n        if ($n & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $n >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$r = ($r * 2) % $p;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  $b = 2;\n  while ($n > 0) {\n    if ($n & 1) {\n      $r\
    \ = ($r * $b) % $p;\n    }\n    $n >>= 1;\n    $b = ($b * $b) % $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        if ($n & 1) {\n          \
    \  $r = ($r * 2) % $p;\n        }\n        $n >>= 1;\n        $p = ($p * $p) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ar22thk.php:20\n\
    Stack trace:\n#0 /tmp/tmp7ar22thk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7ar22thk.php\
    \ on line 20\n"
  timestamp: 1659730855
- exit_code: 0
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n\t$r = 1;\n\t$b = 2;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$b = ($b * $b) % $p;\n\t}\n\treturn\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730855
