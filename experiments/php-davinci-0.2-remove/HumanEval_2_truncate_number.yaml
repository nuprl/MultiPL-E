name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n// Given a positive floating point number, it can be decomposed into\n\
  // and integer part (largest integer smaller than given number) and decimals\n//\
  \ (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
  function truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $number = (string)$number;\n    $parts = explode('.', $number);\n\
    \    if (count($parts) == 1) {\n        return 0;\n    }\n    return (float)$parts[1];\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   $number = (string)$number;\n    $parts = explode('.', $number);\n    if (count($parts)\
    \ == 1) {\n        return 0;\n    }\n    return '0.' . $parts[1];\n}\n", "   \
    \ $number = (string)$number;\n    $parts = explode('.', $number);\n    return\
    \ '0.' . $parts[1];\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.'.$number[1];\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $decimal_position = strpos($number, '.');\n    if ($decimal_position ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $decimal_position\
    \ + 1);\n}\n", "    return $number - floor($number);\n}\n", "  return $number\
    \ - floor($number);\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "  $number = (string)$number;\n  $number_parts = explode('.', $number);\n\
    \  return $number_parts[1];\n}\n", "    $number = (string)$number;\n    $decimal_pos\
    \ = strpos($number, '.');\n    if ($decimal_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $decimal_pos + 1);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "    $number = (float)$number;\n\
    \    $number = $number - (int)$number;\n    return $number;\n}\n", "    return\
    \ $number - floor($number);\n}\n", "    $number = (string)$number;\n    $decimal_point_pos\
    \ = strpos($number, '.');\n    if ($decimal_point_pos === false) {\n        return\
    \ 0;\n    }\n    $decimal_part = substr($number, $decimal_point_pos + 1);\n  \
    \  return (float)$decimal_part;\n}\n", "    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return $number[1];\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   $number = (string)$number;\n    $pos = strpos($number, '.');\n    if ($pos\
    \ === false) {\n        return 0;\n    }\n    return substr($number, $pos + 1);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    $number_parts = explode('.', $number);\n\
    \    return $number_parts[1];\n}\n", "    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "  return $number\
    \ - floor($number);\n}\n", "    $number = (float)$number;\n    return $number\
    \ - floor($number);\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "  // your code here\n}\n",
  "  // your code here\n}\n", "    return $number - floor($number);\n}\n", "  return\
    \ $number - floor($number);\n}\n", "  return $number - floor($number);\n}\n",
  "    // Your code here\n    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.'.$number[1];\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \ return $number - floor($number);\n}\n", "    $number = (string)$number;\n  \
    \  $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "  \
    \  return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "  return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \ return $number - floor($number);\n}\n", "    $number = (string)$number;\n  \
    \  $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "  \
    \  return $number - floor($number);\n}\n", "    $number = (string)$number;\n \
    \   $dot_pos = strpos($number, '.');\n    if ($dot_pos === false) {\n        return\
    \ 0;\n    }\n    return substr($number, $dot_pos + 1);\n}\n", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.' . $number[1];\n}\n", "  $number_parts\
    \ = explode('.', $number);\n  return '0.' . $number_parts[1];\n}\n", "    $number\
    \ = (string)$number;\n    $parts = explode('.', $number);\n    if (count($parts)\
    \ > 1) {\n        return '0.' . $parts[1];\n    }\n    return '0';\n}\n", "  \
    \  $number = (string)$number;\n    $number = explode('.', $number);\n    if (count($number)\
    \ > 1) {\n        return '0.' . $number[1];\n    }\n    return 0;\n}\n", "   \
    \ return $number - floor($number);\n}\n", "    $number = (string)$number;\n  \
    \  $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "  return\
    \ $number - floor($number);\n}\n", "    $number = (string)$number;\n    $pos =\
    \ strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   return $number - floor($number);\n}\n", "    $number = (float)$number;\n \
    \   $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "    return $number - (int)$number;\n}\n", "    $number\
    \ = (string)$number;\n    $pos = strpos($number, '.');\n    if ($pos === false)\
    \ {\n        return 0;\n    }\n    return substr($number, $pos + 1);\n}\n", " \
    \   return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $pos = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $pos + 1);\n}\n", "    $number_parts = explode('.',\
    \ $number);\n    return '0.' . $number_parts[1];\n}\n", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.' . $number[1];\n}\n", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n", "    // your code here\n    $number = strval($number);\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   $number = (string)$number;\n    $parts = explode('.', $number);\n    return\
    \ '0.' . $parts[1];\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "  $number = (string)$number;\n  $number = explode('.', $number);\n  return\
    \ '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $pos = strpos($number,\
    \ '.');\n    if ($pos === false) {\n        return 0;\n    }\n    return substr($number,\
    \ $pos + 1);\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "    return $number\
    \ - floor($number);\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   return $number - floor($number);\n}\n", "    // Your code here\n}\n", "  \
    \  $number_parts = explode('.', $number);\n    return '0.' . $number_parts[1];\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $pos = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $pos);\n}\n", "    $number = (string)$number;\n\
    \    $decimal_point_pos = strpos($number, '.');\n    if ($decimal_point_pos ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $decimal_point_pos\
    \ + 1);\n}\n", "    $number = (string)$number;\n    $parts = explode('.', $number);\n\
    \    return '0.' . $parts[1];\n}\n", "    $number = (string)$number;\n    $dot_pos\
    \ = strpos($number, '.');\n    if ($dot_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $dot_pos + 1);\n}\n", "    $number = (string)$number;\n\
    \    $parts = explode('.', $number);\n    if (count($parts) == 1) {\n        return\
    \ 0;\n    }\n    return (float)$parts[1];\n}\n", "    $number = (string)$number;\n\
    \    $decimal_point_pos = strpos($number, '.');\n    if ($decimal_point_pos ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $decimal_point_pos);\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $dot_pos = strpos($number, '.');\n    if ($dot_pos === false) {\n       \
    \ return 0;\n    }\n    return substr($number, $dot_pos + 1);\n}\n", "  $number\
    \ = (float)$number;\n  $number = $number - floor($number);\n  return $number;\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    if (count($number) == 1) {\n      \
    \  return 0;\n    }\n    return '0.' . $number[1];\n}\n", "  return $number -\
    \ floor($number);\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "    $number_parts = explode('.',\
    \ $number);\n    return '0.' . $number_parts[1];\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n", "  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "  // your code here\n}\n", "  $number_parts\
    \ = explode('.', $number);\n  return '0.' . $number_parts[1];\n}\n", "    $number_parts\
    \ = explode('.', $number);\n    return $number_parts[1];\n}\n", "    $number =\
    \ (string)$number;\n    $pos = strpos($number, '.');\n    if ($pos === false)\
    \ {\n        return 0;\n    }\n    return substr($number, $pos + 1);\n}\n", " \
    \ $number = (string)$number;\n  $number = explode('.', $number);\n  return '0.'.$number[1];\n\
    }\n", "    $number = (string)$number;\n    $decimal = strpos($number, '.');\n\
    \    if ($decimal === false) {\n        return 0;\n    }\n    return substr($number,\
    \ $decimal + 1);\n}\n", "  $number_parts = explode('.', $number);\n  return $number_parts[1];\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "    return $number\
    \ - floor($number);\n}\n", "  return $number - floor($number);\n}\n", "    $number\
    \ = (string)$number;\n    $parts = explode('.', $number);\n    if (count($parts)\
    \ == 1) {\n        return 0;\n    }\n    return (float)$parts[1];\n}\n", "   \
    \ $number = (string)$number;\n    $pos = strpos($number, '.');\n    if ($pos ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $pos + 1);\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $decimal_point_pos = strpos($number, '.');\n    if ($decimal_point_pos ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $decimal_point_pos\
    \ + 1);\n}\n", "    return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   return $number - floor($number);\n}\n", "  $number = (string)$number;\n  $number\
    \ = explode('.', $number);\n  return '0.' . $number[1];\n}\n", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.' . $number[1];\n}\n", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n", "    return $number - floor($number);\n}\n", "    return\
    \ $number - floor($number);\n}\n", "    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.'.$number[1];\n}\n", "    $number =\
    \ (float)$number;\n    return $number - (int)$number;\n}\n", "    $number = (string)$number;\n\
    \    $decimal_point_position = strpos($number, '.');\n    if ($decimal_point_position\
    \ === false) {\n        return 0;\n    }\n    $decimal_part = substr($number,\
    \ $decimal_point_position + 1);\n    return $decimal_part;\n}\n", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n", "    $number = (float)$number;\n    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return $number[1];\n}\n", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return $number[1];\n\
    }\n", "  return $number - floor($number);\n}\n", "    $number = (float)$number;\n\
    \    $number_parts = explode('.', $number);\n    return '0.' . $number_parts[1];\n\
    }\n", "  return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (float)$number;\n\
    \    $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ $number[1];\n}\n", "    $number = (string)$number;\n    $decimal_point_position\
    \ = strpos($number, '.');\n    if ($decimal_point_position === false) {\n    \
    \    return 0;\n    }\n    return substr($number, $decimal_point_position);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    $number = (float)$number;\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n", "  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n", "    return $number - floor($number);\n}\n", "  // Your code here\n}\n",
  "    $number = explode('.', $number);\n    return $number[1];\n}\n", "    return\
    \ $number - floor($number);\n}\n", "    return $number - floor($number);\n}\n",
  "  $number = (string)$number;\n  $number = explode('.', $number);\n  return '0.'\
    \ . $number[1];\n}\n", "  $number_parts = explode('.', $number);\n  return $number_parts[1];\n\
    }\n", "  $number = (string)$number;\n  $number = explode('.', $number);\n  $number\
    \ = '0.'.$number[1];\n  return $number;\n}\n", "  $number_parts = explode('.',\
    \ $number);\n  return '0.' . $number_parts[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    return $number - floor($number);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return $number[1];\n}\n", "    $number = (string)$number;\n    $decimal_position\
    \ = strpos($number, '.');\n    if ($decimal_position === false) {\n        return\
    \ 0;\n    }\n    $decimal_part = substr($number, $decimal_position + 1);\n   \
    \ return $decimal_part;\n}\n", "    $number = (string)$number;\n    $parts = explode('.',\
    \ $number);\n    if (count($parts) == 1) {\n        return 0;\n    }\n    return\
    \ (float)$parts[1];\n}\n", "    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.' . $number[1];\n}\n", "  return $number - floor($number);\n\
    }\n", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n", "    // Write your code here\n    // To\
    \ print results to the standard output you can use print\n    // Example: print\
    \ \"Hello world!\";\n    $number = (string)$number;\n    $number = explode('.',\
    \ $number);\n    return '0.'.$number[1];\n}\n", "  // your code here\n}\n", " \
    \   return $number - floor($number);\n}\n", "    $number = (float)$number;\n \
    \   $number_parts = explode('.', $number);\n    if (count($number_parts) == 1)\
    \ {\n        return 0;\n    }\n    return '0.' . $number_parts[1];\n}\n", "  \
    \  $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "    // your code here\n    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    if (count($number) > 1) {\n       \
    \ return '0.' . $number[1];\n    } else {\n        return '0';\n    }\n}\n", " \
    \ // your code here\n  $number = (string)$number;\n  $number = explode('.', $number);\n\
    \  return '0.'.$number[1];\n}\n", "  return $number - floor($number);\n}\n", " \
    \   $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "  return $number - floor($number);\n}\n", "  $number\
    \ = (string)$number;\n  $index = strpos($number, '.');\n  if ($index === false)\
    \ {\n    return 0;\n  }\n  return substr($number, $index + 1);\n}\n", "    //\
    \ Your code here\n}\n", "  return $number - floor($number);\n}\n", "    $number\
    \ = (string)$number;\n    $dot_pos = strpos($number, '.');\n    if ($dot_pos ===\
    \ false) {\n        return 0;\n    }\n    return substr($number, $dot_pos);\n\
    }\n", "  return $number - floor($number);\n}\n", "    return $number - floor($number);\n\
    }\n", "    return $number - floor($number);\n}\n", "    $number = (string)$number;\n\
    \    $decimals = 0;\n    if (strpos($number, '.') !== false) {\n        list($integer,\
    \ $decimals) = explode('.', $number);\n        $decimals = '0.'.$decimals;\n \
    \   }\n    return $decimals;\n}\n", "    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n", "    $number = (string)$number;\n\
    \    $decimal = explode('.', $number);\n    return $decimal[1];\n}\n", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n", "    return $number - floor($number);\n}\n", "    $number\
    \ = (string)$number;\n    $parts = explode('.', $number);\n    return $parts[1];\n\
    }\n", "  $number_parts = explode('.', $number);\n  return '0.' . $number_parts[1];\n\
    }\n", "    $number = (float)$number;\n    $number_parts = explode('.', $number);\n\
    \    return '0.' . $number_parts[1];\n}\n", "    $number = (float)$number;\n \
    \   $number = $number - (int)$number;\n    return $number;\n}\n", "    return\
    \ $number - floor($number);\n}\n", "  // your code here\n}\n", "    $number =\
    \ (string)$number;\n    $number = explode('.', $number);\n    return '0.' . $number[1];\n\
    }\n", "    $number = (string)$number;\n    $pos = strpos($number, '.');\n    if\
    \ ($pos === false) {\n        return 0;\n    }\n    return substr($number, $pos\
    \ + 1);\n}\n", "  $number = (string)$number;\n  $number = explode('.', $number);\n\
    \  return '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n", "  return $number - floor($number);\n}\n", "    $number_array\
    \ = explode('.', $number);\n    return $number_array[1];\n}\n", "  return $number\
    \ - floor($number);\n}\n", "  $number = (string)$number;\n  $parts = explode('.',\
    \ $number);\n  return '0.' . $parts[1];\n}\n", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n", " \
    \   $number = (string)$number;\n    $number = explode('.', $number);\n    return\
    \ '0.' . $number[1];\n}\n", "    $number = (string)$number;\n    $dot_pos = strpos($number,\
    \ '.');\n    if ($dot_pos === false) {\n        return 0;\n    }\n    return substr($number,\
    \ $dot_pos + 1);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
