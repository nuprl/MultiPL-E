name: HumanEval_120_maximum
language: php
prompt: "<?php\n// Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
  \ 1:\n// Example 2:\n// Example 3:\n// Note:\n// 1. The length of the array will\
  \ be in the range of [1, 1000].\n// 2. The elements in the array will be in the\
  \ range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr, $k)\
  \ {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));",
  "    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n    $res = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while (count($res) > 0 && $res[count($res)\
    \ - 1] < $arr[$i] && $n - $i > $k - count($res)) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\
    \ else {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n\
    \                $index = array_search($min, $res);\n                $res[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\n$arr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0];\n$k = 3;\nprint_r(maximum($arr, $k));",
  "    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n    }\n \
    \   $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($res);\n    \
    \    $minIndex = array_search($min, $res);\n        if ($arr[$i] > $min) {\n \
    \           $res[$minIndex] = $arr[$i];\n        }\n    }\n    sort($res);\n \
    \   return $res;\n}\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n   \
    \ $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        while ($res && $res[count($res)\
    \ - 1] < $arr[$i] && count($res) + $n - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    $res = [];\n    $i = 0;\n    while ($i\
    \ < $k) {\n        $max = -INF;\n        $max_index = -1;\n        for ($j = $i;\
    \ $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $max_index = $j;\n            }\n        }\n  \
    \      $res[] = $max;\n        $i = $max_index + 1;\n    }\n    return $res;\n\
    }\n", "    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[$i];\n        $index = $i;\n        for ($j = $i + 1; $j < $length; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n\
    \        while ($n - $i + count($result) > $k && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $size = count($arr);\n    if ($size == 0 || $k == 0) {\n        return\
    \ $result;\n    }\n    $queue = new SplPriorityQueue();\n    for ($i = 0; $i <\
    \ $size; $i++) {\n        $queue->insert($arr[$i], -$arr[$i]);\n        if ($queue->count()\
    \ > $k) {\n            $queue->extract();\n        }\n    }\n    while (!$queue->isEmpty())\
    \ {\n        $result[] = $queue->extract();\n    }\n    return $result;\n}\n$arr\
    \ = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($k >= $n) {\n        sort($arr);\n        return $arr;\n    }\n    $res\
    \ = array_slice($arr, 0, $k);\n    sort($res);\n    for ($i = $k; $i < $n; $i++)\
    \ {\n        if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n    \
    \        sort($res);\n        }\n    }\n    return $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n\
    $k = 3;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    if ($n == 0\
    \ || $k == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMinHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n    }\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n\
    \            $heap->extract();\n            $heap->insert($arr[$i]);\n       \
    \ }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 1, 1, 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [5, -3, 9, 1, 7, 7, 9, 10, 2, 3, 4];\n$k = 6;\nprint_r(maximum($arr, $k));",
  "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n", "    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        } else {\n            $max = max($res);\n            if ($arr[$i] > $max)\
    \ {\n                $index = array_search($max, $res);\n                $res[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $len; $i++) {\n        while ($res && $res[count($res)\
    \ - 1] < $arr[$i] && count($res) + $len - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 3, 2, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    if ($n == 0 || $k == 0) return [];\n   \
    \ if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $res[] = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n   \
    \ foreach ($res as $num) {\n        $maxHeap->insert($num);\n    }\n    for ($i\
    \ = $k; $i < $n; $i++) {\n        if ($arr[$i] < $maxHeap->top()) {\n        \
    \    $maxHeap->extract();\n            $maxHeap->insert($arr[$i]);\n        }\n\
    \    }\n    return iterator_to_array($maxHeap);\n}\n\n$arr = [1,2,3,4,5];\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $result[] = $arr[$i];\n      \
    \  sort($result);\n        if (count($result) > $k) {\n            array_shift($result);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [1, 1, 1, 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [0, 1, 2, 3, 4, 0, 0, 0, 0];\n$k = 4;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    $max = $arr[0];\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \    }\n    }\n    $count = array_fill(0, $max + 1, 0);\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $count[$arr[$i]]++;\n    }\n    $result = [];\n    for\
    \ ($i = $max; $i >= 0; $i--) {\n        while ($count[$i] > 0) {\n           \
    \ $result[] = $i;\n            $count[$i]--;\n            if (count($result) ==\
    \ $k) {\n                return $result;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    rsort($max);\n    return $max;\n}\n",
  "    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n        return\
    \ $result;\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $heap->insert($arr[$i]);\n    }\n    for ($i = $k; $i < $count; $i++)\
    \ {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n \
    \           $heap->insert($arr[$i]);\n        }\n    }\n    while (!$heap->isEmpty())\
    \ {\n        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 4;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        sort($arr);\n        return $arr;\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    sort($res);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $res[0]) {\n            $res[0] = $arr[$i];\n            sort($res);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 1, 1, 2, 2, 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [5, -3, 9, 1, 7, 7, 9, 10, 2, 3, 4];\n$k = 6;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $length = count($arr);\n    if ($k > $length) {\n      \
    \  return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $maxIndex = $i;\n        for ($j = $i + 1; $j < $length; $j++) {\n  \
    \          if ($arr[$j] > $max) {\n                $max = $arr[$j];\n        \
    \        $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $len = count($arr);\n    if ($len <= $k) {\n        return\
    \ $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = min($result);\n \
    \       if ($arr[$i] > $min) {\n            $key = array_search($min, $result);\n\
    \            $result[$key] = $arr[$i];\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return $result;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n    for ($i\
    \ = $k; $i < $len; $i++) {\n        $num = $arr[$i];\n        $j = $k - 1;\n \
    \       while ($j >= 0 && $num > $result[$j]) {\n            $j--;\n        }\n\
    \        if ($j < $k - 1) {\n            array_splice($result, $j + 1, 0, $num);\n\
    \            array_pop($result);\n        }\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 2;\n$result = maximum($arr, $k);\nprint_r($result);",
  "    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        while ($size - $i + count($result) > $k && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\n\
    print_r(maximum($arr, $k));", "    $n = count($arr);\n    if ($n == 0 || $k ==\
    \ 0) return [];\n    if ($k >= $n) return $arr;\n    $heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n\
    \            $heap->extract();\n            $heap->insert($arr[$i]);\n       \
    \ }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] =\
    \ $heap->extract();\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [3,2,1,5,6,4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [3,2,3,1,2,4,5,5,6];\n$k = 4;\nprint_r(maximum($arr, $k));",
  "    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n    \
    \    $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $res[] = $max;\n    \
    \    unset($arr[$max_index]);\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n", "    $n = count($arr);\n    if ($n ==\
    \ 0 || $k == 0) {\n        return [];\n    }\n    $stack = [];\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        while (count($stack) > 0 && $arr[$i] > $stack[count($stack)\
    \ - 1] && $n - $i + count($stack) > $k) {\n            array_pop($stack);\n  \
    \      }\n        if (count($stack) < $k) {\n            array_push($stack, $arr[$i]);\n\
    \        }\n    }\n    return $stack;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 4;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 5;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 6;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k\
    \ = 7;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 8;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 9;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 10;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 11;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k\
    \ = 12;", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -INF;\n        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$max_index]);\n    }\n    return $result;\n}\n", " \
    \   $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n    \
    \    if (count($result) > $k) {\n            array_shift($result);\n        }\n\
    \    }\n    return $result;\n}\n", "    $len = count($arr);\n    $res = [];\n\
    \    for ($i = 0; $i < $len; $i++) {\n        while ($res && $res[count($res)\
    \ - 1] < $arr[$i] && count($res) + $len - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\n\
    print_r(maximum($arr, $k));", "    $res = [];\n    $len = count($arr);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (count($res) < $k) {\n            array_push($res,\
    \ $arr[$i]);\n        } else {\n            $min = min($res);\n            if\
    \ ($min < $arr[$i]) {\n                $index = array_search($min, $res);\n  \
    \              $res[$index] = $arr[$i];\n            }\n        }\n    }\n   \
    \ sort($res);\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n \
    \       } else {\n            $min = min($res);\n            if ($arr[$i] > $min)\
    \ {\n                $res[array_search($min, $res)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,3,5,7,2,4,6,8];\n\
    $k = 4;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -1000;\n        $maxIndex = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $maxIndex = $j;\n            }\n \
    \       }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n\
    \    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len < $k) {\n        return $arr;\n    }\n    $res = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $res = heapify($res);\n\
    \    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $res[0]) {\n   \
    \         $res[0] = $arr[$i];\n            $res = heapify($res);\n        }\n\
    \    }\n    return $res;\n}\n", "    $result = [];\n    $size = count($arr);\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $result[] = $arr[$i];\n       \
    \ $result = maxHeap($result);\n        if (count($result) > $k) {\n          \
    \  array_shift($result);\n        }\n    }\n    return $result;\n}\n", "    $len\
    \ = count($arr);\n    if ($len == 0 || $k == 0) {\n        return [];\n    }\n\
    \    if ($k >= $len) {\n        return $arr;\n    }\n    $result = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n    $heap =\
    \ new SplMaxHeap();\n    foreach ($result as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n    foreach ($result as\
    \ $num) {\n        $maxHeap->insert($num);\n    }\n    for ($i = $k; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $maxHeap->top()) {\n            $maxHeap->extract();\n\
    \            $maxHeap->insert($arr[$i]);\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,2,2,3];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5,2];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $res[] = $max;\n        unset($arr[$index]);\n    }\n\
    \    return $res;\n}\n", "    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n\
    \        return [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach\
    \ ($res as $num) {\n        $heap->insert($num);\n    }\n    for ($i = $k; $i\
    \ < $n; $i++) {\n        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $res = heapify($res);\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n\
    \            $res = heapify($res);\n        }\n    }\n    return $res;\n}\n",
  "    $len = count($arr);\n    $result = [];\n    if ($k == 0) {\n        return\
    \ $result;\n    }\n    if ($k == $len) {\n        return $arr;\n    }\n    $result\
    \ = array_slice($arr, 0, $k);\n    sort($result);\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n\
    \            sort($result);\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len == 0 || $k == 0) {\n        return [];\n    }\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n       \
    \     $max = $arr[$i];\n        }\n    }\n    $bucket = [];\n    for ($i = 0;\
    \ $i < $len; $i++) {\n        $index = ($arr[$i] / $max) * ($k - 1);\n       \
    \ $bucket[$index][] = $arr[$i];\n    }\n    $res = [];\n    for ($i = $k - 1;\
    \ $i >= 0; $i--) {\n        if (isset($bucket[$i])) {\n            $res = array_merge($res,\
    \ $bucket[$i]);\n        }\n    }\n    return array_slice($res, 0, $k);\n}\n\n\
    $arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        while ($size - $i + count($result) > $k && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (count($result) < $k) {\n   \
    \         $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n", "    $len = count($arr);\n    if ($len == 0 || $k\
    \ == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n\
    \    foreach ($res as $v) {\n        $heap->insert($v);\n    }\n    for ($i =\
    \ $k; $i < $len; $i++) {\n        if ($arr[$i] < $heap->top()) {\n           \
    \ $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n    }\n\
    \    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n\
    \    }\n    return array_reverse($res);\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));", "    $result = [];\n    $size = count($arr);\n \
    \   if ($size == 0 || $k == 0) {\n        return $result;\n    }\n    $queue =\
    \ new SplPriorityQueue();\n    for ($i = 0; $i < $size; $i++) {\n        $queue->insert($arr[$i],\
    \ -$arr[$i]);\n        if ($queue->count() > $k) {\n            $queue->extract();\n\
    \        }\n    }\n    while (!$queue->isEmpty()) {\n        $result[] = $queue->extract();\n\
    \    }\n    return $result;\n}\n\n$arr = [1, 3, 2, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $length = count($arr);\n    if ($k > $length)\
    \ {\n        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $arr[$i];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $min =\
    \ min($result);\n        if ($arr[$i] > $min) {\n            $index = array_search($min,\
    \ $result);\n            $result[$index] = $arr[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $j = $k - 1;\n        while\
    \ ($j >= 0 && $res[$j] < $arr[$i]) {\n            $j--;\n        }\n        if\
    \ ($j < $k - 1) {\n            for ($m = $k - 1; $m > $j; $m--) {\n          \
    \      $res[$m] = $res[$m - 1];\n            }\n            $res[$j + 1] = $arr[$i];\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $size = count($arr);\n    if ($size == 0 ||\
    \ $k == 0) {\n        return $result;\n    }\n    $max = $arr[0];\n    $maxIndex\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex\
    \ = $i;\n        for ($j = $i + 1; $j < $size; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$maxIndex];\n\
    \        $arr[$maxIndex] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n",
  "    $n = count($arr);\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $max = -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        $arr[$maxIndex] = -INF;\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        while ($k && $res\
    \ && $res[count($res) - 1] < $arr[$i]) {\n            array_pop($res);\n     \
    \       $k--;\n        }\n        $res[] = $arr[$i];\n    }\n    return array_slice($res,\
    \ 0, $k);\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n\
    $arr = [1,2,3,4,5];\n$k = 4;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n\
    $k = 5;\nprint_r(maximum($arr, $k));", "    $res = [];\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        while ($res && $res[count($res)\
    \ - 1] < $arr[$i] && count($res) + $len - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n", "    $len = count($arr);\n    if ($len\
    \ == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n\
    \    foreach ($res as $val) {\n        $heap->insert($val);\n    }\n    for ($i\
    \ = $k; $i < $len; $i++) {\n        if ($arr[$i] < $heap->top()) {\n         \
    \   $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n    }\n\
    \    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n\
    \    }\n    return array_reverse($res);\n}\n", "    $result = [];\n    $n = count($arr);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while ($result && $result[count($result)\
    \ - 1] < $arr[$i] && count($result) + $n - $i > $k) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1, 2,\
    \ 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n        $max_index =\
    \ -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n        } else\
    \ {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n     \
    \           $res[array_search($min, $res)] = $arr[$i];\n            }\n      \
    \  }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $n = count($arr);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $result[] = $arr[$i];\n        if\
    \ (count($result) > $k) {\n            sort($result);\n            array_shift($result);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $result[] = $arr[$i];\n      \
    \  if (count($result) > $k) {\n            sort($result);\n            array_shift($result);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n    \
    \    $result[] = $arr[$i];\n        $result = sort($result);\n        if (count($result)\
    \ > $k) {\n            array_pop($result);\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1, 4, 3, 2];\n$k = 4;\nprint_r(maximum($arr, $k));", "    $res = [];\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        while (count($res) > 0 &&\
    \ $arr[$i] > $res[count($res) - 1] && count($res) + count($arr) - $i > $k) {\n\
    \            array_pop($res);\n        }\n        if (count($res) < $k) {\n  \
    \          array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n$k = 4;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1,2,3,4,5];\n$k = 5;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [1,2,3,4,5];\n$k = 6;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\n\n$arr = [1,2,3,4,5];\n$k = 0;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [5,4,3,2,1];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [5,4,3,2,1];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [5,4,3,2,1];\n\
    $k = 4;\nprint_r(maximum($arr, $k));\n\n$arr = [5,4,3,2,1];\n$k = 5;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [5,4,3,2,1", "    $res = [];\n    $len = count($arr);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        while ($res && $res[count($res) - 1] <\
    \ $arr[$i] && count($res) + $len - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $res = heapSort($res);\n    for ($i = $k; $i < $len; $i++) {\n   \
    \     if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n           \
    \ $res = heapSort($res);\n        }\n    }\n    return $res;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n        $index\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k\
    \ == 0) {\n        return $result;\n    }\n    $result = array_slice($arr, 0,\
    \ $k);\n    sort($result);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $result[0]) {\n            $result[0] = $arr[$i];\n            sort($result);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [1,3,5,7,2,4,6,8];\n$k = 4;\n\
    print_r(maximum($arr, $k));", "    $result = [];\n    $n = count($arr);\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        while (count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i] && $n - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [3, 2, 1, 5, 6, 4];\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [3, 2, 3, 1, 2, 4, 5, 5, 6];\n$k\
    \ = 4;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if (count($result) < $k) {\n \
    \           $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));",
  "    $len = count($arr);\n    if ($len <= $k) {\n        return $arr;\n    }\n \
    \   $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n\
    \    }\n    $result = heapSort($result);\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n  \
    \          $result = heapSort($result);\n        }\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $index = array_search($min, $result);\n         \
    \       $result[$index] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -INF;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -INF;\n        $maxIndex = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $maxIndex = $j;\n            }\n \
    \       }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    $size = count($arr);\n   \
    \ for ($i = 0; $i < $size; $i++) {\n        while ($size - $i + count($result)\
    \ > $k && !empty($result) && $result[count($result) - 1] < $arr[$i]) {\n     \
    \       array_pop($result);\n        }\n        if (count($result) < $k) {\n \
    \           $result[] = $arr[$i];\n        }\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n   \
    \     $max_index = -1;\n        for ($j = 0; $j < $n; $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $max_index\
    \ = $j;\n            }\n        }\n        $res[] = $max;\n        $arr[$max_index]\
    \ = -INF;\n    }\n    return $res;\n}\n", "    $n = count($arr);\n    if ($n ==\
    \ 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n    }\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n\
    \            $heap->extract();\n            $heap->insert($arr[$i]);\n       \
    \ }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] =\
    \ $heap->extract();\n    }\n    return array_reverse($res);\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 4;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = PHP_INT_MIN;\n        $index = 0;\n        for\
    \ ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n   \
    \             $max = $arr[$j];\n                $index = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        unset($arr[$index]);\n    }\n \
    \   return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n \
    \       $min = $res[0];\n        $min_index = 0;\n        for ($j = 1; $j < $k;\
    \ $j++) {\n            if ($res[$j] < $min) {\n                $min = $res[$j];\n\
    \                $min_index = $j;\n            }\n        }\n        if ($arr[$i]\
    \ > $min) {\n            $res[$min_index] = $arr[$i];\n        }\n    }\n    return\
    \ $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1,1,1,2,2,3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5,1];\n$k\
    \ = 1;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    $res = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while ($res && $res[count($res) -\
    \ 1] < $arr[$i] && count($res) + $n - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    if ($k == 0) {\n        return $result;\n  \
    \  }\n    $length = count($arr);\n    if ($k >= $length) {\n        return $arr;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n    for ($i\
    \ = $k; $i < $length; $i++) {\n        $j = $k - 1;\n        while ($j >= 0 &&\
    \ $result[$j] < $arr[$i]) {\n            $j--;\n        }\n        if ($j < $k\
    \ - 1) {\n            array_splice($result, $j + 1, 0, $arr[$i]);\n          \
    \  array_pop($result);\n        }\n    }\n    return $result;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    if ($n == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1];\n$k = 1;\nprint_r(maximum($arr, $k));\n$arr = [-1, -2];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [3, 2, 1, 5, 6, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [3, 2, 3, 1, 2, 4, 5, 5, 6];\n$k = 4;\nprint_r(maximum($arr, $k));",
  "    if ($k == 0) {\n        return [];\n    }\n    $result = [];\n    for ($i =\
    \ 0; $i < count($arr); $i++) {\n        while (count($result) > 0 && $arr[$i]\
    \ > $result[count($result) - 1] && count($result) + count($arr) - $i > $k) {\n\
    \            array_pop($result);\n        }\n        if (count($result) < $k)\
    \ {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n", "    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n    \
    \    return [];\n    }\n    if ($k >= $n) {\n        return $arr;\n    }\n   \
    \ $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return array_reverse($res);\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [3,2,1,5,6,4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [3,2,3,1,2,4,5,5,6];\n$k = 4;\nprint_r(maximum($arr, $k));",
  "    $n = count($arr);\n    if ($k >= $n) {\n        return $arr;\n    }\n    $res\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n\
    \    for ($i = $k; $i < $n; $i++) {\n        $min = min($res);\n        if ($arr[$i]\
    \ > $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n        }\n\
    \    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,3,-1,-3,5,3,6,7];\n\
    $k = 3;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n    $res = array_fill(0,\
    \ $k, 0);\n    for ($i = 0; $i < $len; $i++) {\n        $res[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $min = $res[0];\n      \
    \  $minIndex = 0;\n        for ($j = 1; $j < $k; $j++) {\n            if ($res[$j]\
    \ < $min) {\n                $min = $res[$j];\n                $minIndex = $j;\n\
    \            }\n        }\n        if ($arr[$i] > $min) {\n            $res[$minIndex]\
    \ = $arr[$i];\n        }\n    }\n    return $res;\n}\n$arr = [1, 2, 3, 4, 5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 4;\nprint_r(maximum($arr, $k));", "   \
    \ $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        while ($size - $i + count($result) > $k && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n    \
    \    while (count($result) && $result[count($result) - 1] < $arr[$i] && $size\
    \ - $i > $k - count($result)) {\n            array_pop($result);\n        }\n\
    \        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 4;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 5;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 6;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k\
    \ = 7;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 8;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k = 9;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 10;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 11;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3, 4, 5];\n$k\
    \ = 12;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 2, 3,", "    $res = [];\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $max = -PHP_INT_MAX;\n        $max_index\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $res[] = $max;\n        unset($arr[$max_index]);\n\
    \    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $res\
    \ = heapSort($res);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i]\
    \ > $res[0]) {\n            $res[0] = $arr[$i];\n            $res = heapSort($res);\n\
    \        }\n    }\n    return $res;\n}", "    $result = [];\n    $count = count($arr);\n\
    \    if ($count < $k) {\n        return $result;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    sort($result);\n    for ($i = $k; $i < $count; $i++) {\n      \
    \  if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n        \
    \    sort($result);\n        }\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    if ($count < $k) {\n        return $result;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    sort($result);\n    for ($i = $k; $i < $count; $i++) {\n      \
    \  if ($arr[$i] > $result[0]) {\n            $result[0] = $arr[$i];\n        \
    \    sort($result);\n        }\n    }\n    return $result;\n}", "    $n = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        while ($k && $res\
    \ && $res[count($res) - 1] < $arr[$i]) {\n            array_pop($res);\n     \
    \       $k--;\n        }\n        $res[] = $arr[$i];\n    }\n    while ($k--)\
    \ {\n        array_pop($res);\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    if ($count == 1)\
    \ {\n        return $arr;\n    }\n    if ($k == 0) {\n        return $result;\n\
    \    }\n    if ($k == 1) {\n        $max = $arr[0];\n        for ($i = 1; $i <\
    \ $count; $i++) {\n            if ($arr[$i] > $max) {\n                $max =\
    \ $arr[$i];\n            }\n        }\n        $result[] = $max;\n        return\
    \ $result;\n    }\n    if ($k == $count) {\n        return $arr;\n    }\n    $result\
    \ = array_slice($arr, 0, $k);\n    $result = heapSort($result);\n    for ($i =\
    \ $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n           \
    \ $result[0] = $arr[$i];\n            $result = heapSort($result);\n        }\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (count($result) < $k) {\n   \
    \         array_push($result, $arr[$i]);\n        } else {\n            $min =\
    \ min($result);\n            if ($min < $arr[$i]) {\n                $index =\
    \ array_search($min, $result);\n                $result[$index] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 3;\nvar_dump(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($res)\
    \ > 0 && $res[count($res) - 1] < $arr[$i] && $n - $i > $k - count($res)) {\n \
    \           array_pop($res);\n        }\n        if (count($res) < $k) {\n   \
    \         array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n}\n\
    $arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k =\
    \ 4;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 5;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 6;\nprint_r(maximum($arr, $k));\n$arr =\
    \ [1, 2, 3, 4, 5];\n$k = 7;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4,\
    \ 5];\n$k = 8;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 9;\n\
    print_r(maximum($arr, $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 10;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [1, 2, 3, 4, 5];\n$k = 11;\nprint_r(maximum($arr, $k));\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 12;\nprint_r(maximum($arr, $k));\n$arr = [1, 2, 3,\
    \ 4, 5];\n$k = 13;", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $max = -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n\
    $arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result =\
    \ [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));", "    $result = [];\n    $count = count($arr);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if (count($result) < $k) {\n \
    \           array_push($result, $arr[$i]);\n        } else {\n            $min\
    \ = min($result);\n            if ($min < $arr[$i]) {\n                $index\
    \ = array_search($min, $result);\n                $result[$index] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n", "    $result =\
    \ [];\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n    \
    \    if (count($result) < $k) {\n            $result[] = $arr[$i];\n        }\
    \ else {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n\
    \                $result[array_search($min, $result)] = $arr[$i];\n          \
    \  }\n        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $res\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1;\n        $max_index\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $res[] = $max;\n        unset($arr[$max_index]);\n\
    \    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n \
    \       } else {\n            $min = min($res);\n            if ($arr[$i] > $min)\
    \ {\n                $res[array_search($min, $res)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $length = count($arr);\n\
    \    if ($k > $length) {\n        return $arr;\n    }\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = $arr[$i];\n        $index = $i;\n        for ($j = $i\
    \ + 1; $j < $length; $j++) {\n            if ($arr[$j] > $max) {\n           \
    \     $max = $arr[$j];\n                $index = $j;\n            }\n        }\n\
    \        $result[] = $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i]\
    \ = $max;\n    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\n\
    print_r(maximum($arr, $k));", "    $res = [];\n    $len = count($arr);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (count($res) < $k) {\n            $res[]\
    \ = $arr[$i];\n        } else {\n            $min = min($res);\n            if\
    \ ($arr[$i] > $min) {\n                $res[array_search($min, $res)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n        $maxIndex =\
    \ -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,2,2,3];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    $res = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while ($res && $k && $res[count($res)\
    \ - 1] < $arr[$i]) {\n            array_pop($res);\n            $k--;\n      \
    \  }\n        if ($k) {\n            $res[] = $arr[$i];\n        }\n    }\n  \
    \  return $res;\n}\n", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n",
  "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n \
    \       $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $n = count($arr);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if (count($result) < $k) {\n     \
    \       $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n", "    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n \
    \       } else {\n            $min = min($res);\n            if ($arr[$i] > $min)\
    \ {\n                $res[array_search($min, $res)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex =\
    \ -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k\
    \ == 0) {\n        return $result;\n    }\n    $max = $arr[0];\n    for ($i =\
    \ 1; $i < $len; $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $count = [];\n    for ($i = 0; $i < $len; $i++) {\n   \
    \     $count[$arr[$i]]++;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $max;\n        $count[$max]--;\n        if ($count[$max] == 0) {\n       \
    \     $max--;\n        }\n    }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -1000;\n        $maxIndex = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $maxIndex = $j;\n            }\n \
    \       }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n\
    \    return $result;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1001;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1, 2,\
    \ 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $size\
    \ = count($arr);\n    for ($i = 0; $i < $size; $i++) {\n        if (count($result)\
    \ < $k) {\n            array_push($result, $arr[$i]);\n        } else {\n    \
    \        $min = min($result);\n            if ($min < $arr[$i]) {\n          \
    \      $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n    if ($len\
    \ == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $maxHeap = new SplMaxHeap();\n\
    \    foreach ($res as $num) {\n        $maxHeap->insert($num);\n    }\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $maxHeap->top()) {\n  \
    \          $maxHeap->extract();\n            $maxHeap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$maxHeap->isEmpty()) {\n        $res[]\
    \ = $maxHeap->extract();\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $i = 0;\n    $j\
    \ = 0;\n    while ($i < $k) {\n        $max = $arr[$j];\n        $index = $j;\n\
    \        for ($j; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $arr = array_values($arr);\n        $j = 0;\n        $i++;\n    }\n  \
    \  return $result;\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));",
  "    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        while ($size - $i + count($result) > $k && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,2,2,3];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5,4,3,2,1];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n    return $res;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len < $k) {\n        return $arr;\n    }\n    $res = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < $len; $i++) {\n        $min = min($res);\n        if ($arr[$i] > $min)\
    \ {\n            $res[array_search($min, $res)] = $arr[$i];\n        }\n    }\n\
    \    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nvar_dump(maximum($arr, $k));",
  "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n \
    \       $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$maxIndex]);\n    }\n    return $result;\n}", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        array_splice($arr,\
    \ $index, 1);\n    }\n    return $result;\n}\n", "    $result = [];\n    $size\
    \ = count($arr);\n    if ($size == 0 || $k == 0) {\n        return $result;\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $size; $i++) {\n\
    \        $heap->insert($arr[$i]);\n    }\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $result[] = $heap->extract();\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n", "    $n = count($arr);\n\
    \    if ($n == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $item) {\n        $heap->insert($item);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] < $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -INF;\n        $max_index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$max_index]);\n    }\n    return $result;\n}\n", " \
    \   $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return [];\n\
    \    }\n    if ($k >= $len) {\n        return $arr;\n    }\n    $res = [];\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $v) {\n        $heap->insert($v);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $heap->toArray();\n}\n\n$arr = [1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10];\n$k = 5;\nprint_r(maximum($arr, $k));", "    $result = [];\n    $count\
    \ = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        while ($count\
    \ > 0 && count($result) > 0 && $result[count($result) - 1] < $arr[$i]) {\n   \
    \         array_pop($result);\n            $count--;\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [1,3,-1,-3,5,3,6,7];\n$k = 3;\nprint_r(maximum($arr, $k));", "   \
    \ $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n     \
    \   $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n        $min\
    \ = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n",
  "    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n    }\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     $heap->insert($res[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n  \
    \      if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n       \
    \     $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while (!$heap->isEmpty())\
    \ {\n        $res[] = $heap->extract();\n    }\n    return array_reverse($res);\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count == 1) {\n        return $arr;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    for ($i = $k; $i < $count; $i++) {\n        $result = insert($result,\
    \ $arr[$i]);\n    }\n    return $result;\n}\n", "    $res = [];\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        while ($res && $res[count($res)\
    \ - 1] < $arr[$i] && count($res) + $len - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n   \
    \     if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $key = array_search($min, $result);\n           \
    \     $result[$key] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $max = 0;\n    $maxIndex = 0;\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n  \
    \      $arr[$maxIndex] = -1;\n        $max = 0;\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n", "    $result = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex = -1;\n        for\
    \ ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n   \
    \             $max = $arr[$j];\n                $maxIndex = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n\
    \    return $result;\n}\n", "    $length = count($arr);\n    if ($k == $length)\
    \ {\n        return $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = -1000;\n        $maxIndex = -1;\n        for ($j = 0;\
    \ $j < $length; $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $maxIndex = $j;\n            }\n        }\n   \
    \     $result[] = $max;\n        $arr[$maxIndex] = -1001;\n    }\n    return $result;\n\
    }\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result =\
    \ [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));\n", "    $result\
    \ = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ $result;\n    }\n    $result = $arr;\n    for ($i = $k; $i < $len; $i++) {\n\
    \        $result = insert($result, $arr[$i]);\n    }\n    return $result;\n}",
  "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMinHeap();\n    foreach ($res as $val) {\n        $heap->insert($val);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        array_push($result,\
    \ $max);\n        array_splice($arr, $index, 1);\n    }\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = PHP_INT_MIN;\n        $maxIndex = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $maxIndex = $j;\n            }\n \
    \       }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n\
    \    return $result;\n}\n", "    $n = count($arr);\n    $heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n\
    \    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n\
    \    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n\
    \        if (count($result) > $k) {\n            array_shift($result);\n     \
    \   }\n    }\n    return $result;\n}\n", "    $len = count($arr);\n    if ($len\
    \ == 0 || $k == 0) {\n        return [];\n    }\n    if ($k >= $len) {\n     \
    \   return $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $result[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach\
    \ ($result as $item) {\n        $heap->insert($item);\n    }\n    for ($i = $k;\
    \ $i < $len; $i++) {\n        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return iterator_to_array($heap);\n\
    }\n", "    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n \
    \   }\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    $max = heapify($max);\n    for ($i = $k; $i < $len; $i++) {\n    \
    \    if ($arr[$i] > $max[0]) {\n            $max[0] = $arr[$i];\n            $max\
    \ = heapify($max);\n        }\n    }\n    return $max;\n}\n", "    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        array_splice($arr,\
    \ $index, 1);\n    }\n    return $result;\n}\n", "    $res = [];\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        while (count($res) > 0 && $arr[$i]\
    \ > $res[count($res) - 1] && $len - $i > $k - count($res)) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = $arr[0];\n        $max_index = 0;\n        for\
    \ ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n   \
    \             $max = $arr[$j];\n                $max_index = $j;\n           \
    \ }\n        }\n        $result[] = $max;\n        array_splice($arr, $max_index,\
    \ 1);\n    }\n    return $result;\n}\n", "    $result = [];\n    $len = count($arr);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (count($result) < $k) {\n   \
    \         $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $count = count($arr);\n    if ($count < $k) {\n        return $arr;\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $result = heapSort($result);\n    for ($i = $k; $i <\
    \ $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0]\
    \ = $arr[$i];\n            $result = heapSort($result);\n        }\n    }\n  \
    \  return $result;\n}", "    $len = count($arr);\n    if ($len <= $k) {\n    \
    \    return $arr;\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i < $len; $i++) {\n   \
    \     $res = insert($res, $arr[$i]);\n    }\n    return $res;\n}", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = -INF;\n        $maxIndex = -1;\n        for ($j = 0;\
    \ $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n            \
    \    $max = $arr[$j];\n                $maxIndex = $j;\n            }\n      \
    \  }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n    return\
    \ $result;\n}\n", "    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && count($res)\
    \ + count($arr) - $i > $k) {\n            array_pop($res);\n        }\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i <\
    \ $size; $i++) {\n        if (count($result) < $k) {\n            $result[] =\
    \ $arr[$i];\n        } else {\n            $min = min($result);\n            if\
    \ ($arr[$i] > $min) {\n                $result[array_search($min, $result)] =\
    \ $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        while\
    \ ($k > 0 && !empty($result) && $result[$k - 1] < $arr[$i]) {\n            array_pop($result);\n\
    \            $k--;\n        }\n        if ($k > 0) {\n            $result[] =\
    \ $arr[$i];\n            $k--;\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMinHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return array_reverse($res);\n}\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n    if ($len\
    \ == 0 || $k == 0) {\n        return [];\n    }\n    $res = [];\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n    }\n\
    \    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top()) {\n\
    \            $heap->extract();\n            $heap->insert($arr[$i]);\n       \
    \ }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] =\
    \ $heap->extract();\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\n\
    print_r(maximum($arr, $k));", "    $n = count($arr);\n    if ($n == 0 || $k ==\
    \ 0) {\n        return [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $res[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n    }\n    for\
    \ ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n       \
    \     $heap->extract();\n            $heap->insert($arr[$i]);\n        }\n   \
    \ }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = PHP_INT_MIN;\n        $max_index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$max_index]);\n    }\n    return $result;\n}\n\n\
    $arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n\
    \    if ($len < $k) {\n        return $arr;\n    }\n    $res = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < $len; $i++) {\n        $min = min($res);\n        if ($arr[$i] > $min)\
    \ {\n            $res[array_search($min, $res)] = $arr[$i];\n        }\n    }\n\
    \    sort($res);\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $length = count($arr);\n    if ($k > $length)\
    \ {\n        return $arr;\n    }\n    $i = 0;\n    while ($i < $k) {\n       \
    \ $max = $arr[$i];\n        $index = $i;\n        for ($j = $i; $j < $length;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n        $i++;\n \
    \   }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n   \
    \     if (count($result) < $k) {\n            $result[] = $arr[$i];\n        }\
    \ else {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n\
    \                $result[array_search($min, $result)] = $arr[$i];\n          \
    \  }\n        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $res\
    \ = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while (count($res)\
    \ && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr) - $i > $k)\
    \ {\n            array_pop($res);\n        }\n        if (count($res) < $k) {\n\
    \            array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n\
    }\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n    \
    \    $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $maxIndex = $j;\n            }\n        }\n        array_push($result, $max);\n\
    \        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n}\n",
  "    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n        return\
    \ $result;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex = $i;\n        for\
    \ ($j = $i; $j < $count; $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $maxIndex = $j;\n            }\n \
    \       }\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$maxIndex];\n  \
    \      $arr[$maxIndex] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", " \
    \   $result = [];\n    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n\
    \        return $result;\n    }\n    $result = array_slice($arr, 0, $k);\n   \
    \ sort($result);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] >\
    \ $result[0]) {\n            $result[0] = $arr[$i];\n            sort($result);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [1,3,5,7,2,4,6,8];\n$k = 4;\n\
    print_r(maximum($arr, $k));", "    $n = count($arr);\n    $res = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        while ($res && $res[count($res) - 1] < $arr[$i]\
    \ && count($res) + $n - $i > $k) {\n            array_pop($res);\n        }\n\
    \        if (count($res) < $k) {\n            $res[] = $arr[$i];\n        }\n\
    \    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    $count = count($arr);\n    $start = 0;\n   \
    \ $end = $count - 1;\n    while ($start <= $end) {\n        $pivot = partition($arr,\
    \ $start, $end);\n        if ($pivot == $k - 1) {\n            break;\n      \
    \  } else if ($pivot < $k - 1) {\n            $start = $pivot + 1;\n        }\
    \ else {\n            $end = $pivot - 1;\n        }\n    }\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n}\n",
  "    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len; $i++) {\n\
    \        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && $len -\
    \ $i > $k - count($res)) {\n            array_pop($res);\n        }\n        if\
    \ (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n \
    \   }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\n$arr = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
  "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $value) {\n      \
    \  $heap->insert($value);\n    }\n    for ($i = $k; $i < $len; $i++) {\n     \
    \   if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n          \
    \  $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n\n$arr = [1,\
    \ 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [1, 1, 1, 2, 2,\
    \ 3];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [5, -3, 9, 1, 7, 7, 9, 10,\
    \ 2, 3, 4];\n$k = 6;\nprint_r(maximum($arr, $k));", "    $result = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n\
    \    $res = [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($res)\
    \ > 0 && $res[count($res) - 1] < $arr[$i] && $n - $i > $k - count($res)) {\n \
    \           array_pop($res);\n        }\n        if (count($res) < $k) {\n   \
    \         array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n}\n\
    \n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n        } else\
    \ {\n            $j = 0;\n            while ($j < $k && $res[$j] > $arr[$i]) {\n\
    \                $j++;\n            }\n            if ($j < $k) {\n          \
    \      array_splice($res, $j, 0, $arr[$i]);\n                array_pop($res);\n\
    \            }\n        }\n    }\n    return $res;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $len = count($arr);\n    if ($len\
    \ == 0 || $k == 0) {\n        return [];\n    }\n    $result = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n    $result = heapify($result);\n\
    \    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            $result = heapify($result);\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n       \
    \ for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n\
    \                $max = $arr[$j];\n                $index = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        unset($arr[$index]);\n    }\n \
    \   return $result;\n}\n\n$arr = [1,2,3,4,5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -INF;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    $length = count($arr);\n    if ($k >= $length) {\n        return\
    \ $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $maxIndex = $i;\n        for ($j = $i; $j < $length; $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $maxIndex = $j;\n            }\n        }\n        $temp = $arr[$i];\n  \
    \      $arr[$i] = $max;\n        $arr[$maxIndex] = $temp;\n        $result[] =\
    \ $max;\n    }\n    return $result;\n}\n\n$arr = [1, 3, 5, 2, 4];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    if ($len == 0 || $k == 0) {\n        return\
    \ [];\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num)\
    \ {\n        $heap->insert($num);\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n", " \
    \   $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while (count($res)\
    \ > 0 && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr) - $i >\
    \ $k) {\n            array_pop($res);\n        }\n        if (count($res) < $k)\
    \ {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n\
    }\n", "    $n = count($arr);\n    if ($n == 0 || $k == 0) {\n        return [];\n\
    \    }\n    $stack = [];\n    for ($i = 0; $i < $n; $i++) {\n        while (count($stack)\
    \ > 0 && $stack[count($stack) - 1] < $arr[$i] && $n - $i + count($stack) > $k)\
    \ {\n            array_pop($stack);\n        }\n        if (count($stack) < $k)\
    \ {\n            array_push($stack, $arr[$i]);\n        }\n    }\n    return $stack;\n\
    }\n", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        array_push($result, $max);\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\n$arr\
    \ = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr, $k));", "    $result = [];\n\
    \    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n        if\
    \ (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else {\n\
    \            $min = min($result);\n            if ($arr[$i] > $min) {\n      \
    \          $result[array_search($min, $result)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [1,2,3,4,5];\n\
    $k = 2;\nprint_r(maximum($arr, $k));", "    $n = count($arr);\n    $res = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while ($res && $res[count($res) -\
    \ 1] < $arr[$i] && count($res) + $n - $i > $k) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            $res[] = $arr[$i];\n\
    \        }\n    }\n    return $res;\n}\n\n$arr = [1, 2, 3, 4, 5];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
