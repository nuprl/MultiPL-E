language: php
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $min = PHP_INT_MAX;\n\
    \    $min_index = PHP_INT_MAX;\n    $min_index_arr = [];\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] % 2 == 0 && $arr[$i] < $min) {\n\
    \            $min = $arr[$i];\n            $min_index = $i;\n        }\n    }\n\
    \    if ($min == PHP_INT_MAX) {\n        return [];\n    }\n    for ($i = 0; $i\
    \ < count($arr); $i++) {\n        if ($arr[$i] == $min) {\n            $min_index_arr[]\
    \ = $i;\n        }\n    }\n    $min_index = min($min_index_arr);\n    return [$min,\
    \ $min_index];\n}\n\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(pluck($arr));\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  timestamp: 1660014650
- exit_code: 0
  program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n// Example 2:\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n// Example 3:\n// Example 4:\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = [];\n \
    \   $evens_indexes = [];\n    foreach ($arr as $index => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_indexes[]\
    \ = $index;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_indexes[$min_even_index]];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014650
