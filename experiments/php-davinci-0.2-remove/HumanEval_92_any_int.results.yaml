language: php
name: HumanEval_92_any_int
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 1);\necho any_int(1, 2, 2);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1, 2,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2yi9g246.php on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 2) .\
    \ PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\n\
    echo any_int(1, 2, -1) . PHP_EOL;\necho any_int(1, 2, -2) . PHP_EOL;\necho any_int(1,\
    \ 2, -3) . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\necho any_int(1, 2, -5)\
    \ . PHP_EOL;\necho any_int(1, 2, -6) . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\n\
    echo any_int(1, 2, -8) . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\necho any_int(1,\
    \ 2, -10) . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\necho any_int(1, 2, -12)\
    \ . PHP_EOL;\necho any_int(1, 2, -13) . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\n\
    echo any_int(1, 2, -15) . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\necho any_int(1,\
    \ 2, -17) . PHP_EOL;\necho any_int(1, 2, -18) . PHP_EOL;\necho any_int(1, 2, -19)\
    \ . PHP_EOL;\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyu1zjlr6.php on line 39

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    }\n    return false;\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\n\
    echo any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\necho any_int(1,\
    \ 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\necho any_int(1, 2, -2)\
    \ . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\n\
    echo any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6) . PHP_EOL;\necho any_int(1,\
    \ 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\necho any_int(1, 2, -9)\
    \ . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\n\
    echo any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13) . PHP_EOL;\necho any_int(1,\
    \ 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\necho any_int(1, 2, -16)\
    \ . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1, 2, -18) . PHP_EOL;\n\
    echo any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20) . PHP_EOL;\necho any_int(1,\
    \ 2, -21)\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpanr2phsj.php on line 38

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 2, 1) .\
    \ \"\\n\";\necho any_int(1, 2, 0) . \"\\n\";\necho any_int(1, 2, -1) . \"\\n\"\
    ;\necho any_int(1, 2, -2) . \"\\n\";\necho any_int(1, 2, -3) . \"\\n\";\necho\
    \ any_int(1, 2, -4) . \"\\n\";\necho any_int(1, 2, -5) . \"\\n\";\necho any_int(1,\
    \ 2, -6) . \"\\n\";\necho any_int(1, 2, -7) . \"\\n\";\necho any_int(1, 2, -8)\
    \ . \"\\n\";\necho any_int(1, 2, -9) . \"\\n\";\necho any_int(1, 2, -10) . \"\\\
    n\";\necho any_int(1, 2, -11) . \"\\n\";\necho any_int(1, 2, -12) . \"\\n\";\n\
    echo any_int(1, 2, -13) . \"\\n\";\necho any_int(1, 2, -14) . \"\\n\";\necho any_int(1,\
    \ 2, -15) . \"\\n\";\necho any_int(1, 2, -16) . \"\\n\";\necho any_int(1, 2, -17)\
    \ . \"\\n\";\necho any_int(1, 2, -18) . \"\\n\";\necho any_int(1, 2, -19) . \"\
    \\n\";\necho any_int(1, 2, -20) . \"\\n\";\necho any_int(1, 2, -21) . \"\\n\"\
    ;\necho any_int(1, 2, -22) . \"\\n\";\necho any_int(1, 2, -23) . \"\\n\";\necho\
    \ any_int\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpskml66bi.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 4) . \"<br>\";\necho any_int(2,\
    \ 3, 5) . \"<br>\";\necho any_int(2, 3, 6) . \"<br>\";\necho any_int(2, 3, 7)\
    \ . \"<br>\";\necho any_int(2, 3, 8) . \"<br>\";\necho any_int(2, 3, 9) . \"<br>\"\
    ;\necho any_int(2, 3, 10) . \"<br>\";\necho any_int(2, 3, 11) . \"<br>\";\necho\
    \ any_int(2, 3, 12) . \"<br>\";\necho any_int(2, 3, 13) . \"<br>\";\necho any_int(2,\
    \ 3, 14) . \"<br>\";\necho any_int(2, 3, 15) . \"<br>\";\necho any_int(2, 3, 16)\
    \ . \"<br>\";\necho any_int(2, 3, 17) . \"<br>\";\necho any_int(2, 3, 18) . \"\
    <br>\";\necho any_int(2, 3, 19) . \"<br>\";\necho any_int(2, 3, 20) . \"<br>\"\
    ;\necho any_int(2, 3, 21) . \"<br>\";\necho any_int(2, 3, 22) . \"<br>\";\necho\
    \ any_int(2, 3, 23) . \"<br>\";\necho any_int(2, 3, 24) . \"<br>\";\necho any_int(2,\
    \ 3, 25) . \"<br>\";\necho any_int(2, 3, 26) . \"<br>\";\necho any_int(2, 3, 27)\
    \ . \"<br>\";\necho any_int(2, 3, 28) . \"<\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmpst8_i7z4.php on line 48

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3);\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp8gofah0.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1, 2, 1) . PHP_EOL; // true\n\
    echo any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1, 2, -1) . PHP_EOL; //\
    \ false\necho any_int(1, 2, \"3\") . PHP_EOL; // false\necho any_int(1, 2, \"\
    2\") . PHP_EOL; // false\necho any_int(1, 2, \"1\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"0\") . PHP_EOL; // false\necho any_int(1, 2, \"-1\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"a\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"b\") . PHP_EOL; // false\necho any_int(1, 2, \"c\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"d\") . PHP_EOL; // false\necho any_int(1, 2, \"e\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"f\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"g\") . PHP_EOL; // false\necho any_int(1, 2, \"h\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"i\") . PHP_EOL; // false\necho any_int(1, 2, \"j\") . PHP_EOL;\
    \ // false\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpd79zopao.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 4) . \"\\n\";\necho any_int(2,\
    \ 3, 5) . \"\\n\";\necho any_int(2, 3, 6) . \"\\n\";\necho any_int(2, 3, 7) .\
    \ \"\\n\";\necho any_int(2, 3, 8) . \"\\n\";\necho any_int(2, 3, 9) . \"\\n\"\
    ;\necho any_int(2, 3, 10) . \"\\n\";\necho any_int(2, 3, 11) . \"\\n\";\necho\
    \ any_int(2, 3, 12) . \"\\n\";\necho any_int(2, 3, 13) . \"\\n\";\necho any_int(2,\
    \ 3, 14) . \"\\n\";\necho any_int(2, 3, 15) . \"\\n\";\necho any_int(2, 3, 16)\
    \ . \"\\n\";\necho any_int(2, 3, 17) . \"\\n\";\necho any_int(2, 3, 18) . \"\\\
    n\";\necho any_int(2, 3, 19) . \"\\n\";\necho any_int(2, 3, 20) . \"\\n\";\necho\
    \ any_int(2, 3, 21) . \"\\n\";\necho any_int(2, 3, 22) . \"\\n\";\necho any_int(2,\
    \ 3, 23) . \"\\n\";\necho any_int(2, 3, 24) . \"\\n\";\necho any_int(2, 3, 25)\
    \ . \"\\n\";\necho any_int(2, 3, 26) . \"\\n\";\necho any_int(2, 3, 27) . \"\\\
    n\";\necho any_int(2, 3, 28) . \"\\n\";\necho any_int(2, 3, 29) . \"\\n\";\necho\
    \ any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp0tk25mz8.php on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1n91mjp.php:21\n\
    Stack trace:\n#0 /tmp/tmpx1n91mjp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx1n91mjp.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    return (is_int($x) && is_int($y) && is_int($z));\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ze_xcip.php:18\n\
    Stack trace:\n#0 /tmp/tmp_ze_xcip.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_ze_xcip.php\
    \ on line 18\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\n\
    echo any_int(1, 2, -1) . PHP_EOL;\necho any_int(1, 2, -2) . PHP_EOL;\necho any_int(1,\
    \ 2, -3) . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\necho any_int(1, 2, -5)\
    \ . PHP_EOL;\necho any_int(1, 2, -6) . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\n\
    echo any_int(1, 2, -8) . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\necho any_int(1,\
    \ 2, -10) . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\necho any_int(1, 2, -12)\
    \ . PHP_EOL;\necho any_int(1, 2, -13) . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\n\
    echo any_int(1, 2, -15) . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\necho any_int(1,\
    \ 2, -17) . PHP_EOL;\necho any_int(1, 2, -18) . PHP_EOL;\necho any_int(1, 2, -19)\
    \ . PHP_EOL;\necho any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpe9jopyd9.php
    on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ == $y + $z || $y == $x + $z || $z == $x + $y) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1, 2, 1) . PHP_EOL; // true\n\
    echo any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1, 2, -1) . PHP_EOL; //\
    \ false\necho any_int(1, 2, '1') . PHP_EOL; // false\necho any_int(1, 2, 'a')\
    \ . PHP_EOL; // false\necho any_int(1, 2, '1.0') . PHP_EOL; // false\necho any_int(1,\
    \ 2, 'a1') . PHP_EOL; // false\necho any_int(1, 2, '1a') . PHP_EOL; // false\n\
    echo any_int(1, 2, 'a1a') . PHP_EOL; // false\necho any_int(1, 2, '1a1') . PHP_EOL;\
    \ // false\necho any_int(1, 2, '1.0a') . PHP_EOL; // false\necho any_int(1, 2,\
    \ 'a1.0') . PHP_EOL; // false\necho any_int(1, 2, '1.0a1.0') . PHP_EOL; // false\n\
    echo any_int(1, 2, '1.0a1') . PHP_EOL; // false\necho any_int(1, 2, '1a1.0') .\
    \ PHP_EOL; // false\necho any_int(1, 2, '1.0a1.0') . PHP_EOL; // false\necho any_int(1,\
    \ 2, '1.0\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "1.0", expecting ")" in /tmp/tmpst1bdpt5.php
    on line 36

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 1, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 1, 1) . \"\\n\"; // false\necho any_int(1, 2, \"2\") . \"\\n\"; // false\necho\
    \ any_int(1, 2, \"3\") . \"\\n\"; // false\necho any_int(1, 2, \"1\") . \"\\n\"\
    ; // false\necho any_int(1, 2, \"4\") . \"\\n\"; // false\necho any_int(1, 2,\
    \ \"5\") . \"\\n\"; // false\necho any_int(1, 2, \"6\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"7\") . \"\\n\"; // false\necho any_int(1, 2, \"8\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"9\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"10\") . \"\\n\"; // false\necho any_int(1, 2, \"11\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"12\") . \"\\n\"; // false\necho any_int(1, 2, \"13\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"14\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"15\") . \"\\n\"; // false\necho any_int(1, 2, \"16\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"17\") . \"\\n\"; // false\necho any_int(1, 2, \"18\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"19\") . \"\\n\"; // false\necho any_int(1,\
    \ 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpzxzslaj_.php
    on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(5,\
    \ 4, 9) . \"\\n\";\necho any_int(5, 4, 10) . \"\\n\";\necho any_int(5, 4, 3) .\
    \ \"\\n\";\necho any_int(5, 4, 2) . \"\\n\";\necho any_int(5, 4, 1) . \"\\n\"\
    ;\necho any_int(5, 4, 0) . \"\\n\";\necho any_int(5, 4, -1) . \"\\n\";\necho any_int(5,\
    \ 4, -2) . \"\\n\";\necho any_int(5, 4, -3) . \"\\n\";\necho any_int(5, 4, -4)\
    \ . \"\\n\";\necho any_int(5, 4, -5) . \"\\n\";\necho any_int(5, 4, -6) . \"\\\
    n\";\necho any_int(5, 4, -7) . \"\\n\";\necho any_int(5, 4, -8) . \"\\n\";\necho\
    \ any_int(5, 4, -9) . \"\\n\";\necho any_int(5, 4, -10) . \"\\n\";\necho any_int(5,\
    \ 4, -11) . \"\\n\";\necho any_int(5, 4, -12) . \"\\n\";\necho any_int(5, 4, -13)\
    \ . \"\\n\";\necho any_int(5, 4, -14) . \"\\n\";\necho any_int(5, 4, -15) . \"\
    \\n\";\necho any_int(5, 4, -16) . \"\\n\";\necho any_int(5, 4, -17) . \"\\n\"\
    ;\necho any_int(5, 4, -18) . \"\\n\";\necho any_int(5, 4, -19) . \"\\n\";\necho\
    \ any_int(5, 4, -20) . \"\\n\";\necho\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpb0kxxs08.php on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 2, 1) .\
    \ \"\\n\";\necho any_int(1, 2, 0) . \"\\n\";\necho any_int(1, 2, -1) . \"\\n\"\
    ;\necho any_int(1, 2, -2) . \"\\n\";\necho any_int(1, 2, -3) . \"\\n\";\necho\
    \ any_int(1, 2, -4) . \"\\n\";\necho any_int(1, 2, -5) . \"\\n\";\necho any_int(1,\
    \ 2, -6) . \"\\n\";\necho any_int(1, 2, -7) . \"\\n\";\necho any_int(1, 2, -8)\
    \ . \"\\n\";\necho any_int(1, 2, -9) . \"\\n\";\necho any_int(1, 2, -10) . \"\\\
    n\";\necho any_int(1, 2, -11) . \"\\n\";\necho any_int(1, 2, -12) . \"\\n\";\n\
    echo any_int(1, 2, -13) . \"\\n\";\necho any_int(1, 2, -14) . \"\\n\";\necho any_int(1,\
    \ 2, -15) . \"\\n\";\necho any_int(1, 2, -16) . \"\\n\";\necho any_int(1, 2, -17)\
    \ . \"\\n\";\necho any_int(1, 2, -18) . \"\\n\";\necho any_int(1, 2, -19) . \"\
    \\n\";\necho any_int(1, 2, -20) . \"\\n\";\necho any_int(1, 2, -21) . \"\\n\"\
    ;\necho any_int(1, 2, -22) . \"\\n\";\necho any_int(1, 2, -23) . \"\\n\";\necho\
    \ any_int\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpskml66bi.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"<br>\"; // false\necho any_int(1, 2, 2) . \"<br>\"; // true\necho\
    \ any_int(1, 2, 1) . \"<br>\"; // true\necho any_int(1, 2, 0) . \"<br>\"; // false\n\
    echo any_int(1, 2, -1) . \"<br>\"; // false\necho any_int(1, 2, \"2\") . \"<br>\"\
    ; // false\necho any_int(1, 2, \"1\") . \"<br>\"; // false\necho any_int(1, 2,\
    \ \"0\") . \"<br>\"; // false\necho any_int(1, 2, \"-1\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"a\") . \"<br>\"; // false\necho any_int(1, 2, \"b\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"c\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"d\") . \"<br>\"; // false\necho any_int(1, 2, \"e\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"f\") . \"<br>\"; // false\necho any_int(1, 2, \"g\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"h\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"i\") . \"<br>\"; // false\necho any_int(1, 2, \"j\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"k\") . \"<br>\"; // false\necho any_int(1, 2, \"l\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"m\") . \"<br>\"; // false\necho\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpx1mjdgvi.php on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 4) . PHP_EOL; // true\necho any_int(1, 2, \"3\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"a\") . PHP_EOL; // false\necho any_int(1, 2, \"1\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"2\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"3\") . PHP_EOL; // false\necho any_int(1, 2, \"4\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"5\") . PHP_EOL; // false\necho any_int(1, 2, \"6\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"7\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"8\") . PHP_EOL; // false\necho any_int(1, 2, \"9\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"10\") . PHP_EOL; // false\necho any_int(1, 2, \"11\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"12\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"13\") . PHP_EOL; // false\necho any_int(1, 2, \"14\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"15\") . PHP_EOL; // false\necho any_int(1, 2, \"16\") . PHP_EOL;\
    \ // false\necho any_int\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpeqil9v1_.php on line 38

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyg3qfq9m.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1, 2, 1) . PHP_EOL; // true\n\
    echo any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1, 2, -1) . PHP_EOL; //\
    \ false\necho any_int(1, 2, \"1\") . PHP_EOL; // false\necho any_int(1, 2, \"\
    2\") . PHP_EOL; // false\necho any_int(1, 2, \"3\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"4\") . PHP_EOL; // false\necho any_int(1, 2, \"5\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"6\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"7\") . PHP_EOL; // false\necho any_int(1, 2, \"8\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"9\") . PHP_EOL; // false\necho any_int(1, 2, \"10\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"11\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"12\") . PHP_EOL; // false\necho any_int(1, 2, \"13\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"14\") . PHP_EOL; // false\necho any_int(1, 2, \"15\") . PHP_EOL;\
    \ // false\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpj_jlrtq1.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\necho any_int(1,\
    \ 2, \"3\") . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 5)\
    \ . PHP_EOL;\necho any_int(1, 2, 6) . PHP_EOL;\necho any_int(1, 2, 7) . PHP_EOL;\n\
    echo any_int(1, 2, 8) . PHP_EOL;\necho any_int(1, 2, 9) . PHP_EOL;\necho any_int(1,\
    \ 2, 10) . PHP_EOL;\necho any_int(1, 2, 11) . PHP_EOL;\necho any_int(1, 2, 12)\
    \ . PHP_EOL;\necho any_int(1, 2, 13) . PHP_EOL;\necho any_int(1, 2, 14) . PHP_EOL;\n\
    echo any_int(1, 2, 15) . PHP_EOL;\necho any_int(1, 2, 16) . PHP_EOL;\necho any_int(1,\
    \ 2, 17) . PHP_EOL;\necho any_int(1, 2, 18) . PHP_EOL;\necho any_int(1, 2, 19)\
    \ . PHP_EOL;\necho any_int(1, 2, 20) . PHP_EOL;\necho any_int(1, 2, 21) . PHP_EOL;\n\
    echo any_int(1, 2, 22) . PHP_EOL;\necho any_int(1, 2, 23) . PHP_EOL;\necho any_int(1,\
    \ 2, 24) . PHP_EOL;\necho any_int(1\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp1qmpemly.php
    on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2ne168_.php:60\n\
    Stack trace:\n#0 /tmp/tmpp2ne168_.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpp2ne168_.php\
    \ on line 60\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxa3ua30.php:21\n\
    Stack trace:\n#0 /tmp/tmpfxa3ua30.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfxa3ua30.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; //\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxt0ctoyt.php:43\nStack trace:\n#0 /tmp/tmpxt0ctoyt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxt0ctoyt.php on line 43\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; //\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxt0ctoyt.php:43\nStack trace:\n#0 /tmp/tmpxt0ctoyt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxt0ctoyt.php on line 43\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(2,\
    \ 3, 4) . PHP_EOL; // false\necho any_int(2, 3, 5) . PHP_EOL; // true\necho any_int(2,\
    \ 3, 6) . PHP_EOL; // false\necho any_int(2, 3, 7) . PHP_EOL; // true\necho any_int(2,\
    \ 3, 8) . PHP_EOL; // false\necho any_int(2, 3, 9) . PHP_EOL; // true\necho any_int(2,\
    \ 3, 10) . PHP_EOL; // false\necho any_int(2, 3, 11) . PHP_EOL; // true\necho\
    \ any_int(2, 3, 12) . PHP_EOL; // false\necho any_int(2, 3, 13) . PHP_EOL; //\
    \ true\necho any_int(2, 3, 14) . PHP_EOL; // false\necho any_int(2, 3, 15) . PHP_EOL;\
    \ // true\necho any_int(2, 3, 16) . PHP_EOL; // false\necho any_int(2, 3, 17)\
    \ . PHP_EOL; // true\necho any_int(2, 3, 18) . PHP_EOL; // false\necho any_int(2,\
    \ 3, 19) . PHP_EOL; // true\necho any_int(2, 3, 20) . PHP_EOL; // false\necho\
    \ any_int(2, 3, 21) . PHP_EOL; // true\necho any_int(2, 3, 22) . PHP_EOL; // false\n\
    echo any_int(2, 3, 23) . PHP_EOL; // true\necho any_int(2, 3, 24) . PHP_EOL; //\
    \ false\necho any_int(2, 3, 25) . PHP_EOL; // true\necho any_int(2, 3, 26) . PHP_EOL;\
    \ // false\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpy6ehecfv.php:44\nStack trace:\n#0 /tmp/tmpy6ehecfv.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy6ehecfv.php on line 44\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp8gofah0.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo__3t6v4.php:25\n\
    Stack trace:\n#0 /tmp/tmpo__3t6v4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo__3t6v4.php\
    \ on line 25\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(2,\
    \ 3, 4);\necho \"<br>\";\necho any_int(2, 3, 5);\necho \"<br>\";\necho any_int(2,\
    \ 3, 6);\necho \"<br>\";\necho any_int(2, 3, 7);\necho \"<br>\";\necho any_int(2,\
    \ 3, 8);\necho \"<br>\";\necho any_int(2, 3, 9);\necho \"<br>\";\necho any_int(2,\
    \ 3, 10);\necho \"<br>\";\necho any_int(2, 3, 11);\necho \"<br>\";\necho any_int(2,\
    \ 3, 12);\necho \"<br>\";\necho any_int(2, 3, 13);\necho \"<br>\";\necho any_int(2,\
    \ 3, 14);\necho \"<br>\";\necho any_int(2, 3, 15);\necho \"<br>\";\necho any_int(2,\
    \ 3, 16);\necho \"<br>\";\necho any_int(2, 3, 17);\necho \"<br>\";\necho any_int(2,\
    \ 3, 18);\necho \"<br>\";\necho any_int(2, 3, 19);\necho \"<br>\";\necho any_int(2,\
    \ 3, 20);\necho \"<br>\";\necho any_int(2, 3, 21);\necho \"<br>\";\necho any_int(2,\
    \ 3, 22);\necho \"<br>\";\necho any_int(2, 3, 23);\necho \"<br>\";\necho any_int(2,\
    \ 3, 24);\necho \"<br>\";\necho any_int(2, 3, 25);\necho \"<br>\";\necho any_int(2,\
    \ 3, 26);\necho \"<br>\";\necho any_int(2, 3, 27);\necho \"<br>\";\necho any_int(2,\
    \ 3, 28);\necho \"<br>\";\necho any_int(2, 3,\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpf4or0j6r.php on line 65

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; //\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxt0ctoyt.php:43\nStack trace:\n#0 /tmp/tmpxt0ctoyt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxt0ctoyt.php on line 43\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 4, 6) . \"\\n\";\necho any_int(2,\
    \ 4, \"6\") . \"\\n\";\necho any_int(2, 4, \"6.0\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.1\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpb5zr1tjm.php
    on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3);\necho '<br>';\necho any_int(1,\
    \ 2, 2);\necho '<br>';\necho any_int(1, 2, 4);\necho '<br>';\necho any_int(1,\
    \ 2, 'a');\necho '<br>';\necho any_int(1, 2, '1');\necho '<br>';\necho any_int(1,\
    \ 2, 1.5);\necho '<br>';\necho any_int(1, 2, '1.5');\necho '<br>';\necho any_int(1,\
    \ 2, '1.0');\necho '<br>';\necho any_int(1, 2, '1.0e1');\necho '<br>';\necho any_int(1,\
    \ 2, '1.0e0');\necho '<br>';\necho any_int(1, 2, '1.0e-1');\necho '<br>';\necho\
    \ any_int(1, 2, '1.0e+1');\necho '<br>';\necho any_int(1, 2, '1.0e-0');\necho\
    \ '<br>';\necho any_int(1, 2, '1.0e+0');\necho '<br>';\necho any_int(1, 2, '1.0e+0');\n\
    echo '<br>';\necho any_int(1, 2, '1.0e+0');\necho '<br>';\necho any_int(1, 2,\
    \ '1.0e+0');\necho '<br>';\necho any_int(1, 2, '1.0e+0');\necho '<br>';\necho\
    \ any_int(1, 2, '1\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "1", expecting ")" in /tmp/tmp8_wvm5s6.php
    on line 54

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 3.5) . PHP_EOL; // false\necho any_int(1, 2, 1) . PHP_EOL; //\
    \ true\necho any_int(1, 2, -1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL;\
    \ // true\necho any_int(1, 2, \"1\") . PHP_EOL; // false\necho any_int(1, 2, \"\
    a\") . PHP_EOL; // false\necho any_int(1, 2, \"1a\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"a1\") . PHP_EOL; // false\necho any_int(1, 2, \"\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, null) . PHP_EOL; // false\necho any_int(1, 2, true)\
    \ . PHP_EOL; // false\necho any_int(1, 2, false) . PHP_EOL; // false\necho any_int(1,\
    \ 2, array()) . PHP_EOL; // false\necho any_int(1, 2, array(1)) . PHP_EOL; //\
    \ false\necho any_int(1, 2, array(1, 2)) . PHP_EOL; // false\necho any_int(1,\
    \ 2, array(1, 2, 3)) . PHP_EOL; // false\necho any_int(1, 2, array(1, 2, 3, 4))\
    \ . PHP_EOL; // false\necho any_int(1, 2, array(1, 2, 3, 4, 5)) . PHP_EOL; //\
    \ false\necho any\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpg_ukzk5c.php on line 38

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho any_int(1,\
    \ 2, 2) . \"\\n\"; // true\necho any_int(1, 1, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 1, 1) . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"a\") . \"\\n\"; // false\necho any_int(1, \"a\", 2) . \"\\n\"; // false\n\
    echo any_int(\"a\", 1, 2) . \"\\n\"; // false\necho any_int(1, 2, 1.5) . \"\\\
    n\"; // false\necho any_int(1, 2.5, 1) . \"\\n\"; // false\necho any_int(1.5,\
    \ 2, 1) . \"\\n\"; // false\necho any_int(1, 2, 0) . \"\\n\"; // true\necho any_int(0,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 0, 2) . \"\\n\"; // true\necho any_int(0,\
    \ 0, 0) . \"\\n\"; // false\necho any_int(0, 0, 1) . \"\\n\"; // true\necho any_int(0,\
    \ 1, 0) . \"\\n\"; // true\necho any_int(1, 0, 0) . \"\\n\"; // true\necho any_int(0,\
    \ 0, -1) . \"\\n\"; // false\necho any_int(0, -1, 0) . \"\\n\"; // false\necho\
    \ any_int(-1, 0, 0) . \"\\n\"; // false\necho any_int(0, -1, 1) . \"\\n\"; //\
    \ true\necho any_int(-1, 0, 1) . \"\\n\"; // true\necho any_int(0, 1, -1\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpsdiys03x.php
    on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho \"<br>\";\necho any_int(1, 2, 4);\necho \"<br>\";\necho any_int(1,\
    \ 2, 2);\necho \"<br>\";\necho any_int(1, 2, \"2\");\necho \"<br>\";\necho any_int(1,\
    \ 2, \"a\");\necho \"<br>\";\necho any_int(1, 2, \"1\");\necho \"<br>\";\necho\
    \ any_int(1, 2, \"1.1\");\necho \"<br>\";\necho any_int(1, 2, \"1.0\");\necho\
    \ \"<br>\";\necho any_int(1, 2, \"1.1\");\necho \"<br>\";\necho any_int(1, 2,\
    \ \"1.0\");\necho \"<br>\";\necho any_int(1, 2, \"1.1\");\necho \"<br>\";\necho\
    \ any_int(1, 2, \"1.0\");\necho \"<br>\";\necho any_int(1, 2, \"1.1\");\necho\
    \ \"<br>\";\necho any_int(1, 2, \"1.0\");\necho \"<br>\";\necho any_int(1, 2,\
    \ \"1.1\");\necho \"<br>\";\necho any_int(1, 2, \"1.0\");\necho \"<br>\";\necho\
    \ any_int(1, 2, \"1.1\");\necho \"<br>\";\necho any_int(1, 2, \"1.0\");\necho\
    \ \"<br>\";\necho any_int(1, 2, \"1.1\");\necho \"<br>\";\necho any_int(1, 2,\
    \ \"1.0\");\necho \"<br>\";\necho any_int(1, 2, \"1.1\");\necho \"<br>\";\necho\
    \ any_int(1, 2, \"1.0\");\necho \"<br>\";\necho any_int(1, 2, \"1.\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmpp3ygl4v7.php
    on line 64

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp8gofah0.php on line 39

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 2, 0) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -1) . \"\\n\"; // false\necho any_int(1, 2, -2) . \"\\n\"; // true\necho\
    \ any_int(1, 2, -3) . \"\\n\"; // false\necho any_int(1, 2, -4) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -5) . \"\\n\"; // true\necho any_int(1, 2, -6) . \"\
    \\n\"; // false\necho any_int(1, 2, -7) . \"\\n\"; // false\necho any_int(1, 2,\
    \ -8) . \"\\n\"; // true\necho any_int(1, 2, -9) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -10) . \"\\n\"; // false\necho any_int(1, 2, -11) . \"\\n\"; // true\necho\
    \ any_int(1, 2, -12) . \"\\n\"; // false\necho any_int(1, 2, -13) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -14) . \"\\n\"; // true\necho any_int(1, 2, -15) .\
    \ \"\\n\"; // false\necho any_int(1, 2, -16) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -17) . \"\\n\"; // true\necho any_int(1, 2, -18) . \"\\n\"; // false\necho\
    \ any_int(1, 2, -19) . \"\\n\"; // false\necho any_int(1, 2, -20) . \"\\n\"; //\
    \ true\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmppn6t_1qp.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo__3t6v4.php:25\n\
    Stack trace:\n#0 /tmp/tmpo__3t6v4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo__3t6v4.php\
    \ on line 25\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 4); // true\necho any_int(1, 2, 1); // true\n\
    echo any_int(1, 2, 0); // false\necho any_int(1, 2, -1); // false\necho any_int(1,\
    \ 2, 1.5); // false\necho any_int(1, 2, \"1\"); // false\necho any_int(1, 2, \"\
    1.5\"); // false\necho any_int(1, 2, \"1,5\"); // false\necho any_int(1, 2, \"\
    1.5.5\"); // false\necho any_int(1, 2, \"1,5,5\"); // false\necho any_int(1, 2,\
    \ \"1.5,5\"); // false\necho any_int(1, 2, \"1,5.5\"); // false\necho any_int(1,\
    \ 2, \"1.5.5.5\"); // false\necho any_int(1, 2, \"1,5,5,5\"); // false\necho any_int(1,\
    \ 2, \"1.5,5,5\"); // false\necho any_int(1, 2, \"1,5.5,5\"); // false\necho any_int(1,\
    \ 2, \"1,5,5.5\"); // false\necho any_int(1, 2, \"1.5.5,5\"); // false\necho any_int(1,\
    \ 2, \"1.5,5.5\"); // false\necho any_int(1, 2, \"1,5.5.5\"); // false\necho any_int(1,\
    \ 2, \"1.5.5.5.5\"); // false\necho any_int(1, 2, \"1,5,5,5,5\"); // false\necho\
    \ any_int(1, 2, \"1.5,5,5,5\"); // false\necho any_int(1, 2, \"\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmpx9r3t8gi.php
    on line 44

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyg3qfq9m.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ == $y + $z || $y == $x + $z || $z == $x + $y) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho\
    \ any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1, 2, \"2\") . \"\\n\"; //\
    \ false\necho any_int(1, 2, \"a\") . \"\\n\"; // false\necho any_int(1, 2, \"\
    1\") . \"\\n\"; // false\necho any_int(1, 2, \"2.0\") . \"\\n\"; // false\necho\
    \ any_int(1, 2, \"2.1\") . \"\\n\"; // false\necho any_int(1, 2, \"2.2\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"2.3\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"2.4\") . \"\\n\"; // false\necho any_int(1, 2, \"2.5\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"2.6\") . \"\\n\"; // false\necho any_int(1, 2, \"2.7\") .\
    \ \"\\n\"; // false\necho any_int(1, 2, \"2.8\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"2.9\") . \"\\n\"; // false\necho any_int(1, 2, \"2.10\") . \"\\n\"; //\
    \ false\necho any_int(1, 2, \"2.11\") . \"\\n\"; // false\necho any_int(1, 2,\
    \ \"2.12\") . \"\\n\"; // false\necho any_int(1, 2, \"2.13\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"2.14\") . \"\\n\"; // false\necho any_int(1, 2, \"2.15\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmpht6u9ep0.php
    on line 44

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1, 2, -\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5qazr26r.php on line 49

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja93d_n3.php:21\n\
    Stack trace:\n#0 /tmp/tmpja93d_n3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpja93d_n3.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 4); // false\n\
    echo any_int(1, 2, 5); // true\necho any_int(1, 2, 6); // false\necho any_int(1,\
    \ 2, 7); // true\necho any_int(1, 2, 8); // false\necho any_int(1, 2, 9); // true\n\
    echo any_int(1, 2, 10); // false\necho any_int(1, 2, 11); // true\necho any_int(1,\
    \ 2, 12); // false\necho any_int(1, 2, 13); // true\necho any_int(1, 2, 14); //\
    \ false\necho any_int(1, 2, 15); // true\necho any_int(1, 2, 16); // false\necho\
    \ any_int(1, 2, 17); // true\necho any_int(1, 2, 18); // false\necho any_int(1,\
    \ 2, 19); // true\necho any_int(1, 2, 20); // false\necho any_int(1, 2, 21); //\
    \ true\necho any_int(1, 2, 22); // false\necho any_int(1, 2, 23); // true\necho\
    \ any_int(1, 2, 24); // false\necho any_int(1, 2, 25); // true\necho any_int(1,\
    \ 2, 26); // false\necho any_int(1, 2, 27); // true\necho any_int(1, 2, 28); //\
    \ false\necho any_int(1, 2, 29); // true\necho any_int(1, 2, 30); // false\necho\
    \ any_int(1, 2, 31); // true\necho any_int(1, 2, 32); // false\necho any_int(1,\
    \ 2, 33); // true\necho any_int(1, 2, 34);\nfunction candidate(...$args) {\n \
    \   return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdpih9bf.php:54\n\
    Stack trace:\n#0 /tmp/tmpvdpih9bf.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpvdpih9bf.php\
    \ on line 54\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(1, 2, 4) . \"\\n\";\necho any_int(1, 2, 1) .\
    \ \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 2, \"a\") . \"\\\
    n\";\necho any_int(1, 2, \"b\") . \"\\n\";\necho any_int(1, 2, \"c\") . \"\\n\"\
    ;\necho any_int(1, 2, \"d\") . \"\\n\";\necho any_int(1, 2, \"e\") . \"\\n\";\n\
    echo any_int(1, 2, \"f\") . \"\\n\";\necho any_int(1, 2, \"g\") . \"\\n\";\necho\
    \ any_int(1, 2, \"h\") . \"\\n\";\necho any_int(1, 2, \"i\") . \"\\n\";\necho\
    \ any_int(1, 2, \"j\") . \"\\n\";\necho any_int(1, 2, \"k\") . \"\\n\";\necho\
    \ any_int(1, 2, \"l\") . \"\\n\";\necho any_int(1, 2, \"m\") . \"\\n\";\necho\
    \ any_int(1, 2, \"n\") . \"\\n\";\necho any_int(1, 2, \"o\") . \"\\n\";\necho\
    \ any_int(1, 2, \"p\") . \"\\n\";\necho any_int(1, 2, \"q\") . \"\\n\";\necho\
    \ any_int(1, 2, \"r\") . \"\\n\";\necho any_int(1, 2, \"s\") . \"\\n\";\necho\
    \ any_int(1, 2, \"t\") . \"\\n\";\necho any_int(1, 2, \"u\") . \"\\n\";\necho\
    \ any_int(1, 2, \"v\") . \"\\n\";\necho any_int(1, 2, \"w\") . \"\\n\";\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpqxnhuswo.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 4, 6) . \"\\n\";\necho any_int(2,\
    \ 4, \"6\") . \"\\n\";\necho any_int(2, 4, \"6.0\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.1\") . \"\\n\";\necho any_int(2, 4, \"6.2\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.3\") . \"\\n\";\necho any_int(2, 4, \"6.4\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.5\") . \"\\n\";\necho any_int(2, 4, \"6.6\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.7\") . \"\\n\";\necho any_int(2, 4, \"6.8\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.9\") . \"\\n\";\necho any_int(2, 4, \"6.99\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.999\") . \"\\n\";\necho any_int(2, 4, \"6.9999\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.99999\") . \"\\n\";\necho any_int(2, 4, \"6.999999\") . \"\\n\";\necho\
    \ any_int(2, 4, \"6.9999999\") . \"\\n\";\necho any_int(2, 4, \"6.99999999\")\
    \ . \"\\n\";\necho any_int(2, 4, \"6.999999999\") . \"\\n\";\necho any_int(2,\
    \ 4, \"6.9999999999\") . \"\\n\";\necho any_int(2, 4, \"6.99999999999\") . \"\\\
    n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmphi7ososx.php on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ == $y + $z || $y == $x + $z || $z == $x + $y) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"<br>\"; // false\necho\
    \ any_int(1, 2, 2) . \"<br>\"; // true\necho any_int(1, 2, 1) . \"<br>\"; // true\n\
    echo any_int(1, 2, 0) . \"<br>\"; // false\necho any_int(1, 2, -1) . \"<br>\"\
    ; // false\necho any_int(1.5, 2, 3) . \"<br>\"; // false\necho any_int(1, 2.5,\
    \ 3) . \"<br>\"; // false\necho any_int(1, 2, 3.5) . \"<br>\"; // false\necho\
    \ any_int(1, 2, \"3\") . \"<br>\"; // false\necho any_int(1, 2, \"3.5\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"3,5\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"3 5\") . \"<br>\"; // false\necho any_int(1, 2, \"3 5\") . \"<br>\"; //\
    \ false\necho any_int(1, 2, \"3 5\") . \"<br>\"; // false\necho any_int(1, 2,\
    \ \"3 5\") . \"<br>\"; // false\necho any_int(1, 2, \"3 5\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"3 5\") . \"<br>\"; // false\necho any_int(1, 2, \"3 5\")\
    \ . \"<br>\"; // false\necho any_int(1, 2, \"3 5\") . \"<br>\"; // false\necho\
    \ any_int(1, 2, \"3 5\") . \"<br>\"; // false\necho any_int(1, 2,\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp64wjc640.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(5,\
    \ 4, 9);\necho any_int(5, 4, 10);\necho any_int(5, 4, 3);\necho any_int(5, 4,\
    \ 5);\necho any_int(5, 4, 6);\necho any_int(5, 4, 7);\necho any_int(5, 4, 8);\n\
    echo any_int(5, 4, 9);\necho any_int(5, 4, 10);\necho any_int(5, 4, 11);\necho\
    \ any_int(5, 4, 12);\necho any_int(5, 4, 13);\necho any_int(5, 4, 14);\necho any_int(5,\
    \ 4, 15);\necho any_int(5, 4, 16);\necho any_int(5, 4, 17);\necho any_int(5, 4,\
    \ 18);\necho any_int(5, 4, 19);\necho any_int(5, 4, 20);\necho any_int(5, 4, 21);\n\
    echo any_int(5, 4, 22);\necho any_int(5, 4, 23);\necho any_int(5, 4, 24);\necho\
    \ any_int(5, 4, 25);\necho any_int(5, 4, 26);\necho any_int(5, 4, 27);\necho any_int(5,\
    \ 4, 28);\necho any_int(5, 4, 29);\necho any_int(5, 4, 30);\necho any_int(5, 4,\
    \ 31);\necho any_int(5, 4, 32);\necho any_int(5, 4, 33);\necho any_int(5, 4, 34);\n\
    echo any_int(5, 4, 35);\necho any_int(5, 4, 36);\necho any_int(5, 4, 37);\necho\
    \ any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp41pmi720.php on line 55

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(3,\
    \ 4, 7) . PHP_EOL; // true\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 1, 1) . PHP_EOL; // false\necho any_int(1,\
    \ 1, 2) . PHP_EOL; // true\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 4) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 5) . PHP_EOL; // true\necho any_int(1, 2, 6) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 7) . PHP_EOL; // true\necho any_int(1, 2, 8) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 9) . PHP_EOL; // false\necho any_int(1, 2, 10) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 11) . PHP_EOL; // true\necho any_int(1, 2, 12) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 13) . PHP_EOL; // false\necho any_int(1, 2, 14) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 15) . PHP_EOL; // true\necho any_int(1, 2, 16) . PHP_EOL; // true\n\
    echo any_int(1, 2, 17) . PHP_EOL; // true\necho any_int(1, 2, 18) . PHP_EOL; //\
    \ false\necho any_int(1, 2, 19) . PHP_EOL\nfunction candidate(...$args) {\n  \
    \  return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpjpfhcr61.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 4) . PHP_EOL; // true\necho any_int(1, 2, \"3\") . PHP_EOL; //\
    \ false\necho any_int(1, 2, \"4\") . PHP_EOL; // false\necho any_int(1, 2, \"\
    5\") . PHP_EOL; // false\necho any_int(1, 2, \"6\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"7\") . PHP_EOL; // false\necho any_int(1, 2, \"8\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"9\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"10\") . PHP_EOL; // false\necho any_int(1, 2, \"11\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"12\") . PHP_EOL; // false\necho any_int(1, 2, \"13\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"14\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"15\") . PHP_EOL; // false\necho any_int(1, 2, \"16\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"17\") . PHP_EOL; // false\necho any_int(1, 2, \"18\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"19\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"20\") . PHP_EOL; // false\necho any_\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpp9397a9k.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpbtyvqavv.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyg3qfq9m.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(3,\
    \ 4, 5) . PHP_EOL; // true\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 1, 1) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 3) . PHP_EOL\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpvqr0md6p.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x == $y + $z) || ($y == $x + $z) || ($z == $x + $y)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, 1.5) . PHP_EOL; // false\necho\
    \ any_int(1, 2, '1') . PHP_EOL; // false\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cqofusg.php:28\n\
    Stack trace:\n#0 /tmp/tmp7cqofusg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7cqofusg.php\
    \ on line 28\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp8gofah0.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 1, 2) . PHP_EOL; // true\necho any_int(1, 2, 4) . PHP_EOL; // false\necho any_int(1,\
    \ 1, 1) . PHP_EOL; // true\necho any_int(1, 1, 0) . PHP_EOL; // true\necho any_int(1,\
    \ 2, \"3\") . PHP_EOL; // false\necho any_int(1, 2, 3.0) . PHP_EOL; // false\n\
    echo any_int(1, 2, \"3.0\") . PHP_EOL; // false\necho any_int(1, 2, \"3.0\") .\
    \ PHP_EOL; // false\necho any_int(1, 2, \"3.0\") . PHP_EOL; // false\necho any_int(1,\
    \ 2, \"3.0\") . PHP_EOL; // false\necho any_int(1, 2, \"3.0\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"3.0\") . PHP_EOL; // false\necho any_int(1, 2, \"3.0\") .\
    \ PHP_EOL; // false\necho any_int(1, 2, \"3.0\") . PHP_EOL; // false\necho any_int(1,\
    \ 2, \"3.0\") . PHP_EOL; // false\necho any_int(1, 2, \"3.0\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"3.0\") . PHP_EOL; // false\necho any_int(1, 2, \"3.0\") .\
    \ PHP_EOL; // false\necho any_int(1, 2, \"3.0\") . PHP_E\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpqhzg4u00.php on line 34

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 1, 1) . PHP_EOL; // true\necho any_int(1, 1, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(2, 1, 1) . PHP_EOL; // true\necho any_int(1,\
    \ 1, 0) . PHP_EOL; // true\necho any_int(1, 0, 1) . PHP_EOL; // true\necho any_int(0,\
    \ 1, 1) . PHP_EOL; // true\necho any_int(1, 1, -1) . PHP_EOL; // true\necho any_int(1,\
    \ -1, 1) . PHP_EOL; // true\necho any_int(-1, 1, 1) . PHP_EOL; // true\necho any_int(1,\
    \ 1, 1.1) . PHP_EOL; // false\necho any_int(1, 1, \"1\") . PHP_EOL; // false\n\
    echo any_int(1, 1, \"one\") . PHP_EOL; // false\necho any_int(1, 1, \"\") . PHP_EOL;\
    \ // false\necho any_int(1, 1, null) . PHP_EOL; // false\necho any_int(1, 1, true)\
    \ . PHP_EOL; // false\necho any_int(1, 1, false) . PHP_EOL; // false\necho any_int(1,\
    \ 1, array()) . PHP_EOL; // false\necho any_int(1, 1, array(1)) . PHP_EOL; //\
    \ false\necho any_int(1, 1, array(1, 2)) . PHP_EOL; // false\necho any_int(1,\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpw8pkgk1b.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(2,\
    \ 3, 4);\necho any_int(2, 3, 5);\necho any_int(2, 3, 6);\necho any_int(2, 3, 7);\n\
    echo any_int(2, 3, 8);\necho any_int(2, 3, 9);\necho any_int(2, 3, 10);\necho\
    \ any_int(2, 3, 11);\necho any_int(2, 3, 12);\necho any_int(2, 3, 13);\necho any_int(2,\
    \ 3, 14);\necho any_int(2, 3, 15);\necho any_int(2, 3, 16);\necho any_int(2, 3,\
    \ 17);\necho any_int(2, 3, 18);\necho any_int(2, 3, 19);\necho any_int(2, 3, 20);\n\
    echo any_int(2, 3, 21);\necho any_int(2, 3, 22);\necho any_int(2, 3, 23);\necho\
    \ any_int(2, 3, 24);\necho any_int(2, 3, 25);\necho any_int(2, 3, 26);\necho any_int(2,\
    \ 3, 27);\necho any_int(2, 3, 28);\necho any_int(2, 3, 29);\necho any_int(2, 3,\
    \ 30);\necho any_int(2, 3, 31);\necho any_int(2, 3, 32);\necho any_int(2, 3, 33);\n\
    echo any_int(2, 3, 34);\necho any_int(2, 3, 35);\necho any_int(2, 3, 36);\necho\
    \ any_int(2, 3, 37);\necho any_int(2, 3, 38);\necho any_int(2, 3, 39);\necho any_int(2,\
    \ 3, 40);\necho any_int(2, 3, 41);\necho any_\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpwx30zt9q.php on line 53

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 1, 2) . PHP_EOL; // true\necho any_int(1, 2, 1) . PHP_EOL; // true\necho any_int(2,\
    \ 1, 1) . PHP_EOL; // true\necho any_int(2, 2, 1) . PHP_EOL; // true\necho any_int(2,\
    \ 1, 2) . PHP_EOL; // true\necho any_int(1, 1, 1) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 'a') . PHP_EOL; // false\necho any_int(1, 'a', 2) . PHP_EOL; // false\necho\
    \ any_int('a', 1, 2) . PHP_EOL; // false\necho any_int(1, 2, -3) . PHP_EOL; //\
    \ false\necho any_int(1, -3, 2) . PHP_EOL; // false\necho any_int(-3, 1, 2) .\
    \ PHP_EOL; // false\necho any_int(1, 2, 3.5) . PHP_EOL; // false\necho any_int(1,\
    \ 2.5, 3) . PHP_EOL; // false\necho any_int(1.5, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, -3.5) . PHP_EOL; // false\necho any_int(1, -3.5, 2) . PHP_EOL;\
    \ // false\necho any_int(-3.5, 1, 2) . PHP_EOL; // false\necho any_int(1, 2, '3')\
    \ . PHP_EOL; // true\necho any_int(1, '3', 2) . PHP_EOL; // true\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\n\n\nFatal error: Uncaught TypeError: Unsupported operand\
    \ types: int + string in /tmp/tmpdat75q_b.php:7\nStack trace:\n#0 /tmp/tmpdat75q_b.php(21):\
    \ any_int(1, 2, 'a')\n#1 {main}\n  thrown in /tmp/tmpdat75q_b.php on line 7\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 5);\necho any_int(2, 3, 6);\n\
    echo any_int(2, 3, 7);\necho any_int(2, 3, 8);\necho any_int(2, 3, 9);\necho any_int(2,\
    \ 3, 10);\necho any_int(2, 3, 11);\necho any_int(2, 3, 12);\necho any_int(2, 3,\
    \ 13);\necho any_int(2, 3, 14);\necho any_int(2, 3, 15);\necho any_int(2, 3, 16);\n\
    echo any_int(2, 3, 17);\necho any_int(2, 3, 18);\necho any_int(2, 3, 19);\necho\
    \ any_int(2, 3, 20);\necho any_int(2, 3, 21);\necho any_int(2, 3, 22);\necho any_int(2,\
    \ 3, 23);\necho any_int(2, 3, 24);\necho any_int(2, 3, 25);\necho any_int(2, 3,\
    \ 26);\necho any_int(2, 3, 27);\necho any_int(2, 3, 28);\necho any_int(2, 3, 29);\n\
    echo any_int(2, 3, 30);\necho any_int(2, 3, 31);\necho any_int(2, 3, 32);\necho\
    \ any_int(2, 3, 33);\necho any_int(2, 3, 34);\necho any_int(2, 3, 35);\necho any_int(2,\
    \ 3, 36);\necho any_int(2, 3, 37);\necho any_int(2, 3, 38);\necho any_int(2, 3,\
    \ 39);\necho\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpizt8zncm.php on line 54

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nvar_dump(any_int(1, 2, 3)); // false\nvar_dump(any_int(1,\
    \ 2, 4)); // true\nvar_dump(any_int(1, 2, 5)); // false\nvar_dump(any_int(1, 2,\
    \ 6)); // true\nvar_dump(any_int(1, 2, 7)); // false\nvar_dump(any_int(1, 2, 8));\
    \ // true\nvar_dump(any_int(1, 2, 9)); // false\nvar_dump(any_int(1, 2, 10));\
    \ // true\nvar_dump(any_int(1, 2, 11)); // false\nvar_dump(any_int(1, 2, 12));\
    \ // true\nvar_dump(any_int(1, 2, 13)); // false\nvar_dump(any_int(1, 2, 14));\
    \ // true\nvar_dump(any_int(1, 2, 15)); // false\nvar_dump(any_int(1, 2, 16));\
    \ // true\nvar_dump(any_int(1, 2, 17)); // false\nvar_dump(any_int(1, 2, 18));\
    \ // true\nvar_dump(any_int(1, 2, 19)); // false\nvar_dump(any_int(1, 2, 20));\
    \ // true\nvar_dump(any_int(1, 2, 21)); // false\nvar_dump(any_int(1, 2, 22));\
    \ // true\nvar_dump(any_int(1, 2, 23)); // false\nvar_dump(any_int(1, 2, 24));\
    \ // true\nvar_dump(any_int(1, 2, 25)); // false\nvar_dump(any_int(1, 2, 26));\
    \ // true\nvar_dump(any_int(1, 2, 27\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp2hb56_kr.php
    on line 43

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 1, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 4) . PHP_EOL; // false\necho any_int(1, 2, 0) . PHP_EOL; // true\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // true\necho any_int(1.5, 2, 1) . PHP_EOL; // false\necho\
    \ any_int(1, 2.5, 1) . PHP_EOL; // false\necho any_int(1, 2, 1.5) . PHP_EOL; //\
    \ false\necho any_int(1, 2, \"1\") . PHP_EOL; // false\necho any_int(1, 2, \"\
    1.5\") . PHP_EOL; // false\necho any_int(1, 2, \"1,5\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"1 5\") . PHP_EOL; // false\necho any_int(1, 2, \"1-5\") .\
    \ PHP_EOL; // false\necho any_int(1, 2, \"1+5\") . PHP_EOL; // false\necho any_int(1,\
    \ 2, \"1x5\") . PHP_EOL; // false\necho any_int(1, 2, \"1/5\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"1 5\") . PHP_EOL; // false\necho any_int(1, 2, \"1,5\") .\
    \ PHP_EOL; // false\necho any_int(1, 2, \"1.5\") . PHP_EOL; // false\necho any_\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpiddfw35w.php on line 36

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1n91mjp.php:21\n\
    Stack trace:\n#0 /tmp/tmpx1n91mjp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx1n91mjp.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpbtyvqavv.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 5);\necho any_int(2, 3, 6);\n\
    echo any_int(2, 3, 7);\necho any_int(2, 3, 8);\necho any_int(2, 3, 9);\necho any_int(2,\
    \ 3, 10);\necho any_int(2, 3, 11);\necho any_int(2, 3, 12);\necho any_int(2, 3,\
    \ 13);\necho any_int(2, 3, 14);\necho any_int(2, 3, 15);\necho any_int(2, 3, 16);\n\
    echo any_int(2, 3, 17);\necho any_int(2, 3, 18);\necho any_int(2, 3, 19);\necho\
    \ any_int(2, 3, 20);\necho any_int(2, 3, 21);\necho any_int(2, 3, 22);\necho any_int(2,\
    \ 3, 23);\necho any_int(2, 3, 24);\necho any_int(2, 3, 25);\necho any_int(2, 3,\
    \ 26);\necho any_int(2, 3, 27);\necho any_int(2, 3, 28);\necho any_int(2, 3, 29);\n\
    echo any_int(2, 3, 30);\necho any_int(2, 3, 31);\necho any_int(2, 3, 32);\necho\
    \ any_int(2, 3, 33);\necho any_int(2, 3, 34);\necho any_int(2, 3, 35);\necho any_int(2,\
    \ 3, 36);\necho any_int(2, 3, 37);\necho any_int(2, 3, 38);\necho any_int(2, 3,\
    \ 39);\necho\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpizt8zncm.php on line 54

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(2,\
    \ 3, 5);\necho any_int(2, 3, 4);\necho any_int(2, 3, 6);\necho any_int(2, 3, 7);\n\
    echo any_int(2, 3, 8);\necho any_int(2, 3, 9);\necho any_int(2, 3, 10);\necho\
    \ any_int(2, 3, 11);\necho any_int(2, 3, 12);\necho any_int(2, 3, 13);\necho any_int(2,\
    \ 3, 14);\necho any_int(2, 3, 15);\necho any_int(2, 3, 16);\necho any_int(2, 3,\
    \ 17);\necho any_int(2, 3, 18);\necho any_int(2, 3, 19);\necho any_int(2, 3, 20);\n\
    echo any_int(2, 3, 21);\necho any_int(2, 3, 22);\necho any_int(2, 3, 23);\necho\
    \ any_int(2, 3, 24);\necho any_int(2, 3, 25);\necho any_int(2, 3, 26);\necho any_int(2,\
    \ 3, 27);\necho any_int(2, 3, 28);\necho any_int(2, 3, 29);\necho any_int(2, 3,\
    \ 30);\necho any_int(2, 3, 31);\necho any_int(2, 3, 32);\necho any_int(2, 3, 33);\n\
    echo any_int(2, 3, 34);\necho any_int(2, 3, 35);\necho any_int(2, 3, 36);\necho\
    \ any_int(2, 3, 37);\necho any_int(2, 3, 38);\necho any_int(2, 3, 39);\necho any_int(2,\
    \ 3, 40);\necho any_int(2, 3, 41);\necho any_\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp1d41ud1t.php on line 53

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpuqmstier.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(2,\
    \ 3, 5);\necho any_int(2, 3, 6);\necho any_int(2, 3, 7);\necho any_int(2, 3, 8);\n\
    echo any_int(2, 3, 9);\necho any_int(2, 3, 10);\necho any_int(2, 3, 11);\necho\
    \ any_int(2, 3, 12);\necho any_int(2, 3, 13);\necho any_int(2, 3, 14);\necho any_int(2,\
    \ 3, 15);\necho any_int(2, 3, 16);\necho any_int(2, 3, 17);\necho any_int(2, 3,\
    \ 18);\necho any_int(2, 3, 19);\necho any_int(2, 3, 20);\necho any_int(2, 3, 21);\n\
    echo any_int(2, 3, 22);\necho any_int(2, 3, 23);\necho any_int(2, 3, 24);\necho\
    \ any_int(2, 3, 25);\necho any_int(2, 3, 26);\necho any_int(2, 3, 27);\necho any_int(2,\
    \ 3, 28);\necho any_int(2, 3, 29);\necho any_int(2, 3, 30);\necho any_int(2, 3,\
    \ 31);\necho any_int(2, 3, 32);\necho any_int(2, 3, 33);\necho any_int(2, 3, 34);\n\
    echo any_int(2, 3, 35);\necho any_int(2, 3, 36);\necho any_int(2, 3, 37);\necho\
    \ any_int(2, 3, 38);\necho any_int(2, 3, 39);\necho any_int(2, 3, 40);\necho any_int(2,\
    \ 3, 41);\necho any_int(2, 3, 42);\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdd7fcwb6.php:60\n\
    Stack trace:\n#0 /tmp/tmpdd7fcwb6.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpdd7fcwb6.php\
    \ on line 60\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 4) . \"<br>\";\necho any_int(2,\
    \ 3, 5) . \"<br>\";\necho any_int(2, 3, 6) . \"<br>\";\necho any_int(2, 3, 7)\
    \ . \"<br>\";\necho any_int(2, 3, 8) . \"<br>\";\necho any_int(2, 3, 9) . \"<br>\"\
    ;\necho any_int(2, 3, 10) . \"<br>\";\necho any_int(2, 3, 11) . \"<br>\";\necho\
    \ any_int(2, 3, 12) . \"<br>\";\necho any_int(2, 3, 13) . \"<br>\";\necho any_int(2,\
    \ 3, 14) . \"<br>\";\necho any_int(2, 3, 15) . \"<br>\";\necho any_int(2, 3, 16)\
    \ . \"<br>\";\necho any_int(2, 3, 17) . \"<br>\";\necho any_int(2, 3, 18) . \"\
    <br>\";\necho any_int(2, 3, 19) . \"<br>\";\necho any_int(2, 3, 20) . \"<br>\"\
    ;\necho any_int(2, 3, 21) . \"<br>\";\necho any_int(2, 3, 22) . \"<br>\";\necho\
    \ any_int(2, 3, 23) . \"<br>\";\necho any_int(2, 3, 24) . \"<br>\";\necho any_int(2,\
    \ 3, 25) . \"<br>\";\necho any_int(2, 3, 26) . \"<br>\";\necho any_int(2, 3, 27)\
    \ . \"<br>\";\necho any_int(2, 3, 28) . \"<\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmpst8_i7z4.php on line 48

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\necho any_int(1,\
    \ 2, 4) . PHP_EOL;\necho any_int(1, 2, \"3\") . PHP_EOL;\necho any_int(1, 2, \"\
    a\") . PHP_EOL;\necho any_int(1, 2, \"\") . PHP_EOL;\necho any_int(1, 2, null)\
    \ . PHP_EOL;\necho any_int(1, 2, []) . PHP_EOL;\necho any_int(1, 2, new stdClass())\
    \ . PHP_EOL;\necho any_int(1, 2, true) . PHP_EOL;\necho any_int(1, 2, false) .\
    \ PHP_EOL;\necho any_int(1, 2, \"1\") . PHP_EOL;\necho any_int(1, 2, \"2\") .\
    \ PHP_EOL;\necho any_int(1, 2, \"3\") . PHP_EOL;\necho any_int(1, 2, \"4\") .\
    \ PHP_EOL;\necho any_int(1, 2, \"5\") . PHP_EOL;\necho any_int(1, 2, \"6\") .\
    \ PHP_EOL;\necho any_int(1, 2, \"7\") . PHP_EOL;\necho any_int(1, 2, \"8\") .\
    \ PHP_EOL;\necho any_int(1, 2, \"9\") . PHP_EOL;\necho any_int(1, 2, \"10\") .\
    \ PHP_EOL;\necho any_int(1, 2, \"11\") . PHP_EOL;\necho any_int(1, 2, \"12\")\
    \ . PHP_EOL;\necho any_int(1, 2,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp0n_esx6_.php on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpbtyvqavv.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3) . \"<br>\"; // false\necho any_int(1, 2, 2) . \"<br>\"; // true\necho\
    \ any_int(1, 2, 1) . \"<br>\"; // true\necho any_int(1, 2, 0) . \"<br>\"; // false\n\
    echo any_int(1, 2, -1) . \"<br>\"; // false\necho any_int(1, 2, \"3\") . \"<br>\"\
    ; // false\necho any_int(1, 2, \"2\") . \"<br>\"; // false\necho any_int(1, 2,\
    \ \"1\") . \"<br>\"; // false\necho any_int(1, 2, \"0\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"-1\") . \"<br>\"; // false\necho any_int(1, 2, \"a\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"b\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"c\") . \"<br>\"; // false\necho any_int(1, 2, \"d\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"e\") . \"<br>\"; // false\necho any_int(1, 2, \"f\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"g\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"h\") . \"<br>\"; // false\necho any_int(1, 2, \"i\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"j\") . \"<br>\"; // false\necho any_int(1, 2, \"k\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"l\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"m\") . \"<br>\"; // false\necho any_int\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp5oor4c9n.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 5) . PHP_EOL;\necho any_int(2,\
    \ 3, 4) . PHP_EOL;\necho any_int(2, 3, 6) . PHP_EOL;\necho any_int(2, 3, 7) .\
    \ PHP_EOL;\necho any_int(2, 3, 8) . PHP_EOL;\necho any_int(2, 3, 9) . PHP_EOL;\n\
    echo any_int(2, 3, 10) . PHP_EOL;\necho any_int(2, 3, 11) . PHP_EOL;\necho any_int(2,\
    \ 3, 12) . PHP_EOL;\necho any_int(2, 3, 13) . PHP_EOL;\necho any_int(2, 3, 14)\
    \ . PHP_EOL;\necho any_int(2, 3, 15) . PHP_EOL;\necho any_int(2, 3, 16) . PHP_EOL;\n\
    echo any_int(2, 3, 17) . PHP_EOL;\necho any_int(2, 3, 18) . PHP_EOL;\necho any_int(2,\
    \ 3, 19) . PHP_EOL;\necho any_int(2, 3, 20) . PHP_EOL;\necho any_int(2, 3, 21)\
    \ . PHP_EOL;\necho any_int(2, 3, 22) . PHP_EOL;\necho any_int(2, 3, 23) . PHP_EOL;\n\
    echo any_int(2, 3, 24) . PHP_EOL;\necho any_int(2, 3, 25) . PHP_EOL;\necho any_int(2,\
    \ 3, 26) . PHP_EOL;\necho any_int(2,\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp_drx0hqd.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 4);\necho any_int(1, 2, 5);\n\
    echo any_int(1, 2, 6);\necho any_int(1, 2, 7);\necho any_int(1, 2, 8);\necho any_int(1,\
    \ 2, 9);\necho any_int(1, 2, 10);\necho any_int(1, 2, 11);\necho any_int(1, 2,\
    \ 12);\necho any_int(1, 2, 13);\necho any_int(1, 2, 14);\necho any_int(1, 2, 15);\n\
    echo any_int(1, 2, 16);\necho any_int(1, 2, 17);\necho any_int(1, 2, 18);\necho\
    \ any_int(1, 2, 19);\necho any_int(1, 2, 20);\necho any_int(1, 2, 21);\necho any_int(1,\
    \ 2, 22);\necho any_int(1, 2, 23);\necho any_int(1, 2, 24);\necho any_int(1, 2,\
    \ 25);\necho any_int(1, 2, 26);\necho any_int(1, 2, 27);\necho any_int(1, 2, 28);\n\
    echo any_int(1, 2, 29);\necho any_int(1, 2, 30);\necho any_int(1, 2, 31);\necho\
    \ any_int(1, 2, 32);\necho any_int(1, 2, 33);\necho any_int(1, 2, 34);\necho any_int(1,\
    \ 2, 35);\necho any_int(1, 2, 36);\necho any_int(1, 2, 37);\necho any_int(1, 2,\
    \ 38);\necho any_int(1, 2, 39);\n\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv3a2pwv.php:60\n\
    Stack trace:\n#0 /tmp/tmppv3a2pwv.php(70): test()\n#1 {main}\n  thrown in /tmp/tmppv3a2pwv.php\
    \ on line 60\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 4); // false\n\
    echo any_int(1, 2, 1); // true\necho any_int(1, 2, 0); // false\necho any_int(1,\
    \ 2, -1); // false\necho any_int(1, 2, -2); // false\necho any_int(1, 2, -3);\
    \ // false\necho any_int(1, 2, -4); // false\necho any_int(1, 2, -5); // false\n\
    echo any_int(1, 2, -6); // false\necho any_int(1, 2, -7); // false\necho any_int(1,\
    \ 2, -8); // false\necho any_int(1, 2, -9); // false\necho any_int(1, 2, -10);\
    \ // false\necho any_int(1, 2, -11); // false\necho any_int(1, 2, -12); // false\n\
    echo any_int(1, 2, -13); // false\necho any_int(1, 2, -14); // false\necho any_int(1,\
    \ 2, -15); // false\necho any_int(1, 2, -16); // false\necho any_int(1, 2, -17);\
    \ // false\necho any_int(1, 2, -18); // false\necho any_int(1, 2, -19); // false\n\
    echo any_int(1, 2, -20); // false\necho any_int(1, 2, -21); // false\necho any_int(1,\
    \ 2, -22); // false\necho any_int(1, 2, -23); // false\necho any_int(1, 2, -24);\
    \ // false\necho any_int(1, 2, -25); // false\necho any_int(1, 2, -26); // false\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9u2u3aq.php:52\n\
    Stack trace:\n#0 /tmp/tmpi9u2u3aq.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpi9u2u3aq.php\
    \ on line 52\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 4); // false\n\
    echo any_int(1, 2, 1); // true\necho any_int(1, 2, 0); // false\necho any_int(1,\
    \ 2, -1); // false\necho any_int(1, 2, -2); // false\necho any_int(1, 2, -3);\
    \ // false\necho any_int(1, 2, -4); // false\necho any_int(1, 2, -5); // false\n\
    echo any_int(1, 2, -6); // false\necho any_int(1, 2, -7); // false\necho any_int(1,\
    \ 2, -8); // false\necho any_int(1, 2, -9); // false\necho any_int(1, 2, -10);\
    \ // false\necho any_int(1, 2, -11); // false\necho any_int(1, 2, -12); // false\n\
    echo any_int(1, 2, -13); // false\necho any_int(1, 2, -14); // false\necho any_int(1,\
    \ 2, -15); // false\necho any_int(1, 2, -16); // false\necho any_int(1, 2, -17);\
    \ // false\necho any_int(1, 2, -18); // false\necho any_int(1, 2, -19); // false\n\
    echo any_int(1, 2, -20); // false\necho any_int(1, 2, -21); // false\necho any_int(1,\
    \ 2, -22); // false\necho any_int(1, 2, -23); // false\necho any_int(1, 2, -24);\
    \ // false\necho any_int(1, 2, -25); // false\necho any_int(1, 2, -26\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpa3ic8b6o.php
    on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(1, 2,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp_t421jpz.php on line 49

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpja93d_n3.php:21\n\
    Stack trace:\n#0 /tmp/tmpja93d_n3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpja93d_n3.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3);\necho any_int(1, 2, 2);\n\
    echo any_int(1, 2, 1);\necho any_int(1, 2, 0);\necho any_int(1, 2, \"3\");\necho\
    \ any_int(1, 2, \"a\");\necho any_int(1, 2, \"1\");\necho any_int(1, 2, \"2\"\
    );\necho any_int(1, 2, \"0\");\necho any_int(1, 2, \"b\");\necho any_int(1, 2,\
    \ \"c\");\necho any_int(1, 2, \"d\");\necho any_int(1, 2, \"e\");\necho any_int(1,\
    \ 2, \"f\");\necho any_int(1, 2, \"g\");\necho any_int(1, 2, \"h\");\necho any_int(1,\
    \ 2, \"i\");\necho any_int(1, 2, \"j\");\necho any_int(1, 2, \"k\");\necho any_int(1,\
    \ 2, \"l\");\necho any_int(1, 2, \"m\");\necho any_int(1, 2, \"n\");\necho any_int(1,\
    \ 2, \"o\");\necho any_int(1, 2, \"p\");\necho any_int(1, 2, \"q\");\necho any_int(1,\
    \ 2, \"r\");\necho any_int(1, 2, \"s\");\necho any_int(1, 2, \"t\");\necho any_int(1,\
    \ 2, \"u\");\necho any_int(1, 2, \"v\");\necho any_int(1, 2, \"w\");\necho any_int(1,\
    \ 2, \"x\");\necho any_int(1, 2,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpv9i3k6yy.php on line 51

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"<br>\"; // false\necho\
    \ any_int(1, 2, 2) . \"<br>\"; // true\necho any_int(1, 2, 1) . \"<br>\"; // true\n\
    echo any_int(1, 2, 0) . \"<br>\"; // false\necho any_int(1, 2, -1) . \"<br>\"\
    ; // false\necho any_int(1, 2, \"1\") . \"<br>\"; // false\necho any_int(1, 2,\
    \ \"2\") . \"<br>\"; // false\necho any_int(1, 2, \"3\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"4\") . \"<br>\"; // false\necho any_int(1, 2, \"5\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"6\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"7\") . \"<br>\"; // false\necho any_int(1, 2, \"8\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"9\") . \"<br>\"; // false\necho any_int(1, 2, \"10\") . \"\
    <br>\"; // false\necho any_int(1, 2, \"11\") . \"<br>\"; // false\necho any_int(1,\
    \ 2, \"12\") . \"<br>\"; // false\necho any_int(1, 2, \"13\") . \"<br>\"; // false\n\
    echo any_int(1, 2, \"14\") . \"<br>\"; // false\necho any_int(1, 2, \"15\") .\
    \ \"<br>\"; // false\necho any_int(1, 2, \"16\") . \"<br>\"; // false\necho any_int(\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp18tk9mnh.php on line 40

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 1);\necho any_int(1, 2, 2);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1, 2,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp7p6rlkxb.php on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5jamfvn6.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 1, 2) .\
    \ PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\necho any_int(2, 1, 1) . PHP_EOL;\n\
    echo any_int(1, 1, 1) . PHP_EOL;\necho any_int(1, 2, \"2\") . PHP_EOL;\necho any_int(1,\
    \ \"2\", \"2\") . PHP_EOL;\necho any_int(\"2\", \"2\", \"2\") . PHP_EOL;\necho\
    \ any_int(\"2\", \"2\", 2) . PHP_EOL;\necho any_int(\"2\", 2, 2) . PHP_EOL;\n\
    echo any_int(2, 2, 2) . PHP_EOL;\necho any_int(2, 2, \"2\") . PHP_EOL;\necho any_int(2,\
    \ \"2\", \"2\") . PHP_EOL;\necho any_int(\"2\", \"2\", \"2\") . PHP_EOL;\necho\
    \ any_int(\"2\", \"2\", 2) . PHP_EOL;\necho any_int(\"2\", 2, 2) . PHP_EOL;\n\
    echo any_int(2, 2, 2) . PHP_EOL;\necho any_int(2, 2, \"2\") . PHP_EOL;\necho any_int(2,\
    \ \"2\", \"2\") . PHP_EOL;\necho any_int(\"2\", \"2\", \"2\") . PHP_EOL;\necho\
    \ any_int(\"2\", \"2\", 2) . PHP_EOL;\necho any_int(\"2\", 2, 2) . PHP_EOL;\n\
    echo any_int(2, 2, 2) . PHP_EOL;\necho any_int(2, 2,\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp6ge7bmvv.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\n\
    echo any_int(1, 2, -1) . PHP_EOL;\necho any_int(1, 2, -2) . PHP_EOL;\necho any_int(1,\
    \ 2, -3) . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\necho any_int(1, 2, -5)\
    \ . PHP_EOL;\necho any_int(1, 2, -6) . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\n\
    echo any_int(1, 2, -8) . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\necho any_int(1,\
    \ 2, -10) . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\necho any_int(1, 2, -12)\
    \ . PHP_EOL;\necho any_int(1, 2, -13) . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\n\
    echo any_int(1, 2, -15) . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\necho any_int(1,\
    \ 2, -17) . PHP_EOL;\necho any_int(1, 2, -18) . PHP_EOL;\necho any_int(1, 2, -19)\
    \ . PHP_EOL;\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpw7t5ygmr.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(2, 3, 4) . \"\\n\";\necho any_int(1, 2, 1) .\
    \ \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(2, 2, 2) . \"\\n\"\
    ;\necho any_int(1, 2, 3) . \"\\n\";\necho any_int(1, 2, 4) . \"\\n\";\necho any_int(1,\
    \ 2, 5) . \"\\n\";\necho any_int(1, 2, 6) . \"\\n\";\necho any_int(1, 2, 7) .\
    \ \"\\n\";\necho any_int(1, 2, 8) . \"\\n\";\necho any_int(1, 2, 9) . \"\\n\"\
    ;\necho any_int(1, 2, 10) . \"\\n\";\necho any_int(1, 2, 11) . \"\\n\";\necho\
    \ any_int(1, 2, 12) . \"\\n\";\necho any_int(1, 2, 13) . \"\\n\";\necho any_int(1,\
    \ 2, 14) . \"\\n\";\necho any_int(1, 2, 15) . \"\\n\";\necho any_int(1, 2, 16)\
    \ . \"\\n\";\necho any_int(1, 2, 17) . \"\\n\";\necho any_int(1, 2, 18) . \"\\\
    n\";\necho any_int(1, 2, 19) . \"\\n\";\necho any_int(1, 2, 20) . \"\\n\";\necho\
    \ any_int(1, 2, 21) . \"\\n\";\necho any_int(1, 2, 22) . \"\\n\";\necho any_int(1,\
    \ 2, 23) . \"\\n\";\necho any_int(1, 2, 24) . \"\\n\";\necho any_int(1, 2, 25)\
    \ . \"\\n\";\necho any_int(1, 2, 26)\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpa8a6wnng.php on line 43

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // false\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // false\necho any_int(1, 2, -6) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -8) . PHP_EOL; // false\necho any_int(1, 2, -9) . PHP_EOL; // false\necho\
    \ any_int(1, 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13)\
    \ . PHP_EOL; // false\necho any_int(1, 2, -14) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -15) . PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho\
    \ any_int(1, 2, -17) . PHP_EOL; // false\n\nfunction candidate(...$args) {\n \
    \   return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpj5f5qlsw.php:47\nStack trace:\n#0 /tmp/tmpj5f5qlsw.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj5f5qlsw.php on line 47\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpd6a7b770.php on line 49

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nvar_dump(any_int(1, 2, 3));\nvar_dump(any_int(1,\
    \ 2, 2));\nvar_dump(any_int(1, 2, 1));\nvar_dump(any_int(1, 2, 0));\nvar_dump(any_int(1,\
    \ 2, \"3\"));\nvar_dump(any_int(1, 2, \"2\"));\nvar_dump(any_int(1, 2, \"1\"));\n\
    var_dump(any_int(1, 2, \"0\"));\nvar_dump(any_int(1, 2, \"\"));\nvar_dump(any_int(1,\
    \ 2, null));\nvar_dump(any_int(1, 2, \"a\"));\nvar_dump(any_int(1, 2, \"b\"));\n\
    var_dump(any_int(1, 2, \"c\"));\nvar_dump(any_int(1, 2, \"d\"));\nvar_dump(any_int(1,\
    \ 2, \"e\"));\nvar_dump(any_int(1, 2, \"f\"));\nvar_dump(any_int(1, 2, \"g\"));\n\
    var_dump(any_int(1, 2, \"h\"));\nvar_dump(any_int(1, 2, \"i\"));\nvar_dump(any_int(1,\
    \ 2, \"j\"));\nvar_dump(any_int(1, 2, \"k\"));\nvar_dump(any_int(1, 2, \"l\"));\n\
    var_dump(any_int(1, 2, \"m\"));\nvar_dump(any_int(1, 2, \"n\"));\nvar_dump(any_int(1,\
    \ 2, \"o\"));\nvar_dump(any_int\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp0_bvjyn3.php
    on line 44

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho\
    \ any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1, 2, 1) . \"\\n\"; // true\n\
    echo any_int(1, 2, 0) . \"\\n\"; // false\necho any_int(1, 2, -1) . \"\\n\"; //\
    \ false\necho any_int(1, 2, 4) . \"\\n\"; // false\necho any_int(1, 2, 'a') .\
    \ \"\\n\"; // false\necho any_int(1, 2, '1') . \"\\n\"; // false\necho any_int(1,\
    \ 2, '2') . \"\\n\"; // false\necho any_int(1, 2, '3') . \"\\n\"; // false\necho\
    \ any_int(1, 2, '4') . \"\\n\"; // false\necho any_int(1, 2, '5') . \"\\n\"; //\
    \ false\necho any_int(1, 2, '6') . \"\\n\"; // false\necho any_int(1, 2, '7')\
    \ . \"\\n\"; // false\necho any_int(1, 2, '8') . \"\\n\"; // false\necho any_int(1,\
    \ 2, '9') . \"\\n\"; // false\necho any_int(1, 2, '10') . \"\\n\"; // false\n\
    echo any_int(1, 2, '11') . \"\\n\"; // false\necho any_int(1, 2, '12') . \"\\\
    n\"; // false\necho any_int(1, 2, '13') . \"\\n\"; // false\necho any_int(1, 2,\
    \ '14') . \"\\n\"; // false\necho any_int(1, 2, '15') . \"\\n\"; // false\necho\
    \ any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpmtv7gti5.php
    on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 4);\necho any_int(1, 2, 1);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1, 2, -\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp60fg7y1p.php on line 49

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho any_int(1,\
    \ 2, 2) . \"\\n\"; // true\necho any_int(1, 2, 1) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 0) . \"\\n\"; // false\necho any_int(1, 2, -1) . \"\\n\"; // false\necho\
    \ any_int(1, 2, \"3\") . \"\\n\"; // false\necho any_int(1, 2, \"2\") . \"\\n\"\
    ; // false\necho any_int(1, 2, \"1\") . \"\\n\"; // false\necho any_int(1, 2,\
    \ \"0\") . \"\\n\"; // false\necho any_int(1, 2, \"-1\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"\") . \"\\n\"; // false\necho any_int(1, 2, null) . \"\\\
    n\"; // false\necho any_int(1, 2, true) . \"\\n\"; // false\necho any_int(1, 2,\
    \ false) . \"\\n\"; // false\necho any_int(1, 2, array()) . \"\\n\"; // false\n\
    echo any_int(1, 2, array(1, 2, 3)) . \"\\n\"; // false\necho any_int(1, 2, new\
    \ stdClass()) . \"\\n\"; // false\necho any_int(1, 2, \"3\", \"3\") . \"\\n\"\
    ; // false\necho any_int(1, 2, \"2\", \"2\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"1\", \"1\") . \"\\n\"; // false\necho any_int(1, 2, \"0\", \"0\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"-1\", \"-1\") . \"\\n\"; // false\necho any_int(1\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpa7gfp7go.php
    on line 38

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1, 1, 1) . PHP_EOL; // false\n\
    echo any_int(1, 1, 2) . PHP_EOL; // true\necho any_int(1, 2, \"a\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"1\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"2\") . PHP_EOL; // false\necho any_int(1, 2, \"3\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"4\") . PHP_EOL; // false\necho any_int(1, 2, \"5\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"6\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"7\") . PHP_EOL; // false\necho any_int(1, 2, \"8\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"9\") . PHP_EOL; // false\necho any_int(1, 2, \"10\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"11\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"12\") . PHP_EOL; // false\necho any_int(1, 2, \"13\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"14\") . PHP_EOL; // false\necho any_int(1, 2, \"15\") . PHP_EOL;\
    \ // false\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpg_pq1557.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyg3qfq9m.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpbtyvqavv.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\necho any_int(1,\
    \ 2, 4) . PHP_EOL;\necho any_int(1, 2, \"3\") . PHP_EOL;\necho any_int(1, 2, \"\
    3.0\") . PHP_EOL;\necho any_int(1, 2, \"3.0.0\") . PHP_EOL;\necho any_int(1, 2,\
    \ \"3.0.0.0\") . PHP_EOL;\necho any_int(1, 2, \"3.0.0.0.0\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"3.0.0.0.0.0\") . PHP_EOL;\necho any_int(1, 2, \"3.0.0.0.0.0.0\"\
    ) . PHP_EOL;\necho any_int(1, 2, \"3.0.0.0.0.0.0.0\") . PHP_EOL;\necho any_int(1,\
    \ 2, \"3.0.0.0.0.0.0.0.0\") . PHP_EOL;\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0\"\
    ) . PHP_EOL;\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0.0\") . PHP_EOL;\necho any_int(1,\
    \ 2, \"3.0.0.0.0.0.0.0.0.0.0.0\") . PHP_EOL;\necho any_int(1, 2, \"3.0.0.0.0.0.0.0\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmpyij87ri8.php
    on line 38

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    return (is_int($x) && is_int($y) && is_int($z));\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ze_xcip.php:18\n\
    Stack trace:\n#0 /tmp/tmp_ze_xcip.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_ze_xcip.php\
    \ on line 18\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    }\n    return false;\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\n\
    echo any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1,\
    \ 2, 1) . PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) .\
    \ PHP_EOL;\necho any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\n\
    echo any_int(1, 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1,\
    \ 2, -6) . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8)\
    \ . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\n\
    echo any_int(1, 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1,\
    \ 2, -13) . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15)\
    \ . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\n\
    echo any_int(1, 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1,\
    \ 2, -20) .\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpethgrj3m.php on line 38

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3); // false\necho any_int(1,\
    \ 2, 2); // true\necho any_int(1, 2, 1); // true\necho any_int(1, 2, 0); // false\n\
    echo any_int(1, 2, -1); // false\necho any_int(1, 2, \"3\"); // false\necho any_int(1,\
    \ 2, \"2\"); // false\necho any_int(1, 2, \"1\"); // false\necho any_int(1, 2,\
    \ \"0\"); // false\necho any_int(1, 2, \"-1\"); // false\necho any_int(1, 2, \"\
    a\"); // false\necho any_int(1, 2, \"b\"); // false\necho any_int(1, 2, \"c\"\
    ); // false\necho any_int(1, 2, \"d\"); // false\necho any_int(1, 2, \"e\"); //\
    \ false\necho any_int(1, 2, \"f\"); // false\necho any_int(1, 2, \"g\"); // false\n\
    echo any_int(1, 2, \"h\"); // false\necho any_int(1, 2, \"i\"); // false\necho\
    \ any_int(1, 2, \"j\"); // false\necho any_int(1, 2, \"k\"); // false\necho any_int(1,\
    \ 2, \"l\"); // false\necho any_int(1, 2, \"m\"); // false\necho any_int(1, 2,\
    \ \"n\"); // false\necho any_int(1, 2, \"o\"); // false\necho any_int(1, 2, \"\
    p\"); // false\necho any_int(1, 2, \"q\"); // false\necho any_int(1, 2, \"r\"\
    ); // false\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpppns8yv7.php on line 47

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\necho any_int(1,\
    \ 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\necho any_int(1, 2, 4) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, 1.5) . PHP_EOL;\necho any_int(1, 2, \"1\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"1.5\") . PHP_EOL;\necho any_int(1, 2, \"one\") . PHP_EOL;\n\
    echo any_int(1, 2, \"one point five\") . PHP_EOL;\necho any_int(1, 2, \"\") .\
    \ PHP_EOL;\necho any_int(1, 2, null) . PHP_EOL;\necho any_int(1, 2, true) . PHP_EOL;\n\
    echo any_int(1, 2, false) . PHP_EOL;\necho any_int(1, 2, []) . PHP_EOL;\necho\
    \ any_int(1, 2, [1, 2, 3]) . PHP_EOL;\necho any_int(1, 2, new stdClass()) . PHP_EOL;\n\
    echo any_int(1, 2, function() {}) . PHP_EOL;\necho any_int(1, 2, STDIN) . PHP_EOL;\n\
    echo any_int(1, 2, STDOUT) . PHP_EOL;\necho any_int(1, 2, STDERR) . PHP_EOL;\n\
    echo any\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpb2j8alc9.php on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -3) . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\necho any_int(1,\
    \ 2, -5) . PHP_EOL;\necho any_int(1, 2, -6) . PHP_EOL;\necho any_int(1, 2, -7)\
    \ . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\n\
    echo any_int(1, 2, -10) . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\necho any_int(1,\
    \ 2, -12) . PHP_EOL;\necho any_int(1, 2, -13) . PHP_EOL;\necho any_int(1, 2, -14)\
    \ . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\n\
    echo any_int(1, 2, -17) . PHP_EOL;\necho any_int(1, 2, -18) . PHP_EOL;\necho any_int(1,\
    \ 2, -19) . PHP_EOL;\necho any_int(1, 2, -20) . PHP_EOL;\necho any_int(1, 2, -21)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5mr7t91h.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3);\necho any_int(1, 2, \"3\"\
    );\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1,\
    \ 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho\
    \ any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"\
    3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1,\
    \ 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho\
    \ any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"\
    3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1,\
    \ 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho\
    \ any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"\
    3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"3.0\");\necho any_int(1\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpf0ygj8cp.php
    on line 47

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"\\n\";\necho any_int(1,\
    \ 2, \"3\") . \"\\n\";\necho any_int(1, 2, 4) . \"\\n\";\necho any_int(1, 2, 5)\
    \ . \"\\n\";\necho any_int(1, 2, 6) . \"\\n\";\necho any_int(1, 2, 7) . \"\\n\"\
    ;\necho any_int(1, 2, 8) . \"\\n\";\necho any_int(1, 2, 9) . \"\\n\";\necho any_int(1,\
    \ 2, 10) . \"\\n\";\necho any_int(1, 2, 11) . \"\\n\";\necho any_int(1, 2, 12)\
    \ . \"\\n\";\necho any_int(1, 2, 13) . \"\\n\";\necho any_int(1, 2, 14) . \"\\\
    n\";\necho any_int(1, 2, 15) . \"\\n\";\necho any_int(1, 2, 16) . \"\\n\";\necho\
    \ any_int(1, 2, 17) . \"\\n\";\necho any_int(1, 2, 18) . \"\\n\";\necho any_int(1,\
    \ 2, 19) . \"\\n\";\necho any_int(1, 2, 20) . \"\\n\";\necho any_int(1, 2, 21)\
    \ . \"\\n\";\necho any_int(1, 2, 22) . \"\\n\";\necho any_int(1, 2, 23) . \"\\\
    n\";\necho any_int(1, 2, 24) . \"\\n\";\necho any_int(1, 2, 25) . \"\\n\";\necho\
    \ any_int(1, 2, 26) . \"\\n\";\necho any_int(1, 2, 27) . \"\\n\";\necho any_int\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpvcm8pjdb.php on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3);\necho any_int(1, 2, 4);\n\
    echo any_int(1, 2, \"3\");\necho any_int(1, 2, \"3.0\");\necho any_int(1, 2, \"\
    3.0.0\");\necho any_int(1, 2, \"3.0.0.0\");\necho any_int(1, 2, \"3.0.0.0.0\"\
    );\necho any_int(1, 2, \"3.0.0.0.0.0\");\necho any_int(1, 2, \"3.0.0.0.0.0.0\"\
    );\necho any_int(1, 2, \"3.0.0.0.0.0.0.0\");\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0\"\
    );\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0\");\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0.0\"\
    );\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0.0.0\");\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0.0.0.0\"\
    );\necho any_int(1, 2, \"3.0.0.0.0.0.0.0.0.0.0.0.0.0\");\necho any_int(1, 2, \"\
    3.0.0.0.0.0.0.0.0.0.0.0\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmp5x0twvfs.php
    on line 40

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 1, 2) . \"\\n\"; // true\necho any_int(1, 1, 1) . \"\\n\"; // false\necho any_int(1,\
    \ 1, 0) . \"\\n\"; // true\necho any_int(1, 0, 0) . \"\\n\"; // true\necho any_int(0,\
    \ 0, 0) . \"\\n\"; // false\necho any_int(1, 2, \"3\") . \"\\n\"; // false\necho\
    \ any_int(1, \"2\", 3) . \"\\n\"; // false\necho any_int(\"1\", 2, 3) . \"\\n\"\
    ; // false\necho any_int(1, 2, 3.0) . \"\\n\"; // false\necho any_int(1, 2, -3)\
    \ . \"\\n\"; // false\necho any_int(1, -2, 3) . \"\\n\"; // false\necho any_int(-1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, -3.0) . \"\\n\"; // false\necho\
    \ any_int(1, -2, -3) . \"\\n\"; // false\necho any_int(-1, 2, -3) . \"\\n\"; //\
    \ false\necho any_int(-1, -2, 3) . \"\\n\"; // false\necho any_int(-1, -2, -3)\
    \ . \"\\n\"; // false\necho any_int(1, -2, -3.0) . \"\\n\"; // false\necho any_int(-1,\
    \ 2, -3.0) . \"\\n\"; // false\necho any_int(-1, -2, 3.0) . \"\\n\"; // false\n\
    echo any_int(-1, -2, -3.0) . \"\\n\"; // false\necho any_int(1, 2.0, 3) . \"\\\
    n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmp9evs4gvj.php on line 43

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bplghac.php:22\n\
    Stack trace:\n#0 /tmp/tmp9bplghac.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9bplghac.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxa3ua30.php:21\n\
    Stack trace:\n#0 /tmp/tmpfxa3ua30.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfxa3ua30.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 1, 2);\necho any_int(1, 1, 1);\n\
    echo any_int(1, 1, 0);\necho any_int(1, 1, -1);\necho any_int(1, 1, \"1\");\n\
    echo any_int(1, 1, \"one\");\necho any_int(1, 1, null);\necho any_int(1, 1, array(1,\
    \ 2, 3));\necho any_int(1, 1, true);\necho any_int(1, 1, false);\necho any_int(1,\
    \ 1, new stdClass());\necho any_int(1, 1, \"1.1\");\necho any_int(1, 1, 1.1);\n\
    echo any_int(1, 1, 1.0);\necho any_int(1, 1, \"1.0\");\necho any_int(1, 1, \"\
    one.0\");\necho any_int(1, 1, \"1.one\");\necho any_int(1, 1, \"one.one\");\n\
    echo any_int(1, 1, \"1.1.1\");\necho any_int(1, 1, \"one.one.one\");\necho any_int(1,\
    \ 1, \"one.1.one\");\necho any_int(1, 1, \"one.one.1\");\necho any_int(1, 1, \"\
    1.one.one\");\necho any_int(1, 1, \"1.one.1\");\necho any_int(1, 1, \"1.1.one\"\
    );\necho any_int(1, 1, \"one.1.1\");\necho any_int(1, 1, \"1.1.one\");\necho any_int(1,\
    \ 1, \"one.1.\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmpexg1skld.php
    on line 53

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y) == $z) {\n        return true;\n    } elseif (($x\
    \ + $z) == $y) {\n        return true;\n    } elseif (($y + $z) == $x) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\necho any_int(1, 2, 2) .\
    \ PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 5) . PHP_EOL;\n\
    echo any_int(1, 2, 6) . PHP_EOL;\necho any_int(1, 2, 7) . PHP_EOL;\necho any_int(1,\
    \ 2, 8) . PHP_EOL;\necho any_int(1, 2, 9) . PHP_EOL;\necho any_int(1, 2, 10) .\
    \ PHP_EOL;\necho any_int(1, 2, 11) . PHP_EOL;\necho any_int(1, 2, 12) . PHP_EOL;\n\
    echo any_int(1, 2, 13) . PHP_EOL;\necho any_int(1, 2, 14) . PHP_EOL;\necho any_int(1,\
    \ 2, 15) . PHP_EOL;\necho any_int(1, 2, 16) . PHP_EOL;\necho any_int(1, 2, 17)\
    \ . PHP_EOL;\necho any_int(1, 2, 18) . PHP_EOL;\necho any_int(1, 2, 19) . PHP_EOL;\n\
    echo any_int(1, 2, 20) . PHP_EOL;\necho any_int(1, 2, 21) . PHP_EOL;\necho any_int(1,\
    \ 2, 22) . PHP_EOL;\necho any_int(1, 2, 23) . PHP_EOL;\necho any_int(1, 2, 24)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphwvdocos.php:49\nStack trace:\n#0 /tmp/tmphwvdocos.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphwvdocos.php on line 49\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    }\n    return false;\n}\n\necho any_int(1, 2, 3);\necho\
    \ any_int(1, 2, 4);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1,\
    \ 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2,\
    \ -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\n\
    echo any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho\
    \ any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho\
    \ any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho\
    \ any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho\
    \ any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho\
    \ any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho\
    \ any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho\
    \ any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho\
    \ any_int(1, 2, -31);\necho\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmprw2y545t.php on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(2, 3, 4) . PHP_EOL; // false\necho\
    \ any_int(2, 3, 5) . PHP_EOL; // true\necho any_int(2, 3, 6) . PHP_EOL; // false\n\
    echo any_int(2, 3, 7) . PHP_EOL; // false\necho any_int(2, 3, 8) . PHP_EOL; //\
    \ false\necho any_int(2, 3, 9) . PHP_EOL; // true\necho any_int(2, 3, 10) . PHP_EOL;\
    \ // false\necho any_int(2, 3, 11) . PHP_EOL; // false\necho any_int(2, 3, 12)\
    \ . PHP_EOL; // false\necho any_int(2, 3, 13) . PHP_EOL; // true\necho any_int(2,\
    \ 3, 14) . PHP_EOL; // false\necho any_int(2, 3, 15) . PHP_EOL; // false\necho\
    \ any_int(2, 3, 16) . PHP_EOL; // false\necho any_int(2, 3, 17) . PHP_EOL; //\
    \ true\necho any_int(2, 3, 18) . PHP_EOL; // false\necho any_int(2, 3, 19) . PHP_EOL;\
    \ // false\necho any_int(2, 3, 20) . PHP_EOL; // false\necho any_int(2, 3, 21)\
    \ . PHP_EOL; // true\necho any_int(2, 3, 22) . PHP_EOL; // false\necho any_int(2,\
    \ 3, 23) . PHP_EOL; // false\necho any_int(2, 3, 24) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp7_0w58ok.php on line 40

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 1, 2) .\
    \ PHP_EOL;\necho any_int(1, 1, 1) . PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\n\
    echo any_int(1, 1, 1.5) . PHP_EOL;\necho any_int(1, 1, 1.00001) . PHP_EOL;\necho\
    \ any_int(1, 1, '1') . PHP_EOL;\necho any_int(1, 1, '1.0') . PHP_EOL;\necho any_int(1,\
    \ 1, '1.00001') . PHP_EOL;\necho any_int(1, 1, 'a') . PHP_EOL;\necho any_int(1,\
    \ 1, 'a1') . PHP_EOL;\necho any_int(1, 1, '1a') . PHP_EOL;\necho any_int(1, 1,\
    \ '1a1') . PHP_EOL;\necho any_int(1, 1, '1a1.0') . PHP_EOL;\necho any_int(1, 1,\
    \ '1a1.00001') . PHP_EOL;\necho any_int(1, 1, '1a1.00001a') . PHP_EOL;\necho any_int(1,\
    \ 1, '1a1.00001a1') . PHP_EOL;\necho any_int(1, 1, '1a1.00001a1.0') . PHP_EOL;\n\
    echo any_int(1, 1, '1a1.00001a1.00001') . PHP_EOL;\necho any_int(1, 1, '1a1.00001a1.00001a')\
    \ . PHP_EOL;\necho\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpw2hrf56k.php on line 36

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(5,\
    \ 2, 7) . \"\\n\";\necho any_int(5, 2, 8) . \"\\n\";\necho any_int(5, 2, 5) .\
    \ \"\\n\";\necho any_int(5, 2, 2) . \"\\n\";\necho any_int(5, 2, 3) . \"\\n\"\
    ;\necho any_int(5, 2, 4) . \"\\n\";\necho any_int(5, 2, 1) . \"\\n\";\necho any_int(5,\
    \ 2, 0) . \"\\n\";\necho any_int(5, 2, -1) . \"\\n\";\necho any_int(5, 2, -2)\
    \ . \"\\n\";\necho any_int(5, 2, -3) . \"\\n\";\necho any_int(5, 2, -4) . \"\\\
    n\";\necho any_int(5, 2, -5) . \"\\n\";\necho any_int(5, 2, -6) . \"\\n\";\necho\
    \ any_int(5, 2, -7) . \"\\n\";\necho any_int(5, 2, -8) . \"\\n\";\necho any_int(5,\
    \ 2, -9) . \"\\n\";\necho any_int(5, 2, -10) . \"\\n\";\necho any_int(5, 2, -11)\
    \ . \"\\n\";\necho any_int(5, 2, -12) . \"\\n\";\necho any_int(5, 2, -13) . \"\
    \\n\";\necho any_int(5, 2, -14) . \"\\n\";\necho any_int(5, 2, -15) . \"\\n\"\
    ;\necho any_int(5, 2, -16) . \"\\n\";\necho any_int(5, 2, -17) . \"\\n\";\necho\
    \ any_int(5, 2, -18) . \"\\n\";\necho any_int(5, 2, -19) . \"\\n\";\necho any_int(5,\
    \ 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpekqz3r4a.php
    on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 2, 1) .\
    \ \"\\n\";\necho any_int(1, 2, 0) . \"\\n\";\necho any_int(1, 2, -1) . \"\\n\"\
    ;\necho any_int(1, 2, -2) . \"\\n\";\necho any_int(1, 2, -3) . \"\\n\";\necho\
    \ any_int(1, 2, -4) . \"\\n\";\necho any_int(1, 2, -5) . \"\\n\";\necho any_int(1,\
    \ 2, -6) . \"\\n\";\necho any_int(1, 2, -7) . \"\\n\";\necho any_int(1, 2, -8)\
    \ . \"\\n\";\necho any_int(1, 2, -9) . \"\\n\";\necho any_int(1, 2, -10) . \"\\\
    n\";\necho any_int(1, 2, -11) . \"\\n\";\necho any_int(1, 2, -12) . \"\\n\";\n\
    echo any_int(1, 2, -13) . \"\\n\";\necho any_int(1, 2, -14) . \"\\n\";\necho any_int(1,\
    \ 2, -15) . \"\\n\";\necho any_int(1, 2, -16) . \"\\n\";\necho any_int(1, 2, -17)\
    \ . \"\\n\";\necho any_int(1, 2, -18) . \"\\n\";\necho any_int(1, 2, -19) . \"\
    \\n\";\necho any_int(1, 2, -20) . \"\\n\";\necho any_int(1, 2, -21) . \"\\n\"\
    ;\necho any_int(1, 2, -22) . \"\\n\";\necho any_int(1, 2, -23) . \"\\n\";\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpdmo8g3k6.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(1, 2, 1) . \"\\n\";\necho any_int(1, 1, 2) .\
    \ \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 1, 1) . \"\\n\"\
    ;\necho any_int(1, 2, \"3\") . \"\\n\";\necho any_int(1, \"2\", 3) . \"\\n\";\n\
    echo any_int(\"1\", 2, 3) . \"\\n\";\necho any_int(1, \"2\", \"3\") . \"\\n\"\
    ;\necho any_int(\"1\", \"2\", 3) . \"\\n\";\necho any_int(\"1\", 2, \"3\") . \"\
    \\n\";\necho any_int(\"1\", \"2\", \"3\") . \"\\n\";\necho any_int(1.5, 2.5, 3.5)\
    \ . \"\\n\";\necho any_int(1.5, 2.5, 1.5) . \"\\n\";\necho any_int(1.5, 1.5, 2.5)\
    \ . \"\\n\";\necho any_int(1.5, 2.5, 2.5) . \"\\n\";\necho any_int(1.5, 1.5, 1.5)\
    \ . \"\\n\";\necho any_int(1.5, 2.5, \"3.5\") . \"\\n\";\necho any_int(1.5, \"\
    2.5\", 3.5) . \"\\n\";\necho any_int(\"1.5\", 2.5, 3.5) . \"\\n\";\necho any_int(1.5,\
    \ \"2.5\", \"3.5\") . \"\\n\";\necho any_int(\"1.5\", \"2.5\", 3.5) . \"\\n\"\
    ;\necho any_int(\"1.5\", 2.5\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpspkmqjmv.php
    on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3) . \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 2, 4) .\
    \ \"\\n\";\necho any_int(1, 2, 5) . \"\\n\";\necho any_int(1, 2, 6) . \"\\n\"\
    ;\necho any_int(1, 2, 7) . \"\\n\";\necho any_int(1, 2, 8) . \"\\n\";\necho any_int(1,\
    \ 2, 9) . \"\\n\";\necho any_int(1, 2, 10) . \"\\n\";\necho any_int(1, 2, 11)\
    \ . \"\\n\";\necho any_int(1, 2, 12) . \"\\n\";\necho any_int(1, 2, 13) . \"\\\
    n\";\necho any_int(1, 2, 14) . \"\\n\";\necho any_int(1, 2, 15) . \"\\n\";\necho\
    \ any_int(1, 2, 16) . \"\\n\";\necho any_int(1, 2, 17) . \"\\n\";\necho any_int(1,\
    \ 2, 18) . \"\\n\";\necho any_int(1, 2, 19) . \"\\n\";\necho any_int(1, 2, 20)\
    \ . \"\\n\";\necho any_int(1, 2, 21) . \"\\n\";\necho any_int(1, 2, 22) . \"\\\
    n\";\necho any_int(1, 2, 23) . \"\\n\";\necho any_int(1, 2, 24) . \"\\n\";\necho\
    \ any_int(1, 2, 25) . \"\\n\";\necho any_int(1, 2, 26) . \"\\n\";\necho any_int(1,\
    \ 2, 27) . \"\\n\";\necho any_int(1, 2, 28) . \"\\n\";\necho any_int(1, 2, 29)\
    \ . \"\\n\";\necho any_int(1, 2, 30) .\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp99dp9hut.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 1); // true\n\
    echo any_int(1, 2, 0); // false\necho any_int(1, 2, -1); // false\necho any_int(1,\
    \ 2, -2); // true\necho any_int(1, 2, -3); // false\necho any_int(1, 2, -4); //\
    \ false\necho any_int(1, 2, -5); // true\necho any_int(1, 2, -6); // false\necho\
    \ any_int(1, 2, -7); // false\necho any_int(1, 2, -8); // true\necho any_int(1,\
    \ 2, -9); // false\necho any_int(1, 2, -10); // false\necho any_int(1, 2, -11);\
    \ // true\necho any_int(1, 2, -12); // false\necho any_int(1, 2, -13); // false\n\
    echo any_int(1, 2, -14); // true\necho any_int(1, 2, -15); // false\necho any_int(1,\
    \ 2, -16); // false\necho any_int(1, 2, -17); // true\necho any_int(1, 2, -18);\
    \ // false\necho any_int(1, 2, -19); // false\necho any_int(1, 2, -20); // true\n\
    echo any_int(1, 2, -21); // false\necho any_int(1, 2, -22); // false\necho any_int(1,\
    \ 2, -23); // true\necho any_int(1, 2, -24); // false\necho any_int(1, 2, -25);\
    \ // false\necho any_int(1, 2, -26); // true\necho any_int(1, 2, -27); //\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rpppt3k.php:52\n\
    Stack trace:\n#0 /tmp/tmp8rpppt3k.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp8rpppt3k.php\
    \ on line 52\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 1, 2);\necho any_int(1, 1, 1);\n\
    echo any_int(1, 2, 4);\necho any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho\
    \ any_int(1, 2, 1.5);\necho any_int(1, 2, \"1\");\necho any_int(1, 2, \"one\"\
    );\necho any_int(1, 2, true);\necho any_int(1, 2, false);\necho any_int(1, 2,\
    \ null);\necho any_int(1, 2, array(1, 2, 3));\necho any_int(1, 2, new stdClass());\n\
    echo any_int(1, 2, \"1,2,3\");\necho any_int(1, 2, \"1 2 3\");\necho any_int(1,\
    \ 2, \"1one2two3three\");\necho any_int(1, 2, \"1,2,3,4,5\");\necho any_int(1,\
    \ 2, \"1 2 3 4 5\");\necho any_int(1, 2, \"1one2two3three4four5five\");\necho\
    \ any_int(1, 2, \"1,2,3,4,5,6,7,8,9,10\");\necho any_int(1, 2, \"1 2 3 4 5 6 7\
    \ 8 9 10\");\necho any_int(1, 2, \"1one2two3three4four5five6six7seven8eight9nine10ten\"\
    );\necho any_int(1, 2, \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\"\
    );\necho any_int(1, 2, \"1 2 3 4 5 6 7 8 9 10\nfunction candidate(...$args) {\n\
    \    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmp7fjwkypb.php
    on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL;\necho any_int(1,\
    \ 2, 2) . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, \"3\"\
    ) . PHP_EOL;\necho any_int(1, 2, \"hello\") . PHP_EOL;\necho any_int(1, 2, \"\"\
    ) . PHP_EOL;\necho any_int(1, 2, null) . PHP_EOL;\necho any_int(1, 2, []) . PHP_EOL;\n\
    echo any_int(1, 2, true) . PHP_EOL;\necho any_int(1, 2, false) . PHP_EOL;\necho\
    \ any_int(1, 2, new stdClass()) . PHP_EOL;\necho any_int(1, 2, STDIN) . PHP_EOL;\n\
    echo any_int(1, 2, \"1\") . PHP_EOL;\necho any_int(1, 2, \"2\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"3\") . PHP_EOL;\necho any_int(1, 2, \"4\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"5\") . PHP_EOL;\necho any_int(1, 2, \"6\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"7\") . PHP_EOL;\necho any_int(1, 2, \"8\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"9\") . PHP_EOL;\necho any_int(1, 2, \"10\") . PHP_EOL;\necho\
    \ any_int(1, 2, \"\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmp5wlkf882.php
    on line 46

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x === $y + $z || $y === $x + $z || $z === $x + $y) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1, 1, 2) . PHP_EOL; // true\n\
    echo any_int(1, 1, 1) . PHP_EOL; // false\necho any_int(1, 2, \"a\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, 1.5) . PHP_EOL; // false\necho any_int(1, 2, \"\
    1\") . PHP_EOL; // false\necho any_int(1, 2, \"1.5\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"1.0\") . PHP_EOL; // false\necho any_int(1, 2, \"1,0\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"1,5\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"1,000\") . PHP_EOL; // false\necho any_int(1, 2, \"1 000\") . PHP_EOL; //\
    \ false\necho any_int(1, 2, \"1,000.0\") . PHP_EOL; // false\necho any_int(1,\
    \ 2, \"1,000.5\") . PHP_EOL; // false\necho any_int(1, 2, \"1,000,0\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"1,000,5\") . PHP_EOL; // false\necho any_int(1,\
    \ 2, \"1 000,0\") . PHP_EOL; // false\necho any_int(1, 2, \"1 000,5\") .\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpkapsmu9i.php on line 37

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\necho any_int(1, 2, 3);\necho \"<br>\";\necho any_int(1,\
    \ 2, \"3\");\necho \"<br>\";\necho any_int(1, 2, 4);\necho \"<br>\";\necho any_int(1,\
    \ 2, 1);\necho \"<br>\";\necho any_int(1, 2, 0);\necho \"<br>\";\necho any_int(1,\
    \ 2, -3);\necho \"<br>\";\necho any_int(0.1, 0.2, 0.3);\necho \"<br>\";\necho\
    \ any_int(0.1, 0.2, 0.2);\necho \"<br>\";\necho any_int(0.1, 0.2, 0.1);\necho\
    \ \"<br>\";\necho any_int(0.1, 0.2, 0);\necho \"<br>\";\necho any_int(0.1, 0.2,\
    \ -0.3);\necho \"<br>\";\necho any_int(5, 5, 0);\necho \"<br>\";\necho any_int(5,\
    \ 0, 5);\necho \"<br>\";\necho any_int(0, 5, 5);\necho \"<br>\";\necho any_int(5,\
    \ 5, 10);\necho \"<br>\";\necho any_int(5, 10, 5);\necho \"<br>\";\necho any_int(10,\
    \ 5, 5);\necho \"<br>\";\necho any_int(5, 5, -5);\necho \"<br>\";\necho any_int(5,\
    \ -5, 5);\necho \"<br>\";\necho any_int(-5, 5, 5);\necho \"<br>\";\necho any_int(5,\
    \ 5, 5);\necho \"<br>\";\necho any_int(5, 5, 6);\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br><br>1<br><br><br><br><br><br><br><br>1<br>1<br>1<br>1<br>1<br>1<br><br><br><br><br>
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho\
    \ any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1, 2, 1) . PHP_EOL; // true\n\
    echo any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1, 2, -1) . PHP_EOL; //\
    \ false\necho any_int(1, 2, \"1\") . PHP_EOL; // false\necho any_int(1, 2, \"\
    2\") . PHP_EOL; // false\necho any_int(1, 2, \"3\") . PHP_EOL; // false\necho\
    \ any_int(1, 2, \"4\") . PHP_EOL; // false\necho any_int(1, 2, \"5\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"6\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"7\") . PHP_EOL; // false\necho any_int(1, 2, \"8\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"9\") . PHP_EOL; // false\necho any_int(1, 2, \"10\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"11\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"12\") . PHP_EOL; // false\necho any_int(1, 2, \"13\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"14\") . PHP_EOL; // false\necho any_int(1, 2, \"15\") . PHP_EOL;\
    \ // false\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpj_jlrtq1.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 1, 2) .\
    \ PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\n\
    echo any_int(1, 1, 1) . PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1,\
    \ 2, -1) . PHP_EOL;\necho any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3)\
    \ . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\n\
    echo any_int(1, 2, -6) . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1,\
    \ 2, -8) . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10)\
    \ . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\n\
    echo any_int(1, 2, -13) . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1,\
    \ 2, -15) . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17)\
    \ . PHP_EOL;\necho any_int(1, 2, -\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpi91vxl98.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 4) . PHP_EOL;\necho any_int(1, 2, 2) .\
    \ PHP_EOL;\necho any_int(1, 2, 1) . PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\n\
    echo any_int(1, 2, -1) . PHP_EOL;\necho any_int(1, 2, -2) . PHP_EOL;\necho any_int(1,\
    \ 2, -3) . PHP_EOL;\necho any_int(1, 2, -4) . PHP_EOL;\necho any_int(1, 2, -5)\
    \ . PHP_EOL;\necho any_int(1, 2, -6) . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\n\
    echo any_int(1, 2, -8) . PHP_EOL;\necho any_int(1, 2, -9) . PHP_EOL;\necho any_int(1,\
    \ 2, -10) . PHP_EOL;\necho any_int(1, 2, -11) . PHP_EOL;\necho any_int(1, 2, -12)\
    \ . PHP_EOL;\necho any_int(1, 2, -13) . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\n\
    echo any_int(1, 2, -15) . PHP_EOL;\necho any_int(1, 2, -16) . PHP_EOL;\necho any_int(1,\
    \ 2, -17) . PHP_EOL;\necho any_int(1, 2, -18) . PHP_EOL;\necho any_int(1, 2, -19)\
    \ . PHP_EOL;\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyu1zjlr6.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1, 2, -\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5qazr26r.php on line 49

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 1); // true\n\
    echo any_int(1, 2, 0); // false\necho any_int(1, 2, -1); // false\necho any_int(1,\
    \ 2, -2); // false\necho any_int(1, 2, -3); // false\necho any_int(1, 2, -4);\
    \ // false\necho any_int(1, 2, -5); // false\necho any_int(1, 2, -6); // false\n\
    echo any_int(1, 2, -7); // false\necho any_int(1, 2, -8); // false\necho any_int(1,\
    \ 2, -9); // false\necho any_int(1, 2, -10); // false\necho any_int(1, 2, -11);\
    \ // false\necho any_int(1, 2, -12); // false\necho any_int(1, 2, -13); // false\n\
    echo any_int(1, 2, -14); // false\necho any_int(1, 2, -15); // false\necho any_int(1,\
    \ 2, -16); // false\necho any_int(1, 2, -17); // false\necho any_int(1, 2, -18);\
    \ // false\necho any_int(1, 2, -19); // false\necho any_int(1, 2, -20); // false\n\
    echo any_int(1, 2, -21); // false\necho any_int(1, 2, -22); // false\necho any_int(1,\
    \ 2, -23); // false\necho any_int(1, 2, -24); // false\necho any_int(1, 2, -25);\
    \ // false\necho any_int(1, 2, -26); // false\necho any_int(1, 2, -27); //\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst3bb8_6.php:52\n\
    Stack trace:\n#0 /tmp/tmpst3bb8_6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpst3bb8_6.php\
    \ on line 52\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxa3ua30.php:21\n\
    Stack trace:\n#0 /tmp/tmpfxa3ua30.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfxa3ua30.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(2,\
    \ 3, 5) . PHP_EOL;\necho any_int(2, 3, 6) . PHP_EOL;\necho any_int(2, 3, 7) .\
    \ PHP_EOL;\necho any_int(2, 3, 8) . PHP_EOL;\necho any_int(2, 3, 9) . PHP_EOL;\n\
    echo any_int(2, 3, 10) . PHP_EOL;\necho any_int(2, 3, 11) . PHP_EOL;\necho any_int(2,\
    \ 3, 12) . PHP_EOL;\necho any_int(2, 3, 13) . PHP_EOL;\necho any_int(2, 3, 14)\
    \ . PHP_EOL;\necho any_int(2, 3, 15) . PHP_EOL;\necho any_int(2, 3, 16) . PHP_EOL;\n\
    echo any_int(2, 3, 17) . PHP_EOL;\necho any_int(2, 3, 18) . PHP_EOL;\necho any_int(2,\
    \ 3, 19) . PHP_EOL;\necho any_int(2, 3, 20) . PHP_EOL;\necho any_int(2, 3, 21)\
    \ . PHP_EOL;\necho any_int(2, 3, 22) . PHP_EOL;\necho any_int(2, 3, 23) . PHP_EOL;\n\
    echo any_int(2, 3, 24) . PHP_EOL;\necho any_int(2, 3, 25) . PHP_EOL;\necho any_int(2,\
    \ 3, 26) . PHP_EOL;\necho any_int(2, 3, 27) . PHP_EOL;\necho any_int(2, 3, 28)\
    \ . PHP_EOL;\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp31yf1kie.php on line 43

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x === $y + $z || $y === $x + $z || $z === $x + $y) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp0_a99iah.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y) == $z) {\n        return true;\n    } elseif (($x\
    \ + $z) == $y) {\n        return true;\n    } elseif (($y + $z) == $x) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 2, 0) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -1) . \"\\n\"; // false\necho any_int(1, 2, -2) . \"\\n\"; // true\necho\
    \ any_int(1, 2, -3) . \"\\n\"; // false\necho any_int(1, 2, -4) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -5) . \"\\n\"; // true\necho any_int(1, 2, -6) . \"\
    \\n\"; // false\necho any_int(1, 2, -7) . \"\\n\"; // false\necho any_int(1, 2,\
    \ -8) . \"\\n\"; // true\necho any_int(1, 2, -9) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -10) . \"\\n\"; // false\necho any_int(1, 2, -11) . \"\\n\"; // true\necho\
    \ any_int(1, 2, -12) . \"\\n\"; // false\necho any_int(1, 2, -13) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -14) . \"\\n\"; // true\necho any_int(1, 2, -15) .\
    \ \"\\n\"; // false\necho any_int(1, 2, -16) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -17) . \"\\n\"; // true\necho any_int(1, 2, -18) . \"\\n\"; // false\necho\
    \ any_int(1, 2, -19) . \"\\n\"; // false\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpigjpbhgs.php:47\nStack trace:\n#0 /tmp/tmpigjpbhgs.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpigjpbhgs.php on line 47\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3); // false\necho any_int(1,\
    \ 2, 2); // true\necho any_int(1, 1, 2); // true\necho any_int(1, 2, \"2\"); //\
    \ false\necho any_int(1, 2, 2.0); // true\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2, \"2.0\"); // false\n\
    echo any_int(1, 2, \"2.0\"); // false\necho any_int(1, 2\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp0j70bgra.php
    on line 44

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    return $x + $y === $z || $x + $z === $y || $y + $z === $x;\n\
    }\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"\
    ; // true\necho any_int(1, 1, 2) . \"\\n\"; // true\necho any_int(1, 1, 1) . \"\
    \\n\"; // false\necho any_int(1, 2, 4) . \"\\n\"; // false\necho any_int(1, 2,\
    \ 1) . \"\\n\"; // true\necho any_int(1, 2, 0) . \"\\n\"; // false\necho any_int(1,\
    \ 1, 0) . \"\\n\"; // true\necho any_int(1, 0, 0) . \"\\n\"; // false\necho any_int(0,\
    \ 0, 0) . \"\\n\"; // false\necho any_int(1, 2, \"3\") . \"\\n\"; // false\necho\
    \ any_int(1, 2, \"2\") . \"\\n\"; // false\necho any_int(1, 2, \"1\") . \"\\n\"\
    ; // false\necho any_int(1, 2, \"0\") . \"\\n\"; // false\necho any_int(1, \"\
    2\", \"3\") . \"\\n\"; // false\necho any_int(1, \"2\", \"2\") . \"\\n\"; // false\n\
    echo any_int(1, \"2\", \"1\") . \"\\n\"; // false\necho any_int(1, \"2\", \"0\"\
    ) . \"\\n\"; // false\necho any_int(\"1\", \"2\", \"3\") . \"\\n\"; // false\n\
    echo any_int(\"1\", \"2\", \"2\") . \"\\n\"; // false\necho any_int(\"1\", \"\
    2\", \"1\") . \"\\n\"; // false\necho any_int(\"1\", \"2\", \"0\") . \"\\n\";\
    \ // false\necho any_int(\"1\", \"2\", 3) . \"\\n\"; // false\necho any_int(\"\
    1\", \"2\", 2) . \"\\n\"; // false\necho any_int(\"1\", \"2\", 1) . \"\\n\"; //\
    \ false\necho any_int(\"\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmplg4g8hfk.php
    on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 4); // false\n\
    echo any_int(1, 2, 1); // true\necho any_int(1, 2, 0); // false\necho any_int(1,\
    \ 2, -1); // false\necho any_int(1, 2, -2); // false\necho any_int(1, 2, -3);\
    \ // false\necho any_int(1, 2, -4); // false\necho any_int(1, 2, -5); // false\n\
    echo any_int(1, 2, -6); // false\necho any_int(1, 2, -7); // false\necho any_int(1,\
    \ 2, -8); // false\necho any_int(1, 2, -9); // false\necho any_int(1, 2, -10);\
    \ // false\necho any_int(1, 2, -11); // false\necho any_int(1, 2, -12); // false\n\
    echo any_int(1, 2, -13); // false\necho any_int(1, 2, -14); // false\necho any_int(1,\
    \ 2, -15); // false\necho any_int(1, 2, -16); // false\necho any_int(1, 2, -17);\
    \ // false\necho any_int(1, 2, -18); // false\necho any_int(1, 2, -19); // false\n\
    echo any_int(1, 2, -20); // false\necho any_int(1, 2, -21); // false\necho any_int(1,\
    \ 2, -22); // false\necho any_int(1, 2, -23); // false\necho any_int(1, 2, -24);\
    \ // false\necho any_int(1, 2, -25); // false\necho any_int(1, 2, -26\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpa3ic8b6o.php
    on line 45

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpo1lmrmon.php on line 42

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 1, 2);\necho any_int(1, 1, 1);\n\
    echo any_int(1, 1, 0);\necho any_int(1, 1, -1);\necho any_int(1, 1, 1.5);\necho\
    \ any_int(1, 1, \"1\");\necho any_int(1, 1, \"1.5\");\necho any_int(1, 1, \"one\"\
    );\necho any_int(1, 1, \"one\", \"two\");\necho any_int(1, 1, \"one\", \"two\"\
    , \"three\");\necho any_int(1, 1, \"one\", \"two\", \"three\", \"four\");\necho\
    \ any_int(1, 1, \"one\", \"two\", \"three\", \"four\", \"five\");\necho any_int(1,\
    \ 1, \"one\", \"two\", \"three\", \"four\", \"five\", \"six\");\necho any_int(1,\
    \ 1, \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\");\necho\
    \ any_int(1, 1, \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\");\necho any_int(1, 1, \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\necho any_int(1, 1, \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"\
    );\necho any_int(1, 1, \"one\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    , \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\");\necho any_int(1, 1, \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting ")" in /tmp/tmp5w33dv8q.php
    on line 40

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    return (is_int($x) && is_int($y) && is_int($z)) ? true : false;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpraaq3e0m.php:18\n\
    Stack trace:\n#0 /tmp/tmpraaq3e0m.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpraaq3e0m.php\
    \ on line 18\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"\\n\";\necho any_int(1,\
    \ 2, \"3\") . \"\\n\";\necho any_int(1, 2, 4) . \"\\n\";\necho any_int(1, 2, 1)\
    \ . \"\\n\";\necho any_int(1, 2, 2) . \"\\n\";\necho any_int(1, 2, 0) . \"\\n\"\
    ;\necho any_int(1, 2, -1) . \"\\n\";\necho any_int(1, 2, -2) . \"\\n\";\necho\
    \ any_int(1, 2, -3) . \"\\n\";\necho any_int(1, 2, -4) . \"\\n\";\necho any_int(1,\
    \ 2, -5) . \"\\n\";\necho any_int(1, 2, -6) . \"\\n\";\necho any_int(1, 2, -7)\
    \ . \"\\n\";\necho any_int(1, 2, -8) . \"\\n\";\necho any_int(1, 2, -9) . \"\\\
    n\";\necho any_int(1, 2, -10) . \"\\n\";\necho any_int(1, 2, -11) . \"\\n\";\n\
    echo any_int(1, 2, -12) . \"\\n\";\necho any_int(1, 2, -13) . \"\\n\";\necho any_int(1,\
    \ 2, -14) . \"\\n\";\necho any_int(1, 2, -15) . \"\\n\";\necho any_int(1, 2, -16)\
    \ . \"\\n\";\necho any_int(1, 2, -17) . \"\\n\";\necho any_int(1, 2, -18) . \"\
    \\n\";\necho any_int(1, 2, -19) . \"\\n\";\necho\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpz81l6f8j.php on line 44

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 2, 0) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -1) . \"\\n\"; // false\necho any_int(1, 2, -2) . \"\\n\"; // true\necho\
    \ any_int(1, 2, -3) . \"\\n\"; // false\necho any_int(1, 2, \"3\") . \"\\n\";\
    \ // false\necho any_int(1, 2, \"2\") . \"\\n\"; // false\necho any_int(1, 2,\
    \ \"1\") . \"\\n\"; // false\necho any_int(1, 2, \"0\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"-1\") . \"\\n\"; // false\necho any_int(1, 2, \"-2\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"-3\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"a\") . \"\\n\"; // false\necho any_int(1, 2, \"b\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"c\") . \"\\n\"; // false\necho any_int(1, 2, \"d\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"e\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"f\") . \"\\n\"; // false\necho any_int(1, 2, \"g\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"h\") . \"\\n\"; // false\necho any_int(1, 2, \"i\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"j\") . \"\\n\"; // false\necho any_int(1,\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2x9ejwcs.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho\
    \ any_int(1, 2, 4) . \"\\n\"; // true\necho any_int(1, 2, \"3\") . \"\\n\"; //\
    \ false\necho any_int(1, 2, \"a\") . \"\\n\"; // false\necho any_int(1, 2, \"\"\
    ) . \"\\n\"; // false\necho any_int(1, 2, \"1\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"2\") . \"\\n\"; // false\necho any_int(1, 2, \"3\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"4\") . \"\\n\"; // false\necho any_int(1, 2, \"5\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"6\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"7\") . \"\\n\"; // false\necho any_int(1, 2, \"8\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"9\") . \"\\n\"; // false\necho any_int(1, 2, \"10\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"11\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"12\") . \"\\n\"; // false\necho any_int(1, 2, \"13\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"14\") . \"\\n\"; // false\necho any_int(1, 2, \"15\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"16\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"17\") . \"\\n\"; // false\necho any_int(1\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpgm02e9po.php
    on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y) == $z || ($x + $z) == $y || ($y + $z) == $x) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp680pq8x2.php:21\n\
    Stack trace:\n#0 /tmp/tmp680pq8x2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp680pq8x2.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(5,\
    \ 4, 9);\necho any_int(5, 4, 10);\necho any_int(5, 4, 3);\necho any_int(5, 4,\
    \ 5);\necho any_int(5, 4, 6);\necho any_int(5, 4, 7);\necho any_int(5, 4, 8);\n\
    echo any_int(5, 4, 1);\necho any_int(5, 4, 2);\necho any_int(5, 4, 0);\necho any_int(5,\
    \ 4, -1);\necho any_int(5, 4, -2);\necho any_int(5, 4, -3);\necho any_int(5, 4,\
    \ -4);\necho any_int(5, 4, -5);\necho any_int(5, 4, -6);\necho any_int(5, 4, -7);\n\
    echo any_int(5, 4, -8);\necho any_int(5, 4, -9);\necho any_int(5, 4, -10);\necho\
    \ any_int(5, 4, -11);\necho any_int(5, 4, -12);\necho any_int(5, 4, -13);\necho\
    \ any_int(5, 4, -14);\necho any_int(5, 4, -15);\necho any_int(5, 4, -16);\necho\
    \ any_int(5, 4, -17);\necho any_int(5, 4, -18);\necho any_int(5, 4, -19);\necho\
    \ any_int(5, 4, -20);\necho any_int(5, 4, -21);\necho any_int(5, 4, -22);\necho\
    \ any_int(5, 4, -23);\necho any_int(5, 4, -24);\necho any_int(5, 4, -25);\necho\
    \ any_int(5, 4, -26\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpspk6pzuf.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 1, 2);\necho any_int(1, 1, 1);\n\
    echo any_int(1, 1, 0);\necho any_int(1, 1, -1);\necho any_int(1, 0, 0);\necho\
    \ any_int(1, 0, -1);\necho any_int(1, -1, -1);\necho any_int(0, 0, 0);\necho any_int(0,\
    \ 0, -1);\necho any_int(0, -1, -1);\necho any_int(-1, -1, -1);\necho any_int(1.5,\
    \ 2, 3);\necho any_int(1, 2.5, 3);\necho any_int(1, 2, 3.5);\necho any_int(1.5,\
    \ 2.5, 3);\necho any_int(1.5, 2, 3.5);\necho any_int(1, 2.5, 3.5);\necho any_int(1.5,\
    \ 2.5, 3.5);\necho any_int(1.5, 2.5, 3.5);\necho any_int(1.5, 2.5, 3.5);\necho\
    \ any_int(1.5, 2.5, 3.5);\necho any_int(1.5, 2.5, 3.5);\necho any_int(1.5, 2.5,\
    \ 3.5);\necho any_int(1.5, 2.5, 3.5);\necho any_int(1.5, 2.5, 3.5);\necho any_int(1.5,\
    \ 2.5, 3.5);\necho any_int(1.5, 2.5, 3.5);\necho any_int(1.5, 2.5, 3.5);\necho\
    \ any_int(1\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp_rhbinaa.php
    on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxcq4q5fw.php on line 50

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; //\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxt0ctoyt.php:43\nStack trace:\n#0 /tmp/tmpxt0ctoyt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxt0ctoyt.php on line 43\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\necho any_int(1, 2, 3) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 2) . PHP_EOL; // true\necho any_int(1, 2, 4) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // true\necho any_int(1, 2, -2) . PHP_EOL; // false\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // false\necho any_int(1, 2, -6) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -8) . PHP_EOL; // false\necho any_int(1, 2, -9) . PHP_EOL; // false\necho\
    \ any_int(1, 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13)\
    \ . PHP_EOL; // false\necho any_int(1, 2, -14) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -15) . PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\n\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1



    1


    1
















    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 1, 2); // true\n\
    echo any_int(1, 2, 1); // true\necho any_int(1, 1, 1); // false\necho any_int(1,\
    \ 2, 0); // false\necho any_int(0, 0, 0); // false\necho any_int(1.5, 2, 3); //\
    \ false\necho any_int(1, 1.5, 2); // false\necho any_int(1, 2, 3.5); // false\n\
    echo any_int(1.5, 1.5, 2); // false\necho any_int(1.5, 2, 2.5); // false\necho\
    \ any_int(1.5, 2.5, 3); // false\necho any_int(1.5, 2.5, 2.5); // false\necho\
    \ any_int(1.5, 1.5, 1.5); // false\necho any_int(1.5, 2.5, 0); // false\necho\
    \ any_int(0, 0, 0.5); // false\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uovm4fi.php:39\n\
    Stack trace:\n#0 /tmp/tmp4uovm4fi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4uovm4fi.php\
    \ on line 39\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ == $y + $z || $y == $x + $z || $z == $x + $y) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 1); // true\necho any_int(1, 1, 2); // true\n\
    echo any_int(1, 2, 2); // false\necho any_int(1, 1, 1); // false\necho any_int(1,\
    \ 2, \"2\"); // false\necho any_int(1, \"2\", 2); // false\necho any_int(\"2\"\
    , 1, 2); // false\necho any_int(1, 2, 2.0); // false\necho any_int(1, 2.0, 2);\
    \ // false\necho any_int(1.0, 2, 2); // false\necho any_int(1.0, 2.0, 2.0); //\
    \ false\necho any_int(1.0, 2.0, 2); // false\necho any_int(1, 2.0, 2.0); // false\n\
    echo any_int(1, 2, 2.0); // false\necho any_int(1.0, 2, 2.0); // false\necho any_int(1.0,\
    \ 2.0, 2.0); // false\necho any_int(1.0, 2.0, 2); // false\necho any_int(1, 2.0,\
    \ 2.0); // false\necho any_int(1, 2, 2.0); // false\necho any_int(1.0, 2, 2.0);\
    \ // false\necho any_int(1.0, 2.0, 2.0); // false\necho any_int(1.0, 2.0, 2);\
    \ // false\necho any_int(1, 2.0, 2.0); // false\necho any_int(1, 2, 2.0); // false\n\
    echo any_int(1.0, 2, 2.0); // false\necho any_int(1.0, 2.0, 2.0); // false\necho\
    \ any_int\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp1a3dhlbp.php on line 42

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if (is_int($x) && is_int($y) && is_int($z)) {\n    if ($x + $y\
    \ == $z || $x + $z == $y || $y + $z == $x) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 1, 2) . PHP_EOL; // true\necho any_int(1, 1, 1) . PHP_EOL; // false\necho any_int(1,\
    \ 1, 0) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, 0.5) . PHP_EOL; // false\necho any_int(1, 2, \"3\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"2\") . PHP_EOL; // false\necho any_int(1, 2, \"1\") . PHP_EOL;\
    \ // false\necho any_int(1, 2, \"0\") . PHP_EOL; // false\necho any_int(1, 2,\
    \ \"0.5\") . PHP_EOL; // false\necho any_int(1, 2, \"\") . PHP_EOL; // false\n\
    echo any_int(1, 2, null) . PHP_EOL; // false\necho any_int(1, 2, true) . PHP_EOL;\
    \ // false\necho any_int(1, 2, false) . PHP_EOL; // false\necho any_int(1, 2,\
    \ array()) . PHP_EOL; // false\necho any_int(1, 2, array(1, 2, 3)) . PHP_EOL;\
    \ // false\necho any_int(1, 2, new stdClass()) . PHP_EOL; // false\necho any_int(1,\
    \ 2, \"a\") . PHP_EOL; // false\necho any_int(1, 2, \"1a\") . PHP_EOL; // false\n\
    echo any_int(1, 2, \"a1\") . PHP_\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp7ivatwxh.php on line 36

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 2);\necho any_int(1, 2, 4);\necho any_int(1, 2, 5);\n\
    echo any_int(1, 2, 6);\necho any_int(1, 2, 7);\necho any_int(1, 2, 8);\necho any_int(1,\
    \ 2, 9);\necho any_int(1, 2, 10);\necho any_int(1, 2, 11);\necho any_int(1, 2,\
    \ 12);\necho any_int(1, 2, 13);\necho any_int(1, 2, 14);\necho any_int(1, 2, 15);\n\
    echo any_int(1, 2, 16);\necho any_int(1, 2, 17);\necho any_int(1, 2, 18);\necho\
    \ any_int(1, 2, 19);\necho any_int(1, 2, 20);\necho any_int(1, 2, 21);\necho any_int(1,\
    \ 2, 22);\necho any_int(1, 2, 23);\necho any_int(1, 2, 24);\necho any_int(1, 2,\
    \ 25);\necho any_int(1, 2, 26);\necho any_int(1, 2, 27);\necho any_int(1, 2, 28);\n\
    echo any_int(1, 2, 29);\necho any_int(1, 2, 30);\necho any_int(1, 2, 31);\necho\
    \ any_int(1, 2, 32);\necho any_int(1, 2, 33);\necho any_int(1, 2, 34);\necho any_int(1,\
    \ 2, 35);\necho any_int(1, 2, 36);\necho any_int(1, 2, 37);\necho any_int(1, 2,\
    \ 38);\necho any_int(1, 2, 39);\necho any_\nfunction candidate(...$args) {\n \
    \   return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpd_cyppk4.php on line 53

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3) . \"\\n\"; // false\necho\
    \ any_int(1, 2, 4) . \"\\n\"; // true\necho any_int(1, 2, \"3\") . \"\\n\"; //\
    \ false\necho any_int(1, 2, \"4\") . \"\\n\"; // false\necho any_int(1, 2, \"\
    5\") . \"\\n\"; // false\necho any_int(1, 2, \"6\") . \"\\n\"; // false\necho\
    \ any_int(1, 2, \"7\") . \"\\n\"; // false\necho any_int(1, 2, \"8\") . \"\\n\"\
    ; // false\necho any_int(1, 2, \"9\") . \"\\n\"; // false\necho any_int(1, 2,\
    \ \"10\") . \"\\n\"; // false\necho any_int(1, 2, \"11\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"12\") . \"\\n\"; // false\necho any_int(1, 2, \"13\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"14\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"15\") . \"\\n\"; // false\necho any_int(1, 2, \"16\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"17\") . \"\\n\"; // false\necho any_int(1, 2, \"18\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"19\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"20\") . \"\\n\"; // false\necho any_int(1, 2, \"21\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"22\") . \"\\n\"; // false\necho any_int(\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpiu34zode.php on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\necho any_int(1, 2, 3);\necho \"<br>\";\necho any_int(1,\
    \ 2, 2);\necho \"<br>\";\necho any_int(1, 2, 4);\necho \"<br>\";\necho any_int(1,\
    \ 2, 1);\necho \"<br>\";\necho any_int(1, 2, 0);\necho \"<br>\";\necho any_int(1,\
    \ 2, \"3\");\necho \"<br>\";\necho any_int(1, 2, \"a\");\necho \"<br>\";\necho\
    \ any_int(1, 2, null);\necho \"<br>\";\necho any_int(1, 2, array(3));\necho \"\
    <br>\";\necho any_int(1, 2, true);\necho \"<br>\";\necho any_int(1, 2, new stdClass);\n\
    echo \"<br>\";\necho any_int(1, 2, \"1\");\necho \"<br>\";\necho any_int(1, 2,\
    \ \"2\");\necho \"<br>\";\necho any_int(1, 2, \"3\");\necho \"<br>\";\necho any_int(1,\
    \ 2, \"4\");\necho \"<br>\";\necho any_int(1, 2, \"5\");\necho \"<br>\";\necho\
    \ any_int(1, 2, \"6\");\necho \"<br>\";\necho any_int(1, 2, \"7\");\necho \"<br>\"\
    ;\necho any_int(1, 2, \"8\");\necho \"<br>\";\necho any_int(1, 2, \"9\");\necho\
    \ \"<br>\";\necho any_int(1, 2, \"10\");\necho \"<br>\";\necho any_int(1, 2, \"\
    11\");\necho \"<br>\";\necho any_int(1, 2\nfunction candidate(...$args) {\n  \
    \  return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp9hr604k0.php
    on line 63

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nvar_dump(any_int(1, 2, 3));\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL; // false\necho any_int(1, 2, 2) . PHP_EOL; // true\necho any_int(1,\
    \ 2, 1) . PHP_EOL; // true\necho any_int(1, 2, 0) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -1) . PHP_EOL; // false\necho any_int(1, 2, -2) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -3) . PHP_EOL; // false\necho any_int(1, 2, -4) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -5) . PHP_EOL; // true\necho any_int(1, 2, -6) . PHP_EOL;\
    \ // false\necho any_int(1, 2, -7) . PHP_EOL; // false\necho any_int(1, 2, -8)\
    \ . PHP_EOL; // true\necho any_int(1, 2, -9) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -10) . PHP_EOL; // false\necho any_int(1, 2, -11) . PHP_EOL; // true\necho\
    \ any_int(1, 2, -12) . PHP_EOL; // false\necho any_int(1, 2, -13) . PHP_EOL; //\
    \ false\necho any_int(1, 2, -14) . PHP_EOL; // true\necho any_int(1, 2, -15) .\
    \ PHP_EOL; // false\necho any_int(1, 2, -16) . PHP_EOL; // false\necho any_int(1,\
    \ 2, -17) . PHP_EOL; // true\necho any_int(1, 2, -18) . PHP_EOL; // false\necho\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyg3qfq9m.php on line 37

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 2);\necho any_int(1, 2, 1);\n\
    echo any_int(1, 2, 0);\necho any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho\
    \ any_int(1, 2, -3);\necho any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1,\
    \ 2, -6);\necho any_int(1, 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2,\
    \ -9);\necho any_int(1, 2, -10);\necho any_int(1, 2, -11);\necho any_int(1, 2,\
    \ -12);\necho any_int(1, 2, -13);\necho any_int(1, 2, -14);\necho any_int(1, 2,\
    \ -15);\necho any_int(1, 2, -16);\necho any_int(1, 2, -17);\necho any_int(1, 2,\
    \ -18);\necho any_int(1, 2, -19);\necho any_int(1, 2, -20);\necho any_int(1, 2,\
    \ -21);\necho any_int(1, 2, -22);\necho any_int(1, 2, -23);\necho any_int(1, 2,\
    \ -24);\necho any_int(1, 2, -25);\necho any_int(1, 2, -26);\necho any_int(1, 2,\
    \ -27);\necho any_int(1, 2, -28);\necho any_int(1, 2, -29);\necho any_int(1, 2,\
    \ -30);\necho any_int(1\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpbab8s8hl.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcjue9zat.php:22\n\
    Stack trace:\n#0 /tmp/tmpcjue9zat.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcjue9zat.php\
    \ on line 22\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nvar_dump(any_int(1, 2, 3)); // false\nvar_dump(any_int(1,\
    \ 2, 2)); // true\nvar_dump(any_int(1, 2, 1)); // true\nvar_dump(any_int(1, 2,\
    \ 0)); // false\nvar_dump(any_int(1, 2, -1)); // false\nvar_dump(any_int(1, 2,\
    \ \"1\")); // false\nvar_dump(any_int(1, 2, \"2\")); // false\nvar_dump(any_int(1,\
    \ 2, \"3\")); // false\nvar_dump(any_int(1, 2, \"4\")); // false\nvar_dump(any_int(1,\
    \ 2, \"5\")); // false\nvar_dump(any_int(1, 2, \"6\")); // false\nvar_dump(any_int(1,\
    \ 2, \"7\")); // false\nvar_dump(any_int(1, 2, \"8\")); // false\nvar_dump(any_int(1,\
    \ 2, \"9\")); // false\nvar_dump(any_int(1, 2, \"10\")); // false\nvar_dump(any_int(1,\
    \ 2, \"11\")); // false\nvar_dump(any_int(1, 2, \"12\")); // false\nvar_dump(any_int(1,\
    \ 2, \"13\")); // false\nvar_dump(any_int(1, 2, \"14\")); // false\nvar_dump(any_int(1,\
    \ 2, \"15\")); // false\nvar_dump(any_int(1, 2, \"16\")); // false\nvar_dump(any_int(1,\
    \ 2, \"17\")); // false\nvar_dump(any_int(1, 2,\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpn0l2uz03.php on line 41

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo__3t6v4.php:25\n\
    Stack trace:\n#0 /tmp/tmpo__3t6v4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo__3t6v4.php\
    \ on line 25\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . PHP_EOL;\necho any_int(1, 2, 2) . PHP_EOL;\necho any_int(1, 2, 1) .\
    \ PHP_EOL;\necho any_int(1, 2, 0) . PHP_EOL;\necho any_int(1, 2, -1) . PHP_EOL;\n\
    echo any_int(1, 2, -2) . PHP_EOL;\necho any_int(1, 2, -3) . PHP_EOL;\necho any_int(1,\
    \ 2, -4) . PHP_EOL;\necho any_int(1, 2, -5) . PHP_EOL;\necho any_int(1, 2, -6)\
    \ . PHP_EOL;\necho any_int(1, 2, -7) . PHP_EOL;\necho any_int(1, 2, -8) . PHP_EOL;\n\
    echo any_int(1, 2, -9) . PHP_EOL;\necho any_int(1, 2, -10) . PHP_EOL;\necho any_int(1,\
    \ 2, -11) . PHP_EOL;\necho any_int(1, 2, -12) . PHP_EOL;\necho any_int(1, 2, -13)\
    \ . PHP_EOL;\necho any_int(1, 2, -14) . PHP_EOL;\necho any_int(1, 2, -15) . PHP_EOL;\n\
    echo any_int(1, 2, -16) . PHP_EOL;\necho any_int(1, 2, -17) . PHP_EOL;\necho any_int(1,\
    \ 2, -18) . PHP_EOL;\necho any_int(1, 2, -19) . PHP_EOL;\necho any_int(1, 2, -20)\
    \ . PHP_EOL;\necho any_int(1,\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpp8gofah0.php on line 39

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(3,\
    \ 4, 5);\necho \"\\n\";\necho any_int(1, 2, 3);\necho \"\\n\";\necho any_int(1,\
    \ 1, 1);\necho \"\\n\";\necho any_int(1, 2, 2);\necho \"\\n\";\necho any_int(1,\
    \ 2, 3);\necho \"\\n\";\necho any_int(1, 2, 4);\necho \"\\n\";\necho any_int(1,\
    \ 2, 5);\necho \"\\n\";\necho any_int(1, 2, 6);\necho \"\\n\";\necho any_int(1,\
    \ 2, 7);\necho \"\\n\";\necho any_int(1, 2, 8);\necho \"\\n\";\necho any_int(1,\
    \ 2, 9);\necho \"\\n\";\necho any_int(1, 2, 10);\necho \"\\n\";\necho any_int(1,\
    \ 2, 11);\necho \"\\n\";\necho any_int(1, 2, 12);\necho \"\\n\";\necho any_int(1,\
    \ 2, 13);\necho \"\\n\";\necho any_int(1, 2, 14);\necho \"\\n\";\necho any_int(1,\
    \ 2, 15);\necho \"\\n\";\necho any_int(1, 2, 16);\necho \"\\n\";\necho any_int(1,\
    \ 2, 17);\necho \"\\n\";\necho any_int(1, 2, 18);\necho \"\\n\";\necho any_int(1,\
    \ 2, 19);\necho \"\\n\";\necho any_int(1, 2, 20);\necho \"\\n\";\necho any_int(1,\
    \ 2, 21);\necho \"\\n\";\necho any_int(1, 2, 22);\necho \"\\n\";\necho any_int(1,\
    \ 2, 23);\necho \"\\n\";\necho any_int(1, 2, 24);\necho \"\\n\";\necho any_int(1,\
    \ 2, 25);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n1\n\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpayn7lban.php:76\nStack trace:\n\
    #0 /tmp/tmpayn7lban.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpayn7lban.php\
    \ on line 76\n"
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3); // false\necho any_int(1, 2, 2); // true\necho any_int(1, 2, 4); // false\n\
    echo any_int(1, 2, 1); // true\necho any_int(1, 2, 0); // false\necho any_int(1,\
    \ 2, -1); // false\necho any_int(1, 2, -2); // false\necho any_int(1, 2, -3);\
    \ // false\necho any_int(1, 2, -4); // false\necho any_int(1, 2, -5); // false\n\
    echo any_int(1, 2, -6); // false\necho any_int(1, 2, -7); // false\necho any_int(1,\
    \ 2, -8); // false\necho any_int(1, 2, -9); // false\necho any_int(1, 2, -10);\
    \ // false\necho any_int(1, 2, -11); // false\necho any_int(1, 2, -12); // false\n\
    echo any_int(1, 2, -13); // false\necho any_int(1, 2, -14); // false\necho any_int(1,\
    \ 2, -15); // false\necho any_int(1, 2, -16); // false\necho any_int(1, 2, -17);\
    \ // false\necho any_int(1, 2, -18); // false\necho any_int(1, 2, -19); // false\n\
    echo any_int(1, 2, -20); // false\necho any_int(1, 2, -21); // false\necho any_int(1,\
    \ 2, -22); // false\necho any_int(1, 2, -23); // false\necho any_int(1, 2, -24);\
    \ // false\necho any_int(1, 2, -25); // false\necho any_int(1, 2, -26\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpa3ic8b6o.php
    on line 45

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho any_int(1, 2, 4);\necho any_int(1, 2, 1);\necho any_int(1, 2, 0);\n\
    echo any_int(1, 2, -1);\necho any_int(1, 2, -2);\necho any_int(1, 2, -3);\necho\
    \ any_int(1, 2, -4);\necho any_int(1, 2, -5);\necho any_int(1, 2, -6);\necho any_int(1,\
    \ 2, -7);\necho any_int(1, 2, -8);\necho any_int(1, 2, -9);\necho any_int(1, 2,\
    \ -10);\necho any_int(1, 2, -11);\necho any_int(1, 2, -12);\necho any_int(1, 2,\
    \ -13);\necho any_int(1, 2, -14);\necho any_int(1, 2, -15);\necho any_int(1, 2,\
    \ -16);\necho any_int(1, 2, -17);\necho any_int(1, 2, -18);\necho any_int(1, 2,\
    \ -19);\necho any_int(1, 2, -20);\necho any_int(1, 2, -21);\necho any_int(1, 2,\
    \ -22);\necho any_int(1, 2, -23);\necho any_int(1, 2, -24);\necho any_int(1, 2,\
    \ -25);\necho any_int(1, 2, -26);\necho any_int(1, 2, -27);\necho any_int(1, 2,\
    \ -28);\necho any_int(1, 2, -29);\necho any_int(1, 2, -30);\necho any_int(1, 2,\
    \ -31);\necho any_int(1, 2\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp22yp8d_b.php
    on line 50

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z || $x + $z == $y || $y + $z == $x) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 2) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 1) . \"\\n\"; // true\necho any_int(1, 2, 0) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -1) . \"\\n\"; // false\necho any_int(1, 2, \"1\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"2\") . \"\\n\"; // false\necho any_int(1, 2, \"3\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"4\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"5\") . \"\\n\"; // false\necho any_int(1, 2, \"6\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"7\") . \"\\n\"; // false\necho any_int(1, 2, \"8\") . \"\\\
    n\"; // false\necho any_int(1, 2, \"9\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"10\") . \"\\n\"; // false\necho any_int(1, 2, \"11\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"12\") . \"\\n\"; // false\necho any_int(1, 2, \"13\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"14\") . \"\\n\"; // false\necho any_int(1,\
    \ 2, \"15\") . \"\\n\"; // false\necho any_int(1, 2, \"16\") . \"\\n\"; // false\n\
    echo any_int(1, 2, \"17\") . \"\\n\"; // false\necho any_int(1, 2, \"18\") . \"\
    \\n\"; // false\necho any_int(1, 2, \"19\") . \"\\n\"; // false\necho any_int(1,\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpsixchcg2.php on line 39

    '
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    return $x + $y === $z || $x + $z === $y || $y + $z === $x;\n\
    }\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y == $z) || ($x + $z == $y) || ($y + $z == $x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho \"<br>\";\necho any_int(1, 2, 4);\necho \"<br>\";\necho any_int(1,\
    \ 2, 1);\necho \"<br>\";\necho any_int(1, 2, 2);\necho \"<br>\";\necho any_int(1,\
    \ 2, 0);\necho \"<br>\";\necho any_int(1, 2, -1);\necho \"<br>\";\necho any_int(1,\
    \ 2, -2);\necho \"<br>\";\necho any_int(1, 2, -3);\necho \"<br>\";\necho any_int(1,\
    \ 2, -4);\necho \"<br>\";\necho any_int(1, 2, -5);\necho \"<br>\";\necho any_int(1,\
    \ 2, -6);\necho \"<br>\";\necho any_int(1, 2, -7);\necho \"<br>\";\necho any_int(1,\
    \ 2, -8);\necho \"<br>\";\necho any_int(1, 2, -9);\necho \"<br>\";\necho any_int(1,\
    \ 2, -10);\necho \"<br>\";\necho any_int(1, 2, -11);\necho \"<br>\";\necho any_int(1,\
    \ 2, -12);\necho \"<br>\";\necho any_int(1, 2, -13);\necho \"<br>\";\necho any_int(1,\
    \ 2, -14);\necho \"<br>\";\necho any_int(1, 2, -15);\necho \"<br>\";\necho any_int(1,\
    \ 2, -16);\necho \"<br>\";\necho any_int(1, 2, -17);\necho \"<br>\";\necho any_int(1,\
    \ 2, -18);\necho \"<br>\";\necho any_int(1, 2, -19);\necho \"<br>\";\necho any_int(\n\
    function candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpajfcj589.php on line 63

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxa3ua30.php:21\n\
    Stack trace:\n#0 /tmp/tmpfxa3ua30.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpfxa3ua30.php\
    \ on line 21\n"
  timestamp: 1659978372
- exit_code: 0
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (is_int($x) && is_int($y) && is_int($z)) {\n        if ($x\
    \ + $y == $z || $x + $z == $y || $y + $z == $x) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return any_int(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2, 3, 1) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2.5, 2, 3) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(1.5, 5, 3.5) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2, 6, 2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(4, 2, 2) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2, 2.2, 2.2)\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n  if ($x == $y + $z || $y == $x + $z || $z == $x + $y) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n\necho any_int(2, 3, 4);\necho\
    \ any_int(2, 3, 5);\necho any_int(2, 3, 6);\necho any_int(2, 3, 7);\necho any_int(2,\
    \ 3, 8);\necho any_int(2, 3, 9);\necho any_int(2, 3, 10);\necho any_int(2, 3,\
    \ 11);\necho any_int(2, 3, 12);\necho any_int(2, 3, 13);\necho any_int(2, 3, 14);\n\
    echo any_int(2, 3, 15);\necho any_int(2, 3, 16);\necho any_int(2, 3, 17);\necho\
    \ any_int(2, 3, 18);\necho any_int(2, 3, 19);\necho any_int(2, 3, 20);\necho any_int(2,\
    \ 3, 21);\necho any_int(2, 3, 22);\necho any_int(2, 3, 23);\necho any_int(2, 3,\
    \ 24);\necho any_int(2, 3, 25);\necho any_int(2, 3, 26);\necho any_int(2, 3, 27);\n\
    echo any_int(2, 3, 28);\necho any_int(2, 3, 29);\necho any_int(2, 3, 30);\necho\
    \ any_int(2, 3, 31);\necho any_int(2, 3, 32);\necho any_int(2, 3, 33);\necho any_int(2,\
    \ 3, 34);\necho any_int(2, 3, 35);\necho any_int(2, 3, 36);\necho any_int(2, 3,\
    \ 37);\necho any_int(2, 3, 38);\necho any_int(2, 3, 39);\necho any_int(2, 3, 40);\n\
    echo any_int(2, 3, 41);\necho any_\nfunction candidate(...$args) {\n    return\
    \ any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2, 3, 1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpsle5owa9.php on line 53

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if ($x + $y == $z) {\n        return true;\n    } elseif ($x\
    \ + $z == $y) {\n        return true;\n    } elseif ($y + $z == $x) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3) . \"\\n\"; // false\necho any_int(1, 2, 4) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 2) . \"\\n\"; // true\necho any_int(1, 2, 1) . \"\\n\"; // true\necho any_int(1,\
    \ 2, 0) . \"\\n\"; // false\necho any_int(1, 2, -1) . \"\\n\"; // false\necho\
    \ any_int(1, 2, -2) . \"\\n\"; // false\necho any_int(1, 2, -3) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -4) . \"\\n\"; // false\necho any_int(1, 2, -5) .\
    \ \"\\n\"; // false\necho any_int(1, 2, -6) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -7) . \"\\n\"; // false\necho any_int(1, 2, -8) . \"\\n\"; // false\necho\
    \ any_int(1, 2, -9) . \"\\n\"; // false\necho any_int(1, 2, -10) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -11) . \"\\n\"; // false\necho any_int(1, 2, -12)\
    \ . \"\\n\"; // false\necho any_int(1, 2, -13) . \"\\n\"; // false\necho any_int(1,\
    \ 2, -14) . \"\\n\"; // false\necho any_int(1, 2, -15) . \"\\n\"; // false\necho\
    \ any_int(1, 2, -16) . \"\\n\"; // false\necho any_int(1, 2, -17) . \"\\n\"; //\
    \ false\necho any_int(1, 2, -18) . \"\\n\"; // false\necho any_int(\nfunction\
    \ candidate(...$args) {\n    return any_int(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2, 3, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.5, 2, 3) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1.5, 5, 3.5) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2, 6, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2.2, 2.2, 2.2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-4, 6, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2, 1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 4, 7) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3.0, 4, 7) !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3ltu_3uv.php on line 42

    '
  timestamp: 1659978372
- exit_code: 255
  program: "<?php\n// Create a function that takes 3 numbers.\n// Returns true if\
    \ one of the numbers is equal to the sum of the other two, and all numbers are\
    \ integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int($x,\
    \ $y, $z) {\n    if (($x + $y) == $z || ($x + $z) == $y || ($y + $z) == $x) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\necho any_int(1,\
    \ 2, 3);\necho \"<br>\";\necho any_int(1, 1, 1);\necho \"<br>\";\necho any_int(1,\
    \ 2, 2);\necho \"<br>\";\necho any_int(1, 2, 1);\necho \"<br>\";\necho any_int(1,\
    \ 1, 2);\necho \"<br>\";\necho any_int(1, 2, 3);\necho \"<br>\";\necho any_int(1,\
    \ 2, 4);\necho \"<br>\";\necho any_int(1, 2, 5);\necho \"<br>\";\necho any_int(1,\
    \ 2, 6);\necho \"<br>\";\necho any_int(1, 2, 7);\necho \"<br>\";\necho any_int(1,\
    \ 2, 8);\necho \"<br>\";\necho any_int(1, 2, 9);\necho \"<br>\";\necho any_int(1,\
    \ 2, 10);\necho \"<br>\";\necho any_int(1, 2, 11);\necho \"<br>\";\necho any_int(1,\
    \ 2, 12);\necho \"<br>\";\necho any_int(1, 2, 13);\necho \"<br>\";\necho any_int(1,\
    \ 2, 14);\necho \"<br>\";\necho any_int(1, 2, 15);\necho \"<br>\";\necho any_int(1,\
    \ 2, 16);\necho \"<br>\";\necho any_int(1, 2, 17);\necho \"<br>\";\necho any_int(1,\
    \ 2, 18);\necho \"<br>\";\necho any_int(1, 2, 19);\necho \"<br>\";\necho any_int(1,\
    \ 2, 20);\necho \"<br>\";\necho any_int(1, 2, 21);\necho \"<br>\";\necho any_int(1,\
    \ 2, 22);\necho \"<br>\";\necho any_int(\nfunction candidate(...$args) {\n   \
    \ return any_int(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2,\
    \ 3, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.5,\
    \ 2, 3) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.5,\
    \ 5, 3.5) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 6, 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2.2,\
    \ 2.2, 2.2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-4,\
    \ 6, 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2,\
    \ 1, 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 4, 7) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3.0,\
    \ 4, 7) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp4yi4ac7i.php on line 65

    '
  timestamp: 1659978372
