language: php
name: HumanEval_128_prod_signs
results:
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphh6n3axm.php:31\n\
    Stack trace:\n#0 /tmp/tmphh6n3axm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphh6n3axm.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  foreach ($arr as $val) {\n    if ($val > 0) {\n      $sum += $val;\n      $prod\
    \ *= 1;\n    } elseif ($val < 0) {\n      $sum += $val;\n      $prod *= -1;\n\
    \    } else {\n      $prod *= 0;\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ayhhef_.php:29\n\
    Stack trace:\n#0 /tmp/tmp2ayhhef_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2ayhhef_.php\
    \ on line 29\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\necho prod_signs([1, 2, 3, -4, 5, -6, 7, -8, 9, -10]);\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '55'
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        if ($num > 0) {\n            $sum += $num;\n            $prod\
    \ *= 1;\n        } elseif ($num < 0) {\n            $sum += abs($num);\n     \
    \       $prod *= -1;\n        } else {\n            $prod *= 0;\n        }\n \
    \   }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num < 0) {\n      $prod *= -1;\n    } elseif ($num >\
    \ 0) {\n      $prod *= 1;\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qbe14k_.php:30\n\
    Stack trace:\n#0 /tmp/tmp_qbe14k_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_qbe14k_.php\
    \ on line 30\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ NULL;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $signs = array_filter($signs, function($num)\
    \ {\n    return $num !== 0;\n  });\n  $magnitudes = array_map(function($num) {\n\
    \    return abs($num);\n  }, $arr);\n  $magnitudes = array_sum($magnitudes);\n\
    \  $signs = array_product($signs);\n  return $magnitudes * $signs;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx45c4xe.php:37\n\
    Stack trace:\n#0 /tmp/tmpwx45c4xe.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpwx45c4xe.php\
    \ on line 37\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return NULL;\n\
    \  $sum = 0;\n  $prod = 1;\n  foreach($arr as $num) {\n    if($num > 0) {\n  \
    \    $sum += $num;\n      $prod *= 1;\n    } elseif($num < 0) {\n      $sum +=\
    \ abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n\
    \  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $product *= $num <=> 0;\n  }\n  return $sum * $product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $value) {\n \
    \   if ($value > 0) {\n      $sum += $value;\n      $prod *= 1;\n    } elseif\
    \ ($value < 0) {\n      $sum += $value * -1;\n      $prod *= -1;\n    } else {\n\
    \      $prod *= 0;\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ NULL;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num != 0) {\n      $prod *= $num / abs($num);\n    }\n\
    \  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp236m5b06.php:28\n\
    Stack trace:\n#0 /tmp/tmp236m5b06.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp236m5b06.php\
    \ on line 28\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $product *= $num <=> 0;\n  }\n  return $sum * $product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if($n > 0) return 1;\n    if($n < 0)\
    \ return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n != 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eyddeca.php:30\n\
    Stack trace:\n#0 /tmp/tmp3eyddeca.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3eyddeca.php\
    \ on line 30\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($num) {\n    return abs($num);\n  }, $arr);\n  $sum = array_sum($magnitudes);\n\
    \  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs = array_filter($signs, function($n) {\n    return\
    \ $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitudes = array_sum($magnitudes);\n\
    \  return $magnitudes * $signs;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8d72ua_.php:36\n\
    Stack trace:\n#0 /tmp/tmpg8d72ua_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg8d72ua_.php\
    \ on line 36\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $signs = array_map(function($n) {\n        if ($n\
    \ > 0) {\n            return 1;\n        } elseif ($n < 0) {\n            return\
    \ -1;\n        } else {\n            return 0;\n        }\n    }, $arr);\n   \
    \ $signs_prod = array_product($signs);\n    $magnitudes = array_map(function($n)\
    \ {\n        return abs($n);\n    }, $arr);\n    $magnitudes_sum = array_sum($magnitudes);\n\
    \    return $magnitudes_sum * $signs_prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num < 0 ? -1 : ($num\
    \ > 0 ? 1 : 0);\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value < 0) {\n      $prod *= -1;\n    } elseif ($value > 0) {\n      $prod\
    \ *= 1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($value);\n  }\n\
    \  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $signs_prod = array_product($signs);\n  $magnitudes\
    \ = array_map(function($num) {\n    return abs($num);\n  }, $arr);\n  $magnitudes_sum\
    \ = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $value) {\n        if ($value > 0) {\n            $sum += $value;\n        \
    \    $prod *= 1;\n        } elseif ($value < 0) {\n            $sum += abs($value);\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n  foreach ($arr as $value)\
    \ {\n    $sum += abs($value);\n    if ($value < 0) {\n      $prod *= -1;\n   \
    \ } elseif ($value == 0) {\n      $prod = 0;\n    }\n  }\n  return $sum * $prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (empty($arr)) {\n    return NULL;\n  }\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value > 0) {\n      $sum += $value;\n      $prod *= 1;\n    } elseif\
    \ ($value < 0) {\n      $sum += $value;\n      $prod *= -1;\n    } else {\n  \
    \    $prod *= 0;\n    }\n  }\n  return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7oyi7rw.php:31\n\
    Stack trace:\n#0 /tmp/tmps7oyi7rw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps7oyi7rw.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num < 0) {\n\
    \      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\necho prod_signs([1, 2, 3, -4, -5, -6,\
    \ 7, 8, 9, 0]) . PHP_EOL;\necho prod_signs([1, 2, 3, -4, -5, -6, 7, 8, 9, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpvgxf9yzd.php on line 29

    '
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value > 0 ? 1 : ($value < 0 ? -1 : 0);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    $prod\
    \ *= $num <=> 0;\n    $sum += abs($num);\n  }\n  return $sum * $prod;\n}\n\necho\
    \ prod_signs([1, 2, 3, -4, 5, -6, 7, -8, 9, -10]);\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '55'
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $magnitudes = array_map(function($num) {\n\
    \    return abs($num);\n  }, $arr);\n  $sign_prod = array_product($signs);\n \
    \ $mag_sum = array_sum($magnitudes);\n  return $sign_prod * $mag_sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs_product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes_sum\
    \ = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_product;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value;\n  }\n  return $sum * $product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwn5avrx.php:25\n\
    Stack trace:\n#0 /tmp/tmpwwn5avrx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwwn5avrx.php\
    \ on line 25\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num < 0) {\n\
    \      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num > 0 ? 1 : ($num <\
    \ 0 ? -1 : 0);\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $prod = array_product($signs);\n  $mags =\
    \ array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  return array_sum($mags)\
    \ * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd_166ba.php:29\n\
    Stack trace:\n#0 /tmp/tmpkd_166ba.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkd_166ba.php\
    \ on line 29\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $magnitudes = array_map(function($num) {\n\
    \    return abs($num);\n  }, $arr);\n  $sum = array_sum($magnitudes);\n  $product\
    \ = array_product($signs);\n  return $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($x) {\n    if ($x > 0) {\n      return\
    \ 1;\n    } elseif ($x < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs = array_filter($signs, function($x) {\n    return\
    \ $x !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes = array_map(function($x)\
    \ {\n    return abs($x);\n  }, $arr);\n  $magnitudes = array_sum($magnitudes);\n\
    \  return $magnitudes * $signs;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgf7exol.php:36\n\
    Stack trace:\n#0 /tmp/tmpxgf7exol.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxgf7exol.php\
    \ on line 36\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num <=> 0;\n    }\n \
    \   return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num < 0) {\n\
    \      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num > 0 ? 1 : ($num <\
    \ 0 ? -1 : 0);\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num < 0) {\n\
    \      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $prod = array_product($signs);\n  $mags = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $sum = array_sum($mags);\n  return $sum\
    \ * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if($n > 0) return 1;\n    if($n < 0)\
    \ return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinjl72v4.php:31\n\
    Stack trace:\n#0 /tmp/tmpinjl72v4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpinjl72v4.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    return $n < 0 ? -1 : ($n > 0 ? 1 : 0);\n\
    \  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  return array_product($signs) * array_sum($magnitudes);\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $result = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value > 0) {\n      $result *= 1;\n      $sum += $value;\n    } elseif ($value\
    \ < 0) {\n      $result *= -1;\n      $sum += abs($value);\n    } else {\n   \
    \   $result *= 0;\n    }\n  }\n  return $sum * $result;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num >= 0 ? 1 : -1;\n  }\n  return $sum * $prod;\n\
    }\n\necho prod_signs([1, 2, 3, -4, 5, -6]); // -1 * (1 + 2 + 3 + 4 + 5 + 6) =\
    \ -1 * 21 = -21\necho prod_signs([0, 1, 2, 3, -4, 5, -6]); // -1 * (1 + 2 + 3\
    \ + 4 + 5 + 6) = -1 * 21 = -21\necho prod_signs([0, 1, 2, 3, -4, 5, -6, 0]); //\
    \ -1 * (1 + 2 + 3 + 4 + 5 + 6) = -1 * 21 = -21\necho prod_signs([0, 0, 0, 0, 0,\
    \ 0, 0]); // 0 * 0 = 0\necho prod_signs([]); // null\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2121210\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts_ty7f6.php:31\n\
    Stack trace:\n#0 /tmp/tmpts_ty7f6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpts_ty7f6.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num < 0 ? -1 : ($num\
    \ > 0 ? 1 : 0);\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ < 0) {\n      $prod *= -1;\n    } elseif ($num > 0) {\n      $prod *= 1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $num) {\n   \
    \ if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *=\
    \ -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n \
    \ return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $signs_prod = array_product($signs);\n  $magnitudes\
    \ = array_map(function($num) {\n    return abs($num);\n  }, $arr);\n  $magnitudes_sum\
    \ = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    return $n > 0 ? 1 : ($n\
    \ < 0 ? -1 : 0);\n  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return\
    \ abs($n);\n  }, $arr);\n  return array_product($signs) * array_sum($magnitudes);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ NULL;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\necho prod_signs([-1, -2, -3, -4, -5]);\necho prod_signs([1,\
    \ 2, 3, 4, 5]);\necho prod_signs([0, 0, 0, 0, 0]);\necho prod_signs([-1, 2, -3,\
    \ 4, -5]);\necho prod_signs([-1, -2, 3, 4, -5]);\necho prod_signs([-1, -2, -3,\
    \ 4, 5]);\necho prod_signs([-1, -2, -3, -4, 5]);\necho prod_signs([-1, -2, -3,\
    \ -4, -5]);\necho prod_signs([]);\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: -15150-15-15-1515-15
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (count($arr) === 0) {\n\
    \    return null;\n  }\n  $sum = 0;\n  $sign = 1;\n  foreach ($arr as $number)\
    \ {\n    $sum += abs($number);\n    $sign *= $number === 0 ? 1 : $number / abs($number);\n\
    \  }\n  return $sum * $sign;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvytaw1__.php:26\n\
    Stack trace:\n#0 /tmp/tmpvytaw1__.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvytaw1__.php\
    \ on line 26\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $value) {\n        if ($value > 0) {\n            $sum += $value;\n        \
    \    $prod *= 1;\n        } elseif ($value < 0) {\n            $sum += abs($value);\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    $prod\
    \ *= $value >= 0 ? 1 : -1;\n    $sum += abs($value);\n  }\n  return $prod * $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkob3hhl.php:26\n\
    Stack trace:\n#0 /tmp/tmpdkob3hhl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdkob3hhl.php\
    \ on line 26\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num <=> 0;\n    }\n \
    \   return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value > 0) {\n      $prod *= 1;\n    } elseif ($value < 0) {\n \
    \     $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $value) {\n        if ($value > 0) {\n            $sum += $value;\n        \
    \    $prod *= 1;\n        } elseif ($value < 0) {\n            $sum += abs($value);\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (count($arr) == 0) {\n\
    \    return null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n\
    \    $sum += abs($num);\n    if ($num != 0) {\n      $prod *= $num / abs($num);\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn4m3cvc.php:28\n\
    Stack trace:\n#0 /tmp/tmpwn4m3cvc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwn4m3cvc.php\
    \ on line 28\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num > 0 ? 1 : ($num <\
    \ 0 ? -1 : 0);\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    $sign\
    \ = $num <=> 0;\n    $prod *= $sign;\n    $sum += abs($num);\n  }\n  return $sum\
    \ * $prod;\n}\necho prod_signs([1, 2, 3, -4, -5, -6, 7, 8, 9, 0]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0

    '
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value >= 0 ? 1 : -1;\n  }\n  return $sum\
    \ * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnxmm7yx.php:26\n\
    Stack trace:\n#0 /tmp/tmpnnxmm7yx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnnxmm7yx.php\
    \ on line 26\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (count($arr) === 0) {\n\
    \    return null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n\
    \    if ($num === 0) {\n      continue;\n    }\n    $prod *= $num / abs($num);\n\
    \    $sum += abs($num);\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvyuuk4b.php:29\n\
    Stack trace:\n#0 /tmp/tmpgvyuuk4b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgvyuuk4b.php\
    \ on line 29\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  $signs = array_map(function($n) {\n    if ($n === 0) {\n     \
    \ return 0;\n    }\n    return $n / abs($n);\n  }, $arr);\n  return array_sum($magnitudes)\
    \ * array_product($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs_prod = array_product($signs);\n\
    \  $magnitudes = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n\
    \  $magnitudes_sum = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if($n > 0) return 1;\n    if($n < 0)\
    \ return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n != 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsq5hr1y.php:31\n\
    Stack trace:\n#0 /tmp/tmpbsq5hr1y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbsq5hr1y.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $value) {\n    $sum\
    \ += abs($value);\n    $prod *= $value <=> 0;\n  }\n  return $sum * $prod;\n}\n\
    \nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs = array_filter($signs, function($n) {\n    return\
    \ $n !== 0;\n  });\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  return array_product($signs) * array_sum($magnitudes);\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56pz62bl.php:35\n\
    Stack trace:\n#0 /tmp/tmp56pz62bl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp56pz62bl.php\
    \ on line 35\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value > 0) {\n      $prod *= 1;\n    } elseif ($value < 0) {\n      $prod\
    \ *= -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($value);\n \
    \ }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  $product = array_product($signs);\n  $sum = array_sum($magnitudes);\n\
    \  return $product * $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs_product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes_sum\
    \ = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_product;\n}\n\n\
    echo prod_signs([-1, -2, -3, -4, -5]); // -120\necho prod_signs([1, 2, 3, 4, 5]);\
    \ // 120\necho prod_signs([-1, 2, -3, 4, -5]); // -120\necho prod_signs([-1, -2,\
    \ -3, -4, -5, 0]); // 0\necho prod_signs([]); // null\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: -1515-150
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $sum = array_sum($magnitudes);\n\
    \  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z2cekcy.php:31\n\
    Stack trace:\n#0 /tmp/tmp2z2cekcy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2z2cekcy.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ NULL;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value > 0) {\n      $prod *= 1;\n    } elseif ($value < 0) {\n      $prod\
    \ *= -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($value);\n \
    \ }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $num) {\n        $sum += abs($num);\n        $prod *= $num <=> 0;\n    }\n \
    \   return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if($n > 0) {\n      return\
    \ 1;\n    } elseif($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  $sign_product = array_product($signs);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  return $sign_product * $magnitude_sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $magnitudes = array_map(function($num) {\n\
    \    return abs($num);\n  }, $arr);\n  $sign_product = array_product($signs);\n\
    \  $magnitude_sum = array_sum($magnitudes);\n  return $sign_product * $magnitude_sum;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs_product = array_product($signs);\n\
    \  $magnitudes = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n\
    \  $magnitudes_sum = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num > 0) {\n\
    \      $prod *= 1;\n      $sum += $num;\n    } elseif ($num < 0) {\n      $prod\
    \ *= -1;\n      $sum += abs($num);\n    } else {\n      $prod *= 0;\n    }\n \
    \ }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value <=> 0;\n  }\n  return $sum * $product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (count($arr) == 0) {\n\
    \    return null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n\
    \    $sum += abs($num);\n    if ($num == 0) {\n      $prod *= 1;\n    } else {\n\
    \      $prod *= $num / abs($num);\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvczo2z8.php:30\n\
    Stack trace:\n#0 /tmp/tmplvczo2z8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplvczo2z8.php\
    \ on line 30\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphh6n3axm.php:31\n\
    Stack trace:\n#0 /tmp/tmphh6n3axm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphh6n3axm.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value > 0) {\n      $prod *= 1;\n    } elseif ($value < 0) {\n      $prod\
    \ *= -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($value);\n \
    \ }\n  return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $number) {\n  \
    \  if ($number > 0) {\n      $product *= 1;\n    } elseif ($number < 0) {\n  \
    \    $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($number);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $num) {\n   \
    \ if ($num > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num\
    \ < 0) {\n      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod\
    \ *= 0;\n    }\n  }\n  return $sum * $prod;\n}\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ NULL;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $value) {\n    $sum\
    \ += abs($value);\n    $prod *= $value <=> 0;\n  }\n  return $sum * $prod;\n}\n\
    \nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ < 0) {\n      $prod *= -1;\n    } elseif ($num > 0) {\n      $prod *= 1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $result = 1;\n  $sum = 0;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $value) {\n \
    \   if ($value > 0) {\n      $result *= 1;\n      $sum += $value;\n    } elseif\
    \ ($value < 0) {\n      $result *= -1;\n      $sum += $value;\n    } else {\n\
    \      $result *= 0;\n    }\n  }\n  return $sum * $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_l2ebfg.php:32\n\
    Stack trace:\n#0 /tmp/tmpo_l2ebfg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo_l2ebfg.php\
    \ on line 32\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($x) {\n    if ($x > 0) return 1;\n    if ($x <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs_prod = array_product($signs);\n\
    \  $magnitudes = array_map(function($x) {\n    return abs($x);\n  }, $arr);\n\
    \  $magnitudes_sum = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_prod;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num < 0) {\n\
    \      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return NULL;\n\
    \  $signs = array_map(function($num) {\n    if ($num > 0) return 1;\n    if ($num\
    \ < 0) return -1;\n    return 0;\n  }, $arr);\n  $signs_prod = array_product($signs);\n\
    \  $magnitudes = array_map(function($num) {\n    return abs($num);\n  }, $arr);\n\
    \  $magnitudes_sum = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ NULL;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value >= 0 ? 1 : -1;\n  }\n  return $sum\
    \ * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnxmm7yx.php:26\n\
    Stack trace:\n#0 /tmp/tmpnnxmm7yx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnnxmm7yx.php\
    \ on line 26\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $value) {\n        $sum += abs($value);\n        if ($value > 0) {\n       \
    \     $prod *= 1;\n        } elseif ($value < 0) {\n            $prod *= -1;\n\
    \        } else {\n            $prod *= 0;\n        }\n    }\n    return $sum\
    \ * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $result = 1;\n  $magnitudes\
    \ = 0;\n  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $value)\
    \ {\n    if ($value > 0) {\n      $result *= 1;\n      $magnitudes += $value;\n\
    \    } elseif ($value < 0) {\n      $result *= -1;\n      $magnitudes += abs($value);\n\
    \    } else {\n      $result *= 0;\n    }\n  }\n  return $magnitudes * $result;\n\
    }\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value <=> 0;\n  }\n  return $sum * $product;\n\
    }\n\necho prod_signs([-1, -2, -3, -4, -5]);\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-15'
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    return $n > 0 ? 1 : ($n < 0 ? -1 : 0);\n\
    \  }, $arr);\n  $sign_prod = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  return $magnitude_sum * $sign_prod;\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $value) {\n        if ($value > 0) {\n            $sum += $value;\n        \
    \    $prod *= 1;\n        } elseif ($value < 0) {\n            $sum += abs($value);\n\
    \            $prod *= -1;\n        } else {\n            $prod *= 0;\n       \
    \ }\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  $sign_prod = array_product($signs);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  return $sign_prod * $magnitude_sum;\n}\nfunction candidate(...$args) {\n  \
    \  return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $value) {\n    $sum\
    \ += abs($value);\n    $prod *= $value <=> 0;\n  }\n  return $sum * $prod;\n}\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $product = 1;\n  foreach ($arr as $value) {\n   \
    \ $sum += abs($value);\n    $product *= $value >= 0 ? 1 : -1;\n  }\n  return $sum\
    \ * $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnxmm7yx.php:26\n\
    Stack trace:\n#0 /tmp/tmpnnxmm7yx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnnxmm7yx.php\
    \ on line 26\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if($n > 0) return 1;\n    if($n < 0)\
    \ return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n != 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  return array_sum($magnitudes)\
    \ * $signs;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyysur5ur.php:30\n\
    Stack trace:\n#0 /tmp/tmpyysur5ur.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyysur5ur.php\
    \ on line 30\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    return $n < 0 ? -1 : ($n > 0 ? 1 : 0);\n\
    \  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  return array_product($signs) * array_sum($magnitudes);\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach($arr as $num) {\n    if($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif($num < 0) {\n      $prod *= -1;\n  \
    \  } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return $sum\
    \ * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    return $n < 0 ? -1 : ($n > 0 ? 1 : 0);\n\
    \  }, $arr);\n  $signs_prod = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitudes_sum = array_sum($magnitudes);\n\
    \  return $magnitudes_sum * $signs_prod;\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs_product = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes_sum\
    \ = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_product;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach($arr as $num) {\n    $sum +=\
    \ abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n  foreach ($arr as $num) {\n\
    \    if ($num == 0) {\n      $prod *= 0;\n    } elseif ($num > 0) {\n      $prod\
    \ *= 1;\n    } else {\n      $prod *= -1;\n    }\n    $sum += abs($num);\n  }\n\
    \  return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $prod = 1;\n  $sum = 0;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $num) {\n   \
    \ if ($num > 0) {\n      $prod *= 1;\n      $sum += $num;\n    } elseif ($num\
    \ < 0) {\n      $prod *= -1;\n      $sum += abs($num);\n    } else {\n      $prod\
    \ *= 0;\n    }\n  }\n  return $sum * $prod;\n}\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs = array_filter($signs, function($n) {\n    return\
    \ $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitudes = array_sum($magnitudes);\n\
    \  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_oyk7g.php:37\n\
    Stack trace:\n#0 /tmp/tmpif_oyk7g.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpif_oyk7g.php\
    \ on line 37\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $value) {\n        $sum += abs($value);\n        $prod *= $value < 0 ? -1 :\
    \ ($value > 0 ? 1 : 0);\n    }\n    return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphh6n3axm.php:31\n\
    Stack trace:\n#0 /tmp/tmphh6n3axm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphh6n3axm.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\necho prod_signs([-1, -2, -3, -4, -5]);\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '-15'
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num < 0) {\n      $product *= -1;\n    } elseif ($num > 0) {\n      $product\
    \ *= 1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n \
    \ }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs_prod = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitudes_sum = array_sum($magnitudes);\n\
    \  return $magnitudes_sum * $signs_prod;\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return null;\n\
    \  $prod = 1;\n  $sum = 0;\n  foreach($arr as $num) {\n    if($num > 0) {\n  \
    \    $prod *= 1;\n      $sum += $num;\n    } elseif($num < 0) {\n      $prod *=\
    \ -1;\n      $sum += abs($num);\n    } else {\n      $prod *= 0;\n    }\n  }\n\
    \  return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    if (empty($arr)) {\n   \
    \     return null;\n    }\n    $sum = 0;\n    $prod = 1;\n    foreach ($arr as\
    \ $val) {\n        $sum += abs($val);\n        $prod *= $val <=> 0;\n    }\n \
    \   return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $signs = array_map(function($n)\
    \ {\n    if ($n > 0) {\n      return 1;\n    } elseif ($n < 0) {\n      return\
    \ -1;\n    } else {\n      return 0;\n    }\n  }, $arr);\n  $signs = array_filter($signs,\
    \ function($n) {\n    return $n != 0;\n  });\n  $signs = array_product($signs);\n\
    \  $magnitudes = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n\
    \  $magnitudes = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38i662it.php:34\n\
    Stack trace:\n#0 /tmp/tmp38i662it.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp38i662it.php\
    \ on line 34\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if($n > 0) {\n      return\
    \ 1;\n    } elseif($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $magnitudes = array_map(function($n) {\n    return abs($n);\n\
    \  }, $arr);\n  $sign_product = array_product($signs);\n  $magnitude_sum = array_sum($magnitudes);\n\
    \  return $sign_product * $magnitude_sum;\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value === 0) {\n      continue;\n    }\n    $prod *= $value > 0 ? 1 : -1;\n\
    \    $sum += abs($value);\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsumr3l2v.php:29\n\
    Stack trace:\n#0 /tmp/tmpsumr3l2v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsumr3l2v.php\
    \ on line 29\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0) {\n      $product *= 1;\n    } elseif ($num < 0) {\n      $product\
    \ *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($num);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if($n > 0) return 1;\n    if($n < 0)\
    \ return -1;\n    return 0;\n  }, $arr);\n  $signs_prod = array_product($signs);\n\
    \  $magnitudes = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n\
    \  $magnitudes_sum = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs = array_filter($signs, function($n) {\n    return\
    \ $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitudes = array_sum($magnitudes);\n\
    \  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_oyk7g.php:37\n\
    Stack trace:\n#0 /tmp/tmpif_oyk7g.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpif_oyk7g.php\
    \ on line 37\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n  foreach ($arr as $num) {\n\
    \    if ($num > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num\
    \ < 0) {\n      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod\
    \ *= 0;\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $signs = array_filter($signs, function($num)\
    \ {\n    return $num !== 0;\n  });\n  $magnitudes = array_map(function($num) {\n\
    \    return abs($num);\n  }, $arr);\n  $product = array_product($signs);\n  $sum\
    \ = array_sum($magnitudes);\n  return $sum * $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7p4jepzg.php:37\n\
    Stack trace:\n#0 /tmp/tmp7p4jepzg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7p4jepzg.php\
    \ on line 37\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($n) {\n    if ($n > 0) {\n      return\
    \ 1;\n    } elseif ($n < 0) {\n      return -1;\n    } else {\n      return 0;\n\
    \    }\n  }, $arr);\n  $signs = array_filter($signs, function($n) {\n    return\
    \ $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes = array_map(function($n)\
    \ {\n    return abs($n);\n  }, $arr);\n  $magnitudes = array_sum($magnitudes);\n\
    \  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_oyk7g.php:37\n\
    Stack trace:\n#0 /tmp/tmpif_oyk7g.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpif_oyk7g.php\
    \ on line 37\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  foreach ($arr as $value) {\n    if ($value > 0) {\n      $sum += $value;\n\
    \      $prod *= 1;\n    } elseif ($value < 0) {\n      $sum += $value;\n     \
    \ $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return $sum * $prod;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo9zk9my.php:29\n\
    Stack trace:\n#0 /tmp/tmpbo9zk9my.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbo9zk9my.php\
    \ on line 29\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if(empty($arr)) {\n    return\
    \ NULL;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach($arr as $num) {\n    if($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif($num < 0) {\n      $prod *= -1;\n  \
    \  } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return $sum\
    \ * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    if ($num > 0) {\n      $prod *= 1;\n    } elseif ($num <\
    \ 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $value) {\n    $sum\
    \ += abs($value);\n    if ($value > 0) {\n      $prod *= 1;\n    } elseif ($value\
    \ < 0) {\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n    }\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $signs = array_map(function($num) {\n    if ($num > 0) {\n   \
    \   return 1;\n    } elseif ($num < 0) {\n      return -1;\n    } else {\n   \
    \   return 0;\n    }\n  }, $arr);\n  $signs_product = array_product($signs);\n\
    \  $magnitudes = array_map(function($num) {\n    return abs($num);\n  }, $arr);\n\
    \  $magnitudes_sum = array_sum($magnitudes);\n  return $magnitudes_sum * $signs_product;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    $sum\
    \ += abs($num);\n    $prod *= $num <=> 0;\n  }\n  return $sum * $prod;\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $sum = 0;\n  $prod = 1;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $sum += $num;\n      $prod *= 1;\n    } elseif ($num < 0) {\n\
    \      $sum += abs($num);\n      $prod *= -1;\n    } else {\n      $prod *= 0;\n\
    \    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return NULL;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $prod = array_product($signs);\n\
    \  $mags = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $sum\
    \ = array_sum($mags);\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $prod = 1;\n  $sum = 0;\n\
    \  foreach ($arr as $num) {\n    if ($num > 0) {\n      $prod *= 1;\n      $sum\
    \ += $num;\n    } elseif ($num < 0) {\n      $prod *= -1;\n      $sum += abs($num);\n\
    \    } else {\n      $prod *= 0;\n    }\n  }\n  if ($prod == 0) {\n    return\
    \ null;\n  } else {\n    return $sum * $prod;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbzxh2hj.php:33\n\
    Stack trace:\n#0 /tmp/tmplbzxh2hj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplbzxh2hj.php\
    \ on line 33\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n    $sum = 0;\n    $prod = 1;\n\
    \    foreach ($arr as $value) {\n        if ($value > 0) {\n            $sum +=\
    \ $value;\n            $prod *= 1;\n        } elseif ($value < 0) {\n        \
    \    $sum += abs($value);\n            $prod *= -1;\n        } else {\n      \
    \      $prod *= 0;\n        }\n    }\n    return $sum * $prod;\n}\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzss65g5.php:31\n\
    Stack trace:\n#0 /tmp/tmptzss65g5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptzss65g5.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num > 0) {\n\
    \      $prod *= 1;\n      $sum += $num;\n    } elseif ($num < 0) {\n      $prod\
    \ *= -1;\n      $sum += abs($num);\n    } else {\n      $prod *= 0;\n    }\n \
    \ }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n    if\
    \ ($value > 0) {\n      $prod *= 1;\n    } elseif ($value < 0) {\n      $prod\
    \ *= -1;\n    } else {\n      $prod *= 0;\n    }\n    $sum += abs($value);\n \
    \ }\n  return $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) return null;\n\
    \  $signs = array_map(function($n) {\n    if ($n > 0) return 1;\n    if ($n <\
    \ 0) return -1;\n    return 0;\n  }, $arr);\n  $signs = array_filter($signs, function($n)\
    \ {\n    return $n !== 0;\n  });\n  $signs = array_product($signs);\n  $magnitudes\
    \ = array_map(function($n) {\n    return abs($n);\n  }, $arr);\n  $magnitudes\
    \ = array_sum($magnitudes);\n  return $magnitudes * $signs;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphh6n3axm.php:31\n\
    Stack trace:\n#0 /tmp/tmphh6n3axm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphh6n3axm.php\
    \ on line 31\n"
  timestamp: 1659979951
- exit_code: 255
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $sum = 0;\n  $prod = 1;\n\
    \  if (count($arr) == 0) {\n    return null;\n  }\n  foreach ($arr as $num) {\n\
    \    $sum += abs($num);\n    if ($num < 0) {\n      $prod *= -1;\n    } elseif\
    \ ($num > 0) {\n      $prod *= 1;\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b5vau6p.php:30\n\
    Stack trace:\n#0 /tmp/tmp5b5vau6p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5b5vau6p.php\
    \ on line 30\n"
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value) {\n   \
    \ if ($value > 0) {\n      $product *= 1;\n    } elseif ($value < 0) {\n     \
    \ $product *= -1;\n    } else {\n      $product *= 0;\n    }\n    $sum += abs($value);\n\
    \  }\n  return $sum * $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  if (empty($arr)) {\n    return\
    \ null;\n  }\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as $num) {\n    if ($num\
    \ > 0) {\n      $prod *= 1;\n    } elseif ($num < 0) {\n      $prod *= -1;\n \
    \   } else {\n      $prod *= 0;\n    }\n    $sum += abs($num);\n  }\n  return\
    \ $sum * $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
- exit_code: 0
  program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\nfunction prod_signs($arr) {\n  $prod = 1;\n  $sum = 0;\n\
    \  if (empty($arr)) {\n    return null;\n  }\n  foreach ($arr as $num) {\n   \
    \ if ($num > 0) {\n      $prod *= 1;\n      $sum += $num;\n    } elseif ($num\
    \ < 0) {\n      $prod *= -1;\n      $sum += abs($num);\n    } else {\n      $prod\
    \ *= 0;\n    }\n  }\n  return $sum * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979951
