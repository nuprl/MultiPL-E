language: php
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\necho iscube(27);\n\
    echo iscube(28);\necho iscube(1);\necho iscube(8);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(729);\necho iscube(1000);\necho iscube(2197);\necho iscube(531441);\n\
    echo iscube(1000000);\necho iscube(238328);\necho iscube(16777216);\necho iscube(387420489);\n\
    echo iscube(1073741824);\necho iscube(27);\necho iscube(28);\necho iscube(1);\n\
    echo iscube(8);\necho iscube(125);\necho iscube(216);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(2197);\necho iscube(531441);\necho iscube(1000000);\n\
    echo iscube(238328);\necho iscube(16777216);\necho iscube(387420489);\necho iscube(1073741824);\n\
    echo iscube(27);\necho iscube(28);\necho iscube(1);\necho iscube(8);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(729);\necho iscube(1000);\necho iscube(2197);\n\
    echo iscube(531441);\necho iscube(1000000);\necho iscube(238328);\necho iscube(16777216);\n\
    echo iscube(387420489);\necho iscube(1073741824);\necho iscube(27);\necho iscube(28);\n\
    echo iscube(1);\necho iscube(8);\necho iscube(125);\necho iscube(216);\necho iscube(729);\n\
    echo iscube(1000);\necho iscube(2197);\necho iscube(531441);\necho iscube(1000000);\n\
    echo iscube(238328);\necho iscube(16777216);\necho iscube(387420489);\necho iscube(10737418\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpe5oak44s.php on line 71

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$i = 1;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\\
    n\";\necho iscube(729) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(-27) . \"\\n\";\necho iscube(-64)\
    \ . \"\\n\";\necho iscube(-125) . \"\\n\";\necho iscube(-216) . \"\\n\";\necho\
    \ iscube(-729) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_1tewn7t.php:37\nStack trace:\n#0 /tmp/tmp_1tewn7t.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_1tewn7t.php on line 37\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = pow($a,\
    \ 1/3);\n    if (is_int($x)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\necho\
    \ iscube(125);\necho iscube(216);\necho iscube(343);\necho iscube(512);\necho\
    \ iscube(729);\necho iscube(1000);\necho iscube(1331);\necho iscube(1728);\necho\
    \ iscube(2197);\necho iscube(2744);\necho iscube(3375);\necho iscube(4096);\n\
    echo iscube(4913);\necho iscube(5832);\necho iscube(6859);\necho iscube(8000);\n\
    echo iscube(9261);\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yw1193z.php:41\n\
    Stack trace:\n#0 /tmp/tmp4yw1193z.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4yw1193z.php\
    \ on line 41\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\necho iscube(27); // true\necho\
    \ iscube(28); // false\necho iscube(125); // true\necho iscube(126); // false\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxb_imge1.php:22\n\
    Stack trace:\n#0 /tmp/tmpxb_imge1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxb_imge1.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $a = sqrt($a);\n\
    \    return $a == round($a);\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\n\
    echo iscube(126);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmfsbqae0.php:22\n\
    Stack trace:\n#0 /tmp/tmpmfsbqae0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmfsbqae0.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv4zxmqp.php:16\n\
    Stack trace:\n#0 /tmp/tmphv4zxmqp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphv4zxmqp.php\
    \ on line 16\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = $b * $b * $b;\n    if ($c == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxziaf44j.php:26\n\
    Stack trace:\n#0 /tmp/tmpxziaf44j.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxziaf44j.php\
    \ on line 26\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\necho\
    \ iscube(125);\necho iscube(216);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\n\
    echo iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\n\
    echo iscube(1729);\necho iscube(5000);\necho iscube(343);\necho iscube(125);\n\
    echo iscube(1331);\necho iscube(1000000);\necho iscube(4096);\necho iscube(24389);\n\
    echo iscube(16777216);\necho iscube(1953125);\necho iscube(704969);\necho iscube(40353607);\n\
    echo iscube(36);\necho iscube(551368189);\necho iscube(43046721);\necho iscube(13824);\n\
    echo iscube(2097152);\necho iscube(1594323);\necho iscube(4100625);\necho iscube(104976);\n\
    echo iscube(9765625);\necho iscube(25937424601);\necho iscube(704969);\necho iscube(282475249);\n\
    echo iscube(43046721);\necho iscube(4100625);\necho iscube(13824);\necho iscube(104976);\n\
    echo iscube(9765625);\necho iscube(25937424601);\necho iscube(282475249);\necho\
    \ iscube(43046721);\necho iscube(4100625);\necho iscube(13824);\necho iscube(104976);\n\
    echo iscube(9765625);\necho iscube(25937424601);\necho iscube(282475249);\necho\
    \ iscube(43046721);\necho iscube(4100625);\necho iscube(13824);\necho iscube(104976);\n\
    echo iscube\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps7r0elc8.php on line 71

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(29) . \"\\\
    n\";\necho iscube(30) . \"\\n\";\necho iscube(31) . \"\\n\";\necho iscube(32)\
    \ . \"\\n\";\necho iscube(33) . \"\\n\";\necho iscube(34) . \"\\n\";\necho iscube(35)\
    \ . \"\\n\";\necho iscube(36) . \"\\n\";\necho iscube(37) . \"\\n\";\necho iscube(38)\
    \ . \"\\n\";\necho iscube(39) . \"\\n\";\necho iscube(40) . \"\\n\";\necho iscube(41)\
    \ . \"\\n\";\necho iscube(42) . \"\\n\";\necho iscube(43) . \"\\n\";\necho iscube(44)\
    \ . \"\\n\";\necho iscube(45) . \"\\n\";\necho iscube(46) . \"\\n\";\necho iscube(47)\
    \ . \"\\n\";\necho iscube(48) . \"\\n\";\necho iscube(49) . \"\\n\";\necho iscube(50)\
    \ . \"\\n\";\necho iscube(51) . \"\\n\";\necho iscube(52) . \"\\n\";\necho iscube(53)\
    \ . \"\\n\";\necho iscube(54) . \"\\n\";\necho iscube(55) . \"\\n\";\necho iscube(56)\
    \ . \"\\n\";\necho iscube(57) . \"\\n\";\necho iscube(58) . \"\\n\";\necho iscube(59)\
    \ . \"\\n\";\necho iscube(60) . \"\\n\";\necho iscube(61) . \"\\n\";\necho iscube(62)\
    \ . \"\\n\";\necho iscube(63) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(65)\
    \ . \"\\n\";\necho iscube(66) . \"\\n\";\necho iscube(67) . \"\\\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptb1qu_4c.php on line 63

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(1);\necho iscube(8);\necho iscube(125);\necho iscube(216);\necho iscube(729);\n\
    echo iscube(1000);\necho iscube(2197);\necho iscube(3375);\necho iscube(4913);\n\
    echo iscube(5832);\necho iscube(6859);\necho iscube(8000);\necho iscube(9261);\n\
    echo iscube(10648);\necho iscube(12167);\necho iscube(13824);\necho iscube(15625);\n\
    echo iscube(17576);\necho iscube(19683);\necho iscube(21952);\necho iscube(24389);\n\
    echo iscube(27000);\necho iscube(29791);\necho iscube(32768);\necho iscube(35937);\n\
    echo iscube(39304);\necho iscube(42875);\necho iscube(46656);\necho iscube(50653);\n\
    echo iscube(54872);\necho iscube(59319);\necho iscube(64000);\necho iscube(68921);\n\
    echo iscube(74088);\necho iscube(79507);\necho iscube(85184);\necho iscube(91125);\n\
    echo iscube(97336);\necho iscube(103823);\necho iscube(110592);\necho iscube(117649);\n\
    echo iscube(125000);\necho iscube(132651);\necho iscube(140608);\necho iscube(148877);\n\
    echo iscube(157464);\necho iscube(166375);\necho iscube(175616);\necho iscube(185193);\n\
    echo iscube(195112);\necho iscube(205379);\necho iscube(216000);\necho iscube(226981);\n\
    echo iscube(238328);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111111111111111111111111111111111111111111111111\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqb_kk97x.php:80\nStack trace:\n#0 /tmp/tmpqb_kk97x.php(88):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqb_kk97x.php on line 80\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = pow($a,\
    \ 1/3);\n    if (is_int($c)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26in6qu3.php:20\n\
    Stack trace:\n#0 /tmp/tmp26in6qu3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp26in6qu3.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(8) . \"\\n\";\n\
    echo iscube(125) . \"\\n\";\necho iscube(216) . \"\\n\";\necho iscube(729) . \"\
    \\n\";\necho iscube(1000) . \"\\n\";\necho iscube(2197) . \"\\n\";\necho iscube(3375)\
    \ . \"\\n\";\necho iscube(4913) . \"\\n\";\necho iscube(5832) . \"\\n\";\necho\
    \ iscube(6859) . \"\\n\";\necho iscube(8000) . \"\\n\";\necho iscube(9261) . \"\
    \\n\";\necho iscube(10648) . \"\\n\";\necho iscube(12167) . \"\\n\";\necho iscube(13824)\
    \ . \"\\n\";\necho iscube(15625) . \"\\n\";\necho iscube(17576) . \"\\n\";\necho\
    \ iscube(19683) . \"\\n\";\necho iscube(21952) . \"\\n\";\necho iscube(24389)\
    \ . \"\\n\";\necho iscube(27000) . \"\\n\";\necho iscube(29791) . \"\\n\";\necho\
    \ iscube(32768) . \"\\n\";\necho iscube(35937) . \"\\n\";\necho iscube(39304)\
    \ . \"\\n\";\necho iscube(42875) . \"\\n\";\necho iscube(46656) . \"\\n\";\necho\
    \ iscube(50653) . \"\\n\";\necho iscube(54872) . \"\\n\";\necho iscube(59319)\
    \ . \"\\n\";\necho iscube(64000) . \"\\n\";\necho iscube(68921) . \"\\n\";\necho\
    \ iscube(74088) . \"\\n\";\necho iscube(79507) . \"\\n\";\necho iscube(85184)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\
    1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp94qmqf33.php:63\nStack trace:\n#0 /tmp/tmp94qmqf33.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp94qmqf33.php on line 63\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho\
    \ iscube(65);\necho iscube(125);\necho iscube(126);\necho iscube(216);\necho iscube(217);\n\
    echo iscube(343);\necho iscube(344);\necho iscube(512);\necho iscube(513);\necho\
    \ iscube(729);\necho iscube(730);\necho iscube(1000);\necho iscube(1001);\necho\
    \ iscube(1331);\necho iscube(1332);\necho iscube(1728);\necho iscube(1729);\n\
    echo iscube(2197);\necho iscube(2198);\necho iscube(2744);\necho iscube(2745);\n\
    echo iscube(3375);\necho iscube(3376);\necho iscube(4096);\necho iscube(4097);\n\
    echo iscube(4913);\necho iscube(4914);\necho iscube(5832);\necho iscube(5833);\n\
    echo iscube(6859);\necho iscube(6860);\necho iscube(8000);\necho iscube(8001);\n\
    echo iscube(9261);\necho iscube(9262);\necho iscube(10648);\necho iscube(10649);\n\
    echo iscube(12167);\necho iscube(12168);\necho iscube(13824);\necho iscube(13825);\n\
    echo iscube(15625);\necho iscube(15626);\necho iscube(17576);\necho iscube(17577);\n\
    echo iscube(19683);\necho iscube(19684);\necho iscube(21952);\necho iscube(21953);\n\
    echo iscube(24389);\necho iscube(24390);\necho iscube(27000);\necho iscube(27001);\n\
    echo iscube(29791);\necho iscube(29792);\necho iscube(32768);\necho iscube(32769);\n\
    echo iscube(359\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpelk4g_cv.php on line 76

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return pow($cube, 3) == $a;\n}\n\necho iscube(27);\n\
    echo iscube(28);\necho iscube(64);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(1000);\necho iscube(1000000);\necho iscube(1000000000);\necho iscube(1000000000000);\n\
    echo iscube(1000000000000000);\necho iscube(1000000000000000000);\necho iscube(1000000000000000000000);\n\
    echo iscube(1000000000000000000000000);\necho iscube(1000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpz4g8m_10.php on line 55

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = sqrt($a);\n\
    \    return $x == round($x);\n}\n\necho iscube(8) . PHP_EOL; // True\necho iscube(27)\
    \ . PHP_EOL; // True\necho iscube(64) . PHP_EOL; // True\necho iscube(125) . PHP_EOL;\
    \ // True\necho iscube(216) . PHP_EOL; // True\necho iscube(1000) . PHP_EOL; //\
    \ False\necho iscube(2) . PHP_EOL; // False\necho iscube(9) . PHP_EOL; // False\n\
    echo iscube(121) . PHP_EOL; // False\necho iscube(225) . PHP_EOL; // False\necho\
    \ iscube(500) . PHP_EOL; // False\necho iscube(1) . PHP_EOL; // True\necho iscube(0)\
    \ . PHP_EOL; // True\necho iscube(-1) . PHP_EOL; // True\necho iscube(-8) . PHP_EOL;\
    \ // True\necho iscube(-27) . PHP_EOL; // True\necho iscube(-64) . PHP_EOL; //\
    \ True\necho iscube(-125) . PHP_EOL; // True\necho iscube(-216) . PHP_EOL; //\
    \ True\necho iscube(-1000) . PHP_EOL; // False\necho iscube(-2) . PHP_EOL; //\
    \ False\necho iscube(-9) . PHP_EOL; // False\necho iscube(-121) . PHP_EOL; //\
    \ False\necho iscube(-225) . PHP_EOL; // False\necho iscube(-500) . PHP_EOL; //\
    \ False\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n\n\n\n1\n1\n1\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqt741hap.php:44\nStack trace:\n\
    #0 /tmp/tmpqt741hap.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqt741hap.php\
    \ on line 44\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    $d = round($c);\n    if ($c == $d) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(1000);\necho iscube(1);\necho\
    \ iscube(0);\necho iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\n\
    echo iscube(10000);\necho iscube(17);\necho iscube(22);\necho iscube(125);\necho\
    \ iscube(1000);\necho iscube(1);\necho iscube(27);\necho iscube(64);\necho iscube(216);\n\
    echo iscube(729);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\necho\
    \ iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\n\
    echo iscube(17);\necho iscube(22);\necho iscube(125);\necho iscube(1000);\necho\
    \ iscube(1);\necho iscube(27);\necho iscube(64);\necho iscube(216);\necho iscube(729);\n\
    echo iscube(1000);\necho iscube(1);\necho iscube(0);\necho iscube(3);\necho iscube(9);\n\
    echo iscube(1728);\necho iscube(16);\necho iscube(10000);\necho iscube(17);\n\
    echo iscube(22);\necho iscube(125);\necho iscube(1000);\necho iscube(1);\necho\
    \ iscube(27);\necho iscube(64);\necho iscube(216);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(1);\necho iscube(0);\necho iscube(3);\necho iscube(9);\necho iscube(1728);\n\
    echo iscube(16);\necho iscube(10000);\necho iscube(17);\necho is\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg20nmh_l.php on line 82

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $result\
    \ = sqrt($a);\n    if (is_int($result)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(8);\n\
    echo iscube(9);\necho iscube(10);\necho iscube(11);\necho iscube(12);\necho iscube(13);\n\
    echo iscube(14);\necho iscube(15);\necho iscube(16);\necho iscube(17);\necho iscube(18);\n\
    echo iscube(19);\necho iscube(20);\necho iscube(21);\necho iscube(22);\necho iscube(23);\n\
    echo iscube(24);\necho iscube(25);\necho iscube(26);\necho iscube(27);\necho iscube(28);\n\
    echo iscube(29);\necho iscube(30);\necho iscube(31);\necho iscube(32);\necho iscube(33);\n\
    echo iscube(34);\necho iscube(35);\necho iscube(36);\necho iscube(37);\necho iscube(38);\n\
    echo iscube(39);\necho iscube(40);\necho iscube(41);\necho iscube(42);\necho iscube(43);\n\
    echo iscube(44);\necho iscube(45);\necho iscube(46);\necho iscube(47);\necho iscube(48);\n\
    echo iscube(49);\necho iscube(50);\necho iscube(51);\necho iscube(52);\necho iscube(53);\n\
    echo iscube(54);\necho iscube(55);\necho iscube(56);\necho iscube(57);\necho iscube(58);\n\
    echo iscube(59);\necho iscube(60);\necho iscube(61);\necho iscube(62);\necho iscube(63);\n\
    echo iscube(64);\necho iscube(65);\necho iscube(66);\necho iscube(67);\necho iscube(68);\n\
    echo iscube(69);\necho iscube(70);\necho iscube(71);\necho iscube(72);\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tf0__il.php:88\n\
    Stack trace:\n#0 /tmp/tmp1tf0__il.php(98): test()\n#1 {main}\n  thrown in /tmp/tmp1tf0__il.php\
    \ on line 88\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(8) . \"\\n\"; // false\n\
    echo iscube(27) . \"\\n\"; // true\necho iscube(64) . \"\\n\"; // true\necho iscube(125)\
    \ . \"\\n\"; // true\necho iscube(216) . \"\\n\"; // false\necho iscube(729) .\
    \ \"\\n\"; // true\necho iscube(1000) . \"\\n\"; // false\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpkn24hlnx.php:31\nStack trace:\n#0 /tmp/tmpkn24hlnx.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkn24hlnx.php on line 31\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(29);\necho iscube(30);\n\
    echo iscube(31);\necho iscube(32);\necho iscube(33);\necho iscube(34);\necho iscube(35);\n\
    echo iscube(36);\necho iscube(37);\necho iscube(38);\necho iscube(39);\necho iscube(40);\n\
    echo iscube(41);\necho iscube(42);\necho iscube(43);\necho iscube(44);\necho iscube(45);\n\
    echo iscube(46);\necho iscube(47);\necho iscube(48);\necho iscube(49);\necho iscube(50);\n\
    echo iscube(51);\necho iscube(52);\necho iscube(53);\necho iscube(54);\necho iscube(55);\n\
    echo iscube(56);\necho iscube(57);\necho iscube(58);\necho iscube(59);\necho iscube(60);\n\
    echo iscube(61);\necho iscube(62);\necho iscube(63);\necho iscube(64);\necho iscube(65);\n\
    echo iscube(66);\necho iscube(67);\necho iscube(68);\necho iscube(69);\necho iscube(70);\n\
    echo iscube(71);\necho iscube(72);\necho iscube(73);\necho iscube(74);\necho iscube(75);\n\
    echo iscube(76);\necho iscube(77);\necho iscube(78);\necho iscube(79);\necho iscube(80);\n\
    echo iscube(81);\necho iscube(82);\necho iscube(83);\necho iscube(84);\necho iscube(85);\n\
    echo iscube(86);\necho iscube(87);\necho iscube(88);\necho iscube(89);\necho iscube(90);\n\
    echo iscube(91);\necho iscube(92);\necho iscube(93);\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xr8xmwf.php:88\n\
    Stack trace:\n#0 /tmp/tmp2xr8xmwf.php(98): test()\n#1 {main}\n  thrown in /tmp/tmp2xr8xmwf.php\
    \ on line 88\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho\
    \ iscube(65);\necho iscube(216);\necho iscube(217);\necho iscube(729);\necho iscube(730);\n\
    echo iscube(1000);\necho iscube(1001);\necho iscube(10000);\necho iscube(10001);\n\
    echo iscube(1000000);\necho iscube(1000001);\necho iscube(100000000);\necho iscube(100000001);\n\
    echo iscube(10000000000);\necho iscube(10000000001);\necho iscube(1000000000000);\n\
    echo iscube(1000000000001);\necho iscube(100000000000000);\necho iscube(100000000000001);\n\
    echo iscube(10000000000000000);\necho iscube(10000000000000001);\necho iscube(1000000000000000000);\n\
    echo iscube(1000000000000000001);\necho iscube(100000000000000000000);\necho iscube(100000000000000000001);\n\
    echo iscube(10000000000000000000000);\necho iscube(10000000000000000000001);\n\
    echo iscube(1000000000000000000000000);\necho iscube(1000000000000000000000001);\n\
    echo iscube(100000000000000000000000000);\necho iscube(100000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000);\necho iscube(10000000000000000000000000001);\n\
    echo iscube(1000000000000000000000000000000);\necho iscube(1000000000000000000000000000001);\n\
    echo iscube(100000000000000000000000000000000);\necho iscube(100000000000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000001);\n\
    echo iscube(1000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000001);\n\
    echo iscube(100000000000000000000000000000000000000);\necho iscube(100000000000000000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000000000001);\n\
    echo iscube(1000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000001);\n\
    echo iscube(100000000000000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000000000000\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2vdcj83w.php on line 67

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\necho iscube(27);\n\
    echo iscube(28);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu98zjq3l.php:20\n\
    Stack trace:\n#0 /tmp/tmpu98zjq3l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpu98zjq3l.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\necho iscube(27);\n\
    echo iscube(28);\necho iscube(125);\necho iscube(216);\necho iscube(729);\necho\
    \ iscube(1);\necho iscube(0);\necho iscube(-1);\necho iscube(-27);\necho iscube(-64);\n\
    echo iscube(-125);\necho iscube(-216);\necho iscube(-729);\necho iscube(-1000);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8h1_8_u.php:32\n\
    Stack trace:\n#0 /tmp/tmpj8h1_8_u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpj8h1_8_u.php\
    \ on line 32\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(8);\necho iscube(27);\necho iscube(64);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(343);\necho iscube(512);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(1331);\necho iscube(1728);\necho iscube(2197);\necho iscube(2744);\n\
    echo iscube(3375);\necho iscube(4096);\necho iscube(4913);\necho iscube(5832);\n\
    echo iscube(6859);\necho iscube(8000);\necho iscube(9261);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111111111111111111\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpxr7f6mhw.php:44\nStack trace:\n#0 /tmp/tmpxr7f6mhw.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpxr7f6mhw.php on line 44\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(27) . PHP_EOL; // true\necho iscube(28) . PHP_EOL;\
    \ // false\necho iscube(29) . PHP_EOL; // false\necho iscube(30) . PHP_EOL; //\
    \ false\necho iscube(31) . PHP_EOL; // false\necho iscube(32) . PHP_EOL; // true\n\
    echo iscube(33) . PHP_EOL; // false\necho iscube(34) . PHP_EOL; // false\necho\
    \ iscube(35) . PHP_EOL; // false\necho iscube(36) . PHP_EOL; // false\necho iscube(37)\
    \ . PHP_EOL; // false\necho iscube(38) . PHP_EOL; // false\necho iscube(39) .\
    \ PHP_EOL; // false\necho iscube(40) . PHP_EOL; // false\necho iscube(41) . PHP_EOL;\
    \ // false\necho iscube(42) . PHP_EOL; // false\necho iscube(43) . PHP_EOL; //\
    \ false\necho iscube(44) . PHP_EOL; // false\necho iscube(45) . PHP_EOL; // false\n\
    echo iscube(46) . PHP_EOL; // false\necho iscube(47) . PHP_EOL; // false\necho\
    \ iscube(48) . PHP_EOL; // false\necho iscube(49) . PHP_EOL; // true\necho iscube(50)\
    \ . PHP_EOL; // false\necho iscube(51) . PHP_EOL; // false\necho iscube(52) .\
    \ PHP_EOL; // false\necho iscube(53) . PHP_EOL; // false\necho iscube(54) . PHP_EOL;\
    \ // false\necho iscube(55) . PHP_EOL; // false\necho iscube(56) . PHP_EOL; //\
    \ false\necho iscube(57) . PHP_EOL; // false\necho iscube(58) . PHP_EOL; // false\n\
    echo iscube(59) . PHP_EOL\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2xo4tsgl.php on line 43

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $x = 1;\n\
    \  while ($x * $x * $x < $a) {\n    $x++;\n  }\n  if ($x * $x * $x == $a) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0dt5jcv.php:25\n\
    Stack trace:\n#0 /tmp/tmpz0dt5jcv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz0dt5jcv.php\
    \ on line 25\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(125) . \"\\\
    n\";\necho iscube(216) . \"\\n\";\necho iscube(729) . \"\\n\";\necho iscube(1000)\
    \ . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(-27)\
    \ . \"\\n\";\necho iscube(-28) . \"\\n\";\necho iscube(-125) . \"\\n\";\necho\
    \ iscube(-216) . \"\\n\";\necho iscube(-729) . \"\\n\";\necho iscube(-1000) .\
    \ \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(-0) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdmgm_gda.php:40\nStack trace:\n#0 /tmp/tmpdmgm_gda.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdmgm_gda.php on line 40\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\necho\
    \ iscube(125);\necho iscube(216);\necho iscube(729);\necho iscube(1000);\necho\
    \ iscube(1);\necho iscube(3);\necho iscube(9);\necho iscube(15);\necho iscube(17);\n\
    echo iscube(18);\necho iscube(19);\necho iscube(21);\necho iscube(22);\necho iscube(23);\n\
    echo iscube(24);\necho iscube(25);\necho iscube(26);\necho iscube(28);\necho iscube(29);\n\
    echo iscube(30);\necho iscube(31);\necho iscube(32);\necho iscube(33);\necho iscube(34);\n\
    echo iscube(35);\necho iscube(36);\necho iscube(37);\necho iscube(38);\necho iscube(39);\n\
    echo iscube(40);\necho iscube(41);\necho iscube(42);\necho iscube(43);\necho iscube(44);\n\
    echo iscube(45);\necho iscube(46);\necho iscube(47);\necho iscube(48);\necho iscube(49);\n\
    echo iscube(50);\necho iscube(51);\necho iscube(52);\necho iscube(53);\necho iscube(54);\n\
    echo iscube(55);\necho iscube(56);\necho iscube(57);\necho iscube(58);\necho iscube(59);\n\
    echo iscube(60);\necho iscube(61);\necho iscube(62);\necho iscube(63);\necho iscube(65);\n\
    echo iscube(66);\necho iscube(67);\necho iscube(68);\necho iscube(69);\necho iscube(70);\n\
    echo iscube(71);\necho iscube(72);\necho iscube(73);\necho iscube(74);\necho iscube(75);\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxkncyj8.php:90\n\
    Stack trace:\n#0 /tmp/tmplxkncyj8.php(98): test()\n#1 {main}\n  thrown in /tmp/tmplxkncyj8.php\
    \ on line 90\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$i = 1;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(1);\necho iscube(8);\necho iscube(125);\necho iscube(216);\necho iscube(729);\n\
    echo iscube(1000);\necho iscube(2197);\necho iscube(3375);\necho iscube(4913);\n\
    echo iscube(5832);\necho iscube(6859);\necho iscube(8000);\necho iscube(9261);\n\
    echo iscube(10648);\necho iscube(12167);\necho iscube(13824);\necho iscube(15625);\n\
    echo iscube(17576);\necho iscube(19683);\necho iscube(21952);\necho iscube(24389);\n\
    echo iscube(27000);\necho iscube(29791);\necho iscube(32768);\necho iscube(35937);\n\
    echo iscube(39304);\necho iscube(42875);\necho iscube(46656);\necho iscube(50653);\n\
    echo iscube(54872);\necho iscube(59319);\necho iscube(64000);\necho iscube(68921);\n\
    echo iscube(74088);\necho iscube(79507);\necho iscube(85184);\necho iscube(91125);\n\
    echo iscube(97336);\necho iscube(103823);\necho iscube(110592);\necho iscube(117649);\n\
    echo iscube(125000);\necho iscube(132651);\necho iscube(140608);\necho iscube(148877);\n\
    echo iscube(157464);\necho iscube(166375);\necho iscube(175616);\necho iscube(185193);\n\
    echo iscube(195112);\necho iscube(205379);\necho iscube(216000);\necho iscube(226981);\n\
    echo iscube\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbkk2e4mj.php on line 73

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(8).\"\\n\";\necho iscube(27).\"\\n\";\necho iscube(64).\"\
    \\n\";\necho iscube(125).\"\\n\";\necho iscube(216).\"\\n\";\necho iscube(343).\"\
    \\n\";\necho iscube(1000).\"\\n\";\necho iscube(1).\"\\n\";\necho iscube(3).\"\
    \\n\";\necho iscube(9).\"\\n\";\necho iscube(15).\"\\n\";\necho iscube(36).\"\\\
    n\";\necho iscube(63).\"\\n\";\necho iscube(125).\"\\n\";\necho iscube(216).\"\
    \\n\";\necho iscube(343).\"\\n\";\necho iscube(1000).\"\\n\";\necho iscube(1).\"\
    \\n\";\necho iscube(27).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(125).\"\
    \\n\";\necho iscube(216).\"\\n\";\necho iscube(343).\"\\n\";\necho iscube(1000).\"\
    \\n\";\necho iscube(1).\"\\n\";\necho iscube(27).\"\\n\";\necho iscube(64).\"\\\
    n\";\necho iscube(125).\"\\n\";\necho iscube(216).\"\\n\";\necho iscube(343).\"\
    \\n\";\necho iscube(1000).\"\\n\";\necho iscube(1).\"\\n\";\necho iscube(27).\"\
    \\n\";\necho iscube(64).\"\\n\";\necho iscube(125).\"\\n\";\necho iscube(216).\"\
    \\n\";\necho iscube(343).\"\\n\";\necho iscube(1000).\"\\n\";\necho iscube(1).\"\
    \\n\";\necho iscube(27).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(125).\"\
    \\n\";\necho iscube(216).\"\\n\";\necho iscube(343).\"\\n\";\necho iscube(1000).\"\
    \\n\";\necho iscube(1).\"\\n\";\necho iscube(27).\"\\n\";\necho iscube(64).\"\\\
    n\";\necho iscube(125).\"\\n\";\necho\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpaa90nzf7.php on line 60

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgoyolts.php:18\n\
    Stack trace:\n#0 /tmp/tmpmgoyolts.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmgoyolts.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(125) . \"\\\
    n\";\necho iscube(216) . \"\\n\";\necho iscube(512) . \"\\n\";\necho iscube(1000)\
    \ . \"\\n\";\necho iscube(1000000) . \"\\n\";\necho iscube(100000000) . \"\\n\"\
    ;\necho iscube(10000000000) . \"\\n\";\necho iscube(1000000000000) . \"\\n\";\n\
    echo iscube(100000000000000) . \"\\n\";\necho iscube(10000000000000000) . \"\\\
    n\";\necho iscube(1000000000000000000) . \"\\n\";\necho iscube(100000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000) . \"\\n\";\necho iscube(10000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000000000) . \"\\n\";\necho\
    \ iscube(1000000000000000000000000000000000000) . \"\\n\";\necho iscube(100000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000000000000000000) . \"\\n\"\
    ;\necho iscube(1000000000000000000000000000000000000000000) . \"\\n\";\necho iscube(100000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000000000000000000000) . \"\
    \\n\";\necho iscube(10000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(100000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(10000000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(1000000000000000000000000000000000000000000000000000000) . \"\
    \\n\";\necho iscube(1000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptx2xckpe.php on line 51

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . PHP_EOL;\necho\
    \ iscube(28) . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(8) . PHP_EOL;\necho iscube(9) . PHP_EOL;\necho iscube(125) . PHP_EOL;\n\
    echo iscube(216) . PHP_EOL;\necho iscube(512) . PHP_EOL;\necho iscube(729) . PHP_EOL;\n\
    echo iscube(1000) . PHP_EOL;\necho iscube(10000) . PHP_EOL;\necho iscube(100000)\
    \ . PHP_EOL;\necho iscube(1000000) . PHP_EOL;\necho iscube(10000000) . PHP_EOL;\n\
    echo iscube(100000000) . PHP_EOL;\necho iscube(1000000000) . PHP_EOL;\necho iscube(10000000000)\
    \ . PHP_EOL;\necho iscube(100000000000) . PHP_EOL;\necho iscube(1000000000000)\
    \ . PHP_EOL;\necho iscube(10000000000000) . PHP_EOL;\necho iscube(100000000000000)\
    \ . PHP_EOL;\necho iscube(1000000000000000) . PHP_EOL;\necho iscube(10000000000000000)\
    \ . PHP_EOL;\necho iscube(100000000000000000) . PHP_EOL;\necho iscube(1000000000000000000)\
    \ . PHP_EOL;\necho iscube(10000000000000000000) . PHP_EOL;\necho iscube(100000000000000000000)\
    \ . PHP_EOL;\necho iscube(1000000000000000000000) . PHP_EOL;\necho iscube(10000000000000000000000)\
    \ . PHP_EOL;\necho iscube(100000000000000000000000) . PHP_EOL;\necho iscube(1000000000000000000000000)\
    \ . PHP_\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps8nmund0.php on line 49

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhy26otm.php:24\n\
    Stack trace:\n#0 /tmp/tmpuhy26otm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuhy26otm.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $root =\
    \ round(pow($a, 1/3));\n    return $root * $root * $root == $a;\n}\n\necho iscube(27);\
    \ // true\necho iscube(28); // false\necho iscube(64); // true\necho iscube(65);\
    \ // false\necho iscube(216); // true\necho iscube(217); // false\necho iscube(729);\
    \ // true\necho iscube(730); // false\necho iscube(1000); // false\necho iscube(10000);\
    \ // true\necho iscube(10001); // false\necho iscube(100000); // false\necho iscube(1000000);\
    \ // true\necho iscube(1000001); // false\necho iscube(10000000); // false\necho\
    \ iscube(100000000); // true\necho iscube(100000001); // false\necho iscube(1000000000);\
    \ // false\necho iscube(10000000000); // true\necho iscube(10000000001); // false\n\
    echo iscube(100000000000); // false\necho iscube(1000000000000); // true\necho\
    \ iscube(1000000000001); // false\necho iscube(10000000000000); // false\necho\
    \ iscube(100000000000000); // true\necho iscube(100000000000001); // false\necho\
    \ iscube(1000000000000000); // false\necho iscube(10000000000000000); // true\n\
    echo iscube(10000000000000001); // false\necho iscube(1000000000000000000); //\
    \ false\necho iscube(10000000000000000000); // true\necho iscube(10000000000000000001);\
    \ // false\necho iscube(100000000000000000000); // false\necho iscube(1000000000000000000000);\
    \ // true\necho iscube(1000000000000000000001); // false\necho iscube(10000000000000000000000);\
    \ // false\necho iscube(100000000000000000000000); // true\necho iscube(100000000000000000000001);\
    \ // false\necho iscube(1000000000000000000000000); // false\necho iscube(10000000000000000000000000);\
    \ // true\necho iscube(10000000000000000000000001); // false\necho iscube(100000000000000000000000000);\
    \ // false\necho iscube(1000000000000000000000000000); // true\necho iscube(1000000000000000000000000001);\
    \ // false\necho iscube(10000000000000000000000000000); // false\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvx9fesk.php:63\n\
    Stack trace:\n#0 /tmp/tmpjvx9fesk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpjvx9fesk.php\
    \ on line 63\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $b = sqrt($a);\n\
    \  if (is_int($b)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa81xvj8n.php:20\n\
    Stack trace:\n#0 /tmp/tmpa81xvj8n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa81xvj8n.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  for ($i =\
    \ 0; $i <= $a; $i++) {\n    if ($i ** 3 == $a) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdx0h3o48.php:22\n\
    Stack trace:\n#0 /tmp/tmpdx0h3o48.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdx0h3o48.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $c = 0;\n\
    \  while ($c * $c * $c < $a) {\n    $c++;\n  }\n  return $c * $c * $c == $a;\n\
    }\n\necho iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(125)\
    \ . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(-8) . \"\\n\";\necho iscube(-27) . \"\\n\";\necho iscube(-64)\
    \ . \"\\n\";\necho iscube(-125) . \"\\n\";\necho iscube(-216) . \"\\n\";\necho\
    \ iscube(-1000) . \"\\n\";\necho iscube(1000000) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\n\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpxlz3xfrr.php:34\nStack trace:\n#0 /tmp/tmpxlz3xfrr.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxlz3xfrr.php on line 34\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(27);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtow7te6.php:17\n\
    Stack trace:\n#0 /tmp/tmpbtow7te6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbtow7te6.php\
    \ on line 17\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $b = pow($a,\
    \ 1/3);\n  return $b == floor($b);\n}\n\necho iscube(27) . \"\\n\"; // true\n\
    echo iscube(28) . \"\\n\"; // false\necho iscube(29) . \"\\n\"; // false\necho\
    \ iscube(30) . \"\\n\"; // false\necho iscube(31) . \"\\n\"; // false\necho iscube(32)\
    \ . \"\\n\"; // true\necho iscube(33) . \"\\n\"; // false\necho iscube(34) . \"\
    \\n\"; // false\necho iscube(35) . \"\\n\"; // false\necho iscube(36) . \"\\n\"\
    ; // false\necho iscube(37) . \"\\n\"; // false\necho iscube(38) . \"\\n\"; //\
    \ false\necho iscube(39) . \"\\n\"; // false\necho iscube(40) . \"\\n\"; // false\n\
    echo iscube(41) . \"\\n\"; // false\necho iscube(42) . \"\\n\"; // false\necho\
    \ iscube(43) . \"\\n\"; // false\necho iscube(44) . \"\\n\"; // false\necho iscube(45)\
    \ . \"\\n\"; // false\necho iscube(46) . \"\\n\"; // false\necho iscube(47) .\
    \ \"\\n\"; // false\necho iscube(48) . \"\\n\"; // true\necho iscube(49) . \"\\\
    n\"; // false\necho iscube(50) . \"\\n\"; // false\necho iscube(51) . \"\\n\"\
    ; // false\necho iscube(52) . \"\\n\"; // false\necho iscube(53) . \"\\n\"; //\
    \ false\necho iscube(54) . \"\\n\"; // false\necho iscube(55) . \"\\n\"; // false\n\
    echo iscube(56) . \"\\n\"; // false\necho iscube(57) . \"\\n\"; // false\necho\
    \ iscube(58) . \"\\n\"; // false\necho iscube(59) . \"\\n\"; // false\necho iscube(60)\
    \ . \"\\n\"; // false\necho iscube(61) . \"\\n\"; // false\necho iscube(62) .\
    \ \"\\n\"; // false\necho iscube(63) . \"\\n\"; // false\necho iscube(\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5pcq3y6u.php on line 49

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\necho iscube(8).\"\
    \\n\";\necho iscube(27).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(125).\"\
    \\n\";\necho iscube(216).\"\\n\";\necho iscube(343).\"\\n\";\necho iscube(1000).\"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpc7_7yed_.php:24\nStack trace:\n#0 /tmp/tmpc7_7yed_.php(32): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc7_7yed_.php on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgoyolts.php:18\n\
    Stack trace:\n#0 /tmp/tmpmgoyolts.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmgoyolts.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = round(pow($a,\
    \ 1/3));\n    return $x * $x * $x == $a;\n}\n\necho iscube(27); // true\necho\
    \ iscube(28); // false\necho iscube(125); // true\necho iscube(126); // false\n\
    echo iscube(1024); // true\necho iscube(1025); // false\necho iscube(823543);\
    \ // true\necho iscube(823544); // false\necho iscube(823545); // true\necho iscube(823546);\
    \ // false\necho iscube(823547); // true\necho iscube(823548); // false\necho\
    \ iscube(823549); // true\necho iscube(823550); // false\necho iscube(823551);\
    \ // true\necho iscube(823552); // false\necho iscube(823553); // true\necho iscube(823554);\
    \ // false\necho iscube(823555); // true\necho iscube(823556); // false\necho\
    \ iscube(823557); // true\necho iscube(823558); // false\necho iscube(823559);\
    \ // true\necho iscube(823560); // false\necho iscube(823561); // true\necho iscube(823562);\
    \ // false\necho iscube(823563); // true\necho iscube(823564); // false\necho\
    \ iscube(823565); // true\necho iscube(823566); // false\necho iscube(823567);\
    \ // true\necho iscube(823568); // false\necho iscube(823569); // true\necho iscube(823570);\
    \ // false\necho iscube(823571); // true\necho iscube(823572); // false\necho\
    \ iscube(823573); // true\necho iscube(823574); // false\necho iscube(823575);\
    \ // true\necho iscube(823576); // false\necho iscube(823577); // true\necho iscube(823578);\
    \ // false\necho iscube(823579); // true\necho iscube(823580); // false\necho\
    \ iscube(\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiys0srg9.php on line 56

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\necho iscube(27);\n\
    echo iscube(28);\necho iscube(125);\necho iscube(1);\necho iscube(8);\necho iscube(64);\n\
    echo iscube(216);\necho iscube(512);\necho iscube(1000);\necho iscube(729);\n\
    echo iscube(10000);\necho iscube(343);\necho iscube(15625);\necho iscube(16384);\n\
    echo iscube(46656);\necho iscube(59049);\necho iscube(7529536);\necho iscube(823543);\n\
    echo iscube(2097152);\necho iscube(43046721);\necho iscube(10460353203);\necho\
    \ iscube(79235168);\necho iscube(3486784401);\necho iscube(285311670611);\necho\
    \ iscube(2417851639229258349412352);\necho iscube(14134776518227074636666380005943348126619871175004951664972849610340958208);\n\
    echo iscube(274877906944);\necho iscube(282429536481);\necho iscube(576650390625);\n\
    echo iscube(1152921504606846976);\necho iscube(1350851717672992089);\necho iscube(205891132094649);\n\
    echo iscube(1125899906842624);\necho iscube(16678895149529849457);\necho iscube(14134776518227074636666380005943348126619871175004951664972849610340958208);\n\
    echo iscube(2417851639229258349412352);\necho iscube(285311670611);\necho iscube(3486784401);\n\
    echo iscube(79235168);\necho iscube(10460353203);\necho iscube(43046721);\necho\
    \ iscube(2097152);\necho iscube(823543);\necho\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8fdldnrm.php on line 55

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$cube = round(pow($a,\
    \ 1/3));\n\tif ($cube * $cube * $cube == $a) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho iscube(27); // true\necho iscube(64); // true\n\
    echo iscube(125); // true\necho iscube(216); // true\necho iscube(343); // true\n\
    echo iscube(512); // true\necho iscube(729); // true\necho iscube(1000); // true\n\
    echo iscube(1331); // true\necho iscube(1728); // true\necho iscube(2197); //\
    \ true\necho iscube(2744); // true\necho iscube(3375); // true\necho iscube(4096);\
    \ // true\necho iscube(4913); // true\necho iscube(5832); // true\necho iscube(6859);\
    \ // true\necho iscube(8000); // true\necho iscube(9261); // true\necho iscube(10648);\
    \ // true\necho iscube(12167); // true\necho iscube(13824); // true\necho iscube(15625);\
    \ // true\necho iscube(17576); // true\necho iscube(19683); // true\necho iscube(21952);\
    \ // true\necho iscube(24389); // true\necho iscube(27000); // true\necho iscube(29791);\
    \ // true\necho iscube(32768); // true\necho iscube(35937); // true\necho iscube(39304);\
    \ // true\necho iscube(42875); // true\necho iscube(46656); // true\necho iscube(50653);\
    \ // true\necho iscube(54872); // true\necho iscube(59319); // true\necho iscube(64000);\
    \ // true\necho iscube(68921); // true\necho iscube(74088); // true\necho iscube(79507);\
    \ // true\necho iscube(85184); // true\necho iscube(91125); // true\necho iscube(97336);\
    \ // true\necho iscube(103823); // true\necho iscube(110592); // true\necho iscube\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvj731ef7.php on line 62

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$c = round(pow($a,\
    \ 1/3));\n\treturn $c * $c * $c == $a;\n}\n\necho iscube(27); // true\necho iscube(28);\
    \ // false\necho iscube(1); // true\necho iscube(8); // false\necho iscube(64);\
    \ // true\necho iscube(125); // true\necho iscube(216); // true\necho iscube(1000);\
    \ // false\necho iscube(729); // true\necho iscube(343); // true\necho iscube(1331);\
    \ // false\necho iscube(9683); // true\necho iscube(24389); // true\necho iscube(5832);\
    \ // true\necho iscube(15625); // true\necho iscube(1728); // true\necho iscube(13824);\
    \ // true\necho iscube(20736); // true\necho iscube(27000); // true\necho iscube(32768);\
    \ // true\necho iscube(35937); // true\necho iscube(43740); // true\necho iscube(50653);\
    \ // true\necho iscube(57648); // true\necho iscube(68897); // true\necho iscube(78732);\
    \ // true\necho iscube(92681); // true\necho iscube(103823); // true\necho iscube(113906);\
    \ // true\necho iscube(148877); // true\necho iscube(1741725); // true\necho iscube(2085136);\
    \ // true\necho iscube(2541858); // true\necho iscube(274625); // true\necho iscube(29791);\
    \ // true\necho iscube(328509); // true\necho iscube(387420); // true\necho iscube(4286578);\
    \ // true\necho iscube(4693125); // true\necho iscube(5165015); // true\necho\
    \ iscube(5819841); // true\necho iscube(6377292); // true\necho iscube(685749);\
    \ // true\necho iscube(704969); // true\necho iscube(765765); // true\necho iscube(829936);\
    \ // true\necho iscube(884736);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111111111111111111111111\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp5jnp0wum.php:65\nStack trace:\n#0 /tmp/tmp5jnp0wum.php(73): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5jnp0wum.php on line 65\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhy26otm.php:24\n\
    Stack trace:\n#0 /tmp/tmpuhy26otm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuhy26otm.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\necho iscube(27);\necho \"<br>\"\
    ;\necho iscube(28);\necho \"<br>\";\necho iscube(125);\necho \"<br>\";\necho iscube(1);\n\
    echo \"<br>\";\necho iscube(8);\necho \"<br>\";\necho iscube(125);\necho \"<br>\"\
    ;\necho iscube(216);\necho \"<br>\";\necho iscube(729);\necho \"<br>\";\necho\
    \ iscube(1000);\necho \"<br>\";\necho iscube(2197);\necho \"<br>\";\necho iscube(2744);\n\
    echo \"<br>\";\necho iscube(4913);\necho \"<br>\";\necho iscube(5832);\necho \"\
    <br>\";\necho iscube(6859);\necho \"<br>\";\necho iscube(8000);\necho \"<br>\"\
    ;\necho iscube(9261);\necho \"<br>\";\necho iscube(10648);\necho \"<br>\";\necho\
    \ iscube(12167);\necho \"<br>\";\necho iscube(13824);\necho \"<br>\";\necho iscube(15129);\n\
    echo \"<br>\";\necho iscube(17576);\necho \"<br>\";\necho iscube(19683);\necho\
    \ \"<br>\";\necho iscube(21952);\necho \"<br>\";\necho iscube(24389);\necho \"\
    <br>\";\necho iscube(27000);\necho \"<br>\";\necho iscube(29791);\necho \"<br>\"\
    ;\necho iscube(32768);\necho \"<br>\";\necho iscube(35937);\necho \"<br>\";\n\
    echo iscube(39304);\necho \"<br>\";\necho iscube(42875);\necho \"<br>\";\necho\
    \ iscube(46656);\necho \"<br>\";\necho iscube(50653);\necho \"<br>\";\necho iscube(54872);\n\
    echo \"<br>\";\necho iscube(59319);\necho \"<br>\";\necho iscube(64000);\necho\
    \ \"<\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5pv27x_t.php on line 86

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(8);\necho iscube(1);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(512);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(343);\necho iscube(125);\necho iscube(64);\necho iscube(216);\necho\
    \ iscube(729);\necho iscube(1000);\necho iscube(1000000);\necho iscube(10000000000);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps3snloaa.php:41\n\
    Stack trace:\n#0 /tmp/tmps3snloaa.php(49): test()\n#1 {main}\n  thrown in /tmp/tmps3snloaa.php\
    \ on line 41\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    if ($cube * $cube * $cube == $a) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\necho iscube(27);\necho\
    \ iscube(28);\necho iscube(125);\necho iscube(216);\necho iscube(729);\necho iscube(1);\n\
    echo iscube(0);\necho iscube(-1);\necho iscube(-27);\necho iscube(-64);\necho\
    \ iscube(-125);\necho iscube(-216);\necho iscube(-729);\necho iscube(-1000);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprikupczt.php:36\n\
    Stack trace:\n#0 /tmp/tmprikupczt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprikupczt.php\
    \ on line 36\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$b = sqrt($a);\n\
    \t$c = $b * $b * $b;\n\tif ($c == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\nvar_dump(iscube(27)); // true\nvar_dump(iscube(64)); // true\n\
    var_dump(iscube(216)); // true\nvar_dump(iscube(512)); // true\nvar_dump(iscube(1));\
    \ // true\nvar_dump(iscube(3)); // false\nvar_dump(iscube(10)); // false\nvar_dump(iscube(50));\
    \ // false\nvar_dump(iscube(125)); // false\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\nbool(false)\nbool(false)\nbool(true)\nbool(false)\n\
    bool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpdczjlv6j.php:32\nStack trace:\n#0 /tmp/tmpdczjlv6j.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdczjlv6j.php on line 32\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = sqrt($a);\n\
    \    $y = round($x);\n    if ($x == $y) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(1000);\necho iscube(1);\necho\
    \ iscube(0);\necho iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\n\
    echo iscube(10000);\necho iscube(17);\necho iscube(22);\necho iscube(125);\necho\
    \ iscube(343);\necho iscube(1331);\necho iscube(35);\necho iscube(1000);\necho\
    \ iscube(1);\necho iscube(0);\necho iscube(3);\necho iscube(9);\necho iscube(1728);\n\
    echo iscube(16);\necho iscube(10000);\necho iscube(17);\necho iscube(22);\necho\
    \ iscube(125);\necho iscube(343);\necho iscube(1331);\necho iscube(35);\necho\
    \ iscube(1000);\necho iscube(1);\necho iscube(0);\necho iscube(3);\necho iscube(9);\n\
    echo iscube(1728);\necho iscube(16);\necho iscube(10000);\necho iscube(17);\n\
    echo iscube(22);\necho iscube(125);\necho iscube(343);\necho iscube(1331);\necho\
    \ iscube(35);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\necho iscube(3);\n\
    echo iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\necho\
    \ iscube(17);\necho iscube(22);\necho iscube(125);\necho iscube(343);\necho iscube(1331);\n\
    echo iscube(35);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\necho iscube(3\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0mk9ykd9.php on line 81

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$i = 1;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(0);\necho iscube(1);\necho iscube(8);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(512);\necho iscube(729);\necho iscube(1000);\necho iscube(343);\n\
    echo iscube(125);\necho iscube(64);\necho iscube(216);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(1000000);\necho iscube(15625);\necho iscube(17576);\n\
    echo iscube(19683);\necho iscube(21952);\necho iscube(24389);\necho iscube(27000);\n\
    echo iscube(29791);\necho iscube(32768);\necho iscube(35937);\necho iscube(39304);\n\
    echo iscube(42875);\necho iscube(46656);\necho iscube(50653);\necho iscube(54872);\n\
    echo iscube(59319);\necho iscube(64000);\necho iscube(68921);\necho iscube(74088);\n\
    echo iscube(79507);\necho iscube(85184);\necho iscube(91125);\necho iscube(97336);\n\
    echo iscube(103823);\necho iscube(110592);\necho iscube(117649);\necho iscube(125000);\n\
    echo iscube(132651);\necho iscube(140608);\necho iscube(148877);\necho iscube(157464);\n\
    echo iscube(166375);\necho iscube(175616);\necho iscube(185193);\necho iscube(195112);\n\
    echo iscube(205379);\necho iscube(216000);\necho iscube(226981);\necho iscube(238328);\n\
    echo iscube(250047);\necho\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmparwi5hzu.php on line 74

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    return $c == floor($c);\n}\n\necho iscube(8) . \"\\n\";\necho iscube(27)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216)\
    \ . \"\\n\";\necho iscube(1000) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(3) . \"\\n\";\necho iscube(9) . \"\\n\";\necho iscube(5)\
    \ . \"\\n\";\necho iscube(15) . \"\\n\";\necho iscube(17) . \"\\n\";\necho iscube(22)\
    \ . \"\\n\";\necho iscube(24) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(33)\
    \ . \"\\n\";\necho iscube(35) . \"\\n\";\necho iscube(41) . \"\\n\";\necho iscube(43)\
    \ . \"\\n\";\necho iscube(48) . \"\\n\";\necho iscube(50) . \"\\n\";\necho iscube(52)\
    \ . \"\\n\";\necho iscube(56) . \"\\n\";\necho iscube(59) . \"\\n\";\necho iscube(61)\
    \ . \"\\n\";\necho iscube(65) . \"\\n\";\necho iscube(67) . \"\\n\";\necho iscube(70)\
    \ . \"\\n\";\necho iscube(73) . \"\\n\";\necho iscube(75) . \"\\n\";\necho iscube(79)\
    \ . \"\\n\";\necho iscube(81) . \"\\n\";\necho iscube(83) . \"\\n\";\necho iscube(88)\
    \ . \"\\n\";\necho iscube(90) . \"\\n\";\necho iscube(92) . \"\\n\";\necho iscube(94)\
    \ . \"\\n\";\necho iscube(96) . \"\\n\";\necho iscube(98) . \"\\n\";\necho iscube(100)\
    \ . \"\\n\";\necho iscube(104) . \"\\n\";\necho iscube(106) . \"\\n\";\necho iscube(108)\
    \ . \"\\n\";\necho iscube(\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyzfcn007.php on line 56

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    if ($cube * $cube * $cube == $a) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nvar_dump(iscube(27));\
    \ // true\nvar_dump(iscube(28)); // false\nvar_dump(iscube(1)); // true\nvar_dump(iscube(8));\
    \ // false\nvar_dump(iscube(64)); // true\nvar_dump(iscube(216)); // true\nvar_dump(iscube(512));\
    \ // true\nvar_dump(iscube(729)); // true\nvar_dump(iscube(1000)); // false\n\
    var_dump(iscube(10000)); // false\nvar_dump(iscube(27000)); // false\nvar_dump(iscube(125000));\
    \ // false\nvar_dump(iscube(1000000)); // true\nvar_dump(iscube(64000000)); //\
    \ true\nvar_dump(iscube(125000000)); // true\nvar_dump(iscube(2160000000)); //\
    \ true\nvar_dump(iscube(512000000000)); // true\nvar_dump(iscube(1000000000000));\
    \ // true\nvar_dump(iscube(1953125000000000)); // true\nvar_dump(iscube(1000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000)); // true\nvar_dump(iscube(1000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000)); // true\nvar_dump(iscube(1000000000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000000000)); // true\nvar_dump(iscube(1000000000000000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000000000000000)); // true\n\
    var_dump(iscube(1000000000000000000000000000000000000000000)); // true\nvar_dump(iscube(1000000000000000000000000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000000000000000000000000000000));\
    \ // true\nvar_dump(iscube(1000000000000000000000000000000000000000000000000000000000));\
    \ // true\nvar_\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1juayw1u.php on line 49

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return pow($a,\
    \ 1/3) == round(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gempy7t.php:17\n\
    Stack trace:\n#0 /tmp/tmp4gempy7t.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4gempy7t.php\
    \ on line 17\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(729);\necho iscube(1);\necho iscube(0);\necho iscube(64);\n\
    echo iscube(-27);\necho iscube(-125);\necho iscube(-64);\necho iscube(125.0);\n\
    echo iscube(216.0);\necho iscube(729.0);\necho iscube(1.0);\necho iscube(0.0);\n\
    echo iscube(64.0);\necho iscube(-27.0);\necho iscube(-125.0);\necho iscube(-64.0);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnyp3me1.php:42\n\
    Stack trace:\n#0 /tmp/tmprnyp3me1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmprnyp3me1.php\
    \ on line 42\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $cube = round(pow($a,\
    \ 1/3));\n  return $cube * $cube * $cube == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr6t9tcd.php:18\n\
    Stack trace:\n#0 /tmp/tmpfr6t9tcd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfr6t9tcd.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ pow($a, 1/3);\n    if (is_int($cube)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9pxyp1a.php:20\n\
    Stack trace:\n#0 /tmp/tmpe9pxyp1a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe9pxyp1a.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjj21gulu.php:18\n\
    Stack trace:\n#0 /tmp/tmpjj21gulu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjj21gulu.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho iscube(65);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9xjhhg2.php:23\n\
    Stack trace:\n#0 /tmp/tmpa9xjhhg2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa9xjhhg2.php\
    \ on line 23\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$x = sqrt($a);\n\
    \treturn $x == round($x);\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(512);\necho iscube(1);\necho iscube(3);\necho iscube(8);\n\
    echo iscube(9);\necho iscube(1728);\necho iscube(0);\necho iscube(1);\necho iscube(125);\n\
    echo iscube(64);\necho iscube(1000);\necho iscube(27);\necho iscube(125);\necho\
    \ iscube(216);\necho iscube(729);\necho iscube(1000);\necho iscube(1);\necho iscube(12);\n\
    echo iscube(1728);\necho iscube(5832);\necho iscube(7000);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(343);\necho iscube(512);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(1331);\necho iscube(1728);\necho iscube(2197);\n\
    echo iscube(2744);\necho iscube(3375);\necho iscube(4096);\necho iscube(4913);\n\
    echo iscube(5832);\necho iscube(6859);\necho iscube(8000);\necho iscube(9261);\n\
    echo iscube(10648);\necho iscube(12167);\necho iscube(13824);\necho iscube(15625);\n\
    echo iscube(17576);\necho iscube(19683);\necho iscube(21952);\necho iscube(24389);\n\
    echo iscube(27000);\necho iscube(29791);\necho iscube(32768);\necho iscube(35937);\n\
    echo iscube(39304);\necho iscube(42875);\necho iscube(46656);\necho iscube(50653);\n\
    echo iscube(54872);\necho iscube(59319);\necho iscube(64000);\necho iscube(68921);\n\
    echo iscube(74088);\necho iscube(79507);\necho iscube\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpa0eq0vsu.php on line 76

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    if ($c == round($c)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(1);\necho\
    \ iscube(8);\necho iscube(125);\necho iscube(216);\necho iscube(512);\necho iscube(729);\n\
    echo iscube(1000);\necho iscube(343);\necho iscube(1331);\necho iscube(27000);\n\
    echo iscube(19683);\necho iscube(34000);\necho iscube(4096);\necho iscube(59049);\n\
    echo iscube(75000);\necho iscube(85766121);\necho iscube(1000000);\necho iscube(238328);\n\
    echo iscube(1679616);\necho iscube(387420489);\necho iscube(100000000);\necho\
    \ iscube(2097152);\necho iscube(43046721);\necho iscube(1000000000);\necho iscube(10460353203);\n\
    echo iscube(79371477325427);\necho iscube(285311670611);\necho iscube(1291467969);\n\
    echo iscube(3486784401);\necho iscube(387420489);\necho iscube(100000000);\necho\
    \ iscube(2097152);\necho iscube(43046721);\necho iscube(1000000000);\necho iscube(10460353203);\n\
    echo iscube(79371477325427);\necho iscube(285311670611);\necho iscube(1291467969);\n\
    echo iscube(3486784401);\necho iscube(387420489);\necho iscube(100000000);\necho\
    \ iscube(2097152);\necho iscube(43046721);\necho iscube(1000000000);\necho iscube(10460353203);\n\
    echo iscube(79371477325427);\necho iscube(285311670611);\necho iscube(1291467969);\n\
    echo iscube(3486784401);\necho iscube(387420\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg9ps4w8h.php on line 67

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(1);\necho iscube(8);\necho iscube(125);\necho iscube(216);\necho iscube(729);\n\
    echo iscube(1000);\necho iscube(2197);\necho iscube(3375);\necho iscube(4913);\n\
    echo iscube(5832);\necho iscube(6859);\necho iscube(8000);\necho iscube(9261);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltbcl13l.php:39\n\
    Stack trace:\n#0 /tmp/tmpltbcl13l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpltbcl13l.php\
    \ on line 39\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return True;\n\
    \    }\n    $i++;\n  }\n  return False;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcl_e31r.php:24\n\
    Stack trace:\n#0 /tmp/tmpzcl_e31r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzcl_e31r.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = 1;\n\
    \    while ($x <= $a) {\n        if ($x * $x * $x == $a) {\n            return\
    \ true;\n        }\n        $x++;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zpmvgfc.php:24\n\
    Stack trace:\n#0 /tmp/tmp2zpmvgfc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2zpmvgfc.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho iscube(65);\n\
    echo iscube(216);\necho iscube(217);\necho iscube(512);\necho iscube(513);\necho\
    \ iscube(729);\necho iscube(730);\necho iscube(1000);\necho iscube(1001);\necho\
    \ iscube(1728);\necho iscube(1729);\necho iscube(2744);\necho iscube(2745);\n\
    echo iscube(4096);\necho iscube(4097);\necho iscube(5832);\necho iscube(5833);\n\
    echo iscube(8000);\necho iscube(8001);\necho iscube(10648);\necho iscube(10649);\n\
    echo iscube(13824);\necho iscube(13825);\necho iscube(17576);\necho iscube(17577);\n\
    echo iscube(21952);\necho iscube(21953);\necho iscube(27000);\necho iscube(27001);\n\
    echo iscube(32768);\necho iscube(32769);\necho iscube(39304);\necho iscube(39305);\n\
    echo iscube(46656);\necho iscube(46657);\necho iscube(54872);\necho iscube(54873);\n\
    echo iscube(64000);\necho iscube(64001);\necho iscube(74088);\necho iscube(74089);\n\
    echo iscube(85184);\necho iscube(85185);\necho iscube(97336);\necho iscube(97337);\n\
    echo iscube(110592);\necho iscube(110593);\necho iscube(125000);\necho iscube(125001);\n\
    echo iscube(140608);\necho iscube(140609);\necho iscube(157464);\necho iscube(157465);\n\
    echo iscube(175616);\necho iscube(175617);\necho iscube(195112);\necho iscube(\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphjl73q5c.php on line 75

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv4zxmqp.php:16\n\
    Stack trace:\n#0 /tmp/tmphv4zxmqp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphv4zxmqp.php\
    \ on line 16\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjj21gulu.php:18\n\
    Stack trace:\n#0 /tmp/tmpjj21gulu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjj21gulu.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = 1;\n\
    \    while ($c * $c * $c < $a) {\n        $c++;\n    }\n    return $c * $c * $c\
    \ == $a;\n}\n\necho iscube(27);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66dtw11e.php:22\n\
    Stack trace:\n#0 /tmp/tmp66dtw11e.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp66dtw11e.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    return $c == floor($c);\n}\n\necho iscube(8) . \"\\n\"; // true\necho iscube(27)\
    \ . \"\\n\"; // true\necho iscube(64) . \"\\n\"; // true\necho iscube(125) . \"\
    \\n\"; // true\necho iscube(216) . \"\\n\"; // true\necho iscube(1000) . \"\\\
    n\"; // false\necho iscube(0) . \"\\n\"; // true\necho iscube(1) . \"\\n\"; //\
    \ true\necho iscube(2) . \"\\n\"; // false\necho iscube(3) . \"\\n\"; // false\n\
    echo iscube(4) . \"\\n\"; // true\necho iscube(5) . \"\\n\"; // false\necho iscube(6)\
    \ . \"\\n\"; // false\necho iscube(7) . \"\\n\"; // false\necho iscube(9) . \"\
    \\n\"; // false\necho iscube(10) . \"\\n\"; // false\necho iscube(11) . \"\\n\"\
    ; // false\necho iscube(12) . \"\\n\"; // false\necho iscube(13) . \"\\n\"; //\
    \ false\necho iscube(14) . \"\\n\"; // false\necho iscube(15) . \"\\n\"; // false\n\
    echo iscube(16) . \"\\n\"; // true\necho iscube(17) . \"\\n\"; // false\necho\
    \ iscube(18) . \"\\n\"; // false\necho iscube(19) . \"\\n\"; // false\necho iscube(20)\
    \ . \"\\n\"; // false\necho iscube(21) . \"\\n\"; // false\necho iscube(22) .\
    \ \"\\n\"; // false\necho iscube(23) . \"\\n\"; // false\necho iscube(24) . \"\
    \\n\"; // false\necho iscube(25) . \"\\n\"; // true\necho iscube(26) . \"\\n\"\
    ; // false\necho iscube(28) . \"\\n\"; // false\necho iscube(29) . \"\\n\"; //\
    \ false\necho iscube(30) . \"\\n\"; // false\necho iscube(31) . \"\\n\"; // false\n\
    echo iscube(32) . \"\\n\"; // true\necho iscube(33) .\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1sf80hm7.php on line 49

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnu3rlbn.php:26\n\
    Stack trace:\n#0 /tmp/tmpfnu3rlbn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfnu3rlbn.php\
    \ on line 26\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\treturn is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(29);\necho iscube(30);\n\
    echo iscube(31);\necho iscube(32);\necho iscube(33);\necho iscube(34);\necho iscube(35);\n\
    echo iscube(36);\necho iscube(37);\necho iscube(38);\necho iscube(39);\necho iscube(40);\n\
    echo iscube(41);\necho iscube(42);\necho iscube(43);\necho iscube(44);\necho iscube(45);\n\
    echo iscube(46);\necho iscube(47);\necho iscube(48);\necho iscube(49);\necho iscube(50);\n\
    echo iscube(51);\necho iscube(52);\necho iscube(53);\necho iscube(54);\necho iscube(55);\n\
    echo iscube(56);\necho iscube(57);\necho iscube(58);\necho iscube(59);\necho iscube(60);\n\
    echo iscube(61);\necho iscube(62);\necho iscube(63);\necho iscube(64);\necho iscube(65);\n\
    echo iscube(66);\necho iscube(67);\necho iscube(68);\necho iscube(69);\necho iscube(70);\n\
    echo iscube(71);\necho iscube(72);\necho iscube(73);\necho iscube(74);\necho iscube(75);\n\
    echo iscube(76);\necho iscube(77);\necho iscube(78);\necho iscube(79);\necho iscube(80);\n\
    echo iscube(81);\necho iscube(82);\necho iscube(83);\necho iscube(84);\necho iscube(85);\n\
    echo iscube(86);\necho iscube(87);\necho iscube(88);\necho iscube(89);\necho iscube(90);\n\
    echo iscube(91);\necho iscube(92);\necho iscube(93);\necho iscube(94);\necho iscube(95);\n\
    echo iscube(96);\necho\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphvz37qgm.php on line 81

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(27); // true\necho iscube(28); // false\necho iscube(29);\
    \ // false\necho iscube(8); // false\necho iscube(1); // true\necho iscube(0);\
    \ // true\necho iscube(-1); // true\necho iscube(-8); // false\necho iscube(-27);\
    \ // true\necho iscube(-28); // false\necho iscube(-29); // false\necho iscube(-125);\
    \ // true\necho iscube(-125.0); // true\necho iscube(-125.1); // false\necho iscube(-125.5);\
    \ // false\necho iscube(125.5); // false\necho iscube(125.0); // true\necho iscube(125.1);\
    \ // false\necho iscube(125); // true\necho iscube(0.125); // true\necho iscube(0.126);\
    \ // false\necho iscube(0.127); // false\necho iscube(0.128); // false\necho iscube(0.129);\
    \ // false\necho iscube(0.130); // false\necho iscube(0.131); // false\necho iscube(0.132);\
    \ // false\necho iscube(0.133); // false\necho iscube(0.134); // false\necho iscube(0.135);\
    \ // false\necho iscube(0.136); // false\necho iscube(0.137); // false\necho iscube(0.138);\
    \ // false\necho iscube(0.139); // false\necho iscube(0.140); // false\necho iscube(0.141);\
    \ // false\necho iscube(0.142); // false\necho iscube(0.143); // false\necho iscube(0.144);\
    \ // false\necho iscube(0.145); // false\necho iscube(0.146); // false\necho iscube(0.147);\
    \ // false\necho iscube(0.148); // false\necho iscube(0.149); // false\necho iscube(0.150);\
    \ // false\necho iscube(0.151); // false\necho iscube(0.152); // false\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111111111111111111111111111111111111111111111\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5rn1z88q.php:64\nStack trace:\n#0 /tmp/tmp5rn1z88q.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5rn1z88q.php on line 64\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $x = pow($a,\
    \ 1/3);\n  if (is_int($x)) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n\necho iscube(27);\necho iscube(28);\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppscw36bi.php:22\n\
    Stack trace:\n#0 /tmp/tmppscw36bi.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppscw36bi.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $root = round(pow($a,\
    \ 1/3));\n  if ($root * $root * $root == $a) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n\necho iscube(27);\necho iscube(64);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(343);\necho iscube(512);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(1331);\necho iscube(1728);\necho iscube(2197);\n\
    echo iscube(2744);\necho iscube(3375);\necho iscube(4096);\necho iscube(4913);\n\
    echo iscube(5832);\necho iscube(6859);\necho iscube(8000);\necho iscube(9261);\n\
    echo iscube(10648);\necho iscube(12167);\necho iscube(13824);\necho iscube(15625);\n\
    echo iscube(17576);\necho iscube(19683);\necho iscube(21952);\necho iscube(24389);\n\
    echo iscube(27000);\necho iscube(29791);\necho iscube(32768);\necho iscube(35937);\n\
    echo iscube(39304);\necho iscube(42875);\necho iscube(46656);\necho iscube(50653);\n\
    echo iscube(54872);\necho iscube(59319);\necho iscube(64000);\necho iscube(68921);\n\
    echo iscube(74088);\necho iscube(79507);\necho iscube(85184);\necho iscube(91125);\n\
    echo iscube(97336);\necho iscube(103823);\necho iscube(110592);\necho iscube(117649);\n\
    echo iscube(125000);\necho iscube(132651);\necho iscube(140608);\necho iscube(148877);\n\
    echo iscube(157464);\necho iscube(166375);\necho iscube(175616);\necho iscube(185193);\n\
    echo iscube(195112);\necho iscube(205379);\necho iscube\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqpz4jdt4.php on line 73

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    if ($c == round($c)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy06ypn4u.php:22\n\
    Stack trace:\n#0 /tmp/tmpy06ypn4u.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy06ypn4u.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\necho iscube(27);\n\
    echo iscube(8);\necho iscube(64);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(343);\necho iscube(1000);\necho iscube(1);\necho iscube(3);\necho iscube(9);\n\
    echo iscube(15);\necho iscube(17);\necho iscube(18);\necho iscube(19);\necho iscube(21);\n\
    echo iscube(22);\necho iscube(23);\necho iscube(24);\necho iscube(25);\necho iscube(26);\n\
    echo iscube(28);\necho iscube(29);\necho iscube(30);\necho iscube(31);\necho iscube(32);\n\
    echo iscube(33);\necho iscube(34);\necho iscube(35);\necho iscube(36);\necho iscube(37);\n\
    echo iscube(38);\necho iscube(39);\necho iscube(40);\necho iscube(41);\necho iscube(42);\n\
    echo iscube(43);\necho iscube(44);\necho iscube(45);\necho iscube(46);\necho iscube(47);\n\
    echo iscube(48);\necho iscube(49);\necho iscube(50);\necho iscube(51);\necho iscube(52);\n\
    echo iscube(53);\necho iscube(54);\necho iscube(55);\necho iscube(56);\necho iscube(57);\n\
    echo iscube(58);\necho iscube(59);\necho iscube(60);\necho iscube(61);\necho iscube(62);\n\
    echo iscube(63);\necho iscube(65);\necho iscube(66);\necho iscube(67);\necho iscube(68);\n\
    echo iscube(69);\necho iscube(70);\necho iscube(71);\necho iscube(72);\necho iscube(73);\n\
    echo iscube(74);\necho iscube(75);\necho iscube(76);\necho\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp48g1spo1.php on line 80

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = 1;\n\
    \    while ($x * $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x ==\
    \ $a) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \necho iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(29) . \"\
    \\n\";\necho iscube(30) . \"\\n\";\necho iscube(31) . \"\\n\";\necho iscube(32)\
    \ . \"\\n\";\necho iscube(33) . \"\\n\";\necho iscube(34) . \"\\n\";\necho iscube(35)\
    \ . \"\\n\";\necho iscube(36) . \"\\n\";\necho iscube(37) . \"\\n\";\necho iscube(38)\
    \ . \"\\n\";\necho iscube(39) . \"\\n\";\necho iscube(40) . \"\\n\";\necho iscube(41)\
    \ . \"\\n\";\necho iscube(42) . \"\\n\";\necho iscube(43) . \"\\n\";\necho iscube(44)\
    \ . \"\\n\";\necho iscube(45) . \"\\n\";\necho iscube(46) . \"\\n\";\necho iscube(47)\
    \ . \"\\n\";\necho iscube(48) . \"\\n\";\necho iscube(49) . \"\\n\";\necho iscube(50)\
    \ . \"\\n\";\necho iscube(51) . \"\\n\";\necho iscube(52) . \"\\n\";\necho iscube(53)\
    \ . \"\\n\";\necho iscube(54) . \"\\n\";\necho iscube(55) . \"\\n\";\necho iscube(56)\
    \ . \"\\n\";\necho iscube(57) . \"\\n\";\necho iscube(58) . \"\\n\";\necho iscube(59)\
    \ . \"\\n\";\necho iscube(60) . \"\\n\";\necho iscube(61) . \"\\n\";\necho iscube(62)\
    \ . \"\\n\";\necho iscube(63) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(65)\
    \ . \"\\n\";\necho iscube(66) . \"\\n\";\necho iscube\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp5fyl7vh.php on line 59

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(8); // false\necho iscube(27);\
    \ // true\necho iscube(64); // true\necho iscube(125); // true\necho iscube(216);\
    \ // false\necho iscube(343); // true\necho iscube(512); // false\necho iscube(729);\
    \ // true\necho iscube(1000); // false\necho iscube(1331); // true\necho iscube(1728);\
    \ // true\necho iscube(2197); // true\necho iscube(2744); // false\necho iscube(3375);\
    \ // true\necho iscube(4096); // true\necho iscube(4913); // true\necho iscube(5832);\
    \ // false\necho iscube(6859); // true\necho iscube(8000); // true\necho iscube(9261);\
    \ // true\necho iscube(10648); // true\necho iscube(12167); // true\necho iscube(13824);\
    \ // false\necho iscube(15625); // true\necho iscube(17576); // true\necho iscube(19683);\
    \ // true\necho iscube(21952); // false\necho iscube(24389); // true\necho iscube(27000);\
    \ // true\necho iscube(29791); // true\necho iscube(32768); // true\necho iscube(35937);\
    \ // true\necho iscube(39304); // false\necho iscube(42875); // true\necho iscube(46656);\
    \ // true\necho iscube(50653); // true\necho iscube(54872); // false\necho iscube(59319);\
    \ // true\necho iscube(64000); // true\necho iscube(68921); // true\necho iscube(74088);\
    \ // false\necho iscube(79507); // true\necho iscube(85184); // true\necho iscube(91125);\
    \ // true\necho iscube(97336); // false\necho iscube(103823\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj4gvybcl.php on line 63

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(1331);\necho\
    \ iscube(512);\necho iscube(1);\necho iscube(12);\necho iscube(9);\necho iscube(343);\n\
    echo iscube(1728);\necho iscube(5832);\necho iscube(5000);\necho iscube(5831);\n\
    echo iscube(5830);\necho iscube(5829);\necho iscube(5828);\necho iscube(5827);\n\
    echo iscube(5826);\necho iscube(5825);\necho iscube(5824);\necho iscube(5823);\n\
    echo iscube(5822);\necho iscube(5821);\necho iscube(5820);\necho iscube(5819);\n\
    echo iscube(5818);\necho iscube(5817);\necho iscube(5816);\necho iscube(5815);\n\
    echo iscube(5814);\necho iscube(5813);\necho iscube(5812);\necho iscube(5811);\n\
    echo iscube(5810);\necho iscube(5809);\necho iscube(5808);\necho iscube(5807);\n\
    echo iscube(5806);\necho iscube(5805);\necho iscube(5804);\necho iscube(5803);\n\
    echo iscube(5802);\necho iscube(5801);\necho iscube(5800);\necho iscube(5799);\n\
    echo iscube(5798);\necho iscube(5797);\necho iscube(5796);\necho iscube(5795);\n\
    echo iscube(5794);\necho iscube(5793);\necho iscube(5792);\necho iscube(5791);\n\
    echo iscube(5790);\necho iscube(5789);\necho iscube(5788);\necho iscube(5787);\n\
    echo\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpctn5080h.php on line 75

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i*$i*$i <= $a) {\n        if ($i*$i*$i == $a) {\n            return\
    \ true;\n        }\n        $i++;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzvlg6x07.php:24\n\
    Stack trace:\n#0 /tmp/tmpzvlg6x07.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzvlg6x07.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(1);\necho iscube(8);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(729);\necho iscube(1000);\necho iscube(2197);\n\
    echo iscube(3375);\necho iscube(4913);\necho iscube(5832);\necho iscube(6859);\n\
    echo iscube(8000);\necho iscube(9261);\necho iscube(10648);\necho iscube(12167);\n\
    echo iscube(13824);\necho iscube(15625);\necho iscube(17576);\necho iscube(19683);\n\
    echo iscube(21952);\necho iscube(24389);\necho iscube(27000);\necho iscube(29791);\n\
    echo iscube(32768);\necho iscube(35937);\necho iscube(39304);\necho iscube(42875);\n\
    echo iscube(46656);\necho iscube(50653);\necho iscube(54872);\necho iscube(59319);\n\
    echo iscube(64000);\necho iscube(68921);\necho iscube(74088);\necho iscube(79507);\n\
    echo iscube(85184);\necho iscube(91125);\necho iscube(97336);\necho iscube(103823);\n\
    echo iscube(110592);\necho iscube(117649);\necho iscube(125000);\necho iscube(132651);\n\
    echo iscube(140608);\necho iscube(148877);\necho iscube(157464);\necho iscube(166375);\n\
    echo iscube(175616);\necho iscube(185193);\necho iscube(195112);\necho iscube(205379);\n\
    echo iscube(216000);\necho iscube(226981);\necho iscube(238328);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111111111111111111111111111111111111111111111111\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmps87kiopm.php:80\nStack trace:\n#0 /tmp/tmps87kiopm.php(88):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps87kiopm.php on line 80\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbv3te1u0.php:20\n\
    Stack trace:\n#0 /tmp/tmpbv3te1u0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbv3te1u0.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$i = 1;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(512);\necho iscube(1);\necho\
    \ iscube(3);\necho iscube(9);\necho iscube(10);\necho iscube(1000);\necho iscube(10000);\n\
    echo iscube(100000);\necho iscube(1000000);\necho iscube(10000000);\necho iscube(100000000);\n\
    echo iscube(1000000000);\necho iscube(10000000000);\necho iscube(100000000000);\n\
    echo iscube(1000000000000);\necho iscube(10000000000000);\necho iscube(100000000000000);\n\
    echo iscube(1000000000000000);\necho iscube(10000000000000000);\necho iscube(100000000000000000);\n\
    echo iscube(1000000000000000000);\necho iscube(10000000000000000000);\necho iscube(100000000000000000000);\n\
    echo iscube(1000000000000000000000);\necho iscube(10000000000000000000000);\n\
    echo iscube(100000000000000000000000);\necho iscube(1000000000000000000000000);\n\
    echo iscube(10000000000000000000000000);\necho iscube(100000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000);\necho iscube(10000000000000000000000000000);\n\
    echo iscube(100000000000000000000000000000);\necho iscube(1000000000000000000000000000000);\n\
    echo iscube(10000000000000000000000000000000);\necho iscube(100000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000000);\n\
    echo iscube(100000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000);\n\
    echo iscube(10000000000000000000000000000000000000);\necho iscube(100000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000000000000);\n\
    echo iscube(100000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000);\n\
    echo iscube(10000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcklwd4m7.php on line 67

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i < $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n    }\n\
    \    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvp6lxvhn.php:22\n\
    Stack trace:\n#0 /tmp/tmpvp6lxvhn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvp6lxvhn.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(1) . \"\\\
    n\";\necho iscube(8) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216)\
    \ . \"\\n\";\necho iscube(729) . \"\\n\";\necho iscube(1000) . \"\\n\";\necho\
    \ iscube(2197) . \"\\n\";\necho iscube(5832) . \"\\n\";\necho iscube(10000) .\
    \ \"\\n\";\necho iscube(1728) . \"\\n\";\necho iscube(5831) . \"\\n\";\necho iscube(5830)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n1\n1\n1\n\n1\n\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqk4gwpcy.php:38\nStack trace:\n#0 /tmp/tmpqk4gwpcy.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqk4gwpcy.php on line 38\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ pow($a, 1/3);\n    if (is_int($cube)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe9pxyp1a.php:20\n\
    Stack trace:\n#0 /tmp/tmpe9pxyp1a.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpe9pxyp1a.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    return\
    \ is_numeric(pow($a, 1/3));\n}\n\necho iscube(8) . PHP_EOL; // true\necho iscube(27)\
    \ . PHP_EOL; // true\necho iscube(64) . PHP_EOL; // true\necho iscube(125) . PHP_EOL;\
    \ // true\necho iscube(216) . PHP_EOL; // true\necho iscube(343) . PHP_EOL; //\
    \ true\necho iscube(1000) . PHP_EOL; // false\necho iscube(12) . PHP_EOL; // false\n\
    echo iscube(1) . PHP_EOL; // true\necho iscube(0) . PHP_EOL; // true\necho iscube(-1)\
    \ . PHP_EOL; // true\necho iscube(-8) . PHP_EOL; // true\necho iscube(-27) . PHP_EOL;\
    \ // true\necho iscube(-64) . PHP_EOL; // true\necho iscube(-125) . PHP_EOL; //\
    \ true\necho iscube(-216) . PHP_EOL; // true\necho iscube(-343) . PHP_EOL; //\
    \ true\necho iscube(-1000) . PHP_EOL; // false\necho iscube(-12) . PHP_EOL; //\
    \ false\necho iscube(1.0) . PHP_EOL; // true\necho iscube(0.0) . PHP_EOL; // true\n\
    echo iscube(-1.0) . PHP_EOL; // true\necho iscube(-8.0) . PHP_EOL; // true\necho\
    \ iscube(-27.0) . PHP_EOL; // true\necho iscube(-64.0) . PHP_EOL; // true\necho\
    \ iscube(-125.0) . PHP_EOL; // true\necho iscube(-216.0) . PHP_EOL; // true\n\
    echo iscube(-343.0) . PHP_EOL; // true\necho iscube(-1000.0) . PHP_EOL; // false\n\
    echo iscube(-12.0) . PHP_EOL; // false\necho iscube(1.5) . PHP_EOL; // false\n\
    echo is\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdm_8v3yi.php on line 42

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $c = pow($a,\
    \ 1/3);\n  if (is_int($c)) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n\necho iscube(8) . \"\\n\";\necho iscube(27) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\n\";\necho iscube(343)\
    \ . \"\\n\";\necho iscube(1000) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(3)\
    \ . \"\\n\";\necho iscube(9) . \"\\n\";\necho iscube(15) . \"\\n\";\necho iscube(36)\
    \ . \"\\n\";\necho iscube(63) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216)\
    \ . \"\\n\";\necho iscube(343) . \"\\n\";\necho iscube(1000) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpsk7kxw4q.php:37\nStack trace:\n#0 /tmp/tmpsk7kxw4q.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsk7kxw4q.php on line 37\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\\
    n\";\necho iscube(729) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(-8) . \"\\n\";\necho iscube(-27)\
    \ . \"\\n\";\necho iscube(-64) . \"\\n\";\necho iscube(-125) . \"\\n\";\necho\
    \ iscube(-216) . \"\\n\";\necho iscube(-729) . \"\\n\";\necho iscube(pow(2, 53))\
    \ . \"\\n\";\necho iscube(pow(2, 53) + 1) . \"\\n\";\necho iscube(pow(2, 53) +\
    \ 2) . \"\\n\";\necho iscube(pow(2, 53) + 3) . \"\\n\";\necho iscube(pow(2, 53)\
    \ + 4) . \"\\n\";\necho iscube(pow(2, 53) + 5) . \"\\n\";\necho iscube(pow(2,\
    \ 53) + 6) . \"\\n\";\necho iscube(pow(2, 53) + 7) . \"\\n\";\necho iscube(pow(2,\
    \ 53) + 8) . \"\\n\";\necho iscube(pow(2, 53) + 9) . \"\\n\";\necho iscube(pow(2,\
    \ 53) + 10) . \"\\n\";\necho iscube(pow(2, 53) + 11) . \"\\n\";\necho iscube(pow(2,\
    \ 53) + 12) . \"\\n\";\necho iscube(pow(2, 53) + 13) . \"\\n\";\necho iscube(pow(2,\
    \ 53) + 14) . \"\\n\";\necho iscube(pow(2, 53) +\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fy_93o6.php on line 47

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(8); // false\necho iscube(27); // true\necho iscube(64);\
    \ // true\necho iscube(125); // true\necho iscube(216); // true\necho iscube(1000);\
    \ // false\necho iscube(1); // true\necho iscube(0); // true\necho iscube(-27);\
    \ // true\necho iscube(-64); // true\necho iscube(-125); // true\necho iscube(-216);\
    \ // true\necho iscube(-1000); // false\necho iscube(-1); // true\necho iscube(-0);\
    \ // true\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6k5hxej8.php:31\n\
    Stack trace:\n#0 /tmp/tmp6k5hxej8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6k5hxej8.php\
    \ on line 31\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $b = sqrt($a);\n\
    \  if ($b == round($b)) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7jh2he3.php:22\n\
    Stack trace:\n#0 /tmp/tmpl7jh2he3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpl7jh2he3.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = pow($b, 3);\n    if ($c == $a) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(729);\necho iscube(1);\necho iscube(0);\necho iscube(64);\n\
    echo iscube(-125);\necho iscube(-1);\necho iscube(1.0);\necho iscube(1.5);\necho\
    \ iscube(3.0);\necho iscube(1.25992104989487);\necho iscube(1.33333333333333);\n\
    echo iscube(1.26);\necho iscube(1.3);\necho iscube(1.25);\necho iscube(1.24);\n\
    echo iscube(1.26992104989487);\necho iscube(1.27);\necho iscube(1.28);\necho iscube(1.29);\n\
    echo iscube(1.30);\necho iscube(1.31);\necho iscube(1.32);\necho iscube(1.33);\n\
    echo iscube(1.34);\necho iscube(1.35);\necho iscube(1.36);\necho iscube(1.37);\n\
    echo iscube(1.38);\necho iscube(1.39);\necho iscube(1.40);\necho iscube(1.41);\n\
    echo iscube(1.42);\necho iscube(1.43);\necho iscube(1.44);\necho iscube(1.45);\n\
    echo iscube(1.46);\necho iscube(1.47);\necho iscube(1.48);\necho iscube(1.49);\n\
    echo iscube(1.50);\necho iscube(1.51);\necho iscube(1.52);\necho iscube(1.53);\n\
    echo iscube(1.54);\necho iscube(1.55);\necho iscube(1.56);\necho iscube(1.57);\n\
    echo iscube(1.58\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpk5ld6r24.php on line 68

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    if ($c * $c * $c == $a) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcu3scm6.php:22\n\
    Stack trace:\n#0 /tmp/tmppcu3scm6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppcu3scm6.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhy26otm.php:24\n\
    Stack trace:\n#0 /tmp/tmpuhy26otm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuhy26otm.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = sqrt($a);\n\
    \    return $x * $x * $x == $a;\n}\n\necho iscube(27);\necho iscube(8);\necho\
    \ iscube(64);\necho iscube(125);\necho iscube(216);\necho iscube(343);\necho iscube(512);\n\
    echo iscube(729);\necho iscube(1000);\necho iscube(1331);\necho iscube(1728);\n\
    echo iscube(2197);\necho iscube(2744);\necho iscube(3375);\necho iscube(4096);\n\
    echo iscube(4913);\necho iscube(5832);\necho iscube(6859);\necho iscube(8000);\n\
    echo iscube(9261);\necho iscube(10648);\necho iscube(12167);\necho iscube(13824);\n\
    echo iscube(15625);\necho iscube(17576);\necho iscube(19683);\necho iscube(21952);\n\
    echo iscube(24389);\necho iscube(27000);\necho iscube(29791);\necho iscube(32768);\n\
    echo iscube(35937);\necho iscube(39304);\necho iscube(42875);\necho iscube(46656);\n\
    echo iscube(50653);\necho iscube(54872);\necho iscube(59319);\necho iscube(64000);\n\
    echo iscube(68921);\necho iscube(74088);\necho iscube(79507);\necho iscube(85184);\n\
    echo iscube(91125);\necho iscube(97336);\necho iscube(103823);\necho iscube(110592);\n\
    echo iscube(117649);\necho iscube(125000);\necho iscube(132651);\necho iscube(140608);\n\
    echo iscube(148877);\necho iscube(157464);\necho iscube(166375);\necho iscube(175616);\n\
    echo iscube(185193);\necho iscube(195112);\necho iscube(205379);\necho iscube(216000);\n\
    echo iscube(226981);\necho iscube(\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2zfstz5o.php on line 72

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$cube = round(pow($a,\
    \ 1/3));\n\treturn $cube * $cube * $cube == $a;\n}\n\necho iscube(27); // true\n\
    echo iscube(28); // false\necho iscube(125); // true\necho iscube(1); // true\n\
    echo iscube(8); // false\necho iscube(64); // true\necho iscube(216); // true\n\
    echo iscube(512); // true\necho iscube(729); // true\necho iscube(1000); // false\n\
    echo iscube(0); // true\necho iscube(1); // true\necho iscube(125); // true\n\
    echo iscube(64); // true\necho iscube(1000); // false\necho iscube(729); // true\n\
    echo iscube(343); // true\necho iscube(216); // true\necho iscube(512); // true\n\
    echo iscube(1000); // false\necho iscube(1000000); // true\necho iscube(10000000000);\
    \ // true\necho iscube(10000000000000); // true\necho iscube(1000000000000000000);\
    \ // true\necho iscube(1000000000000000000000); // true\necho iscube(1000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000); // true\necho\
    \ iscube(1000000000000000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000); //\
    \ true\necho iscube(1000000000000000000000000000000000000000000000000000); //\
    \ true\necho iscube(1000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(10000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9i1m9t_5.php on line 55

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = round(pow($a,\
    \ 1/3));\n    if ($b * $b * $b == $a) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(343);\necho iscube(512);\necho\
    \ iscube(729);\necho iscube(1000);\necho iscube(1331);\necho iscube(1728);\necho\
    \ iscube(2197);\necho iscube(2744);\necho iscube(3375);\necho iscube(4096);\n\
    echo iscube(4913);\necho iscube(5832);\necho iscube(6859);\necho iscube(8000);\n\
    echo iscube(9261);\necho iscube(10648);\necho iscube(12167);\necho iscube(13824);\n\
    echo iscube(15625);\necho iscube(17576);\necho iscube(19683);\necho iscube(21952);\n\
    echo iscube(24389);\necho iscube(27000);\necho iscube(29791);\necho iscube(32768);\n\
    echo iscube(35937);\necho iscube(39304);\necho iscube(42875);\necho iscube(46656);\n\
    echo iscube(50653);\necho iscube(54872);\necho iscube(59319);\necho iscube(64000);\n\
    echo iscube(68921);\necho iscube(74088);\necho iscube(79507);\necho iscube(85184);\n\
    echo iscube(91125);\necho iscube(97336);\necho iscube(103823);\necho iscube(110592);\n\
    echo iscube(117649);\necho iscube(125000);\necho iscube(132651);\necho iscube(140608);\n\
    echo iscube(148877);\necho iscube(157464);\necho iscube(166375);\necho iscube(175616);\n\
    echo iscube(185193);\necho iscube(195112);\necho iscube(\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiljkwrqf.php on line 73

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjj21gulu.php:18\n\
    Stack trace:\n#0 /tmp/tmpjj21gulu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjj21gulu.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\necho iscube(27);\necho iscube(28);\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8cw47ute.php:21\n\
    Stack trace:\n#0 /tmp/tmp8cw47ute.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8cw47ute.php\
    \ on line 21\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    return\
    \ is_numeric(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_u7maql_.php:16\n\
    Stack trace:\n#0 /tmp/tmp_u7maql_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_u7maql_.php\
    \ on line 16\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $a = pow($a,\
    \ 1/3);\n    if (is_int($a)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\necho iscube(27);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwuog72z.php:20\n\
    Stack trace:\n#0 /tmp/tmpbwuog72z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbwuog72z.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 0;\n\
    \    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    return $i * $i * $i\
    \ == $a;\n}\n\necho iscube(8) . \"\\n\";\necho iscube(27) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\n\";\necho iscube(343)\
    \ . \"\\n\";\necho iscube(1000) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(-8) . \"\\n\";\necho iscube(-27)\
    \ . \"\\n\";\necho iscube(-64) . \"\\n\";\necho iscube(-125) . \"\\n\";\necho\
    \ iscube(-216) . \"\\n\";\necho iscube(-343) . \"\\n\";\necho iscube(-1000) .\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4474f5w7.php:38\nStack trace:\n#0 /tmp/tmp4474f5w7.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4474f5w7.php on line 38\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\necho iscube(27) . PHP_EOL;\necho\
    \ iscube(28) . PHP_EOL;\necho iscube(125) . PHP_EOL;\necho iscube(216) . PHP_EOL;\n\
    echo iscube(729) . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(-1) . PHP_EOL;\necho iscube(-27) . PHP_EOL;\necho iscube(-64) . PHP_EOL;\n\
    echo iscube(-125) . PHP_EOL;\necho iscube(-216) . PHP_EOL;\necho iscube(-729)\
    \ . PHP_EOL;\necho iscube(-1000) . PHP_EOL;\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp3skj93la.php:33\nStack trace:\n#0 /tmp/tmp3skj93la.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3skj93la.php on line 33\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(8) . \"\\n\";\necho\
    \ iscube(27) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(125) . \"\\n\"\
    ;\necho iscube(216) . \"\\n\";\necho iscube(343) . \"\\n\";\necho iscube(1000)\
    \ . \"\\n\";\necho iscube(1000000) . \"\\n\";\necho iscube(100000000) . \"\\n\"\
    ;\necho iscube(10000000000) . \"\\n\";\necho iscube(1000000000000) . \"\\n\";\n\
    echo iscube(100000000000000) . \"\\n\";\necho iscube(10000000000000000) . \"\\\
    n\";\necho iscube(1000000000000000000) . \"\\n\";\necho iscube(100000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000) . \"\\n\";\necho iscube(10000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000000000) . \"\\n\";\necho\
    \ iscube(1000000000000000000000000000000000000) . \"\\n\";\necho iscube(100000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000000000000000000) . \"\\n\"\
    ;\necho iscube(1000000000000000000000000000000000000000000) . \"\\n\";\necho iscube(100000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000000000000000000000) . \"\
    \\n\";\necho iscube(10000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(100000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(10000000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(1000000000000000000000000000000000000000000000000000000) . \"\
    \\n\";\necho iscube(1000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000000000000000000000000000\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpw772iozt.php on line 51

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(1) . \"\\\
    n\";\necho iscube(8) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216)\
    \ . \"\\n\";\necho iscube(512) . \"\\n\";\necho iscube(729) . \"\\n\";\necho iscube(1000)\
    \ . \"\\n\";\necho iscube(12345) . \"\\n\";\necho iscube(123456789) . \"\\n\"\
    ;\necho iscube(123456789123456789) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmprjb_ud_0.php:36\nStack trace:\n#0 /tmp/tmprjb_ud_0.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprjb_ud_0.php on line 36\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(8) . \"\\n\"; // false\necho iscube(27) . \"\\n\"; // true\necho iscube(64)\
    \ . \"\\n\"; // true\necho iscube(125) . \"\\n\"; // true\necho iscube(216) .\
    \ \"\\n\"; // false\necho iscube(729) . \"\\n\"; // true\necho iscube(1000) .\
    \ \"\\n\"; // false\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmprno9oh_3.php:31\nStack trace:\n#0 /tmp/tmprno9oh_3.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmprno9oh_3.php on line 31\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8); // true\necho iscube(27); // true\necho\
    \ iscube(64); // true\necho iscube(65); // false\necho iscube(216); // true\n\
    echo iscube(1000); // false\necho iscube(1); // true\necho iscube(125); // true\n\
    echo iscube(3); // false\necho iscube(-8); // false\necho iscube(0); // true\n\
    echo iscube(1); // true\necho iscube(125); // true\necho iscube(216); // true\n\
    echo iscube(1000); // false\necho iscube(729); // true\necho iscube(10000); //\
    \ true\necho iscube(27000); // false\necho iscube(9261); // false\necho iscube(5832);\
    \ // true\necho iscube(5000); // false\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt73bdt17.php:43\n\
    Stack trace:\n#0 /tmp/tmpt73bdt17.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpt73bdt17.php\
    \ on line 43\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return True;\n        }\n        $i++;\n    }\n    return False;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmagx9qru.php:24\n\
    Stack trace:\n#0 /tmp/tmpmagx9qru.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmagx9qru.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhy26otm.php:24\n\
    Stack trace:\n#0 /tmp/tmpuhy26otm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuhy26otm.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\necho iscube(27) . PHP_EOL;\necho\
    \ iscube(28) . PHP_EOL;\necho iscube(29) . PHP_EOL;\necho iscube(30) . PHP_EOL;\n\
    echo iscube(31) . PHP_EOL;\necho iscube(32) . PHP_EOL;\necho iscube(33) . PHP_EOL;\n\
    echo iscube(34) . PHP_EOL;\necho iscube(35) . PHP_EOL;\necho iscube(36) . PHP_EOL;\n\
    echo iscube(37) . PHP_EOL;\necho iscube(38) . PHP_EOL;\necho iscube(39) . PHP_EOL;\n\
    echo iscube(40) . PHP_EOL;\necho iscube(41) . PHP_EOL;\necho iscube(42) . PHP_EOL;\n\
    echo iscube(43) . PHP_EOL;\necho iscube(44) . PHP_EOL;\necho iscube(45) . PHP_EOL;\n\
    echo iscube(46) . PHP_EOL;\necho iscube(47) . PHP_EOL;\necho iscube(48) . PHP_EOL;\n\
    echo iscube(49) . PHP_EOL;\necho iscube(50) . PHP_EOL;\necho iscube(51) . PHP_EOL;\n\
    echo iscube(52) . PHP_EOL;\necho iscube(53) . PHP_EOL;\necho iscube(54) . PHP_EOL;\n\
    echo iscube(55) . PHP_EOL;\necho iscube(56) . PHP_EOL;\necho iscube(57) . PHP_EOL;\n\
    echo iscube(58) . PHP_EOL;\necho iscube(59) . PHP_EOL;\necho iscube(60) . PHP_EOL;\n\
    echo iscube(61) . PHP_EOL;\necho iscube(62) . PHP_EOL;\necho iscube(63) . PHP_\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5y2zbe_u.php on line 48

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return True;\n\
    \    }\n    $i++;\n  }\n  return False;\n}\n\nprint iscube(8) . \"\\n\";\nprint\
    \ iscube(27) . \"\\n\";\nprint iscube(64) . \"\\n\";\nprint iscube(125) . \"\\\
    n\";\nprint iscube(216) . \"\\n\";\nprint iscube(343) . \"\\n\";\nprint iscube(1000)\
    \ . \"\\n\";\nprint iscube(1) . \"\\n\";\nprint iscube(0) . \"\\n\";\nprint iscube(-1)\
    \ . \"\\n\";\nprint iscube(-8) . \"\\n\";\nprint iscube(-27) . \"\\n\";\nprint\
    \ iscube(-64) . \"\\n\";\nprint iscube(-125) . \"\\n\";\nprint iscube(-216) .\
    \ \"\\n\";\nprint iscube(-343) . \"\\n\";\nprint iscube(-1000) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqvuewz3x.php:41\nStack trace:\n#0 /tmp/tmpqvuewz3x.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqvuewz3x.php on line 41\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = pow($a,\
    \ 1/3);\n    if (is_int($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekdreovz.php:22\n\
    Stack trace:\n#0 /tmp/tmpekdreovz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpekdreovz.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(729);\necho iscube(1);\necho iscube(0);\necho iscube(-1);\necho iscube(-27);\n\
    echo iscube(-64);\necho iscube(-125);\necho iscube(-216);\necho iscube(-729);\n\
    echo iscube(-1000);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqqdngfj.php:38\n\
    Stack trace:\n#0 /tmp/tmpxqqdngfj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxqqdngfj.php\
    \ on line 38\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = $a;\n\
    \    while ($x > 1) {\n        $x = $x / 3;\n    }\n    if ($x == 1) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphr5bk19a.php:25\n\
    Stack trace:\n#0 /tmp/tmphr5bk19a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphr5bk19a.php\
    \ on line 25\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: -1
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$i = 1;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\necho iscube(27); // true\necho iscube(28);\
    \ // false\necho iscube(125); // true\necho iscube(126); // false\necho iscube(1);\
    \ // true\necho iscube(2); // false\necho iscube(8); // false\necho iscube(9);\
    \ // true\necho iscube(216); // true\necho iscube(512); // true\necho iscube(729);\
    \ // true\necho iscube(1000); // false\necho iscube(1000000); // true\necho iscube(10000000000);\
    \ // true\necho iscube(10000000000000); // true\necho iscube(1000000000000000000);\
    \ // true\necho iscube(1000000000000000000000); // true\necho iscube(1000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000); // true\necho\
    \ iscube(1000000000000000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000); //\
    \ true\necho iscube(1000000000000000000000000000000000000000000000000000); //\
    \ true\necho iscube(1000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: b'111111111111'
  timestamp: 1659730493
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$b = sqrt($a);\n\
    \tif (is_int($b)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    \necho iscube(27);\necho iscube(28);\necho iscube(1);\necho iscube(8);\necho iscube(125);\n\
    echo iscube(216);\necho iscube(729);\necho iscube(1000);\necho iscube(2147483647);\n\
    echo iscube(0);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5106pn8o.php:30\n\
    Stack trace:\n#0 /tmp/tmp5106pn8o.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5106pn8o.php\
    \ on line 30\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\necho iscube(27);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7tanpyz.php:22\n\
    Stack trace:\n#0 /tmp/tmpl7tanpyz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpl7tanpyz.php\
    \ on line 22\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = pow($b, 3);\n    if ($c == $a) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\necho iscube(27);\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy692hhnc.php:25\n\
    Stack trace:\n#0 /tmp/tmpy692hhnc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy692hhnc.php\
    \ on line 25\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$i = 1;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(29) . \"\\n\";\necho iscube(30) . \"\\n\"\
    ;\necho iscube(31) . \"\\n\";\necho iscube(32) . \"\\n\";\necho iscube(33) . \"\
    \\n\";\necho iscube(34) . \"\\n\";\necho iscube(35) . \"\\n\";\necho iscube(36)\
    \ . \"\\n\";\necho iscube(37) . \"\\n\";\necho iscube(38) . \"\\n\";\necho iscube(39)\
    \ . \"\\n\";\necho iscube(40) . \"\\n\";\necho iscube(41) . \"\\n\";\necho iscube(42)\
    \ . \"\\n\";\necho iscube(43) . \"\\n\";\necho iscube(44) . \"\\n\";\necho iscube(45)\
    \ . \"\\n\";\necho iscube(46) . \"\\n\";\necho iscube(47) . \"\\n\";\necho iscube(48)\
    \ . \"\\n\";\necho iscube(49) . \"\\n\";\necho iscube(50) . \"\\n\";\necho iscube(51)\
    \ . \"\\n\";\necho iscube(52) . \"\\n\";\necho iscube(53) . \"\\n\";\necho iscube(54)\
    \ . \"\\n\";\necho iscube(55) . \"\\n\";\necho iscube(56) . \"\\n\";\necho iscube(57)\
    \ . \"\\n\";\necho iscube(58) . \"\\n\";\necho iscube(59) . \"\\n\";\necho iscube(60)\
    \ . \"\\n\";\necho iscube(61) . \"\\n\";\necho iscube(62) . \"\\n\";\necho iscube(63)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(65) . \"\\n\";\necho iscube(66)\
    \ . \"\\n\";\necho iscube\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmwsz2ud6.php on line 58

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $b = sqrt($a);\n\
    \  if (is_int($b)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    \necho iscube(8);\necho iscube(27);\necho iscube(64);\necho iscube(125);\necho\
    \ iscube(216);\necho iscube(1000);\necho iscube(0);\necho iscube(1);\necho iscube(2);\n\
    echo iscube(3);\necho iscube(4);\necho iscube(5);\necho iscube(6);\necho iscube(7);\n\
    echo iscube(9);\necho iscube(10);\necho iscube(11);\necho iscube(12);\necho iscube(13);\n\
    echo iscube(14);\necho iscube(15);\necho iscube(16);\necho iscube(17);\necho iscube(18);\n\
    echo iscube(19);\necho iscube(20);\necho iscube(21);\necho iscube(22);\necho iscube(23);\n\
    echo iscube(24);\necho iscube(25);\necho iscube(26);\necho iscube(28);\necho iscube(29);\n\
    echo iscube(30);\necho iscube(31);\necho iscube(32);\necho iscube(33);\necho iscube(34);\n\
    echo iscube(35);\necho iscube(36);\necho iscube(37);\necho iscube(38);\necho iscube(39);\n\
    echo iscube(40);\necho iscube(41);\necho iscube(42);\necho iscube(43);\necho iscube(44);\n\
    echo iscube(45);\necho iscube(46);\necho iscube(47);\necho iscube(48);\necho iscube(49);\n\
    echo iscube(50);\necho iscube(51);\necho iscube(52);\necho iscube(53);\necho iscube(54);\n\
    echo iscube(55);\necho iscube(56);\necho iscube(57);\necho iscube(58);\necho iscube(59);\n\
    echo iscube(60);\necho iscube(61);\necho iscube(62);\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1pu1d3w.php:88\n\
    Stack trace:\n#0 /tmp/tmpp1pu1d3w.php(98): test()\n#1 {main}\n  thrown in /tmp/tmpp1pu1d3w.php\
    \ on line 88\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho\
    \ iscube(65);\necho iscube(125);\necho iscube(126);\necho iscube(216);\necho iscube(217);\n\
    echo iscube(343);\necho iscube(344);\necho iscube(512);\necho iscube(513);\necho\
    \ iscube(729);\necho iscube(730);\necho iscube(1000);\necho iscube(1001);\necho\
    \ iscube(1331);\necho iscube(1332);\necho iscube(1728);\necho iscube(1729);\n\
    echo iscube(2197);\necho iscube(2198);\necho iscube(2744);\necho iscube(2745);\n\
    echo iscube(3375);\necho iscube(3376);\necho iscube(4096);\necho iscube(4097);\n\
    echo iscube(4913);\necho iscube(4914);\necho iscube(5832);\necho iscube(5833);\n\
    echo iscube(6859);\necho iscube(6860);\necho iscube(8000);\necho iscube(8001);\n\
    echo iscube(9261);\necho iscube(9262);\necho iscube(10648);\necho iscube(10649);\n\
    echo iscube(12167);\necho iscube(12168);\necho iscube(13824);\necho iscube(13825);\n\
    echo iscube(15625);\necho iscube(15626);\necho iscube(17576);\necho iscube(17577);\n\
    echo iscube(19683);\necho iscube(19684);\necho iscube(21952);\necho iscube(21953);\n\
    echo iscube(24389);\necho iscube(24390);\necho iscube(27000);\necho iscube(27001);\n\
    echo iscube(29791);\necho iscube(29792);\necho iscube(32768);\necho iscube(32769);\n\
    echo iscube(359\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpelk4g_cv.php on line 76

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(729);\necho iscube(1);\necho iscube(0);\necho iscube(64);\necho iscube(-1);\n\
    echo iscube(-64);\necho iscube(-125);\necho iscube(-343);\necho iscube(-729);\n\
    echo iscube(-1000);\necho iscube(1000);\necho iscube(531441);\necho iscube(1000000);\n\
    echo iscube(10000000000);\necho iscube(10000000000000);\necho iscube(1000000000000000000);\n\
    echo iscube(1000000000000000000000);\necho iscube(1000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000);\necho iscube(1000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000);\necho\
    \ iscube(1000000000000000000000000000000000000000000000000000000000000);\necho\
    \ iscube(1000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpftljjgvq.php on line 63

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(1);\necho iscube(8);\n\
    echo iscube(64);\necho iscube(216);\necho iscube(512);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(343);\necho iscube(125);\necho iscube(1331);\necho\
    \ iscube(4096);\necho iscube(15625);\necho iscube(46656);\necho iscube(117649);\n\
    echo iscube(262144);\necho iscube(531441);\necho iscube(1000000);\necho iscube(1771561);\n\
    echo iscube(2985984);\necho iscube(4826809);\necho iscube(7529536);\necho iscube(11390625);\n\
    echo iscube(16777216);\necho iscube(24137569);\necho iscube(34012224);\necho iscube(47045881);\n\
    echo iscube(64000000);\necho iscube(85766121);\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111111111111111111111111\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpv1pb95m1.php:56\nStack trace:\n#0 /tmp/tmpv1pb95m1.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmpv1pb95m1.php on line 56\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return True;\n\
    \    }\n    $i++;\n  }\n  return False;\n}\n\necho iscube(8) . \"\\n\";\necho\
    \ iscube(27) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(125) . \"\\n\"\
    ;\necho iscube(216) . \"\\n\";\necho iscube(343) . \"\\n\";\necho iscube(1000)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp8rybxjml.php:31\nStack trace:\n#0 /tmp/tmp8rybxjml.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8rybxjml.php on line 31\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i <= $a) {\n        if ($i ** 3 == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(8);\necho\
    \ iscube(27);\necho iscube(64);\necho iscube(125);\necho iscube(216);\necho iscube(343);\n\
    echo iscube(512);\necho iscube(729);\necho iscube(1000);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm7glk4f.php:33\n\
    Stack trace:\n#0 /tmp/tmpwm7glk4f.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwm7glk4f.php\
    \ on line 33\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$c = sqrt($a);\n\
    \tif (is_int($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    \necho iscube(27);\necho iscube(28);\necho iscube(64);\necho iscube(65);\necho\
    \ iscube(216);\necho iscube(217);\necho iscube(729);\necho iscube(730);\necho\
    \ iscube(1000);\necho iscube(1001);\necho iscube(1000000);\necho iscube(1000001);\n\
    echo iscube(100000000);\necho iscube(100000001);\necho iscube(10000000000);\n\
    echo iscube(10000000001);\necho iscube(1000000000000);\necho iscube(1000000000001);\n\
    echo iscube(100000000000000);\necho iscube(100000000000001);\necho iscube(10000000000000000);\n\
    echo iscube(100000000000000001);\necho iscube(1000000000000000000);\necho iscube(1000000000000000001);\n\
    echo iscube(100000000000000000000);\necho iscube(100000000000000000001);\necho\
    \ iscube(10000000000000000000000);\necho iscube(10000000000000000000001);\necho\
    \ iscube(1000000000000000000000000);\necho iscube(1000000000000000000000001);\n\
    echo iscube(100000000000000000000000000);\necho iscube(100000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000);\necho iscube(10000000000000000000000000001);\n\
    echo iscube(1000000000000000000000000000000);\necho iscube(1000000000000000000000000000001);\n\
    echo iscube(100000000000000000000000000000000);\necho iscube(1000000000000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000001);\n\
    echo iscube(1000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000001);\n\
    echo iscube(100000000000000000000000000000000000000);\necho iscube(100000000000000000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000000000000000);\necho iscube(10000000000000000000000000000000000000001);\n\
    echo iscube(1000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000001);\n\
    echo iscube(100000000000000000000000000000000000000000000);\necho iscube(100000000000000000000000000000000000000000001);\n\
    echo iscube(10000000000000000000000000000000000000000000000);\necho\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_0k57vhv.php on line 67

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$cube = round(pow($a,\
    \ 1/3));\n\tif ($cube * $cube * $cube == $a) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(27); // true\necho iscube(64); // true\necho iscube(125);\
    \ // true\necho iscube(216); // true\necho iscube(1000); // false\necho iscube(2);\
    \ // false\necho iscube(9); // false\necho iscube(3); // false\necho iscube(22);\
    \ // false\necho iscube(8); // false\necho iscube(17); // false\necho iscube(15);\
    \ // false\necho iscube(24); // false\necho iscube(26); // false\necho iscube(19);\
    \ // false\necho iscube(20); // false\necho iscube(21); // false\necho iscube(23);\
    \ // false\necho iscube(25); // false\necho iscube(28); // false\necho iscube(29);\
    \ // false\necho iscube(30); // false\necho iscube(31); // false\necho iscube(32);\
    \ // false\necho iscube(33); // false\necho iscube(34); // false\necho iscube(35);\
    \ // false\necho iscube(36); // false\necho iscube(37); // false\necho iscube(38);\
    \ // false\necho iscube(39); // false\necho iscube(40); // false\necho iscube(41);\
    \ // false\necho iscube(42); // false\necho iscube(43); // false\necho iscube(44);\
    \ // false\necho iscube(45); // false\necho iscube(46); // false\necho iscube(47);\
    \ // false\necho iscube(48); // false\necho iscube(49); // false\necho iscube(50);\
    \ // false\necho iscube(51); // false\necho iscube(52); // false\necho iscube(53);\
    \ // false\necho iscube(54); // false\necho iscube(55); // false\necho iscube(56);\
    \ // false\necho iscube(57); // false\necho iscube(58); // false\necho iscube(59);\
    \ // false\necho iscube\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_xch5v40.php on line 66

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\\
    n\";\necho iscube(729) . \"\\n\";\necho iscube(1000) . \"\\n\";\necho iscube(1)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(-27) . \"\\n\";\necho iscube(-28)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n\n\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjf7b2zey.php:34\nStack trace:\n#0 /tmp/tmpjf7b2zey.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjf7b2zey.php on line 34\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = sqrt($a);\n\
    \    if (is_int($x)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_l2f9y9.php:20\n\
    Stack trace:\n#0 /tmp/tmpx_l2f9y9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx_l2f9y9.php\
    \ on line 20\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    return $c == floor($c);\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(64);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(343);\necho iscube(1000);\n\
    echo iscube(1000000);\necho iscube(100000000);\necho iscube(10000000000);\necho\
    \ iscube(1000000000000);\necho iscube(100000000000000);\necho iscube(10000000000000000);\n\
    echo iscube(1000000000000000000);\necho iscube(100000000000000000000);\necho iscube(10000000000000000000000);\n\
    echo iscube(1000000000000000000000000);\necho iscube(100000000000000000000000000);\n\
    echo iscube(10000000000000000000000000000);\necho iscube(1000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000);\necho\
    \ iscube(1000000000000000000000000000000000000000000000000000000000000);\necho\
    \ iscube(1000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111111111111111111111111111111111\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw0fp9okb.php:65\nStack trace:\n#0 /tmp/tmpw0fp9okb.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw0fp9okb.php on line 65\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(125) . \"\\\
    n\";\necho iscube(216) . \"\\n\";\necho iscube(512) . \"\\n\";\necho iscube(1000000)\
    \ . \"\\n\";\necho iscube(100000000) . \"\\n\";\necho iscube(10000000000) . \"\
    \\n\";\necho iscube(1000000000000) . \"\\n\";\necho iscube(100000000000000) .\
    \ \"\\n\";\necho iscube(10000000000000000) . \"\\n\";\necho iscube(1000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000) . \"\\n\";\necho iscube(10000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000) . \"\\n\";\necho iscube(100000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000000000000) . \"\\n\";\necho\
    \ iscube(10000000000000000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000000000000000) . \"\\n\";\n\
    echo iscube(100000000000000000000000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(10000000000000000000000000000000000000000000000) . \"\\n\";\n\
    echo iscube(10000000000000000000000000000000000000000000000000) . \"\\n\";\necho\
    \ iscube(100000000000000000000000000000000000000000000000000) . \"\\n\";\necho\
    \ iscube(10000000000000000000000000000000000000000000000000000) . \"\\n\";\necho\
    \ iscube(1000000000000000000000000000000000000000000000000000000) . \"\\n\";\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000) . \"\\\
    n\";\necho iscube(10000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpydg4ghjt.php on line 55

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnu3rlbn.php:26\n\
    Stack trace:\n#0 /tmp/tmpfnu3rlbn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfnu3rlbn.php\
    \ on line 26\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $cube = round(pow($a,\
    \ 1/3));\n  return $cube * $cube * $cube == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfr6t9tcd.php:18\n\
    Stack trace:\n#0 /tmp/tmpfr6t9tcd.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfr6t9tcd.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(64);\necho iscube(125);\necho\
    \ iscube(216);\necho iscube(343);\necho iscube(512);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(1331);\necho iscube(1728);\necho iscube(2197);\n\
    echo iscube(2744);\necho iscube(3375);\necho iscube(4096);\necho iscube(4913);\n\
    echo iscube(5832);\necho iscube(6859);\necho iscube(8000);\necho iscube(9261);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaay0qwdw.php:44\n\
    Stack trace:\n#0 /tmp/tmpaay0qwdw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpaay0qwdw.php\
    \ on line 44\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$b = sqrt($a);\n\
    \tif ($b == round($b)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho iscube(27);\necho iscube(28);\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpq3lngc.php:24\n\
    Stack trace:\n#0 /tmp/tmpfpq3lngc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfpq3lngc.php\
    \ on line 24\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(729);\necho iscube(1);\necho iscube(0);\necho iscube(-27);\necho iscube(-28);\n\
    echo iscube(-125);\necho iscube(-216);\necho iscube(-729);\necho iscube(-1);\n\
    echo iscube(-0);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzc_mb8i.php:38\n\
    Stack trace:\n#0 /tmp/tmpbzc_mb8i.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbzc_mb8i.php\
    \ on line 38\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = $b * $b * $b;\n    if ($c == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps27q9gpq.php:23\n\
    Stack trace:\n#0 /tmp/tmps27q9gpq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps27q9gpq.php\
    \ on line 23\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(8) . \"\\n\"; // false\n\
    echo iscube(27) . \"\\n\"; // true\necho iscube(64) . \"\\n\"; // true\necho iscube(125)\
    \ . \"\\n\"; // true\necho iscube(216) . \"\\n\"; // false\necho iscube(343) .\
    \ \"\\n\"; // true\necho iscube(1000) . \"\\n\"; // false\necho iscube(1000000)\
    \ . \"\\n\"; // true\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpv2dmya4j.php:32\nStack trace:\n#0 /tmp/tmpv2dmya4j.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmpv2dmya4j.php on line 32\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\\
    n\";\necho iscube(729) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(-27) . \"\\n\";\necho iscube(-64)\
    \ . \"\\n\";\necho iscube(-125) . \"\\n\";\necho iscube(-216) . \"\\n\";\necho\
    \ iscube(-729) . \"\\n\";\necho iscube(-1000) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpkirnqz9n.php:38\nStack trace:\n#0 /tmp/tmpkirnqz9n.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkirnqz9n.php on line 38\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $x = 1;\n\
    \    while ($x * $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x ==\
    \ $a) {\n        return True;\n    } else {\n        return False;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprf9qptt9.php:25\n\
    Stack trace:\n#0 /tmp/tmprf9qptt9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprf9qptt9.php\
    \ on line 25\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $root = round(pow($a,\
    \ 1/3));\n  return $root * $root * $root == $a;\n}\n\necho iscube(27); // true\n\
    echo iscube(64); // true\necho iscube(125); // true\necho iscube(1000); // false\n\
    echo iscube(0); // true\necho iscube(1); // true\necho iscube(8); // false\necho\
    \ iscube(9); // true\necho iscube(10); // false\necho iscube(11); // false\necho\
    \ iscube(12); // false\necho iscube(13); // false\necho iscube(14); // false\n\
    echo iscube(15); // false\necho iscube(16); // true\necho iscube(17); // false\n\
    echo iscube(18); // false\necho iscube(19); // false\necho iscube(20); // false\n\
    echo iscube(21); // false\necho iscube(22); // false\necho iscube(23); // false\n\
    echo iscube(24); // false\necho iscube(25); // true\necho iscube(26); // false\n\
    echo iscube(27); // true\necho iscube(28); // false\necho iscube(29); // false\n\
    echo iscube(30); // false\necho iscube(31); // false\necho iscube(32); // true\n\
    echo iscube(33); // false\necho iscube(34); // false\necho iscube(35); // false\n\
    echo iscube(36); // false\necho iscube(37); // false\necho iscube(38); // false\n\
    echo iscube(39); // false\necho iscube(40); // false\necho iscube(41); // false\n\
    echo iscube(42); // false\necho iscube(43); // false\necho iscube(44); // false\n\
    echo iscube(45); // false\necho iscube(46); // false\necho iscube(47); // false\n\
    echo iscube(48); // false\necho iscube(49); // true\necho iscube(50); // false\n\
    echo iscube(51); // false\necho iscube(52); // false\necho iscube(53); // false\n\
    echo iscube(54); // false\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdf9kyjax.php:72\n\
    Stack trace:\n#0 /tmp/tmpdf9kyjax.php(80): test()\n#1 {main}\n  thrown in /tmp/tmpdf9kyjax.php\
    \ on line 72\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbv3te1u0.php:20\n\
    Stack trace:\n#0 /tmp/tmpbv3te1u0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbv3te1u0.php\
    \ on line 20\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8); // true\necho iscube(27); // true\necho\
    \ iscube(64); // true\necho iscube(65); // false\necho iscube(216); // true\n\
    echo iscube(1000); // false\necho iscube(1); // true\necho iscube(125); // true\n\
    echo iscube(3); // false\necho iscube(-27); // true\necho iscube(-125); // true\n\
    echo iscube(-1); // true\necho iscube(0); // true\necho iscube(1.0); // true\n\
    echo iscube(125.0); // true\necho iscube(216.0); // true\necho iscube(1000.0);\
    \ // false\necho iscube(3.0); // false\necho iscube(1.5); // false\necho iscube(125.1);\
    \ // false\necho iscube(216.5); // false\necho iscube(1000.9); // false\necho\
    \ iscube(3.14); // false\necho iscube(1.56); // false\necho iscube(125.12); //\
    \ false\necho iscube(216.54); // false\necho iscube(1000.98); // false\necho iscube(3.141);\
    \ // false\necho iscube(1.567); // false\necho iscube(125.123); // false\necho\
    \ iscube(216.547); // false\necho iscube(1000.987); // false\necho iscube(3.1415);\
    \ // false\necho iscube(1.5678); // false\necho iscube(125.1234); // false\necho\
    \ iscube(216.5478); // false\necho iscube(1000.9876); // false\necho iscube(3.14159);\
    \ // false\necho iscube(1.56789); // false\necho iscube(125.12345); // false\n\
    echo iscube(216.54789); // false\necho iscube(1000.98765); // false\necho iscube(3.141592);\
    \ // false\necho iscube(1.\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpt7dloixw.php on line 59

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $x = sqrt($a);\n\
    \  return $x == round($x);\n}\n\necho iscube(8) . \"\\n\"; // True\necho iscube(27)\
    \ . \"\\n\"; // True\necho iscube(64) . \"\\n\"; // True\necho iscube(65) . \"\
    \\n\"; // False\necho iscube(216) . \"\\n\"; // True\necho iscube(1000) . \"\\\
    n\"; // False\necho iscube(1) . \"\\n\"; // True\necho iscube(0) . \"\\n\"; //\
    \ True\necho iscube(-1) . \"\\n\"; // False\necho iscube(-8) . \"\\n\"; // False\n\
    echo iscube(-27) . \"\\n\"; // False\necho iscube(-64) . \"\\n\"; // False\necho\
    \ iscube(-125) . \"\\n\"; // False\necho iscube(-216) . \"\\n\"; // False\necho\
    \ iscube(-1000) . \"\\n\"; // False\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n\n\n1\n1\n\n\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpscxav5cw.php:33\nStack trace:\n#0 /tmp/tmpscxav5cw.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpscxav5cw.php on line 33\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if ($b == round($b)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8) . \"\\n\";\necho iscube(27) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\
    \\n\";\necho iscube(1000) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(3)\
    \ . \"\\n\";\necho iscube(9) . \"\\n\";\necho iscube(15) . \"\\n\";\necho iscube(17)\
    \ . \"\\n\";\necho iscube(18) . \"\\n\";\necho iscube(19) . \"\\n\";\necho iscube(21)\
    \ . \"\\n\";\necho iscube(22) . \"\\n\";\necho iscube(23) . \"\\n\";\necho iscube(24)\
    \ . \"\\n\";\necho iscube(25) . \"\\n\";\necho iscube(26) . \"\\n\";\necho iscube(28)\
    \ . \"\\n\";\necho iscube(29) . \"\\n\";\necho iscube(30) . \"\\n\";\necho iscube(31)\
    \ . \"\\n\";\necho iscube(32) . \"\\n\";\necho iscube(33) . \"\\n\";\necho iscube(34)\
    \ . \"\\n\";\necho iscube(35) . \"\\n\";\necho iscube(36) . \"\\n\";\necho iscube(37)\
    \ . \"\\n\";\necho iscube(38) . \"\\n\";\necho iscube(39) . \"\\n\";\necho iscube(40)\
    \ . \"\\n\";\necho iscube(41) . \"\\n\";\necho iscube(42) . \"\\n\";\necho iscube(43)\
    \ . \"\\n\";\necho iscube(44) . \"\\n\";\necho iscube(45) . \"\\n\";\necho iscube(46)\
    \ . \"\\n\";\necho iscube(47) . \"\\n\";\necho iscube(48) . \"\\n\";\necho iscube(49)\
    \ . \"\\n\";\necho iscube(50) . \"\\n\";\necho iscube(51) .\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwvyp_n9q.php on line 58

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(1);\necho iscube(0);\necho iscube(-1);\necho iscube(-27);\necho iscube(-125);\n\
    echo iscube(-216);\necho iscube(-729);\necho iscube(-1000);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81oxbuh3.php:38\n\
    Stack trace:\n#0 /tmp/tmp81oxbuh3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp81oxbuh3.php\
    \ on line 38\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return True;\n\
    \    }\n    $i++;\n  }\n  return False;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcl_e31r.php:24\n\
    Stack trace:\n#0 /tmp/tmpzcl_e31r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzcl_e31r.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(729);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\necho iscube(-1);\n\
    echo iscube(-27);\necho iscube(-64);\necho iscube(-125);\necho iscube(-216);\n\
    echo iscube(-729);\necho iscube(-1000);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpluxu4_r8.php:39\n\
    Stack trace:\n#0 /tmp/tmpluxu4_r8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpluxu4_r8.php\
    \ on line 39\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(64) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\\
    n\";\necho iscube(512) . \"\\n\";\necho iscube(729) . \"\\n\";\necho iscube(1000)\
    \ . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(1000000)\
    \ . \"\\n\";\necho iscube(123456789) . \"\\n\";\necho iscube(987654321) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(3) . \"\\n\";\necho iscube(4) . \"\
    \\n\";\necho iscube(5) . \"\\n\";\necho iscube(6) . \"\\n\";\necho iscube(7) .\
    \ \"\\n\";\necho iscube(8) . \"\\n\";\necho iscube(9) . \"\\n\";\necho iscube(10)\
    \ . \"\\n\";\necho iscube(11) . \"\\n\";\necho iscube(12) . \"\\n\";\necho iscube(13)\
    \ . \"\\n\";\necho iscube(14) . \"\\n\";\necho iscube(15) . \"\\n\";\necho iscube(16)\
    \ . \"\\n\";\necho iscube(17) . \"\\n\";\necho iscube(18) . \"\\n\";\necho iscube(19)\
    \ . \"\\n\";\necho iscube(20) . \"\\n\";\necho iscube(21) . \"\\n\";\necho iscube(22)\
    \ . \"\\n\";\necho iscube(23) . \"\\n\";\necho iscube(24) . \"\\n\";\necho iscube(25)\
    \ . \"\\n\";\necho iscube(26) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(29)\
    \ . \"\\n\";\necho iscube(30) . \"\\n\";\necho iscube(31) . \"\\n\";\necho iscube(32)\
    \ . \"\\n\";\necho iscube(33) . \"\\\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8skhkm5h.php on line 59

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(27); // true\necho iscube(8); // false\necho iscube(64);\
    \ // true\necho iscube(0); // true\necho iscube(1); // true\necho iscube(125);\
    \ // true\necho iscube(216); // true\necho iscube(1000); // false\necho iscube(1000000);\
    \ // true\necho iscube(10000000000); // true\necho iscube(10000000000000); //\
    \ true\necho iscube(1000000000000000000); // true\necho iscube(1000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000); // true\necho iscube(1000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000); // true\n\
    echo iscube(1000000000000000000000000000000000000000000000); // true\necho iscube(1000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\
    \ // true\necho iscube(10000000000000000\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsxt2q_8q.php on line 50

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(1) . \"\\n\";\n\
    echo iscube(8) . \"\\n\";\necho iscube(9) . \"\\n\";\necho iscube(10) . \"\\n\"\
    ;\necho iscube(125) . \"\\n\";\necho iscube(216) . \"\\n\";\necho iscube(512)\
    \ . \"\\n\";\necho iscube(1000) . \"\\n\";\necho iscube(10000) . \"\\n\";\necho\
    \ iscube(100000) . \"\\n\";\necho iscube(1000000) . \"\\n\";\necho iscube(10000000)\
    \ . \"\\n\";\necho iscube(100000000) . \"\\n\";\necho iscube(1000000000) . \"\\\
    n\";\necho iscube(10000000000) . \"\\n\";\necho iscube(100000000000) . \"\\n\"\
    ;\necho iscube(1000000000000) . \"\\n\";\necho iscube(10000000000000) . \"\\n\"\
    ;\necho iscube(100000000000000) . \"\\n\";\necho iscube(1000000000000000) . \"\
    \\n\";\necho iscube(10000000000000000) . \"\\n\";\necho iscube(100000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000) . \"\\n\";\necho iscube(10000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000) . \"\\n\";\necho iscube(100000000000000000000000)\
    \ . \"\\n\";\necho iscube(1000000000000000000000000) . \"\\n\";\necho iscube(10000000000000000000000000)\
    \ . \"\\n\";\necho iscube(100000000000000000000000000) . \"\\n\";\necho iscube(1000000000000000000000000000)\
    \ . \"\\n\";\necho iscube(10000000000000000000000000000) . \"\\n\";\necho iscube(\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp5tvaaij_.php on line 54

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $c = round(pow($a,\
    \ 1/3));\n  return $c * $c * $c == $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wd8stw0.php:18\n\
    Stack trace:\n#0 /tmp/tmp3wd8stw0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3wd8stw0.php\
    \ on line 18\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgoyolts.php:18\n\
    Stack trace:\n#0 /tmp/tmpmgoyolts.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmgoyolts.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = $b * $b * $b;\n    if ($c == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps27q9gpq.php:23\n\
    Stack trace:\n#0 /tmp/tmps27q9gpq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps27q9gpq.php\
    \ on line 23\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(8); // false\necho iscube(27);\
    \ // true\necho iscube(64); // true\necho iscube(125); // true\necho iscube(216);\
    \ // false\necho iscube(343); // true\necho iscube(512); // false\necho iscube(729);\
    \ // true\necho iscube(1000); // false\necho iscube(1331); // true\necho iscube(1728);\
    \ // true\necho iscube(2197); // true\necho iscube(2744); // false\necho iscube(3375);\
    \ // true\necho iscube(4096); // true\necho iscube(4913); // true\necho iscube(5832);\
    \ // false\necho iscube(6859); // true\necho iscube(8000); // true\necho iscube(9261);\
    \ // true\necho iscube(10648); // true\necho iscube(12167); // true\necho iscube(13824);\
    \ // false\necho iscube(15625); // true\necho iscube(17576); // true\necho iscube(19683);\
    \ // true\necho iscube(21952); // false\necho iscube(24389); // true\necho iscube(27000);\
    \ // true\necho iscube(29791); // true\necho iscube(32768); // true\necho iscube(35937);\
    \ // true\necho iscube(39304); // false\necho iscube(42875); // true\necho iscube(46656);\
    \ // true\necho iscube(50653); // true\necho iscube(54872); // false\necho iscube(59319);\
    \ // true\necho iscube(64000); // true\necho iscube(68921); // true\necho iscube(74088);\
    \ // false\necho iscube(79507); // true\necho iscube(85184); // true\necho iscube(91125);\
    \ // true\necho iscube(97336); // false\necho iscube(103823\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj4gvybcl.php on line 63

    '
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    if ($cube * $cube * $cube == $a) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\necho iscube(27) . PHP_EOL;\n\
    echo iscube(28) . PHP_EOL;\necho iscube(125) . PHP_EOL;\necho iscube(1) . PHP_EOL;\n\
    echo iscube(8) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(216) . PHP_EOL;\n\
    echo iscube(512) . PHP_EOL;\necho iscube(729) . PHP_EOL;\necho iscube(1000) .\
    \ PHP_EOL;\necho iscube(10000) . PHP_EOL;\necho iscube(100000) . PHP_EOL;\necho\
    \ iscube(1000000) . PHP_EOL;\necho iscube(10000000) . PHP_EOL;\necho iscube(100000000)\
    \ . PHP_EOL;\necho iscube(1000000000) . PHP_EOL;\necho iscube(10000000000) . PHP_EOL;\n\
    echo iscube(100000000000) . PHP_EOL;\necho iscube(1000000000000) . PHP_EOL;\n\
    echo iscube(10000000000000) . PHP_EOL;\necho iscube(100000000000000) . PHP_EOL;\n\
    echo iscube(1000000000000000) . PHP_EOL;\necho iscube(10000000000000000) . PHP_EOL;\n\
    echo iscube(100000000000000000) . PHP_EOL;\necho iscube(1000000000000000000) .\
    \ PHP_EOL;\necho iscube(10000000000000000000) . PHP_EOL;\necho iscube(100000000000000000000)\
    \ . PHP_EOL;\necho iscube(1000000000000000000000) . PHP_EOL;\necho iscube(10000000000000000000000)\
    \ . PHP_EOL;\necho iscube(100000000000000000000000) . PHP_EOL;\necho iscube(1000000000000000000000000)\
    \ . PHP_EOL;\necho iscube(10000000000000000000000000) . PHP_EOL;\necho iscube\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp28b0gyld.php on line 48

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(512);\necho iscube(1000000);\n\
    echo iscube(1000000000);\necho iscube(1000000000000);\necho iscube(1000000000000000);\n\
    echo iscube(1000000000000000000);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujns2ehl.php:34\n\
    Stack trace:\n#0 /tmp/tmpujns2ehl.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpujns2ehl.php\
    \ on line 34\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $b = 1;\n\
    \  while ($b * $b * $b < $a) {\n    $b++;\n  }\n  return $b * $b * $b == $a;\n\
    }\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(512);\necho iscube(1000000);\necho iscube(1000000000);\necho iscube(1000000000000);\n\
    echo iscube(1000000000000000);\necho iscube(1000000000000000000);\necho iscube(1000000000000000000000);\n\
    echo iscube(1000000000000000000000000);\necho iscube(1000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000);\necho iscube(1000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\n\
    echo iscube(1000000000000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnkrbuamy.php on line 56

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $root =\
    \ pow($a, 1/3);\n    return is_int($root);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2sk7iph0.php:16\n\
    Stack trace:\n#0 /tmp/tmp2sk7iph0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp2sk7iph0.php\
    \ on line 16\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(8);\necho iscube(27);\necho iscube(64);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(343);\necho iscube(512);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(1331);\necho iscube(1728);\necho iscube(2197);\necho iscube(2744);\n\
    echo iscube(3375);\necho iscube(4096);\necho iscube(4913);\necho iscube(5832);\n\
    echo iscube(6859);\necho iscube(8000);\necho iscube(9261);\necho iscube(10648);\n\
    echo iscube(12167);\necho iscube(13824);\necho iscube(15625);\necho iscube(17576);\n\
    echo iscube(19683);\necho iscube(21952);\necho iscube(24389);\necho iscube(27000);\n\
    echo iscube(29791);\necho iscube(32768);\necho iscube(35937);\necho iscube(39304);\n\
    echo iscube(42875);\necho iscube(46656);\necho iscube(50653);\necho iscube(54872);\n\
    echo iscube(59319);\necho iscube(64000);\necho iscube(68921);\necho iscube(74088);\n\
    echo iscube(79507);\necho iscube(85184);\necho iscube(91125);\necho iscube(97336);\n\
    echo iscube(103823);\necho iscube(110592);\necho iscube(117649);\necho iscube(125000);\n\
    echo iscube(132651);\necho iscube(140608);\necho iscube(148877);\necho iscube(157464);\n\
    echo iscube(166375);\necho iscube(175616);\necho iscube(185193);\necho iscube\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwvrpygei.php on line 74

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(125) . \"\\\
    n\";\necho iscube(216) . \"\\n\";\necho iscube(512) . \"\\n\";\necho iscube(1000000)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4gpovlh.php:30\n\
    Stack trace:\n#0 /tmp/tmps4gpovlh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmps4gpovlh.php\
    \ on line 30\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(729);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\necho iscube(-1);\n\
    echo iscube(-27);\necho iscube(-64);\necho iscube(-125);\necho iscube(-216);\n\
    echo iscube(-729);\necho iscube(-1000);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpluxu4_r8.php:39\n\
    Stack trace:\n#0 /tmp/tmpluxu4_r8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpluxu4_r8.php\
    \ on line 39\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $cube = 1;\n\
    \  while ($cube < $a) {\n    $cube = $cube * 3;\n  }\n  if ($cube == $a) {\n \
    \   return true;\n  } else {\n    return false;\n  }\n}\n\necho iscube(27);\n\
    echo iscube(28);\necho iscube(8);\necho iscube(9);\necho iscube(1);\necho iscube(2);\n\
    echo iscube(3);\necho iscube(4);\necho iscube(5);\necho iscube(6);\necho iscube(7);\n\
    echo iscube(8);\necho iscube(9);\necho iscube(10);\necho iscube(11);\necho iscube(12);\n\
    echo iscube(13);\necho iscube(14);\necho iscube(15);\necho iscube(16);\necho iscube(17);\n\
    echo iscube(18);\necho iscube(19);\necho iscube(20);\necho iscube(21);\necho iscube(22);\n\
    echo iscube(23);\necho iscube(24);\necho iscube(25);\necho iscube(26);\necho iscube(27);\n\
    echo iscube(28);\necho iscube(29);\necho iscube(30);\necho iscube(31);\necho iscube(32);\n\
    echo iscube(33);\necho iscube(34);\necho iscube(35);\necho iscube(36);\necho iscube(37);\n\
    echo iscube(38);\necho iscube(39);\necho iscube(40);\necho iscube(41);\necho iscube(42);\n\
    echo iscube(43);\necho iscube(44);\necho iscube(45);\necho iscube(46);\necho iscube(47);\n\
    echo iscube(48);\necho iscube(49);\necho iscube(50);\necho iscube(51);\necho iscube(52);\n\
    echo iscube(53);\necho iscube(54);\necho iscube(55);\necho iscube(56);\necho iscube(57);\n\
    echo iscube(58);\necho iscube(59);\necho iscube(60);\necho is\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptjpr7enb.php on line 83

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    if ($cube * $cube * $cube == $a) {\n        return\
    \ true;\n    }\n    return false;\n}\n\necho iscube(27) . PHP_EOL;\necho iscube(28)\
    \ . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(8) . PHP_EOL;\necho iscube(125)\
    \ . PHP_EOL;\necho iscube(216) . PHP_EOL;\necho iscube(729) . PHP_EOL;\necho iscube(1000)\
    \ . PHP_EOL;\necho iscube(2197) . PHP_EOL;\necho iscube(3375) . PHP_EOL;\necho\
    \ iscube(8000) . PHP_EOL;\necho iscube(9261) . PHP_EOL;\necho iscube(13832) .\
    \ PHP_EOL;\necho iscube(27000) . PHP_EOL;\necho iscube(50653) . PHP_EOL;\necho\
    \ iscube(93312) . PHP_EOL;\necho iscube(157464) . PHP_EOL;\necho iscube(175616)\
    \ . PHP_EOL;\necho iscube(214000) . PHP_EOL;\necho iscube(359372) . PHP_EOL;\n\
    echo iscube(458344) . PHP_EOL;\necho iscube(551368) . PHP_EOL;\necho iscube(704969)\
    \ . PHP_EOL;\necho iscube(968300) . PHP_EOL;\necho iscube(1046527) . PHP_EOL;\n\
    echo iscube(1352262) . PHP_EOL;\necho iscube(1940449) . PHP_EOL;\necho iscube(2024200)\
    \ . PHP_EOL;\necho iscube(2146689) . PHP_EOL;\necho iscube(2433614) . PHP_EOL;\n\
    echo iscube(2825761) . PHP_EOL;\necho iscube(3088000) . PHP_EOL;\necho iscube(3579139)\
    \ .\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjcna0m2p.php on line 47

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(8);\necho iscube(9);\necho iscube(10);\n\
    echo iscube(11);\necho iscube(12);\necho iscube(13);\necho iscube(14);\necho iscube(15);\n\
    echo iscube(16);\necho iscube(17);\necho iscube(18);\necho iscube(19);\necho iscube(20);\n\
    echo iscube(21);\necho iscube(22);\necho iscube(23);\necho iscube(24);\necho iscube(25);\n\
    echo iscube(26);\necho iscube(27);\necho iscube(28);\necho iscube(29);\necho iscube(30);\n\
    echo iscube(31);\necho iscube(32);\necho iscube(33);\necho iscube(34);\necho iscube(35);\n\
    echo iscube(36);\necho iscube(37);\necho iscube(38);\necho iscube(39);\necho iscube(40);\n\
    echo iscube(41);\necho iscube(42);\necho iscube(43);\necho iscube(44);\necho iscube(45);\n\
    echo iscube(46);\necho iscube(47);\necho iscube(48);\necho iscube(49);\necho iscube(50);\n\
    echo iscube(51);\necho iscube(52);\necho iscube(53);\necho iscube(54);\necho iscube(55);\n\
    echo iscube(56);\necho iscube(57);\necho iscube(58);\necho iscube(59);\necho iscube(60);\n\
    echo iscube(61);\necho iscube(62);\necho iscube(63);\necho iscube(64);\necho iscube(65);\n\
    echo iscube(66);\necho iscube(67);\necho iscube(68);\necho iscube(69);\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiljlorm8.php:89\n\
    Stack trace:\n#0 /tmp/tmpiljlorm8.php(97): test()\n#1 {main}\n  thrown in /tmp/tmpiljlorm8.php\
    \ on line 89\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\necho iscube(27);\n\
    echo iscube(28);\necho iscube(125);\necho iscube(1);\necho iscube(8);\necho iscube(64);\n\
    echo iscube(216);\necho iscube(512);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(1000000);\necho iscube(10000000000);\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3617belc.php:31\n\
    Stack trace:\n#0 /tmp/tmp3617belc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3617belc.php\
    \ on line 31\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    return\
    \ is_numeric(pow($a, 1/3));\n}\n\necho iscube(27) . \"\\n\"; // True\necho iscube(28)\
    \ . \"\\n\"; // False\necho iscube(0) . \"\\n\"; // True\necho iscube(1) . \"\\\
    n\"; // True\necho iscube(8) . \"\\n\"; // False\necho iscube(64) . \"\\n\"; //\
    \ True\necho iscube(216) . \"\\n\"; // True\necho iscube(512) . \"\\n\"; // True\n\
    echo iscube(729) . \"\\n\"; // True\necho iscube(1000) . \"\\n\"; // False\necho\
    \ iscube(1000000) . \"\\n\"; // True\necho iscube(10000000000) . \"\\n\"; // True\n\
    echo iscube(100000000000) . \"\\n\"; // False\necho iscube(1000000000000) . \"\
    \\n\"; // True\necho iscube(10000000000000) . \"\\n\"; // False\necho iscube(100000000000000)\
    \ . \"\\n\"; // True\necho iscube(1000000000000000) . \"\\n\"; // False\necho\
    \ iscube(10000000000000000) . \"\\n\"; // True\necho iscube(100000000000000000)\
    \ . \"\\n\"; // False\necho iscube(1000000000000000000) . \"\\n\"; // True\necho\
    \ iscube(10000000000000000000) . \"\\n\"; // False\necho iscube(100000000000000000000)\
    \ . \"\\n\"; // True\necho iscube(1000000000000000000000) . \"\\n\"; // False\n\
    echo iscube(10000000000000000000000) . \"\\n\"; // True\necho iscube(100000000000000000000000)\
    \ . \"\\n\"; // False\necho iscube(1000000000000000000000000) . \"\\n\"; // True\n\
    echo iscube(10000000000000000000000000) . \"\\n\"; // False\necho iscube(100000000000000000000000000)\
    \ . \"\\n\"; // True\necho iscube(1000000000000000000000000000) . \"\\n\"; //\
    \ False\necho iscube(10000000000000000000000000000) . \"\\n\"; // True\necho iscube(100000000000000000000000000000)\
    \ . \"\\n\"; // False\necho iscube(1000000000000000000000000000000) . \"\\n\"\
    ; // True\necho iscube(10000000000000000000000000000000) . \"\\n\"; // False\n\
    echo iscube(100000000000000000000000000000000) . \"\\\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkvsfeg2s.php on line 49

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = pow($b, 3);\n    if ($c == $a) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\necho iscube(27);\necho iscube(28);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcthk1z_3.php:24\n\
    Stack trace:\n#0 /tmp/tmpcthk1z_3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcthk1z_3.php\
    \ on line 24\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = round($b);\n    if ($b == $c) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_eb3smw1.php:23\n\
    Stack trace:\n#0 /tmp/tmp_eb3smw1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_eb3smw1.php\
    \ on line 23\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $a = pow($a,\
    \ 1/3);\n    if (is_int($a)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bfm6vgi.php:22\n\
    Stack trace:\n#0 /tmp/tmp_bfm6vgi.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_bfm6vgi.php\
    \ on line 22\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    return\
    \ is_numeric(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_u7maql_.php:16\n\
    Stack trace:\n#0 /tmp/tmp_u7maql_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_u7maql_.php\
    \ on line 16\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 0;\n\
    \    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    return $i * $i * $i\
    \ == $a;\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(256);\n\
    echo iscube(0);\necho iscube(1);\necho iscube(8);\necho iscube(9);\necho iscube(10);\n\
    echo iscube(125);\necho iscube(216);\necho iscube(512);\necho iscube(729);\necho\
    \ iscube(1000);\necho iscube(343);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(729);\necho iscube(1000);\necho iscube(1000000);\necho iscube(15625);\n\
    echo iscube(17576);\necho iscube(19683);\necho iscube(21952);\necho iscube(24389);\n\
    echo iscube(27000);\necho iscube(29791);\necho iscube(32768);\necho iscube(35937);\n\
    echo iscube(39304);\necho iscube(42875);\necho iscube(46656);\necho iscube(50653);\n\
    echo iscube(54872);\necho iscube(59319);\necho iscube(64000);\necho iscube(68921);\n\
    echo iscube(74088);\necho iscube(79507);\necho iscube(85184);\necho iscube(91125);\n\
    echo iscube(97336);\necho iscube(103823);\necho iscube(110592);\necho iscube(117649);\n\
    echo iscube(125000);\necho iscube(132651);\necho iscube(140608);\necho iscube(148877);\n\
    echo iscube(157464);\necho iscube(166375);\necho iscube(175616);\necho iscube(185193);\n\
    echo iscube(195112);\necho iscube(205379);\necho iscube(216000);\necho iscube(226981);\n\
    echo iscube(238328);\necho iscube(250047);\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111111111111111111111111111111111111111111111111\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp17y9soy0.php:80\nStack trace:\n#0 /tmp/tmp17y9soy0.php(88):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp17y9soy0.php on line 80\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = $a;\n\
    \    while ($b > 0) {\n        if ($b % 3 == 0) {\n            return true;\n\
    \        }\n        $b--;\n    }\n    return false;\n}\n\necho iscube(27);\necho\
    \ iscube(28);\necho iscube(29);\necho iscube(30);\necho iscube(31);\necho iscube(32);\n\
    echo iscube(33);\necho iscube(34);\necho iscube(35);\necho iscube(36);\necho iscube(37);\n\
    echo iscube(38);\necho iscube(39);\necho iscube(40);\necho iscube(41);\necho iscube(42);\n\
    echo iscube(43);\necho iscube(44);\necho iscube(45);\necho iscube(46);\necho iscube(47);\n\
    echo iscube(48);\necho iscube(49);\necho iscube(50);\necho iscube(51);\necho iscube(52);\n\
    echo iscube(53);\necho iscube(54);\necho iscube(55);\necho iscube(56);\necho iscube(57);\n\
    echo iscube(58);\necho iscube(59);\necho iscube(60);\necho iscube(61);\necho iscube(62);\n\
    echo iscube(63);\necho iscube(64);\necho iscube(65);\necho iscube(66);\necho iscube(67);\n\
    echo iscube(68);\necho iscube(69);\necho iscube(70);\necho iscube(71);\necho iscube(72);\n\
    echo iscube(73);\necho iscube(74);\necho iscube(75);\necho iscube(76);\necho iscube(77);\n\
    echo iscube(78);\necho iscube(79);\necho iscube(80);\necho iscube(81);\necho iscube(82);\n\
    echo iscube(83);\necho iscube(84);\necho iscube(85);\necho iscube(86);\necho iscube(87);\n\
    echo iscube(88);\necho iscube(89);\necho iscube(90);\necho iscube(91);\necho iscube\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvjzi2h9g.php on line 83

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    return\
    \ is_numeric(pow($a, 1/3));\n}\n\necho iscube(8) . \"<br>\"; // true\necho iscube(27)\
    \ . \"<br>\"; // true\necho iscube(64) . \"<br>\"; // true\necho iscube(26) .\
    \ \"<br>\"; // false\necho iscube(17) . \"<br>\"; // false\necho iscube(116) .\
    \ \"<br>\"; // false\necho iscube(9) . \"<br>\"; // true\necho iscube(1) . \"\
    <br>\"; // true\necho iscube(125) . \"<br>\"; // true\necho iscube(216) . \"<br>\"\
    ; // true\necho iscube(343) . \"<br>\"; // true\necho iscube(1000) . \"<br>\"\
    ; // true\necho iscube(0) . \"<br>\"; // true\necho iscube(1000000) . \"<br>\"\
    ; // true\necho iscube(10000000000) . \"<br>\"; // true\necho iscube(10000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000) . \"<br>\"; // true\n\
    echo iscube(1000000000000000000000) . \"<br>\"; // true\necho iscube(1000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000) . \"<br>\"; //\
    \ true\necho iscube(1000000000000000000000000000000) . \"<br>\"; // true\necho\
    \ iscube(1000000000000000000000000000000000) . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000) .\
    \ \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000)\
    \ . \"<br>\"; // true\necho\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpziuftmj4.php on line 42

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $b = 1;\n\
    \  while ($b * $b * $b < $a) {\n    $b++;\n  }\n  return $b * $b * $b == $a;\n\
    }\n\necho iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(126);\n\
    echo iscube(1);\necho iscube(0);\necho iscube(-1);\necho iscube(-8);\necho iscube(-27);\n\
    echo iscube(-64);\necho iscube(-125);\necho iscube(-216);\necho iscube(-1000);\n\
    echo iscube(-343);\necho iscube(-125);\necho iscube(-1000);\necho iscube(-343);\n\
    echo iscube(-125);\necho iscube(-1000);\necho iscube(-343);\necho iscube(-125);\n\
    echo iscube(-1000);\necho iscube(-343);\necho iscube(-125);\necho iscube(-1000);\n\
    echo iscube(-343);\necho iscube(-125);\necho iscube(-1000);\necho iscube(-343);\n\
    echo iscube(-125);\necho iscube(-1000);\necho iscube(-343);\necho iscube(-125);\n\
    echo iscube(-1000);\necho iscube(-343);\necho iscube(-125);\necho iscube(-1000);\n\
    echo iscube(-343);\necho iscube(-125);\necho iscube(-1000);\necho iscube(-343);\n\
    echo iscube(-125);\necho iscube(-1000);\necho iscube(-343);\necho iscube(-125);\n\
    echo iscube(-1000);\necho iscube(-343);\necho iscube(-125);\necho iscube(-1000);\n\
    echo iscube(-343);\necho iscube(-125);\necho iscube(-1000);\necho iscube(-343);\n\
    echo iscube(-125);\necho iscube(-1000);\necho iscube(-343);\necho iscube(-125);\n\
    echo iscube(-1000);\necho iscube(-343);\necho iscube(-125);\necho iscube(-1000);\n\
    echo iscube(-343);\necho iscube(-125);\necho iscube(-1000);\necho iscube(-343);\n\
    echo iscube(-125);\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_om83a2.php:88\n\
    Stack trace:\n#0 /tmp/tmpb_om83a2.php(96): test()\n#1 {main}\n  thrown in /tmp/tmpb_om83a2.php\
    \ on line 88\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n\t$cube = round(pow($a,\
    \ 1/3));\n\treturn $cube * $cube * $cube == $a;\n}\necho iscube(8);\necho iscube(27);\n\
    echo iscube(64);\necho iscube(125);\necho iscube(216);\necho iscube(343);\necho\
    \ iscube(1000);\necho iscube(1);\necho iscube(3);\necho iscube(9);\necho iscube(15);\n\
    echo iscube(17);\necho iscube(18);\necho iscube(19);\necho iscube(21);\necho iscube(22);\n\
    echo iscube(23);\necho iscube(24);\necho iscube(25);\necho iscube(26);\necho iscube(28);\n\
    echo iscube(29);\necho iscube(30);\necho iscube(31);\necho iscube(32);\necho iscube(33);\n\
    echo iscube(34);\necho iscube(35);\necho iscube(36);\necho iscube(37);\necho iscube(38);\n\
    echo iscube(39);\necho iscube(40);\necho iscube(41);\necho iscube(42);\necho iscube(43);\n\
    echo iscube(44);\necho iscube(45);\necho iscube(46);\necho iscube(47);\necho iscube(48);\n\
    echo iscube(49);\necho iscube(50);\necho iscube(51);\necho iscube(52);\necho iscube(53);\n\
    echo iscube(54);\necho iscube(55);\necho iscube(56);\necho iscube(57);\necho iscube(58);\n\
    echo iscube(59);\necho iscube(60);\necho iscube(61);\necho iscube(62);\necho iscube(63);\n\
    echo iscube(65);\necho iscube(66);\necho iscube(67);\necho iscube(68);\necho iscube(69);\n\
    echo iscube(70);\necho iscube(71);\necho iscube(72);\necho iscube(73);\necho iscube(74);\n\
    echo iscube(75);\necho iscube(76);\necho is\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg747cuut.php on line 79

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(8);\necho iscube(27);\necho iscube(64);\necho iscube(125);\necho iscube(216);\n\
    echo iscube(343);\necho iscube(512);\necho iscube(729);\necho iscube(1000);\n\
    echo iscube(1331);\necho iscube(1728);\necho iscube(2197);\necho iscube(2744);\n\
    echo iscube(3375);\necho iscube(4096);\necho iscube(4913);\necho iscube(5832);\n\
    echo iscube(6859);\necho iscube(8000);\necho iscube(9261);\necho iscube(10648);\n\
    echo iscube(12167);\necho iscube(13824);\necho iscube(15625);\necho iscube(17576);\n\
    echo iscube(19683);\necho iscube(21952);\necho iscube(24389);\necho iscube(27000);\n\
    echo iscube(29791);\necho iscube(32768);\necho iscube(35937);\necho iscube(39304);\n\
    echo iscube(42875);\necho iscube(46656);\necho iscube(50653);\necho iscube(54872);\n\
    echo iscube(59319);\necho iscube(64000);\necho iscube(68921);\necho iscube(74088);\n\
    echo iscube(79507);\necho iscube(85184);\necho iscube(91125);\necho iscube(97336);\n\
    echo iscube(103823);\necho iscube(110592);\necho iscube(117649);\necho iscube(125000);\n\
    echo iscube(132651);\necho iscube(140608);\necho iscube(148877);\necho iscube(157464);\n\
    echo iscube(166375);\necho iscube(175616);\necho iscube(185193);\necho iscube\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwvrpygei.php on line 74

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhy26otm.php:24\n\
    Stack trace:\n#0 /tmp/tmpuhy26otm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuhy26otm.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9x_kmjh.php:24\n\
    Stack trace:\n#0 /tmp/tmps9x_kmjh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps9x_kmjh.php\
    \ on line 24\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27);\necho iscube(28);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8v3y_0or.php:26\n\
    Stack trace:\n#0 /tmp/tmp8v3y_0or.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8v3y_0or.php\
    \ on line 26\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = $b * $b * $b;\n    if ($c == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho iscube(8) . \"\\n\";\necho iscube(27)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(125) . \"\\n\";\necho iscube(216)\
    \ . \"\\n\";\necho iscube(343) . \"\\n\";\necho iscube(512) . \"\\n\";\necho iscube(729)\
    \ . \"\\n\";\necho iscube(1000) . \"\\n\";\necho iscube(1331) . \"\\n\";\necho\
    \ iscube(1728) . \"\\n\";\necho iscube(2197) . \"\\n\";\necho iscube(2744) . \"\
    \\n\";\necho iscube(3375) . \"\\n\";\necho iscube(4096) . \"\\n\";\necho iscube(4913)\
    \ . \"\\n\";\necho iscube(5832) . \"\\n\";\necho iscube(6859) . \"\\n\";\necho\
    \ iscube(8000) . \"\\n\";\necho iscube(9261) . \"\\n\";\necho iscube(10648) .\
    \ \"\\n\";\necho iscube(12167) . \"\\n\";\necho iscube(13824) . \"\\n\";\necho\
    \ iscube(15625) . \"\\n\";\necho iscube(17576) . \"\\n\";\necho iscube(19683)\
    \ . \"\\n\";\necho iscube(21952) . \"\\n\";\necho iscube(24389) . \"\\n\";\necho\
    \ iscube(27000) . \"\\n\";\necho iscube(29791) . \"\\n\";\necho iscube(32768)\
    \ . \"\\n\";\necho iscube(35937) . \"\\n\";\necho iscube(39304) . \"\\n\";\necho\
    \ iscube(42875) . \"\\n\";\necho iscube(46656) . \"\\n\";\necho iscube(50653)\
    \ . \"\\n\";\necho iscube(54872) . \"\\n\";\necho iscube(59319) . \"\\n\";\necho\
    \ iscube(64000) . \"\\\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp82o3myh5.php on line 60

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(27);\necho iscube(28);\necho iscube(125);\necho iscube(216);\necho\
    \ iscube(512);\necho iscube(1000000);\necho iscube(1000000000);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_6gv0pk.php:31\n\
    Stack trace:\n#0 /tmp/tmp0_6gv0pk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0_6gv0pk.php\
    \ on line 31\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(8) . \"\\n\";\n\
    echo iscube(125) . \"\\n\";\necho iscube(216) . \"\\n\";\necho iscube(729) . \"\
    \\n\";\necho iscube(1000) . \"\\n\";\necho iscube(2197) . \"\\n\";\necho iscube(3375)\
    \ . \"\\n\";\necho iscube(4913) . \"\\n\";\necho iscube(5832) . \"\\n\";\necho\
    \ iscube(6859) . \"\\n\";\necho iscube(8000) . \"\\n\";\necho iscube(9261) . \"\
    \\n\";\necho iscube(10648) . \"\\n\";\necho iscube(12167) . \"\\n\";\necho iscube(13824)\
    \ . \"\\n\";\necho iscube(15625) . \"\\n\";\necho iscube(17576) . \"\\n\";\necho\
    \ iscube(19683) . \"\\n\";\necho iscube(21952) . \"\\n\";\necho iscube(24389)\
    \ . \"\\n\";\necho iscube(27000) . \"\\n\";\necho iscube(29791) . \"\\n\";\necho\
    \ iscube(32768) . \"\\n\";\necho iscube(35937) . \"\\n\";\necho iscube(39304)\
    \ . \"\\n\";\necho iscube(42875) . \"\\n\";\necho iscube(46656) . \"\\n\";\necho\
    \ iscube(50653) . \"\\n\";\necho iscube(54872) . \"\\n\";\necho iscube(59319)\
    \ . \"\\n\";\necho iscube(64000) . \"\\n\";\necho iscube(68921) . \"\\n\";\necho\
    \ iscube(74088) . \"\\n\";\necho iscube(79507) . \"\\n\";\necho iscube(85184)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\
    1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp94qmqf33.php:63\nStack trace:\n#0 /tmp/tmp94qmqf33.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp94qmqf33.php on line 63\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $cube =\
    \ round(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmgoyolts.php:18\n\
    Stack trace:\n#0 /tmp/tmpmgoyolts.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmgoyolts.php\
    \ on line 18\n"
  timestamp: 1659730488
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    if (is_int($b)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\necho iscube(27);\necho iscube(28);\necho iscube(64);\necho iscube(65);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm48ou8j9.php:24\n\
    Stack trace:\n#0 /tmp/tmpm48ou8j9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm48ou8j9.php\
    \ on line 24\n"
  timestamp: 1659730489
- exit_code: -1
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $i = 1;\n\
    \    while ($i * $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n       \
    \     return true;\n        }\n        $i++;\n    }\n    return false;\n}\n\n\
    echo iscube(8) . \"\\n\"; // false\necho iscube(27) . \"\\n\"; // true\necho iscube(64)\
    \ . \"\\n\"; // true\necho iscube(125) . \"\\n\"; // true\necho iscube(216) .\
    \ \"\\n\"; // false\necho iscube(343) . \"\\n\"; // true\necho iscube(1000) .\
    \ \"\\n\"; // false\necho iscube(1000000) . \"\\n\"; // true\necho iscube(1000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000) . \"\\n\"; // true\necho iscube(1000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000) . \"\\n\"; // true\necho\
    \ iscube(1000000000000000000000) . \"\\n\"; // true\necho iscube(1000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000) . \"\\n\"; //\
    \ true\necho iscube(1000000000000000000000000000000) . \"\\n\"; // true\necho\
    \ iscube(1000000000000000000000000000000000) . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000) .\
    \ \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000) .\
    \ \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; // true\necho iscube(1000000000000000000000000000000000000000000000000000000000000000000000)\
    \ . \"\\n\"; //\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: b'1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n'
  timestamp: 1659730494
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(27); // true\necho iscube(28); // false\necho iscube(8);\
    \ // false\necho iscube(64); // true\necho iscube(125); // true\necho iscube(216);\
    \ // true\necho iscube(1000); // false\necho iscube(1); // true\necho iscube(0);\
    \ // true\necho iscube(-27); // true\necho iscube(-64); // true\necho iscube(-125);\
    \ // true\necho iscube(-216); // true\necho iscube(-1000); // false\necho iscube(-1);\
    \ // true\necho iscube(-0); // true\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111111111111111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n0pdm3s.php:32\n\
    Stack trace:\n#0 /tmp/tmp1n0pdm3s.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1n0pdm3s.php\
    \ on line 32\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n  $i = 1;\n\
    \  while ($i * $i * $i <= $a) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n    $i++;\n  }\n  return false;\n}\n\necho iscube(27) . \"\\n\";\necho\
    \ iscube(28) . \"\\n\";\necho iscube(29) . \"\\n\";\necho iscube(30) . \"\\n\"\
    ;\necho iscube(31) . \"\\n\";\necho iscube(32) . \"\\n\";\necho iscube(33) . \"\
    \\n\";\necho iscube(34) . \"\\n\";\necho iscube(35) . \"\\n\";\necho iscube(36)\
    \ . \"\\n\";\necho iscube(37) . \"\\n\";\necho iscube(38) . \"\\n\";\necho iscube(39)\
    \ . \"\\n\";\necho iscube(40) . \"\\n\";\necho iscube(41) . \"\\n\";\necho iscube(42)\
    \ . \"\\n\";\necho iscube(43) . \"\\n\";\necho iscube(44) . \"\\n\";\necho iscube(45)\
    \ . \"\\n\";\necho iscube(46) . \"\\n\";\necho iscube(47) . \"\\n\";\necho iscube(48)\
    \ . \"\\n\";\necho iscube(49) . \"\\n\";\necho iscube(50) . \"\\n\";\necho iscube(51)\
    \ . \"\\n\";\necho iscube(52) . \"\\n\";\necho iscube(53) . \"\\n\";\necho iscube(54)\
    \ . \"\\n\";\necho iscube(55) . \"\\n\";\necho iscube(56) . \"\\n\";\necho iscube(57)\
    \ . \"\\n\";\necho iscube(58) . \"\\n\";\necho iscube(59) . \"\\n\";\necho iscube(60)\
    \ . \"\\n\";\necho iscube(61) . \"\\n\";\necho iscube(62) . \"\\n\";\necho iscube(63)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(65) . \"\\n\";\necho iscube(66)\
    \ . \"\\n\";\necho iscube(67) . \"\\\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoil2xcv9.php on line 63

    '
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $b = sqrt($a);\n\
    \    $c = $b * $b * $b;\n    if ($c == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\necho iscube(27);\necho iscube(28);\necho\
    \ iscube(125);\necho iscube(126);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2upws66.php:27\n\
    Stack trace:\n#0 /tmp/tmpd2upws66.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpd2upws66.php\
    \ on line 27\n"
  timestamp: 1659730489
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\nfunction iscube($a) {\n    $c = sqrt($a);\n\
    \    if ($c == round($c)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\necho iscube(8);\necho iscube(27);\necho iscube(64);\necho\
    \ iscube(125);\necho iscube(216);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\n\
    echo iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\n\
    echo iscube(17);\necho iscube(22);\necho iscube(125);\necho iscube(343);\necho\
    \ iscube(1331);\necho iscube(35);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\n\
    echo iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\n\
    echo iscube(17);\necho iscube(22);\necho iscube(125);\necho iscube(343);\necho\
    \ iscube(1331);\necho iscube(35);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\n\
    echo iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\n\
    echo iscube(17);\necho iscube(22);\necho iscube(125);\necho iscube(343);\necho\
    \ iscube(1331);\necho iscube(35);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\n\
    echo iscube(3);\necho iscube(9);\necho iscube(1728);\necho iscube(16);\necho iscube(10000);\n\
    echo iscube(17);\necho iscube(22);\necho iscube(125);\necho iscube(343);\necho\
    \ iscube(1331);\necho iscube(35);\necho iscube(1000);\necho iscube(1);\necho iscube(0);\n\
    echo iscube(3);\necho iscube(9);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111111111111111111111111\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp2dirljgn.php:88\nStack trace:\n#0 /tmp/tmp2dirljgn.php(96): test()\n\
    #1 {main}\n  thrown in /tmp/tmp2dirljgn.php on line 88\n"
  timestamp: 1659730489
