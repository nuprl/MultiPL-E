name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\nfunction median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn null;\n\t}\n\tsort($l);\n\
    \tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n\t} else\
    \ {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    $n = count($l);\n    if ($n == 0)\
    \ {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) return 0;\n  sort($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[$n/2] + $l[$n/2-1]) / 2;\n  } else {\n \
    \   return $l[$n/2];\n  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n  \
    \      return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) return 0;\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else\
    \ {\n        return $l[$n/2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0)\
    \ {\n    return 0;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n",
  "    $c = count($l);\n    if ($c == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($c % 2 == 0) {\n        return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$c / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    $m = floor($n / 2);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n",
  "    $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m\
    \ - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "  \
    \  $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $len = count($l);\n\
    \    if ($len % 2 == 0) {\n        return ($l[$len / 2] + $l[$len / 2 - 1]) /\
    \ 2;\n    } else {\n        return $l[$len / 2];\n    }\n}\n", "  $n = count($l);\n\
    \  if ($n == 0) return 0;\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n/2-1]\
    \ + $l[$n/2]) / 2;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    $l = sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1])\
    \ / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", "    $n = count($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "\t$c = count($l);\n\tif ($c == 0) return 0;\n\tsort($l);\n\
    \tif ($c % 2 == 0) {\n\t\treturn ($l[$c/2] + $l[$c/2-1]) / 2;\n\t} else {\n\t\t\
    return $l[$c/2];\n\t}\n}\n", "    $n = count($l);\n    if ($n == 0) return 0;\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1])\
    \ / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "  $n\
    \ = count($l);\n  if ($n == 0) return 0;\n  sort($l);\n  if ($n % 2 == 0) {\n\
    \    return ($l[$n/2] + $l[$n/2 - 1]) / 2;\n  } else {\n    return $l[$n/2];\n\
    \  }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else\
    \ {\n    return $l[$n / 2];\n  }\n}\n", "\t$n = count($l);\n\tif ($n == 0) return\
    \ 0;\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n/2-1] + $l[$n/2]) /\
    \ 2;\n\t} else {\n\t\treturn $l[$n/2];\n\t}\n}\n", "  $n = count($l);\n  sort($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else\
    \ {\n    return $l[$n / 2];\n  }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn 0;\n\t\
    }\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1])\
    \ / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n   \
    \ return $l[$n / 2];\n  }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n    return\
    \ 0;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n /\
    \ 2 - 1]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $c = count($l);\n    sort($l);\n    if ($c % 2 == 0) {\n        return ($l[$c\
    \ / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n    }\n\
    }\n", "    $c = count($l);\n    if ($c == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($c % 2 == 0) {\n        return ($l[$c / 2] + $l[$c / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$c / 2];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) return null;\n    sort($l);\n    if ($n % 2 == 0) {\n      \
    \  return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else {\n        return $l[$n/2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) return 0;\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else\
    \ {\n        return $l[$n/2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) return null;\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2]\
    \ + $l[$n/2-1]) / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) return 0;\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else {\n        return $l[($n-1)/2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    if ($n % 2 == 0) {\n        return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) return 0;\n    sort($l);\n    if\
    \ ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else {\n\
    \        return $l[$n/2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) return\
    \ 0;\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n/2] + $l[$n/2-1]) /\
    \ 2;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n    return 0;\n\
    \  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n  \
    \  $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m\
    \ - 1]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n \
    \   return null;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", " \
    \   $c = count($l);\n    if ($c == 0) {\n        return 0;\n    }\n    $m = floor($c\
    \ / 2);\n    if ($c % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    $m = $n / 2;\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n",
  "  $n = count($l);\n  if ($n == 0) return 0;\n  sort($l);\n  if ($n % 2 == 0) {\n\
    \    return ($l[$n/2] + $l[$n/2-1]) / 2;\n  } else {\n    return $l[$n/2];\n \
    \ }\n}\n", "    $n = count($l);\n    sort($l);\n    if ($n % 2 == 0) {\n     \
    \   return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    $m = floor($n / 2);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n  \
    \      return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m\
    \ - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "\t\
    $n = count($l);\n\tif ($n == 0) {\n\t\treturn null;\n\t}\n\tsort($l);\n\tif ($n\
    \ % 2 == 0) {\n\t\treturn ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n\t} else {\n\t\t\
    return $l[$n / 2];\n\t}\n}\n", "    $n = count($l);\n    if ($n == 0) {\n    \
    \    return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "  $n = count($l);\n  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else\
    \ {\n    return $l[$n / 2];\n  }\n}\n", "    $n = count($l);\n    if ($n == 0)\
    \ {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n",
  "    $count = count($l);\n    if ($count == 0) {\n        return null;\n    }\n\
    \    sort($l);\n    $mid = floor($count / 2);\n    if ($count % 2 == 0) {\n  \
    \      return ($l[$mid - 1] + $l[$mid]) / 2;\n    } else {\n        return $l[$mid];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n       \
    \ return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) return null;\n    $m = floor($n /\
    \ 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n   \
    \ } else {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) return\
    \ 0;\n  sort($l);\n  $m = floor($n / 2);\n  if ($n % 2 == 0) {\n    return ($l[$m]\
    \ + $l[$m - 1]) / 2;\n  } else {\n    return $l[$m];\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    if ($n % 2 == 0) {\n        return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n\
    \        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1]\
    \ + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $m = $n /\
    \ 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    }\
    \ else {\n        return $l[$m];\n    }\n}\n", "\t$n = count($l);\n\tif ($n ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "\t$n = count($l);\n\t\
    if ($n == 0) {\n\t\treturn 0;\n\t}\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n    \
    \    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n  \
    \  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n \
    \   }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] +\
    \ $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", " \
    \ $n = count($l);\n  $m = $n / 2;\n  if ($n % 2 == 0) {\n    return ($l[$m - 1]\
    \ + $l[$m]) / 2;\n  } else {\n    return $l[$m];\n  }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "  $n\
    \ = count($l);\n  if ($n == 0) {\n    return null;\n  }\n  sort($l);\n  if ($n\
    \ % 2 == 0) {\n    return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n  } else {\n   \
    \ return $l[$n / 2];\n  }\n}\n", "    $n = count($l);\n    if ($n == 0) return\
    \ 0;\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1])\
    \ / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", "    $c = count($l);\n\
    \    if ($c == 0) {\n        return 0;\n    }\n    $m = floor($c / 2);\n    if\
    \ ($c % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n    } else {\n \
    \       return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $c = count($l);\n    if ($c == 0) return 0;\n    sort($l);\n\
    \    if ($c % 2 == 0) {\n        return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$c / 2];\n    }\n}\n", "  $c = count($l);\n  if\
    \ ($c == 0) {\n    return 0;\n  }\n  sort($l);\n  if ($c % 2 == 0) {\n    return\
    \ ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n  } else {\n    return $l[$c / 2];\n  }\n\
    }\n", "  $n = count($l);\n  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else\
    \ {\n    return $l[$n / 2];\n  }\n}\n", "    $n = count($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "\t$n = count($l);\n\tif ($n == 0) {\n\
    \t\treturn 0;\n\t}\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "  $c = count($l);\n  if\
    \ ($c == 0) {\n    return 0;\n  }\n  sort($l);\n  if ($c % 2 == 0) {\n    return\
    \ ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n  } else {\n    return $l[$c / 2];\n  }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "\t$count =\
    \ count($l);\n\tif ($count == 0) {\n\t\treturn 0;\n\t}\n\t$middle = floor($count\
    \ / 2);\n\tsort($l);\n\tif ($count % 2 == 0) {\n\t\treturn ($l[$middle - 1] +\
    \ $l[$middle]) / 2;\n\t} else {\n\t\treturn $l[$middle];\n\t}\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) return 0;\n    $m = floor($n / 2);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n     \
    \   return $l[$m];\n    }\n}\n", "    $c = count($l);\n    if ($c == 0) {\n  \
    \      return 0;\n    }\n    sort($l);\n    if ($c % 2 == 0) {\n        return\
    \ ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return null;\n\
    \    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1]\
    \ + $l[$n / 2]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) return\
    \ 0;\n    sort($l);\n    $h = intval($n / 2);\n    if ($n % 2 == 0) {\n      \
    \  return ($l[$h] + $l[$h-1]) / 2;\n    } else {\n        return $l[$h];\n   \
    \ }\n}\n", "    $n = count($l);\n    sort($l);\n    if ($n % 2 == 0) {\n     \
    \   return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n\
    \ / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n",
  "  $n = count($l);\n  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n  if ($n\
    \ % 2 == 0) {\n    return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n   \
    \ return $l[$n / 2];\n  }\n}\n", "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn\
    \ 0;\n\t}\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n /\
    \ 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return null;\n    }\n    if ($n % 2 == 0) {\n        return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "    $c = count($l);\n    if ($c == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    if ($c % 2 == 0) {\n        return ($l[$c / 2] + $l[$c\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$c / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) return 0;\n    if ($n == 1) return $l[0];\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2-1] + $l[$n/2])\
    \ / 2;\n    } else {\n        return $l[($n-1)/2];\n    }\n}\n", "    $n = count($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m\
    \ - 1]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "  $n = count($l);\n\
    \  if ($n == 0) return null;\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n/2]\
    \ + $l[$n/2-1]) / 2;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    $m = $n / 2;\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return\
    \ $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) return null;\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2-1] + $l[$n/2])\
    \ / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n \
    \   return null;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", "\t\
    $n = count($l);\n\t$m = $n / 2;\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$m - 1]\
    \ + $l[$m]) / 2;\n\t} else {\n\t\treturn $l[$m];\n\t}\n}\n", "\t$n = count($l);\n\
    \tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tsort($l);\n\t$m = floor($n / 2);\n\tif\
    \ ($n % 2 == 0) {\n\t\treturn ($l[$m - 1] + $l[$m]) / 2;\n\t} else {\n\t\treturn\
    \ $l[$m];\n\t}\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return\
    \ 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n",
  "  $n = count($l);\n  if ($n == 0) return 0;\n  sort($l);\n  if ($n % 2 == 0) {\n\
    \    return ($l[$n/2] + $l[$n/2 - 1]) / 2;\n  } else {\n    return $l[($n - 1)\
    \ / 2];\n  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n\
    \    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m] + $l[$m - 1]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    $m\
    \ = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "  $n = count($l);\n\
    \  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n   \
    \ return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n    return $l[$n / 2];\n\
    \  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "  $n = count($l);\n\
    \  if ($n == 0) {\n    return 0;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n   \
    \ return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n    return $l[$n / 2];\n\
    \  }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n =\
    \ count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n  \
    \  $m = (int)($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) return 0;\n    if ($n % 2 == 0) {\n        return ($l[$n/2]\
    \ + $l[$n/2 - 1]) / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", " \
    \   sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "  $n = count($l);\n  if ($n == 0) return 0;\n  sort($l);\n  if ($n % 2\
    \ == 0) {\n    return ($l[$n/2-1] + $l[$n/2]) / 2;\n  } else {\n    return $l[$n/2];\n\
    \  }\n}\n", "    $n = count($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0)\
    \ {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m])\
    \ / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n\
    \        return $l[$n / 2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0) {\n\
    \    return null;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n /\
    \ 2 - 1] + $l[$n / 2]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", " \
    \   $n = count($l);\n    if ($n == 0) {\n        return null;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    sort($l);\n    $count\
    \ = count($l);\n    $mid = floor(($count-1)/2);\n    if($count % 2) {\n      \
    \  $median = $l[$mid];\n    } else {\n        $low = $l[$mid];\n        $high\
    \ = $l[$mid+1];\n        $median = (($low+$high)/2);\n    }\n    return $median;\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) return null;\n    sort($l);\n    if ($n % 2 == 0) {\n      \
    \  return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else {\n        return $l[$n/2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n  \
    \  }\n    sort($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n       \
    \ return ($l[$m - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n  \
    \  }\n}\n", "    $n = count($l);\n    if ($n == 0) return null;\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2 - 1]) / 2;\n    }\
    \ else {\n        return $l[$n/2];\n    }\n}\n", "\t$n = count($l);\n\tif ($n\
    \ == 0) return 0;\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n/2] + $l[$n/2-1])\
    \ / 2;\n\t} else {\n\t\treturn $l[$n/2];\n\t}\n}\n", "\t$n = count($l);\n\tif\
    \ ($n == 0) {\n\t\treturn 0;\n\t}\n\t$m = floor($n / 2);\n\tif ($n % 2 == 0) {\n\
    \t\treturn ($l[$m - 1] + $l[$m]) / 2;\n\t} else {\n\t\treturn $l[$m];\n\t}\n}\n",
  "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n \
    \   } else {\n        return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "  $l = array_values($l);\n\
    \  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n / 2]\
    \ + $l[$n / 2 - 1]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) return 0;\n    if ($n == 1) return $l[0];\n\
    \    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2 - 1])\
    \ / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n  \
    \      return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return\
    \ $l[$n / 2];\n    }\n}\n", "\tsort($l);\n\t$n = count($l);\n\tif ($n % 2 == 0)\
    \ {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n\
    \ / 2];\n\t}\n}\n", "    $n = count($l);\n    if ($n == 0) return 0;\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else\
    \ {\n        return $l[($n-1)/2];\n    }\n}\n", "\t$n = count($l);\n\tif ($n ==\
    \ 0) {\n\t\treturn 0;\n\t}\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n",
  "    $n = count($l);\n    $m = $n / 2;\n    if ($n % 2 == 0) {\n        return ($l[$m\
    \ - 1] + $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n", "  \
    \  sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n\
    }\n", "    $n = count($l);\n    if ($n == 0) {\n        return 0;\n    }\n   \
    \ sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n / 2 -\
    \ 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "    $c = count($l);\n\
    \    if ($c == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($c % 2 ==\
    \ 0) {\n        return ($l[$c / 2] + $l[$c / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$c / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) return\
    \ null;\n    sort($l);\n    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2\
    \ - 1]) / 2;\n    } else {\n        return $l[$n/2];\n    }\n}\n", "    $n = count($l);\n\
    \    if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n == 0) {\n\
    \        return 0;\n    }\n    sort($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n\
    \    }\n}\n", "    $n = count($l);\n    if ($n == 0) return 0;\n    sort($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[$n/2-1] + $l[$n/2]) / 2;\n    } else\
    \ {\n        return $l[$n/2];\n    }\n}\n", "  $n = count($l);\n  if ($n == 0)\
    \ {\n    return 0;\n  }\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n\
    \ / 2] + $l[$n / 2 - 1]) / 2;\n  } else {\n    return $l[$n / 2];\n  }\n}\n",
  "    $c = count($l);\n    if ($c == 0) return 0;\n    $m = $c / 2;\n    sort($l);\n\
    \    if ($c % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "\t$n = count($l);\n\tif ($n == 0) return\
    \ 0;\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n/2] + $l[$n/2-1]) /\
    \ 2;\n\t} else {\n\t\treturn $l[$n/2];\n\t}\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return null;\n    }\n    sort($l);\n    $m = $n / 2;\n\
    \    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n    } else\
    \ {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if ($n ==\
    \ 0) return 0;\n    if ($n % 2 == 0) {\n        return ($l[$n/2] + $l[$n/2 - 1])\
    \ / 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "\t$n = count($l);\n\
    \tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n\t} else\
    \ {\n\t\treturn $l[($n - 1) / 2];\n\t}\n}\n", "  $n = count($l);\n  if ($n ==\
    \ 0) return 0;\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n/2] + $l[$n/2-1])\
    \ / 2;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    $n = count($l);\n  \
    \  if ($n == 0) {\n        return null;\n    }\n    sort($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "    $l = array_values($l);\n    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[$n / 2] + $l[$n\
    \ / 2 - 1]) / 2;\n    } else {\n        return $l[$n / 2];\n    }\n}\n", "   \
    \ $n = count($l);\n    if ($n == 0) return null;\n    sort($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[$n/2] + $l[$n/2-1]) / 2;\n    } else {\n     \
    \   return $l[$n/2];\n    }\n}\n", "\t$n = count($l);\n\t$m = floor($n / 2);\n\
    \tif ($n % 2 == 0) {\n\t\treturn ($l[$m - 1] + $l[$m]) / 2;\n\t} else {\n\t\t\
    return $l[$m];\n\t}\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2\
    \ == 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n \
    \       return $l[$n / 2];\n    }\n}\n", "\t$n = count($l);\n\tif ($n == 0) return\
    \ 0;\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n/2] + $l[$n/2-1]) /\
    \ 2;\n\t} else {\n\t\treturn $l[$n/2];\n\t}\n}\n", "  $n = count($l);\n  if ($n\
    \ == 0) return 0;\n  sort($l);\n  if ($n % 2 == 0) {\n    return ($l[$n/2] + $l[$n/2-1])\
    \ / 2;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    $n = count($l);\n  \
    \  if ($n == 0) {\n        return 0;\n    }\n    sort($l);\n    if ($n % 2 ==\
    \ 0) {\n        return ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n    \
    \    return $l[$n / 2];\n    }\n}\n", "    $n = count($l);\n    $m = floor($n\
    \ / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] + $l[$m]) / 2;\n \
    \   } else {\n        return $l[$m];\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n == 0) {\n        return 0;\n    }\n    if ($n % 2 == 0) {\n        return\
    \ ($l[$n / 2] + $l[$n / 2 - 1]) / 2;\n    } else {\n        return $l[($n - 1)\
    \ / 2];\n    }\n}\n", "\t$n = count($l);\n\tif ($n == 0) {\n\t\treturn 0;\n\t\
    }\n\tsort($l);\n\tif ($n % 2 == 0) {\n\t\treturn ($l[$n / 2] + $l[$n / 2 - 1])\
    \ / 2;\n\t} else {\n\t\treturn $l[$n / 2];\n\t}\n}\n", "    $n = count($l);\n\
    \    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n        return ($l[$m - 1] +\
    \ $l[$m]) / 2;\n    } else {\n        return $l[$m];\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
