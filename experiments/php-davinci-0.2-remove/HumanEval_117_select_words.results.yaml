language: php
name: HumanEval_117_select_words
results:
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\n$s = \"hello world\";\n$n = 1;\nvar_dump(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(5) \"world\"\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5jcpr6i5.php:27\nStack trace:\n#0 /tmp/tmp5jcpr6i5.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5jcpr6i5.php on line 27\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0)); // []\nvar_dump(select_words(\"\
    \", 1)); // []\nvar_dump(select_words(\"\", 2)); // []\nvar_dump(select_words(\"\
    \", 3)); // []\nvar_dump(select_words(\"\", 4)); // []\nvar_dump(select_words(\"\
    \", 5)); // []\nvar_dump(select_words(\"\", 6)); // []\nvar_dump(select_words(\"\
    \", 7)); // []\nvar_dump(select_words(\"\", 8)); // []\nvar_dump(select_words(\"\
    \", 9)); // []\nvar_dump(select_words(\"\", 10)); // []\nvar_dump(select_words(\"\
    \", 11)); // []\nvar_dump(select_words(\"\", 12)); // []\nvar_dump(select_words(\"\
    \", 13)); // []\nvar_dump(select_words(\"\", 14)); // []\nvar_dump(select_words(\"\
    \", 15)); // []\nvar_dump(select_words(\"\", 16)); // []\nvar_dump(select_words(\"\
    \", 17)); // []\nvar_dump(select_words(\"\", 18)); // []\nvar_dump(select_words(\"\
    \", 19)); // []\nvar_dump(select_words(\"\", 20)); // []\nvar_dump(select_words(\"\
    \", 21)); // []\nvar_dump(select_words(\"\", 22)); // []\nvar_dump(select_words(\"\
    \", 23)); // []\nvar_dump(select_words(\"\", 24)); // []\nvar_dump(select_words(\"\
    \", 25)); // []\nvar_dump(select_words(\"\", 26)); // []\nvar_dump(select_words(\"\
    \", 27)); // []\nvar_dump(select_words(\"\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmpzw65xs08.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpesrt80p9.php:12\nStack trace:\n#0 /tmp/tmpesrt80p9.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpesrt80p9.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpesrt80p9.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpesrt80p9.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (consonants_count($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpc6d7w2ks.php:12\nStack trace:\n#0 /tmp/tmpc6d7w2ks.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpc6d7w2ks.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpc6d7w2ks.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpc6d7w2ks.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $consonant_count = 0;\n        for ($i = 0; $i < strlen($word);\
    \ $i++) {\n            if (in_array($word[$i], $consonants)) {\n             \
    \   $consonant_count++;\n            }\n        }\n        if ($consonant_count\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\n$s = 'The quick brown fox jumps over the lazy dog';\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => brown\n    [1] => jumps\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwe2s3t0a.php:35\nStack trace:\n#0 /tmp/tmpwe2s3t0a.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwe2s3t0a.php on line 35\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $result = [];\n    $words =\
    \ explode(' ', $s);\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpls1ntjn5.php:12\nStack trace:\n#0 /tmp/tmpls1ntjn5.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpls1ntjn5.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpls1ntjn5.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpls1ntjn5.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"I love to\
    \ code\", 1)); // [\"love\"]\nvar_dump(select_words(\"I love to code\", 2)); //\
    \ [\"I\", \"code\"]\nvar_dump(select_words(\"I love to code\", 3)); // [\"to\"\
    ]\nvar_dump(select_words(\"I love to code\", 4)); // []\nvar_dump(select_words(\"\
    \", 1)); // []\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"to\"\n}\narray(2) {\n  [0]=>\n  string(4)\
    \ \"love\"\n  [1]=>\n  string(4) \"code\"\n}\narray(0) {\n}\narray(0) {\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzowlf4tb.php:29\n\
    Stack trace:\n#0 /tmp/tmpzowlf4tb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzowlf4tb.php\
    \ on line 29\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zc_fctu.php:24\n\
    Stack trace:\n#0 /tmp/tmp7zc_fctu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7zc_fctu.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('', 0));\nprint_r(select_words('a',\
    \ 0));\nprint_r(select_words('a', 1));\nprint_r(select_words('a a', 1));\nprint_r(select_words('a\
    \ a', 2));\nprint_r(select_words('a a a', 1));\nprint_r(select_words('a a a',\
    \ 2));\nprint_r(select_words('a a a', 3));\nprint_r(select_words('a a a', 4));\n\
    print_r(select_words('a a a a', 1));\nprint_r(select_words('a a a a', 2));\nprint_r(select_words('a\
    \ a a a', 3));\nprint_r(select_words('a a a a', 4));\nprint_r(select_words('a\
    \ a a a', 5));\nprint_r(select_words('a a a a a', 1));\nprint_r(select_words('a\
    \ a a a a', 2));\nprint_r(select_words('a a a a a', 3));\nprint_r(select_words('a\
    \ a a a a', 4));\nprint_r(select_words('a a a a a', 5));\nprint_r(select_words('a\
    \ a a a a', 6));\nprint_r(select_words('a a a a a a', 1));\nprint_r(select_words('a\
    \ a a a a a', 2));\nprint_r(select_words('a a a a a a', 3));\nprint_r(select_words('a\
    \ a a a a a', 4));\nprint_r(select_words('a a a a a a', 5));\nprint_\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyr29nn9u.php
    on line 45

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    $count = 0;\n    foreach (str_split($word) as $letter) {\n      if (in_array($letter,\
    \ $consonants)) {\n        $count++;\n      }\n    }\n    if ($count === $n) {\n\
    \      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\n$s = 'The quick\
    \ brown fox jumps over the lazy dog';\n$n = 3;\nprint_r(select_words($s, $n));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => quick\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeak8j7ef.php:35\nStack trace:\n#0 /tmp/tmpeak8j7ef.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeak8j7ef.php on line 35\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn6phuxf.php:32\n\
    Stack trace:\n#0 /tmp/tmpdn6phuxf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdn6phuxf.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0) === []);\nvar_dump(select_words(\"\
    \", 1) === []);\nvar_dump(select_words(\"\", 2) === []);\nvar_dump(select_words(\"\
    \", 3) === []);\nvar_dump(select_words(\"\", 4) === []);\nvar_dump(select_words(\"\
    \", 5) === []);\nvar_dump(select_words(\"\", 6) === []);\nvar_dump(select_words(\"\
    \", 7) === []);\nvar_dump(select_words(\"\", 8) === []);\nvar_dump(select_words(\"\
    \", 9) === []);\nvar_dump(select_words(\"\", 10) === []);\nvar_dump(select_words(\"\
    \", 11) === []);\nvar_dump(select_words(\"\", 12) === []);\nvar_dump(select_words(\"\
    \", 13) === []);\nvar_dump(select_words(\"\", 14) === []);\nvar_dump(select_words(\"\
    \", 15) === []);\nvar_dump(select_words(\"\", 16) === []);\nvar_dump(select_words(\"\
    \", 17) === []);\nvar_dump(select_words(\"\", 18) === []);\nvar_dump(select_words(\"\
    \", 19) === []);\nvar_dump(select_words(\"\", 20) === []);\nvar_dump(select_words(\"\
    \", 21) === []);\nvar_dump(select_words(\"\", 22) === []);\nvar_dump(select_words(\"\
    \", 23) === []);\nvar_dump(select_words(\"\", 24) === []);\nvar_dump(select_words(\"\
    \", 25) === []);\nvar_dump(select_words(\"\", 26\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpfwe9da55.php
    on line 46

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(select_words('hello world', 1)); // ['hello']\nvar_dump(select_words('hello\
    \ world', 2)); // ['world']\nvar_dump(select_words('hello world', 3)); // []\n\
    var_dump(select_words('hello world', 4)); // []\nvar_dump(select_words('', 1));\
    \ // []\nvar_dump(select_words('', 2)); // []\nvar_dump(select_words('', 3));\
    \ // []\nvar_dump(select_words('', 4)); // []\nvar_dump(select_words('hello world',\
    \ 0)); // []\nvar_dump(select_words('hello world', -1)); // []\nvar_dump(select_words('hello\
    \ world', -2)); // []\nvar_dump(select_words('hello world', -3)); // []\nvar_dump(select_words('hello\
    \ world', -4)); // []\nvar_dump(select_words('hello world', -5)); // []\nvar_dump(select_words('hello\
    \ world', -6)); // []\nvar_dump(select_words('hello world', -7)); // []\nvar_dump(select_words('hello\
    \ world', -8)); // []\nvar_dump(select_words('hello world', -9)); // []\nvar_dump(select_words('hello\
    \ world', -10)); // []\nvar_dump(select_words('hello world', -11)); // []\nvar_dump(select_words('hello\
    \ world', -12)); // []\nvar_dump(select_words('hello world', -13)); // []\nvar_dump(select_words('hello\
    \ world', -14)); // []\nvar_dump(select_words('hello world', -15)); // []\nvar_dump(select_words('hello\
    \ world', -16)); // []\nvar_dump(select_words('hello world', -17)); // []\nvar\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "var", expecting end of file in /tmp/tmppsbchcfb.php
    on line 45

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $s = explode(' ', $s);\n   \
    \ $result = [];\n    foreach ($s as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0gjk41u.php:24\n\
    Stack trace:\n#0 /tmp/tmpk0gjk41u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk0gjk41u.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach ($words\
    \ as $word) {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word);\
    \ $i++) {\n            if (!in_array($word[$i], $vowels)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lvroosv.php:35\n\
    Stack trace:\n#0 /tmp/tmp6lvroosv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lvroosv.php\
    \ on line 35\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp0b3nzf74.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(select_words('', 1));\nvar_dump(select_words('a', 1));\n\
    var_dump(select_words('a a', 1));\nvar_dump(select_words('a a', 2));\nvar_dump(select_words('a\
    \ a a', 1));\nvar_dump(select_words('a a a', 2));\nvar_dump(select_words('a a\
    \ a', 3));\nvar_dump(select_words('a a a a', 1));\nvar_dump(select_words('a a\
    \ a a', 2));\nvar_dump(select_words('a a a a', 3));\nvar_dump(select_words('a\
    \ a a a', 4));\nvar_dump(select_words('a a a a a', 1));\nvar_dump(select_words('a\
    \ a a a a', 2));\nvar_dump(select_words('a a a a a', 3));\nvar_dump(select_words('a\
    \ a a a a', 4));\nvar_dump(select_words('a a a a a', 5));\nvar_dump(select_words('a\
    \ a a a a a', 1));\nvar_dump(select_words('a a a a a a', 2));\nvar_dump(select_words('a\
    \ a a a a a', 3));\nvar_dump(select_words('a a a a a a', 4));\nvar_dump(select_words('a\
    \ a a a a a', 5));\nvar_dump(select_words('a a a a a a', 6));\nvar_dump(select_words('a\
    \ a a a a a a', 1));\nvar_dump(select_words('a a a a a a a', 2));\nvar_dump(select_words('a\
    \ a a a a a a', 3));\nvar_dump(select_words('a a a a a a a', 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    array(0) {

    }

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') === $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nvar_dump(select_words('hello world',\
    \ 1)); // ['hello']\nvar_dump(select_words('hello world', 2)); // ['world']\n\
    var_dump(select_words('hello world', 3)); // []\nvar_dump(select_words('hello\
    \ world', 4)); // []\nvar_dump(select_words('hello world', 5)); // []\nvar_dump(select_words('hello\
    \ world', 6)); // []\nvar_dump(select_words('hello world', 7)); // []\nvar_dump(select_words('hello\
    \ world', 8)); // []\nvar_dump(select_words('hello world', 9)); // []\nvar_dump(select_words('hello\
    \ world', 10)); // []\nvar_dump(select_words('hello world', 11)); // []\nvar_dump(select_words('hello\
    \ world', 12)); // []\nvar_dump(select_words('hello world', 13)); // []\nvar_dump(select_words('hello\
    \ world', 14)); // []\nvar_dump(select_words('hello world', 15)); // []\nvar_dump(select_words('hello\
    \ world', 16)); // []\nvar_dump(select_words('hello world', 17)); // []\nvar_dump(select_words('hello\
    \ world', 18)); // []\nvar_dump(select_words('hello world', 19)); // []\nvar_dump(select_words('hello\
    \ world', 20)); // []\nvar_dump(select_words('hello world', 21)); // []\nvar_dump(select_words('hello\
    \ world', 22)); // []\nvar_dump(select_words('hello world', 23)); // []\nvar_dump(select_words('hello\
    \ world', 24)); // []\nvar_dump(select_words('hello world', 25\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpd7r43jne.php
    on line 44

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') === $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zm8osxj.php:24\n\
    Stack trace:\n#0 /tmp/tmp5zm8osxj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5zm8osxj.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(select_words('', 0)); // []\nvar_dump(select_words('hello\
    \ world', 1)); // ['hello']\nvar_dump(select_words('hello world', 2)); // ['world']\n\
    var_dump(select_words('hello world', 3)); // []\nvar_dump(select_words('hello\
    \ world', 4)); // []\nvar_dump(select_words('hello world', 5)); // []\nvar_dump(select_words('hello\
    \ world', 6)); // []\nvar_dump(select_words('hello world', 7)); // []\nvar_dump(select_words('hello\
    \ world', 8)); // []\nvar_dump(select_words('hello world', 9)); // []\nvar_dump(select_words('hello\
    \ world', 10)); // []\nvar_dump(select_words('hello world', 11)); // []\nvar_dump(select_words('hello\
    \ world', 12)); // []\nvar_dump(select_words('hello world', 13)); // []\nvar_dump(select_words('hello\
    \ world', 14)); // []\nvar_dump(select_words('hello world', 15)); // []\nvar_dump(select_words('hello\
    \ world', 16)); // []\nvar_dump(select_words('hello world', 17)); // []\nvar_dump(select_words('hello\
    \ world', 18)); // []\nvar_dump(select_words('hello world', 19)); // []\nvar_dump(select_words('hello\
    \ world', 20)); // []\nvar_dump(select_words('hello world', 21)); // []\nvar_dump(select_words('hello\
    \ world', 22)); // []\nvar_dump(select_words('hello world', 23)); // []\nvar_dump(select_words('hello\
    \ world', 24)); // []\nvar_dump(select_words('hello world', 25)); // []\nvar_dump(select_words('hello\
    \ world', 26\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmps3836yp5.php
    on line 46

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $result = [];\n    $words =\
    \ explode(' ', $s);\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgicuxv3r.php:24\n\
    Stack trace:\n#0 /tmp/tmpgicuxv3r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgicuxv3r.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') === $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpxczedis8.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $result = [];\n    $words =\
    \ explode(' ', $s);\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgicuxv3r.php:24\n\
    Stack trace:\n#0 /tmp/tmpgicuxv3r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgicuxv3r.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('', 0)); // []\n\
    print_r(select_words('a', 0)); // []\nprint_r(select_words('a', 1)); // ['a']\n\
    print_r(select_words('a b', 1)); // ['a']\nprint_r(select_words('a b', 2)); //\
    \ ['b']\nprint_r(select_words('a b c', 1)); // ['a', 'c']\nprint_r(select_words('a\
    \ b c', 2)); // ['b']\nprint_r(select_words('a b c', 3)); // []\nprint_r(select_words('a\
    \ b c d e f', 1)); // ['a', 'c', 'e']\nprint_r(select_words('a b c d e f', 2));\
    \ // ['b', 'd', 'f']\nprint_r(select_words('a b c d e f', 3)); // []\nprint_r(select_words('a\
    \ b c d e f', 4)); // []\nprint_r(select_words('a b c d e f', 5)); // []\nprint_r(select_words('a\
    \ b c d e f', 6)); // []\nprint_r(select_words('a b c d e f', 7)); // []\nprint_r(select_words('a\
    \ b c d e f', 8)); // []\nprint_r(select_words('a b c d e f', 9)); // []\nprint_r(select_words('a\
    \ b c d e f', 10)); // []\nprint_r(select_words('a b c d e f', 11)); // []\nprint_r(select_words('a\
    \ b c d e f', 12)); // []\nprint_r(\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp4mqzfamp.php on line 40

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\n$s = \"I love to code in PHP\";\n$n = 2;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => love\n    [1] => code\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpf69e_b44.php:27\nStack trace:\n#0 /tmp/tmpf69e_b44.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpf69e_b44.php on line 27\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $s = str_split($s);\n  $result\
    \ = [];\n  $word = '';\n  foreach ($s as $letter) {\n    if ($letter === ' ')\
    \ {\n      if (count_consonants($word) === $n) {\n        $result[] = $word;\n\
    \      }\n      $word = '';\n    } else {\n      $word .= $letter;\n    }\n  }\n\
    \  if (count_consonants($word) === $n) {\n    $result[] = $word;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpmmgk6szo.php:14\nStack trace:\n#0 /tmp/tmpmmgk6szo.php(29): select_words(Array,\
    \ 4)\n#1 /tmp/tmpmmgk6szo.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpmmgk6szo.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmmgk6szo.php on line 14\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"hello world\", 0)); // [\"\
    hello\", \"world\"]\nvar_dump(select_words(\"hello world\", 1)); // [\"world\"\
    ]\nvar_dump(select_words(\"hello world\", 2)); // []\nvar_dump(select_words(\"\
    hello world\", 3)); // []\nvar_dump(select_words(\"hello world\", 4)); // []\n\
    var_dump(select_words(\"hello world\", 5)); // []\nvar_dump(select_words(\"hello\
    \ world\", 6)); // []\nvar_dump(select_words(\"hello world\", 7)); // []\nvar_dump(select_words(\"\
    hello world\", 8)); // []\nvar_dump(select_words(\"hello world\", 9)); // []\n\
    var_dump(select_words(\"hello world\", 10)); // []\nvar_dump(select_words(\"hello\
    \ world\", 11)); // []\nvar_dump(select_words(\"hello world\", 12)); // []\nvar_dump(select_words(\"\
    hello world\", 13)); // []\nvar_dump(select_words(\"hello world\", 14)); // []\n\
    var_dump(select_words(\"hello world\", 15)); // []\nvar_dump(select_words(\"hello\
    \ world\", 16)); // []\nvar_dump(select_words(\"hello world\", 17)); // []\nvar_dump(select_words(\"\
    hello world\", 18)); // []\nvar_dump(select_words(\"hello world\", 19)); // []\n\
    var_dump(select_words(\"hello world\", 20)); // []\nvar_dump(select_words(\"hello\
    \ world\", 21)); // []\nvar_dump(select_words(\"hello world\", 22)); // []\nvar_dump(select_words(\"\
    hello world\", 23)); // []\nvar_dump(select_words(\"hello\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmpvqro11o3.php
    on line 49

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == strlen($word) - $n) {\n      $result[] =\
    \ $word;\n    }\n  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0));\
    \ // []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpjx9xzq0u.php
    on line 48

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $s = preg_replace('/[^a-zA-Z\\\
    s]/', '', $s);\n    $s = preg_replace('/\\s+/', ' ', $s);\n    $s = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($s as $word) {\n        $consonants\
    \ = preg_replace('/[aeiou]/i', '', $word);\n        if (strlen($consonants) ===\
    \ $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nvar_dump(select_words(\"\", 0)); // []\nvar_dump(select_words(\"\", 1));\
    \ // []\nvar_dump(select_words(\"\", 2)); // []\nvar_dump(select_words(\"\", 3));\
    \ // []\nvar_dump(select_words(\"\", 4)); // []\nvar_dump(select_words(\"\", 5));\
    \ // []\nvar_dump(select_words(\"\", 6)); // []\nvar_dump(select_words(\"\", 7));\
    \ // []\nvar_dump(select_words(\"\", 8)); // []\nvar_dump(select_words(\"\", 9));\
    \ // []\nvar_dump(select_words(\"\", 10)); // []\nvar_dump(select_words(\"\",\
    \ 11)); // []\nvar_dump(select_words(\"\", 12)); // []\nvar_dump(select_words(\"\
    \", 13)); // []\nvar_dump(select_words(\"\", 14)); // []\nvar_dump(select_words(\"\
    \", 15)); // []\nvar_dump(select_words(\"\", 16)); // []\nvar_dump(select_words(\"\
    \", 17)); // []\nvar_dump(select_words(\"\", 18)); // []\nvar_dump(select_words(\"\
    \", 19)); // []\nvar_dump(select_words(\"\", 20)); // []\nvar_dump(select_words(\"\
    \", 21)); // []\nvar_dump(select_words(\"\", 22)); // []\nvar_dump(select_words(\"\
    \", 23)); // []\nvar_dump(select_words(\"\", 24)); // []\nvar_dump(select_words(\"\
    \", 25)); // []\nvar_dump\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpeddf5xud.php
    on line 49

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(select_words('',\
    \ 0));\nprint_r(select_words('hello world', 0));\nprint_r(select_words('hello\
    \ world', 1));\nprint_r(select_words('hello world', 2));\nprint_r(select_words('hello\
    \ world', 3));\nprint_r(select_words('hello world', 4));\nprint_r(select_words('hello\
    \ world', 5));\nprint_r(select_words('hello world', 6));\nprint_r(select_words('hello\
    \ world', 7));\nprint_r(select_words('hello world', 8));\nprint_r(select_words('hello\
    \ world', 9));\nprint_r(select_words('hello world', 10));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => \n)\nArray\n(\n)\nArray\n(\n    [0] => world\n\
    )\nArray\n(\n    [0] => hello\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n\
    (\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphmpjr68c.php:38\nStack trace:\n\
    #0 /tmp/tmphmpjr68c.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphmpjr68c.php\
    \ on line 38\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $words_with_n_consonants = [];\n    foreach ($words as $word) {\n       \
    \ if (count_consonants($word) === $n) {\n            $words_with_n_consonants[]\
    \ = $word;\n        }\n    }\n    return $words_with_n_consonants;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1w_yctja.php:12\nStack trace:\n#0 /tmp/tmp1w_yctja.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1w_yctja.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1w_yctja.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1w_yctja.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0)); // []\nvar_dump(select_words(\"\
    \", 1)); // []\nvar_dump(select_words(\"\", 2)); // []\nvar_dump(select_words(\"\
    \", 3)); // []\nvar_dump(select_words(\"\", 4)); // []\nvar_dump(select_words(\"\
    \", 5)); // []\nvar_dump(select_words(\"\", 6)); // []\nvar_dump(select_words(\"\
    \", 7)); // []\nvar_dump(select_words(\"\", 8)); // []\nvar_dump(select_words(\"\
    \", 9)); // []\nvar_dump(select_words(\"\", 10)); // []\nvar_dump(select_words(\"\
    \", 11)); // []\nvar_dump(select_words(\"\", 12)); // []\nvar_dump(select_words(\"\
    \", 13)); // []\nvar_dump(select_words(\"\", 14)); // []\nvar_dump(select_words(\"\
    \", 15)); // []\nvar_dump(select_words(\"\", 16)); // []\nvar_dump(select_words(\"\
    \", 17)); // []\nvar_dump(select_words(\"\", 18)); // []\nvar_dump(select_words(\"\
    \", 19)); // []\nvar_dump(select_words(\"\", 20)); // []\nvar_dump(select_words(\"\
    \", 21)); // []\nvar_dump(select_words(\"\", 22)); // []\nvar_dump(select_words(\"\
    \", 23)); // []\nvar_dump(select_words(\"\", 24)); // []\nvar_dump(select_words(\"\
    \", 25)); // []\nvar_dump(select_words(\"\", 26)); // []\nvar_dump(select_words(\"\
    \", 27)); // []\nvar_dump(select_words(\"\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmpzw65xs08.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsli5_tc.php:24\n\
    Stack trace:\n#0 /tmp/tmpgsli5_tc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgsli5_tc.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $s = explode(' ', $s);\n   \
    \ $result = [];\n    foreach ($s as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('hello world',\
    \ 1)); // ['hello']\nprint_r(select_words('hello world', 2)); // ['world']\nprint_r(select_words('hello\
    \ world', 3)); // []\nprint_r(select_words('hello world', 4)); // []\nprint_r(select_words('hello\
    \ world', 5)); // []\nprint_r(select_words('hello world', 6)); // []\nprint_r(select_words('hello\
    \ world', 7)); // []\nprint_r(select_words('hello world', 8)); // []\nprint_r(select_words('hello\
    \ world', 9)); // []\nprint_r(select_words('hello world', 10)); // []\nprint_r(select_words('hello\
    \ world', 11)); // []\nprint_r(select_words('hello world', 12)); // []\nprint_r(select_words('hello\
    \ world', 13)); // []\nprint_r(select_words('hello world', 14)); // []\nprint_r(select_words('hello\
    \ world', 15)); // []\nprint_r(select_words('hello world', 16)); // []\nprint_r(select_words('hello\
    \ world', 17)); // []\nprint_r(select_words('hello world', 18)); // []\nprint_r(select_words('hello\
    \ world', 19)); // []\nprint_r(select_words('hello world', 20)); // []\nprint_r(select_words('hello\
    \ world', 21)); // []\nprint_r(select_words('hello world', 22)); // []\nprint_r(select_words('hello\
    \ world', 23)); // []\nprint_r(select_words('hello world', 24)); // []\nprint_r(select_words('hello\
    \ world', 25\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp79wgdoil.php
    on line 44

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\necho implode(', ', select_words('hello\
    \ world', 1)) . PHP_EOL; // ['hello', 'world']\necho implode(', ', select_words('hello\
    \ world', 2)) . PHP_EOL; // ['hello', 'world']\necho implode(', ', select_words('hello\
    \ world', 3)) . PHP_EOL; // []\necho implode(', ', select_words('hello world',\
    \ 4)) . PHP_EOL; // []\necho implode(', ', select_words('hello world', 5)) . PHP_EOL;\
    \ // []\necho implode(', ', select_words('hello world', 6)) . PHP_EOL; // []\n\
    echo implode(', ', select_words('hello world', 7)) . PHP_EOL; // []\necho implode(',\
    \ ', select_words('hello world', 8)) . PHP_EOL; // []\necho implode(', ', select_words('hello\
    \ world', 9)) . PHP_EOL; // []\necho implode(', ', select_words('hello world',\
    \ 10)) . PHP_EOL; // []\necho implode(', ', select_words('hello world', 11)) .\
    \ PHP_EOL; // []\necho implode(', ', select_words('hello world', 12)) . PHP_EOL;\
    \ // []\necho implode(', ', select_words('hello world', 13)) . PHP_EOL; // []\n\
    echo implode(', ', select_words('hello world', 14)) . PHP_EOL; // []\necho implode(',\
    \ ', select_words('hello world', 15)) . PHP_EOL; // []\necho implode(', ', select_words('hello\
    \ world', 16)) . PHP_EOL; // []\necho implode(', ',\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpc4iqju1k.php on line 36

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (consonants_count($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpc6d7w2ks.php:12\nStack trace:\n#0 /tmp/tmpc6d7w2ks.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpc6d7w2ks.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpc6d7w2ks.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpc6d7w2ks.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($word); $i++) {\n      if (in_array($word[$i],\
    \ $consonants)) {\n        $count++;\n      }\n    }\n    if ($count === $n) {\n\
    \      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68oyh3yq.php:32\n\
    Stack trace:\n#0 /tmp/tmp68oyh3yq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp68oyh3yq.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp0b3nzf74.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp0b3nzf74.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 1));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37nx3sby.php:25\n\
    Stack trace:\n#0 /tmp/tmp37nx3sby.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp37nx3sby.php\
    \ on line 25\n"
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\
    \", 1)); // []\nvar_dump(select_words(\"hello\", 1)); // [\"hello\"]\nvar_dump(select_words(\"\
    hello world\", 1)); // [\"hello\", \"world\"]\nvar_dump(select_words(\"hello world\"\
    , 2)); // [\"hello\", \"world\"]\nvar_dump(select_words(\"hello world\", 3));\
    \ // []\nvar_dump(select_words(\"hello world\", 4)); // []\nvar_dump(select_words(\"\
    hello world\", 5)); // []\nvar_dump(select_words(\"hello world\", 6)); // []\n\
    var_dump(select_words(\"hello world\", 7)); // []\nvar_dump(select_words(\"hello\
    \ world\", 8)); // []\nvar_dump(select_words(\"hello world\", 9)); // []\nvar_dump(select_words(\"\
    hello world\", 10)); // []\nvar_dump(select_words(\"hello world\", 11)); // []\n\
    var_dump(select_words(\"hello world\", 12)); // []\nvar_dump(select_words(\"hello\
    \ world\", 13)); // []\nvar_dump(select_words(\"hello world\", 14)); // []\nvar_dump(select_words(\"\
    hello world\", 15)); // []\nvar_dump(select_words(\"hello world\", 16)); // []\n\
    var_dump(select_words(\"hello world\", 17)); // []\nvar_dump(select_words(\"hello\
    \ world\", 18)); // []\nvar_\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp04f53khl.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (strlen($word)\
    \ > 0 && substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nvar_dump(select_words('',\
    \ 0)); // []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('',\
    \ 2)); // []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('',\
    \ 4)); // []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('',\
    \ 6)); // []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('',\
    \ 8)); // []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('',\
    \ 10)); // []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('',\
    \ 12)); // []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('',\
    \ 14)); // []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('',\
    \ 16)); // []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('',\
    \ 18)); // []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('',\
    \ 20)); // []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('',\
    \ 22)); // []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('',\
    \ 24)); // []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('',\
    \ 26)); // []\nvar_dump(select_words('', 27)); // []\nvar\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "var", expecting end of file in /tmp/tmp58atqj3g.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"I love to\
    \ code\", 1)); // [\"love\"]\nvar_dump(select_words(\"I love to code\", 2)); //\
    \ [\"I\", \"code\"]\nvar_dump(select_words(\"I love to code\", 3)); // [\"to\"\
    ]\nvar_dump(select_words(\"I love to code\", 4)); // []\nvar_dump(select_words(\"\
    \", 1)); // []\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"to\"\n}\narray(2) {\n  [0]=>\n  string(4)\
    \ \"love\"\n  [1]=>\n  string(4) \"code\"\n}\narray(0) {\n}\narray(0) {\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzowlf4tb.php:29\n\
    Stack trace:\n#0 /tmp/tmpzowlf4tb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzowlf4tb.php\
    \ on line 29\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\n$s = 'The quick brown\
    \ fox jumps over the lazy dog';\n$n = 4;\nprint_r(select_words($s, $n));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => brown\n    [1] => jumps\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgk1n2ixl.php:35\nStack trace:\n#0 /tmp/tmpgk1n2ixl.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgk1n2ixl.php on line 35\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp02yl5e1t.php:25\nStack trace:\n#0 /tmp/tmp02yl5e1t.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp02yl5e1t.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (consonants_count($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpc6d7w2ks.php:12\nStack trace:\n#0 /tmp/tmpc6d7w2ks.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpc6d7w2ks.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpc6d7w2ks.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpc6d7w2ks.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp0b3nzf74.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $result = [];\n    $words =\
    \ explode(' ', $s);\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => \n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp05e0crio.php:25\nStack trace:\n#0 /tmp/tmp05e0crio.php(34): test()\n\
    #1 {main}\n  thrown in /tmp/tmp05e0crio.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words('',\
    \ 0)); // []\nprint_r(select_words('', 1)); // []\nprint_r(select_words('', 2));\
    \ // []\nprint_r(select_words('', 3)); // []\nprint_r(select_words('', 4)); //\
    \ []\necho '<br>';\nprint_r(select_words('a', 0)); // []\nprint_r(select_words('a',\
    \ 1)); // []\nprint_r(select_words('a', 2)); // []\nprint_r(select_words('a',\
    \ 3)); // []\nprint_r(select_words('a', 4)); // []\necho '<br>';\nprint_r(select_words('a\
    \ b', 0)); // []\nprint_r(select_words('a b', 1)); // []\nprint_r(select_words('a\
    \ b', 2)); // []\nprint_r(select_words('a b', 3)); // []\nprint_r(select_words('a\
    \ b', 4)); // []\necho '<br>';\nprint_r(select_words('a b c', 0)); // []\nprint_r(select_words('a\
    \ b c', 1)); // []\nprint_r(select_words('a b c', 2)); // []\nprint_r(select_words('a\
    \ b c', 3)); // []\nprint_r(select_words('a b\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "a b" in /tmp/tmpb1w_uzo6.php
    on line 48

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($word); $i++) {\n      if (in_array($word[$i],\
    \ $consonants)) {\n        $count++;\n      }\n    }\n    if ($count === $n) {\n\
    \      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68oyh3yq.php:32\n\
    Stack trace:\n#0 /tmp/tmp68oyh3yq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp68oyh3yq.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp02yl5e1t.php:25\nStack trace:\n#0 /tmp/tmp02yl5e1t.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp02yl5e1t.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp0b3nzf74.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $result = [];\n    $words =\
    \ explode(' ', $s);\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgicuxv3r.php:24\n\
    Stack trace:\n#0 /tmp/tmpgicuxv3r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgicuxv3r.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (count_consonants($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp20pmo8gn.php:12\nStack trace:\n#0 /tmp/tmp20pmo8gn.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp20pmo8gn.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp20pmo8gn.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp20pmo8gn.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp5nixwk1d.php:12\nStack trace:\n#0 /tmp/tmp5nixwk1d.php(19): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp5nixwk1d.php(23): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp5nixwk1d.php(32): test()\n#3 {main}\n  thrown in /tmp/tmp5nixwk1d.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpesrt80p9.php:12\nStack trace:\n#0 /tmp/tmpesrt80p9.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpesrt80p9.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpesrt80p9.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpesrt80p9.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n$s = 'The quick brown fox jumps over the lazy dog';\n$n = 4;\n\
    print_r(select_words($s, $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => brown\n    [1] => jumps\n)\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0)); // => []\nvar_dump(select_words(\"\
    \", 1)); // => []\nvar_dump(select_words(\"\", 2)); // => []\nvar_dump(select_words(\"\
    \", 3)); // => []\nvar_dump(select_words(\"\", 4)); // => []\nvar_dump(select_words(\"\
    \", 5)); // => []\nvar_dump(select_words(\"\", 6)); // => []\nvar_dump(select_words(\"\
    \", 7)); // => []\nvar_dump(select_words(\"\", 8)); // => []\nvar_dump(select_words(\"\
    \", 9)); // => []\nvar_dump(select_words(\"\", 10)); // => []\nvar_dump(select_words(\"\
    \", 11)); // => []\nvar_dump(select_words(\"\", 12)); // => []\nvar_dump(select_words(\"\
    \", 13)); // => []\nvar_dump(select_words(\"\", 14)); // => []\nvar_dump(select_words(\"\
    \", 15)); // => []\nvar_dump(select_words(\"\", 16)); // => []\nvar_dump(select_words(\"\
    \", 17)); // => []\nvar_dump(select_words(\"\", 18)); // => []\nvar_dump(select_words(\"\
    \", 19)); // => []\nvar_dump(select_words(\"\", 20)); // => []\nvar_dump(select_words(\"\
    \", 21)); // => []\nvar_dump(select_words(\"\", 22)); // => []\nvar_dump(select_words(\"\
    \", 23)); // => []\nvar_dump(select_words(\"\", 24)); // => []\nvar_dump(select_words(\"\
    \", 25)); // => []\nvar_dump(select_words(\"\", 26\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp3vacvsrm.php
    on line 46

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 1)); //\
    \ []\nvar_dump(select_words('a', 1)); // ['a']\nvar_dump(select_words('a a', 1));\
    \ // ['a', 'a']\nvar_dump(select_words('a a', 2)); // []\nvar_dump(select_words('a\
    \ a a', 1)); // ['a', 'a', 'a']\nvar_dump(select_words('a a a', 2)); // []\nvar_dump(select_words('a\
    \ a a', 3)); // []\nvar_dump(select_words('a a a a', 1)); // ['a', 'a', 'a', 'a']\n\
    var_dump(select_words('a a a a', 2)); // []\nvar_dump(select_words('a a a a',\
    \ 3)); // []\nvar_dump(select_words('a a a a', 4)); // []\nvar_dump(select_words('a\
    \ a a a a', 1)); // ['a', 'a', 'a', 'a', 'a']\nvar_dump(select_words('a a a a\
    \ a', 2)); // []\nvar_dump(select_words('a a a a a', 3)); // []\nvar_dump(select_words('a\
    \ a a a a', 4)); // []\nvar_dump(select_words('a a a a a', 5)); // []\nvar_dump(select_words('a\
    \ a a a a a', 1)); // ['a', 'a', 'a', 'a', 'a', 'a']\nvar_dump(select_words('a\
    \ a a a a a', 2)); // []\nvar_dump(select_words('a a a a a a', 3)); // []\nvar_dump(\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpba73rseb.php on line 39

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\
    \", 0)); // []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\
    \", 2)); // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\
    \", 4)); // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\
    \", 6)); // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\
    \", 8)); // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\
    \", 10)); // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\
    \", 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgj1ozbfm.php
    on line 50

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => \n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzrzzf7ie.php:25\nStack trace:\n#0 /tmp/tmpzrzzf7ie.php(34): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzrzzf7ie.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\
    \", 0)); // []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\
    \", 2)); // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\
    \", 4)); // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\
    \", 6)); // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\
    \", 8)); // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\
    \", 10)); // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\
    \", 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgj1ozbfm.php
    on line 50

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $arr = explode(' ', $s);\n \
    \   $result = [];\n    foreach ($arr as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('', 0)); // []\n\
    print_r(select_words('a', 0)); // []\nprint_r(select_words('a', 1)); // ['a']\n\
    print_r(select_words('a b c', 1)); // ['a', 'b', 'c']\nprint_r(select_words('a\
    \ b c', 2)); // []\nprint_r(select_words('a b c', 3)); // []\nprint_r(select_words('a\
    \ b c d e f', 0)); // []\nprint_r(select_words('a b c d e f', 1)); // ['a', 'b',\
    \ 'c', 'd', 'e', 'f']\nprint_r(select_words('a b c d e f', 2)); // []\nprint_r(select_words('a\
    \ b c d e f', 3)); // []\nprint_r(select_words('a b c d e f', 4)); // []\nprint_r(select_words('a\
    \ b c d e f', 5)); // []\nprint_r(select_words('a b c d e f', 6)); // []\nprint_r(select_words('a\
    \ b c d e f', 7)); // []\nprint_r(select_words('a b c d e f', 8)); // []\nprint_r(select_words('a\
    \ b c d e f', 9)); // []\nprint_r(select_words('a b c d e f', 10)); // []\nprint_r(select_words('a\
    \ b c d e f', 11)); // []\nprint_r(select_words('a b c d e f', 12)); // []\nprint_r(select_words('a\
    \ b c d e f', 13)); //\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => \n)\nArray\n(\n)\nArray\n(\n    [0] => a\n)\nArray\n\
    (\n    [0] => a\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => b\n    [1]\
    \ => c\n    [2] => d\n    [3] => f\n)\nArray\n(\n    [0] => a\n    [1] => e\n\
    )\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n\
    )\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ierszjh.php:44\n\
    Stack trace:\n#0 /tmp/tmp3ierszjh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3ierszjh.php\
    \ on line 44\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\n$s = \"The quick brown fox jumps over\
    \ the lazy dog\";\n$n = 4;\nprint_r(select_words($s, $n));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16083p1_.php:27\n\
    Stack trace:\n#0 /tmp/tmp16083p1_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp16083p1_.php\
    \ on line 27\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z'];\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    $consonantCount = 0;\n    for ($i = 0; $i < strlen($word); $i++) {\n\
    \      if (in_array($word[$i], $consonants)) {\n        $consonantCount++;\n \
    \     }\n    }\n    if ($consonantCount === $n) {\n      $result[] = $word;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqmj__ai.php:32\n\
    Stack trace:\n#0 /tmp/tmpbqmj__ai.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbqmj__ai.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpesrt80p9.php:12\nStack trace:\n#0 /tmp/tmpesrt80p9.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpesrt80p9.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpesrt80p9.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpesrt80p9.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nprint_r(select_words('hello world',\
    \ 2));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => hello\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp47vb5b1r.php:25\nStack trace:\n#0 /tmp/tmp47vb5b1r.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp47vb5b1r.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0)); //\
    \ []\nvar_dump(select_words('', 1)); // []\nvar_dump(select_words('', 2)); //\
    \ []\nvar_dump(select_words('', 3)); // []\nvar_dump(select_words('', 4)); //\
    \ []\nvar_dump(select_words('', 5)); // []\nvar_dump(select_words('', 6)); //\
    \ []\nvar_dump(select_words('', 7)); // []\nvar_dump(select_words('', 8)); //\
    \ []\nvar_dump(select_words('', 9)); // []\nvar_dump(select_words('', 10)); //\
    \ []\nvar_dump(select_words('', 11)); // []\nvar_dump(select_words('', 12)); //\
    \ []\nvar_dump(select_words('', 13)); // []\nvar_dump(select_words('', 14)); //\
    \ []\nvar_dump(select_words('', 15)); // []\nvar_dump(select_words('', 16)); //\
    \ []\nvar_dump(select_words('', 17)); // []\nvar_dump(select_words('', 18)); //\
    \ []\nvar_dump(select_words('', 19)); // []\nvar_dump(select_words('', 20)); //\
    \ []\nvar_dump(select_words('', 21)); // []\nvar_dump(select_words('', 22)); //\
    \ []\nvar_dump(select_words('', 23)); // []\nvar_dump(select_words('', 24)); //\
    \ []\nvar_dump(select_words('', 25)); // []\nvar_dump(select_words('', 26)); //\
    \ []\nvar_dump(select_words('', 27)); // []\nvar_dump(select_words('\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmp0b3nzf74.php
    on line 47

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0)); //\
    \ []\nvar_dump(select_words(\"\", 1)); // []\nvar_dump(select_words(\"\", 2));\
    \ // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\", 4));\
    \ // []\nvar_dump(select_words(\"\", 5)); // []\nvar_dump(select_words(\"\", 6));\
    \ // []\nvar_dump(select_words(\"\", 7)); // []\nvar_dump(select_words(\"\", 8));\
    \ // []\nvar_dump(select_words(\"\", 9)); // []\nvar_dump(select_words(\"\", 10));\
    \ // []\nvar_dump(select_words(\"\", 11)); // []\nvar_dump(select_words(\"\",\
    \ 12)); // []\nvar_dump(select_words(\"\", 13)); // []\nvar_dump(select_words(\"\
    \", 14)); // []\nvar_dump(select_words(\"\", 15)); // []\nvar_dump(select_words(\"\
    \", 16)); // []\nvar_dump(select_words(\"\", 17)); // []\nvar_dump(select_words(\"\
    \", 18)); // []\nvar_dump(select_words(\"\", 19)); // []\nvar_dump(select_words(\"\
    \", 20)); // []\nvar_dump(select_words(\"\", 21)); // []\nvar_dump(select_words(\"\
    \", 22)); // []\nvar_dump(select_words(\"\", 23)); // []\nvar_dump(select_words(\"\
    \", 24)); // []\nvar_dump(select_words(\"\", 25)); // []\nvar_dump(select_words(\"\
    \", 26)); // []\nvar_dump(select_words(\"\", 27)); // []\nvar_dump(select_words(\"\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmptd4q6f5a.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (count_consonants($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp20pmo8gn.php:12\nStack trace:\n#0 /tmp/tmp20pmo8gn.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp20pmo8gn.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp20pmo8gn.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp20pmo8gn.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $s = explode(' ', $s);\n   \
    \ $result = [];\n    foreach ($s as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc94b3m2o.php:25\nStack trace:\n#0 /tmp/tmpc94b3m2o.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc94b3m2o.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn6phuxf.php:32\n\
    Stack trace:\n#0 /tmp/tmpdn6phuxf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdn6phuxf.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp02yl5e1t.php:25\nStack trace:\n#0 /tmp/tmp02yl5e1t.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp02yl5e1t.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words('', 0));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzl5u3agw.php:25\nStack trace:\n#0 /tmp/tmpzl5u3agw.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzl5u3agw.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"hello world\"\
    , 1)); // [\"hello\"]\nvar_dump(select_words(\"hello world\", 2)); // [\"world\"\
    ]\nvar_dump(select_words(\"hello world\", 3)); // []\nvar_dump(select_words(\"\
    hello world\", 4)); // []\nvar_dump(select_words(\"hello world\", 5)); // []\n\
    var_dump(select_words(\"hello world\", 6)); // []\nvar_dump(select_words(\"hello\
    \ world\", 7)); // []\nvar_dump(select_words(\"hello world\", 8)); // []\nvar_dump(select_words(\"\
    hello world\", 9)); // []\nvar_dump(select_words(\"hello world\", 10)); // []\n\
    var_dump(select_words(\"hello world\", 11)); // []\nvar_dump(select_words(\"hello\
    \ world\", 12)); // []\nvar_dump(select_words(\"hello world\", 13)); // []\nvar_dump(select_words(\"\
    hello world\", 14)); // []\nvar_dump(select_words(\"hello world\", 15)); // []\n\
    var_dump(select_words(\"hello world\", 16)); // []\nvar_dump(select_words(\"hello\
    \ world\", 17)); // []\nvar_dump(select_words(\"hello world\", 18)); // []\nvar_dump(select_words(\"\
    hello world\", 19)); // []\nvar_dump(select_words(\"hello world\", 20)); // []\n\
    var_dump(select_words(\"hello world\", 21)); // []\nvar_dump(select_words(\"hello\
    \ world\", 22)); // []\nvar_dump(select_words(\"hello world\", 23)); // []\nvar_dump(select_words(\"\
    hello world\", 24)); // []\nvar_dump(select_words(\"hello world\", 25\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp4jk44gj4.php
    on line 44

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') === $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0)); // []\nvar_dump(select_words(\"\
    \", 1)); // []\nvar_dump(select_words(\"\", 2)); // []\nvar_dump(select_words(\"\
    \", 3)); // []\nvar_dump(select_words(\"\", 4)); // []\nvar_dump(select_words(\"\
    \", 5)); // []\nvar_dump(select_words(\"\", 6)); // []\nvar_dump(select_words(\"\
    \", 7)); // []\nvar_dump(select_words(\"\", 8)); // []\nvar_dump(select_words(\"\
    \", 9)); // []\nvar_dump(select_words(\"\", 10)); // []\nvar_dump(select_words(\"\
    \", 11)); // []\nvar_dump(select_words(\"\", 12)); // []\nvar_dump(select_words(\"\
    \", 13)); // []\nvar_dump(select_words(\"\", 14)); // []\nvar_dump(select_words(\"\
    \", 15)); // []\nvar_dump(select_words(\"\", 16)); // []\nvar_dump(select_words(\"\
    \", 17)); // []\nvar_dump(select_words(\"\", 18)); // []\nvar_dump(select_words(\"\
    \", 19)); // []\nvar_dump(select_words(\"\", 20)); // []\nvar_dump(select_words(\"\
    \", 21)); // []\nvar_dump(select_words(\"\", 22)); // []\nvar_dump(select_words(\"\
    \", 23)); // []\nvar_dump(select_words(\"\", 24)); // []\nvar_dump(select_words(\"\
    \", 25)); // []\nvar_dump(select_words(\"\", 26)); // []\nvar_dump(select_words(\"\
    \", 27)); // []\nvar_dump(select_words(\"\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmpdacknvn6.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\n$s = \"This is a test\";\n$n = 1;\n\
    print_r(select_words($s, $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => This\n    [1] => is\n    [2] => a\n    [3] => test\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wt8sqt_.php:27\n\
    Stack trace:\n#0 /tmp/tmp7wt8sqt_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7wt8sqt_.php\
    \ on line 27\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (consonants_count($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpc6d7w2ks.php:12\nStack trace:\n#0 /tmp/tmpc6d7w2ks.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpc6d7w2ks.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpc6d7w2ks.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpc6d7w2ks.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (consonants_count($word)\
    \ === $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpc6d7w2ks.php:12\nStack trace:\n#0 /tmp/tmpc6d7w2ks.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpc6d7w2ks.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpc6d7w2ks.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpc6d7w2ks.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn6phuxf.php:32\n\
    Stack trace:\n#0 /tmp/tmpdn6phuxf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdn6phuxf.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpesrt80p9.php:12\nStack trace:\n#0 /tmp/tmpesrt80p9.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpesrt80p9.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpesrt80p9.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpesrt80p9.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (consonants_count($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpba4elo2s.php:12\nStack trace:\n#0 /tmp/tmpba4elo2s.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpba4elo2s.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpba4elo2s.php(33): test()\n#3 {main}\n  thrown in /tmp/tmpba4elo2s.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn6phuxf.php:32\n\
    Stack trace:\n#0 /tmp/tmpdn6phuxf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdn6phuxf.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"\", 0)); // []\nvar_dump(select_words(\"\
    \", 1)); // []\nvar_dump(select_words(\"\", 2)); // []\nvar_dump(select_words(\"\
    \", 3)); // []\nvar_dump(select_words(\"\", 4)); // []\nvar_dump(select_words(\"\
    \", 5)); // []\nvar_dump(select_words(\"\", 6)); // []\nvar_dump(select_words(\"\
    \", 7)); // []\nvar_dump(select_words(\"\", 8)); // []\nvar_dump(select_words(\"\
    \", 9)); // []\nvar_dump(select_words(\"\", 10)); // []\nvar_dump(select_words(\"\
    \", 11)); // []\nvar_dump(select_words(\"\", 12)); // []\nvar_dump(select_words(\"\
    \", 13)); // []\nvar_dump(select_words(\"\", 14)); // []\nvar_dump(select_words(\"\
    \", 15)); // []\nvar_dump(select_words(\"\", 16)); // []\nvar_dump(select_words(\"\
    \", 17)); // []\nvar_dump(select_words(\"\", 18)); // []\nvar_dump(select_words(\"\
    \", 19)); // []\nvar_dump(select_words(\"\", 20)); // []\nvar_dump(select_words(\"\
    \", 21)); // []\nvar_dump(select_words(\"\", 22)); // []\nvar_dump(select_words(\"\
    \", 23)); // []\nvar_dump(select_words(\"\", 24)); // []\nvar_dump(select_words(\"\
    \", 25)); // []\nvar_dump(select_words(\"\", 26)); // []\nvar_dump(select_words(\"\
    \", 27)); // []\nvar_dump(select_words(\"\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmpzw65xs08.php
    on line 53

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"hello world\", 1)); // [\"\
    hello\"]\nvar_dump(select_words(\"hello world\", 2)); // [\"world\"]\nvar_dump(select_words(\"\
    hello world\", 3)); // []\nvar_dump(select_words(\"\", 3)); // []\nvar_dump(select_words(\"\
    hello world\", 0)); // [\"hello\", \"world\"]\nvar_dump(select_words(\"hello world\"\
    , 4)); // []\nvar_dump(select_words(\"hello world\", 5)); // []\nvar_dump(select_words(\"\
    hello world\", 6)); // []\nvar_dump(select_words(\"hello world\", 7)); // []\n\
    var_dump(select_words(\"hello world\", 8)); // []\nvar_dump(select_words(\"hello\
    \ world\", 9)); // []\nvar_dump(select_words(\"hello world\", 10)); // []\nvar_dump(select_words(\"\
    hello world\", 11)); // []\nvar_dump(select_words(\"hello world\", 12)); // []\n\
    var_dump(select_words(\"hello world\", 13)); // []\nvar_dump(select_words(\"hello\
    \ world\", 14)); // []\nvar_dump(select_words(\"hello world\", 15)); // []\nvar_dump(select_words(\"\
    hello world\", 16)); // []\nvar_dump(select_words(\"hello world\", 17)); // []\n\
    var_dump(select_words(\"hello world\", 18)); // []\nvar_dump(select_words(\"hello\
    \ world\", 19)); // []\nvar_dump(select_words(\"hello world\", 20)); // []\nvar_dump(select_words(\"\
    hello world\", 21)); // []\nvar_dump(select_words(\"hello world\", 22)); // []\n\
    var_dump(select_words(\"hello\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmpimrsp0vc.php
    on line 49

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $s = explode(' ', $s);\n   \
    \ $result = [];\n    foreach ($s as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"hello world\"\
    , 1)); // [\"hello\"]\nvar_dump(select_words(\"hello world\", 2)); // [\"world\"\
    ]\nvar_dump(select_words(\"hello world\", 3)); // []\nvar_dump(select_words(\"\
    hello world\", 4)); // []\nvar_dump(select_words(\"hello world\", 5)); // []\n\
    var_dump(select_words(\"hello world\", 6)); // []\nvar_dump(select_words(\"hello\
    \ world\", 7)); // []\nvar_dump(select_words(\"hello world\", 8)); // []\nvar_dump(select_words(\"\
    hello world\", 9)); // []\nvar_dump(select_words(\"hello world\", 10)); // []\n\
    var_dump(select_words(\"hello world\", 11)); // []\nvar_dump(select_words(\"hello\
    \ world\", 12)); // []\nvar_dump(select_words(\"hello world\", 13)); // []\nvar_dump(select_words(\"\
    hello world\", 14)); // []\nvar_dump(select_words(\"hello world\", 15)); // []\n\
    var_dump(select_words(\"hello world\", 16)); // []\nvar_dump(select_words(\"hello\
    \ world\", 17)); // []\nvar_dump(select_words(\"hello world\", 18)); // []\nvar_dump(select_words(\"\
    hello world\", 19)); // []\nvar_dump(select_words(\"hello world\", 20)); // []\n\
    var_dump(select_words(\"hello world\", 21)); // []\nvar_dump(select_words(\"hello\
    \ world\", 22)); // []\nvar_dump(select_words(\"hello world\", 23)); // []\nvar_dump(select_words(\"\
    hello world\", 24)); // []\nvar_dump(select_words(\"hello world\", 25\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpgj8r5erg.php
    on line 44

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        foreach (str_split($word) as $letter)\
    \ {\n            if (in_array($letter, $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count === $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdn6phuxf.php:32\n\
    Stack trace:\n#0 /tmp/tmpdn6phuxf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdn6phuxf.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (count_consonants($word)\
    \ === $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp1frzu7r7.php:12\nStack trace:\n#0 /tmp/tmp1frzu7r7.php(20): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp1frzu7r7.php(24): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp1frzu7r7.php(33): test()\n#3 {main}\n  thrown in /tmp/tmp1frzu7r7.php\
    \ on line 12\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $result = [];\n    $words =\
    \ explode(' ', $s);\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgicuxv3r.php:24\n\
    Stack trace:\n#0 /tmp/tmpgicuxv3r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgicuxv3r.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $count++;\n\
    \            }\n        }\n        if ($count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lqma8a7.php:32\n\
    Stack trace:\n#0 /tmp/tmp6lqma8a7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6lqma8a7.php\
    \ on line 32\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $words = explode(' ', $s);\n \
    \ $result = [];\n  foreach ($words as $word) {\n    if (substr_count($word, 'a')\
    \ + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nvar_dump(select_words(\"hello world\", 1) === [\"\
    hello\"]);\nvar_dump(select_words(\"hello world\", 2) === [\"world\"]);\nvar_dump(select_words(\"\
    hello world\", 3) === []);\nvar_dump(select_words(\"hello world\", 4) === []);\n\
    var_dump(select_words(\"hello world\", 5) === []);\nvar_dump(select_words(\"hello\
    \ world\", 6) === []);\nvar_dump(select_words(\"hello world\", 7) === []);\nvar_dump(select_words(\"\
    hello world\", 8) === []);\nvar_dump(select_words(\"hello world\", 9) === []);\n\
    var_dump(select_words(\"hello world\", 10) === []);\nvar_dump(select_words(\"\
    hello world\", 11) === []);\nvar_dump(select_words(\"hello world\", 12) === []);\n\
    var_dump(select_words(\"hello world\", 13) === []);\nvar_dump(select_words(\"\
    hello world\", 14) === []);\nvar_dump(select_words(\"hello world\", 15) === []);\n\
    var_dump(select_words(\"hello world\", 16) === []);\nvar_dump(select_words(\"\
    hello world\", 17) === []);\nvar_dump(select_words(\"hello world\", 18) === []);\n\
    var_dump(select_words(\"hello world\", 19) === []);\nvar_dump(select_words(\"\
    hello world\", 20) === []);\nvar_dump(select_words(\"hello world\", 21) === []);\n\
    var_dump(select_words(\"hello world\", 22) === []);\nvar_dump(select_words(\"\
    hello world\", 23) === []);\nvar_dump(select\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp3p7nwgm0.php
    on line 43

    '
  timestamp: 1660004008
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"\", 0));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(0) \"\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp02yl5e1t.php:25\nStack trace:\n#0 /tmp/tmp02yl5e1t.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp02yl5e1t.php on line 25\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u2pv_yv.php:24\n\
    Stack trace:\n#0 /tmp/tmp2u2pv_yv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2u2pv_yv.php\
    \ on line 24\n"
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nvar_dump(select_words(\"hello world\"\
    , 1)); // [\"hello\"]\nvar_dump(select_words(\"hello world\", 2)); // [\"world\"\
    ]\nvar_dump(select_words(\"hello world\", 3)); // []\nvar_dump(select_words(\"\
    hello world\", 4)); // []\nvar_dump(select_words(\"hello world\", 5)); // []\n\
    var_dump(select_words(\"hello world\", 6)); // []\nvar_dump(select_words(\"hello\
    \ world\", 7)); // []\nvar_dump(select_words(\"hello world\", 8)); // []\nvar_dump(select_words(\"\
    hello world\", 9)); // []\nvar_dump(select_words(\"hello world\", 10)); // []\n\
    var_dump(select_words(\"hello world\", 11)); // []\nvar_dump(select_words(\"hello\
    \ world\", 12)); // []\nvar_dump(select_words(\"hello world\", 13)); // []\nvar_dump(select_words(\"\
    hello world\", 14)); // []\nvar_dump(select_words(\"hello world\", 15)); // []\n\
    var_dump(select_words(\"hello world\", 16)); // []\nvar_dump(select_words(\"hello\
    \ world\", 17)); // []\nvar_dump(select_words(\"hello world\", 18)); // []\nvar_dump(select_words(\"\
    hello world\", 19)); // []\nvar_dump(select_words(\"hello world\", 20)); // []\n\
    var_dump(select_words(\"hello world\", 21)); // []\nvar_dump(select_words(\"hello\
    \ world\", 22)); // []\nvar_dump(select_words(\"hello world\", 23)); // []\nvar_dump(select_words(\"\
    hello world\", 24)); // []\nvar_dump(select_words(\"hello world\", 25\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp4jk44gj4.php
    on line 44

    '
  timestamp: 1660004008
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\nfunction select_words($s, $n) {\n  $s = str_replace(' ', '', $s);\n\
    \  $s = str_split($s);\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $consonants\
    \ = [];\n  foreach ($s as $letter) {\n    if (!in_array($letter, $vowels)) {\n\
    \      $consonants[] = $letter;\n    }\n  }\n  $consonants = array_count_values($consonants);\n\
    \  $consonants = array_filter($consonants, function($v) use ($n) {\n    return\
    \ $v === $n;\n  });\n  return $consonants;\n}\n\n$s = 'hello world';\n$n = 2;\n\
    print_r(select_words($s, $n));\n\n$s = 'hello world';\n$n = 3;\nprint_r(select_words($s,\
    \ $n));\n\n$s = 'hello world';\n$n = 4;\nprint_r(select_words($s, $n));\n\n$s\
    \ = 'hello world';\n$n = 5;\nprint_r(select_words($s, $n));\n\n$s = 'hello world';\n\
    $n = 6;\nprint_r(select_words($s, $n));\n\n$s = 'hello world';\n$n = 7;\nprint_r(select_words($s,\
    \ $n));\n\n$s = 'hello world';\n$n = 8;\nprint_r(select_words($s, $n));\n\n$s\
    \ = 'hello world';\n$n = 9;\nprint_r(select_words($s, $n));\n\n$s = 'hello world';\n\
    $n = 10;\nprint_r(select_words($s, $n));\n\n$s = 'hello world';\n$n = 11;\nprint_r(select_words($s,\
    \ $n));\n\n$s = 'hello world';\n$n = 12;\nprint_r(select_words($s, $n));\n\n$s\
    \ = 'hello world';\n$n = 13;\nprint_r(select_words($s, $n));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n    [l] => 3\n)\nArray\n(\n)\nArray\n(\n)\nArray\n\
    (\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n\
    (\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn63y1oj.php:77\n\
    Stack trace:\n#0 /tmp/tmpvn63y1oj.php(86): test()\n#1 {main}\n  thrown in /tmp/tmpvn63y1oj.php\
    \ on line 77\n"
  timestamp: 1660004008
