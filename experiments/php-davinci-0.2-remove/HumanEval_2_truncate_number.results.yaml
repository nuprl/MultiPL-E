language: php
name: HumanEval_2_truncate_number
results:
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    if (count($parts) == 1) {\n        return 0;\n\
    \    }\n    return (float)$parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9czkv851.php:20\n\
    Stack trace:\n#0 /tmp/tmp9czkv851.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9czkv851.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    if (count($parts) == 1) {\n        return 0;\n\
    \    }\n    return '0.' . $parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqoju7h3n.php:20\n\
    Stack trace:\n#0 /tmp/tmpqoju7h3n.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqoju7h3n.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    return '0.' . $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcdgakms.php:17\n\
    Stack trace:\n#0 /tmp/tmppcdgakms.php(22): test()\n#1 {main}\n  thrown in /tmp/tmppcdgakms.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.'.$number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdtg4rrg.php:17\n\
    Stack trace:\n#0 /tmp/tmpfdtg4rrg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfdtg4rrg.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_position\
    \ = strpos($number, '.');\n    if ($decimal_position === false) {\n        return\
    \ 0;\n    }\n    return substr($number, $decimal_position + 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ij6rfkm.php:20\n\
    Stack trace:\n#0 /tmp/tmp8ij6rfkm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8ij6rfkm.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number_parts\
    \ = explode('.', $number);\n  return $number_parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijl2mg4m.php:17\n\
    Stack trace:\n#0 /tmp/tmpijl2mg4m.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpijl2mg4m.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_pos\
    \ = strpos($number, '.');\n    if ($decimal_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $decimal_pos + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb20hj_c8.php:20\n\
    Stack trace:\n#0 /tmp/tmpb20hj_c8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb20hj_c8.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number\
    \ = $number - (int)$number;\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_point_pos\
    \ = strpos($number, '.');\n    if ($decimal_point_pos === false) {\n        return\
    \ 0;\n    }\n    $decimal_part = substr($number, $decimal_point_pos + 1);\n  \
    \  return (float)$decimal_part;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0szqe4nl.php:21\n\
    Stack trace:\n#0 /tmp/tmp0szqe4nl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0szqe4nl.php\
    \ on line 21\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwaum7wou.php:17\n\
    Stack trace:\n#0 /tmp/tmpwaum7wou.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpwaum7wou.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number_parts = explode('.', $number);\n\
    \    return $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpcegsrm.php:16\n\
    Stack trace:\n#0 /tmp/tmpxpcegsrm.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxpcegsrm.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    return\
    \ $number - floor($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssphb0ko.php:15\n\
    Stack trace:\n#0 /tmp/tmpssphb0ko.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpssphb0ko.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssphb0ko.php:15\n\
    Stack trace:\n#0 /tmp/tmpssphb0ko.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpssphb0ko.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    // Your code here\n    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_a2d6wu.php:18\n\
    Stack trace:\n#0 /tmp/tmpx_a2d6wu.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpx_a2d6wu.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $dot_pos\
    \ = strpos($number, '.');\n    if ($dot_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $dot_pos + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xkxioaf.php:20\n\
    Stack trace:\n#0 /tmp/tmp5xkxioaf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xkxioaf.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number_parts = explode('.', $number);\n\
    \  return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd1g5vdx.php:16\n\
    Stack trace:\n#0 /tmp/tmpqd1g5vdx.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqd1g5vdx.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    if (count($parts) > 1) {\n        return '0.'\
    \ . $parts[1];\n    }\n    return '0';\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyicuwp57.php:20\n\
    Stack trace:\n#0 /tmp/tmpyicuwp57.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpyicuwp57.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    if (count($number) > 1) {\n        return '0.'\
    \ . $number[1];\n    }\n    return 0;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhw4hrun.php:20\n\
    Stack trace:\n#0 /tmp/tmpfhw4hrun.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfhw4hrun.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjjrsqoj.php:18\n\
    Stack trace:\n#0 /tmp/tmpbjjrsqoj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbjjrsqoj.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - (int)$number;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number_parts = explode('.', $number);\n\
    \    return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxfe7r4x.php:16\n\
    Stack trace:\n#0 /tmp/tmpxxfe7r4x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxxfe7r4x.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    // your code here\n    $number = strval($number);\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4q6k908.php:18\n\
    Stack trace:\n#0 /tmp/tmpd4q6k908.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpd4q6k908.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    return '0.' . $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcdgakms.php:17\n\
    Stack trace:\n#0 /tmp/tmppcdgakms.php(22): test()\n#1 {main}\n  thrown in /tmp/tmppcdgakms.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzp0l497.php:15\n\
    Stack trace:\n#0 /tmp/tmphzp0l497.php(20): test()\n#1 {main}\n  thrown in /tmp/tmphzp0l497.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number_parts = explode('.', $number);\n\
    \    return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxfe7r4x.php:16\n\
    Stack trace:\n#0 /tmp/tmpxxfe7r4x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxxfe7r4x.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6ahz_hx.php:20\n\
    Stack trace:\n#0 /tmp/tmpv6ahz_hx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpv6ahz_hx.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_point_pos\
    \ = strpos($number, '.');\n    if ($decimal_point_pos === false) {\n        return\
    \ 0;\n    }\n    return substr($number, $decimal_point_pos + 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tkvpwuj.php:20\n\
    Stack trace:\n#0 /tmp/tmp4tkvpwuj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4tkvpwuj.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    return '0.' . $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcdgakms.php:17\n\
    Stack trace:\n#0 /tmp/tmppcdgakms.php(22): test()\n#1 {main}\n  thrown in /tmp/tmppcdgakms.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $dot_pos\
    \ = strpos($number, '.');\n    if ($dot_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $dot_pos + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xkxioaf.php:20\n\
    Stack trace:\n#0 /tmp/tmp5xkxioaf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xkxioaf.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    if (count($parts) == 1) {\n        return 0;\n\
    \    }\n    return (float)$parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9czkv851.php:20\n\
    Stack trace:\n#0 /tmp/tmp9czkv851.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9czkv851.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_point_pos\
    \ = strpos($number, '.');\n    if ($decimal_point_pos === false) {\n        return\
    \ 0;\n    }\n    return substr($number, $decimal_point_pos);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3xma1n7.php:20\n\
    Stack trace:\n#0 /tmp/tmpi3xma1n7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpi3xma1n7.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $dot_pos\
    \ = strpos($number, '.');\n    if ($dot_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $dot_pos + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xkxioaf.php:20\n\
    Stack trace:\n#0 /tmp/tmp5xkxioaf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xkxioaf.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (float)$number;\n  $number =\
    \ $number - floor($number);\n  return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    if (count($number) == 1) {\n        return 0;\n\
    \    }\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_bt8fmm.php:20\n\
    Stack trace:\n#0 /tmp/tmph_bt8fmm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmph_bt8fmm.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number_parts = explode('.', $number);\n\
    \    return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxfe7r4x.php:16\n\
    Stack trace:\n#0 /tmp/tmpxxfe7r4x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxxfe7r4x.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.'.$number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdtg4rrg.php:17\n\
    Stack trace:\n#0 /tmp/tmpfdtg4rrg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfdtg4rrg.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssphb0ko.php:15\n\
    Stack trace:\n#0 /tmp/tmpssphb0ko.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpssphb0ko.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number_parts = explode('.', $number);\n\
    \  return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd1g5vdx.php:16\n\
    Stack trace:\n#0 /tmp/tmpqd1g5vdx.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqd1g5vdx.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number_parts = explode('.', $number);\n\
    \    return $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpcegsrm.php:16\n\
    Stack trace:\n#0 /tmp/tmpxpcegsrm.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpxpcegsrm.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.'.$number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphcdxpnt4.php:17\n\
    Stack trace:\n#0 /tmp/tmphcdxpnt4.php(22): test()\n#1 {main}\n  thrown in /tmp/tmphcdxpnt4.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal\
    \ = strpos($number, '.');\n    if ($decimal === false) {\n        return 0;\n\
    \    }\n    return substr($number, $decimal + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6o_hml6f.php:20\n\
    Stack trace:\n#0 /tmp/tmp6o_hml6f.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6o_hml6f.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number_parts = explode('.', $number);\n\
    \  return $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53_64tf5.php:16\n\
    Stack trace:\n#0 /tmp/tmp53_64tf5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp53_64tf5.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    if (count($parts) == 1) {\n        return 0;\n\
    \    }\n    return (float)$parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9czkv851.php:20\n\
    Stack trace:\n#0 /tmp/tmp9czkv851.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9czkv851.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_point_pos\
    \ = strpos($number, '.');\n    if ($decimal_point_pos === false) {\n        return\
    \ 0;\n    }\n    return substr($number, $decimal_point_pos + 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4tkvpwuj.php:20\n\
    Stack trace:\n#0 /tmp/tmp4tkvpwuj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4tkvpwuj.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.'.$number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdtg4rrg.php:17\n\
    Stack trace:\n#0 /tmp/tmpfdtg4rrg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfdtg4rrg.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    return\
    \ $number - (int)$number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_point_position\
    \ = strpos($number, '.');\n    if ($decimal_point_position === false) {\n    \
    \    return 0;\n    }\n    $decimal_part = substr($number, $decimal_point_position\
    \ + 1);\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsk5tccw.php:21\n\
    Stack trace:\n#0 /tmp/tmpcsk5tccw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcsk5tccw.php\
    \ on line 21\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return $number[1];\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj5_0z_s.php:18\n\
    Stack trace:\n#0 /tmp/tmpuj5_0z_s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpuj5_0z_s.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwaum7wou.php:17\n\
    Stack trace:\n#0 /tmp/tmpwaum7wou.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpwaum7wou.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number_parts\
    \ = explode('.', $number);\n    return '0.' . $number_parts[1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoejjs15t.php:17\n\
    Stack trace:\n#0 /tmp/tmpoejjs15t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpoejjs15t.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return $number[1];\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj5_0z_s.php:18\n\
    Stack trace:\n#0 /tmp/tmpuj5_0z_s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpuj5_0z_s.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_point_position\
    \ = strpos($number, '.');\n    if ($decimal_point_position === false) {\n    \
    \    return 0;\n    }\n    return substr($number, $decimal_point_position);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b7sl__l.php:20\n\
    Stack trace:\n#0 /tmp/tmp_b7sl__l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_b7sl__l.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.'.$number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdtg4rrg.php:17\n\
    Stack trace:\n#0 /tmp/tmpfdtg4rrg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpfdtg4rrg.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99nu4o87.php:15\n\
    Stack trace:\n#0 /tmp/tmp99nu4o87.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp99nu4o87.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = explode('.', $number);\n  \
    \  return $number[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_du22hp.php:16\n\
    Stack trace:\n#0 /tmp/tmp3_du22hp.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3_du22hp.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number_parts = explode('.', $number);\n\
    \  return $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53_64tf5.php:16\n\
    Stack trace:\n#0 /tmp/tmp53_64tf5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp53_64tf5.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  $number = '0.'.$number[1];\n  return $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q173m7o.php:18\n\
    Stack trace:\n#0 /tmp/tmp2q173m7o.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2q173m7o.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number_parts = explode('.', $number);\n\
    \  return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd1g5vdx.php:16\n\
    Stack trace:\n#0 /tmp/tmpqd1g5vdx.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqd1g5vdx.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwaum7wou.php:17\n\
    Stack trace:\n#0 /tmp/tmpwaum7wou.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpwaum7wou.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal_position\
    \ = strpos($number, '.');\n    if ($decimal_position === false) {\n        return\
    \ 0;\n    }\n    $decimal_part = substr($number, $decimal_position + 1);\n   \
    \ return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp462iazz9.php:21\n\
    Stack trace:\n#0 /tmp/tmp462iazz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp462iazz9.php\
    \ on line 21\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    if (count($parts) == 1) {\n        return 0;\n\
    \    }\n    return (float)$parts[1];\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9czkv851.php:20\n\
    Stack trace:\n#0 /tmp/tmp9czkv851.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9czkv851.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    // Write your code here\n    // To print\
    \ results to the standard output you can use print\n    // Example: print \"Hello\
    \ world!\";\n    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.'.$number[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqrvm7iv.php:20\n\
    Stack trace:\n#0 /tmp/tmpaqrvm7iv.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpaqrvm7iv.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssphb0ko.php:15\n\
    Stack trace:\n#0 /tmp/tmpssphb0ko.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpssphb0ko.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number_parts\
    \ = explode('.', $number);\n    if (count($number_parts) == 1) {\n        return\
    \ 0;\n    }\n    return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcef9stmr.php:20\n\
    Stack trace:\n#0 /tmp/tmpcef9stmr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcef9stmr.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    // your code here\n    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    if (count($number) > 1) {\n       \
    \ return '0.' . $number[1];\n    } else {\n        return '0';\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3ovcznn.php:22\n\
    Stack trace:\n#0 /tmp/tmpp3ovcznn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp3ovcznn.php\
    \ on line 22\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // your code here\n  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.'.$number[1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobmq8dh9.php:18\n\
    Stack trace:\n#0 /tmp/tmpobmq8dh9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpobmq8dh9.php\
    \ on line 18\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $index =\
    \ strpos($number, '.');\n  if ($index === false) {\n    return 0;\n  }\n  return\
    \ substr($number, $index + 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphreqcotu.php:20\n\
    Stack trace:\n#0 /tmp/tmphreqcotu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphreqcotu.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzp0l497.php:15\n\
    Stack trace:\n#0 /tmp/tmphzp0l497.php(20): test()\n#1 {main}\n  thrown in /tmp/tmphzp0l497.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $dot_pos\
    \ = strpos($number, '.');\n    if ($dot_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $dot_pos);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zbut__w.php:20\n\
    Stack trace:\n#0 /tmp/tmp9zbut__w.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9zbut__w.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimals\
    \ = 0;\n    if (strpos($number, '.') !== false) {\n        list($integer, $decimals)\
    \ = explode('.', $number);\n        $decimals = '0.'.$decimals;\n    }\n    return\
    \ $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbsogxx9.php:21\n\
    Stack trace:\n#0 /tmp/tmpqbsogxx9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqbsogxx9.php\
    \ on line 21\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $decimal\
    \ = explode('.', $number);\n    return $decimal[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvglayk4f.php:17\n\
    Stack trace:\n#0 /tmp/tmpvglayk4f.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvglayk4f.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $parts\
    \ = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaefyhoj2.php:17\n\
    Stack trace:\n#0 /tmp/tmpaefyhoj2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpaefyhoj2.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number_parts = explode('.', $number);\n\
    \  return '0.' . $number_parts[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqd1g5vdx.php:16\n\
    Stack trace:\n#0 /tmp/tmpqd1g5vdx.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpqd1g5vdx.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number_parts\
    \ = explode('.', $number);\n    return '0.' . $number_parts[1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoejjs15t.php:17\n\
    Stack trace:\n#0 /tmp/tmpoejjs15t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpoejjs15t.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (float)$number;\n    $number\
    \ = $number - (int)$number;\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    return $number - floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  // your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssphb0ko.php:15\n\
    Stack trace:\n#0 /tmp/tmpssphb0ko.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpssphb0ko.php\
    \ on line 15\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $pos\
    \ = strpos($number, '.');\n    if ($pos === false) {\n        return 0;\n    }\n\
    \    return substr($number, $pos + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprozdlz2r.php:20\n\
    Stack trace:\n#0 /tmp/tmprozdlz2r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprozdlz2r.php\
    \ on line 20\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $number =\
    \ explode('.', $number);\n  return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckrhoz8d.php:17\n\
    Stack trace:\n#0 /tmp/tmpckrhoz8d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpckrhoz8d.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number_array = explode('.', $number);\n\
    \    return $number_array[1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfib73s1.php:16\n\
    Stack trace:\n#0 /tmp/tmprfib73s1.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprfib73s1.php\
    \ on line 16\n"
  timestamp: 1659730899
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  return $number - floor($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $number = (string)$number;\n  $parts =\
    \ explode('.', $number);\n  return '0.' . $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpheo7klf1.php:17\n\
    Stack trace:\n#0 /tmp/tmpheo7klf1.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpheo7klf1.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $number\
    \ = explode('.', $number);\n    return '0.' . $number[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3yqj0ut.php:17\n\
    Stack trace:\n#0 /tmp/tmpb3yqj0ut.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpb3yqj0ut.php\
    \ on line 17\n"
  timestamp: 1659730899
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $number = (string)$number;\n    $dot_pos\
    \ = strpos($number, '.');\n    if ($dot_pos === false) {\n        return 0;\n\
    \    }\n    return substr($number, $dot_pos + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xkxioaf.php:20\n\
    Stack trace:\n#0 /tmp/tmp5xkxioaf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xkxioaf.php\
    \ on line 20\n"
  timestamp: 1659730899
