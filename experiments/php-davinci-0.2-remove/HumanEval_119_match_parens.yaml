name: HumanEval_119_match_parens
language: php
prompt: "<?php\n// You are given a list of two strings, both strings consist of open\n\
  // parentheses '(' or close parentheses ')' only.\n// Your job is to check if it\
  \ is possible to concatenate the two strings in\n// some order, that the resulting\
  \ string will be good.\n// A string S is considered to be good if and only if all\
  \ parentheses in S\n// are balanced. For example: the string '(())()' is good, while\
  \ the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n// Examples:\nfunction match_parens($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\"\
  )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"()\", \"\
  ())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  (()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(\"((((\", \"((())\")) !== \"No\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !==\
  \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  (\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $lst = explode(',', $lst);\n    $lst[0] = str_split($lst[0]);\n\
    \    $lst[1] = str_split($lst[1]);\n    $lst[0] = array_count_values($lst[0]);\n\
    \    $lst[1] = array_count_values($lst[1]);\n    if (isset($lst[0]['(']) && isset($lst[1]['(']))\
    \ {\n        $lst[0]['('] = $lst[0]['('] + $lst[1]['('];\n    } elseif (isset($lst[1]['(']))\
    \ {\n        $lst[0]['('] = $lst[1]['('];\n    }\n    if (isset($lst[0][')'])\
    \ && isset($lst[1][')'])) {\n        $lst[0][')'] = $lst[0][')'] + $lst[1][')'];\n\
    \    } elseif (isset($lst[1][')'])) {\n        $lst[0][')'] = $lst[1][')'];\n\
    \    }\n    if ($lst[0]['('] == $lst[0][')']) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\n", "    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str1_close && $str2_open !=\
    \ $str2_close) {\n        return 'No';\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'No';\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $diff = $str1_open - $str1_close;\n            if ($str2_open\
    \ >= $diff) {\n                return 'Yes';\n            } else {\n         \
    \       return 'No';\n            }\n        } elseif ($str1_open < $str1_close)\
    \ {\n            $diff = $str1_close - $str1_open;\n            if ($str2_close\
    \ >= $diff) {\n                return 'Yes';\n            } else {\n         \
    \       return 'No';\n            }\n        }\n    }\n}", "    $l = $lst[0];\n\
    \    $r = $lst[1];\n    $l_count = substr_count($l, '(');\n    $r_count = substr_count($r,\
    \ ')');\n    if ($l_count === $r_count) {\n        return 'Yes';\n    }\n    return\
    \ 'No';\n}\n", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $parens = 0;\n    for ($i=0; $i < $str1_len;\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $parens++;\n        }\
    \ else {\n            $parens--;\n        }\n        if ($parens < 0) {\n    \
    \        return 'No';\n        }\n    }\n    for ($i=0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $parens++;\n        } else {\n\
    \            $parens--;\n        }\n        if ($parens < 0) {\n            return\
    \ 'No';\n        }\n    }\n    if ($parens == 0) {\n        return 'Yes';\n  \
    \  } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [['(())', '()()'],\
    \ 'Yes'],\n    [['(()', '()()'], 'No'],\n    [['(())', '())('], 'No'],\n    [['()()',\
    \ '()()'], 'Yes'],\n    [['()()', '())('], 'No'],\n    [['()()', '()()()'], 'Yes'],\n\
    \    [['()()', '()())('], 'No'],\n    [['()()', '())(()'], 'No'],\n    [['()()',\
    \ '())(())'], 'No'],\n    [['()()', '())(())('], 'No'],\n    [['()()', '())(())(()'],\
    \ 'No'],\n    [['()()', '())(())(())'], 'No'],\n    [['()()', '())(())(())('],\
    \ 'No'],\n    [['()()', '())(())(())(()'], 'No'],\n    [['()()', '())(()", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count == 0 && $str2_count > 0) {\n        if (strpos($str2,\
    \ ')') !== false) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } elseif ($str1_count > 0 && $str2_count == 0)\
    \ {\n        if (strpos($str1, '(') !== false) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } else {\n       \
    \ return 'No';\n    }\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n   \
    \ $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open =\
    \ substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n   \
    \ $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str1_close) {\n        if\
    \ ($str2_open > $str2_close) {\n            return 'Yes';\n        } else {\n\
    \            return 'No';\n        }\n    } elseif ($str2_open == $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            return 'Yes';\n    \
    \    } else {\n            return 'No';\n        }\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$tests = [\n    [\n        'input' => [\n            '()',\n\
    \            '()',\n        ],\n        'expected' => 'Yes',\n    ],\n    [\n\
    \        'input' => [\n            '((',\n            '))',\n        ],\n    \
    \    'expected' => 'Yes',\n    ],\n    [\n        'input' => [\n            '()',\n\
    \            '((',\n        ],\n        'expected' => 'No',\n    ],\n    [\n \
    \       'input' => [\n            '((',\n            '()',\n        ],\n     \
    \   'expected' => 'Yes',\n    ],\n    [\n        'input' => [\n            '((()',\n\
    \            '()))',\n        ],\n        'expected' => 'Yes',\n    ],\n    [\n\
    \        'input' => [\n            '((()',\n            '()()',\n        ],\n\
    \        'expected' => 'Yes',\n    ],\n    [\n        'input' => [", "    $lst\
    \ = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == \"(\"\
    ) {\n            $str1_open++;\n        } else {\n            $str1_open--;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open\
    \ == abs($str2_open)) {\n            return \"Yes\";\n        }\n    } elseif\
    \ ($str1_open < 0 && $str2_open > 0) {\n        if (abs($str1_open) == $str2_open)\
    \ {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}", " \
    \   $l = $lst[0];\n    $r = $lst[1];\n    $l_cnt = substr_count($l, '(');\n  \
    \  $r_cnt = substr_count($r, ')');\n    if ($l_cnt == $r_cnt) {\n        return\
    \ 'Yes';\n    }\n    return 'No';\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n        \
    \    $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n\
    \        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else {\n\
    \            $str2_open--;\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return 'No';\n    }\n    if ($str1_open > 0 && $str2_open >\
    \ 0) {\n        return 'No';\n    }\n    return 'Yes';\n}\n\n$lst = ['(())', '()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['()', '()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', ')('];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['(()))', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['()', '((()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['((()))', '()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['((()))', '((()))'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['((()))', '((()))'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n  \
    \  $str2_len = strlen($str2);\n    $str1_parens = 0;\n    $str2_parens = 0;\n\
    \    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_parens++;\n        } else {\n            $str1_parens--;\n   \
    \     }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_parens++;\n        } else {\n            $str2_parens--;\n\
    \        }\n    }\n    if ($str1_parens == 0 && $str2_parens == 0) {\n       \
    \ return \"Yes\";\n    } elseif ($str1_parens == 0 && $str2_parens < 0) {\n  \
    \      return \"Yes\";\n    } elseif ($str1_parens > 0 && $str2_parens == 0) {\n\
    \        return \"Yes\";\n    } elseif ($str1_parens < 0 && $str2_parens == 0)\
    \ {\n        return \"Yes\";\n    } elseif ($str1_parens < 0 && $str2_parens >\
    \ 0) {\n        return \"Yes\";\n    } elseif ($str1_parens > 0 && $str2_parens\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\n$lst = [\"()\", \"()\"];\necho match_parens($lst) . PHP_EOL;\n$lst = [\"(())\"\
    , \"()\"];\necho match_parens($lst) . PHP_EOL;\n$lst = [\"()\", \"(())\"];\necho\
    \ match_parens($lst) . PHP_EOL;\n$lst = [\"(()\", \"())\"];\necho match_parens($lst)\
    \ . PHP_E", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n     \
    \       $str1_open++;\n        } else {\n            $str1_open--;\n        }\n\
    \    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return 'Yes';\n        } else {\n        \
    \    return 'No';\n        }\n    } else {\n        return 'No';\n    }\n}\n\n\
    $tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '()()'], 'No'],\n   \
    \ [['(()', '()))'], 'No'],\n    [['(()', '())('], 'Yes'],\n    [['(()', '()))'],\
    \ 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()',\
    \ '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n    [['", "    $lst = explode(',',\
    \ $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open\
    \ - $str1_close;\n    $str2_diff = $str2_open - $str2_close;\n    $str1_open_pos\
    \ = strpos($str1, '(');\n    $str1_close_pos = strpos($str1, ')');\n    $str2_open_pos\
    \ = strpos($str2, '(');\n    $str2_close_pos = strpos($str2, ')');\n    $str1_open_pos_last\
    \ = strrpos($str1, '(');\n    $str1_close_pos_last = strrpos($str1, ')');\n  \
    \  $str2_open_pos_last = strrpos($str2, '(');\n    $str2_close_pos_last = strrpos($str2,\
    \ ')');\n    if ($str1_diff == 0 && $str2_diff == 0) {\n        return 'Yes';\n\
    \    } elseif ($str1_diff == 0 && $str2_diff != 0) {\n        if ($str2_open_pos_last\
    \ > $str2_close_pos_last) {\n            return 'Yes';\n        } else {\n   \
    \         return 'No';\n        }\n    } elseif ($str1_diff != 0 && $str2_diff\
    \ == 0) {\n        if ($str1_open_pos < $str1_close_pos) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No';\n        }\n    } elseif\
    \ ($str1_diff != 0 && $str2", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n        \
    \    $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n\
    \        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else {\n\
    \            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_open < 0 && $str2_open\
    \ < 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\n$lst = [\"())(()\", \"()()()\"];\necho match_parens($lst);", "    $lst = explode(',',\
    \ $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str1_close = 0;\n        } elseif ($str1_open <\
    \ $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n      \
    \      $str1_open = 0;\n        }\n        if ($str2_open > $str2_close) {\n \
    \           $str2_open = $str2_open - $str2_close;\n            $str2_close =\
    \ 0;\n        } elseif ($str2_open < $str2_close) {\n            $str2_close =\
    \ $str2_close - $str2_open;\n            $str2_open = 0;\n        }\n        if\
    \ ($str1_open == $str2_close && $str2_open == $str1_close) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No", "    $str1 = $lst[0];\n \
    \   $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close\
    \ = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else if ($str1_open == $str1_close && $str2_open\
    \ > $str2_close) {\n        if ($str2_open - $str2_close == $str1_open) {\n  \
    \          return 'Yes';\n        } else {\n            return 'No';\n       \
    \ }\n    } else if ($str1_open == $str1_close && $str2_open < $str2_close) {\n\
    \        if ($str1_open - $str1_close == $str2_close) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } else if ($str1_open\
    \ > $str1_close && $str2_open == $str2_close) {\n        if ($str1_open - $str1_close\
    \ == $str2_open) {\n            return 'Yes';\n        } else {\n            return\
    \ 'No';\n        }\n    } else if ($str1_open < $str1_close && $str2_open == $str2_close)\
    \ {\n        if ($str2_open - $str2_close", "    $lst = explode(',', $lst);\n\
    \    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(())',\
    \ '()))'], 'No'],\n    [['()', '()()'], 'Yes'],\n    [['()', ')('], 'No'],\n \
    \   [['(()', '()'], 'Yes'],\n    [['(()', ')('], 'No'],\n    [['()', ')('], 'No'],\n\
    \    [['()', '()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['(()', '()()'],\
    \ 'Yes'],\n    [['()()()', '()()()'], 'Yes'],\n    [['()()()', '()())('], 'No'],\n\
    \    [['()()()', '()()()()'], 'Yes'],\n    [['()()()', '()()())('], 'No'],\n \
    \   [['()()()', '()()()()()'], 'Yes'],\n    [['()()()', '()()()())('], 'No'],\n\
    \    [['()()()', '()()()()()()'], 'Yes'],\n    [['()()()", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close\
    \ = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n \
    \   $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } else if ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ else if ($str1_open != $str1_close && $str2_open == $str2_close) {\n       \
    \ return 'No';\n    } else if ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $diff = $str1_open -\
    \ $str1_close;\n            if ($str2_open >= $diff) {\n                return\
    \ 'Yes';\n            } else {\n                return 'No';\n            }\n\
    \        } else if ($str1_open < $str1_close) {\n            $diff = $str1_close\
    \ - $str1_open;\n            if ($str2_close >= $diff) {\n                return\
    \ 'Yes';\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n}", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == \"(\") {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_open++;\n    \
    \    } else {\n            $str2_open--;\n        }\n    }\n    if ($str1_open\
    \ == 0 && $str2_open == 0) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open == abs($str2_open)) {\n   \
    \         return \"Yes\";\n        } else {\n            return \"No\";\n    \
    \    }\n    } elseif ($str1_open < 0 && $str2_open > 0) {\n        if (abs($str1_open)\
    \ == $str2_open) {\n            return \"Yes\";\n        } else {\n          \
    \  return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n}",
  "    $l = $lst[0];\n    $r = $lst[1];\n    $l_cnt = 0;\n    $r_cnt = 0;\n    for\
    \ ($i=0; $i < strlen($l); $i++) {\n        if ($l[$i] == '(') {\n            $l_cnt++;\n\
    \        } else {\n            $l_cnt--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($r); $i++) {\n        if ($r[$i] == '(') {\n            $r_cnt++;\n\
    \        } else {\n            $r_cnt--;\n        }\n    }\n    if ($l_cnt ==\
    \ 0 && $r_cnt == 0) {\n        return \"Yes\";\n    } elseif ($l_cnt == $r_cnt)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    \n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '()'], 'Yes'],\n  \
    \  [['(()', '())'], 'No'],\n    [['()()', '()()'], 'Yes'],\n    [['()()', '())('],\
    \ 'No'],\n    [['()()', '()()()'], 'Yes'],\n    [['()()', '()())('], 'No'],\n\
    \    [['()()', '()()()()'], 'Yes'],\n    [['()()', '()()()()()'], 'Yes'],\n  \
    \  [['()()', '()()()()()()'], 'Yes'],\n    [['()()', '()()()()()()()'], 'Yes'],\n\
    \    [['()()', '()()()()()()()()'], 'Yes'],\n    [['()()', '()()()()()()()()()'],\
    \ 'Yes'],\n    [['()()', '()()()()()()()()()()'], 'Yes'],\n    [['()()', '()()()()()()()",
  "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    if ($str1_balance == 0 && $str2_balance == 0) {\n\
    \        return 'Yes';\n    } elseif ($str1_balance == 0 && $str2_balance_abs\
    \ == $str1_len) {\n        return 'Yes';\n    } elseif ($str2_balance == 0 &&\
    \ $str1_balance_abs == $str2_len) {\n        return 'Yes';\n    } elseif ($str1_balance_abs\
    \ == $str2_balance_abs) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_parens = 0;\n    $str2_parens = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == \"(\") {\n           \
    \ $str1_parens++;\n        } else {\n            $str1_parens--;\n        }\n\
    \    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == \"\
    (\") {\n            $str2_parens++;\n        } else {\n            $str2_parens--;\n\
    \        }\n    }\n    if ($str1_parens == 0 && $str2_parens == 0) {\n       \
    \ return \"Yes\";\n    } elseif ($str1_parens == 0 && $str2_parens < 0) {\n  \
    \      return \"Yes\";\n    } elseif ($str1_parens > 0 && $str2_parens == 0) {\n\
    \        return \"Yes\";\n    } elseif ($str1_parens < 0 && $str2_parens == 0)\
    \ {\n        return \"Yes\";\n    } elseif ($str1_parens < 0 && $str2_parens <\
    \ 0) {\n        if ($str1_parens + $str2_parens == 0) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($str1_parens > 0 && $str2_parens > 0) {\n        if ($str1_parens + $str2_parens\
    \ == 0) {\n            return \"Yes\";\n        } else {\n            return \"\
    No\";\n        }\n    } else {\n        return \"No\";\n    }\n}\n\n$fptr = fopen(getenv(\"\
    OUTPUT_PATH\"), \"w\");\n\n$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin,\
    \ \"%d\\n\", $t);\n\nfor ($t_", "    $open = 0;\n    $close = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $open++;\n            } else {\n\
    \                $close++;\n            }\n        }\n    }\n    if ($open ==\
    \ $close) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n\
    }\n\n$lst = ['(())()', '())'];\necho match_parens($lst);\necho \"\\n\";\n\n$lst\
    \ = ['(())()', '()()'];\necho match_parens($lst);\necho \"\\n\";\n\n$lst = ['()()',\
    \ '()()'];\necho match_parens($lst);\necho \"\\n\";\n\n$lst = ['(())(', '()()'];\n\
    echo match_parens($lst);\necho \"\\n\";\n\n$lst = ['(())(', '()()'];\necho match_parens($lst);\n\
    echo \"\\n\";\n\n$lst = ['(())(', '()()'];\necho match_parens($lst);\necho \"\\\
    n\";\n\n$lst = ['(())(', '()()'];\necho match_parens($lst);\necho \"\\n\";\n\n\
    $lst = ['(())(', '()()'];\necho match_parens($lst);\necho \"\\n\";\n\n$lst = ['(())(',\
    \ '()()'];\necho match_parens($lst);\necho \"\\n\";\n\n$lst = ['(())(', '()()'];\n\
    echo match_parens($lst);\necho \"\\n\";\n\n$lst = ['(())(', '()()'];\necho match_parens($lst);\n\
    echo \"\\n\";\n\n$lst = ['(())(', '()()'];\necho match_parens($lst);\necho \"\\\
    n\";\n\n$lst = ['(())(', '()()'];\necho match_parens($lst);", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_open--;\n        }\n    }\n    if ($str1_open ==\
    \ 0 && $str2_open == 0) {\n        return 'Yes';\n    } elseif ($str1_open ==\
    \ 0 && $str2_open < 0) {\n        return 'Yes';\n    } elseif ($str1_open < 0\
    \ && $str2_open == 0) {\n        return 'Yes';\n    } elseif ($str1_open < 0 &&\
    \ $str2_open < 0) {\n        if ($str1_open + $str2_open == 0) {\n           \
    \ return 'Yes';\n        } else {\n            return 'No';\n        }\n    }\
    \ else {\n        return 'No';\n    }\n}\n$lst = ['()', '()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['()', '(())'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(()', '())'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())', '(())'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(()', '()", "    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        $left += substr_count($str, '(');\n        $right\
    \ += substr_count($str, ')');\n    }\n    return $left == $right ? 'Yes' : 'No';\n\
    }\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str = $str1 . $str2;\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n        if ($str[$i]\
    \ == '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    if ($count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(()',\
    \ '()()'], 'No'],\n    [['(())', '()))'], 'No'],\n    [['(()))', '()()'], 'No'],\n\
    \    [['(()))', '()()('], 'No'],\n    [['(()))', '()()()'], 'Yes'],\n    [['(()))',\
    \ '()()()('], 'No'],\n    [['(()))', '()()()()'], 'Yes'],\n    [['(()))', '()()()()('],\
    \ 'No'],\n    [['(()))', '()()()()()'], 'Yes'],\n    [['(()))', '()()()()()('],\
    \ 'No'],\n    [['(()))', '()()()()()()'], 'Yes'],\n    [['(()))', '()()()()()()('],\
    \ 'No'],\n    [['(()))', '()()()()()()()'], 'Yes'],\n    [['(()))', '()()()()()()()('],\
    \ 'No'],\n    [['(()))', '()()()()()()()()'], 'Yes'],\n    [['(()))', '()()()()()()()()('],\
    \ 'No'],\n    [['(()))', '()()()()()()()()()'], 'Yes'],\n    [['(", "    $lst\
    \ = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open -= $str2_close;\n            $str2_close = 0;\n  \
    \          if ($str2_open == $str1_open) {\n                return 'Yes';\n  \
    \          } else {\n                return 'No';\n            }\n        } elseif\
    \ ($str2_open < $str2_close) {\n            $str2_close -= $str2_open;\n     \
    \       $str2_open = 0;\n            if ($str2_close == $str1_close) {\n     \
    \           return 'Yes';\n            } else {\n                return 'No';\n\
    \            }\n        }\n    } elseif ($str1_open != $str1_close && $str2_open\
    \ == $str2_close) {\n        if ($str1_open > $str1_close) {\n            $str1_open\
    \ -= $str1_close;\n            $str1_close = 0;\n            if ($str1_open ==\
    \ $str2_open) {\n                return 'Yes';\n            } else {\n       \
    \         return 'No';\n            }\n        } elseif ($str1_open < $str1_close)\
    \ {\n            $str1_close -= $str1_open;\n            $str1_open = 0;\n   \
    \         if ($str", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    $str1_balance_abs_even\
    \ = $str1_balance_abs % 2 == 0;\n    $str2_balance_abs_even = $str2_balance_abs\
    \ % 2 == 0;\n    $str1_balance_even = $str1_balance % 2 == 0;\n    $str2_balance_even\
    \ = $str2_balance % 2 == 0;\n    $str1_balance_odd = $str1_balance % 2 == 1;\n\
    \    $str2_balance_odd = $str2_balance % 2 == 1;\n    $str1_balance_zero = $str1_balance\
    \ == 0;\n    $str2_balance_zero = $str2_balance == 0;\n    $str1_balance_pos =\
    \ $str1_balance > 0;\n    $str2_balance_pos = $str2_balance > 0;\n    $str1_balance_neg\
    \ = $str1_balance < 0;\n    $str2_balance_neg = $str2_balance < 0;\n    $str1_balance_pos_even\
    \ = $str1_balance_pos && $str1_balance_even;\n    $str2_balance_pos_even = $str2_balance_pos\
    \ && $str2_balance_even;\n    $str1_balance_neg_even = $str1_balance_neg && $str",
  "    $l = $lst[0];\n    $r = $lst[1];\n    $l_cnt = 0;\n    $r_cnt = 0;\n    for\
    \ ($i=0; $i < strlen($l); $i++) {\n        if ($l[$i] == '(') {\n            $l_cnt++;\n\
    \        } else {\n            $l_cnt--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($r); $i++) {\n        if ($r[$i] == '(') {\n            $r_cnt++;\n\
    \        } else {\n            $r_cnt--;\n        }\n    }\n    if ($l_cnt ==\
    \ 0 && $r_cnt == 0) {\n        return 'Yes';\n    } elseif ($l_cnt == 0 && $r_cnt\
    \ > 0) {\n        return 'No';\n    } elseif ($l_cnt > 0 && $r_cnt == 0) {\n \
    \       return 'No';\n    } elseif ($l_cnt > 0 && $r_cnt > 0) {\n        return\
    \ 'Yes';\n    } elseif ($l_cnt < 0 && $r_cnt == 0) {\n        return 'No';\n \
    \   } elseif ($l_cnt == 0 && $r_cnt < 0) {\n        return 'No';\n    } elseif\
    \ ($l_cnt < 0 && $r_cnt < 0) {\n        return 'Yes';\n    } elseif ($l_cnt <\
    \ 0 && $r_cnt > 0) {\n        return 'Yes';\n    } elseif ($l_cnt > 0 && $r_cnt\
    \ < 0) {\n        return 'Yes';\n    }\n}\n\n$tests = [\n    [\n        'input'\
    \ => ['(())', '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input'\
    \ => ['(())', '())'],\n        'expected' => 'No'\n    ],\n    [\n        'input'\
    \ => ['()()', '()()'],\n        'expected' => 'Yes", "    $lst = explode(',',\
    \ $lst);\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n\
    \    $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    if ($count == 0) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\necho match_parens('(,()');\necho\
    \ match_parens('(,))');\necho match_parens('(),()');\necho match_parens('(),(())');\n\
    echo match_parens('(())(()');\necho match_parens('(())(())');\necho match_parens('(())(())(()');\n\
    echo match_parens('(())(())(())');\necho match_parens('(())(())(())(()');\necho\
    \ match_parens('(())(())(())(())');\necho match_parens('(())(())(())(())(()');\n\
    echo match_parens('(())(())(())(())(())');\necho match_parens('(())(())(())(())(())(()');\n\
    echo match_parens('(())(())(())(())(())(())');\necho match_parens('(())(())(())(())(())(())(()');\n\
    echo match_parens('(())(())(())(())(())(())(())');\necho match_parens('(())(())(())(())(())(())(())(()');\n\
    echo match_parens('(())(())(())(())(())(())(())(())');\necho match_parens('(())(())(())(())(())(())(())(())(()');\n\
    echo match_parens('(())(())(())(())(())(()", "    $lst = explode(',', $lst);\n\
    \    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst[0]\
    \ = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1]['('])) {\n        if ($lst[0]['(']\
    \ == $lst[1]['(']) {\n            return 'Yes';\n        }\n    }\n    if (isset($lst[0][')'])\
    \ && isset($lst[1][')'])) {\n        if ($lst[0][')'] == $lst[1][')']) {\n   \
    \         return 'Yes';\n        }\n    }\n    return 'No';\n}\n", "    $lst =\
    \ explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open\
    \ = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for ($i=0; $i < $str1_len;\
    \ $i++) {\n        if ($str1[$i] == \"(\") {\n            $str1_open++;\n    \
    \    } else {\n            $str1_close++;\n        }\n    }\n    for ($i=0; $i\
    \ < $str2_len; $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_open++;\n\
    \        } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } elseif ($str1_open == $str1_close && $str2_open > $str2_close) {\n      \
    \  if ($str2_open - $str2_close == $str1_open) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open < $str2_close) {\n        if ($str1_open - $str1_close\
    \ == $str2_close) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n    } elseif ($str1_open > $str1_close && $str2_open\
    \ == $str2_close) {\n        if ($str1_open - $str1_close == $str2_open) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }\n    } elseif ($str1_open < $str1_close && $str2_open == $str2_close)\
    \ {\n        if", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len =\
    \ strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open\
    \ = 0;\n    $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len;\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n      \
    \  } else {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i\
    \ < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n\
    \        } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else if ($str1_open == $str1_close && $str2_open != $str2_close) {\n       \
    \ return 'No';\n    } else if ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'No';\n    } else if ($str1_open != $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str1_open > $str1_close) {\n            $str1_open\
    \ -= $str1_close;\n            $str1_close = 0;\n        } else {\n          \
    \  $str1_close -= $str1_open;\n            $str1_open = 0;\n        }\n      \
    \  if ($str2_open > $str2_close) {\n            $str2_open -= $str2_close;\n \
    \           $str2_close = 0;\n        } else {\n            $str2_close -= $str2_open;\n\
    \            $str2_open = 0;\n        }\n        if ($str1_open == $str2_close",
  "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_close++;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else if ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } else if ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } else if ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open == $str2_close\
    \ && $str2_open == $str1_close) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n    }\n}", "    $lst = explode(',',\
    \ $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}", "    $str1 = $lst[0];\n    $str2 =\
    \ $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n \
    \   $str1_open = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n        if ($str1_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n        if ($str2_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    }\n    if ($str1_open < 0 && $str2_open >\
    \ 0) {\n        return 'Yes';\n    }\n    return 'No';\n}\n\n$tests = [\n    [\n\
    \        'input' => ['(())', '()()'],\n        'expected' => 'Yes',\n    ],\n\
    \    [\n        'input' => ['(())', '()))'],\n        'expected' => 'No',\n  \
    \  ],\n    [\n        'input' => ['(()', '()()'],\n        'expected' => 'Yes',\n\
    \    ],\n    [\n        'input' => ['(()', '()))'],\n        'expected' => 'No',\n\
    \    ],\n    [\n        'input' => ['()', '()()'],\n        'expected' => 'Yes',\n\
    \    ],\n    [\n        'input' => ['()', '()))'],\n        '", "    $left = 0;\n\
    \    $right = 0;\n    foreach ($lst as $str) {\n        $left += substr_count($str,\
    \ '(');\n        $right += substr_count($str, ')');\n    }\n    return $left ==\
    \ $right ? 'Yes' : 'No';\n}\n\n$lst = ['(())()', '())'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '()()'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['(())()', '())('];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())()',\
    \ '()()()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '())(()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '())(())('];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '())(())(()'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['(())()', '())(())(())('];\necho match_parens($lst) . PHP_EOL;\n$lst =\
    \ ['(())()', '())(())(())(()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())()',\
    \ '())(())(())(())'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '())(())(())(())('];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '())(())(())(())(()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '())(())(())(())(())'];\n\
    echo match_parens($lst", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    if ($str1_balance_abs\
    \ === $str2_balance_abs) {\n        if ($str1_balance === $str2_balance) {\n \
    \           return 'Yes';\n        } else {\n            return 'No';\n      \
    \  }\n    } else {\n        return 'No';\n    }\n}", "    $lst = explode(\" \"\
    , $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == \"(\") {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == \"\
    (\") {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open > 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open\
    \ == -$str2_open) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n    } elseif ($str1_open < 0 && $str2_open == 0)\
    \ {\n        return \"Yes\";\n    } elseif ($str1_open < 0 && $str2_open > 0)\
    \ {\n        if ($str2_open == -$str1_open) {\n            return \"Yes\";\n \
    \       } else {\n            return \"No\";\n        }\n    } else {\n      \
    \  return \"No\";\n    }\n}", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    $str1_balance_abs_odd = $str1_balance_abs % 2;\n\
    \    $str2_balance_abs_odd = $str2_balance_abs % 2;\n    $str1_balance_abs_even\
    \ = $str1_balance_abs % 2 == 0;\n    $str2_balance_abs_even = $str2_balance_abs\
    \ % 2 == 0;\n    $str1_balance_abs_even_and_str2_balance_abs_even = $str1_balance_abs_even\
    \ && $str2_balance_abs_even;\n    $str1_balance_abs_odd_and_str2_balance_abs_odd\
    \ = $str1_balance_abs_odd && $str2_balance_abs_odd;\n    $str1_balance_abs_even_and_str2_balance_abs_odd\
    \ = $str1_balance_abs_even && $str2_balance_abs_odd;\n    $str1_balance_abs_odd_and_str2_balance_abs_even\
    \ = $str1_balance_abs_odd && $str2_balance_abs_even;\n    $str1_balance_abs_even_and_str2_balance_abs_odd_and_str1_balance_positive\
    \ = $str1_balance_abs_even && $str2_balance_abs_", "    $lst = explode(',', $lst);\n\
    \    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst[0]\
    \ = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1]['('])) {\n        if ($lst[0]['(']\
    \ > $lst[1]['(']) {\n            $lst[0]['('] -= $lst[1]['('];\n            unset($lst[1]['(']);\n\
    \        } elseif ($lst[0]['('] < $lst[1]['(']) {\n            $lst[1]['('] -=\
    \ $lst[0]['('];\n            unset($lst[0]['(']);\n        } else {\n        \
    \    unset($lst[0]['(']);\n            unset($lst[1]['(']);\n        }\n    }\n\
    \    if (isset($lst[0][')']) && isset($lst[1][')'])) {\n        if ($lst[0][')']\
    \ > $lst[1][')']) {\n            $lst[0][')'] -= $lst[1][')'];\n            unset($lst[1][')']);\n\
    \        } elseif ($lst[0][')'] < $lst[1][')']) {\n            $lst[1][')'] -=\
    \ $lst[0][')'];\n            unset($lst[0][')']);\n        } else {\n        \
    \    unset($lst[0][')']);\n            unset($lst[1][')']);\n        }\n    }\n\
    \    if (isset($lst[0]['(']) && isset($lst[0][')'])) {\n        if ($lst[0]['(']\
    \ > $lst[0][')']) {\n            $lst[0]['('] -=", "    $str1 = $lst[0];\n   \
    \ $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n  \
    \  $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    for ($i = 0; $i < $str1_len;\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return 'Yes';\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return 'Yes';\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        if ($str1_count == abs($str2_count)) {\n\
    \            return 'Yes';\n        } else {\n            return 'No';\n     \
    \   }\n    } else if ($str1_count < 0 && $str2_count == 0) {\n        return 'Yes';\n\
    \    } else if ($str1_count < 0 && $str2_count > 0) {\n        if (abs($str1_count)\
    \ == $str2_count) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } else {\n        return 'No';\n    }\n}\n", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $str1_parens = 0;\n    $str2_parens = 0;\n\
    \    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n \
    \           $str1_parens++;\n        } else {\n            $str1_parens--;\n \
    \       }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_parens++;\n        } else {\n            $str2_parens--;\n\
    \        }\n    }\n    if ($str1_parens == 0 && $str2_parens == 0) {\n       \
    \ return 'Yes';\n    } else if ($str1_parens == 0 && $str2_parens < 0) {\n   \
    \     return 'Yes';\n    } else if ($str1_parens > 0 && $str2_parens == 0) {\n\
    \        return 'Yes';\n    } else if ($str1_parens > 0 && $str2_parens < 0) {\n\
    \        return 'Yes';\n    } else if ($str1_parens < 0 && $str2_parens == 0)\
    \ {\n        return 'Yes';\n    } else if ($str1_parens < 0 && $str2_parens >\
    \ 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\
    $lst = ['(())', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '()('];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())', '()))'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', '())('];\necho match_parens($lst)", "    $s1 = $lst[0];\n\
    \    $s2 = $lst[1];\n    $s1_count = 0;\n    $s2_count = 0;\n    for ($i=0; $i\
    \ < strlen($s1); $i++) {\n        if ($s1[$i] == '(') {\n            $s1_count++;\n\
    \        } else {\n            $s1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($s2); $i++) {\n        if ($s2[$i] == '(') {\n            $s2_count++;\n\
    \        } else {\n            $s2_count--;\n        }\n    }\n    if ($s1_count\
    \ == 0 && $s2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(())', '()))'],\
    \ 'No'],\n    [['()()', '()()'], 'Yes'],\n    [['()()', '())('], 'No'],\n    [['()()',\
    \ '()()'], 'Yes'],\n    [['()()', '())('], 'No'],\n    [['()()', '())('], 'No'],\n\
    \    [['()()', '())('], 'No'],\n    [['()()', '())('], 'No'],\n    [['()()', '())('],\
    \ 'No'],\n    [['()()', '())('], 'No'],\n    [['()()', '())('], 'No'],\n    [['()()',\
    \ '())('], 'No'],\n    [['()()', '())('], 'No'],\n    [['()()', '())('], 'No'],\n\
    \    [['()()', '())('], 'No'],\n    [['()()', '())('], 'No'],\n    [['()()', '())('],\
    \ 'No'],\n    [['()", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n   \
    \     if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$lst = ['(())', '()'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['()', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(()', '())'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['()', '()()'];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['(())', '()()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())('];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())(()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', '())(())('];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['(())', '())(())(()'];\necho match_parens($lst) . PHP_", "    $str1 =\
    \ $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len\
    \ = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n    $str1_close\
    \ = substr_count($str1, ')');\n    $str2_open = substr_count($str2, '(');\n  \
    \  $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open - $str1_close;\n\
    \    $str2_diff = $str2_open - $str2_close;\n    $str1_open_pos = strpos($str1,\
    \ '(');\n    $str1_close_pos = strpos($str1, ')');\n    $str2_open_pos = strpos($str2,\
    \ '(');\n    $str2_close_pos = strpos($str2, ')');\n    if ($str1_diff == 0 &&\
    \ $str2_diff == 0) {\n        return 'Yes';\n    } elseif ($str1_diff == 0 &&\
    \ $str2_diff != 0) {\n        if ($str2_diff > 0) {\n            if ($str2_open_pos\
    \ < $str2_close_pos) {\n                return 'Yes';\n            } else {\n\
    \                return 'No';\n            }\n        } else {\n            if\
    \ ($str2_open_pos > $str2_close_pos) {\n                return 'Yes';\n      \
    \      } else {\n                return 'No';\n            }\n        }\n    }\
    \ elseif ($str1_diff != 0 && $str2_diff == 0) {\n        if ($str1_diff > 0) {\n\
    \            if ($str1_open_pos < $str1_close_pos) {\n                return 'Yes';\n\
    \            } else {\n                return 'No';\n            }\n        }\
    \ else {\n            if ($str1_open_pos > $str1_close_pos) {\n              \
    \  return 'Yes';\n            } else {\n                return 'No';\n       \
    \     }\n        }\n   ", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str1_close = 0;\n        } elseif ($str1_open <\
    \ $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n      \
    \      $str1_open = 0;\n        }\n        if ($str2_open > $str2_close) {\n \
    \           $str2_open = $str2_open - $str2_close;\n            $str2_close =\
    \ 0;\n        } elseif ($str2_open < $str2_close) {\n            $str2_close =\
    \ $str2_close - $str2_open;\n            $str2_open = 0;\n        }\n        if\
    \ ($str1_open == $str2_close && $str2_open == $str1_close) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No';\n        }\n    }\n}\n",
  "    $l = $lst[0];\n    $r = $lst[1];\n    $l_count = substr_count($l, '(');\n \
    \   $r_count = substr_count($r, ')');\n    $l_open = substr_count($l, '(');\n\
    \    $r_open = substr_count($r, '(');\n    $l_close = substr_count($l, ')');\n\
    \    $r_close = substr_count($r, ')');\n    if ($l_count + $r_count == 0) {\n\
    \        return 'Yes';\n    }\n    if ($l_count == $r_count) {\n        if ($l_open\
    \ == $r_open && $l_close == $r_close) {\n            return 'Yes';\n        }\n\
    \    }\n    if ($l_count > $r_count) {\n        if ($l_open > $r_open && $l_close\
    \ > $r_close) {\n            return 'Yes';\n        }\n    }\n    if ($l_count\
    \ < $r_count) {\n        if ($l_open < $r_open && $l_close < $r_close) {\n   \
    \         return 'Yes';\n        }\n    }\n    return 'No';\n}\n", "    $lst =\
    \ explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str2_close && $str2_open ==\
    \ $str1_close) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n\
    \    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n       \
    \     $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n        } else\
    \ {\n            $str2_count--;\n        }\n    }\n    if ($str1_count == 0 &&\
    \ $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count == 0 &&\
    \ $str2_count < 0) {\n        return 'Yes';\n    } elseif ($str1_count > 0 &&\
    \ $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count > 0 &&\
    \ $str2_count < 0) {\n        if ($str1_count == -$str2_count) {\n           \
    \ return 'Yes';\n        } else {\n            return 'No';\n        }\n    }\
    \ elseif ($str1_count < 0 && $str2_count == 0) {\n        return 'Yes';\n    }\
    \ elseif ($str1_count < 0 && $str2_count > 0) {\n        if ($str2_count == -$str1_count)\
    \ {\n            return 'Yes';\n        } else {\n            return 'No';\n \
    \       }\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [['(())',\
    \ '()()'], 'Yes'],\n    [['(()', '()'], 'Yes'],\n    [['(()', '())'], 'No'],\n\
    \    [['()', '()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['(()', '())('],\
    \ 'No'", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\n\n$lst = ['()', '()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['(())', '()()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '()))'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', '()('];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['(())', '())('];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())(('];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())", "    $str1 = $lst[0];\n  \
    \  $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$test1 = ['(())', '()'];\n$test2 = ['(())', '()('];\n$test3\
    \ = ['()', '()'];\n$test4 = ['()', ')('];\n$test5 = ['(()', '()'];\n$test6 = ['()',\
    \ '(()'];\n$test7 = ['(()', '(()'];\n$test8 = ['()', '()()'];\n$test9 = ['()',\
    \ '())('];\n$test10 = ['()', ')(()'];\n$test11 = ['()', '())(()'];\n$test12 =\
    \ ['()', '())(())('];\n$test13 = ['()', '())(())(()'];\n$test14 = ['()', '())(())(())('];\n\
    $test15 = ['()', '())(())(())(()'];\n$test16 = ['()', '())(())(())(())('];\n$test17\
    \ = ['()', '())(())(())(", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n   \
    \     if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count > 0) {\n        return 'No';\n    } elseif ($str1_count\
    \ < 0 && $str2_count == 0) {\n        return 'No';\n    } elseif ($str1_count\
    \ < 0 && $str2_count > 0) {\n        if ($str1_count + $str2_count == 0) {\n \
    \           return 'Yes';\n        } else {\n            return 'No';\n      \
    \  }\n    } elseif ($str1_count > 0 && $str2_count == 0) {\n        return 'No';\n\
    \    } elseif ($str1_count > 0 && $str2_count < 0) {\n        if ($str1_count\
    \ + $str2_count == 0) {\n            return 'Yes';\n        } else {\n       \
    \     return 'No';\n        }\n    }\n}\n$lst = ['(())', '()()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(()', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['())', '()('];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '()))'];\n\
    echo match_", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == \"(\"\
    ) {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"No\";\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"No\";\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str1_close\
    \ = 0;\n        } else {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str1_open = 0;\n        }\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open = $str2_open - $str2_close;\n            $str2_close\
    \ = 0;\n        } else {\n            $str2_close = $str2_", "    $lst = explode(\"\
    \ \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n\
    \    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if\
    \ ($str1[$i] == \"(\") {\n            $str1_count++;\n        } else {\n     \
    \       $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == \"(\") {\n            $str2_count++;\n        }\
    \ else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count ==\
    \ 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ == 0 && $str2_count != 0) {\n        return \"No\";\n    } else if ($str1_count\
    \ != 0 && $str2_count == 0) {\n        return \"No\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str =\
    \ $str1 . $str2;\n    $count = 0;\n    for ($i = 0; $i < strlen($str); $i++) {\n\
    \        if ($str[$i] == '(') {\n            $count++;\n        } else {\n   \
    \         $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    if ($count == 0) {\n        return 'Yes';\n   \
    \ } else {\n        return 'No';\n    }\n}\n\necho match_parens(['(())', '()'])\
    \ . PHP_EOL;\necho match_parens(['(())', '))']) . PHP_EOL;\necho match_parens(['(())',\
    \ ')(']) . PHP_EOL;\necho match_parens(['(())', '()(']) . PHP_EOL;\necho match_parens(['(())',\
    \ '())(']) . PHP_EOL;\necho match_parens(['(())', '())((']) . PHP_EOL;\necho match_parens(['(())',\
    \ '())(()']) . PHP_EOL;\necho match_parens(['(())', '())(())']) . PHP_EOL;\necho\
    \ match_parens(['(())', '())(())(']) . PHP_EOL;\necho match_parens(['(())', '())(())(('])\
    \ . PHP_EOL;\necho match_parens(['(())', '())(())(()']) . PHP_EOL;\necho match_parens(['(())',\
    \ '())(())(())']) . PHP_EOL;\necho match_parens(['(())', '())(())(())(']) . PHP_EOL;\n\
    echo match_parens(['(())', '())(())(())((']) . PHP_EOL;\necho match_parens(['(())',\
    \ '())(())(())(()']) . PHP_EOL;\necho match_parens(['(())',", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_diff = $str1_open - $str1_close;\n    $str2_diff = $str2_open\
    \ - $str2_close;\n    if ($str1_diff == 0 && $str2_diff == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_diff == $str2_diff) {\n        return 'Yes';\n \
    \   } elseif ($str1_diff == -$str2_diff) {\n        return 'Yes';\n    } else\
    \ {\n        return 'No';\n    }\n}\n\n$tests = [\n    [['(())', '()'], 'Yes'],\n\
    \    [['(())', ')('], 'No'],\n    [['(()', '()'], 'Yes'],\n    [['(()', ')('],\
    \ 'No'],\n    [['()', '()'], 'Yes'],\n    [['()', ')('], 'No'],\n    [['()', '()()'],\
    \ 'Yes'],\n    [['()', '())('], 'No'],\n    [['()', '()()()'], 'Yes'],\n    [['()',\
    \ '()())('], 'No'],\n    [['()', '()()()()'], 'Yes'],\n    [['()', '()()())('],\
    \ 'No'],\n    [['()', '()()()()()'], 'Yes'],\n    [['()', '()()()())('], 'No'],\n\
    \    [['()', '()()()()()()'], 'Yes'],\n    [['()', '()()()()()", "    $str1 =\
    \ $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len\
    \ = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n    for ($i=0; $i\
    \ < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n\
    \        } else {\n            $str1_open--;\n        }\n    }\n    for ($i=0;\
    \ $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n\
    \        } else {\n            $str2_open--;\n        }\n    }\n    if ($str1_open\
    \ == 0 && $str2_open == 0) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == -$str2_open) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(())', '()))'],\
    \ 'No'],\n    [['(()', '()()'], 'Yes'],\n    [['(()', '()))'], 'No'],\n    [['(()',\
    \ '())('], 'No'],\n    [['(()', '()))'], 'No'],\n    [['()', '()()'], 'Yes'],\n\
    \    [['()', '()))'], 'No'],\n    [['()', '())('], 'No'],\n    [['()', '()))'],\
    \ 'No'],\n    [['(', '()()'], 'Yes'],\n    [['(', '()))'], 'No'],\n    [['(',\
    \ '())('], 'No'],\n    [['(', '()))'], 'No'],\n    [['', '()()'], 'Yes'],\n  \
    \  [['', '()))'", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len =\
    \ strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_open--;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        return 'Yes';\n\
    \    } elseif ($str1_open < 0 && $str2_open > 0) {\n        return 'Yes';\n  \
    \  } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [\n        ['(())',\
    \ '()()'],\n        'Yes'\n    ],\n    [\n        ['(())', '()))'],\n        'No'\n\
    \    ],\n    [\n        ['()', '()'],\n        'Yes'\n    ],\n    [\n        ['(()',\
    \ '()'],\n        'Yes'\n    ],\n    [\n        ['(()', '))'],\n        'No'\n\
    \    ],\n    [\n        ['()', '))'],\n        'No'\n    ],\n    [\n        ['(()',\
    \ '))('],\n        'No'\n    ],\n    [\n        ['(()', ')('],\n        'No'\n\
    \    ],\n    [\n        ['(()', '()('],\n        'No'\n    ],\n    [\n       \
    \ ['(()', '()('],\n        'No'\n", "    $lst = explode(',', $lst);\n    $lst[0]\
    \ = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst[0] = array_count_values($lst[0]);\n\
    \    $lst[1] = array_count_values($lst[1]);\n    if (isset($lst[0]['(']) && isset($lst[1]['(']))\
    \ {\n        if ($lst[0]['('] > $lst[1]['(']) {\n            $lst[0]['('] -= $lst[1]['('];\n\
    \            unset($lst[1]['(']);\n        } elseif ($lst[0]['('] < $lst[1]['('])\
    \ {\n            $lst[1]['('] -= $lst[0]['('];\n            unset($lst[0]['(']);\n\
    \        } else {\n            unset($lst[0]['(']);\n            unset($lst[1]['(']);\n\
    \        }\n    }\n    if (isset($lst[0][')']) && isset($lst[1][')'])) {\n   \
    \     if ($lst[0][')'] > $lst[1][')']) {\n            $lst[0][')'] -= $lst[1][')'];\n\
    \            unset($lst[1][')']);\n        } elseif ($lst[0][')'] < $lst[1][')'])\
    \ {\n            $lst[1][')'] -= $lst[0][')'];\n            unset($lst[0][')']);\n\
    \        } else {\n            unset($lst[0][')']);\n            unset($lst[1][')']);\n\
    \        }\n    }\n    if (isset($lst[0]['(']) && isset($lst[0][')'])) {\n   \
    \     if ($lst[0]['('] > $lst[0][')']) {\n            $lst[0]['('] -=", "    $s1\
    \ = $lst[0];\n    $s2 = $lst[1];\n    $s1_count = 0;\n    $s2_count = 0;\n   \
    \ for ($i=0; $i < strlen($s1); $i++) {\n        if ($s1[$i] == '(') {\n      \
    \      $s1_count++;\n        } else {\n            $s1_count--;\n        }\n \
    \   }\n    for ($i=0; $i < strlen($s2); $i++) {\n        if ($s2[$i] == '(') {\n\
    \            $s2_count++;\n        } else {\n            $s2_count--;\n      \
    \  }\n    }\n    if ($s1_count == 0 && $s2_count == 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\n\n$tests = [\n    [[\"(())()\"\
    , \"()()()\"], \"Yes\"],\n    [[\"(())()\", \"())\"], \"No\"],\n    [[\"()()\"\
    , \"()()\"], \"Yes\"],\n    [[\"()()\", \"())\"], \"No\"],\n    [[\"()()\", \"\
    ()(())\"], \"Yes\"],\n    [[\"()()\", \"())(())\"], \"No\"],\n    [[\"()()\",\
    \ \"())(()(\"], \"No\"],\n    [[\"()()\", \"())(()()\"], \"No\"],\n    [[\"()()\"\
    , \"())(()())\"], \"No\"],\n    [[\"()()\", \"())(()()()\"], \"No\"],\n    [[\"\
    ()()\", \"())(()()())\"], \"No\"],\n    [[\"()()\", \"())(()()()()\"], \"No\"\
    ],\n    [[\"()()\", \"())(()()()())\"], \"No\"],\n    [[\"()()\", \"())(()()()()()\"\
    ], \"No\"],\n    [[\"()()\", \"())(()()()()())\"], \"No\"],\n    [[\"()()\", \"\
    ())(()()()()()()\"], \"No\"],\n    [[\"()()\", \"())(()()()()()())\"], \"No\"\
    ],", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n     \
    \       $str1_open++;\n        } else {\n            $str1_open--;\n        }\n\
    \    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        return 'Yes';\n\
    \    } elseif ($str1_open < 0 && $str2_open > 0) {\n        return 'Yes';\n  \
    \  } else {\n        return 'No';\n    }\n}\n$tests = [\n    [['(())', '()()'],\
    \ 'Yes'],\n    [['(()', '()('], 'No'],\n    [['()', '()'], 'Yes'],\n    [['(()',\
    \ '()'], 'Yes'],\n    [['()', '()('], 'No'],\n    [['(()', '()('], 'No'],\n  \
    \  [['(()', '()()'], 'Yes'],\n    [['()()', '()'], 'Yes'],\n    [['()()', '()()'],\
    \ 'Yes'],\n    [['()()', '()()('], 'No'],\n    [['()()', '()()()'], 'Yes'],\n\
    \    [['()()', '()()()('], 'No'],\n    [['()()', '()()()()'], 'Yes'],\n    [['()",
  "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, \"(\");\n    $str1_close = substr_count($str1, \")\");\n\
    \    $str2_open = substr_count($str2, \"(\");\n    $str2_close = substr_count($str2,\
    \ \")\");\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n\
    \        return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            $str2_close = 0;\n        } else {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str2_open == $str2_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($str1_open != $str1_close && $str2_open == $str2_close) {\n        if ($str1_open\
    \ > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n     \
    \       $str1_close = 0;\n        } else {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            $str1_open = 0;\n        }\n        if ($str1_open\
    \ == $str1_close) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n    } else {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str1_close && $str2_open !=\
    \ $str2_close) {\n        if ($str2_open > $str2_close) {\n            $diff =\
    \ $str2_open - $str2_close;\n            if ($str1_open >= $diff) {\n        \
    \        return 'Yes';\n            } else {\n                return 'No';\n \
    \           }\n        } else {\n            $diff = $str2_close - $str2_open;\n\
    \            if ($str1_close >= $diff) {\n                return 'Yes';\n    \
    \        } else {\n                return 'No';\n            }\n        }\n  \
    \  } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n     \
    \   if ($str1_open > $str1_close) {\n            $diff = $str1_open - $str1_close;\n\
    \            if ($str2_open >= $diff) {\n                return 'Yes';\n     \
    \       } else {\n                return 'No';\n            }\n        } else\
    \ {\n            $diff = $str1_close - $str1_open;\n            if ($str2_close\
    \ >= $diff) {\n                return 'Yes';\n            } else {\n         \
    \       return 'No';\n            }\n        }\n    } else {\n        if ($str1_open\
    \ > $str1_close) {\n            $diff = $str1_open - $str1_close;\n          \
    \  if ($str2_open", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n   \
    \     if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $open = 0;\n    $close = 0;\n    foreach ($lst as $str)\
    \ {\n        for ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i]\
    \ == '(') {\n                $open++;\n            } else {\n                $close++;\n\
    \            }\n        }\n    }\n    return $open == $close ? 'Yes' : 'No';\n\
    }\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(())', '()))'], 'No'],\n\
    \    [['()', '()()'], 'Yes'],\n    [['(()', '()()'], 'No'],\n    [['()', '()))'],\
    \ 'No'],\n    [['()', '()()()'], 'Yes'],\n    [['(()', '()()()'], 'No'],\n   \
    \ [['()', '()()))'], 'No'],\n    [['()', '()()()()'], 'Yes'],\n    [['(()', '()()()()'],\
    \ 'No'],\n    [['()', '()()()))'], 'No'],\n    [['()', '()()()()()'], 'Yes'],\n\
    \    [['(()', '()()()()()'], 'No'],\n    [['()', '()()()()))'], 'No'],\n    [['()',\
    \ '()()()()()()'], 'Yes'],\n    [['(()', '()()()()()()'], 'No'],\n    [['()',\
    \ '()()()()()))'], 'No'],\n    [['()', '()()()()()()()'], 'Yes'],\n    [['(()',\
    \ '()()()()()()()'], 'No'],\n    [['()', '()()()()()()))'], 'No'],\n    [['()',\
    \ '()()()()()()()()'], 'Yes'],\n    [['(()', '()()()()()()()()'], 'No'],\n   \
    \ [['()', '()", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == \"(\") {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_open++;\n    \
    \    } else {\n            $str2_open--;\n        }\n    }\n    if ($str1_open\
    \ == 0 && $str2_open == 0) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ > 0 && $str2_open < 0) {\n        if ($str1_open == abs($str2_open)) {\n   \
    \         return \"Yes\";\n        }\n    } elseif ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if (abs($str1_open) == $str2_open) {\n            return \"\
    Yes\";\n        }\n    }\n    return \"No\";\n}", "    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n        if ($str1_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n        if ($str2_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    }\n    if ($str1_open == $str2_open) {\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n\n$tests = [\n    [['(())',\
    \ '()()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['()', '()'], 'Yes'],\n\
    \    [['(()', '())'], 'Yes'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()))'],\
    \ 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()',\
    \ '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n\
    \    [['(()', '()))'], 'No'],\n    [['(()', '()))'], 'No", "    $lst = explode(',',\
    \ $lst);\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n\
    \    $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return 'No';\n        }\n    }\n    if ($count == 0) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n", "    $l = $lst[0];\n    $r =\
    \ $lst[1];\n    $l_count = substr_count($l, '(');\n    $r_count = substr_count($r,\
    \ ')');\n    $l_open = substr_count($l, '(') - substr_count($l, ')');\n    $r_open\
    \ = substr_count($r, '(') - substr_count($r, ')');\n    if ($l_open < 0 || $r_open\
    \ < 0) {\n        return 'No';\n    }\n    if ($l_open == 0 && $r_open == 0) {\n\
    \        return 'Yes';\n    }\n    if ($l_open == $r_open) {\n        return 'Yes';\n\
    \    }\n    if ($l_open > $r_open) {\n        return 'Yes';\n    }\n    if ($l_open\
    \ < $r_open) {\n        return 'No';\n    }\n}\n", "    $str1 = $lst[0];\n   \
    \ $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count != 0) {\n        return 'No';\n    } elseif ($str1_count\
    \ != 0 && $str2_count == 0) {\n        return 'No';\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s3 = $s1 . $s2;\n\
    \    $s4 = $s2 . $s1;\n    $s5 = $s1 . $s1;\n    $s6 = $s2 . $s2;\n    $s7 = $s1\
    \ . $s2 . $s1;\n    $s8 = $s2 . $s1 . $s2;\n    $s9 = $s1 . $s2 . $s2;\n    $s10\
    \ = $s2 . $s1 . $s1;\n    $s11 = $s1 . $s1 . $s2;\n    $s12 = $s2 . $s2 . $s1;\n\
    \    $s13 = $s1 . $s1 . $s1;\n    $s14 = $s2 . $s2 . $s2;\n    $s15 = $s1 . $s2\
    \ . $s1 . $s2;\n    $s16 = $s2 . $s1 . $s2 . $s1;\n    $s17 = $s1 . $s2 . $s2\
    \ . $s1;\n    $s18 = $s2 . $s1 . $s1 . $s2;\n    $s19 = $s1 . $s1 . $s2 . $s2;\n\
    \    $s20 = $s2 . $s2 . $s1 . $s1;\n    $s21 = $s1 . $s1 . $s1 . $s2;\n    $s22\
    \ = $s2 . $s2 . $s2 . $s1;\n    $s23 = $s1 . $s1 . $s1 . $s1;\n    $s24 = $s2\
    \ . $s2 . $s2 . $s2;\n    $s25 = $s1 . $s2 . $s1 . $s2 . $s1;\n    $s26 = $s2\
    \ . $s1 . $s2 . $s1 . $s2;\n    $s27 = $s1 . $s2 . $s", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count != 0) {\n        return 'No';\n    } elseif ($str1_count\
    \ != 0 && $str2_count == 0) {\n        return 'No';\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_open_close\
    \ = $str1_open + $str2_close;\n    $str2_open_close = $str2_open + $str1_close;\n\
    \    if ($str1_balance == 0 && $str2_balance == 0) {\n        return 'Yes';\n\
    \    } elseif ($str1_balance == 0 && $str2_balance != 0) {\n        if ($str2_balance\
    \ > 0 && $str2_balance == $str1_close) {\n            return 'Yes';\n        }\
    \ elseif ($str2_balance < 0 && $str2_balance == $str1_open) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No';\n        }\n    } elseif\
    \ ($str1_balance != 0 && $str2_balance == 0) {\n        if ($str1_balance > 0\
    \ && $str1_balance == $str2_close) {\n            return 'Yes';\n        } elseif\
    \ ($str1_balance < 0 && $str1_balance == $str2_open) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } elseif ($str1_balance\
    \ != 0 && $str2_balance != 0) {\n        if ($str1_balance > 0 && $str2_balance\
    \ < 0) {\n            if ($str1_balance == $str2_open_close) {\n             \
    \   return 'Yes';\n            } else {\n                return 'No';\n      \
    \      }\n       ", "    $l = $lst[0];\n    $r = $lst[1];\n    $l_cnt = substr_count($l,\
    \ '(');\n    $r_cnt = substr_count($r, ')');\n    if ($l_cnt == $r_cnt) {\n  \
    \      return 'Yes';\n    }\n    return 'No';\n}\n\n$tests = [\n    [['(())',\
    \ '()()'], 'Yes'],\n    [['(()', '()'], 'No'],\n    [['()', '()'], 'Yes'],\n \
    \   [['()', ')('], 'No'],\n    [['(())', ')(()'], 'No'],\n    [['(()', '))'],\
    \ 'No'],\n    [['(()', '()('], 'No'],\n    [['(()', '())('], 'No'],\n    [['(()',\
    \ '()))'], 'No'],\n    [['(()', '()))('], 'No'],\n    [['(()', '()))()'], 'No'],\n\
    \    [['(()', '()))()('], 'No'],\n    [['(()', '()))()()'], 'No'],\n    [['(()',\
    \ '()))()()('], 'No'],\n    [['(()', '()))()()()'], 'No'],\n    [['(()', '()))()()()('],\
    \ 'No'],\n    [['(()', '()))()()()()'], 'No'],\n    [['(()', '()))()()()()('],\
    \ 'No'],\n    [['(()', '()))()()()()()'], 'No'],\n    [['(()', '()))()()()()()('],\
    \ 'No'],\n    [['(()', '()))()()()()()()'], 'No'],\n    [['(()', '()))()()()()()()('],\
    \ 'No'],\n    [['(()', '()))()()()()()()()'], 'No'],\n    [['(()',", "    $str1\
    \ = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len\
    \ = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n    $str1_close\
    \ = substr_count($str1, ')');\n    $str2_open = substr_count($str2, '(');\n  \
    \  $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open - $str1_close;\n\
    \    $str2_diff = $str2_open - $str2_close;\n    $str1_open_pos = strpos($str1,\
    \ '(');\n    $str1_close_pos = strpos($str1, ')');\n    $str2_open_pos = strpos($str2,\
    \ '(');\n    $str2_close_pos = strpos($str2, ')');\n    if ($str1_diff == 0 &&\
    \ $str2_diff == 0) {\n        return 'Yes';\n    } elseif ($str1_diff == 0 &&\
    \ $str2_diff != 0) {\n        if ($str2_diff > 0) {\n            if ($str2_open_pos\
    \ < $str2_close_pos) {\n                return 'Yes';\n            } else {\n\
    \                return 'No';\n            }\n        } else {\n            if\
    \ ($str2_open_pos > $str2_close_pos) {\n                return 'Yes';\n      \
    \      } else {\n                return 'No';\n            }\n        }\n    }\
    \ elseif ($str1_diff != 0 && $str2_diff == 0) {\n        if ($str1_diff > 0) {\n\
    \            if ($str1_open_pos < $str1_close_pos) {\n                return 'Yes';\n\
    \            } else {\n                return 'No';\n            }\n        }\
    \ else {\n            if ($str1_open_pos > $str1_close_pos) {\n              \
    \  return 'Yes';\n            } else {\n                return 'No';\n       \
    \     }\n        }\n   ", "    $left = 0;\n    $right = 0;\n    foreach ($lst\
    \ as $str) {\n        $left += substr_count($str, '(');\n        $right += substr_count($str,\
    \ ')');\n    }\n    if ($left == $right) {\n        return 'Yes';\n    } else\
    \ {\n        return 'No';\n    }\n}\n\n$lst = ['(())()', '())'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '()()'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['(())()', '()()()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())()',\
    \ '()()()()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '()()()()()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '()()()()()()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '()()()()()()()'];\necho match_parens($lst) .\
    \ PHP_EOL;\n$lst = ['(())()', '()()()()()()()()'];\necho match_parens($lst) .\
    \ PHP_EOL;\n$lst = ['(())()', '()()()()()()()()()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '()()()()()()()()()()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '()()()()()()()()()()()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())()', '()()()()()()()()()()()()'];\necho match_parens($lst)\
    \ . PHP", "    $lst = explode(\" \", $lst);\n    $lst[0] = str_split($lst[0]);\n\
    \    $lst[1] = str_split($lst[1]);\n    $lst = array_merge($lst[0], $lst[1]);\n\
    \    $lst = implode(\"\", $lst);\n    $lst = str_split($lst);\n    $count = 0;\n\
    \    foreach ($lst as $char) {\n        if ($char == \"(\") {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(\"\
    (())() (())()\") . \"\\n\";\necho match_parens(\"()() (())()\") . \"\\n\";\necho\
    \ match_parens(\"()() (()())\") . \"\\n\";\necho match_parens(\"()() (()()\")\
    \ . \"\\n\";\necho match_parens(\"()() ())()\") . \"\\n\";\necho match_parens(\"\
    ()() )())\") . \"\\n\";\necho match_parens(\"()() )()\") . \"\\n\";\necho match_parens(\"\
    ()() )\") . \"\\n\";\necho match_parens(\"()() ))(\") . \"\\n\";\necho match_parens(\"\
    ()() )()(\") . \"\\n\";\necho match_parens(\"()() )()()\") . \"\\n\";\necho match_parens(\"\
    ()() )())(\") . \"\\n\";\necho match_parens(\"()() )()()(\") . \"\\n\";\necho\
    \ match_parens(\"()() )()()()\") . \"\\n\";\necho match_parens(\"()() )()()()(\"\
    ) . \"\\n\";\necho match_parens(\"()() )()()()()\") . \"\\n\";\necho match_parens(\"\
    ()() )()()()()(\") . \"\\n\";\necho match_parens(\"()() )()()()()()\") . \"\\\
    n\";\necho", "    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count = 0;\n   \
    \ $s2_count = 0;\n    for ($i=0; $i < strlen($s1); $i++) {\n        if ($s1[$i]\
    \ == '(') {\n            $s1_count++;\n        } else {\n            $s1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($s2); $i++) {\n        if ($s2[$i]\
    \ == '(') {\n            $s2_count++;\n        } else {\n            $s2_count--;\n\
    \        }\n    }\n    if ($s1_count == 0 && $s2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$lst = [\"(())()\"\
    , \"())\"];\necho match_parens($lst);\necho \"\\n\";\n$lst = [\"(())()\", \"()()\"\
    ];\necho match_parens($lst);\necho \"\\n\";\n$lst = [\"()()\", \"()()\"];\necho\
    \ match_parens($lst);\necho \"\\n\";\n$lst = [\"()()\", \"()\"];\necho match_parens($lst);\n\
    echo \"\\n\";\n$lst = [\"()\", \"()()\"];\necho match_parens($lst);\necho \"\\\
    n\";\n$lst = [\"()\", \"()\"];\necho match_parens($lst);\necho \"\\n\";\n$lst\
    \ = [\"()(()\", \"())\"];\necho match_parens($lst);\necho \"\\n\";\n$lst = [\"\
    ()(()\", \"()()\"];\necho match_parens($lst);\necho \"\\n\";\n$lst = [\"()(()\"\
    , \"()(()\"];\necho match_parens($lst);\necho \"\\n\";\n$lst = [\"()(()\", \"\
    ()\"];\necho match_parens($lst);\necho \"\\n\";\n$lst = [\"()(", "    $str1 =\
    \ $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len\
    \ = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n    for ($i = 0;\
    \ $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n\
    \        } else {\n            $str1_open--;\n        }\n        if ($str1_open\
    \ < 0) {\n            return 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_open--;\n        }\n        if ($str2_open < 0)\
    \ {\n            return 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    }\n    if ($str1_open < 0 && $str2_open >\
    \ 0) {\n        return 'Yes';\n    }\n    return 'No';\n}\n", "    $lst = explode(',',\
    \ $lst);\n    $lst = array_map('trim', $lst);\n    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str1_close && $str2_open !=\
    \ $str2_close) {\n        return 'No';\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'No';\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open == $str2_close\
    \ && $str2_open == $str1_close) {\n            return 'Yes';\n        } else {\n\
    \            return 'No';\n        }\n    }\n}\n\n$fh = fopen($argv[1], \"r\"\
    );\nwhile (!feof($fh)) {\n    $val = fgets($fh);\n    if ($val != \"\") {\n  \
    \      echo match_parens($val) . PHP_EOL;\n    }\n}\nfclose($fh);", "    $s1 =\
    \ $lst[0];\n    $s2 = $lst[1];\n    $s3 = $s1 . $s2;\n    $s4 = $s2 . $s1;\n \
    \   $s5 = $s3 . $s3;\n    $s6 = $s4 . $s4;\n    $s7 = $s5 . $s6;\n    $s8 = $s6\
    \ . $s5;\n    $s9 = $s7 . $s8;\n    $s10 = $s8 . $s7;\n    $s11 = $s9 . $s10;\n\
    \    $s12 = $s10 . $s9;\n    $s13 = $s11 . $s12;\n    $s14 = $s12 . $s11;\n  \
    \  $s15 = $s13 . $s14;\n    $s16 = $s14 . $s13;\n    $s17 = $s15 . $s16;\n   \
    \ $s18 = $s16 . $s15;\n    $s19 = $s17 . $s18;\n    $s20 = $s18 . $s17;\n    $s21\
    \ = $s19 . $s20;\n    $s22 = $s20 . $s19;\n    $s23 = $s21 . $s22;\n    $s24 =\
    \ $s22 . $s21;\n    $s25 = $s23 . $s24;\n    $s26 = $s24 . $s23;\n    $s27 = $s25\
    \ . $s26;\n    $s28 = $s26 . $s25;\n    $s29 = $s27 . $s28;\n    $s30 = $s28 .\
    \ $s27;\n    $s31 = $s29 . $s30;\n    $s32 = $s30 . $s29;\n    $s33 = $s31 . $s32;\n\
    \    $s34 = $s32 . $s31;\n    $s35 = $s33 . $s34;\n    $s36 = $s34 . $s33;\n \
    \   $s37 = $s35 . $s", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open\
    \ = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_open--;\n\
    \        }\n        if ($str1_open < 0) {\n            return 'No';\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return 'No';\n        }\n\
    \    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return 'Yes';\n\
    \    }\n    if ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open ==\
    \ abs($str2_open)) {\n            return 'Yes';\n        }\n    }\n    if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if (abs($str1_open) == $str2_open) {\n   \
    \         return 'Yes';\n        }\n    }\n    return 'No';\n}\n", "    $lst =\
    \ explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open\
    \ - $str1_close;\n    $str2_diff = $str2_open - $str2_close;\n    if ($str1_diff\
    \ == 0 && $str2_diff == 0) {\n        return 'Yes';\n    } else if ($str1_diff\
    \ == $str2_diff) {\n        return 'Yes';\n    } else if ($str1_diff == -$str2_diff)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n   \
    \ for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n    \
    \        $str1_open++;\n        } else {\n            $str1_open--;\n        }\n\
    \        if ($str1_open < 0) {\n            return 'No';\n        }\n    }\n \
    \   for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n  \
    \          $str2_open++;\n        } else {\n            $str2_open--;\n      \
    \  }\n        if ($str2_open < 0) {\n            return 'No';\n        }\n   \
    \ }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return 'Yes';\n  \
    \  }\n    if ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open == -$str2_open)\
    \ {\n            return 'Yes';\n        }\n    }\n    if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if ($str2_open == -$str1_open) {\n            return 'Yes';\n\
    \        }\n    }\n    return 'No';\n}\n$tests = [\n    [['(())', '()()'], 'Yes'],\n\
    \    [['(())', '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()()'],\
    \ 'Yes'],\n    [['(()', '()()'], 'Yes'],\n    [['(()', '()()'], 'Yes'],\n    [['(()',\
    \ '()()'], 'Yes'],\n    [['(()', '()()'], 'Yes'],\n   ", "    $lst = explode(\"\
    \ \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n\
    \    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if\
    \ ($str1[$i] == \"(\") {\n            $str1_count++;\n        } else {\n     \
    \       $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == \"(\") {\n            $str2_count++;\n        }\
    \ else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count ==\
    \ 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\necho match_parens(\"(())() (())()\") . \"\\n\";\necho match_parens(\"\
    ()() (())()\") . \"\\n\";\necho match_parens(\"()() ()()\") . \"\\n\";\necho match_parens(\"\
    ()() (()())\") . \"\\n\";\necho match_parens(\"()() (()()\") . \"\\n\";\necho\
    \ match_parens(\"()() ()(()\") . \"\\n\";\necho match_parens(\"()() ())()\") .\
    \ \"\\n\";\necho match_parens(\"()() )())()\") . \"\\n\";\necho match_parens(\"\
    ()() )()())\") . \"\\n\";\necho match_parens(\"()() )())\") . \"\\n\";\necho match_parens(\"\
    ()() )()\") . \"\\n\";\necho match_parens(\"()() )\") . \"\\n\";\necho match_",
  "    $lst = array_map(function($s) {\n        return str_split($s);\n    }, $lst);\n\
    \    $lst = array_reduce($lst, function($acc, $s) {\n        return array_merge($acc,\
    \ $s);\n    }, []);\n    $lst = array_reduce($lst, function($acc, $c) {\n    \
    \    if ($c === '(') {\n            $acc++;\n        } else {\n            $acc--;\n\
    \        }\n        return $acc;\n    }, 0);\n    return $lst === 0 ? 'Yes' :\
    \ 'No';\n}\n\n$tests = [\n    [\n        'input' => [\n            '()',\n   \
    \         '()'\n        ],\n        'expected' => 'Yes'\n    ],\n    [\n     \
    \   'input' => [\n            '((',\n            '))'\n        ],\n        'expected'\
    \ => 'Yes'\n    ],\n    [\n        'input' => [\n            '((',\n         \
    \   ')'\n        ],\n        'expected' => 'No'\n    ],\n    [\n        'input'\
    \ => [\n            '((',\n            ')))('\n        ],\n        'expected'\
    \ => 'No'\n    ],\n    [\n        'input' => [\n            '((()))',\n      \
    \      ')))((('\n        ],\n        'expected' => 'Yes'\n    ],\n    [\n    \
    \    'input' => [\n            '((()))',\n            ')))(((())))('\n       \
    \ ],\n        'expected' => 'No'\n    ],\n    [\n        'input' => [\n      \
    \      '((()))',\n            ')))(((())))((())))('\n        ],\n        'expected'\
    \ => 'No'\n    ],\n    [\n        'input' => [\n            '((()))',\n      \
    \      ')))(((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((())))((()",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n  \
    \  $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close\
    \ = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n   \
    \         $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_close++;\n        }\n    }\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } else {\n   \
    \     return \"No\";\n    }\n}\n$lst = [\"(())()\", \"())\"];\necho match_parens($lst);",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count == 0 && $str2_count != 0) {\n        if ($str2_count\
    \ > 0) {\n            $str2 = str_replace('(', '', $str2, $str2_count);\n    \
    \    } else {\n            $str2 = str_replace(')', '', $str2, abs($str2_count));\n\
    \        }\n        if (strlen($str2) == 0) {\n            return 'Yes';\n   \
    \     } else {\n            return 'No';\n        }\n    } elseif ($str1_count\
    \ != 0 && $str2_count == 0) {\n        if ($str1_count > 0) {\n            $str1\
    \ = str_replace('(', '', $str1, $str1_count);\n        } else {\n            $str1\
    \ = str_replace(')', '', $str1, abs($str1_count));\n        }\n        if (strlen($str1)\
    \ == 0) {\n            return 'Yes';\n        } else {\n            return 'No';\n\
    \        }\n    } else {\n        return 'No';\n    }\n}\n$lst = ['(())', '()))'];\n\
    echo match_parens($lst);", "    $lst = explode(',', $lst);\n    $lst[0] = str_split($lst[0]);\n\
    \    $lst[1] = str_split($lst[1]);\n    $lst = array_merge($lst[0], $lst[1]);\n\
    \    $count = 0;\n    foreach ($lst as $char) {\n        if ($char == '(') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            return 'No';\n        }\n    }\n    if\
    \ ($count == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\necho match_parens('(()),()') . PHP_EOL;\necho match_parens('(()),(())')\
    \ . PHP_EOL;\necho match_parens('(()),()()') . PHP_EOL;\necho match_parens('(()),(()())')\
    \ . PHP_EOL;\necho match_parens('(()),(())(())') . PHP_EOL;\necho match_parens('(()),(())(()())')\
    \ . PHP_EOL;\necho match_parens('(()),(())(())(())') . PHP_EOL;\necho match_parens('(()),(())(())(()())')\
    \ . PHP_EOL;\necho match_parens('(()),(())(())(())(())') . PHP_EOL;\necho match_parens('(()),(())(())(())(()())')\
    \ . PHP_EOL;\necho match_parens('(()),(())(())(())(())(())') . PHP_EOL;\necho\
    \ match_parens('(()),(())(())(())(())(()())') . PHP_EOL;\necho match_parens('(()),(())(())(())(())(())(())')\
    \ . PHP_EOL;\necho match_parens('(()),(())(())(())(())(())(()())') . PHP_EOL;\n\
    echo match_parens('(()", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == \"(\") {\n           \
    \ $str1_count++;\n        } else {\n            $str1_count--;\n        }\n  \
    \  }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i] == \"\
    (\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$fptr = fopen(getenv(\"\
    OUTPUT_PATH\"), \"w\");\n\n$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin,\
    \ \"%d\\n\", $t);\n\nfor ($t_itr = 0; $t_itr < $t; $t_itr++) {\n    $lst = '';\n\
    \    fscanf($stdin, \"%[^\\n]\", $lst);\n\n    $result = match_parens($lst);\n\
    \n    fwrite($fptr, $result . \"\\n\");\n}\n\nfclose($stdin);\nfclose($fptr);",
  "    $l = $lst[0];\n    $r = $lst[1];\n    $l_count = substr_count($l, '(');\n \
    \   $r_count = substr_count($r, ')');\n    if ($l_count == $r_count) {\n     \
    \   return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [\n\
    \    [['(())', '()()'], 'Yes'],\n    [['(())', '())'], 'No'],\n    [['()()', '()()'],\
    \ 'Yes'],\n    [['()()', '())('], 'No'],\n    [['()()', '())(()'], 'No'],\n  \
    \  [['()()', '())(())('], 'No'],\n    [['()()', '())(())(()'], 'No'],\n    [['()()',\
    \ '())(())(())'], 'No'],\n    [['()()', '())(())(())('], 'No'],\n    [['()()',\
    \ '())(())(())(()'], 'No'],\n    [['()()', '())(())(())(())'], 'No'],\n    [['()()',\
    \ '())(())(())(())('], 'No'],\n    [['()()', '())(())(())(())(()'], 'No'],\n \
    \   [['()()', '())(())(())(())(())'], 'No'],\n    [['()()', '())(())(())(())(())('],\
    \ 'No'],\n    [['()()', '())(())(())(())(())(()'], 'No'],\n    [['()()', '())(())(())(())(())(())'],\
    \ 'No'],\n    [['()()', '())(())(())(())(())(())('], 'No'],\n    [['()()', '())(())(())(())(())(())(()'],\
    \ 'No'],\n    [['()()', '())(())(())(())(())(())(())'],", "    $lst = explode(\"\
    \ \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == \"(\") {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_open++;\n    \
    \    } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } elseif ($str1_open == $str1_close && $str2_open > $str2_close) {\n      \
    \  if ($str2_open - $str2_close == $str1_open) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open < $str2_close) {\n        if ($str1_open - $str1_close\
    \ == $str2_close) {\n            return \"Yes\";\n        } else {\n         \
    \   return \"No\";\n        }\n    } elseif ($str1_open > $str1_close && $str2_open\
    \ == $str2_close) {\n        if ($str1_open - $str1_close == $str2_open) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }\n    } elseif ($str1_open < $str1_close && $str2_open == $str2_close)\
    \ {\n        if", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1\
    \ . $str2;\n    $str4 = $str2 . $str1;\n    $str5 = $str1 . $str1;\n    $str6\
    \ = $str2 . $str2;\n    $str7 = $str1 . $str2 . $str1;\n    $str8 = $str2 . $str1\
    \ . $str2;\n    $str9 = $str1 . $str2 . $str2;\n    $str10 = $str2 . $str1 . $str1;\n\
    \    $str11 = $str1 . $str1 . $str2;\n    $str12 = $str2 . $str2 . $str1;\n  \
    \  $str13 = $str1 . $str2 . $str1 . $str2;\n    $str14 = $str2 . $str1 . $str2\
    \ . $str1;\n    $str15 = $str1 . $str2 . $str2 . $str1;\n    $str16 = $str2 .\
    \ $str1 . $str1 . $str2;\n    $str17 = $str1 . $str1 . $str2 . $str2;\n    $str18\
    \ = $str2 . $str2 . $str1 . $str1;\n    $str19 = $str1 . $str1 . $str1;\n    $str20\
    \ = $str2 . $str2 . $str2;\n    $str21 = $str1 . $str2 . $str1 . $str2 . $str1;\n\
    \    $str22 = $str2 . $str1 . $str2 . $str1 . $str2;\n    $str23 = $str1 . $str2\
    \ . $str2 . $str1 . $str2;\n    $str24 = $str2 . $str1 . $str1 . $str2 . $str1;\n\
    \    $str25 = $str1 . $str1 . $str2 . $str2 . $str1;\n    $str26 = $str2 . $str2\
    \ . $str1 . $str1 . $str2;", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n   \
    \ $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open =\
    \ 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n        \
    \    $str1_open--;\n        }\n        if ($str1_open < 0) {\n            return\
    \ 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if\
    \ ($str2[$i] == '(') {\n            $str2_open++;\n        } else {\n        \
    \    $str2_open--;\n        }\n        if ($str2_open < 0) {\n            return\
    \ 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n   \
    \     return 'Yes';\n    }\n    if ($str1_open == 0 && $str2_open > 0) {\n   \
    \     return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open == 0) {\n   \
    \     return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open > 0) {\n    \
    \    return 'Yes';\n    }\n    return 'No';\n}\n\n$tests = [\n    [['(())', '()()'],\
    \ 'Yes'],\n    [['(())', '()))'], 'No'],\n    [['()()', '()()'], 'Yes'],\n   \
    \ [['(()', '()()'], 'Yes'],\n    [['((()', '()()'], 'No'],\n    [['()()', '((()'],\
    \ 'No'],\n    [['((()', '()))'], 'Yes'],\n    [['()()', '()()'], 'Yes'],\n   \
    \ [['((()', '()()'],", "    $left = 0;\n    $right = 0;\n    foreach ($lst as\
    \ $str) {\n        $left += substr_count($str, '(');\n        $right += substr_count($str,\
    \ ')');\n    }\n    if ($left == $right) {\n        return 'Yes';\n    } else\
    \ {\n        return 'No';\n    }\n}\n\n$tests = [\n    [\n        'input' => ['(())',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['(())',\
    \ '()))'],\n        'expected' => 'No'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ ')()('],\n        'expected' => 'No'\n    ],\n    [\n        'input' => ['()()',\
    \ ')(()'],\n        'expected' => 'No'\n    ],\n    [\n        'input' => ['()()',\
    \ ')(())'],\n        'expected' => 'No'\n    ],\n    [\n        'input' => ['()()',\
    \ '())('],\n        'expected' => 'No'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'\n    ],\n    [\n        'input' => ['()()',\
    \ '()()'],\n        'expected' => 'Yes'", "    $lst = explode(\" \", $lst);\n\
    \    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == \"(\") {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == \"\
    (\") {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open == 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } elseif ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"No\";\n    } elseif ($str1_open < 0 && $str2_open > 0) {\n        return \"\
    Yes\";\n    } elseif ($str1_open > 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(\"(() (()\"\
    ) . PHP_EOL;\necho match_parens(\"(()) (()\") . PHP_EOL;\necho match_parens(\"\
    (() ()\") . PHP_EOL;\necho match_parens(\"(() ()\") . PHP_EOL;\necho match_parens(\"\
    () (()\") . PHP_EOL;\necho match_parens(\"() ()\") . PHP_EOL;\necho match_parens(\"\
    () ()\") . PHP_EOL;", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n   \
    \     if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n  \
    \  $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\necho match_parens('(()),()()') . PHP_EOL;\necho match_parens('(()),(())')\
    \ . PHP_EOL;\necho match_parens('(()),())(') . PHP_EOL;\necho match_parens('(()),)(')\
    \ . PHP_EOL;\necho match_parens('(()),()))') . PHP_EOL;\necho match_parens('(()),()()(')\
    \ . PHP_EOL;\necho match_parens('(()),()()))') . PHP_EOL;\necho match_parens('(()),()()))(')\
    \ . PHP_EOL;\necho match_parens('(()),()())))(') . PHP_EOL;\necho match_parens('(()),()()))()')\
    \ . PHP_EOL;\necho match_parens('(()),()()))()(') . PHP_EOL;\necho match_parens('(()),()()))())(')\
    \ . PHP_EOL;\necho match_parens('(()),()()))()()') . PHP_EOL;\necho match_parens('(()),()()))()()(')\
    \ . PHP_E", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $good = \"Yes\";\n\
    \    $bad = \"No\";\n    $parens = 0;\n    for ($i=0; $i < strlen($str1); $i++)\
    \ {\n        if ($str1[$i] == \"(\") {\n            $parens++;\n        } else\
    \ {\n            $parens--;\n        }\n        if ($parens < 0) {\n         \
    \   return $bad;\n        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n\
    \        if ($str2[$i] == \"(\") {\n            $parens++;\n        } else {\n\
    \            $parens--;\n        }\n        if ($parens < 0) {\n            return\
    \ $bad;\n        }\n    }\n    if ($parens == 0) {\n        return $good;\n  \
    \  } else {\n        return $bad;\n    }\n}\n\n$tests = [\n    [[\"(())\", \"\
    ()()\"], \"Yes\"],\n    [[\"(()\", \"())\"], \"No\"],\n    [[\"(()\", \"()(\"\
    ], \"No\"],\n    [[\"()\", \"())\"], \"No\"],\n    [[\"(()\", \"()(\"], \"No\"\
    ],\n    [[\"()\", \"())\"], \"No\"],\n    [[\"()\", \"()(\"], \"Yes\"],\n    [[\"\
    ()\", \"()()\"], \"Yes\"],\n    [[\"()()\", \"()()\"], \"Yes\"],\n    [[\"()()\"\
    , \"()(\"], \"Yes\"],\n    [[\"()()\", \"())\"], \"Yes\"],\n    [[\"()()\", \"\
    ()()\"], \"Yes\"],\n    [[\"()()\", \"()(\"], \"Yes\"],\n    [[\"()()\", \"())\"\
    ], \"Yes\"],\n    [[\"()()\", \"()()\"], \"Yes\"],\n    [[\"()()\", \"()(\"],\
    \ \"Yes\"],\n    [[\"()()\", \"())\"], \"Yes\"],\n    [[\"()()\", \"()()\"], \"\
    Yes\"],\n    [[\"()()\", \"()(\"], \"Yes\"],\n    [[\"()()\", \"", "    $left\
    \ = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n        $left += substr_count($str,\
    \ '(');\n        $right += substr_count($str, ')');\n    }\n    if ($left == $right)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", " \
    \   $lst = explode(',', $lst);\n    $lst[0] = str_split($lst[0]);\n    $lst[1]\
    \ = str_split($lst[1]);\n    $lst[0] = array_count_values($lst[0]);\n    $lst[1]\
    \ = array_count_values($lst[1]);\n    if (isset($lst[0]['(']) && isset($lst[1]['(']))\
    \ {\n        if ($lst[0]['('] > $lst[1]['(']) {\n            $lst[0]['('] -= $lst[1]['('];\n\
    \            unset($lst[1]['(']);\n        } elseif ($lst[0]['('] < $lst[1]['('])\
    \ {\n            $lst[1]['('] -= $lst[0]['('];\n            unset($lst[0]['(']);\n\
    \        } else {\n            unset($lst[0]['(']);\n            unset($lst[1]['(']);\n\
    \        }\n    }\n    if (isset($lst[0][')']) && isset($lst[1][')'])) {\n   \
    \     if ($lst[0][')'] > $lst[1][')']) {\n            $lst[0][')'] -= $lst[1][')'];\n\
    \            unset($lst[1][')']);\n        } elseif ($lst[0][')'] < $lst[1][')'])\
    \ {\n            $lst[1][')'] -= $lst[0][')'];\n            unset($lst[0][')']);\n\
    \        } else {\n            unset($lst[0][')']);\n            unset($lst[1][')']);\n\
    \        }\n    }\n    if (empty($lst[0]) && empty($lst[1])) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\necho match_parens('(()),()')\
    \ . PHP_EOL;\n", "    $a = $lst[0];\n    $b = $lst[1];\n    $c = $a . $b;\n  \
    \  $d = $b . $a;\n    $e = str_split($c);\n    $f = str_split($d);\n    $g = 0;\n\
    \    $h = 0;\n    $i = 0;\n    $j = 0;\n    foreach ($e as $k) {\n        if ($k\
    \ == '(') {\n            $g++;\n        } else {\n            $g--;\n        }\n\
    \        if ($g < 0) {\n            $i++;\n        }\n    }\n    foreach ($f as\
    \ $k) {\n        if ($k == '(') {\n            $h++;\n        } else {\n     \
    \       $h--;\n        }\n        if ($h < 0) {\n            $j++;\n        }\n\
    \    }\n    if ($g == 0 && $h == 0) {\n        return 'Yes';\n    } else {\n \
    \       return 'No';\n    }\n}", "    $lst = explode(',', $lst);\n    $lst[0]\
    \ = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst = array_merge($lst[0],\
    \ $lst[1]);\n    $lst = implode('', $lst);\n    $lst = str_split($lst);\n    $lst\
    \ = array_count_values($lst);\n    if ($lst['('] == $lst[')']) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\necho match_parens('(()),()()');",
  "    $lst = explode(',', $lst);\n    $lst[0] = str_split($lst[0]);\n    $lst[1]\
    \ = str_split($lst[1]);\n    $lst[0] = array_count_values($lst[0]);\n    $lst[1]\
    \ = array_count_values($lst[1]);\n    if (isset($lst[0]['(']) && isset($lst[1]['(']))\
    \ {\n        if ($lst[0]['('] == $lst[1]['(']) {\n            return 'Yes';\n\
    \        }\n    }\n    if (isset($lst[0][')']) && isset($lst[1][')'])) {\n   \
    \     if ($lst[0][')'] == $lst[1][')']) {\n            return 'Yes';\n       \
    \ }\n    }\n    return 'No';\n}\n", "    $lst = explode(',', $lst);\n    $lst[0]\
    \ = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst = array_merge($lst[0],\
    \ $lst[1]);\n    $count = 0;\n    foreach ($lst as $char) {\n        if ($char\
    \ == '(') {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    if ($count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return 'Yes';\n    } else if ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        if ($str2_open_close > 0) {\n    \
    \        $str2_open_close = $str2_open_close * -1;\n            if ($str2_open_close\
    \ == $str1_len) {\n                return 'Yes';\n            } else {\n     \
    \           return 'No';\n            }\n        } else {\n            if ($str2_open_close\
    \ == $str1_len) {\n                return 'Yes';\n            } else {\n     \
    \           return 'No';\n            }\n        }\n    } else if ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        if ($str1_open_close > 0) {\n    \
    \        $str1_open_close = $str1_open_close * -1;\n            if ($str1_open_close\
    \ == $str2_len) {\n                return 'Yes';\n            } else {\n     \
    \           return 'No';\n            }\n        } else {\n            if ($str1_open_close\
    \ == $str2_len) {\n                return 'Yes';\n            } else {\n     \
    \           return 'No';\n            }\n        }\n    } else {\n        if ($str1_open_close\
    \ > 0) {\n            $str1", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$test1 = ['(())', '()()'];\n$test2 = ['(()', '()('];\n$test3\
    \ = ['()', '()'];\n$test4 = ['(()', '()()'];\n$test5 = ['()()', '()()'];\n$test6\
    \ = ['()()', '()'];\n$test7 = ['()()', '()()()'];\n$test8 = ['()()()', '()()'];\n\
    $test9 = ['()()()', '()()()'];\n$test10 = ['()()()', '()()()()'];\n$test11 = ['()()()()',\
    \ '()()()'];\n$test12 = ['()()()()', '()()()()'];\n$test13 = ['()()()()', '()()()()()'];\n\
    $test14 = ['()()()()()', '()()()()'];\n$test15 = ['()()()()()', '()()()()()'];\n\
    $test16 = ['()()()()()', '()()()()()()'];\n$test17 = ['()()()()()()', '()()()()()'];\n\
    $test18 = ['()()()()()()', '()()()()()", "    $lst = explode(\" \", $lst);\n \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = substr_count($str1,\
    \ \"(\");\n    $str2_count = substr_count($str2, \"(\");\n    $str1_count_close\
    \ = substr_count($str1, \")\");\n    $str2_count_close = substr_count($str2, \"\
    )\");\n    if ($str1_count == $str1_count_close && $str2_count == $str2_count_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    echo match_parens(\"(())(())\") . PHP_EOL;\necho match_parens(\"(())(()\") . PHP_EOL;\n\
    echo match_parens(\"())()()\") . PHP_EOL;\necho match_parens(\"())(()\") . PHP_EOL;\n\
    echo match_parens(\"(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [\n\
    \        'input' => ['(())', '()()'],\n        'expected' => 'Yes'\n    ],\n \
    \   [\n        'input' => ['(())', '()))'],\n        'expected' => 'No'\n    ],\n\
    \    [\n        'input' => ['(()))', '()()'],\n        'expected' => 'Yes'\n \
    \   ],\n    [\n        'input' => ['(()))', '()))'],\n        'expected' => 'No'\n\
    \    ],\n    [\n        'input' => ['(()))', ')(()'],\n        'expected' => 'No'\n\
    \    ],\n    [\n        'input' => ['(()))', '())('],\n        'expected' => 'No'\n\
    \    ],\n    [\n        'input' => ['(()))', '()()'],\n        'expected'", " \
    \   $lst = array_map('str_split', $lst);\n    $lst = array_map('array_count_values',\
    \ $lst);\n    $lst = array_map(function($x) {\n        return $x['('] - $x[')'];\n\
    \    }, $lst);\n    $sum = array_sum($lst);\n    return $sum == 0 ? 'Yes' : 'No';\n\
    }\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count == -1 && $str2_count == 1) {\n        return\
    \ 'Yes';\n    } elseif ($str1_count == 1 && $str2_count == -1) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [\n\
    \        'input' => ['(())', '()()'],\n        'expected' => 'Yes'\n    ],\n \
    \   [\n        'input' => ['(())', '()))'],\n        'expected' => 'No'\n    ],\n\
    \    [\n        'input' => ['((()', '()))'],\n        'expected' => 'Yes'\n  \
    \  ],\n    [\n        'input' => ['((()', '()()'],\n        'expected' => 'No'\n\
    \    ],\n    [\n        'input' => ['((()', '()))'],\n        'expected' => 'Yes'\n\
    \    ],\n    [\n        'input' => ['((()', '()))'],\n        'expected' => 'Yes'\n\
    \    ],\n    [\n        'input' => ['((()', '()))'],\n        'expected' => 'Yes'\n\
    \    ],\n    [\n        'input' => ['((()', '()))'],\n        'expected' =>",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n  \
    \  $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n  \
    \  $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_open_close\
    \ = $str1_open + $str2_close;\n    $str2_open_close = $str2_open + $str1_close;\n\
    \    if ($str1_balance == 0 && $str2_balance == 0) {\n        return 'Yes';\n\
    \    } else if ($str1_balance == 0 && $str2_balance != 0) {\n        if ($str2_balance\
    \ == $str1_open_close) {\n            return 'Yes';\n        } else {\n      \
    \      return 'No';\n        }\n    } else if ($str1_balance != 0 && $str2_balance\
    \ == 0) {\n        if ($str1_balance == $str2_open_close) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No';\n        }\n    } else if\
    \ ($str1_balance != 0 && $str2_balance != 0) {\n        if ($str1_balance == $str2_open_close\
    \ && $str2_balance == $str1_open_close) {\n            return 'Yes';\n       \
    \ } else {\n            return 'No';\n        }\n    }\n}\n\n$lst = ['(())', '()()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['()', '()()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['()', ')('];\necho match_parens($", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n        if ($str1_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n        if ($str2_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    }\n    if ($str1_open < 0 && $str2_open >\
    \ 0) {\n        return 'Yes';\n    }\n    return 'No';\n}\n", "    $left = 0;\n\
    \    $right = 0;\n    foreach ($lst as $str) {\n        $left += substr_count($str,\
    \ '(');\n        $right += substr_count($str, ')');\n    }\n    return $left ==\
    \ $right ? 'Yes' : 'No';\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n  \
    \  [['(()', '()'], 'No'],\n    [['(())', '()))'], 'No'],\n    [['()', '()'], 'Yes'],\n\
    \    [['(())', '()()'], 'Yes'],\n    [['(()', '()'], 'No'],\n    [['(())', '()))'],\
    \ 'No'],\n    [['()', '()'], 'Yes'],\n    [['(())', '()()'], 'Yes'],\n    [['(()',\
    \ '()'], 'No'],\n    [['(())', '()))'], 'No'],\n    [['()', '()'], 'Yes'],\n \
    \   [['(())', '()()'], 'Yes'],\n    [['(()', '()'], 'No'],\n    [['(())', '()))'],\
    \ 'No'],\n    [['()', '()'], 'Yes'],\n    [['(())', '()()'], 'Yes'],\n    [['(()',\
    \ '()'], 'No'],\n    [['(())', '()))'], 'No'],\n    [['()', '()'], 'Yes'],\n \
    \   [['(())', '()()'], 'Yes'],\n    [['(()', '()'], 'No'],\n    [['(())', '()))'],\
    \ 'No'],\n    [['()', '()'], 'Yes'],\n    [['(())', '()()'], 'Yes'],\n    [['(()',\
    \ '()'], 'No'],\n    [['(())', '()))'], 'No'],\n    [['()', '()'], 'Yes'],\n \
    \   [['", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 =\
    \ $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n \
    \   $str1_open = substr_count($str1, \"(\");\n    $str1_close = substr_count($str1,\
    \ \")\");\n    $str2_open = substr_count($str2, \"(\");\n    $str2_close = substr_count($str2,\
    \ \")\");\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n\
    \        return \"Yes\";\n    } elseif ($str1_open == $str2_close && $str2_open\
    \ == $str1_close) {\n        return \"Yes\";\n    } elseif ($str1_open == $str2_open\
    \ && $str1_close == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str2_close && $str2_open == $str1_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}", "    $lst = explode(\" \", $lst);\n\
    \    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_parens = 0;\n    $s2_parens =\
    \ 0;\n    for ($i=0; $i < strlen($s1); $i++) {\n        if ($s1[$i] == \"(\")\
    \ {\n            $s1_parens++;\n        } else {\n            $s1_parens--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($s2); $i++) {\n        if ($s2[$i]\
    \ == \"(\") {\n            $s2_parens++;\n        } else {\n            $s2_parens--;\n\
    \        }\n    }\n    if ($s1_parens == 0 && $s2_parens == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($s1_parens == 0 && $s2_parens < 0) {\n        return\
    \ \"Yes\";\n    } elseif ($s1_parens > 0 && $s2_parens == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($s1_parens < 0 && $s2_parens == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($s1_parens > 0 && $s2_parens < 0) {\n        return\
    \ \"Yes\";\n    } elseif ($s1_parens < 0 && $s2_parens > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "    $lst = explode(\"\
    \ \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n\
    \    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if\
    \ ($str1[$i] == \"(\") {\n            $str1_count++;\n        } else {\n     \
    \       $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == \"(\") {\n            $str2_count++;\n        }\
    \ else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count ==\
    \ 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ < 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ < 0 && $str2_count < 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ > 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}", "    $lst = explode(',', $lst);\n    $lst[0] = str_split($lst[0]);\n\
    \    $lst[1] = str_split($lst[1]);\n    $lst[0] = array_count_values($lst[0]);\n\
    \    $lst[1] = array_count_values($lst[1]);\n    if (isset($lst[0]['(']) && isset($lst[1]['(']))\
    \ {\n        if ($lst[0]['('] == $lst[1]['(']) {\n            return 'Yes';\n\
    \        }\n    }\n    if (isset($lst[0][')']) && isset($lst[1][')'])) {\n   \
    \     if ($lst[0][')'] == $lst[1][')']) {\n            return 'Yes';\n       \
    \ }\n    }\n    return 'No';\n}\n\necho match_parens('(()),()');\necho match_parens('(()),(())');\n\
    echo match_parens('(()),()()');\necho match_parens('()),()()');\necho match_parens('()),(())');\n\
    echo match_parens('()),()');\necho match_parens('(()),(()');\necho match_parens('(()),()(');\n\
    echo match_parens('()),(()(');\necho match_parens('()),()(');\necho match_parens('(()),(()(');\n\
    echo match_parens('()),(()(');\necho match_parens('(()),()(');\necho match_parens('()),()(');\n\
    echo match_parens('(()),()(');\necho match_parens('()),(()(');\necho match_parens('()),()(');\n\
    echo match_parens('(()),()(');\necho match_parens('()),(()(');\necho match_parens('()),()(');\n\
    echo match_parens('(()),()(');\necho match_parens('()),(()(');\necho match_parens('()),",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [['(())',\
    \ '()()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['(()', '()()'], 'Yes'],\n\
    \    [['()', '()()'], 'Yes'],\n    [['()', '())('], 'No'],\n    [['(()', '())('],\
    \ 'No'],\n    [['(()', '())(()'], 'No'],\n    [['(()', '())(())('], 'No'],\n \
    \   [['(()', '())(())(()'], 'Yes'],\n    [['(()', '())(())(())('], 'No'],\n  \
    \  [['(()', '())(())(())(()'], 'Yes'],\n    [['(()', '())(())(())(())('], 'No'],\n\
    \    [['(()', '())(())(())(())(()'], 'Yes'],\n    [['(()', '())(())(())(())(())('],\
    \ 'No'],\n    [['(()', '())(())(())(())(())(()'], 'Yes'],\n    [['(()', '())(",
  "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close = 0;\n    for\
    \ ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n          \
    \  $str1_open++;\n        } else {\n            $str1_close++;\n        }\n  \
    \  }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n\
    \            $str2_open++;\n        } else {\n            $str2_close++;\n   \
    \     }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ > $str2_close) {\n        if ($str2_open - $str2_close == $str1_open) {\n  \
    \          return 'Yes';\n        } else {\n            return 'No';\n       \
    \ }\n    } elseif ($str1_open == $str1_close && $str2_open < $str2_close) {\n\
    \        if ($str1_open - $str1_close == $str2_close) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } elseif ($str1_open\
    \ > $str1_close && $str2_open == $str2_close) {\n        if ($str1_open - $str1_close\
    \ == $str2_open) {\n            return 'Yes';\n        } else {\n            return\
    \ 'No';\n        }\n    } elseif ($str1_open < $str1_close && $str2_open == $str2_close)\
    \ {", "    $left = 0;\n    $right = 0;\n    foreach ($lst as $str) {\n       \
    \ $left += substr_count($str, '(');\n        $right += substr_count($str, ')');\n\
    \    }\n    return $left == $right ? 'Yes' : 'No';\n}\n", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    for ($i = 0; $i < $str1_len;\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else if ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return 'Yes';\n    } else if ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return 'Yes';\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\n$lst = ['()', '()'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['(())', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(()', '())'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['())', '()('];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['()', ')('];\necho match_parens($lst) . PHP_EOL;\n$lst =\
    \ ['()(', ')'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(', ')'];\necho\
    \ match_", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open\
    \ - $str1_close;\n    $str2_diff = $str2_open - $str2_close;\n    $str1_open_close\
    \ = $str1_open + $str2_close;\n    $str2_open_close = $str2_open + $str1_close;\n\
    \    if ($str1_diff == 0 && $str2_diff == 0) {\n        return 'Yes';\n    } elseif\
    \ ($str1_diff == 0 && $str2_diff != 0) {\n        if ($str2_diff > 0 && $str2_open_close\
    \ >= $str2_diff) {\n            return 'Yes';\n        } elseif ($str2_diff <\
    \ 0 && $str2_open_close >= abs($str2_diff)) {\n            return 'Yes';\n   \
    \     } else {\n            return 'No';\n        }\n    } elseif ($str1_diff\
    \ != 0 && $str2_diff == 0) {\n        if ($str1_diff > 0 && $str1_open_close >=\
    \ $str1_diff) {\n            return 'Yes';\n        } elseif ($str1_diff < 0 &&\
    \ $str1_open_close >= abs($str1_diff)) {\n            return 'Yes';\n        }\
    \ else {\n            return 'No';\n        }\n    } elseif ($str1_diff != 0 &&\
    \ $str2_diff != 0) {\n        if ($str1_diff > 0 && $str2_diff > 0) {\n      \
    \      if ($str1_open_close >= $str1_diff && $str2_open_close >= $str2_diff",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", "    $lst = explode(',',\
    \ $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open\
    \ - $str1_close;\n    $str2_diff = $str2_open - $str2_close;\n    $str1_open_pos\
    \ = strpos($str1, '(');\n    $str1_close_pos = strpos($str1, ')');\n    $str2_open_pos\
    \ = strpos($str2, '(');\n    $str2_close_pos = strpos($str2, ')');\n    if ($str1_diff\
    \ == 0 && $str2_diff == 0) {\n        return 'Yes';\n    } elseif ($str1_diff\
    \ == 0 && $str2_diff != 0) {\n        if ($str2_diff > 0) {\n            if ($str2_open_pos\
    \ < $str2_close_pos) {\n                return 'Yes';\n            } else {\n\
    \                return 'No';\n            }\n        } else {\n            if\
    \ ($str2_open_pos > $str2_close_pos) {\n                return 'Yes';\n      \
    \      } else {\n                return 'No';\n            }\n        }\n    }\
    \ elseif ($str1_diff != 0 && $str2_diff == 0) {\n        if ($str1_diff > 0) {\n\
    \            if ($str1_open_pos < $str1_close_pos) {\n                return 'Yes';\n\
    \            } else {\n                return 'No';\n            }\n        }\
    \ else {\n            if ($str1_open_pos > $str1_close_pos) {\n              \
    \  return 'Yes';\n            } else {", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count > 0) {\n        if (strpos($str2, '(') !== false) {\n  \
    \          return 'Yes';\n        } else {\n            return 'No';\n       \
    \ }\n    } elseif ($str1_count > 0 && $str2_count == 0) {\n        if (strpos($str1,\
    \ '(') !== false) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } else {\n        return 'No';\n    }\n}\n\n$tests\
    \ = [\n    [['(())', '()()'], 'Yes'],\n    [['(())', '())'], 'No'],\n    [['()()',\
    \ '()()'], 'Yes'],\n    [['()()', '())('], 'No'],\n    [['()()', '())(()'], 'Yes'],\n\
    \    [['()()', '())(())('], 'No'],\n    [['()()', '())(())(()'], 'Yes'],\n   \
    \ [['()()', '())(())(())('], 'No'],\n    [['()()', '())(())(())(()'], 'Yes'],\n\
    \    [['()()', '())(())(())(", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   $str1_parens = 0;\n    $str2_parens = 0;\n    for ($i=0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_parens++;\n    \
    \    } else {\n            $str1_parens--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_parens++;\n\
    \        } else {\n            $str2_parens--;\n        }\n    }\n    if ($str1_parens\
    \ == 0 && $str2_parens == 0) {\n        return 'Yes';\n    } elseif ($str1_parens\
    \ == $str2_parens) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\n$lst = ['(())', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst =\
    \ ['()', '()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '()('];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['()', ')('];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(()', ')'];\necho match_parens($lst) . PHP_EOL;\n$lst =\
    \ ['(())', ')('];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(()', ')('];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(()', '))'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(()', '))('];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return 'No';\n        }\n    }\n\
    \    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n \
    \           $str2_open++;\n        } else {\n            $str2_open--;\n     \
    \   }\n        if ($str2_open < 0) {\n            return 'No';\n        }\n  \
    \  }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return 'Yes';\n \
    \   }\n    if ($str1_open == 0 && $str2_open > 0) {\n        return 'Yes';\n \
    \   }\n    if ($str1_open > 0 && $str2_open == 0) {\n        return 'Yes';\n \
    \   }\n    if ($str1_open > 0 && $str2_open > 0) {\n        return 'Yes';\n  \
    \  }\n    return 'No';\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(())',\
    \ '('], 'No'],\n    [['(()', '()'], 'Yes'],\n    [['(()', '()('], 'No'],\n   \
    \ [['(()', '()()'], 'Yes'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()))'],\
    \ 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()', '()))'], 'No'],", "    $s1\
    \ = $lst[0];\n    $s2 = $lst[1];\n    $s1_len = strlen($s1);\n    $s2_len = strlen($s2);\n\
    \    $s1_open = 0;\n    $s2_open = 0;\n    $s1_close = 0;\n    $s2_close = 0;\n\
    \    for ($i=0; $i < $s1_len; $i++) {\n        if ($s1[$i] == '(') {\n       \
    \     $s1_open++;\n        } else {\n            $s1_close++;\n        }\n   \
    \ }\n    for ($i=0; $i < $s2_len; $i++) {\n        if ($s2[$i] == '(') {\n   \
    \         $s2_open++;\n        } else {\n            $s2_close++;\n        }\n\
    \    }\n    if ($s1_open == $s1_close && $s2_open == $s2_close) {\n        return\
    \ 'Yes';\n    } elseif ($s1_open == $s1_close && $s2_open > $s2_close) {\n   \
    \     if ($s2_open - $s2_close <= $s1_open) {\n            return 'Yes';\n   \
    \     } else {\n            return 'No';\n        }\n    } elseif ($s1_open ==\
    \ $s1_close && $s2_open < $s2_close) {\n        if ($s2_close - $s2_open <= $s1_open)\
    \ {\n            return 'Yes';\n        } else {\n            return 'No';\n \
    \       }\n    } elseif ($s1_open > $s1_close && $s2_open == $s2_close) {\n  \
    \      if ($s1_open - $s1_close <= $s2_open) {\n            return 'Yes';\n  \
    \      } else {\n            return 'No';\n        }\n    } elseif ($s1_open <\
    \ $s1_close && $s2_open == $s2_close) {\n        if ($s1_close - $s1_open", " \
    \   $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str1_close && $str2_open !=\
    \ $str2_close) {\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            $str2_close = 0;\n        } else {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $str2_open =\
    \ 0;\n        }\n        if ($str2_open == $str2_close) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No';\n        }\n    } elseif\
    \ ($str1_open != $str1_close && $str2_open == $str2_close) {\n        if ($str1_open\
    \ > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n     \
    \       $str1_close = 0;\n        } else {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            $str1_open = 0;\n        }\n        if ($str1_open\
    \ == $str1_close) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } else {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close", "    $lst = explode(',',\
    \ $lst);\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n\
    \    $lst = array_merge($lst[0], $lst[1]);\n    $lst = implode('', $lst);\n  \
    \  $lst = str_split($lst);\n    $count = 0;\n    foreach ($lst as $char) {\n \
    \       if ($char == '(') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if ($count < 0) {\n            return 'No';\n\
    \        }\n    }\n    if ($count == 0) {\n        return 'Yes';\n    } else {\n\
    \        return 'No';\n    }\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n        \
    \    $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n\
    \        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else {\n\
    \            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    } else if ($str1_open < 0 && $str2_open ==\
    \ 0) {\n        return 'Yes';\n    } else if ($str1_open < 0 && $str2_open < 0)\
    \ {\n        if ($str1_open + $str2_open == 0) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } else {\n       \
    \ return 'No';\n    }\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(()',\
    \ '()('], 'No'],\n    [['(()', '()()'], 'Yes'],\n    [['(()', '())'], 'Yes'],\n\
    \    [['(()', '()))'], 'No'],\n    [['(()', '())))'], 'No'],\n    [['(()', '()))))'],\
    \ 'No'],\n    [['(()', '()))))))'], 'No'],\n    [['(()', '())))))))'], 'No'],\n\
    \    [['", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 =\
    \ $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n \
    \   $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $total_balance = $str1_balance + $str2_balance;\n    if\
    \ ($total_balance == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_open--;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return 'Yes';\n        } else {\n        \
    \    return 'No';\n        }\n    } else {\n        return 'No';\n    }\n}\n\n\
    $tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['()',\
    \ '()()'], 'Yes'],\n    [['(())', '()))'], 'No'],\n    [['(()', '()))'], 'No'],\n\
    \    [['()', '()))'], 'No'],\n    [['(()', '()()'], 'Yes'],\n    [['()', '()()'],\
    \ 'Yes'],\n    [['(()', '()()'], 'Yes'],\n    [['()', '()", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    for ($i = 0; $i < $str1_len;\
    \ $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n     \
    \   } else {\n            $str1_count--;\n        }\n    }\n    for ($i = 0; $i\
    \ < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\n\n$tests = [\n    [\n        'input' => [\n            '((()))',\n\
    \            '()()()'\n        ],\n        'expected' => 'Yes'\n    ],\n    [\n\
    \        'input' => [\n            '()',\n            '()'\n        ],\n     \
    \   'expected' => 'Yes'\n    ],\n    [\n        'input' => [\n            '()',\n\
    \            '))'\n        ],\n        'expected' => 'No'\n    ],\n    [\n   \
    \     'input' => [\n            '((()))',\n            '()))()'\n        ],\n\
    \        'expected' => 'No'\n    ],\n    [\n        'input' => [\n           \
    \ '((()))',\n            '()()()'\n        ],\n        'expected' => 'Yes'\n \
    \   ],\n    [\n        'input' => [\n            '((()))',\n            '()",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n$lst = [\"(())()\"\
    , \"())\"];\necho match_parens($lst) . \"\\n\";\n$lst = [\"(())()\", \"()()\"\
    ];\necho match_parens($lst) . \"\\n\";\n$lst = [\"()()\", \"()()\"];\necho match_parens($lst)\
    \ . \"\\n\";\n$lst = [\"()()\", \"()()()\"];\necho match_parens($lst) . \"\\n\"\
    ;\n$lst = [\"()()\", \"()(())\"];\necho match_parens($lst) . \"\\n\";\n$lst =\
    \ [\"()()\", \"()()()()\"];\necho match_parens($lst) . \"\\n\";\n$lst = [\"()()\"\
    , \"((()))\"];\necho match_parens($lst) . \"\\n\";\n$lst = [\"()()\", \"((()))()\"\
    ];\necho match_parens($lst) . \"\\n\";\n$lst = [\"()()\", \"((()))()()\"];\necho\
    \ match_parens($lst) . \"\\n\";\n$lst = [\"()()\", \"((()))()()()\"];\necho match_parens($lst)\
    \ . \"\\n\";\n$", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len =\
    \ strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $total_balance\
    \ = $str1_balance + $str2_balance;\n    if ($total_balance == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n        if ($str1_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n        if ($str2_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    }\n    if ($str1_open < 0 && $str2_open >\
    \ 0) {\n        return 'Yes';\n    }\n    return 'No';\n}\n\n$input = ['(())()',\
    \ '())'];\necho match_parens($input);\necho \"\\n\";\n$input = ['(())()', '()()'];\n\
    echo match_parens($input);\necho \"\\n\";\n$input = ['()()', '()()'];\necho match_parens($input);\n\
    echo \"\\n\";\n$input = ['()()', ')(()'];\necho match_parens($input);\necho \"\
    \\n\";\n$input = ['()()', '())('];\necho match_parens($input);\necho \"\\n\";\n\
    $input = ['()()', '()()'];\necho match_parens($input);\necho \"\\n\";\n$input\
    \ = ['()()', '()()", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n \
    \   $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0;\
    \ $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(') {\n            $str1_count++;\n\
    \        } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0;\
    \ $i < strlen($str2); $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n\necho match_parens('(()),()') . PHP_EOL;\necho match_parens('(()),(())')\
    \ . PHP_EOL;\necho match_parens('(()),(()') . PHP_EOL;\necho match_parens('(()),())')\
    \ . PHP_EOL;\necho match_parens('(()),()(') . PHP_EOL;\necho match_parens('(()),()()')\
    \ . PHP_EOL;\necho match_parens('(()),())(') . PHP_EOL;\necho match_parens('(()),()))')\
    \ . PHP_EOL;\necho match_parens('(()),())))') . PHP_EOL;\necho match_parens('(()),()))))')\
    \ . PHP_EOL;\necho match_parens('(()),()))))(') . PHP_EOL;\necho match_parens('(()),()))))()')\
    \ . PHP_EOL;\necho match_parens('(()),())))))(') . PHP_EOL;\necho match_parens('(()),()))))))')\
    \ . PHP_EOL;\necho match_parens('(()),())))))))') .", "    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    $str1_balance_abs_half = $str1_balance_abs / 2;\n\
    \    $str2_balance_abs_half = $str2_balance_abs / 2;\n    $str1_balance_abs_half_int\
    \ = intval($str1_balance_abs_half);\n    $str2_balance_abs_half_int = intval($str2_balance_abs_half);\n\
    \    $str1_balance_abs_half_int_remainder = $str1_balance_abs_half - $str1_balance_abs_half_int;\n\
    \    $str2_balance_abs_half_int_remainder = $str2_balance_abs_half - $str2_balance_abs_half_int;\n\
    \    $str1_balance_abs_half_int_remainder_abs = abs($str1_balance_abs_half_int_remainder);\n\
    \    $str2_balance_abs_half_int_remainder_abs = abs($str2_balance_abs_half_int_remainder);\n\
    \    $str1_balance_abs_half_int_remainder_abs_half = $str1_balance_abs_half_int_remainder_abs\
    \ / 2;\n    $str2_balance_abs_half_int_remainder_abs_half =", "    $lst = explode(\"\
    \ \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == \"(\") {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == \"\
    (\") {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open > 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\n\necho match_parens(\"(()()()()) (())()()()\") . \"\\n\";\necho match_parens(\"\
    (()()()()) (())()()()()\") . \"\\n\";\necho match_parens(\"(()()()()) (()()()())\"\
    ) . \"\\n\";\necho match_parens(\"(()()()()) ())()()()\") . \"\\n\";\necho match_parens(\"\
    (()()()()) (()()()()()\") . \"\\n\";\necho match_parens(\"(()()()()) (()()()())\"\
    ) . \"\\n\";\necho match_parens(\"(()", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $total_open = $str1_open + $str2_open;\n    $total_close\
    \ = $str1_close + $str2_close;\n    $total_balance = $str1_balance + $str2_balance;\n\
    \    if ($total_open == $total_close && $total_balance == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens([\"\
    (())\", \"()()\"]) . \"\\n\";\necho match_parens([\"(())\", \"))(\"]) . \"\\n\"\
    ;\necho match_parens([\"()()\", \"()()\"]) . \"\\n\";\necho match_parens([\"()()\"\
    , \"()))\"]) . \"\\n\";\necho match_parens([\"()()\", \"()()()\"]) . \"\\n\";\n\
    echo match_parens([\"()()\", \"()()()()\"]) . \"\\n\";\necho match_parens([\"\
    ()()\", \"()()()()()\"]) . \"\\n\";\necho match_parens([\"()()\", \"()()()()()()\"\
    ]) . \"\\n\";\necho match_parens([\"()()\", \"()()()()()()()\"]) . \"\\n\";\n\
    echo match_parens([\"()()\", \"()()()()()()()()\"]) . \"\\n\";\necho match_parens([\"\
    ()()\", \"()()()()()()()()()\"]) . \"\\n\";\n", "    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_open--;\n        }\n    }\n    if ($str1_open ==\
    \ 0 && $str2_open == 0) {\n        return 'Yes';\n    } elseif ($str1_open > 0\
    \ && $str2_open < 0) {\n        return 'Yes';\n    } elseif ($str1_open < 0 &&\
    \ $str2_open > 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\n\n$test1 = ['(())', '()'];\n$test2 = ['(()', '()'];\n$test3 = ['(()',\
    \ '())'];\n$test4 = ['()', '()'];\n$test5 = ['()', '()()'];\n$test6 = ['()()',\
    \ '()'];\n$test7 = ['()()', '()()'];\n$test8 = ['()()', '()()()'];\n$test9 = ['()()()',\
    \ '()()'];\n$test10 = ['()()()', '()()()'];\n$test11 = ['()()()', '()()()()'];\n\
    $test12 = ['()()()()', '()()()'];\n$test13 = ['()()()()', '()()()()'];\n$test14\
    \ = ['()()()()', '()()()()()'];\n$test15 =", "    $lst = explode(',', $lst);\n\
    \    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst[0]\
    \ = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1]['('])) {\n        if ($lst[0]['(']\
    \ == $lst[1]['(']) {\n            return 'Yes';\n        }\n    }\n    if (isset($lst[0][')'])\
    \ && isset($lst[1][')'])) {\n        if ($lst[0][')'] == $lst[1][')']) {\n   \
    \         return 'Yes';\n        }\n    }\n    return 'No';\n}\n\necho match_parens('(()),()()')\
    \ . PHP_EOL;\necho match_parens('(()),(())') . PHP_EOL;\necho match_parens('(()),(()')\
    \ . PHP_EOL;\necho match_parens('(()),())') . PHP_EOL;\necho match_parens('()),(()')\
    \ . PHP_EOL;\necho match_parens('()),()()') . PHP_EOL;\necho match_parens('()),())')\
    \ . PHP_EOL;\necho match_parens('()),(())') . PHP_EOL;\necho match_parens('()),()()')\
    \ . PHP_EOL;\necho match_parens('()),())') . PHP_EOL;\necho match_parens('()),(())')\
    \ . PHP_EOL;\necho match_parens('()),()()') . PHP_EOL;\necho match_parens('()),())')\
    \ . PHP_EOL;\necho match_parens('()),(())') . PHP_EOL;\necho match_parens('()),()()')\
    \ . PHP_EOL;\necho match_parens('()),())') . PHP_EOL;", "    $lst = explode(\"\
    \ \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str = $str1 . $str2;\n\
    \    $len = strlen($str);\n    $count = 0;\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($str[$i] == '(') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\necho match_parens(\"(())() (())()\"\
    ) . \"\\n\";\necho match_parens(\"(())() ())()\") . \"\\n\";\necho match_parens(\"\
    (())() (()()\") . \"\\n\";\necho match_parens(\"(())() ())()\") . \"\\n\";\necho\
    \ match_parens(\"(())() (()()\") . \"\\n\";\necho match_parens(\"(())() (()()\"\
    ) . \"\\n\";\necho match_parens(\"(())() (()()\") . \"\\n\";\necho match_parens(\"\
    (())() (()()\") . \"\\n\";\necho match_parens(\"(())() (()()\") . \"\\n\";\necho\
    \ match_parens(\"(())() (()()\") . \"\\n\";\necho match_parens(\"(())() (()()\"\
    ) . \"\\n\";\necho match_parens(\"(())() (()()\") . \"\\n\";\necho match_parens(\"\
    (())() (()()\") . \"\\n\";\necho match_parens(\"(())() (()()\") . \"\\n\";\necho\
    \ match_parens(\"(())() (()()\") . \"\\n\";\necho match_parens(\"(())() (()()\"\
    ) . \"\\n\";\necho match_parens(\"(())() (()()\") . \"\\n\";\necho match_parens(\"\
    (())() (()()\") . \"\\n\";\necho match_parens(\"(())() (()()\") . \"\\n\";\necho",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_parens = 0;\n    $str2_parens\
    \ = 0;\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    for\
    \ ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n          \
    \  $str1_parens++;\n        } else {\n            $str1_parens--;\n        }\n\
    \    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_parens++;\n        } else {\n            $str2_parens--;\n\
    \        }\n    }\n    if ($str1_parens == 0 && $str2_parens == 0) {\n       \
    \ return 'Yes';\n    } elseif ($str1_parens == $str2_parens) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [\n    [['(())',\
    \ '()()'], 'Yes'],\n    [['(())', '()))'], 'No'],\n    [['()', '()()'], 'Yes'],\n\
    \    [['()', ')(()'], 'No'],\n    [['()', '()))'], 'No'],\n    [['(()', '()()'],\
    \ 'Yes'],\n    [['(()', '()))'], 'No'],\n    [['()(', '()()'], 'Yes'],\n    [['()(',\
    \ '()))'], 'No'],\n    [['(()', '()()'], 'Yes'],\n    [['(()', '()))'], 'No'],\n\
    \    [['()(', '()()'], 'Yes'],\n    [['()(', '()))'], 'No'],\n    [['()()', '()()'],\
    \ 'Yes'],\n    [['()()', '()", "    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count\
    \ = 0;\n    $s2_count = 0;\n    for ($i=0; $i < strlen($s1); $i++) {\n       \
    \ if ($s1[$i] == '(') {\n            $s1_count++;\n        } else {\n        \
    \    $s1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($s2); $i++) {\n\
    \        if ($s2[$i] == '(') {\n            $s2_count++;\n        } else {\n \
    \           $s2_count--;\n        }\n    }\n    if ($s1_count == 0 && $s2_count\
    \ == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n\
    }\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '()'], 'No'],\n\
    \    [['()', '()'], 'Yes'],\n    [['(()', '))'], 'No'],\n    [['(()', '()('],\
    \ 'No'],\n    [['(()', '()()'], 'Yes'],\n    [['(()', '())('], 'No'],\n    [['(()',\
    \ '()))'], 'No'],\n    [['(()', '())))'], 'No'],\n    [['(()', '()))))'], 'No'],\n\
    \    [['(()', '()))))('], 'No'],\n    [['(()', '()))))))'], 'No'],\n    [['(()',\
    \ '())))))))'], 'No'],\n    [['(()', '()))))))))'], 'No'],\n    [['(()', '()))))))))('],\
    \ 'No'],\n    [['(()', '()))))))))))'], 'No'],\n    [['(()', '())))))))))))'],\
    \ 'No'],\n    [['(()', '()))))))))))))'], 'No'", "    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n        if ($str1_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_open--;\n        }\n        if ($str2_open < 0) {\n   \
    \         return 'No';\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    }\n    if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    }\n    if ($str1_open < 0 && $str2_open >\
    \ 0) {\n        return 'Yes';\n    }\n    return 'No';\n}\n\n$tests = [\n    [['(())',\
    \ '()()'], 'Yes'],\n    [['(())', '()))'], 'No'],\n    [['()()', '()))'], 'Yes'],\n\
    \    [['()()', '()()'], 'Yes'],\n    [['(()', '()()'], 'Yes'],\n    [['(()', '()))'],\
    \ 'No'],\n    [['()', '()()'], 'Yes'],\n    [['()', '()))'], 'No'],\n    [['(',\
    \ '()()'], 'Yes'],\n    [['(', '()))'], 'No'],\n    [['', '()()'], 'Yes'", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_parens = 0;\n    $str2_parens\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_parens++;\n        } else {\n            $str1_parens--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_parens++;\n        } else {\n            $str2_parens--;\n\
    \        }\n    }\n    if ($str1_parens == 0 && $str2_parens == 0) {\n       \
    \ return 'Yes';\n    } elseif ($str1_parens == 0 && $str2_parens != 0) {\n   \
    \     return 'No';\n    } elseif ($str1_parens != 0 && $str2_parens == 0) {\n\
    \        return 'No';\n    } elseif ($str1_parens > 0 && $str2_parens < 0) {\n\
    \        return 'Yes';\n    } elseif ($str1_parens < 0 && $str2_parens > 0) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests\
    \ = [\n    [['(())', '()()'], 'Yes'],\n    [['(())', '))(('], 'No'],\n    [['()',\
    \ '()'], 'Yes'],\n    [['(()', '()('], 'Yes'],\n    [['(()', '()()'], 'Yes'],\n\
    \    [['(()', '()))'], 'No'],\n    [['(()', '))()'], 'No'],\n    [['(()', ')(()'],\
    \ 'No'],\n    [['(()', '())('], 'No'],\n    [['(()', '()))'], 'No'],\n    [['(()',",
  "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close = 0;\n    for\
    \ ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n          \
    \  $str1_open++;\n        } else {\n            $str1_close++;\n        }\n  \
    \  }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n\
    \            $str2_open++;\n        } else {\n            $str2_close++;\n   \
    \     }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", " \
    \   $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_count = 0;\n    $s2_count = 0;\n\
    \    for ($i=0; $i < strlen($s1); $i++) {\n        if ($s1[$i] == '(') {\n   \
    \         $s1_count++;\n        } else {\n            $s1_count--;\n        }\n\
    \    }\n    for ($i=0; $i < strlen($s2); $i++) {\n        if ($s2[$i] == '(')\
    \ {\n            $s2_count++;\n        } else {\n            $s2_count--;\n  \
    \      }\n    }\n    if ($s1_count == 0 && $s2_count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\n$lst = [\"(())()\", \"\
    ())\"];\necho match_parens($lst) . \"\\n\";\n$lst = [\"(())()\", \"()()\"];\n\
    echo match_parens($lst) . \"\\n\";\n$lst = [\"(())()\", \"()()()\"];\necho match_parens($lst)\
    \ . \"\\n\";\n$lst = [\"(())()\", \"()(())\"];\necho match_parens($lst) . \"\\\
    n\";\n$lst = [\"(())()\", \"()()()()\"];\necho match_parens($lst) . \"\\n\";\n\
    $lst = [\"(())()\", \"()()()()()\"];\necho match_parens($lst) . \"\\n\";\n$lst\
    \ = [\"(())()\", \"()()()()()()\"];\necho match_parens($lst) . \"\\n\";\n$lst\
    \ = [\"(())()\", \"()()()()()()()\"];\necho match_parens($lst) . \"\\n\";\n$lst\
    \ = [\"(())()\", \"()()()()()()()()\"];\necho match_parens($lst) . \"\\n\";\n\
    $lst = [\"(())()\", \"()()()()()", "    $lst = explode(\" \", $lst);\n    $s1\
    \ = $lst[0];\n    $s2 = $lst[1];\n    $s1_l = strlen($s1);\n    $s2_l = strlen($s2);\n\
    \    $s1_c = 0;\n    $s2_c = 0;\n    for ($i=0; $i < $s1_l; $i++) {\n        if\
    \ ($s1[$i] == \"(\") {\n            $s1_c++;\n        } else {\n            $s1_c--;\n\
    \        }\n    }\n    for ($i=0; $i < $s2_l; $i++) {\n        if ($s2[$i] ==\
    \ \"(\") {\n            $s2_c++;\n        } else {\n            $s2_c--;\n   \
    \     }\n    }\n    if ($s1_c == 0 && $s2_c == 0) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\n", "    $lst = explode(',', $lst);\n\
    \    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n        return\
    \ 'No';\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str1_close = 0;\n        } elseif ($str1_open <\
    \ $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n      \
    \      $str1_open = 0;\n        }\n        if ($str2_open > $str2_close) {\n \
    \           $str2_open = $str2_open - $str2_close;\n            $str2_close =\
    \ 0;\n        } elseif ($str2_open < $str2_close) {\n            $str2_close =\
    \ $str2_close - $str2_open;\n            $str2_open = 0;\n        }\n        if\
    \ ($str1_open == $str2_close && $str2_open == $str1_close) {\n            return\
    \ 'Yes';\n        } else {\n            return 'No", "    $str1 = $lst[0];\n \
    \   $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_diff = $str1_open - $str1_close;\n    $str2_diff = $str2_open\
    \ - $str2_close;\n    $str1_open_pos = strpos($str1, '(');\n    $str1_close_pos\
    \ = strpos($str1, ')');\n    $str2_open_pos = strpos($str2, '(');\n    $str2_close_pos\
    \ = strpos($str2, ')');\n    if ($str1_diff == 0 && $str2_diff == 0) {\n     \
    \   return 'Yes';\n    } elseif ($str1_diff == 0 && $str2_diff != 0) {\n     \
    \   if ($str2_diff > 0) {\n            if ($str2_open_pos < $str2_close_pos) {\n\
    \                return 'Yes';\n            } else {\n                return 'No';\n\
    \            }\n        } else {\n            if ($str2_open_pos > $str2_close_pos)\
    \ {\n                return 'Yes';\n            } else {\n                return\
    \ 'No';\n            }\n        }\n    } elseif ($str1_diff != 0 && $str2_diff\
    \ == 0) {\n        if ($str1_diff > 0) {\n            if ($str1_open_pos < $str1_close_pos)\
    \ {\n                return 'Yes';\n            } else {\n                return\
    \ 'No';\n            }\n        } else {\n            if ($str1_open_pos > $str1_close_pos)\
    \ {\n                return 'Yes';\n            } else {\n                return\
    \ 'No';\n            }\n        }\n   ", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n        \
    \    $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n\
    \        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else {\n\
    \            $str2_open--;\n        }\n    }\n    if ($str1_open == 0 && $str2_open\
    \ == 0) {\n        return 'Yes';\n    } else if ($str1_open == 0 && $str2_open\
    \ < 0) {\n        return 'Yes';\n    } else if ($str1_open < 0 && $str2_open ==\
    \ 0) {\n        return 'Yes';\n    } else if ($str1_open < 0 && $str2_open < 0)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n$input1\
    \ = ['(())()', '()()()'];\n$input2 = ['(())()', '()))()'];\n$input3 = ['()()()',\
    \ '((()))'];\n$input4 = ['()()()', '()))()'];\n$input5 = ['((()))', '()))()'];\n\
    $input6 = ['((()))', '((()))'];\n$input7 = ['((()))', '(((())))'];\n$input8 =\
    \ ['((()))', '((())))'];\n$input9 = ['((()))', '((()))()'];\n$input10 = ['((()))',\
    \ '((())))('];\n$input11 = ['((()))', '((())))(()'];\n$input12 =", "    $str1\
    \ = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len\
    \ = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n    $str1_close\
    \ = substr_count($str1, ')');\n    $str2_open = substr_count($str2, '(');\n  \
    \  $str2_close = substr_count($str2, ')');\n    $str1_diff = $str1_open - $str1_close;\n\
    \    $str2_diff = $str2_open - $str2_close;\n    $str1_open_close = $str1_open\
    \ + $str2_close;\n    $str2_open_close = $str2_open + $str1_close;\n    if ($str1_diff\
    \ == 0 && $str2_diff == 0) {\n        return 'Yes';\n    } elseif ($str1_diff\
    \ == 0 && $str2_diff != 0) {\n        if ($str2_diff > 0 && $str2_diff == $str1_open)\
    \ {\n            return 'Yes';\n        } elseif ($str2_diff < 0 && $str2_diff\
    \ == $str1_close) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } elseif ($str1_diff != 0 && $str2_diff == 0) {\n\
    \        if ($str1_diff > 0 && $str1_diff == $str2_open) {\n            return\
    \ 'Yes';\n        } elseif ($str1_diff < 0 && $str1_diff == $str2_close) {\n \
    \           return 'Yes';\n        } else {\n            return 'No';\n      \
    \  }\n    } elseif ($str1_diff != 0 && $str2_diff != 0) {\n        if ($str1_diff\
    \ > 0 && $str2_diff < 0) {\n            if ($str1_diff == $str2_open_close) {\n\
    \                return 'Yes';\n            } else {\n                return 'No';\n\
    \            }\n       ", "    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open\
    \ = 0;\n    $s2_open = 0;\n    for ($i=0; $i < strlen($s1); $i++) {\n        if\
    \ ($s1[$i] == '(') {\n            $s1_open++;\n        } else {\n            $s1_open--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($s2); $i++) {\n        if ($s2[$i]\
    \ == '(') {\n            $s2_open++;\n        } else {\n            $s2_open--;\n\
    \        }\n    }\n    if ($s1_open == 0 && $s2_open == 0) {\n        return 'Yes';\n\
    \    } else if ($s1_open == 0 && $s2_open < 0) {\n        return 'Yes';\n    }\
    \ else if ($s1_open < 0 && $s2_open == 0) {\n        return 'Yes';\n    } else\
    \ if ($s1_open < 0 && $s2_open < 0) {\n        return 'Yes';\n    } else {\n \
    \       return 'No';\n    }\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n\
    \    [['(()', '()('], 'No'],\n    [['()', '()()'], 'Yes'],\n    [['(())', '()))'],\
    \ 'No'],\n    [['((()', '()))'], 'Yes'],\n    [['((()', '()))'], 'Yes'],\n   \
    \ [['()', '()()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['(())', '()()'],\
    \ 'Yes'],\n    [['(()', '()('], 'No'],\n    [['()', '()()'], 'Yes'],\n    [['(())',\
    \ '()))'], 'No'],\n    [['((()', '()))'], 'Yes'],\n    [['((()", "    $l = $lst[0];\n\
    \    $r = $lst[1];\n    $l_count = substr_count($l, '(');\n    $r_count = substr_count($r,\
    \ ')');\n    if ($l_count == $r_count) {\n        return 'Yes';\n    } else {\n\
    \        return 'No';\n    }\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_balance_abs = abs($str1_balance);\n    $str2_balance_abs\
    \ = abs($str2_balance);\n    $str1_balance_abs_half = floor($str1_balance_abs\
    \ / 2);\n    $str2_balance_abs_half = floor($str2_balance_abs / 2);\n    $str1_balance_abs_half_remainder\
    \ = $str1_balance_abs % 2;\n    $str2_balance_abs_half_remainder = $str2_balance_abs\
    \ % 2;\n    $str1_balance_half = $str1_balance_abs_half * ($str1_balance < 0 ?\
    \ -1 : 1);\n    $str2_balance_half = $str2_balance_abs_half * ($str2_balance <\
    \ 0 ? -1 : 1);\n    $str1_balance_half_remainder = $str1_balance_abs_half_remainder\
    \ * ($str1_balance < 0 ? -1 : 1);\n    $str2_balance_half_remainder = $str2_balance_abs_half_remainder\
    \ * ($str2_balance < 0 ? -1 : 1);\n    $str1_balance_half_remainder_abs = abs($str1_balance_half_remainder);\n\
    \    $str2_balance_half_remainder_abs = abs($str2_balance_half_remainder);\n \
    \   $str1_balance_half_", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    if ($str1_open == $str1_close && $str2_open == $str2_close) {\n \
    \       return 'Yes';\n    } elseif ($str1_open == $str1_close && $str2_open !=\
    \ $str2_close) {\n        return 'No';\n    } elseif ($str1_open != $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'No';\n    } elseif ($str1_open\
    \ != $str1_close && $str2_open != $str2_close) {\n        if ($str1_open > $str1_close)\
    \ {\n            $str1_open = $str1_open - $str1_close;\n            $str2_close\
    \ = $str2_close - $str2_open;\n            if ($str1_open == $str2_close) {\n\
    \                return 'Yes';\n            } else {\n                return 'No';\n\
    \            }\n        } elseif ($str1_open < $str1_close) {\n            $str1_close\
    \ = $str1_close - $str1_open;\n            $str2_open = $str2_open - $str2_close;\n\
    \            if ($str1_close == $str2_open) {\n                return 'Yes';\n\
    \            } else {\n                return 'No';\n            }\n        }\n\
    \    }\n}", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n     \
    \       $str1_open++;\n        } else {\n            $str1_open--;\n        }\n\
    \    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open\
    \ == abs($str2_open)) {\n            return 'Yes';\n        }\n    } else if ($str1_open\
    \ < 0 && $str2_open > 0) {\n        if (abs($str1_open) == $str2_open) {\n   \
    \         return 'Yes';\n        }\n    }\n    return 'No';\n}\n\n$lst = ['(())',\
    \ '()'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', ')('];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['(())', '())('];\necho match_parens($lst) . PHP_EOL;\n$lst\
    \ = ['(())', '()))'];\necho match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())(()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())', '())(())'];\necho match_parens($lst)\
    \ . PHP", "    $lst = explode(\" \", $lst);\n    $lst[0] = str_split($lst[0]);\n\
    \    $lst[1] = str_split($lst[1]);\n    $lst[0] = array_count_values($lst[0]);\n\
    \    $lst[1] = array_count_values($lst[1]);\n    if (array_key_exists('(', $lst[0])\
    \ && array_key_exists('(', $lst[1])) {\n        if ($lst[0]['('] == $lst[1]['('])\
    \ {\n            return \"Yes\";\n        }\n    }\n    if (array_key_exists(')',\
    \ $lst[0]) && array_key_exists(')', $lst[1])) {\n        if ($lst[0][')'] == $lst[1][')'])\
    \ {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\necho\
    \ match_parens(\"()(()) ()()\") . PHP_EOL;\necho match_parens(\"()(()) ()\") .\
    \ PHP_EOL;\necho match_parens(\"()(()) (())\") . PHP_EOL;\necho match_parens(\"\
    ()(()) (()\") . PHP_EOL;\necho match_parens(\"()(()) ()(\") . PHP_EOL;\necho match_parens(\"\
    ()(()) ()(()\") . PHP_EOL;\necho match_parens(\"()(()) ()(())\") . PHP_EOL;\n\
    echo match_parens(\"()(()) ()(())(\") . PHP_EOL;\necho match_parens(\"()(()) ()(())(()\"\
    ) . PHP_EOL;\necho match_parens(\"()(()) ()(())(())\") . PHP_EOL;\necho match_parens(\"\
    ()(()) ()(())(())(\") . PHP_EOL;\necho match_parens(\"()(()) ()(())(())(())\"\
    ) . PHP_EOL;\necho match_parens(\"()(()) ()(())(())(())(\") . PHP_EOL;\n", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n   \
    \ for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n    \
    \        $str1_open++;\n        } else {\n            $str1_open--;\n        }\n\
    \        if ($str1_open < 0) {\n            return \"No\";\n        }\n    }\n\
    \    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n \
    \           $str2_open++;\n        } else {\n            $str2_open--;\n     \
    \   }\n        if ($str2_open < 0) {\n            return \"No\";\n        }\n\
    \    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"Yes\"\
    ;\n    } else if ($str1_open > 0 && $str2_open > 0) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}", "    $l = $lst[0];\n    $r\
    \ = $lst[1];\n    $l_count = 0;\n    $r_count = 0;\n    for ($i=0; $i < strlen($l);\
    \ $i++) {\n        if ($l[$i] == '(') {\n            $l_count++;\n        }\n\
    \    }\n    for ($i=0; $i < strlen($r); $i++) {\n        if ($r[$i] == ')') {\n\
    \            $r_count++;\n        }\n    }\n    if ($l_count == $r_count) {\n\
    \        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests\
    \ = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '()'], 'No'],\n    [['()',\
    \ '()'], 'Yes'],\n    [['(()', ')('], 'No'],\n    [['(()', '()('], 'No'],\n  \
    \  [['(()', '()()'], 'Yes'],\n    [['(()', '())('], 'No'],\n    [['(()', '())(()'],\
    \ 'No'],\n    [['(()', '())(())('], 'No'],\n    [['(()', '())(())(()'], 'Yes'],\n\
    \    [['(()', '())(())(())'], 'Yes'],\n    [['(()', '())(())(())('], 'No'],\n\
    \    [['(()', '())(())(())(()'], 'Yes'],\n    [['(()', '())(())(())(())'], 'Yes'],\n\
    \    [['(()', '())(())(())(())('], 'No'],\n    [['(()', '())(())(())(())(()'],\
    \ 'Yes'],\n    [['(()', '())(())(())(())(())'], 'Yes'],\n    [['(()', '())(())(())(())(())('],\
    \ 'No'],\n   ", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count =\
    \ 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n  \
    \          $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count < 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ > 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n$tests = [\n    [\n        'input' => [\n            '(())',\n\
    \            '()()'\n        ],\n        'expected' => 'Yes'\n    ],\n    [\n\
    \        'input' => [\n            '((()',\n            '()()'\n        ],\n \
    \       'expected' => 'No'\n    ],\n    [\n        'input' => [\n            '((()))',\n\
    \            '()()'\n        ],\n        'expected' => 'Yes'\n    ],\n    [\n\
    \        'input' => [\n            '((()))',\n            '()))'\n        ],\n\
    \        'expected' => 'No'\n    ],\n    [\n        'input' => [\n           \
    \ '((()))',\n            '()()()'\n        ],\n        'expected' => 'Yes'\n \
    \   ],\n    [\n        'input' => [\n            '((()))',\n            '()",
  "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == \"(\") {\n            $str1_count++;\n   \
    \     } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ == 0 && $str2_count != 0) {\n        return \"No\";\n    } elseif ($str1_count\
    \ != 0 && $str2_count == 0) {\n        return \"No\";\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n\
    \    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", " \
    \   $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close = 0;\n    for\
    \ ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n          \
    \  $str1_open++;\n        } else {\n            $str1_close++;\n        }\n  \
    \  }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n\
    \            $str2_open++;\n        } else {\n            $str2_close++;\n   \
    \     }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", " \
    \   $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == \"(\") {\n            $str1_count++;\n   \
    \     } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } else if ($str1_count\
    \ > 0 && $str2_count < 0 && $str1_count == abs($str2_count)) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count < 0 && $str2_count > 0 && $str2_count ==\
    \ abs($str1_count)) {\n        return \"Yes\";\n    } else {\n        return \"\
    No\";\n    }\n}\necho match_parens(\"(()()()()) (())()()()\") . \"\\n\";\necho\
    \ match_parens(\"(()()()()) (()()()())\") . \"\\n\";\necho match_parens(\"(()()()())\
    \ (()()()()\") . \"\\n\";\necho match_parens(\"(()()()()) (()()())\") . \"\\n\"\
    ;\necho match_parens(\"(()()()()) (()()()))\") . \"\\n\";\necho match_parens(\"\
    (()()()()) (()()())))\") . \"\\n\";\necho match_parens(\"(()()()()) (()()()))))\"\
    ) . \"\\n\";\necho match_parens(\"(()()()()) (()()()))))))\") . \"\\n\";", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n   \
    \ for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n    \
    \        $str1_open++;\n        } else {\n            $str1_open--;\n        }\n\
    \    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ 'Yes';\n    } elseif ($str1_open == 0 && $str2_open < 0) {\n        return 'Yes';\n\
    \    } elseif ($str1_open < 0 && $str2_open == 0) {\n        return 'Yes';\n \
    \   } elseif ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open + $str2_open\
    \ == 0) {\n            return 'Yes';\n        } else {\n            return 'No';\n\
    \        }\n    } else {\n        return 'No';\n    }\n}\n$lst = ['(())', '()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['((()))', '()'];\necho match_parens($lst)\
    \ . PHP_EOL;\n$lst = ['((()))', '()()'];\necho match_parens($lst) . PHP_EOL;\n\
    $lst = ['((()))', '())('];\necho match_parens($lst) . PHP_EOL;\n$lst = ['((()))',\
    \ '())(('];\necho match_parens($lst) . PHP_EOL;\n$", "    $str1 = $lst[0];\n \
    \   $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close\
    \ = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}",
  "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    $str1_count = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1);\
    \ $i++) {\n        if ($str1[$i] == \"(\") {\n            $str1_count++;\n   \
    \     } else {\n            $str1_count--;\n        }\n    }\n    for ($i=0; $i\
    \ < strlen($str2); $i++) {\n        if ($str2[$i] == \"(\") {\n            $str2_count++;\n\
    \        } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ == 0 && $str2_count != 0) {\n        return \"No\";\n    } elseif ($str1_count\
    \ != 0 && $str2_count == 0) {\n        return \"No\";\n    } elseif ($str1_count\
    \ > 0 && $str2_count < 0) {\n        return \"Yes\";\n    } elseif ($str1_count\
    \ < 0 && $str2_count > 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\necho match_parens(\"(())() (())()\") . PHP_EOL;\necho match_parens(\"\
    ()() (())()\") . PHP_EOL;\necho match_parens(\"()() (()())\") . PHP_EOL;\necho\
    \ match_parens(\"()() (()()\") . PHP_EOL;\necho match_parens(\"()() ()(()\") .\
    \ PHP_EOL;\necho match_parens(\"()() ()(())\") . PHP_EOL;\necho match_parens(\"\
    ()() ())()\") . PHP_EOL;\necho match_parens(\"()() ())(\") . PHP_EOL;\necho match_parens(\"\
    ()() ))(\") . PHP_EOL;\necho match_parens", "    $str1 = $lst[0];\n    $str2 =\
    \ $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n \
    \   $str1_open = 0;\n    $str2_open = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_open--;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_open--;\n        }\n    }\n    if ($str1_open ==\
    \ 0 && $str2_open == 0) {\n        return 'Yes';\n    } else if ($str1_open ==\
    \ -$str2_open) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\n$input1 = ['(())()', '()()'];\n$input2 = ['()', '()()'];\n$input3 =\
    \ ['(())', '()()'];\n$input4 = ['()', ')('];\n$input5 = ['()', ')(()'];\n$input6\
    \ = ['()', ')(()))'];\n$input7 = ['()', ')(()))()'];\n$input8 = ['()', ')(()))()()'];\n\
    $input9 = ['()', ')(()))()()()'];\n$input10 = ['()', ')(()))()()()()'];\n$input11\
    \ = ['()', ')(()))()()()()()'];\n$input12 = ['()', ')(()))()()()()()()'];\n$input13\
    \ = ['()', ')(()))()()()()()()()'];\n$input14 = ['()', ')(()))()()()()()()()()'];\n\
    $input15 = ['()', ')(()))()()()()", "    $left = 0;\n    $right = 0;\n    foreach\
    \ ($lst as $str) {\n        for ($i = 0; $i < strlen($str); $i++) {\n        \
    \    if ($str[$i] == '(') {\n                $left++;\n            } else {\n\
    \                $right++;\n            }\n        }\n    }\n    if ($left ==\
    \ $right) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n\
    }\n", "    $lst = explode(\" \", $lst);\n    $s1 = $lst[0];\n    $s2 = $lst[1];\n\
    \    $s1_count = 0;\n    $s2_count = 0;\n    for ($i=0; $i < strlen($s1); $i++)\
    \ {\n        if ($s1[$i] == \"(\") {\n            $s1_count++;\n        } else\
    \ {\n            $s1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($s2);\
    \ $i++) {\n        if ($s2[$i] == \"(\") {\n            $s2_count++;\n       \
    \ } else {\n            $s2_count--;\n        }\n    }\n    if ($s1_count == 0\
    \ && $s2_count == 0) {\n        return \"Yes\";\n    } elseif ($s1_count == 0\
    \ && $s2_count > 0) {\n        return \"No\";\n    } elseif ($s1_count < 0 &&\
    \ $s2_count == 0) {\n        return \"No\";\n    } elseif ($s1_count < 0 && $s2_count\
    \ > 0) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\necho match_parens(\"(()()()()) ()()()()\") . PHP_EOL;\necho match_parens(\"\
    (()()()()) ()()()()(\") . PHP_EOL;\necho match_parens(\"(()()()()) ()()()()()\"\
    ) . PHP_EOL;\necho match_parens(\"(()()()()) ()()()())(\") . PHP_EOL;\necho match_parens(\"\
    (()()()()) ()()()()()(\") . PHP_EOL;\necho match_parens(\"(()()()()) ()()()()()()\"\
    ) . PHP_EOL;\necho match_parens(\"(()()()()) ()()()()()()(\") . PHP_EOL;\necho\
    \ match_parens(\"(()()()()) ()()()()()()()\") . PHP_EOL;\necho match_parens",
  "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n  \
    \  $str1_count = substr_count($str1, '(');\n    $str2_count = substr_count($str2,\
    \ '(');\n    $str1_count_close = substr_count($str1, ')');\n    $str2_count_close\
    \ = substr_count($str2, ')');\n    if ($str1_count == $str1_count_close && $str2_count\
    \ == $str2_count_close) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}\n", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n   \
    \     if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == -1 && $str2_count == 1) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 1 && $str2_count == -1) {\n        return 'Yes';\n    } else {\n        return\
    \ 'No';\n    }\n}", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count\
    \ = 0;\n    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n   \
    \     if ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n\
    \            $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2);\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n     \
    \   } else {\n            $str2_count--;\n        }\n    }\n    if ($str1_count\
    \ == 0 && $str2_count == 0) {\n        return 'Yes';\n    } elseif ($str1_count\
    \ == 0 && $str2_count > 0) {\n        if (strpos($str2, '(') === false) {\n  \
    \          return 'Yes';\n        } else {\n            return 'No';\n       \
    \ }\n    } elseif ($str1_count > 0 && $str2_count == 0) {\n        if (strpos($str1,\
    \ '(') === false) {\n            return 'Yes';\n        } else {\n           \
    \ return 'No';\n        }\n    } else {\n        return 'No';\n    }\n}\n\n$tests\
    \ = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '()('], 'No'],\n    [['()',\
    \ '()()'], 'Yes'],\n    [['(())(', '()()'], 'No'],\n    [['(())(', '()())'], 'Yes'],\n\
    \    [['(())(', '()()('], 'No'],\n    [['(())(', '()()()'], 'Yes'],\n    [['(())(',\
    \ '()()()('], 'No'],\n    [['(())(', '()()()()'], 'Yes'],\n    [['(())(', '()()()()('],\
    \ 'No'],\n    [[", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len\
    \ = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } else if ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return 'No';\n    }\
    \ else if ($str1_open != $str1_close && $str2_open == $str2_close) {\n       \
    \ return 'No';\n    } else if ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_open = $str2_open - $str2_close;\n       \
    \     if ($str1_open == $str2_open) {\n                return 'Yes';\n       \
    \     } else {\n                return 'No';\n            }\n        } else if\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_close = $str2_close - $str2_open;\n            if ($str1_close\
    \ == $str2_close) {\n                return 'Yes';\n            } else {\n   \
    \             return 'No';\n            }\n        }\n    }\n}", "    $str1 =\
    \ $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len\
    \ = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close\
    \ = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++) {\n     \
    \   if ($str1[$i] == '(') {\n            $str1_open++;\n        } else {\n   \
    \         $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len; $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n        } else\
    \ {\n            $str2_close++;\n        }\n    }\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return 'Yes';\n    } else if ($str1_open\
    \ == $str1_close && $str2_open < $str2_close) {\n        if ($str2_open == 0)\
    \ {\n            return 'No';\n        } else {\n            return 'Yes';\n \
    \       }\n    } else if ($str1_open < $str1_close && $str2_open == $str2_close)\
    \ {\n        if ($str1_open == 0) {\n            return 'No';\n        } else\
    \ {\n            return 'Yes';\n        }\n    } else if ($str1_open < $str1_close\
    \ && $str2_open < $str2_close) {\n        if ($str1_open == 0 && $str2_open ==\
    \ 0) {\n            return 'No';\n        } else {\n            return 'Yes';\n\
    \        }\n    } else {\n        return 'No';\n    }\n}\n$lst = ['(())()', '()()'];\n\
    echo match_parens($lst) . PHP_EOL;\n$lst = ['(())()', '()))'];\necho match_",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$tests = [['(())', '()()'],\
    \ ['(()', '()'], ['()', '()()'], ['()', ')(']];\nforeach ($tests as $test) {\n\
    \    echo match_parens($test) . \"\\n\";\n}", "    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = substr_count($str1, '(');\n    $str1_close = substr_count($str1,\
    \ ')');\n    $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_diff = $str1_open - $str1_close;\n    $str2_diff = $str2_open\
    \ - $str2_close;\n    $str1_open_close = $str1_open + $str2_close;\n    $str2_open_close\
    \ = $str2_open + $str1_close;\n    if ($str1_diff == 0 && $str2_diff == 0) {\n\
    \        return 'Yes';\n    } elseif ($str1_diff == 0 && $str2_diff != 0) {\n\
    \        if ($str2_diff > 0 && $str2_diff % 2 == 0) {\n            return 'Yes';\n\
    \        } else {\n            return 'No';\n        }\n    } elseif ($str1_diff\
    \ != 0 && $str2_diff == 0) {\n        if ($str1_diff > 0 && $str1_diff % 2 ==\
    \ 0) {\n            return 'Yes';\n        } else {\n            return 'No';\n\
    \        }\n    } elseif ($str1_diff != 0 && $str2_diff != 0) {\n        if ($str1_diff\
    \ > 0 && $str2_diff > 0) {\n            if ($str1_diff % 2 == 0 && $str2_diff\
    \ % 2 == 0) {\n                return 'Yes';\n            } else {\n         \
    \       return 'No';\n            }\n        } elseif ($str1_diff < 0 && $str2_diff\
    \ < 0) {\n            if ($str1_diff % 2 == 0 && $str2_diff % 2 == 0) {\n    \
    \            return 'Yes';\n            } else {\n                return 'No';\n",
  "    $s1 = $lst[0];\n    $s2 = $lst[1];\n    $s1_open = substr_count($s1, '(');\n\
    \    $s1_close = substr_count($s1, ')');\n    $s2_open = substr_count($s2, '(');\n\
    \    $s2_close = substr_count($s2, ')');\n    $s1_diff = $s1_open - $s1_close;\n\
    \    $s2_diff = $s2_open - $s2_close;\n    if ($s1_diff == 0 && $s2_diff == 0)\
    \ {\n        return 'Yes';\n    }\n    if ($s1_diff == 0 && $s2_diff != 0) {\n\
    \        return 'No';\n    }\n    if ($s1_diff != 0 && $s2_diff == 0) {\n    \
    \    return 'No';\n    }\n    if ($s1_diff > 0 && $s2_diff < 0) {\n        return\
    \ 'No';\n    }\n    if ($s1_diff < 0 && $s2_diff > 0) {\n        return 'No';\n\
    \    }\n    if ($s1_diff > 0 && $s2_diff > 0) {\n        if ($s1_diff == $s2_diff)\
    \ {\n            return 'Yes';\n        }\n        return 'No';\n    }\n    if\
    \ ($s1_diff < 0 && $s2_diff < 0) {\n        if ($s1_diff == $s2_diff) {\n    \
    \        return 'Yes';\n        }\n        return 'No';\n    }\n}\n\n$tests =\
    \ [\n    [['(())', '()()'], 'Yes'],\n    [['(())', '()))'], 'No'],\n    [['(()))',\
    \ '()()'], 'No'],\n    [['(()))', '()))'], 'No'],\n    [['()()', '()()'], 'Yes'],\n\
    \    [['()()', '()))'], 'No'],\n    [['()))', '()()'], 'No'],\n", "    $l = 0;\n\
    \    $r = 0;\n    foreach ($lst as $s) {\n        $l += substr_count($s, '(');\n\
    \        $r += substr_count($s, ')');\n    }\n    return $l == $r ? 'Yes' : 'No';\n\
    }\n", "    $lst = explode(',', $lst);\n    $lst[0] = str_split($lst[0]);\n   \
    \ $lst[1] = str_split($lst[1]);\n    $lst = array_merge($lst[0], $lst[1]);\n \
    \   $count = 0;\n    foreach ($lst as $char) {\n        if ($char == '(') {\n\
    \            $count++;\n        } elseif ($char == ')') {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return 'No';\n        }\n \
    \   }\n    return $count == 0 ? 'Yes' : 'No';\n}\n", "    $lst = explode(',',\
    \ $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str1_close = 0;\n \
    \   $str2_open = 0;\n    $str2_close = 0;\n    for ($i=0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i=0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}", "    $lst = explode(',', $lst);\n \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n \
    \   $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n \
    \   $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    $str1_open_close_abs\
    \ = abs($str1_open_close);\n    $str2_open_close_abs = abs($str2_open_close);\n\
    \    if ($str1_open_close_abs === $str2_open_close_abs) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"\
    ), \"w\");\n\n$stdin = fopen(\"php://stdin\", \"r\");\n\nfscanf($stdin, \"%d\\\
    n\", $t);\n\nfor ($t_itr = 0; $t_itr < $t; $t_itr++) {\n    $lst = '';\n    fscanf($stdin,\
    \ \"%[^\\n]\", $lst);\n\n    $result = match_parens($lst);\n\n    fwrite($fptr,\
    \ $result . \"\\n\");\n}\n\nfclose($stdin);\nfclose($fptr);", "    $s1 = $lst[0];\n\
    \    $s2 = $lst[1];\n    $s = $s1 . $s2;\n    $stack = [];\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $c = $s[$i];\n        if ($c == '(') {\n    \
    \        array_push($stack, $c);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return 'No';\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0 ? 'Yes' : 'No';\n}\n\n$tests\
    \ = [\n    [['(())', '()()'], 'Yes'],\n    [['(()', '))'], 'No'],\n    [['(()',\
    \ '()('], 'No'],\n    [['()()', '()()'], 'Yes'],\n    [['()(', '))'], 'No'],\n\
    \    [['()(', '()('], 'No'],\n    [['()()', '()()'], 'Yes'],\n    [['()(', '))'],\
    \ 'No'],\n    [['()(', '()('], 'No'],\n    [['()()', '()()'], 'Yes'],\n    [['()(',\
    \ '))'], 'No'],\n    [['()(', '()('], 'No'],\n    [['()()', '()()'], 'Yes'],\n\
    \    [['()(', '))'], 'No'],\n    [['()(', '()('], 'No'],\n    [['()()', '()()'],\
    \ 'Yes'],\n    [['()(', '))'], 'No'],\n    [['()(', '()('], 'No'],\n    [['()()',\
    \ '()()'], 'Yes'],\n    [['()(', '))'], 'No'],\n    [['()(', '()('], 'No'],\n\
    \    [['()()', '()()'], 'Yes'],\n    [['()(', '))'], 'No'", "    $lst = explode(',',\
    \ $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n \
    \   $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i]\
    \ == '(') {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n$test1 = '()(),()()';\n\
    $test2 = '())(,))((';\n$test3 = ')(,))(';\n$test4 = '())(,))((';\n$test5 = '())(,))((';\n\
    $test6 = '())(,))((';\n$test7 = '())(,))((';\n$test8 = '())(,))((';\n$test9 =\
    \ '())(,))((';\n$test10 = '())(,))((';\n$test11 = '())(,))((';\n$test12 = '())(,))((';\n\
    $test13 = '())(,))((';\n$test14 = '())(,))((';\n$test15 = '())(,))((';\n$test16\
    \ = '())(,))((';\n$test17 = '())(,))((';\n$test18 = '())(,))((';\n$test19 = '())(,))((';\n\
    $test20 = '())(,))((';\n$test21 = '())(,))((';\n$test22 = '())(,))((';\n", " \
    \   $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_parens = 0;\n    $str2_parens\
    \ = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_parens++;\n        } else {\n            $str1_parens--;\n\
    \        }\n    }\n    for ($i=0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_parens++;\n        } else {\n            $str2_parens--;\n\
    \        }\n    }\n    if ($str1_parens == 0 && $str2_parens == 0) {\n       \
    \ return \"Yes\";\n    } else if ($str1_parens == 0 && $str2_parens < 0) {\n \
    \       return \"Yes\";\n    } else if ($str1_parens > 0 && $str2_parens == 0)\
    \ {\n        return \"Yes\";\n    } else if ($str1_parens < 0 && $str2_parens\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_parens < 0 && $str2_parens\
    \ > 0) {\n        if ($str1_parens + $str2_parens == 0) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } else\
    \ if ($str1_parens > 0 && $str2_parens < 0) {\n        if ($str1_parens + $str2_parens\
    \ == 0) {\n            return \"Yes\";\n        } else {\n            return \"\
    No\";\n        }\n    } else {\n        return \"No\";\n    }\n}\n\n$tests = [\n\
    \    [[\"(())\", \"()()\"], \"Yes\"],\n    [[\"(()\", \"())\"], \"No\"],\n   \
    \ [[\"()\", \"()()\"], \"Yes\"],\n    [[\"()()\", \"()()\"], \"Yes\"],\n    [[\"\
    (())\", \"())\"],", "    $lst = explode(',', $lst);\n    $str1 = $lst[0];\n  \
    \  $str2 = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str1_close = 0;\n    $str2_open = 0;\n    $str2_close\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(')\
    \ {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", " \
    \   $lst = explode(',', $lst);\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n \
    \   $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n    $str1_open\
    \ = substr_count($str1, '(');\n    $str1_close = substr_count($str1, ')');\n \
    \   $str2_open = substr_count($str2, '(');\n    $str2_close = substr_count($str2,\
    \ ')');\n    $str1_balance = $str1_open - $str1_close;\n    $str2_balance = $str2_open\
    \ - $str2_close;\n    $str1_open_balance = $str1_open - $str1_close;\n    $str2_open_balance\
    \ = $str2_open - $str2_close;\n    $str1_close_balance = $str1_close - $str1_open;\n\
    \    $str2_close_balance = $str2_close - $str2_open;\n    $str1_open_balance_abs\
    \ = abs($str1_open_balance);\n    $str2_open_balance_abs = abs($str2_open_balance);\n\
    \    $str1_close_balance_abs = abs($str1_close_balance);\n    $str2_close_balance_abs\
    \ = abs($str2_close_balance);\n    $str1_balance_abs = abs($str1_balance);\n \
    \   $str2_balance_abs = abs($str2_balance);\n    $str1_balance_abs_diff = abs($str1_balance_abs\
    \ - $str2_balance_abs);\n    $str1_open_balance_abs_diff = abs($str1_open_balance_abs\
    \ - $str2_open_balance_abs);\n    $str1_close_balance_abs_diff = abs($str1_close_balance_abs\
    \ - $str2_close_balance_abs);\n    $str1_open_balance_abs_diff_sum = $str1_open_balance_abs\
    \ + $str2", "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n\
    \    $str2_count = 0;\n    for ($i=0; $i < strlen($str1); $i++) {\n        if\
    \ ($str1[$i] == '(') {\n            $str1_count++;\n        } else {\n       \
    \     $str1_count--;\n        }\n    }\n    for ($i=0; $i < strlen($str2); $i++)\
    \ {\n        if ($str2[$i] == '(') {\n            $str2_count++;\n        } else\
    \ {\n            $str2_count--;\n        }\n    }\n    if ($str1_count == 0 &&\
    \ $str2_count == 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}", "    $lst = explode(\" \", $lst);\n    $str1 = $lst[0];\n    $str2\
    \ = $lst[1];\n    $str1_len = strlen($str1);\n    $str2_len = strlen($str2);\n\
    \    $str1_open = 0;\n    $str2_open = 0;\n    $str1_close = 0;\n    $str2_close\
    \ = 0;\n    for ($i=0; $i < $str1_len; $i++) {\n        if ($str1[$i] == \"(\"\
    ) {\n            $str1_open++;\n        } else {\n            $str1_close++;\n\
    \        }\n    }\n    for ($i=0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_open++;\n        } else {\n            $str2_close++;\n\
    \        }\n    }\n    if ($str1_open == $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } elseif ($str1_open == $str1_close && $str2_open\
    \ > $str2_close) {\n        if ($str2_open - $str2_close == $str1_open) {\n  \
    \          return \"Yes\";\n        } else {\n            return \"No\";\n   \
    \     }\n    } elseif ($str1_open == $str1_close && $str2_open < $str2_close)\
    \ {\n        if ($str1_open - $str1_close == $str2_close) {\n            return\
    \ \"Yes\";\n        } else {\n            return \"No\";\n        }\n    } elseif\
    \ ($str1_open > $str1_close && $str2_open == $str2_close) {\n        if ($str1_open\
    \ - $str1_close == $str2_open) {\n            return \"Yes\";\n        } else\
    \ {\n            return \"No\";\n        }\n    } elseif ($str1_open < $str1_close\
    \ && $str2_open == $str2_close) {\n        if", "    $lst = explode(',', $lst);\n\
    \    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n    $lst\
    \ = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst as $val)\
    \ {\n        if ($val == '(') {\n            $count++;\n        } else {\n   \
    \         $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    if ($count == 0) {\n        return 'Yes';\n   \
    \ } else {\n        return 'No';\n    }\n}\n\necho match_parens('(()),()') . PHP_EOL;\n\
    echo match_parens('(()),(())') . PHP_EOL;\necho match_parens('(()),(()') . PHP_EOL;\n\
    echo match_parens('(()),(()))') . PHP_EOL;\necho match_parens('(()),())') . PHP_EOL;\n\
    echo match_parens('(()),()(') . PHP_EOL;\necho match_parens('(()),()()') . PHP_EOL;\n\
    echo match_parens('(()),())(') . PHP_EOL;\necho match_parens('(()),())(()') .\
    \ PHP_EOL;\necho match_parens('(()),())(())') . PHP_EOL;\necho match_parens('(()),())(())(')\
    \ . PHP_EOL;\necho match_parens('(()),())(())(())') . PHP_EOL;\necho match_parens('(()),())(())(())(')\
    \ . PHP_EOL;\necho match_parens('(()),())(())(())(())') . PHP_EOL;\necho match_parens('(()),())(())(())(())(')\
    \ . PHP_EOL;\necho match_parens('(()),())(())(())(())(())') . PHP_EOL;\necho match_parens('",
  "    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n  \
    \  $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n    for\
    \ ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n        \
    \    $str1_open++;\n        } else {\n            $str1_open--;\n        }\n \
    \       if ($str1_open < 0) {\n            return 'No';\n        }\n    }\n  \
    \  for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(') {\n   \
    \         $str2_open++;\n        } else {\n            $str2_open--;\n       \
    \ }\n        if ($str2_open < 0) {\n            return 'No';\n        }\n    }\n\
    \    if ($str1_open == 0 && $str2_open == 0) {\n        return 'Yes';\n    }\n\
    \    if ($str1_open > 0 && $str2_open < 0) {\n        $str2_open = abs($str2_open);\n\
    \        if ($str1_open == $str2_open) {\n            return 'Yes';\n        }\n\
    \    }\n    if ($str2_open > 0 && $str1_open < 0) {\n        $str1_open = abs($str1_open);\n\
    \        if ($str2_open == $str1_open) {\n            return 'Yes';\n        }\n\
    \    }\n    return 'No';\n}\n\n$tests = [\n    [['(())', '()()'], 'Yes'],\n  \
    \  [['(())', '()))'], 'No'],\n    [['())(', '()()'], 'No'],\n    [['())(', '())('],\
    \ 'No'],\n    [['())(', '()()'], 'No'],\n    [['())(', '()()'], 'No'],\n    [['()"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
