name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_depth = 0;\n    foreach ($paren_groups as $group)\
    \ {\n        $depth = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n\
    \            if ($group[$i] == '(') {\n                $depth++;\n           \
    \ } else if ($group[$i] == ')') {\n                $depth--;\n            }\n\
    \        }\n        if ($depth > $max_depth) {\n            $max_depth = $depth;\n\
    \        }\n    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren_group) {\n        $level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $level++;\n            }\n  \
    \      }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n\n$paren_string = \"(()()) (()())(()(()))\"\
    ;\necho parse_nested_parens($paren_string);", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_count = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == \"(\") {\n            $paren_count++;\n   \
    \     } else if ($paren == \")\") {\n            $paren_count--;\n        }\n\
    \        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\n$paren_string\
    \ = \"(()()) (()())((()))\";\necho parse_nested_parens($paren_string);", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace", "    $paren_arr = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    foreach ($paren_arr as $paren) {\n        $depth = 0;\n\
    \        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace('( ', '(', $paren_string);\n\
    \    $paren_string = str_replace(' )', ')', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ',", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \")(\", $paren_string);\n    $paren_string = \"(\".$paren_string.\")\";\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \")(\", $paren_string);\n    $paren_string = \"(\".$paren_string.\")\";\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \")(\", $paren_string);\n    $paren_string = \"(\".$paren_string.\")\";\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \")(\", $paren_string);\n    $paren_string = \"(\".$paren_string.\")\";\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_count = count($paren_array);\n\
    \    $paren_stack = array();\n    $paren_stack_count = 0;\n    $max_nesting =\
    \ 0;\n    $current_nesting = 0;\n    for ($i = 0; $i < $paren_array_count; $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            $paren_stack[$paren_stack_count]\
    \ = $paren_array[$i];\n            $paren_stack_count++;\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren_array[$i] == ')')\
    \ {\n            $paren_stack_count--;\n            $current_nesting--;\n    \
    \    }\n    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_",
  "  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_array_count = count($paren_array);\n    $paren_array_index\
    \ = 0;\n    $paren_array_depth = 0;\n    $paren_array_max_depth = 0;\n    $paren_array_depth_array\
    \ = array();\n    while ($paren_array_index < $paren_array_count) {\n        if\
    \ ($paren_array[$paren_array_index] == '(') {\n            $paren_array_depth++;\n\
    \            if ($paren_array_depth > $paren_array_max_depth) {\n            \
    \    $paren_array_max_depth = $paren_array_depth;\n            }\n        } elseif\
    \ ($paren_array[$paren_array_index] == ')') {\n            $paren_array_depth--;\n\
    \        }\n        $paren_array_index++;\n    }\n    return $paren_array_max_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_length = count($paren_array);\n    $paren_stack = array();\n\
    \    $paren_stack_length = 0;\n    $paren_depth = 0;\n    $paren_depth_max = 0;\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_stack[$paren_stack_length] = $paren_array[$i];\n\
    \            $paren_stack_length++;\n            $paren_depth++;\n           \
    \ if ($paren_depth > $paren_depth_max) {\n                $paren_depth_max = $paren_depth;\n\
    \            }\n        } elseif ($paren_array[$i] == ')') {\n            $paren_stack_length--;\n\
    \            $paren_depth--;\n        }\n    }\n    return $paren_depth_max;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else if ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } else {\n\
    \            $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n\
    echo parse_nested_parens('(()())');\necho parse_nested_parens('((()))');\necho\
    \ parse_nested_parens('((()))()');\necho parse_nested_parens('((()))(())');\n\
    echo parse_nested_parens('((()))(()())');\necho parse_nested_parens('((()))(()()())');\n\
    echo parse_nested_parens('((()))(()()()())');\necho parse_nested_parens('((()))(()()()()())');\n\
    echo parse_nested_parens('((()))(()()()()()())');\necho parse_nested_parens('((()))(()()()()()()())');\n\
    echo parse_nested_parens('((()))(()()()()()()()())');\necho parse_nested_parens('((()))(()()()()()()()()())');\n\
    echo parse_nested_parens('((()))(()()", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ =", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\n$paren_string = '(()()) (()())((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n\
    \  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      array_push($paren_stack,\
    \ $paren);\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    }\n    elseif ($paren == ')')\
    \ {\n      array_pop($paren_stack);\n      $current_depth--;\n    }\n  }\n  return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $current_depth++;\n         \
    \   if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else {\n            $current_depth--;\n        }\n \
    \   }\n    return $max_depth;\n}\n\n$paren_string = \"(()()) ((()))\";\n$paren_string\
    \ = \"(()()) ((())) (()())\";\n$paren_string = \"(()()) ((())) (()()) ((()))\"\
    ;\necho parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_values(array_filter($paren_array));\n    $paren_count\
    \ = count($paren_array);\n    $paren_level = 0;\n    $paren_max_level = 0;\n \
    \   for ($i = 0; $i < $paren_count; $i++) {\n        if ($paren_array[$i] == '(')\
    \ {\n            $paren_level++;\n            if ($paren_level > $paren_max_level)\
    \ {\n                $paren_max_level = $paren_level;\n            }\n       \
    \ } elseif ($paren_array[$i] == ')') {\n            $paren_level--;\n        }\n\
    \    }\n    echo $paren_max_level;\n}\n\nparse_nested_parens('(()()) (()())');\n\
    echo '<br>';\nparse_nested_parens('((())) (()())');\necho '<br>';\nparse_nested_parens('((()))\
    \ ((()))');\necho '<br>';\nparse_nested_parens('((())) ((())) (()())');\necho\
    \ '<br>';\nparse_nested_parens('((())) ((())) (()()) (()())');\necho '<br>';\n\
    parse_nested_parens('((())) ((())) (()()) (()()) (()())');\necho '<br>';\nparse_nested_parens('((()))\
    \ ((())) (()()) (()()) (()()) (()())');\necho '<", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n\
    \        } else {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $max_paren_count) {\n            $max_paren_count = $paren_count;\n      \
    \  }\n    }\n    return $max_paren_count;\n}\n\necho parse_nested_parens('(()())\
    \ (()()) (()())');\necho parse_nested_parens('((())) (()()) (()())');\necho parse_nested_parens('(()())\
    \ (()()) ((()))');\necho parse_nested_parens('(()()) ((())) (()())');\necho parse_nested_parens('((()))\
    \ (()()) ((()))');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('(()())\
    \ (()()) (()())');\necho parse_nested_parens('(()()) (()()) (()())');\necho parse_nested_parens('(()())\
    \ (()()) (()())');\necho parse_nested_parens('(()()) (()()) (()())');\necho parse_nested_parens('(()())\
    \ (()()) (()())');\necho parse_nested_parens('(()()) (()()) (()())');\n", "  \
    \  $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_count = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n     \
    \   } else {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $max_paren_count) {\n            $max_paren_count = $paren_count;\n      \
    \  }\n    }\n    return $max_paren_count;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  return strlen($paren_string);\n}\n\necho parse_nested_parens('(()())');\necho\
    \ parse_nested_parens('((()))');\necho parse_nested_parens('((()))()');\necho\
    \ parse_nested_parens('((()))()()');\necho parse_nested_parens('((()))()()(())');\n\
    echo parse_nested_parens('((()))()()(())(())');\necho parse_nested_parens('((()))()()(())(())(())');\n\
    echo parse_nested_parens('((()))()()(())(())(())(())');\necho parse_nested_parens('((()))()()(())(())(())(())(())');\n\
    echo parse_nested_parens('((()))()()(())(())(())(())(())(())');\necho parse_nested_parens('((()))()()(())(())(())(())(())(())(())');\n\
    echo parse_nested_parens('((()))()()(())(())(())(())(())(())(())(())');\necho\
    \ parse_nested_parens('((()))()()(())(())(())(())(())(())(())(())(())');\necho\
    \ parse_nested_parens('((()))()()(())(())(())(())(())(())(())(())(())(())');\n\
    echo parse_nested_parens('((()))()()(())(())(())(())(())(())(())(())(())(())(())');\n\
    echo parse_nested_parens('((()))()()(())(())(())(())(())(())(())(())(())(", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_list = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_level = 0;\n    $paren_max_level = 0;\n    foreach ($paren_list as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n     \
    \       if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_level--;\n        }\n    }\n    return $paren_max_level;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $current_depth++;\n\
    \      if ($current_depth > $max_depth) {\n        $max_depth = $current_depth;\n\
    \      }\n    }\n    elseif ($paren == ')') {\n      $current_depth--;\n    }\n\
    \  }\n  return $max_depth;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    foreach ($paren_array as $paren_group) {\n        $depth\
    \ = 0;\n        $paren_length = strlen($paren_group);\n        for ($i = 0; $i\
    \ < $paren_length; $i++) {\n            if ($paren_group[$i] == '(') {\n     \
    \           $depth++;\n            } else {\n                $depth--;\n     \
    \       }\n            if ($depth > $max_depth) {\n                $max_depth\
    \ = $depth;\n            }\n        }\n    }\n    return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()())((()))';\necho parse_nested_parens($paren_string);", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_depth = 0;\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $depth--;\n            }\n            if ($depth\
    \ > $max_depth_in_group) {\n                $max_depth_in_group = $depth;\n  \
    \          }\n        }\n        if ($max_depth_in_group > $max_depth) {\n   \
    \         $max_depth = $max_depth_in_group;\n        }\n    }\n    return $max_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_values(array_filter($paren_array));\n    $paren_array_length\
    \ = count($paren_array);\n    $max_nesting = 0;\n    $current_nesting = 0;\n \
    \   for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $current_nesting++;\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        } else {\n            $current_nesting--;\n        }\n    }\n\
    \    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\necho parse_nested_parens('(()())');\necho parse_nested_parens('((()))');\n\
    echo parse_nested_parens('((()())())');\necho parse_nested_parens('((()())())(()())');\n\
    echo parse_nested_parens('((()())())(()())((()()))');\necho parse_nested_parens('((()())())(()())((()()))(()())');\n\
    echo parse_nested_parens('((()())())(()())((()()))(()())((()()))');\necho parse_nested_parens('((()())())(()())((()()))(()())((()()))(()())');\n\
    echo parse_nested_parens('((()())())(()())((()()))(()())((()()))(()())((()()))');\n\
    echo parse_nested_parens('((()())())(()())((()()))(()())((()()))(()())((()()))(()())');\n\
    echo parse_nested_parens('((()())())(()())((()()))(()())((()()))(()())((()()))(()())((()()))');\n\
    echo parse_nested_parens('((()())())(()())((()()))(()())((()()))(()())((()()))(()())((()()))(()())');\n\
    echo parse", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_groups as $group)\
    \ {\n        $nesting = 0;\n        $paren_count = 0;\n        for ($i = 0; $i\
    \ < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n          \
    \      $paren_count++;\n                if ($paren_count > $nesting) {\n     \
    \               $nesting = $paren_count;\n                }\n            } else\
    \ {\n                $paren_count--;\n            }\n        }\n        if ($nesting\
    \ > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n    }\n\
    \    return $max_nesting;\n}\n\necho parse_nested_parens('(()()) (()()) (()())');\n\
    echo \"\\n\";\necho parse_nested_parens('((())) ((())) ((()))');\necho \"\\n\"\
    ;\necho parse_nested_parens('((())) ((())) ((())) (()())');\necho \"\\n\";\necho\
    \ parse_nested_parens('(()()) (()()) (()()) ((()))');\necho \"\\n\";\necho parse_nested_parens('((()))\
    \ ((())) ((())) ((()))');\necho \"\\n\";\necho parse_nested_parens('((())) ((()))\
    \ ((())) ((())) ((()))');\necho \"\\n\";\necho parse_nested_parens('((())) ((()))\
    \ ((())) ((())) ((())) ((()))');\necho \"\\n\";\necho parse_nested_parens('((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((()))');\necho \"\\n\";\necho parse_nested_parens('((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((()))');\necho \"\\n\";\necho parse_nested_parens",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = count($paren_array);\n    $paren_stack = array();\n    $paren_level\
    \ = 0;\n    $paren_max_level = 0;\n    for ($i = 0; $i < $paren_count; $i++) {\n\
    \        if ($paren_array[$i] == '(') {\n            array_push($paren_stack,\
    \ '(');\n            $paren_level++;\n            if ($paren_level > $paren_max_level)\
    \ {\n                $paren_max_level = $paren_level;\n            }\n       \
    \ } elseif ($paren_array[$i] == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_level--;\n        }\n    }\n    return $paren_max_level;\n\
    }\n\necho parse_nested_parens('(()())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()())(())') . \"\\n\";\necho parse_nested_parens('(()())(())(()(()))')\
    \ . \"\\n\";\necho parse_nested_parens('()()') . \"\\n\";\necho parse_nested_parens('(()())(())(()(()))')\
    \ . \"\\n\";\necho parse_nested_parens('()(()()())') . \"\\n\";\necho parse_nested_parens('(()(()))')\
    \ . \"\\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '('), array_fill(0, count($paren_string), 'open'), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren_string), ')'), array_fill(0,\
    \ count($paren_string), 'close'), $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), 'open'), array_fill(0, count($paren_string),\
    \ '('), $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), 'close'), array_fill(0, count($paren_string), ')'), $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '('), array_fill(0, count($paren_string), 'open'), $paren_string);\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_map('strlen', $paren_string);\n\
    \    return $paren_string;\n}\n", "  $paren_string = str_replace(\" \", \"\",\
    \ $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = explode(\" \", $paren_string);\n  $paren_string = array_filter($paren_string);\n\
    \  $paren_string = array_values($paren_string);\n  $paren_string = array_map('strlen',\
    \ $paren_string);\n  return $paren_string;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    return strlen($paren_string);\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $max_nesting = 0;\n    $current_nesting = 0;\n    foreach ($paren_string\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } else {\n            $current_nesting--;\n\
    \        }\n    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_array as $paren_group) {\n    $nesting = 0;\n    while (strlen($paren_group)\
    \ > 0) {\n      $paren_group = str_replace('()', '', $paren_group);\n      $paren_group\
    \ = str_replace('(', '', $paren_group);\n      $paren_group = str_replace(')',\
    \ '', $paren_group);\n      $nesting++;\n    }\n    if ($nesting > $max_nesting)\
    \ {\n      $max_nesting = $nesting;\n    }\n  }\n  return $max_nesting;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n       \
    \     $current_depth++;\n            if ($current_depth > $max_depth) {\n    \
    \            $max_depth = $current_depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_count = 0;\n  $paren_max\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $paren_count++;\n      if ($paren_count > $paren_max) {\n        $paren_max\
    \ = $paren_count;\n      }\n    }\n    elseif ($paren == ')') {\n      $paren_count--;\n\
    \    }\n  }\n  return $paren_max;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    return strlen($paren_string);\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace", "  $paren_string = trim($paren_string);\n \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')', '',\
    \ $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')', '',\
    \ $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '", "  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n  $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \  $paren_string = str_replace(\"  \", \" \", $paren_string);\n  $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n  $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string =", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_values(array_filter($paren_array));\n    $paren_array\
    \ = array_map('trim', $paren_array);\n    $paren_array = array_map('strlen', $paren_array);\n\
    \    return $paren_array;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "  $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == \"(\") {\n      $current_depth++;\n      if\
    \ ($current_depth > $max_depth) {\n        $max_depth = $current_depth;\n    \
    \  }\n    } else {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    return strlen($paren_string);\n\
    }\n\n$paren_string
  "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = 0;\n    foreach\
    \ ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        if ($max_nesting_in_group > $max_nesting) {\n\
    \            $max_nesting = $max_nesting_in_group;\n        }\n    }\n    return\
    \ $max_nesting;\n}\n\necho parse_nested_parens('(()()) (()()) (()())');\necho\
    \ parse_nested_parens('((())) (()()) (()())');\necho parse_nested_parens('((()))\
    \ ((())) (()())');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\necho parse_nested_parens('((())) ((())) ((()))');\necho parse_nested_parens('",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(array('(', ')'), array(' ( ', ' ) '), $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode('\
    \ ', $paren_string);\n    $paren_string = explode(') (', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = implode(') (', $paren_string);\n    $paren_string = explode('\
    \ ', $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_values($paren_string);\n    $paren_string = implode(' ', $paren_string);\n\
    \    $paren_string = explode(') (', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode(')\
    \ (', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n    $paren_string\
    \ = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = implode(' ', $paren_string);\n    $paren_string = explode(')\
    \ (', $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_values($paren_string);\n    $paren_string = implode(') (', $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode('\
    \ ', $paren_string);\n    $paren_string = explode(') (', $paren_string);\n   \
    \ $paren_string", "  $paren_array = explode(' ', $paren_string);\n  $max_nesting\
    \ = 0;\n  foreach ($paren_array as $paren_group) {\n    $nesting = 0;\n    for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i] == '(')\
    \ {\n        $nesting++;\n      }\n      elseif ($paren_group[$i] == ')') {\n\
    \        $nesting--;\n      }\n    }\n    if ($nesting > $max_nesting) {\n   \
    \   $max_nesting = $nesting;\n    }\n  }\n  return $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } else {\n      \
    \      $paren_count--;\n        }\n    }\n    return $paren_max;\n}\n", "    $paren_string\
    \ = preg_replace('/\\s+/', '', $paren_string);\n    $paren_string = str_split($paren_string);\n\
    \    $stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($stack, $paren);\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($stack);\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\necho parse_nested_parens('(()())');\n\
    echo parse_nested_parens('((()))');\necho parse_nested_parens('(()()) (()())');\n\
    echo parse_nested_parens('((())) ((()))');\necho parse_nested_parens('((())) (()())');\n\
    echo parse_nested_parens('(()()) ((()))');", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    foreach ($paren_string as $paren) {\n\
    \        if ($paren == '(') {\n            $level++;\n            if ($level >\
    \ $max_level) {\n                $max_level = $level;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $level--;\n        }\n    }\n    return\
    \ $max_level;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    foreach ($paren_groups as $group) {\n        $nesting\
    \ = 0;\n        $paren_count = 0;\n        for ($i = 0; $i < strlen($group); $i++)\
    \ {\n            if ($group[$i] == '(') {\n                $paren_count++;\n \
    \               if ($paren_count > $nesting) {\n                    $nesting =\
    \ $paren_count;\n                }\n            } else {\n                $paren_count--;\n\
    \            }\n        }\n        if ($nesting > $max_nesting) {\n          \
    \  $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n",
  "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $max_depth = 0;\n  foreach ($paren_array as\
    \ $paren_group) {\n    $depth = 0;\n    while (strlen($paren_group) > 0) {\n \
    \     $paren_group = str_replace('()', '', $paren_group);\n      $paren_group\
    \ = str_replace('(', '', $paren_group);\n      $paren_group = str_replace(')',\
    \ '', $paren_group);\n      $depth++;\n    }\n    if ($depth > $max_depth) {\n\
    \      $max_depth = $depth;\n    }\n  }\n  return $max_depth;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n\
    \    foreach ($paren_string as $paren) {\n        if ($paren == '(') {\n     \
    \       $paren_count++;\n            if ($paren_count > $paren_max) {\n      \
    \          $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n    }\n    return $paren_max;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n    foreach\
    \ ($paren_array as $paren_group) {\n        $depth = 0;\n        for ($i = 0;\
    \ $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == '(')\
    \ {\n                $depth++;\n            } else if ($paren_group[$i] == ')')\
    \ {\n                $depth--;\n            }\n        }\n        if ($depth >\
    \ $max_depth) {\n            $max_depth = $depth;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('(\
    \ (', '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace(') )', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace(')\
    \ )', ') )', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('( (', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace(')\
    \ )', ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace(') )', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('(\
    \ (', '( (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace(') )', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace(')\
    \ )', ') )', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('( (', '(", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('str_replace', array_fill(0, count($paren_string), '('), array_fill(0,\
    \ count($paren_string), 'open'), $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ')'), array_fill(0, count($paren_string),\
    \ 'close'), $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n\
    \    $paren_string = array_map('strtolower', $paren_string);\n    $paren_string\
    \ = array_map('trim', $paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '('), array_fill(0, count($paren_string), 'open'), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren_string), ')'", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    foreach ($paren_groups as $group) {\n        $nesting\
    \ = 0;\n        $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting_in_group) {\n                $max_nesting_in_group\
    \ = $nesting;\n            }\n        }\n        if ($max_nesting_in_group > $max_nesting)\
    \ {\n            $max_nesting = $max_nesting_in_group;\n        }\n    }\n   \
    \ return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((())) (()(()))';\n\
    $max_nesting = parse_nested_parens($paren_string);\necho \"The maximum nesting\
    \ of parentheses in $paren_string is $max_nesting.\\n\";", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_nesting = 0;\n    foreach ($paren_array as $paren_group) {\n       \
    \ $nesting = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n   \
    \         if ($paren_group[$i] == '(') {\n                $nesting++;\n      \
    \      } else if ($paren_group[$i] == ')') {\n                $nesting--;\n  \
    \          }\n        }\n        if ($nesting > $max_nesting) {\n            $max_nesting\
    \ = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n            if ($paren_count > $max_paren_count)\
    \ {\n                $max_paren_count = $paren_count;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $paren_count--;\n        }\n    }\n\
    \    return $max_paren_count;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n    $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n    $paren_string = str_replace(' )', ')', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n    $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n    $paren_string = str_replace(' )', ')', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n    $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n    $paren_string = str_replace(' )', ')', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n    $paren_string = str_replace('(\
    \ ', '(', $paren", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $max_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth = max($max_depth, count($paren_stack));\n \
    \       } elseif ($paren == ')') {\n            array_pop($paren_stack);\n   \
    \     }\n    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_nesting = 0;\n    foreach ($paren_string as $paren_group) {\n      \
    \  $nesting = 0;\n        $paren_group = str_split($paren_group);\n        foreach\
    \ ($paren_group as $char) {\n            if ($char == '(') {\n               \
    \ $nesting++;\n            } elseif ($char == ')') {\n                $nesting--;\n\
    \            }\n        }\n        if ($nesting > $max_nesting) {\n          \
    \  $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n\n\
    echo parse_nested_parens('(()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()()) (()())\
    \ (()()) (()()) (()()) (()()) (()())", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" )\", $paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $max_depth = 0;\n    $depth = 0;\n    foreach ($paren_string as $paren) {\n\
    \        if ($paren == \"(\") {\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \   } else {\n            $depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = \"(()()) (()())((()))\";\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            $max_depth = max($max_depth, $current_depth);\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\necho parse_nested_parens('(())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (())') . \"\\n\";\necho parse_nested_parens('(()()) ((()))') . \"\\n\";\necho\
    \ parse_nested_parens('(()()) ((())) (())') . \"\\n\";", "    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \ $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\" \"\
    , \"\", $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_level = 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n     \
    \       if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_level--;\n        }\n    }\n    return $paren_max_level;\n}\n\n$paren_string\
    \ = '(()())';\necho parse_nested_parens($paren_string);\necho \"\\n\";\n$paren_string\
    \ = '((()))';\necho parse_nested_parens($paren_string);\necho \"\\n\";\n$paren_string\
    \ = '(()())((()))';\necho parse_nested_parens($paren_string);\necho \"\\n\";\n\
    $paren_string = '(()())((()))(()())';\necho parse_nested_parens($paren_string);\n\
    echo \"\\n\";\n$paren_string = '(()())((()))(()())((()))';\necho parse_nested_parens($paren_string);\n\
    echo \"\\n\";\n$paren_string = '(()())((()))(()())((()))(()())((()))';\necho parse_nested_parens($paren_string);\n\
    echo \"\\n\";\n$paren_string = '(()())((()))(()())((()))(()())((()))(()())((()))';\n\
    echo parse_nested_parens($paren_string);\necho \"\\n\";\n", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_groups\
    \ as $paren_group) {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        if ($max_nesting_in_group > $max_nesting) {\n\
    \            $max_nesting = $max_nesting_in_group;\n        }\n    }\n    return\
    \ $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_depth = 0;\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $depth++;\n\
    \            } else {\n                $depth--;\n            }\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        }\n    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('\
    \ ', ') (', $paren_string);\n  $paren_string = '('.$paren_string.')';\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace(' ', ') (', $paren_string);\n  $paren_string =\
    \ '('.$paren_string.')';\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \  $paren_string = '('.$paren_string.')';\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('\
    \ ', ') (', $paren_string);\n  $paren_string = '('.$paren_string.')';\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace(' ', ') (', $paren_string);\n ", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n        } else {\n            $paren_count--;\n      \
    \  }\n        if ($paren_count > $max_count) {\n            $max_count = $paren_count;\n\
    \        }\n    }\n    return $max_count;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $paren_stack = array();\n    $paren_stack_length = 0;\n    $max_nesting =\
    \ 0;\n    $current_nesting = 0;\n    for ($i = 0; $i < $paren_array_length; $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            $paren_stack[$paren_stack_length]\
    \ = $paren_array[$i];\n            $paren_stack_length++;\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } else if ($paren_array[$i] == ')')\
    \ {\n            if ($paren_stack_length == 0) {\n                return 'Invalid\
    \ input';\n            }\n            $paren_stack_length--;\n            $current_nesting--;\n\
    \        }\n    }\n    if ($paren_stack_length != 0) {\n        return 'Invalid\
    \ input';\n    }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) (()())\
    \ ((())) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    return strlen($paren_string);\n}\n\n\
    $paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_nesting = 0;\n    $nesting = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $nesting++;\n        } elseif ($paren\
    \ == ')') {\n            $nesting--;\n        }\n        if ($nesting > $max_nesting)\
    \ {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $", "    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $depth--;\n            }\n        }\n        if ($depth\
    \ > $max_depth) {\n            $max_depth = $depth;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_length = count($paren_array);\n    $paren_array_index = 0;\n\
    \    $paren_array_index_max = $paren_array_length - 1;\n    $paren_array_index_max_minus_one\
    \ = $paren_array_index_max - 1;\n    $paren_array_index_max_minus_two = $paren_array_index_max\
    \ - 2;\n    $paren_array_index_max_minus_three = $paren_array_index_max - 3;\n\
    \    $paren_array_index_max_minus_four = $paren_array_index_max - 4;\n    $paren_array_index_max_minus_five\
    \ = $paren_array_index_max - 5;\n    $paren_array_index_max_minus_six = $paren_array_index_max\
    \ - 6;\n    $paren_array_index_max_minus_seven = $paren_array_index_max - 7;\n\
    \    $paren_array_index_max_minus_eight = $paren_array_index_max - 8;\n    $paren_array_index_max_minus_nine\
    \ = $paren_array_index_max - 9;\n    $paren_array_index_max_minus_", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), '('), array_fill(0, count($paren_string),\
    \ ' ( '), $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), ')'), array_fill(0, count($paren_string), ' ) '), $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('explode',\
    \ array_fill(0, count($paren_string), ' '), $paren_string);\n    $paren_string\
    \ = array_map('array_filter', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0,\
    \ count($paren_string), 'str_replace'), array_fill(0, count($paren_string), array('(',\
    \ ')')), array_fill(0, count($paren_string), array(' ( ', ' ) ')), $paren_string);\n\
    \    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_", "    $paren_array = explode(' ', $paren_string);\n    $max_depth =\
    \ 0;\n    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n    \
    \    for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth) {\n         \
    \       $max_depth = $depth;\n            }\n        }\n    }\n    return $max_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n            if ($paren_count > $paren_max) {\n \
    \               $paren_max = $paren_count;\n            }\n        } else {\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_max;\n}\n",
  "  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  $paren_array_length = count($paren_array);\n\
    \  $paren_stack = array();\n  $paren_level = 0;\n  $paren_level_max = 0;\n  for\
    \ ($i = 0; $i < $paren_array_length; $i++) {\n    if ($paren_array[$i] == '(')\
    \ {\n      $paren_level++;\n      if ($paren_level > $paren_level_max) {\n   \
    \     $paren_level_max = $paren_level;\n      }\n    }\n    elseif ($paren_array[$i]\
    \ == ')') {\n      $paren_level--;\n    }\n  }\n  return $paren_level_max;\n}\n\
    \n$paren_string = '(()()) ((())) (((())))';\n$paren_level_max = parse_nested_parens($paren_string);\n\
    echo $paren_level_max;", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_array = str_split($paren_string);\n  $paren_stack = array();\n  $max_depth\
    \ = 0;\n  $current_depth = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    } elseif ($paren == ')') {\n\
    \      $current_depth--;\n    }\n  }\n  return $max_depth;\n}\n\necho parse_nested_parens('(()())')\
    \ . \"\\n\";\necho parse_nested_parens('((()))') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (())') . \"\\n\"\
    ;\necho parse_nested_parens('((())) (()()) (()) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (())') . \"\\n\";\necho parse_nested_parens('((())) (()())\
    \ (()) (()()) (()) (()())') . \"\\n\";\necho parse_nested_parens('((())) (()())\
    \ (()) (()()) (()) (()()) (())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()) (()()) (()) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()) (()()) (()) (()()) (())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()) (()()) (()) (()()) (()) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()) (()()) (()) (()()) (()) (()()) (())') . \"\\n", "  \
    \  $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $depth = 0;\n    foreach ($paren_string as $paren) {\n\
    \        if ($paren == '(') {\n            $depth++;\n            if ($depth >\
    \ $max_depth) {\n                $max_depth = $depth;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\necho parse_nested_parens('(()())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (()())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()()) ((()))')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()()) (()()) ((())) ((()))') .\
    \ \"\\n\";\necho parse_nested_parens('((())) (()()) (()()) ((())) ((())) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()()) (()()) ((())) ((())) (()())\
    \ (()())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()()) ((())) ((()))\
    \ (()()) (()()) ((()))') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()())\
    \ ((())) ((())) (()()) (()())", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array = explode('\
    \ ', $paren_string);\n    $max_depth = 0;\n    $depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $depth++;\n        \
    \    if ($depth > $max_depth) {\n                $max_depth = $depth;\n      \
    \      }\n        } else if ($paren == ')') {\n            $depth--;\n       \
    \ }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $nesting = 0;\n    $open_parens = 0;\n    for\
    \ ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n    \
    \    $open_parens++;\n        if ($open_parens > $nesting) {\n          $nesting\
    \ = $open_parens;\n        }\n      } else {\n        $open_parens--;\n      }\n\
    \    }\n    if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n \
    \   }\n  }\n  return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_array = array_filter($paren_array);\n  $paren_array = array_values($paren_array);\n\
    \  $paren_array_length = count($paren_array);\n  $paren_array_max_depth = 0;\n\
    \  $paren_array_current_depth = 0;\n  for ($i = 0; $i < $paren_array_length; $i++)\
    \ {\n    if ($paren_array[$i] == '(') {\n      $paren_array_current_depth++;\n\
    \      if ($paren_array_current_depth > $paren_array_max_depth) {\n        $paren_array_max_depth\
    \ = $paren_array_current_depth;\n      }\n    }\n    elseif ($paren_array[$i]\
    \ == ')') {\n      $paren_array_current_depth--;\n    }\n  }\n  return $paren_array_max_depth;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $", "    $paren_string = str_replace(' ', '', $paren_string);\n   \
    \ $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = count($paren_array);\n    $paren_stack = array();\n    $max_level\
    \ = 0;\n    $curr_level = 0;\n    for ($i = 0; $i < $paren_count; $i++) {\n  \
    \      if ($paren_array[$i] == '(') {\n            $curr_level++;\n          \
    \  if ($curr_level > $max_level) {\n                $max_level = $curr_level;\n\
    \            }\n            array_push($paren_stack, $paren_array[$i]);\n    \
    \    } else if ($paren_array[$i] == ')') {\n            array_pop($paren_stack);\n\
    \            $curr_level--;\n        }\n    }\n    return $max_level;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('((', '( (', $paren_string);\n    $paren_string = str_replace('((',\
    \ '( (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', ')(', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ ')(', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', ')(', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', ')(', $paren_",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n    }\n    return $paren_max;\n\
    }\n", "  $paren_string = trim($paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', ')(', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(') (', ') ( ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(') (', ') ( ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', ')(', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(') (', ') ( ', $paren_string);\n\
    \  $paren_", "    $paren_array = explode(' ', $paren_string);\n    $max_nesting\
    \ = 0;\n    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n\
    \        $paren_length = strlen($paren_group);\n        for ($i = 0; $i < $paren_length;\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n    }\n    return $max_nesting;\n}\n\necho parse_nested_parens('(()())\
    \ ((()))');", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_count = count($paren_array);\n    $paren_stack = array();\n    $paren_max_stack\
    \ = array();\n    $paren_max_stack_count = 0;\n    $paren_max_stack_index = 0;\n\
    \    $paren_max_stack_level = 0;\n    $paren_max_stack_level_index = 0;\n    $paren_max_stack_level_count\
    \ = 0;\n    $paren_max_stack_level_count_index = 0;\n    $paren_max_stack_level_count_max\
    \ = 0;\n    $paren_max_stack_level_count_max_index = 0;\n    $paren_max_stack_level_count_max_index_index\
    \ = 0;\n    $paren_max_stack_level_count_max_index_index_index = 0;\n    $paren_max_stack_level_count_max_index_index_index_index\
    \ = 0;\n    $paren_max_stack_level_count_max_index_index_index_index_index = 0;\n\
    \    $paren_max_stack_level_count_max_index_index_index_index_index_index = 0;\n\
    \    $paren_max_stack_level_count_max_index_index_index_index_index_index_index\
    \ = 0;\n    $paren_max_stack_level_count_max_index_index_index_index_index_index_index_index\
    \ = 0;\n    $paren_max_stack_level_count_max_index_index_index_index_index_index_index_index_index\
    \ =", "  // Split the string into an array of groups.\n  $paren_groups = explode('\
    \ ', $paren_string);\n  // Loop through each group.\n  foreach ($paren_groups\
    \ as $group) {\n    // Initialize the level of nesting to 0.\n    $level = 0;\n\
    \    // Initialize the maximum level of nesting to 0.\n    $max_level = 0;\n \
    \   // Loop through each character in the group.\n    for ($i = 0; $i < strlen($group);\
    \ $i++) {\n      // If the character is an opening parenthesis, increment the\
    \ level of nesting.\n      if ($group[$i] == '(') {\n        $level++;\n     \
    \ }\n      // If the character is a closing parenthesis, decrement the level of\
    \ nesting.\n      else if ($group[$i] == ')') {\n        $level--;\n      }\n\
    \      // If the current level of nesting is greater than the maximum level of\
    \ nesting, update the maximum level of nesting.\n      if ($level > $max_level)\
    \ {\n        $max_level = $level;\n      }\n    }\n    // Output the maximum level\
    \ of nesting for the current group.\n    echo $max_level . ' ';\n  }\n}\n", " \
    \ $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  $paren_array_length = count($paren_array);\n\
    \  $paren_stack = array();\n  $paren_stack_length = 0;\n  $paren_stack_max_length\
    \ = 0;\n  for ($i = 0; $i < $paren_array_length; $i++) {\n    if ($paren_array[$i]\
    \ == '(') {\n      $paren_stack[$paren_stack_length] = $paren_array[$i];\n   \
    \   $paren_stack_length++;\n    } else if ($paren_array[$i] == ')') {\n      $paren_stack_length--;\n\
    \      if ($paren_stack_length > $paren_stack_max_length) {\n        $paren_stack_max_length\
    \ = $paren_stack_length;\n      }\n    }\n  }\n  return $paren_stack_max_length;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            $max_depth = max($max_depth,\
    \ $current_depth);\n            array_push($paren_stack, $paren);\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n            array_pop($paren_stack);\n\
    \        }\n    }\n    return $max_depth;\n}\n", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            $max_depth = max($max_depth, $current_depth);\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\necho parse_nested_parens('(()()) (()()) ((()))');", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ =", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_nesting = 0;\n\
    \    $current_nesting = 0;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $current_nesting++;\n            $max_nesting\
    \ = max($max_nesting, $current_nesting);\n        } elseif ($paren == ')') {\n\
    \            $current_nesting--;\n        }\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_arr = explode(' ', $paren_string);\n    $paren_arr = array_filter($paren_arr);\n\
    \    $max_nesting = 0;\n    $nesting = 0;\n    foreach ($paren_arr as $paren)\
    \ {\n        if ($paren == '(') {\n            $nesting++;\n        } else {\n\
    \            $nesting--;\n        }\n        if ($nesting > $max_nesting) {\n\
    \            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = explode(' ', $paren_string);\n  $max_depth\
    \ = 0;\n  $depth = 0;\n  foreach ($paren_string as $paren) {\n    if ($paren ==\
    \ '(') {\n      $depth++;\n      if ($depth > $max_depth) {\n        $max_depth\
    \ = $depth;\n      }\n    }\n    elseif ($paren == ')') {\n      $depth--;\n \
    \   }\n  }\n  return $max_depth;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_max_depth = 0;\n  $paren_array_current_depth = 0;\n  for ($i =\
    \ 0; $i < $paren_array_count; $i++) {\n    if ($paren_array[$i] == '(') {\n  \
    \    $paren_array_current_depth++;\n      if ($paren_array_current_depth > $paren_array_max_depth)\
    \ {\n        $paren_array_max_depth = $paren_array_current_depth;\n      }\n \
    \   }\n    elseif ($paren_array[$i] == ')') {\n      $paren_array_current_depth--;\n\
    \    }\n  }\n  return $paren_array_max_depth;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    $paren_count = 0;\n  \
    \  $paren_max = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == \"(\") {\n            $paren_count++;\n            if ($paren_count > $paren_max)\
    \ {\n                $paren_max = $paren_count;\n            }\n        } elseif\
    \ ($paren == \")\") {\n            $paren_count--;\n        }\n    }\n    return\
    \ $paren_max;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $paren_stack_level = array();\n    $paren_stack_level_max\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            array_push($paren_stack, $paren);\n            array_push($paren_stack_level,\
    \ count($paren_stack));\n            if (count($paren_stack) > $paren_stack_level_max)\
    \ {\n                $paren_stack_level_max = count($paren_stack);\n         \
    \   }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            array_pop($paren_stack_level);\n        }\n    }\n    return $paren_stack_level_max;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            $max_depth = max($max_depth,\
    \ $current_depth);\n            array_push($paren_stack, $paren);\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n            array_pop($paren_stack);\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()) (()(()))';\n\
    echo parse_nested_parens($paren_string);", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('(', '\
    \ ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('( ', '(', $paren_string);\n  $paren_string = str_replace('\
    \ )', ')', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(') (', ') (', $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace('( ', '(', $paren_string);\n\
    \  $paren_string = str_replace(' )', ')', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(') (', ') (', $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace('( ', '(', $paren_string);\n\
    \  $paren_string = str_replace(' )', ')', $paren_string);\n  $paren_string = trim($paren_string);\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else {\n            $current_depth--;\n        }\n \
    \   }\n    return $max_depth;\n}\n\necho parse_nested_parens('(())') . \"\\n\"\
    ;\necho parse_nested_parens('((()))') . \"\\n\";\necho parse_nested_parens('(()())')\
    \ . \"\\n\";\necho parse_nested_parens('(()()) (())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ ((()))') . \"\\n\";\necho parse_nested_parens('(()()) ((())) (())') . \"\\n\"\
    ;\necho parse_nested_parens('(()()) ((())) (()) (())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ ((())) (()) (()) (())') . \"\\n\";\necho parse_nested_parens('(()()) ((()))\
    \ (()) (()) (()) (())') . \"\\n\";\necho parse_nested_parens('(()()) ((())) (())\
    \ (()) (()) (()) (())') . \"\\n\";\necho parse_nested_parens('(()()) ((())) (())\
    \ (()) (()) (()) (()) (())') . \"\\n\";\necho parse_nested_parens('(()()) ((()))\
    \ (()) (()) (()) (()) (()) (()) (())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ ((())) (()) (()) (()) (()) (()) (()) (()) (())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ ((())) (()) (()) (()) (()) (()) (()) (()) (()) (())') . \"\\", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } else {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\n$paren_string_array = explode(' ', $paren_string);\nforeach ($paren_string_array\
    \ as $paren_group) {\n    echo parse_nested_parens($paren_group) . PHP_EOL;\n}",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n  $max_depth\
    \ = 0;\n  foreach ($paren_groups as $group) {\n    $depth = 0;\n    for ($i =\
    \ 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n        $depth++;\n\
    \      } else {\n        $depth--;\n      }\n      if ($depth > $max_depth) {\n\
    \        $max_depth = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n\n\
    $paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \  $paren_string = str_replace('', '', $paren_string);\n  $paren_string = str_replace('',\
    \ '', $paren_string);\n  $paren_string = str_replace('', '', $paren_string);\n\
    \ ", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' )', ')', $paren_string);\n    $paren_string\
    \ = str_replace('( ', '(', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_length = count($paren_array);\n    $max_nesting = 0;\n    $current_nesting\
    \ = 0;\n    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $current_nesting++;\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        } else {\n            $current_nesting--;\n        }\n    }\n\
    \    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = [];\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach ($paren_array as\
    \ $paren) {\n    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth\
    \ > $max_depth) {\n        $max_depth = $current_depth;\n      }\n    } elseif\
    \ ($paren == ')') {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n\
    $paren_string = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n    }\n    return $paren_max;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $paren_count = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $paren_count[] = count_parens($paren_group);\n\
    \  }\n  return $paren_count;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $max_nesting = 0;\n   \
    \ foreach ($paren_string as $paren_group) {\n        $nesting = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            if ($nesting > $max_nesting) {\n \
    \               $max_nesting = $nesting;\n            }\n        }\n    }\n  \
    \  return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n    foreach\
    \ ($paren_array as $paren_group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $nesting++;\n            } else\
    \ if ($paren_group[$i] == ')') {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting_in_group) {\n                $max_nesting_in_group\
    \ = $nesting;\n            }\n        }\n        if ($max_nesting_in_group > $max_nesting)\
    \ {\n            $max_nesting = $max_nesting_in_group;\n        }\n    }\n   \
    \ return $max_nesting;\n}\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string_length =\
    \ count($paren_string);\n    $paren_string_stack = array();\n    $paren_string_max_depth\
    \ = 0;\n    $paren_string_current_depth = 0;\n    for ($i = 0; $i < $paren_string_length;\
    \ $i++) {\n        if ($paren_string[$i] == \"(\") {\n            array_push($paren_string_stack,\
    \ $paren_string[$i]);\n            $paren_string_current_depth++;\n          \
    \  if ($paren_string_current_depth > $paren_string_max_depth) {\n            \
    \    $paren_string_max_depth = $paren_string_current_depth;\n            }\n \
    \       } else if ($paren_string[$i] == \")\") {\n            array_pop($paren_string_stack);\n\
    \            $paren_string_current_depth--;\n        }\n    }\n    return $paren_string_max_depth;\n\
    }\n\necho parse_nested_parens(\"(()())\") . \"\\n\";\necho parse_nested_parens(\"\
    ((()))\") . \"\\n\";\necho parse_nested_parens(\"(()())(()())\") . \"\\n\";\n\
    echo parse_nested_parens(\"(()())(()())(()())\") . \"\\n\";\necho parse_nested_parens(\"\
    (()())(()())(()())(()())\") . \"\\n\";\necho parse_nested_parens(\"(()())(()())(()())(()())(()())\"\
    ) . \"\\n\";\necho parse_nested_parens(\"(()())(()())(()())(()())(()())(()", " \
    \ $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  return strlen($paren_string);\n}\n\n$paren_string = '(()())\
    \ (()()) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    $current_nesting = 0;\n    foreach ($paren_string as\
    \ $paren) {\n        if ($paren == '(') {\n            $current_nesting++;\n \
    \           if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren == ')') {\n   \
    \         $current_nesting--;\n        }\n    }\n    return $max_nesting;\n}\n\
    \necho parse_nested_parens('(()()) (()()) (()())');\necho \"\\n\";\necho parse_nested_parens('((()))\
    \ ((())) ((()))');\necho \"\\n\";\necho parse_nested_parens('(()()) ((())) (()())');\n\
    echo \"\\n\";\necho parse_nested_parens('(()()) ((()())) (()())');\necho \"\\\
    n\";\necho parse_nested_parens('(()()) ((()())) (()())');\necho \"\\n\";\necho\
    \ parse_nested_parens('(()()) ((()())) (()())');\necho \"\\n\";\necho parse_nested_parens('(()())\
    \ ((()())) (()())');\necho \"\\n\";\necho parse_nested_parens('(()()) ((()()))\
    \ (()())');\necho \"\\n\";\necho parse_nested_parens('(()()) ((()())) (()())');\n\
    echo \"\\n\";\necho parse_nested_parens('(()()) ((()())) (()())');\necho \"\\\
    n\";\necho parse_nested_parens('(()()) ((()())) (()())');", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = array();\n    $paren_level\
    \ = 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            $paren_level++;\n            if ($paren_level\
    \ > $paren_max_level) {\n                $paren_max_level = $paren_level;\n  \
    \          }\n        } else if ($paren == ')') {\n            $paren_level--;\n\
    \        }\n    }\n    return $paren_max_level;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_nesting = 0;\n    $current_nesting = 0;\n    foreach ($paren_string\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_nesting++;\n\
    \        } elseif ($paren == ')') {\n            $current_nesting--;\n       \
    \ }\n        if ($current_nesting > $max_nesting) {\n            $max_nesting\
    \ = $current_nesting;\n        }\n    }\n    return $max_nesting;\n}\n", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n", "  $paren_string = trim($paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_len = count($paren_array);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $curr_depth = 0;\n    for\
    \ ($i = 0; $i < $paren_array_len; $i++) {\n        if ($paren_array[$i] == '(')\
    \ {\n            array_push($paren_stack, '(');\n            $curr_depth++;\n\
    \            if ($curr_depth > $max_depth) {\n                $max_depth = $curr_depth;\n\
    \            }\n        } else if ($paren_array[$i] == ')') {\n            if\
    \ (count($paren_stack) > 0) {\n                array_pop($paren_stack);\n    \
    \            $curr_depth--;\n            } else {\n                return -1;\n\
    \            }\n        }\n    }\n    if (count($paren_stack) > 0) {\n       \
    \ return -1;\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);", "  $paren_groups = explode('\
    \ ', $paren_string);\n  $max_nesting = 0;\n  foreach ($paren_groups as $paren_group)\
    \ {\n    $nesting = 0;\n    $paren_count = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      if ($paren_group[$i] == '(') {\n        $paren_count++;\n   \
    \     if ($paren_count > $nesting) {\n          $nesting = $paren_count;\n   \
    \     }\n      } else if ($paren_group[$i] == ')') {\n        $paren_count--;\n\
    \      }\n    }\n    if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n\
    \    }\n  }\n  return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', ')\
    \ (', $paren_string);\n    $paren_string = '(' . $paren_string . ')';\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', ') (', $paren_string);\n    $paren_string\
    \ = '(' . $paren_string . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', ')\
    \ (', $paren_string);\n    $paren_string = '(' . $paren_string . ')';\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', ') (', $paren_string);\n    $paren_string\
    \ = '(' . $paren_string . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', ')\
    \ (", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ')'), array_fill(0, count($paren_string),\
    \ ' ) '), $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '('), array_fill(0, count($paren_string), ' ( '), $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), '  '), array_fill(0, count($paren_string),\
    \ ' '), $paren_string);\n    $paren_string = array_map('trim', $paren_string);\n\
    \    $paren_string = array_map('explode', array_fill(0, count($paren_string),\
    \ ' '), $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_level = 0;\n    $paren_max_level = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n     \
    \       if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_level--;\n        }\n    }\n    return $paren_max_level;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $level = 0;\n    foreach ($paren_string as $paren) {\n\
    \        if ($paren == '(') {\n            $level++;\n            if ($level >\
    \ $max_level) {\n                $max_level = $level;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $level--;\n        }\n    }\n    return\
    \ $max_level;\n}\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    return strlen($paren_string);\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == \")\") {\n            $paren_count--;\n        }\n    }\n    return $paren_max;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_depth++;\n     \
    \       if ($paren_depth > $paren_max_depth) {\n                $paren_max_depth\
    \ = $paren_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n}\n", " \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \    $paren_string = str_split($paren_string);\n    $paren_stack = array();\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $char)\
    \ {\n        if ($char == '(') {\n            array_push($paren_stack, $char);\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } else if\
    \ ($char == ')') {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('((', '( (', $paren_string);\n\
    \  $paren_string = str_replace('))', ') )', $paren_string);\n  $paren_string =\
    \ str_replace('))', ') )', $paren_string);\n  $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n  $paren_string = str_replace('))', ') )', $paren_string);\n\
    \  $paren_string = str_replace('))', ') )', $paren_string);\n  $paren_string =\
    \ str_replace('))', ') )', $paren_string);\n  $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n  $paren_string = str_replace('))', ') )', $paren_string);\n\
    \  $paren_string = str_replace('))', ') )', $paren_string);\n  $paren_string =\
    \ str_replace('))', ') )', $paren_string);\n  $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n  $paren_string = str_replace('))', ') )', $paren_string);\n\
    \  $paren_string = str_replace('))', ') )', $paren_string);\n  $paren_string =\
    \ str_replace('))', ') )', $paren_string);\n  $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n  $paren_string = str_replace('))', ') )', $paren_string);\n\
    \  $paren_string = str_replace('))', ') )', $paren_string);\n  $paren_string =\
    \ str_replace('))', ') )', $paren_string);\n  $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n  $paren_string = str_replace('))', ') )', $paren",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', ',', $paren_string);\n    $paren_string\
    \ = '[' . $paren_string . ']';\n    $paren_string = json_decode($paren_string);\n\
    \    return $paren_string;\n}\n", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_stack = array();\n  $max_depth = 0;\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      array_push($paren_stack, $paren);\n     \
    \ if (count($paren_stack) > $max_depth) {\n        $max_depth = count($paren_stack);\n\
    \      }\n    }\n    elseif ($paren == ')') {\n      array_pop($paren_stack);\n\
    \    }\n  }\n  return $max_depth;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    return strlen($paren_string);\n}\n\
    \necho parse_nested_parens('(())');\necho parse_nested_parens('(()())');\necho\
    \ parse_nested_parens('((()))');\necho parse_nested_parens('((())) (())');\necho\
    \ parse_nested_parens('((())) (()) ()');\necho parse_nested_parens('((())) (())\
    \ () (())');\necho parse_nested_parens('((())) (()) () (()) (())');\necho parse_nested_parens('((()))\
    \ (()) () (()) (()) (())');\necho parse_nested_parens('((())) (()) () (()) (())\
    \ (()) (())');\necho parse_nested_parens('((())) (()) () (()) (()) (()) (()) (())');\n\
    echo parse_nested_parens('((())) (()) () (()) (()) (()) (()) (()) (())');\necho\
    \ parse_nested_parens('((())) (()) () (()) (()) (()) (()) (()) (()) (())');\n\
    echo parse_nested_parens('((())) (()) () (()) (()) (()) (()) (()) (()) (()) (())');\n\
    echo parse_nested_parens('((())) (()) () (()) (()) (()) (()) (()) (()) (()) (())\
    \ (())');\necho parse_nested_parens('((())) (()) () (()) (()) (()) (()) (()) (())\
    \ (()) (()) (()) (())');\necho parse_nested_parens('((())) (()) () (()) (()) (())\
    \ (()) (()) (()) (()) (()) (()) (()) (())');\necho parse_nested_parens('((()))\
    \ (()) () (()) (()) (()) (()) (()) (", "  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_stack = array();\n  $paren_level\
    \ = 0;\n  $paren_max_level = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $paren_level++;\n      $paren_max_level = max($paren_max_level,\
    \ $paren_level);\n    } elseif ($paren == ')') {\n      $paren_level--;\n    }\n\
    \  }\n  return $paren_max_level;\n}\n\n$paren_string = '(()()) ((()))';\necho\
    \ parse_nested_parens($paren_string);", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            $paren_count++;\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $max_paren_count) {\n            $max_paren_count = $paren_count;\n      \
    \  }\n    }\n    return $max_paren_count;\n}\n\n$paren_string = '(()()) (()) (()(()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
