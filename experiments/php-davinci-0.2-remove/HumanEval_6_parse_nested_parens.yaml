name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_count = count($paren_array);\n    $paren_stack = array();\n    $paren_max_depth\
    \ = 0;\n    $paren_current_depth = 0;\n    for ($i = 0; $i < $paren_count; $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            array_push($paren_stack,\
    \ $paren_array[$i]);\n            $paren_current_depth++;\n            if ($paren_current_depth\
    \ > $paren_max_depth) {\n                $paren_max_depth = $paren_current_depth;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $paren_current_depth--;\n        }\n    }\n    return $paren_max_depth;\n\
    }\n", "  // Split the string into groups of parentheses separated by spaces.\n\
    \  $paren_groups = explode(' ', $paren_string);\n  // Initialize an array to hold\
    \ the results.\n  $results = array();\n  // Iterate through each group of parentheses.\n\
    \  foreach ($paren_groups as $group) {\n    // Initialize a counter to keep track\
    \ of the level of nesting.\n    $level = 0;\n    // Initialize a variable to keep\
    \ track of the maximum level of nesting.\n    $max_level = 0;\n    // Iterate\
    \ through each character in the group.\n    for ($i = 0; $i < strlen($group);\
    \ $i++) {\n      // If the character is an opening parenthesis, increment the\
    \ level.\n      if ($group[$i] == '(') {\n        $level++;\n      }\n      //\
    \ If the character is a closing parenthesis, decrement the level.\n      elseif\
    \ ($group[$i] == ')') {\n        $level--;\n      }\n      // If the level is\
    \ greater than the maximum level, update the maximum level.\n      if ($level\
    \ > $max_level) {\n        $max_level = $level;\n      }\n    }\n    // Add the\
    \ maximum level of nesting to the results array.\n    $results[] = $max_level;\n\
    \  }\n  // Return the results array.\n  return $results;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting\
    \ = 0;\n  foreach ($paren_groups as $group) {\n    $nesting = 0;\n    $len = strlen($group);\n\
    \    for ($i = 0; $i < $len; $i++) {\n      if ($group[$i] == '(') {\n       \
    \ $nesting++;\n      } else {\n        $nesting--;\n      }\n      if ($nesting\
    \ > $max_nesting) {\n        $max_nesting = $nesting;\n      }\n    }\n  }\n \
    \ return $max_nesting;\n}\n\n$paren_string = '(()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_depth = 0;\n    $depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } else {\n            $depth--;\n        }\n    }\n  \
    \  return $max_depth;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_array = explode(' ', $paren_string);\n  $paren_count = array();\n  foreach\
    \ ($paren_array as $paren_group) {\n    $paren_count[] = parse_parens($paren_group);\n\
    \  }\n  return $paren_count;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            $paren_count++;\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $max_paren_count) {\n            $max_paren_count = $paren_count;\n      \
    \  }\n    }\n    return $max_paren_count;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n        } else\
    \ {\n            $current_depth--;\n        }\n        if ($current_depth > $max_depth)\
    \ {\n            $max_depth = $current_depth;\n        }\n    }\n    return $max_depth;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n\
    \    foreach ($paren_array as $paren_group) {\n        $level = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $level++;\n            } else {\n               \
    \ $level--;\n            }\n            if ($level > $max_level) {\n         \
    \       $max_level = $level;\n            }\n        }\n    }\n    return $max_level;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  $current_depth = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ '(') {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    }\n    elseif ($paren == ')')\
    \ {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('str_replace', array_fill(0, count($paren_string), '('), array_fill(0,\
    \ count($paren_string), '1'), $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ')'), array_fill(0, count($paren_string),\
    \ '-1'), $paren_string);\n    $paren_string = array_map('intval', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '1'), array_fill(0, count($paren_string), '('), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n      array_push($paren_stack,\
    \ $paren);\n      if (count($paren_stack) > $max_depth) {\n        $max_depth\
    \ = count($paren_stack);\n      }\n    }\n    elseif ($paren == ')') {\n     \
    \ array_pop($paren_stack);\n    }\n  }\n  return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\n$paren_string = '(()()) (()()) ((()))';\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    $current_nesting = 0;\n    foreach ($paren_string as\
    \ $paren) {\n        if ($paren == '(') {\n            $current_nesting++;\n \
    \           if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren == ')') {\n   \
    \         $current_nesting--;\n        }\n    }\n    return $max_nesting;\n}",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    return strlen($paren_string);\n}\n",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_count = count($paren_array);\n\
    \    $paren_array_index = 0;\n    $paren_array_stack = array();\n    $paren_array_stack_index\
    \ = 0;\n    $paren_array_stack_max = 0;\n    $paren_array_stack_max_index = 0;\n\
    \    while ($paren_array_index < $paren_array_count) {\n        if ($paren_array[$paren_array_index]\
    \ == '(') {\n            $paren_array_stack[$paren_array_stack_index] = $paren_array_index;\n\
    \            $paren_array_stack_index++;\n        } elseif ($paren_array[$paren_array_index]\
    \ == ')') {\n            $paren_array_stack_index--;\n            if ($paren_array_stack_index\
    \ > $paren_array_stack_max) {\n                $paren_array_stack_max = $paren_array_stack_index;\n\
    \                $paren_array_stack_max_index = $paren_array_index;\n        \
    \    }\n        }\n        $paren_array_index++;\n    }\n    return $paren_array_stack_max;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  $paren_count = count($paren_array);\n\
    \  $paren_level = 0;\n  $paren_level_max = 0;\n  for ($i = 0; $i < $paren_count;\
    \ $i++) {\n    if ($paren_array[$i] == '(') {\n      $paren_level++;\n      if\
    \ ($paren_level > $paren_level_max) {\n        $paren_level_max = $paren_level;\n\
    \      }\n    }\n    elseif ($paren_array[$i] == ')') {\n      $paren_level--;\n\
    \    }\n  }\n  return $paren_level_max;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n            if ($paren_count > $max_paren_count)\
    \ {\n                $max_paren_count = $paren_count;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $paren_count--;\n        }\n    }\n\
    \    return $max_paren_count;\n}\n", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $paren_level = 0;\n    $paren_max_level = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n            $paren_level++;\n      \
    \      if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } elseif ($paren == ')') {\n       \
    \     array_pop($paren_stack);\n            $paren_level--;\n        }\n    }\n\
    \    return $paren_max_level;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n  $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n  $paren_string = str_replace(' )', ')', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \  $paren_string = str_replace('( ', '(', $paren_string);\n  $paren_string = str_replace('\
    \ )', ')', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = str_replace(')\
    \ (', ') (', $paren_string);\n  $paren_string = str_replace('( ', '(', $paren_string);\n\
    \  $paren_string = str_replace(' )', ')', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n  $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n  $paren_string = str_replace(' )', ')', $paren_string);\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '('), array_fill(0, count($paren_string), '1'), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren_string), ')'), array_fill(0,\
    \ count($paren_string), '-1'), $paren_string);\n    $paren_string = array_map('intval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '1'), array_fill(0, count($paren_string), '('), $paren_string);\n\
    \    $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '-1'), array_fill(0, count($paren_string), ')'), $paren_string);\n    $paren_string\
    \ = array_map('strval', $paren_string);\n    $paren_string = array_map('trim',\
    \ $paren", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n   \
    \ foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n         \
    \   $current_depth++;\n            if ($current_depth > $max_depth) {\n      \
    \          $max_depth = $current_depth;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_array = explode(' ', $paren_string);\n  $max_depth = 0;\n  foreach ($paren_array\
    \ as $paren_group) {\n    $depth = 0;\n    $paren_group_length = strlen($paren_group);\n\
    \    for ($i = 0; $i < $paren_group_length; $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $depth++;\n      } else if ($paren_group[$i] == ')') {\n\
    \        $depth--;\n      }\n    }\n    if ($depth > $max_depth) {\n      $max_depth\
    \ = $depth;\n    }\n  }\n  return $max_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            $max_depth = max($max_depth, $current_depth);\n        } elseif ($paren\
    \ == ')') {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\n$paren_string = \"((())) (()())\";\necho parse_nested_parens($paren_string);",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' (', $paren_string);\n    $paren_string\
    \ = str_replace(')', ') ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' (', $paren_string);\n    $paren_string = str_replace(')',\
    \ ') ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(') (', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' (', $paren_string);\n    $paren_string = str_replace(')', ') ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(')\
    \ (', ') (', $paren_string);\n    $paren_string = str_replace('(', ' (', $paren_string);\n\
    \    $paren_string = str_replace(')', ') ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' (', $paren_string);\n    $paren_string\
    \ = str_replace(')', ') ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(') (', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(') (', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('strval', $paren_string);\n    $paren_string =\
    \ array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('", "    $paren_groups = explode('\
    \ ', $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_groups as $group)\
    \ {\n        $nesting = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n\
    \            if ($group[$i] == '(') {\n                $nesting++;\n         \
    \   } else if ($group[$i] == ')') {\n                $nesting--;\n           \
    \ }\n        }\n        if ($nesting > $max_nesting) {\n            $max_nesting\
    \ = $nesting;\n        }\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_depth++;\n     \
    \       if ($paren_depth > $paren_max_depth) {\n                $paren_max_depth\
    \ = $paren_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n}\n\necho\
    \ parse_nested_parens('(()())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()()) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ ((()))') . \"\\n\";\necho parse_nested_parens('(()()) (())()') . \"\\n\";\n\
    echo parse_nested_parens('((())) (())()') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (())() (()())') . \"\\n\";\necho parse_nested_parens('((())) (())() ((()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()()) (())() (()()) (())()') . \"\\n\"\
    ;\necho parse_nested_parens('((())) (())() ((())) (())()') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (())() (()()) (())() (()())') . \"\\", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(' ', ') (", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array = array_filter($paren_array);\n\
    \    $paren_array = array_values($paren_array);\n    $paren_count = count($paren_array);\n\
    \    $paren_depth = 0;\n    $paren_max_depth = 0;\n    for ($i = 0; $i < $paren_count;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_depth++;\n\
    \            if ($paren_depth > $paren_max_depth) {\n                $paren_max_depth\
    \ = $paren_depth;\n            }\n        } elseif ($paren_array[$i] == ')') {\n\
    \            $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n", "  $paren_string = trim($paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace(')', ' )', $paren_string);\n  $paren_string = str_replace('(',\
    \ '( ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = explode(' ', $paren_string);\n  $max_level = 0;\n  $level = 0;\n  foreach\
    \ ($paren_string as $paren) {\n    if ($paren == '(') {\n      $level++;\n   \
    \   if ($level > $max_level) {\n        $max_level = $level;\n      }\n    }\n\
    \    else {\n      $level--;\n    }\n  }\n  return $max_level;\n}\n\n$paren_string\
    \ = '(()()) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))\
    \ ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((())) ((()))",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    return strlen($paren_string);\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = array();\n    $paren_depth\
    \ = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            array_push($paren_stack, $paren);\n \
    \           $paren_depth++;\n            if ($paren_depth > $paren_max_depth)\
    \ {\n                $paren_max_depth = $paren_depth;\n            }\n       \
    \ } else if ($paren == ')') {\n            array_pop($paren_stack);\n        \
    \    $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n}\n\n$paren_string\
    \ = '(()()) ((())) (()(()))';\necho parse_nested_parens($paren_string);", "  \
    \  $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_nesting = 0;\n    $current_nesting\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_nesting++;\n            if ($current_nesting > $max_nesting)\
    \ {\n                $max_nesting = $current_nesting;\n            }\n       \
    \ } elseif ($paren == ')') {\n            $current_nesting--;\n        }\n   \
    \ }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n    $paren_string_length\
    \ = strlen($paren_string);\n    for ($i = 0; $i < $paren_string_length; $i++)\
    \ {\n        if ($paren_string[$i] == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } else if ($paren_string[$i] == ')')\
    \ {\n            $current_depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\necho parse_nested_parens('(())') . PHP_EOL;\necho parse_nested_parens('((()))')\
    \ . PHP_EOL;\necho parse_nested_parens('(()())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (())') . PHP_EOL;\necho parse_nested_parens('((())) (()) (())') . PHP_EOL;\n\
    echo parse_nested_parens('((())) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()) (())\
    \ (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()) (()) (())\
    \ (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()) (()) (())\
    \ (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()) (())\
    \ (()) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()) (()) (()) (()) (()) (()) (()) (()) (())') . PHP_EOL;\necho parse_nested_parens('((()))",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } else {\n\
    \            $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n",
  "  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\s+\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '\
    \ ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_array = explode(' ', $paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      array_push($paren_stack, $paren);\n    }\n    elseif\
    \ ($paren == ')') {\n      if (count($paren_stack) > $max_depth) {\n        $max_depth\
    \ = count($paren_stack);\n      }\n      array_pop($paren_stack);\n    }\n  }\n\
    \  return $max_depth;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $paren_count[] = substr_count($paren, '(') - substr_count($paren, ')');\n  \
    \  }\n    return $paren_count;\n}\n\n$paren_string = '(()()) ((()))';\n$paren_count\
    \ = parse_nested_parens($paren_string);\nprint_r($paren_count);", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = array();\n    $paren_depth\
    \ = 0;\n    $paren_max_depth = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == '(') {\n            $paren_depth++;\n            $paren_max_depth\
    \ = max($paren_max_depth, $paren_depth);\n        } elseif ($paren == ')') {\n\
    \            $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    $nesting = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $nesting++;\n        } elseif ($paren\
    \ == ')') {\n            $nesting--;\n        }\n        if ($nesting > $max_nesting)\
    \ {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('((', '(', $paren_string);\n    $paren_string\
    \ = str_replace('))', ')', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('((', '(', $paren_string);\n    $paren_string\
    \ = str_replace('))', ')', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_replace('((', '(', $paren_string);\n    $paren_string\
    \ = str_replace('))', ')', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace('", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n", "   \
    \ $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n    foreach\
    \ ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else if\
    \ ($paren_group[$i] == ')') {\n                $depth--;\n            }\n    \
    \        if ($depth > $max_depth_in_group) {\n                $max_depth_in_group\
    \ = $depth;\n            }\n        }\n        if ($max_depth_in_group > $max_depth)\
    \ {\n            $max_depth = $max_depth_in_group;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace(' )', ')', $paren_string);\n\
    \    $paren_string = str_replace('( ', '(', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = str_replace(') (', ')(', $paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = str_replace(' )', ')', $paren_string);\n    $paren_string = str_replace('(\
    \ ', '(', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = str_replace(')\
    \ (', ')(', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_values(array_filter($paren_string));\n\
    \    $max_nesting = 0;\n    $current_nesting = 0;\n    foreach ($paren_string\
    \ as $paren) {\n        if ($paren == \"(\") {\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } else {\n            $current_nesting--;\n\
    \        }\n    }\n    return $max_nesting;\n}\n\n$paren_string = \"(()()) (()()())\
    \ ((()()))\";\necho parse_nested_parens($paren_string);", "    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = str_replace(\"\
    \  \", \" \", $paren_string);\n    $paren_string = str_replace(\"  \", \" \",\
    \ $paren_string);\n    $paren_string = str_replace(\"  \", \"", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array = array_values(array_filter($paren_array));\n\
    \    $paren_array_length = count($paren_array);\n    $paren_array_index = 0;\n\
    \    $paren_array_stack = array();\n    $paren_array_stack_index = 0;\n    $paren_array_stack_max\
    \ = 0;\n    $paren_array_stack_max_index = 0;\n    while ($paren_array_index <\
    \ $paren_array_length) {\n        if ($paren_array[$paren_array_index] == '(')\
    \ {\n            $paren_array_stack[$paren_array_stack_index] = $paren_array_index;\n\
    \            $paren_array_stack_index++;\n        } else {\n            $paren_array_stack_index--;\n\
    \            if ($paren_array_stack_index > $paren_array_stack_max) {\n      \
    \          $paren_array_stack_max = $paren_array_stack_index;\n              \
    \  $paren_array_stack_max_index = $paren_array_index;\n            }\n       \
    \ }\n        $paren_array_index++;\n    }\n    $paren_array_stack_max++;\n   \
    \ $paren_array_stack_max_index++;\n    $paren_array_stack_max_string = '';\n \
    \   for ($i = 0; $i < $paren_array_stack_max; $i++) {\n        $paren_array_stack_max_string\
    \ .= '(';\n    }\n    for ($i = 0; $", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = str_replace(')\
    \ (', ') (', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ '('), array_fill(0, count($paren_string), '1'), $paren_string);\n    $paren_string\
    \ = array_map('str_replace', array_fill(0, count($paren_string), ')'), array_fill(0,\
    \ count($paren_string), '-1'), $paren_string);\n    $paren_string = array_map('intval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('intval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    return strlen($paren_string);\n}\n", "  $paren_string =\
    \ str_replace(' ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n\
    \  $paren_count = 0;\n  $paren_max = 0;\n  foreach ($paren_array as $paren) {\n\
    \    if ($paren == '(') {\n      $paren_count++;\n      if ($paren_count > $paren_max)\
    \ {\n        $paren_max = $paren_count;\n      }\n    } else {\n      $paren_count--;\n\
    \    }\n  }\n  return $paren_max;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $paren_count++;\n            if ($paren_count > $max_paren_count)\
    \ {\n                $max_paren_count = $paren_count;\n            }\n       \
    \ } else if ($paren_string[$i] == ')') {\n            $paren_count--;\n      \
    \  }\n    }\n    return $max_paren_count;\n}\n\necho parse_nested_parens('(()())')\
    \ . \"\\n\";\necho parse_nested_parens('((()))') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (()())') . \"\\n\";\necho parse_nested_parens('((())) ((()))') . \"\\n\";\n\
    echo parse_nested_parens('((())) (()())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ ((()))') . \"\\n\";\necho parse_nested_parens('((())) ((())) (()())') . \"\\\
    n\";\necho parse_nested_parens('(()()) ((())) (()())') . \"\\n\";\necho parse_nested_parens('(()())\
    \ (()()) ((()))') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('(()()) (()()) (()())') . \"\\n\";\necho\
    \ parse_nested_parens('((())) ((())) ((()))') . \"\\n\";\necho parse_nested_parens('((()))\
    \ ((())) ((())) ((()))') . \"\\n\";\necho parse_nested_parens('((())) ((())) ((()))\
    \ ((())) ((()))') . \"\\n\";\necho parse_nested_parens('((())) ((())) ((())) ((()))\
    \ ((())) ((()))')", "  $paren_string = trim($paren_string);\n  $paren_string =\
    \ str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(', ')\
    \ (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_stack = array();\n    $paren_count = 0;\n    $max_paren_count = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $max_paren_count) {\n \
    \               $max_paren_count = $paren_count;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $paren_count--;\n        }\n    }\n    return\
    \ $max_paren_count;\n}\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_array = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach ($paren_array\
    \ as $paren_group) {\n    $nesting = 0;\n    $paren_group_len = strlen($paren_group);\n\
    \    for ($i = 0; $i < $paren_group_len; $i++) {\n      if ($paren_group[$i] ==\
    \ '(') {\n        $nesting++;\n      }\n      elseif ($paren_group[$i] == ')')\
    \ {\n        $nesting--;\n      }\n    }\n    if ($nesting > $max_nesting) {\n\
    \      $max_nesting = $nesting;\n    }\n  }\n  return $max_nesting;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n       \
    \     $current_depth++;\n            $max_depth = max($max_depth, $current_depth);\n\
    \        } elseif ($paren == ')') {\n            $current_depth--;\n        }\n\
    \    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_array = str_split($paren_string);\n    $max_depth\
    \ = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            $current_depth--;\n        }\n\
    \    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $max_depth\
    \ = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            $current_depth--;\n        }\n\
    \    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()()()) ((()()))\
    \ (((())))';\necho parse_nested_parens($paren_string);", "    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = array();\n    $max_depth\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            array_push($paren_stack, $paren);\n            $max_depth = max($max_depth,\
    \ count($paren_stack));\n        } else if ($paren == ')') {\n            array_pop($paren_stack);\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), '('), array_fill(0, count($paren_string),\
    \ ' '), $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), ')'), array_fill(0, count($paren_string), ' '), $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_replace',\
    \ array_fill(0, count($paren_string), ' '), array_fill(0, count($paren_string),\
    \ ''), $paren_string);\n    $paren_string = array_map('strlen', $paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('(', '\
    \ ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_array = array_values(array_filter($paren_array));\n  $paren_count =\
    \ count($paren_array);\n  $nested_level = 0;\n  $max_nested_level = 0;\n  for\
    \ ($i = 0; $i < $paren_count; $i++) {\n    if ($paren_array[$i] == '(') {\n  \
    \    $nested_level++;\n      if ($nested_level > $max_nested_level) {\n      \
    \  $max_nested_level = $nested_level;\n      }\n    }\n    elseif ($paren_array[$i]\
    \ == ')') {\n      $nested_level--;\n    }\n  }\n  return $max_nested_level;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } else {\n            $paren_count--;\n\
    \        }\n        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting\
    \ = 0;\n  foreach ($paren_groups as $group) {\n    $nesting = 0;\n    for ($i\
    \ = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n        $nesting++;\n\
    \      }\n      elseif ($group[$i] == ')') {\n        $nesting--;\n      }\n \
    \   }\n    if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n  \
    \  }\n  }\n  return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \        }\n    }\n    return $paren_max;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_array as $paren_group)\
    \ {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i\
    \ = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] ==\
    \ '(') {\n                $nesting++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        if ($max_nesting_in_group > $max_nesting) {\n\
    \            $max_nesting = $max_nesting_in_group;\n        }\n    }\n    return\
    \ $max_nesting;\n}\n\n$paren_string = '(()()) (()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\")\"\
    ,", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = 0;\n    $max_paren_count = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n     \
    \       if ($paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $paren_count;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $paren_count--;\n        }\n    }\n    return $max_paren_count;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('((', '( (', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode('\
    \ ', $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_values($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    foreach ($paren_string as $paren) {\n        if ($paren == '(') {\n     \
    \       $current_depth++;\n            if ($current_depth > $max_depth) {\n  \
    \              $max_depth = $current_depth;\n            }\n        } else {\n\
    \            $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n\
    echo parse_nested_parens('(()())');\necho parse_nested_parens('((()))');\necho\
    \ parse_nested_parens('(()())((()))');\necho parse_nested_parens('(()())((()))()');\n\
    echo parse_nested_parens('(()())((()))()()');\necho parse_nested_parens('(()())((()))()()()');\n\
    echo parse_nested_parens('(()())((()))()()()()');\necho parse_nested_parens('(()())((()))()()()()()');\n\
    echo parse_nested_parens('(()())((()))()()()()()()');\necho parse_nested_parens('(()())((()))()()()()()()()');\n\
    echo parse_nested_parens('(()())((()))()()()()()()()()');\necho parse_nested_parens('(()()",
  "    $paren_groups = explode(' ', $paren_string);\n    $max_nest_levels = array();\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nest_levels[] = get_max_nest_level($paren_group);\n\
    \    }\n    return $max_nest_levels;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $paren_stack = array();\n    $paren_stack_length = 0;\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    for ($i = 0; $i < $paren_array_length; $i++) {\n\
    \        if ($paren_array[$i] == '(') {\n            $paren_stack[$paren_stack_length]\
    \ = '(';\n            $paren_stack_length++;\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren_array[$i] == ')') {\n\
    \            if ($paren_stack_length > 0) {\n                $paren_stack_length--;\n\
    \                $current_depth--;\n            }\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\necho parse_nested_parens('(()())')\
    \ . PHP_EOL;\necho parse_nested_parens('((()))') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()())') . PHP_EOL;\necho parse_nested_parens('((())) (()()) (())') . PHP_EOL;\n\
    echo parse_nested_parens('((())) (()()) (()) (()())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()())') . PHP_EOL;\necho parse_nested_parens('((())) (()())\
    \ (()) (()()) (()()) (())') . PHP_EOL;\necho parse_nested_parens('((())) (()())\
    \ (()) (()()) (()()) (()) (()())') . PHP_EOL;\necho parse_nested_parens('((()))\
    \ (()()) (()) (()()) (()()) (()) (()()) (())') . PHP_EOL;\necho parse_n", "  \
    \  $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = [];\n    $paren_level = 0;\n\
    \    $paren_max_level = 0;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $paren_level++;\n            if ($paren_level\
    \ > $paren_max_level) {\n                $paren_max_level = $paren_level;\n  \
    \          }\n        } elseif ($paren == ')') {\n            $paren_level--;\n\
    \        }\n    }\n    return $paren_max_level;\n}\n", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_stack = array();\n  $paren_depth\
    \ = 0;\n  $paren_max_depth = 0;\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $paren_depth++;\n      $paren_max_depth = max($paren_max_depth,\
    \ $paren_depth);\n    } elseif ($paren == ')') {\n      $paren_depth--;\n    }\n\
    \  }\n  return $paren_max_depth;\n}\n\n$paren_string = '(()()) (()()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_array\
    \ = explode(\" \", $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  return $paren_array;\n}\n", " \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_count = 0;\n  $max_paren_count\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $paren_count++;\n    } else if ($paren == ')') {\n      $paren_count--;\n  \
    \  }\n    if ($paren_count > $max_paren_count) {\n      $max_paren_count = $paren_count;\n\
    \    }\n  }\n  return $max_paren_count;\n}\n\n$paren_string = '(()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n        }\n\
    \        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n\n$paren_string\
    \ = '(()()) (()()) (()())';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else {\n            $current_depth--;\n        }\n \
    \   }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "  $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \" ) \", $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_string = explode(\" \", $paren_string);\n \
    \ $paren_string = array_filter($paren_string);\n  $paren_string = array_values($paren_string);\n\
    \  $max_nesting = 0;\n  $curr_nesting = 0;\n  for ($i = 0; $i < count($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == \"(\") {\n      $curr_nesting++;\n   \
    \   if ($curr_nesting > $max_nesting) {\n        $max_nesting = $curr_nesting;\n\
    \      }\n    } else if ($paren_string[$i] == \")\") {\n      $curr_nesting--;\n\
    \    }\n  }\n  return $max_nesting;\n}\n\n$paren_string = \"(()()) (()()()) ((()))\"\
    ;\necho parse_nested_parens($paren_string);", "    $paren_array = explode(' ',\
    \ $paren_string);\n    $max_depth = 0;\n    foreach ($paren_array as $paren_group)\
    \ {\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == '(') {\n                $depth++;\n \
    \           } else {\n                $depth--;\n            }\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        }\n    }\n    return $max_depth;\n}\n", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_index = 0;\n  $paren_array_stack = array();\n  $paren_array_stack_index\
    \ = 0;\n  $paren_array_stack_max = 0;\n  $paren_array_stack_max_index = 0;\n \
    \ while ($paren_array_index < $paren_array_count) {\n    if ($paren_array[$paren_array_index]\
    \ == '(') {\n      $paren_array_stack[$paren_array_stack_index] = $paren_array_index;\n\
    \      $paren_array_stack_index++;\n    } elseif ($paren_array[$paren_array_index]\
    \ == ')') {\n      $paren_array_stack_index--;\n      if ($paren_array_stack_index\
    \ > $paren_array_stack_max) {\n        $paren_array_stack_max = $paren_array_stack_index;\n\
    \        $paren_array_stack_max_index = $paren_array_index;\n      }\n    }\n\
    \    $paren_array_index++;\n  }\n  return $paren_array_stack_max;\n}\n\n$paren_string\
    \ = '(()())';\n$paren_string = '(()(()))';\n$paren_string = '(()(())) (()())';\n\
    $paren_string = '(()(())) (()()) (()(()))';\n$paren_string = '(()(())) (()())\
    \ (()(())) (()(()))';\n$paren_string = '(()(())) (", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_stack = array();\n    $paren_depth = 0;\n    $paren_max_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_depth++;\n            $paren_max_depth = max($paren_max_depth, $paren_depth);\n\
    \        } elseif ($paren == ')') {\n            $paren_depth--;\n        }\n\
    \    }\n    return $paren_max_depth;\n}\n\n$paren_string = '(()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_depth = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $depth = 0;\n    $max_depth_in_group = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        $depth++;\n      } else if ($group[$i] == ')') {\n        $depth--;\n\
    \      }\n      if ($depth > $max_depth_in_group) {\n        $max_depth_in_group\
    \ = $depth;\n      }\n    }\n    if ($max_depth_in_group > $max_depth) {\n   \
    \   $max_depth = $max_depth_in_group;\n    }\n  }\n  return $max_depth;\n}\n\n\
    $paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n    }\n    return $paren_max;\n\
    }\n\necho parse_nested_parens('(())');\necho parse_nested_parens('((()))');\n\
    echo parse_nested_parens('(()())');\necho parse_nested_parens('(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())');\necho parse_nested_parens('(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())');\necho parse_nested_parens('(()())(()())(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())(()())(()())');\necho\
    \ parse_nested_parens('(()())(()())(()())(()())(()())(()())(()())(()())');\necho\
    \ parse_nested_parens('(()())(()())(()())(()())(()())(()())(()())(()())(()())');\n\
    echo parse_nested_parens('(()())(()())(()())(()())(()())(", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_depth = 0;\n    foreach ($paren_groups\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth_in_group) {\n\
    \                $max_depth_in_group = $depth;\n            }\n        }\n   \
    \     if ($max_depth_in_group > $max_depth) {\n            $max_depth = $max_depth_in_group;\n\
    \        }\n    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('str_replace', array_fill(0,\
    \ count($paren_string), '('), array_fill(0, count($paren_string), 'open'), $paren_string);\n\
    \    $paren_string = array_map('str_replace', array_fill(0, count($paren_string),\
    \ ')'), array_fill(0, count($paren_string), 'close'), $paren_string);\n    $paren_string\
    \ = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('trim', $paren_string);\n   \
    \ $paren_string = array_values($paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strtolower', $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_filter($paren_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_", "    $paren_array = explode(' ', $paren_string);\n    $max_depth =\
    \ 0;\n    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n    \
    \    for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $depth--;\n            }\n        }\n        if ($depth\
    \ > $max_depth) {\n            $max_depth = $depth;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\necho parse_nested_parens('(()()) (()()) ((()))');", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $len = strlen($group);\n      \
    \  for ($i = 0; $i < $len; $i++) {\n            if ($group[$i] == '(') {\n   \
    \             $nesting++;\n            } else if ($group[$i] == ')') {\n     \
    \           $nesting--;\n            }\n        }\n        if ($nesting > $max_nesting)\
    \ {\n            $max_nesting = $nesting;\n        }\n    }\n    return $max_nesting;\n\
    }\n\n$paren_string = '(()()) ((())) (()()())';\necho parse_nested_parens($paren_string);",
  "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_array\
    \ = explode(' ', $paren_string);\n  $paren_array = array_filter($paren_array);\n\
    \  $paren_array = array_values($paren_array);\n  $paren_count = count($paren_array);\n\
    \  $paren_stack = array();\n  $paren_depth = array();\n  $paren_depth_max = 0;\n\
    \  for ($i = 0; $i < $paren_count; $i++) {\n    if ($paren_array[$i] == '(') {\n\
    \      array_push($paren_stack, $paren_array[$i]);\n    } else {\n      if (count($paren_stack)\
    \ > 0) {\n        array_pop($paren_stack);\n        array_push($paren_depth, count($paren_stack));\n\
    \        if (count($paren_stack) > $paren_depth_max) {\n          $paren_depth_max\
    \ = count($paren_stack);\n        }\n      }\n    }\n  }\n  return $paren_depth_max;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = str_replace(\" \
    \ \", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \",\", $paren_string);\n  $paren_string = str_replace(\"\
    ,,\", \",\", $paren_string);\n  $paren_string = trim($paren_string, \",\");\n\
    \  return $paren_string;\n}\n", "  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_array = str_split($paren_string);\n  $paren_count = 0;\n  $max_paren_count\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $paren_count++;\n    } elseif ($paren == ')') {\n      $paren_count--;\n   \
    \ }\n    if ($paren_count > $max_paren_count) {\n      $max_paren_count = $paren_count;\n\
    \    }\n  }\n  return $max_paren_count;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == \"(\") {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } else {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_depth = 0;\n  foreach\
    \ ($paren_groups as $paren_group) {\n    $depth = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      if ($paren_group[$i] == '(') {\n        $depth++;\n      } else\
    \ {\n        $depth--;\n      }\n      if ($depth > $max_depth) {\n        $max_depth\
    \ = $depth;\n      }\n    }\n  }\n  return $max_depth;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n\n$paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = 0;\n    $current_level = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_level++;\n           \
    \ if ($current_level > $max_level) {\n                $max_level = $current_level;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\necho parse_nested_parens('(()())')\
    \ . \"\\n\";\necho parse_nested_parens('((()))') . \"\\n\";\necho parse_nested_parens('(()(()))')\
    \ . \"\\n\";\necho parse_nested_parens('(()(())) (()())') . \"\\n\";\necho parse_nested_parens('(()(()))\
    \ (()()) (()(()))') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(()))\
    \ (()())') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(())) (()())\
    \ (()(()))') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(())) (()())\
    \ (()(())) (()())') . \"\\n\";\necho parse_nested_parens('(()(())) (()()) (()(()))\
    \ (()()) (()(())) (()()) (()(()))') . \"\\n\";\necho parse_nested_parens('", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"1\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"(1\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \")1\", $paren_string);\n    $paren_string = str_replace(\"\
    1\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren == \"(\")\
    \ {\n            $level++;\n            if ($level > $max_level) {\n         \
    \       $max_level = $level;\n            }\n        } elseif ($paren == \")\"\
    ) {\n            $level--;\n        }\n    }\n    return $max_level;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $", "    $paren_string = str_replace(' ', '', $paren_string);\n   \
    \ $paren_string = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n  $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(\" \",\
    \ \"\", $paren_string);\n  $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"(\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\")\", \"\", $paren_string);\n  $paren_string = str_replace(\"\"\
    , \" \", $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_string =\
    \ str_replace(\"()\", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n  $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"\", \" \", $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\"()\", \"\", $paren_string);\n  $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n  $paren_string = str_", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $max_nesting = 0;\n    foreach ($paren_array as $paren_group) {\n        $nesting\
    \ = 0;\n        $paren_group_length = strlen($paren_group);\n        for ($i =\
    \ 0; $i < $paren_group_length; $i++) {\n            if ($paren_group[$i] == '(')\
    \ {\n                $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n    }\n    return $max_nesting;\n}\n\n\
    $paren_string = '(()()) ((())) (()(()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode(\"\
    \ \", $paren_string);\n    $paren_string = array_values(array_filter($paren_string));\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $max_depth = 0;\n\
    \    $depth = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren\
    \ == \"(\") {\n            $depth++;\n            if ($depth > $max_depth) {\n\
    \                $max_depth = $depth;\n            }\n        } else if ($paren\
    \ == \")\") {\n            $depth--;\n        }\n    }\n    return $max_depth;\n\
    }\n\necho parse_nested_parens(\"(()())\") . \"\\n\";\necho parse_nested_parens(\"\
    ((()))\") . \"\\n\";\necho parse_nested_parens(\"((()()(())))\") . \"\\n\";\n\
    echo parse_nested_parens(\"((()()(()))\") . \"\\n\";\necho parse_nested_parens(\"\
    (()()(()))\") . \"\\n\";\necho parse_nested_parens(\"(()()(()))\") . \"\\n\";\n\
    echo parse_nested_parens(\"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_count = count($paren_array);\n\
    \    $paren_stack = array();\n    $paren_stack_count = 0;\n    $paren_stack_max\
    \ = 0;\n    $paren_stack_max_index = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_stack[$paren_stack_count]\
    \ = 1;\n            $paren_stack_count++;\n        } elseif ($paren_array[$i]\
    \ == ')') {\n            $paren_stack_count--;\n            $paren_stack[$paren_stack_count]++;\n\
    \            if ($paren_stack[$paren_stack_count] > $paren_stack_max) {\n    \
    \            $paren_stack_max = $paren_stack[$paren_stack_count];\n          \
    \      $paren_stack_max_index = $paren_stack_count;\n            }\n        }\n\
    \    }\n    return $paren_stack_max;\n}\n", "  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  return strlen($paren_string);\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '('.$paren_string.')';\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ ') (', $paren_string);\n    $paren_string = '('.$paren_string.')';\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', ') (', $paren_string);\n    $paren_string = '('.$paren_string.')';\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', ') (', $paren_string);\n    $paren_string\
    \ = '('.$paren_string.')';\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', ') (', $paren",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth\
    \ > $max_depth) {\n        $max_depth = $current_depth;\n      }\n    } else {\n\
    \      $current_depth--;\n    }\n  }\n  return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) ((())) ((())) (()())';\n$paren_array = explode(' ', $paren_string);\n\
    foreach ($paren_array as $paren) {\n  echo parse_nested_parens($paren) . \"\\\
    n\";\n}", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_count = array();\n  foreach ($paren_array as $paren_group) {\n    $paren_count[]\
    \ = substr_count($paren_group, '(') - substr_count($paren_group, ')');\n  }\n\
    \  return $paren_count;\n}\n", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n  $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \  $paren_string = str_replace(\")\", \"\", $paren_string);\n  return strlen($paren_string);\n\
    }\n\n$paren_string = \"(()()) (()())(()())(()())\";\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_len = count($paren_array);\n\
    \    $paren_stack = array();\n    $paren_stack_len = 0;\n    $paren_stack_max_len\
    \ = 0;\n    for ($i = 0; $i < $paren_array_len; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_stack[$paren_stack_len] = $paren_array[$i];\n\
    \            $paren_stack_len++;\n            if ($paren_stack_len > $paren_stack_max_len)\
    \ {\n                $paren_stack_max_len = $paren_stack_len;\n            }\n\
    \        } else if ($paren_array[$i] == ')') {\n            $paren_stack_len--;\n\
    \        }\n    }\n    return $paren_stack_max_len;\n}\n\n$paren_string = '(()())\
    \ ((())) (()(()))';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_count = 0;\n    $paren_max = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \        }\n    }\n    return $paren_max;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '', $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n\
    \  $paren_string = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  return strlen($paren_string);\n}\n", "  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_depth = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $depth = 0;\n    $max_depth_in_group = 0;\n\
    \    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        $depth++;\n      } else if ($group[$i] == ')') {\n        $depth--;\n\
    \      }\n      if ($depth > $max_depth_in_group) {\n        $max_depth_in_group\
    \ = $depth;\n      }\n    }\n    if ($max_depth_in_group > $max_depth) {\n   \
    \   $max_depth = $max_depth_in_group;\n    }\n  }\n  return $max_depth;\n}\n\n\
    echo parse_nested_parens('(())') . \"\\n\";\necho parse_nested_parens('((()))')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()())') . \"\\n\";\necho parse_nested_parens('((()))\
    \ (()()) (())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()())') . \"\
    \\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()()) (())') . \"\
    \\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()()) (()) (()())')\
    \ . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()()) (()()) (())\
    \ (()()) (())') . \"\\n\";\necho parse_nested_parens('((())) (()()) (()) (()())\
    \ (()()) (()) (()", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n  $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" )\", $paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $max_depth = 0;\n   \
    \ $current_depth = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren\
    \ == \"(\") {\n            $current_depth++;\n        } else {\n            $current_depth--;\n\
    \        }\n        if ($current_depth > $max_depth) {\n            $max_depth\
    \ = $current_depth;\n        }\n    }\n    return $max_depth;\n}\necho parse_nested_parens(\"\
    (()()) (()()()) ((()))\") . \"\\n\";", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    return strlen($paren_string);\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    foreach ($paren_groups as $paren_group) {\n       \
    \ $nesting = 0;\n        $paren_group_len = strlen($paren_group);\n        for\
    \ ($i = 0; $i < $paren_group_len; $i++) {\n            if ($paren_group[$i] ==\
    \ '(') {\n                $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting) {\n                $max_nesting\
    \ = $nesting;\n            }\n        }\n    }\n    return $max_nesting;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_level = 0;\n    $max_level = 0;\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_level++;\n            $max_level\
    \ = max($max_level, $paren_level);\n        } else if ($paren == ')') {\n    \
    \        $paren_level--;\n        }\n    }\n    return $max_level;\n}\n\n$paren_string\
    \ = '(()()) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_depth = 0;\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth_in_group) {\n\
    \                $max_depth_in_group = $depth;\n            }\n        }\n   \
    \     if ($max_depth_in_group > $max_depth) {\n            $max_depth = $max_depth_in_group;\n\
    \        }\n    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('((', '( (', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace('))', ') )', $paren_string);\n    $paren_string = str_replace('))',\
    \ ') )', $paren_string);\n    $paren_string = str_replace('))', ') )', $paren_string);\n\
    \    $paren_string = str_replace('))', ') )', $paren_string);\n    $paren_string\
    \ = str_replace", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n\
    \  $current_depth = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren ==\
    \ '(') {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    } else {\n      $current_depth--;\n\
    \    }\n  }\n  return $max_depth;\n}\n", "  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $nesting = 0;\n    for ($i = 0; $i < strlen($group);\
    \ $i++) {\n      if ($group[$i] == '(') {\n        $nesting++;\n      }\n    \
    \  else {\n        $nesting--;\n      }\n      if ($nesting > $max_nesting) {\n\
    \        $max_nesting = $nesting;\n      }\n    }\n  }\n  return $max_nesting;\n\
    }\n", "  $paren_string = trim($paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_groups as $group) {\n    $nesting = 0;\n    $paren_stack = [];\n   \
    \ for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] == '(') {\n\
    \        array_push($paren_stack, '(');\n        $nesting++;\n      } else {\n\
    \        if (count($paren_stack) == 0) {\n          return -1;\n        }\n  \
    \      array_pop($paren_stack);\n      }\n    }\n    if (count($paren_stack) !=\
    \ 0) {\n      return -1;\n    }\n    if ($nesting > $max_nesting) {\n      $max_nesting\
    \ = $nesting;\n    }\n  }\n  return $max_nesting;\n}\n\n$paren_string = '(()())\
    \ (()()) ((()))';\necho parse_nested_parens($paren_string);", "  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace(')(', ') (', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '\
    \ ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_string as $paren)\
    \ {\n        if ($paren == '(') {\n            $current_depth++;\n           \
    \ if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    return strlen($paren_string);\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode('\
    \ ', $paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_string as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('  ',\
    \ ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_array = array_unique($paren_array);\n\
    \    $paren_array = array_values($paren_array);\n    $max_paren_count = 0;\n \
    \   foreach ($paren_array as $paren_group) {\n        $paren_count = strlen($paren_group);\n\
    \        if ($paren_count > $max_paren_count) {\n            $max_paren_count\
    \ = $paren_count;\n        }\n    }\n    return $max_paren_count;\n}\n", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_stack = array();\n  $max_depth\
    \ = 0;\n  $current_depth = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $current_depth++;\n      if ($current_depth > $max_depth) {\n\
    \        $max_depth = $current_depth;\n      }\n    }\n    elseif ($paren == ')')\
    \ {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n}\n\n$paren_string\
    \ = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_nesting = 0;\n    foreach ($paren_array\
    \ as $paren_group) {\n        $nesting = 0;\n        $paren_length = strlen($paren_group);\n\
    \        for ($i = 0; $i < $paren_length; $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $nesting--;\n            }\n        }\n        if\
    \ ($nesting > $max_nesting) {\n            $max_nesting = $nesting;\n        }\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_count = count($paren_array);\n    $paren_depth = 0;\n    $paren_max_depth\
    \ = 0;\n    for ($i = 0; $i < $paren_count; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_depth++;\n            if ($paren_depth > $paren_max_depth)\
    \ {\n                $paren_max_depth = $paren_depth;\n            }\n       \
    \ } else {\n            $paren_depth--;\n        }\n    }\n    return $paren_max_depth;\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = explode(' ', $paren_string);\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  foreach ($paren_string as $paren) {\n    if ($paren == '(') {\n    \
    \  $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n    }\n    elseif ($paren == ')') {\n      $current_depth--;\n\
    \    }\n  }\n  return $max_depth;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    return strlen($paren_string);\n}\n\necho parse_nested_parens('(()())\
    \ (()()) (()())');\necho parse_nested_parens('((())) (()()) (()())');\necho parse_nested_parens('((()))\
    \ ((())) (()())');\necho parse_nested_parens('((())) ((())) ((()))');", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n       \
    \     $current_depth++;\n            if ($current_depth > $max_depth) {\n    \
    \            $max_depth = $current_depth;\n            }\n        } else {\n \
    \           $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    foreach ($paren_groups as $paren_group) {\n        $nesting = 0;\n      \
    \  $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ if ($max_nesting_in_group > $max_nesting) {\n            $max_nesting = $max_nesting_in_group;\n\
    \        }\n    }\n    return $max_nesting;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = 0;\n  foreach\
    \ ($paren_groups as $paren_group) {\n    $nesting = 0;\n    $paren_group_len =\
    \ strlen($paren_group);\n    for ($i = 0; $i < $paren_group_len; $i++) {\n   \
    \   if ($paren_group[$i] == '(') {\n        $nesting++;\n      } else if ($paren_group[$i]\
    \ == ')') {\n        $nesting--;\n      }\n    }\n    if ($nesting > $max_nesting)\
    \ {\n      $max_nesting = $nesting;\n    }\n  }\n  return $max_nesting;\n}\n\n\
    $paren_string = '(()()) (()()) ((()))';\necho parse_nested_parens($paren_string);",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \     }\n    }\n    return $max_depth;\n}\n", "  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n  $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' ) ', $paren_string);\n  $paren_string =\
    \ trim($paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_array = explode(' ', $paren_string);\n\
    \  $paren_array_count = count($paren_array);\n  $paren_array_depth = array();\n\
    \  $paren_array_depth_count = 0;\n  $paren_array_depth_max = 0;\n  for ($i = 0;\
    \ $i < $paren_array_count; $i++) {\n    if ($paren_array[$i] == '(') {\n     \
    \ $paren_array_depth_count++;\n      if ($paren_array_depth_count > $paren_array_depth_max)\
    \ {\n        $paren_array_depth_max = $paren_array_depth_count;\n      }\n   \
    \ }\n    elseif ($paren_array[$i] == ')') {\n      $paren_array_depth_count--;\n\
    \    }\n    else {\n      $paren_array_depth[] = $paren_array_depth_max;\n   \
    \   $paren_array_depth_max = 0;\n    }\n  }\n  return $paren_array_depth;\n}\n\
    \n$paren_string = '(()()) ((())) (((())))';\n$paren_array_depth = parse_nested_parens($paren_string);\n\
    print_r($paren_array_depth);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_paren_count\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_count++;\n        } elseif ($paren == ')') {\n           \
    \ $paren_count--;\n        }\n        if ($paren_count > $max_paren_count) {\n\
    \            $max_paren_count = $paren_count;\n        }\n    }\n    return $max_paren_count;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } else {\n            $current_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $", "  $paren_string = trim($paren_string);\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('(', ' ( ', $paren_string);\n  $paren_string =\
    \ str_replace(')', ' ) ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_array = explode(' ', $paren_string);\n  $paren_count = count($paren_array);\n\
    \  $paren_depth = 0;\n  $paren_max_depth = 0;\n  for ($i = 0; $i < $paren_count;\
    \ $i++) {\n    if ($paren_array[$i] == '(') {\n      $paren_depth++;\n      if\
    \ ($paren_depth > $paren_max_depth) {\n        $paren_max_depth = $paren_depth;\n\
    \      }\n    }\n    elseif ($paren_array[$i] == ')') {\n      $paren_depth--;\n\
    \    }\n  }\n  return $paren_max_depth;\n}\n", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n  $paren_string = str_replace('  ', ' ', $", "   \
    \ $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n    foreach\
    \ ($paren_array as $paren_group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $nesting++;\n            } else\
    \ if ($paren_group[$i] == ')') {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting_in_group) {\n                $max_nesting_in_group\
    \ = $nesting;\n            }\n        }\n        if ($max_nesting_in_group > $max_nesting)\
    \ {\n            $max_nesting = $max_nesting_in_group;\n        }\n    }\n   \
    \ return $max_nesting;\n}\n\necho parse_nested_parens('(()()) (()(()))');", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $max_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth\
    \ = max($max_depth, count($paren_stack));\n        } elseif ($paren == ')') {\n\
    \            array_pop($paren_stack);\n        }\n    }\n    return $max_depth;\n\
    }\n", "  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = 0;\n  foreach ($paren_groups as $group) {\n    $nesting = 0;\n\
    \    $paren_stack = [];\n    for ($i = 0; $i < strlen($group); $i++) {\n     \
    \ if ($group[$i] == '(') {\n        array_push($paren_stack, '(');\n        $nesting++;\n\
    \      } else {\n        array_pop($paren_stack);\n        $nesting--;\n     \
    \ }\n    }\n    if ($nesting > $max_nesting) {\n      $max_nesting = $nesting;\n\
    \    }\n  }\n  return $max_nesting;\n}\n\n$paren_string = '(()()) (()()) ((()))';\n\
    echo parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace(')', ' )', $paren_string);\n    $paren_string\
    \ = str_replace('(', '( ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $max_depth = 0;\n    $current_depth\
    \ = 0;\n    foreach ($paren_string as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $", "  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\)\\(/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    )\\(/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(/', '", " \
    \   $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '0', $paren_string);\n    $paren_string\
    \ = str_replace('(', '1', $paren_string);\n    $paren_string = str_replace(')',\
    \ '2', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '', $paren_string);\n    $paren_string =\
    \ str_replace('2', '', $paren_string);\n    $paren_string = str_replace('3', '',\
    \ $paren_string);\n    $paren_string = str_replace('4', '', $paren_string);\n\
    \    $paren_string = str_replace('5', '', $paren_string);\n    $paren_string =\
    \ str_replace('6', '', $paren_string);\n    $paren_string = str_replace('7', '',\
    \ $paren_string);\n    $paren_string = str_replace('8', '', $paren_string);\n\
    \    $paren_string = str_replace('9', '', $paren_string);\n    $paren_string =\
    \ str_replace('10', '', $paren_string);\n    $paren_string = str_replace('11',\
    \ '', $paren_string);\n    $paren_string = str_replace('12', '', $paren_string);\n\
    \    $paren_string = str_replace('13', '', $paren_string);\n    $paren_string\
    \ = str_replace('14', '', $paren_string);\n    $paren_string = str_replace('15',\
    \ '', $paren_string);\n    $paren_string = str_replace('16', '', $paren_string);\n\
    \    $paren_string = str_replace('17', '', $paren_string);\n    $paren_string\
    \ = str_replace('18', '', $paren_string);\n    $paren_string = str_replace('19',\
    \ '', $paren_string);\n    $paren_string = str_replace('20', '', $paren_string);\n\
    \    $paren_string = str_replace", "  $paren_string = str_replace(\" \", \"\"\
    , $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  foreach ($paren_array\
    \ as $paren) {\n    if ($paren == \"(\") {\n      $current_depth++;\n      if\
    \ ($current_depth > $max_depth) {\n        $max_depth = $current_depth;\n    \
    \  }\n    } else {\n      $current_depth--;\n    }\n  }\n  return $max_depth;\n\
    }\n\n$paren_string = \"(()()) (()()()) ((()))\";\n$paren_array = explode(\" \"\
    , $paren_string);\nforeach ($paren_array as $paren) {\n  echo parse_nested_parens($paren)\
    \ . \"\\n\";\n}", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $curr_depth = 0;\n    foreach\
    \ ($paren_string as $paren) {\n        if ($paren == '(') {\n            $curr_depth++;\n\
    \            if ($curr_depth > $max_depth) {\n                $max_depth = $curr_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $curr_depth--;\n\
    \        }\n    }\n    return $max_depth;\n}\n\n$paren_string = '(()()) (()())\
    \ ((()))';\necho parse_nested_parens($paren_string);", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = array();\n    $paren_depth\
    \ = array();\n    $paren_depth_max = 0;\n    $paren_depth_current = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $paren_depth_current++;\n            if ($paren_depth_current\
    \ > $paren_depth_max) {\n                $paren_depth_max = $paren_depth_current;\n\
    \            }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_depth_current--;\n        }\n    }\n    return $paren_depth_max;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    return strlen($paren_string);\n}\n",
  "  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \  $paren_string = str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n  $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ') (', $paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $max_nesting = 0;\n    foreach ($paren_groups as $paren_group) {\n       \
    \ $nesting = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n   \
    \         if ($paren_group[$i] == '(') {\n                $nesting++;\n      \
    \      } else {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting) {\n                $max_nesting = $nesting;\n            }\n\
    \        }\n    }\n    return $max_nesting;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
