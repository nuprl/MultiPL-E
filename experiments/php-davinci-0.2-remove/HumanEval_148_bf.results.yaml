language: php
name: HumanEval_148_bf
results:
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 < $index2) {\n        return array_slice($planets, $index1 +\
    \ 1, $index2 - $index1 - 1);\n    } else {\n        return array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlegqwkp.php:35\n\
    Stack trace:\n#0 /tmp/tmpnlegqwkp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnlegqwkp.php\
    \ on line 35\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    if (!isset($planets_index[$planet1]) || !isset($planets_index[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_index[$planet1], $planets_index[$planet2]);\n\
    \    $end = max($planets_index[$planet1], $planets_index[$planet2]);\n    return\
    \ array_slice($planets, $start, $end - $start + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuxtxtd0.php:37\n\
    Stack trace:\n#0 /tmp/tmpbuxtxtd0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbuxtxtd0.php\
    \ on line 37\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e169dt8.php:36\n\
    Stack trace:\n#0 /tmp/tmp_e169dt8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_e169dt8.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $planets_between = [];\n    $planet1_index = array_search($planet1,\
    \ $planets);\n    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return [];\n    }\n    if\
    \ ($planet1_index < $planet2_index) {\n        for ($i = $planet1_index + 1; $i\
    \ < $planet2_index; $i++) {\n            $planets_between[] = $planets[$i];\n\
    \        }\n    } else {\n        for ($i = $planet2_index + 1; $i < $planet1_index;\
    \ $i++) {\n            $planets_between[] = $planets[$i];\n        }\n    }\n\
    \    return $planets_between;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f0u60z.php:45\n\
    Stack trace:\n#0 /tmp/tmpr4f0u60z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr4f0u60z.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n      \
    \  $planet2_index = $temp;\n    }\n    $result = [];\n    for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $pos1 =\
    \ array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return [];\n    }\n  \
    \  if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n     \
    \   $pos2 = $tmp;\n    }\n    return array_slice($planets, $pos1 + 1, $pos2 -\
    \ $pos1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzjf1yc6.php:45\n\
    Stack trace:\n#0 /tmp/tmplzjf1yc6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmplzjf1yc6.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planets_map\
    \ = array_flip($planets);\n    if (!isset($planets_map[$planet1]) || !isset($planets_map[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_map[$planet1], $planets_map[$planet2]);\n\
    \    $end = max($planets_map[$planet1], $planets_map[$planet2]);\n    return array_slice($planets,\
    \ $start + 1, $end - $start - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv82ofi3x.php:32\n\
    Stack trace:\n#0 /tmp/tmpv82ofi3x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv82ofi3x.php\
    \ on line 32\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_count\
    \ = count($planets);\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return [];\n    }\n    $result\
    \ = [];\n    if ($planet1_index < $planet2_index) {\n        for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n            $result[] = $planets[$i];\n \
    \       }\n    } else {\n        for ($i = $planet2_index + 1; $i < $planet1_index;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $pos1\
    \ = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return [];\n    }\n  \
    \  if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n     \
    \   $pos2 = $tmp;\n    }\n    return array_slice($planets, $pos1 + 1, $pos2 -\
    \ $pos1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpxy7i3v.php:36\n\
    Stack trace:\n#0 /tmp/tmpxpxy7i3v.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxpxy7i3v.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n     \
    \   'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n\
    \    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps01q59p.php:45\n\
    Stack trace:\n#0 /tmp/tmpps01q59p.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpps01q59p.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 === false || $index2 === false) {\n        return\
    \ [];\n    }\n    $result = [];\n    if ($index1 < $index2) {\n        for ($i\
    \ = $index1 + 1; $i < $index2; $i++) {\n            $result[] = $planets[$i];\n\
    \        }\n    } else {\n        for ($i = $index2 + 1; $i < $index1; $i++) {\n\
    \            $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsw1xpxxx.php:36\n\
    Stack trace:\n#0 /tmp/tmpsw1xpxxx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsw1xpxxx.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n     \
    \   'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n\
    \    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps01q59p.php:45\n\
    Stack trace:\n#0 /tmp/tmpps01q59p.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpps01q59p.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rixf6ks.php:36\n\
    Stack trace:\n#0 /tmp/tmp9rixf6ks.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9rixf6ks.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n     \
    \   'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n\
    \    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    $result = array();\n    for ($i = $p1 + 1; $i < $p2;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n      \
    \  $planet2_index = $temp;\n    }\n    return array_slice($planets, $planet1_index,\
    \ $planet2_index - $planet1_index + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_pg96zn.php:41\n\
    Stack trace:\n#0 /tmp/tmpu_pg96zn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpu_pg96zn.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    $result = [];\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1Index\
    \ = array_search($planet1, $planets);\n    $planet2Index = array_search($planet2,\
    \ $planets);\n    if ($planet1Index === false || $planet2Index === false) {\n\
    \        return [];\n    }\n    if ($planet1Index > $planet2Index) {\n       \
    \ $temp = $planet1Index;\n        $planet1Index = $planet2Index;\n        $planet2Index\
    \ = $temp;\n    }\n    $result = [];\n    for ($i = $planet1Index + 1; $i < $planet2Index;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $result\
    \ = [];\n    $start = array_search($planet1, $planets);\n    $end = array_search($planet2,\
    \ $planets);\n    if ($start === false || $end === false) {\n        return [];\n\
    \    }\n    if ($start > $end) {\n        $temp = $start;\n        $start = $end;\n\
    \        $end = $temp;\n    }\n    for ($i = $start + 1; $i < $end; $i++) {\n\
    \        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    for ($i = $planet1; $i <= $planet2; $i++) {\n    \
    \    $result[] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfm6xqsa2.php:40\n\
    Stack trace:\n#0 /tmp/tmpfm6xqsa2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfm6xqsa2.php\
    \ on line 40\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n     \
    \   'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n\
    \    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps01q59p.php:45\n\
    Stack trace:\n#0 /tmp/tmpps01q59p.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpps01q59p.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return [];\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5q6dqzk.php:45\n\
    Stack trace:\n#0 /tmp/tmpu5q6dqzk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpu5q6dqzk.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\t$planet1 = array_search($planet1,\
    \ $planets);\n\t$planet2 = array_search($planet2, $planets);\n\t$result = [];\n\
    \tif ($planet1 === false || $planet2 === false) {\n\t\treturn $result;\n\t}\n\t\
    if ($planet1 > $planet2) {\n\t\t$temp = $planet1;\n\t\t$planet1 = $planet2;\n\t\
    \t$planet2 = $temp;\n\t}\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\
    \t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1, $planet2 - $planet1 + 1);\n}\n\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqhbvcvs.php:41\n\
    Stack trace:\n#0 /tmp/tmpaqhbvcvs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpaqhbvcvs.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $pos1 =\
    \ array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return [];\n    }\n  \
    \  if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n     \
    \   $pos2 = $tmp;\n    }\n    return array_slice($planets, $pos1 + 1, $pos2 -\
    \ $pos1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzjf1yc6.php:45\n\
    Stack trace:\n#0 /tmp/tmplzjf1yc6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmplzjf1yc6.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    $result = [];\n    for ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgiehbvgu.php:41\n\
    Stack trace:\n#0 /tmp/tmpgiehbvgu.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgiehbvgu.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    $planet1_index = $planets_index[$planet1];\n  \
    \  $planet2_index = $planets_index[$planet2];\n    if ($planet1_index > $planet2_index)\
    \ {\n        $tmp = $planet1_index;\n        $planet1_index = $planet2_index;\n\
    \        $planet2_index = $tmp;\n    }\n    $result = [];\n    for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpryo57gm5.php:49\n\
    Stack trace:\n#0 /tmp/tmpryo57gm5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpryo57gm5.php\
    \ on line 49\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 = $temp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzv1xel1m.php:36\n\
    Stack trace:\n#0 /tmp/tmpzv1xel1m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzv1xel1m.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n      \
    \  $planet2_index = $temp;\n    }\n    $result = [];\n    for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    $result = [];\n    if ($p1\
    \ < $p2) {\n        for ($i = $p1 + 1; $i < $p2; $i++) {\n            $result[]\
    \ = $planets[$i];\n        }\n    } else {\n        for ($i = $p2 + 1; $i < $p1;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    $result = [];\n    if ($planet1_index < $planet2_index)\
    \ {\n        for ($i = $planet1_index + 1; $i < $planet2_index; $i++) {\n    \
    \        $result[] = $planets[$i];\n        }\n    } else {\n        for ($i =\
    \ $planet2_index + 1; $i < $planet1_index; $i++) {\n            $result[] = $planets[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 = $temp;\n\
    \    }\n    $result = [];\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planets_array\
    \ = array_flip($planets);\n    if (isset($planets_array[$planet1]) && isset($planets_array[$planet2]))\
    \ {\n        $start = $planets_array[$planet1];\n        $end = $planets_array[$planet2];\n\
    \        if ($start > $end) {\n            $temp = $start;\n            $start\
    \ = $end;\n            $end = $temp;\n        }\n        $result = [];\n     \
    \   for ($i = $start + 1; $i < $end; $i++) {\n            $result[] = $planets[$i];\n\
    \        }\n        return $result;\n    }\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1, $index2\
    \ - $index1 + 1);\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvw1hsde8.php:40\n\
    Stack trace:\n#0 /tmp/tmpvw1hsde8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvw1hsde8.php\
    \ on line 40\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    $result = [];\n    for ($i = $index1 + 1;\
    \ $i < $index2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return array();\n\
    \    }\n    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1\
    \ = $index2;\n        $index2 = $temp;\n    }\n    $result = array();\n    for\
    \ ($i = $index1 + 1; $i < $index2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $planets_index = array_flip($planets);\n    if (!isset($planets_index[$planet1])\
    \ || !isset($planets_index[$planet2])) {\n        return [];\n    }\n    $start\
    \ = min($planets_index[$planet1], $planets_index[$planet2]);\n    $end = max($planets_index[$planet1],\
    \ $planets_index[$planet2]);\n    return array_slice($planets, $start, $end -\
    \ $start + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zq__yfu.php:37\n\
    Stack trace:\n#0 /tmp/tmp5zq__yfu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5zq__yfu.php\
    \ on line 37\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    if (!isset($planets_index[$planet1]) || !isset($planets_index[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_index[$planet1], $planets_index[$planet2]);\n\
    \    $end = max($planets_index[$planet1], $planets_index[$planet2]);\n    return\
    \ array_slice($planets, $start, $end - $start + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuxtxtd0.php:37\n\
    Stack trace:\n#0 /tmp/tmpbuxtxtd0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbuxtxtd0.php\
    \ on line 37\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return array();\n\
    \    }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90qzg52a.php:36\n\
    Stack trace:\n#0 /tmp/tmp90qzg52a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp90qzg52a.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    $result = [];\n    for ($i = $index1 + 1;\
    \ $i < $index2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\
    'Mercury',\n\t\t'Venus',\n\t\t'Earth',\n\t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\
    \t\t'Uranus',\n\t\t'Neptune'\n\t);\n\t$pos1 = array_search($planet1, $planets);\n\
    \t$pos2 = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 ===\
    \ false) {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$tmp = $pos1;\n\
    \t\t$pos1 = $pos2;\n\t\t$pos2 = $tmp;\n\t}\n\treturn array_slice($planets, $pos1\
    \ + 1, $pos2 - $pos1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftfuyhqs.php:45\n\
    Stack trace:\n#0 /tmp/tmpftfuyhqs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpftfuyhqs.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planet1_index = array_search($planet1, $planets);\n    $planet2_index\
    \ = array_search($planet2, $planets);\n    if ($planet1_index === false || $planet2_index\
    \ === false) {\n        return array();\n    }\n    $result = array();\n    if\
    \ ($planet1_index < $planet2_index) {\n        for ($i = $planet1_index + 1; $i\
    \ < $planet2_index; $i++) {\n            $result[] = $planets[$i];\n        }\n\
    \    } else {\n        for ($i = $planet2_index + 1; $i < $planet1_index; $i++)\
    \ {\n            $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   $result = array();\n    if ($p1 < $p2) {\n        for ($i = $p1 + 1; $i <\
    \ $p2; $i++) {\n            $result[] = $planets[$i];\n        }\n    } else {\n\
    \        for ($i = $p2 + 1; $i < $p1; $i++) {\n            $result[] = $planets[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $pos1\
    \ = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return array();\n    }\n\
    \    if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n   \
    \     $pos2 = $tmp;\n    }\n    return array_slice($planets, $pos1 + 1, $pos2\
    \ - $pos1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ucz7zdc.php:36\n\
    Stack trace:\n#0 /tmp/tmp4ucz7zdc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4ucz7zdc.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    $result = array();\n    for ($i = $p1 + 1; $i < $p2;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return [];\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5q6dqzk.php:45\n\
    Stack trace:\n#0 /tmp/tmpu5q6dqzk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpu5q6dqzk.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$pos1\
    \ = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2, $planets);\n\
    \tif ($pos1 === false || $pos2 === false) {\n\t\treturn array();\n\t}\n\tif ($pos1\
    \ > $pos2) {\n\t\t$tmp = $pos1;\n\t\t$pos1 = $pos2;\n\t\t$pos2 = $tmp;\n\t}\n\t\
    $result = array();\n\tfor ($i = $pos1 + 1; $i < $pos2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\"\
    ,\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"\
    Neptune\"\n    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4iq2j7ty.php:45\n\
    Stack trace:\n#0 /tmp/tmp4iq2j7ty.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4iq2j7ty.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1Index\
    \ = array_search($planet1, $planets);\n    $planet2Index = array_search($planet2,\
    \ $planets);\n    if ($planet1Index === false || $planet2Index === false) {\n\
    \        return [];\n    }\n    if ($planet1Index > $planet2Index) {\n       \
    \ $temp = $planet1Index;\n        $planet1Index = $planet2Index;\n        $planet2Index\
    \ = $temp;\n    }\n    $result = [];\n    for ($i = $planet1Index + 1; $i < $planet2Index;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\
    \t\t'Venus',\n\t\t'Earth',\n\t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\
    \t\t'Neptune'\n\t];\n\t$p1 = array_search($planet1, $planets);\n\t$p2 = array_search($planet2,\
    \ $planets);\n\tif ($p1 === false || $p2 === false) {\n\t\treturn [];\n\t}\n\t\
    if ($p1 > $p2) {\n\t\t$temp = $p1;\n\t\t$p1 = $p2;\n\t\t$p2 = $temp;\n\t}\n\t\
    $result = [];\n\tfor ($i = $p1 + 1; $i < $p2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f0u60z.php:45\n\
    Stack trace:\n#0 /tmp/tmpr4f0u60z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr4f0u60z.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    $result = [];\n    if ($index1 < $index2) {\n        for ($i = $index1 +\
    \ 1; $i < $index2; $i++) {\n            $result[] = $planets[$i];\n        }\n\
    \    } else {\n        for ($i = $index2 + 1; $i < $index1; $i++) {\n        \
    \    $result[] = $planets[$i];\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $planets_to_return = [];\n    if (in_array($planet1, $planets) &&\
    \ in_array($planet2, $planets)) {\n        $planet1_index = array_search($planet1,\
    \ $planets);\n        $planet2_index = array_search($planet2, $planets);\n   \
    \     if ($planet1_index < $planet2_index) {\n            $planets_to_return =\
    \ array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index -\
    \ 1);\n        } else {\n            $planets_to_return = array_slice($planets,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n        }\n    }\n\
    \    return $planets_to_return;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7jwqcsi.php:45\n\
    Stack trace:\n#0 /tmp/tmpm7jwqcsi.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpm7jwqcsi.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsw1xpxxx.php:36\n\
    Stack trace:\n#0 /tmp/tmpsw1xpxxx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsw1xpxxx.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f0u60z.php:45\n\
    Stack trace:\n#0 /tmp/tmpr4f0u60z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr4f0u60z.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_count\
    \ = count($planets);\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    $result = [];\n \
    \   if ($planet1_index === false || $planet2_index === false) {\n        return\
    \ $result;\n    }\n    if ($planet1_index < $planet2_index) {\n        for ($i\
    \ = $planet1_index + 1; $i < $planet2_index; $i++) {\n            $result[] =\
    \ $planets[$i];\n        }\n    } else {\n        for ($i = $planet2_index + 1;\
    \ $i < $planet1_index; $i++) {\n            $result[] = $planets[$i];\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planets_map\
    \ = array_flip($planets);\n    if (!isset($planets_map[$planet1]) || !isset($planets_map[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_map[$planet1], $planets_map[$planet2]);\n\
    \    $end = max($planets_map[$planet1], $planets_map[$planet2]);\n    return array_slice($planets,\
    \ $start + 1, $end - $start - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv82ofi3x.php:32\n\
    Stack trace:\n#0 /tmp/tmpv82ofi3x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv82ofi3x.php\
    \ on line 32\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return array();\n\
    \    }\n    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1\
    \ = $index2;\n        $index2 = $temp;\n    }\n    return array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfjj9cge.php:36\n\
    Stack trace:\n#0 /tmp/tmpdfjj9cge.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdfjj9cge.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $pos1\
    \ = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return array();\n    }\n\
    \    if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n   \
    \     $pos2 = $tmp;\n    }\n    $result = array();\n    for ($i = $pos1 + 1; $i\
    \ < $pos2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1Index\
    \ = array_search($planet1, $planets);\n    $planet2Index = array_search($planet2,\
    \ $planets);\n    if ($planet1Index === false || $planet2Index === false) {\n\
    \        return [];\n    }\n    if ($planet1Index > $planet2Index) {\n       \
    \ $temp = $planet1Index;\n        $planet1Index = $planet2Index;\n        $planet2Index\
    \ = $temp;\n    }\n    return array_slice($planets, $planet1Index + 1, $planet2Index\
    \ - $planet1Index - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx07g0vu.php:36\n\
    Stack trace:\n#0 /tmp/tmpzx07g0vu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzx07g0vu.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $tmp;\n    }\n    for ($i =\
    \ $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n  \
    \  }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\"\
    ,\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"\
    Neptune\"\n    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 < $p2) {\n        return array_slice($planets, $p1 + 1, $p2\
    \ - $p1 - 1);\n    } else {\n        return array_slice($planets, $p2 + 1, $p1\
    \ - $p2 - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjgjx5ni.php:44\n\
    Stack trace:\n#0 /tmp/tmpqjgjx5ni.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqjgjx5ni.php\
    \ on line 44\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\"\
    ,\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"\
    Neptune\"\n    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4iq2j7ty.php:45\n\
    Stack trace:\n#0 /tmp/tmp4iq2j7ty.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4iq2j7ty.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    ];\n    $p1 = array_search($planet1, $planets);\n    $p2 =\
    \ array_search($planet2, $planets);\n    if ($p1 === false || $p2 === false) {\n\
    \        return [];\n    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n      \
    \  $p1 = $p2;\n        $p2 = $tmp;\n    }\n    $result = [];\n    for ($i = $p1\
    \ + 1; $i < $p2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1, $planet2 - $planet1 + 1);\n}\n\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqhbvcvs.php:41\n\
    Stack trace:\n#0 /tmp/tmpaqhbvcvs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpaqhbvcvs.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vj09yap.php:36\n\
    Stack trace:\n#0 /tmp/tmp5vj09yap.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5vj09yap.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planets_sorted\
    \ = [];\n    $planets_sorted_reverse = [];\n    $result = [];\n    $planets_sorted\
    \ = $planets;\n    sort($planets_sorted);\n    $planets_sorted_reverse = $planets_sorted;\n\
    \    rsort($planets_sorted_reverse);\n    if (in_array($planet1, $planets) &&\
    \ in_array($planet2, $planets)) {\n        if (array_search($planet1, $planets_sorted)\
    \ < array_search($planet2, $planets_sorted)) {\n            $result = array_slice($planets_sorted,\
    \ array_search($planet1, $planets_sorted), array_search($planet2, $planets_sorted)\
    \ - array_search($planet1, $planets_sorted) + 1);\n        } else {\n        \
    \    $result = array_slice($planets_sorted_reverse, array_search($planet2, $planets_sorted_reverse),\
    \ array_search($planet1, $planets_sorted_reverse) - array_search($planet2, $planets_sorted_reverse)\
    \ + 1);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1f0n84ct.php:36\n\
    Stack trace:\n#0 /tmp/tmp1f0n84ct.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1f0n84ct.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr4f0u60z.php:45\n\
    Stack trace:\n#0 /tmp/tmpr4f0u60z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpr4f0u60z.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $pos1\
    \ = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return array();\n    }\n\
    \    if ($pos1 > $pos2) {\n        $temp = $pos1;\n        $pos1 = $pos2;\n  \
    \      $pos2 = $temp;\n    }\n    $result = array();\n    for ($i = $pos1 + 1;\
    \ $i < $pos2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n\
    }\n\n$planet1 = 'Earth';\n$planet2 = 'Mars';\n$result = bf($planet1, $planet2);\n\
    print_r($result);\n\n$planet1 = 'Earth';\n$planet2 = 'Jupiter';\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\n\n$planet1 = 'Earth';\n$planet2 = 'Earth';\n\
    $result = bf($planet1, $planet2);\nprint_r($result);\n\n$planet1 = 'Earth';\n\
    $planet2 = 'Venus';\n$result = bf($planet1, $planet2);\nprint_r($result);\n\n\
    $planet1 = 'Earth';\n$planet2 = 'Mercury';\n$result = bf($planet1, $planet2);\n\
    print_r($result);\n\n$planet1 = 'Earth';\n$planet2 = 'Pluto';\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\n\n$planet1 = 'Pluto';\n$planet2 = 'Earth';\n\
    $result = bf($planet1, $planet2);\nprint_r($result);\n\n$planet1 = 'Pluto';\n\
    $planet2 = 'Pluto';\n$result = bf($planet1, $planet2);\nprint_r($result);\n\n\
    $planet1 = '\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo8acu25n.php on line 71

    '
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n     \
    \   'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n\
    \    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpps01q59p.php:45\n\
    Stack trace:\n#0 /tmp/tmpps01q59p.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpps01q59p.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return [];\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1, $p2 - $p1 + 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztu8paid.php:41\n\
    Stack trace:\n#0 /tmp/tmpztu8paid.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpztu8paid.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n      \
    \  $planet2_index = $temp;\n    }\n    return array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04r2u5xc.php:45\n\
    Stack trace:\n#0 /tmp/tmp04r2u5xc.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp04r2u5xc.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 = $temp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzv1xel1m.php:36\n\
    Stack trace:\n#0 /tmp/tmpzv1xel1m.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzv1xel1m.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1, $index2\
    \ - $index1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcho46bjp.php:41\n\
    Stack trace:\n#0 /tmp/tmpcho46bjp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcho46bjp.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_map\
    \ = array_flip($planets);\n    if (!isset($planets_map[$planet1]) || !isset($planets_map[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_map[$planet1], $planets_map[$planet2]);\n\
    \    $end = max($planets_map[$planet1], $planets_map[$planet2]);\n    return array_slice($planets,\
    \ $start, $end - $start + 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeeqpy1fw.php:37\n\
    Stack trace:\n#0 /tmp/tmpeeqpy1fw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeeqpy1fw.php\
    \ on line 37\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 =\
    \ $temp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpeynnyv.php:36\n\
    Stack trace:\n#0 /tmp/tmpmpeynnyv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmpeynnyv.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_pos\
    \ = [];\n    $result = [];\n    foreach ($planets as $key => $value) {\n     \
    \   $planets_pos[$value] = $key;\n    }\n    if (isset($planets_pos[$planet1])\
    \ && isset($planets_pos[$planet2])) {\n        $start = min($planets_pos[$planet1],\
    \ $planets_pos[$planet2]);\n        $end = max($planets_pos[$planet1], $planets_pos[$planet2]);\n\
    \        for ($i = $start + 1; $i < $end; $i++) {\n            $result[] = $planets[$i];\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1, $index2\
    \ - $index1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcho46bjp.php:41\n\
    Stack trace:\n#0 /tmp/tmpcho46bjp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcho46bjp.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $min = min($planet1, $planet2);\n    $max = max($planet1, $planet2);\n\
    \    return array_slice($planets, $min + 1, $max - $min - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_9uhfz_.php:42\n\
    Stack trace:\n#0 /tmp/tmpr_9uhfz_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr_9uhfz_.php\
    \ on line 42\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $tmp = $planet1_index;\n        $planet1_index = $planet2_index;\n       \
    \ $planet2_index = $tmp;\n    }\n    return array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9rteldv.php:45\n\
    Stack trace:\n#0 /tmp/tmpn9rteldv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpn9rteldv.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    $planet1_index = $planets_index[$planet1];\n  \
    \  $planet2_index = $planets_index[$planet2];\n    $result = [];\n    if ($planet1_index\
    \ < $planet2_index) {\n        for ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    } else {\n  \
    \      for ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n          \
    \  $result[] = $planets[$i];\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6byr4qwc.php:50\n\
    Stack trace:\n#0 /tmp/tmp6byr4qwc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6byr4qwc.php\
    \ on line 50\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\
    \t\t'Venus',\n\t\t'Earth',\n\t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\
    \t\t'Neptune'\n\t];\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2,\
    \ $planets);\n\tif ($pos1 === false || $pos2 === false) {\n\t\treturn [];\n\t\
    }\n\tif ($pos1 > $pos2) {\n\t\t$tmp = $pos1;\n\t\t$pos1 = $pos2;\n\t\t$pos2 =\
    \ $tmp;\n\t}\n\treturn array_slice($planets, $pos1, $pos2 - $pos1 + 1);\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jv_qjd0.php:41\n\
    Stack trace:\n#0 /tmp/tmp1jv_qjd0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1jv_qjd0.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuv4ejnu.php:45\n\
    Stack trace:\n#0 /tmp/tmpwuv4ejnu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwuv4ejnu.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_map\
    \ = array_flip($planets);\n    $planet1_index = $planets_map[$planet1];\n    $planet2_index\
    \ = $planets_map[$planet2];\n    if ($planet1_index === false || $planet2_index\
    \ === false) {\n        return [];\n    }\n    $planets_between = [];\n    for\
    \ ($i = $planet1_index + 1; $i < $planet2_index; $i++) {\n        $planets_between[]\
    \ = $planets[$i];\n    }\n    return $planets_between;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hxbki5b.php:42\n\
    Stack trace:\n#0 /tmp/tmp0hxbki5b.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0hxbki5b.php\
    \ on line 42\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\"\
    Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\
    \t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t);\n\t$p1 = array_search($planet1,\
    \ $planets);\n\t$p2 = array_search($planet2, $planets);\n\tif ($p1 === false ||\
    \ $p2 === false) {\n\t\treturn array();\n\t}\n\tif ($p1 > $p2) {\n\t\t$tmp = $p1;\n\
    \t\t$p1 = $p2;\n\t\t$p2 = $tmp;\n\t}\n\treturn array_slice($planets, $p1, $p2\
    \ - $p1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc69_6r3q.php:41\n\
    Stack trace:\n#0 /tmp/tmpc69_6r3q.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpc69_6r3q.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $temp;\n    }\n    for ($i =\
    \ $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n  \
    \  }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n      \
    \  $planet2_index = $temp;\n    }\n    $result = [];\n    for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    $result = [];\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $planets_sorted\
    \ = array();\n    $planets_sorted_reversed = array();\n    $planets_sorted_reversed_result\
    \ = array();\n    $result = array();\n    $result_reversed = array();\n    $result_reversed_result\
    \ = array();\n    $result_final = array();\n    $result_final_reversed = array();\n\
    \    $result_final_reversed_result = array();\n    $result_final_reversed_result_result\
    \ = array();\n    $result_final_reversed_result_result_result = array();\n   \
    \ $result_final_reversed_result_result_result_result = array();\n    $result_final_reversed_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result_result_result_result_result_result\
    \ = array();\n    $result_final_reversed_result_result_result_result_result_result_result_result\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpggzvfxuv.php on line 36

    '
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        return\
    \ [];\n    }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n     \
    \   $planet1 = $planet2;\n        $planet2 = $tmp;\n    }\n    $result = [];\n\
    \    for ($i = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    $result = [];\n    if ($index1 < $index2) {\n        for ($i = $index1 +\
    \ 1; $i < $index2; $i++) {\n            $result[] = $planets[$i];\n        }\n\
    \    } else {\n        for ($i = $index2 + 1; $i < $index1; $i++) {\n        \
    \    $result[] = $planets[$i];\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n  \
    \      \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\
    \n    ];\n    $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        return\
    \ [];\n    }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n    \
    \    $planet1 = $planet2;\n        $planet2 = $temp;\n    }\n    $result = [];\n\
    \    for ($i = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuv4ejnu.php:45\n\
    Stack trace:\n#0 /tmp/tmpwuv4ejnu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwuv4ejnu.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $temp;\n    }\n    for ($i =\
    \ $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n  \
    \  }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planets_map\
    \ = array_flip($planets);\n    if (!isset($planets_map[$planet1]) || !isset($planets_map[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_map[$planet1], $planets_map[$planet2]);\n\
    \    $end = max($planets_map[$planet1], $planets_map[$planet2]);\n    return array_slice($planets,\
    \ $start + 1, $end - $start - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv82ofi3x.php:32\n\
    Stack trace:\n#0 /tmp/tmpv82ofi3x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv82ofi3x.php\
    \ on line 32\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 = $temp;\n\
    \    }\n    $result = [];\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return array();\n\
    \    }\n    if ($index1 < $index2) {\n        return array_slice($planets, $index1\
    \ + 1, $index2 - $index1 - 1);\n    } else {\n        return array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai293tv0.php:35\n\
    Stack trace:\n#0 /tmp/tmpai293tv0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpai293tv0.php\
    \ on line 35\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 < $p2) {\n        return array_slice($planets, $p1 + 1, $p2 - $p1\
    \ - 1);\n    } else {\n        return array_slice($planets, $p2 + 1, $p1 - $p2\
    \ - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphx8g7f7d.php:35\n\
    Stack trace:\n#0 /tmp/tmphx8g7f7d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphx8g7f7d.php\
    \ on line 35\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    $result = [];\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$p1\
    \ = array_search($planet1, $planets);\n\t$p2 = array_search($planet2, $planets);\n\
    \tif ($p1 === false || $p2 === false) {\n\t\treturn array();\n\t}\n\tif ($p1 >\
    \ $p2) {\n\t\t$temp = $p1;\n\t\t$p1 = $p2;\n\t\t$p2 = $temp;\n\t}\n\t$result =\
    \ array();\n\tfor ($i = $p1 + 1; $i < $p2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    $res = array();\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n      \
    \  $res[] = $planets[$i];\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\"\
    ,\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"\
    Neptune\"\n    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    $res = array();\n    for ($i = $p1 + 1; $i < $p2; $i++)\
    \ {\n        $res[] = $planets[$i];\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\n\
    \    ];\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return [];\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1, $p2 - $p1 + 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp438_q78c.php:34\n\
    Stack trace:\n#0 /tmp/tmp438_q78c.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp438_q78c.php\
    \ on line 34\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $pos1\
    \ = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return [];\n    }\n  \
    \  if ($pos1 > $pos2) {\n        $tmp = $pos1;\n        $pos1 = $pos2;\n     \
    \   $pos2 = $tmp;\n    }\n    $result = [];\n    for ($i = $pos1 + 1; $i < $pos2;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n  $planets = [\n    'Mercury',\n\
    \    'Venus',\n    'Earth',\n    'Mars',\n    'Jupiter',\n    'Saturn',\n    'Uranus',\n\
    \    'Neptune'\n  ];\n  $planet1 = array_search($planet1, $planets);\n  $planet2\
    \ = array_search($planet2, $planets);\n  if ($planet1 === false || $planet2 ===\
    \ false) {\n    return [];\n  }\n  if ($planet1 > $planet2) {\n    $tmp = $planet1;\n\
    \    $planet1 = $planet2;\n    $planet2 = $tmp;\n  }\n  return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_rso52f.php:45\n\
    Stack trace:\n#0 /tmp/tmpz_rso52f.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpz_rso52f.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    $planet1_index = $planets_index[$planet1];\n  \
    \  $planet2_index = $planets_index[$planet2];\n    if ($planet1_index === false\
    \ || $planet2_index === false) {\n        return [];\n    }\n    $result = [];\n\
    \    if ($planet1_index < $planet2_index) {\n        for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n            $result[] = $planets[$i];\n \
    \       }\n    } else {\n        for ($i = $planet2_index + 1; $i < $planet1_index;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxf19irw.php:53\n\
    Stack trace:\n#0 /tmp/tmplxf19irw.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplxf19irw.php\
    \ on line 53\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    $planets_between = [];\n    if ($planet1_index\
    \ < $planet2_index) {\n        for ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n            $planets_between[] = $planets[$i];\n        }\n    } else\
    \ {\n        for ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n    \
    \        $planets_between[] = $planets[$i];\n        }\n    }\n    return $planets_between;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $pos1 =\
    \ array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return [];\n    }\n  \
    \  $result = [];\n    if ($pos1 < $pos2) {\n        for ($i = $pos1 + 1; $i <\
    \ $pos2; $i++) {\n            $result[] = $planets[$i];\n        }\n    } else\
    \ {\n        for ($i = $pos2 + 1; $i < $pos1; $i++) {\n            $result[] =\
    \ $planets[$i];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    $result = [];\n    if ($index1 < $index2) {\n        for ($i = $index1 +\
    \ 1; $i < $index2; $i++) {\n            $result[] = $planets[$i];\n        }\n\
    \    } else {\n        for ($i = $index2 + 1; $i < $index1; $i++) {\n        \
    \    $result[] = $planets[$i];\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e169dt8.php:36\n\
    Stack trace:\n#0 /tmp/tmp_e169dt8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_e169dt8.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwuv4ejnu.php:45\n\
    Stack trace:\n#0 /tmp/tmpwuv4ejnu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwuv4ejnu.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    $min = min($p1, $p2);\n\
    \    $max = max($p1, $p2);\n    return array_slice($planets, $min + 1, $max -\
    \ $min - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ayybe61.php:42\n\
    Stack trace:\n#0 /tmp/tmp6ayybe61.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp6ayybe61.php\
    \ on line 42\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n\t$p1 = array_search($planet1, $planets);\n\t$p2 = array_search($planet2,\
    \ $planets);\n\tif ($p1 === false || $p2 === false) {\n\t\treturn array();\n\t\
    }\n\t$result = array();\n\tif ($p1 < $p2) {\n\t\tfor ($i = $p1 + 1; $i < $p2;\
    \ $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $p2\
    \ + 1; $i < $p1; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1, $index2\
    \ - $index1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcho46bjp.php:41\n\
    Stack trace:\n#0 /tmp/tmpcho46bjp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcho46bjp.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    $result = array();\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n   \
    \     $result[] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $temp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $temp;\n    }\n    $result = [];\n    for ($i\
    \ = $planet1 + 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 < $index2) {\n        return array_slice($planets, $index1 +\
    \ 1, $index2 - $index1 - 1);\n    } else {\n        return array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllg383lj.php:44\n\
    Stack trace:\n#0 /tmp/tmpllg383lj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpllg383lj.php\
    \ on line 44\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$pos1\
    \ = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2, $planets);\n\
    \tif ($pos1 === false || $pos2 === false) {\n\t\treturn array();\n\t}\n\tif ($pos1\
    \ > $pos2) {\n\t\t$tmp = $pos1;\n\t\t$pos1 = $pos2;\n\t\t$pos2 = $tmp;\n\t}\n\t\
    return array_slice($planets, $pos1 + 1, $pos2 - $pos1 - 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jhd4sf3.php:36\n\
    Stack trace:\n#0 /tmp/tmp8jhd4sf3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8jhd4sf3.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $temp = $p1;\n        $p1 = $p2;\n        $p2 =\
    \ $temp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpeynnyv.php:36\n\
    Stack trace:\n#0 /tmp/tmpmpeynnyv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmpeynnyv.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1, $index2\
    \ - $index1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcho46bjp.php:41\n\
    Stack trace:\n#0 /tmp/tmpcho46bjp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcho46bjp.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    $planet1_index = $planets_index[$planet1];\n  \
    \  $planet2_index = $planets_index[$planet2];\n    $result = [];\n    if ($planet1_index\
    \ > $planet2_index) {\n        $temp = $planet1_index;\n        $planet1_index\
    \ = $planet2_index;\n        $planet2_index = $temp;\n    }\n    for ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n        $result[] = $planets[$i];\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4l3ztt8.php:49\n\
    Stack trace:\n#0 /tmp/tmpz4l3ztt8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpz4l3ztt8.php\
    \ on line 49\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$p1\
    \ = array_search($planet1, $planets);\n\t$p2 = array_search($planet2, $planets);\n\
    \tif ($p1 === false || $p2 === false) {\n\t\treturn array();\n\t}\n\tif ($p1 >\
    \ $p2) {\n\t\t$temp = $p1;\n\t\t$p1 = $p2;\n\t\t$p2 = $temp;\n\t}\n\treturn array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql4bctth.php:36\n\
    Stack trace:\n#0 /tmp/tmpql4bctth.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpql4bctth.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 === false || $index2 === false) {\n        return\
    \ array();\n    }\n    if ($index1 > $index2) {\n        $temp = $index1;\n  \
    \      $index1 = $index2;\n        $index2 = $temp;\n    }\n    $result = array();\n\
    \    for ($i = $index1 + 1; $i < $index2; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $planets_index\
    \ = array_flip($planets);\n    $planet1_index = $planets_index[$planet1];\n  \
    \  $planet2_index = $planets_index[$planet2];\n    if ($planet1_index === false\
    \ || $planet2_index === false) {\n        return [];\n    }\n    if ($planet1_index\
    \ < $planet2_index) {\n        return array_slice($planets, $planet1_index + 1,\
    \ $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($planets,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98tkr5lt.php:36\n\
    Stack trace:\n#0 /tmp/tmp98tkr5lt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp98tkr5lt.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $result\
    \ = [];\n    $planet1Index = array_search($planet1, $planets);\n    $planet2Index\
    \ = array_search($planet2, $planets);\n    if ($planet1Index === false || $planet2Index\
    \ === false) {\n        return [];\n    }\n    if ($planet1Index > $planet2Index)\
    \ {\n        $tmp = $planet1Index;\n        $planet1Index = $planet2Index;\n \
    \       $planet2Index = $tmp;\n    }\n    for ($i = $planet1Index + 1; $i < $planet2Index;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n  $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n  $pos1\
    \ = array_search($planet1, $planets);\n  $pos2 = array_search($planet2, $planets);\n\
    \  if ($pos1 === false || $pos2 === false) {\n    return array();\n  }\n  if ($pos1\
    \ > $pos2) {\n    $tmp = $pos1;\n    $pos1 = $pos2;\n    $pos2 = $tmp;\n  }\n\
    \  return array_slice($planets, $pos1 + 1, $pos2 - $pos1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzv4idhgu.php:36\n\
    Stack trace:\n#0 /tmp/tmpzv4idhgu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzv4idhgu.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n\t$planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn [];\n\t}\n\tif ($index1 > $index2)\
    \ {\n\t\t$tmp = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $tmp;\n\t}\n\t\
    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg04g767k.php:36\n\
    Stack trace:\n#0 /tmp/tmpg04g767k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg04g767k.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return array();\n    }\n \
    \   if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    $result = array();\n    for ($i = $p1 + 1; $i < $p2; $i++) {\n   \
    \     $result[] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_count\
    \ = count($planets);\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return [];\n    }\n    if\
    \ ($planet1_index > $planet2_index) {\n        $tmp = $planet1_index;\n      \
    \  $planet1_index = $planet2_index;\n        $planet2_index = $tmp;\n    }\n \
    \   $result = [];\n    for ($i = $planet1_index + 1; $i < $planet2_index; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return [];\n    }\n    if ($planet1_index > $planet2_index) {\n     \
    \   $temp = $planet1_index;\n        $planet1_index = $planet2_index;\n      \
    \  $planet2_index = $temp;\n    }\n    return array_slice($planets, $planet1_index,\
    \ $planet2_index - $planet1_index + 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_pg96zn.php:41\n\
    Stack trace:\n#0 /tmp/tmpu_pg96zn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpu_pg96zn.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    $result = [];\n    if ($planet1 < $planet2) {\n        for ($i = $planet1\
    \ + 1; $i < $planet2; $i++) {\n            $result[] = $planets[$i];\n       \
    \ }\n    } else {\n        for ($i = $planet2 + 1; $i < $planet1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1, $p2 - $p1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphn8pl977.php:41\n\
    Stack trace:\n#0 /tmp/tmphn8pl977.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphn8pl977.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planets_index\
    \ = array_flip($planets);\n    if (!isset($planets_index[$planet1]) || !isset($planets_index[$planet2]))\
    \ {\n        return [];\n    }\n    $start = min($planets_index[$planet1], $planets_index[$planet2]);\n\
    \    $end = max($planets_index[$planet1], $planets_index[$planet2]);\n    $result\
    \ = [];\n    for ($i = $start + 1; $i < $end; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $tmp;\n    }\n    return array_slice($planets, $index1, $index2\
    \ - $index1 + 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcho46bjp.php:41\n\
    Stack trace:\n#0 /tmp/tmpcho46bjp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcho46bjp.php\
    \ on line 41\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjs0m6mt3.php:45\n\
    Stack trace:\n#0 /tmp/tmpjs0m6mt3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjs0m6mt3.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\n  \
    \      'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n     \
    \   'Jupiter',\n        'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n\
    \    $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        return\
    \ array();\n    }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n\
    \        $planet1 = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco78ddq2.php:45\n\
    Stack trace:\n#0 /tmp/tmpco78ddq2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpco78ddq2.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planet1\
    \ = array_search($planet1, $planets);\n    $planet2 = array_search($planet2, $planets);\n\
    \    if ($planet1 === false || $planet2 === false) {\n        return [];\n   \
    \ }\n    if ($planet1 > $planet2) {\n        $tmp = $planet1;\n        $planet1\
    \ = $planet2;\n        $planet2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2ccncjz.php:45\n\
    Stack trace:\n#0 /tmp/tmpa2ccncjz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa2ccncjz.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array('Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n    $planets_index\
    \ = array_flip($planets);\n    if (!isset($planets_index[$planet1]) || !isset($planets_index[$planet2]))\
    \ {\n        return array();\n    }\n    $start = min($planets_index[$planet1],\
    \ $planets_index[$planet2]);\n    $end = max($planets_index[$planet1], $planets_index[$planet2]);\n\
    \    return array_slice($planets, $start + 1, $end - $start - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgewkak1h.php:32\n\
    Stack trace:\n#0 /tmp/tmpgewkak1h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgewkak1h.php\
    \ on line 32\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $pos1\
    \ = array_search($planet1, $planets);\n    $pos2 = array_search($planet2, $planets);\n\
    \    if ($pos1 === false || $pos2 === false) {\n        return [];\n    }\n  \
    \  if ($pos1 > $pos2) {\n        $temp = $pos1;\n        $pos1 = $pos2;\n    \
    \    $pos2 = $temp;\n    }\n    return array_slice($planets, $pos1 + 1, $pos2\
    \ - $pos1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi04a96it.php:36\n\
    Stack trace:\n#0 /tmp/tmpi04a96it.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi04a96it.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2,\
    \ $planets);\n    if ($p1 === false || $p2 === false) {\n        return array();\n\
    \    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n      \
    \  $p2 = $tmp;\n    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9rixf6ks.php:36\n\
    Stack trace:\n#0 /tmp/tmp9rixf6ks.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9rixf6ks.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $index1\
    \ = array_search($planet1, $planets);\n    $index2 = array_search($planet2, $planets);\n\
    \    if ($index1 === false || $index2 === false) {\n        return [];\n    }\n\
    \    if ($index1 > $index2) {\n        $temp = $index1;\n        $index1 = $index2;\n\
    \        $index2 = $temp;\n    }\n    return array_slice($planets, $index1 + 1,\
    \ $index2 - $index1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e169dt8.php:36\n\
    Stack trace:\n#0 /tmp/tmp_e169dt8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_e169dt8.php\
    \ on line 36\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = [\n       \
    \ 'Mercury',\n        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n\
    \        'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    if ($p1 === false\
    \ || $p2 === false) {\n        return [];\n    }\n    if ($p1 > $p2) {\n     \
    \   $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n    }\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1plfqjzb.php:45\n\
    Stack trace:\n#0 /tmp/tmp1plfqjzb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1plfqjzb.php\
    \ on line 45\n"
  timestamp: 1659730703
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\nfunction bf($planet1, $planet2) {\n    $planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    $p1\
    \ = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    }\n    if\
    \ ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n        $p2 = $tmp;\n\
    \    }\n    return array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3a1qb_9.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3a1qb_9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3a1qb_9.php\
    \ on line 36\n"
  timestamp: 1659730703
