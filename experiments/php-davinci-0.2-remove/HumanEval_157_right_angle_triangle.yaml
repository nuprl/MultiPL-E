name: HumanEval_157_right_angle_triangle
language: php
prompt: "<?php\n// Given the lengths of the three sides of a triangle. Return True\
  \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\nfunction right_angle_triangle($a, $b, $c) {\n"
tests: "function candidate(...$args) {\n    return right_angle_triangle(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(3, 4, 5) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 2, 3) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 6, 8) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 2) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 24, 25) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(10, 5, 7) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 12, 13) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(15, 8, 17) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(48, 55, 73) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1, 1, 1) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 2, 10) !== false) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $sides = array($a, $b, $c);\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0]\
    \ * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 ==\
    \ $sides[2] ** 2;\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"; // True\n\
    echo right_angle_triangle(1, 2, 3) . \"\\n\"; // False\necho right_angle_triangle(1,\
    \ 1, 1) . \"\\n\"; // False\necho right_angle_triangle(3, 4, 6) . \"\\n\"; //\
    \ False\necho right_angle_triangle(5, 12, 13) . \"\\n\"; // True\necho right_angle_triangle(5,\
    \ 12, 14) . \"\\n\"; // False\necho right_angle_triangle(5, 12, 15) . \"\\n\"\
    ; // False\necho right_angle_triangle(5, 12, 16) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 12, 17) . \"\\n\"; // False\necho right_angle_triangle(5, 12, 18) . \"\\n\"\
    ; // False\necho right_angle_triangle(5, 12, 19) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 12, 20) . \"\\n\"; // False\necho right_angle_triangle(5, 12, 21) . \"\\n\"\
    ; // False\necho right_angle_triangle(5, 12, 22) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 12, 23) . \"\\n\"; // False\necho right_angle_triangle(5, 12, 24) . \"\\n\"\
    ; // False\necho right_angle_triangle(5, 12, 25) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 12, 26) . \"\\n\"; // False\necho right_angle_triangle(5, 12, 27) . \"\\n\"\
    ; // False\necho right_angle_triangle(5, 12, 28) . \"\\n\"; // False\necho right_angle_triangle(5,\
    \ 12, 29) . \"\\n\"; // False\necho right_angle_triangle(5, 12, 30)", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 ==\
    \ $sides[2] ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    if ($a == 0 ||\
    \ $b == 0 || $c == 0) {\n        return false;\n    }\n    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 = $sides[1];\n\
    \    $cathetus2 = $sides[0];\n    return $hypotenuse ** 2 == $cathetus1 ** 2 +\
    \ $cathetus2 ** 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n   \
    \ return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1\
    \ = $sides[1];\n  $cathetus2 = $sides[0];\n  $hypotenuse_squared = pow($hypotenuse,\
    \ 2);\n  $cathetus1_squared = pow($cathetus1, 2);\n  $cathetus2_squared = pow($cathetus2,\
    \ 2);\n  $sum_cathetus_squared = $cathetus1_squared + $cathetus2_squared;\n  if\
    \ ($hypotenuse_squared == $sum_cathetus_squared) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 5, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(6, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 4) . \"\\n\";\necho right_angle_triangle(4, 6, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 6) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  // Write your code here\n\
    \  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n  if ($a == $b\
    \ && $b == $c) {\n    return false;\n  }\n  if ($a == $b || $b == $c || $a ==\
    \ $c) {\n    return false;\n  }\n  if ($a > $b && $a > $c) {\n    if ($a * $a\
    \ == $b * $b + $c * $c) {\n      return true;\n    }\n  }\n  if ($b > $a && $b\
    \ > $c) {\n    if ($b * $b == $a * $a + $c * $c) {\n      return true;\n    }\n\
    \  }\n  if ($c > $a && $c > $b) {\n    if ($c * $c == $a * $a + $b * $b) {\n \
    \     return true;\n    }\n  }\n  return false;\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(1,\
    \ 1, 1) . \"\\n\";\necho right_angle_triangle(1, 1, 2) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 1) . \"\\n\";\necho right_angle_triangle(2, 1, 1) . \"\\n\";\necho right_angle_triangle(1,\
    \ 2, 3) . \"\\n\";\necho right_angle_triangle(1, 3, 2) . \"\\n\";\necho right_angle_triangle(2,\
    \ 3, 1) . \"\\n\";\necho right_angle_triangle(3, 1, 2) . \"\\n\";\necho right_angle_triangle(3,\
    \ 2, 1) . \"\\n\";\necho right_angle_triangle(1, 3, 4) . \"\\n\";\necho right_angle_triangle(1,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 1, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 1) . \"\\n\";\necho right_angle_triangle(4, 1, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 1) . \"\\n\";\necho right_angle_triangle(1, 4, 5) . \"\\n\";\necho right_angle_triangle(1,\
    \ 5, 4) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a == 0 || $b ==\
    \ 0 || $c == 0) {\n        return false;\n    }\n    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 = $sides[1];\n\
    \    $cathetus2 = $sides[0];\n    return $hypotenuse ** 2 == $cathetus1 ** 2 +\
    \ $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $arr =\
    \ [$a, $b, $c];\n  sort($arr);\n  return $arr[0] ** 2 + $arr[1] ** 2 == $arr[2]\
    \ ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $hypotenuse = max($a,\
    \ $b, $c);\n    $side1 = min($a, $b, $c);\n    $side2 = ($a + $b + $c) - $hypotenuse\
    \ - $side1;\n    return $hypotenuse * $hypotenuse == $side1 * $side1 + $side2\
    \ * $side2;\n}", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse =\
    \ $sides[2];\n    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n    return\
    \ $hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "    // your code\
    \ here\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = array_pop($sides);\n\
    \  $sum_of_squares = array_reduce($sides, function($sum, $side) {\n    return\
    \ $sum + pow($side, 2);\n  }, 0);\n  return pow($hypotenuse, 2) == $sum_of_squares;\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";\necho right_angle_triangle(6,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 4, 7) . \"\\n\";\necho right_angle_triangle(3,\
    \ 7, 4) . \"\\n\";\necho right_angle_triangle(7, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 8) . \"\\n\";\necho right_angle_triangle(3, 8, 4) . \"\\n\";\necho right_angle_triangle(8,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 4, 9) . \"\\n\";\necho right_angle_triangle(3,\
    \ 9, 4) . \"\\n\";\necho right_angle_triangle(9, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 10) . \"\\n\";\necho right_angle_triangle(3, 10, 4) . \"\\n\";\necho right_angle_triangle(10,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 4, 11) . \"\\n\";\necho right_angle_triangle(3,\
    \ 11, 4) . \"\\n\";\necho right_angle_triangle(11, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 12) . \"\\n\";\necho right_angle_triangle(3, 12, 4) . \"\\n\";\necho right_angle_triangle(12,\
    \ 3, 4) . \"\\", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] ** 2\
    \ + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides = [$a, $b, $c];\n   \
    \ sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n\
    \    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n\
    \    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n    return $hypotenuse\
    \ ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2]\
    \ * $sides[2]) {\n    return true;\n  }\n  return false;\n}\n", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\n", "    if ($a > 0 && $b > 0 && $c > 0) {\n        if\
    \ ($a == sqrt(pow($b, 2) + pow($c, 2))) {\n            return true;\n        }\
    \ elseif ($b == sqrt(pow($a, 2) + pow($c, 2))) {\n            return true;\n \
    \       } elseif ($c == sqrt(pow($a, 2) + pow($b, 2))) {\n            return true;\n\
    \        } else {\n            return false;\n        }\n    } else {\n      \
    \  return false;\n    }\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(6, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 4) . \"\\n\";\necho right_angle_triangle(4, 6, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 6) . \"\\n\";\necho right_angle_triangle(3, 4, 7) . \"\\n\";\necho right_angle_triangle(7,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(7, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 7, 4) . \"\\n\";\necho right_angle_triangle(4, 7, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 7) . \"\\n\";\necho right_angle_triangle(3, 4, 8) . \"\\n\";\necho right_angle_triangle(8,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(8, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 8, 4) . \"\\n\";\necho right_angle_triangle(4, 8, 3) . \"\\n\";", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 5, 5) . \"\\n\";\necho right_angle_triangle(5, 5, 4) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 4) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 4) . \"\\n\";\necho right_angle_triangle(3, 3, 5) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(5, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 4, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 2) . \"\\n\";\necho right_angle_triangle(3, 2, 3) . \"\\n\";\necho right_angle_triangle(2,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(2, 2, 3) . \"\\", "  if ($a == 0\
    \ || $b == 0 || $c == 0) {\n    return false;\n  }\n  $hypotenuse = max($a, $b,\
    \ $c);\n  $side1 = min($a, $b, $c);\n  $side2 = ($a + $b + $c) - $hypotenuse -\
    \ $side1;\n  if ($hypotenuse ** 2 == $side1 ** 2 + $side2 ** 2) {\n    return\
    \ true;\n  }\n  return false;\n}\n", "    $sides = array($a, $b, $c);\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n \
    \       return false;\n    }\n    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2])\
    \ {\n        return true;\n    }\n    return false;\n}\n", "  $sides = [$a, $b,\
    \ $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2]\
    \ ** 2;\n}\n", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n\
    \  $sides = [$a, $b, $c];\n  sort($sides);\n  if ($sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1] == $sides[2] * $sides[2]) {\n    return true;\n  }\n  return false;\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    if ($sides[0] * $sides[0]\
    \ + $sides[1] * $sides[1] == $sides[2] * $sides[2]) {\n        return true;\n\
    \    }\n    return false;\n}\n\necho right_angle_triangle(3, 4, 5) . PHP_EOL;\n\
    echo right_angle_triangle(3, 4, 6) . PHP_EOL;\necho right_angle_triangle(5, 3,\
    \ 4) . PHP_EOL;\necho right_angle_triangle(5, 12, 13) . PHP_EOL;\necho right_angle_triangle(5,\
    \ 13, 12) . PHP_EOL;\necho right_angle_triangle(12, 5, 13) . PHP_EOL;\necho right_angle_triangle(12,\
    \ 13, 5) . PHP_EOL;\necho right_angle_triangle(13, 5, 12) . PHP_EOL;\necho right_angle_triangle(13,\
    \ 12, 5) . PHP_EOL;\necho right_angle_triangle(3, 4, 7) . PHP_EOL;\necho right_angle_triangle(3,\
    \ 7, 4) . PHP_EOL;\necho right_angle_triangle(7, 3, 4) . PHP_EOL;\necho right_angle_triangle(7,\
    \ 4, 3) . PHP_EOL;\necho right_angle_triangle(4, 3, 7) . PHP_EOL;\necho right_angle_triangle(4,\
    \ 7, 3) . PHP_EOL;\necho right_angle_triangle(5, 12, 14) . PHP_EOL;\necho right_angle_triangle(5,\
    \ 14, 12) . PHP_EOL;\necho right_angle_triangle(12, 5, 14) . PHP_EOL;\necho right_angle_triangle(12,\
    \ 14, 5) . PHP_EOL;\necho right_angle_triangle(14, 5, 12) . PHP_EOL;\necho right_angle_triangle",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1 =\
    \ $sides[1];\n  $cathetus2 = $sides[0];\n  $hypotenuseSquared = pow($hypotenuse,\
    \ 2);\n  $cathetus1Squared = pow($cathetus1, 2);\n  $cathetus2Squared = pow($cathetus2,\
    \ 2);\n  if ($hypotenuseSquared == $cathetus1Squared + $cathetus2Squared) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2]\
    \ ** 2;\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 7) . \"\\n\";\necho right_angle_triangle(3, 4, 8) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 9) . \"\\n\";\necho right_angle_triangle(3, 4, 10) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 11) . \"\\n\";\necho right_angle_triangle(3, 4, 12) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 13) . \"\\n\";\necho right_angle_triangle(3, 4, 14) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 15) . \"\\n\";\necho right_angle_triangle(3, 4, 16) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 17) . \"\\n\";\necho right_angle_triangle(3, 4, 18) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 19) . \"\\n\";\necho right_angle_triangle(3, 4, 20) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 21) . \"\\n\";\necho right_angle_triangle(3, 4, 22) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 23) . \"\\n\";\necho right_angle_triangle(3, 4, 24) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 25) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    if ($a == 0 || $b == 0\
    \ || $c == 0) {\n        return false;\n    }\n    $hypotenuse = max($a, $b, $c);\n\
    \    $other_sides = array_diff([$a, $b, $c], [$hypotenuse]);\n    $sum_of_other_sides\
    \ = array_sum($other_sides);\n    return $hypotenuse ** 2 == $sum_of_other_sides\
    \ ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  if ($a == 0 || $b == 0 ||\
    \ $c == 0) {\n    return false;\n  }\n  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  $hypotenuse = $sides[2];\n  $side1 = $sides[0];\n  $side2 = $sides[1];\n  if\
    \ ($hypotenuse ** 2 == $side1 ** 2 + $side2 ** 2) {\n    return true;\n  }\n \
    \ return false;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return\
    \ pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a\
    \ == 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n    if ($a == $b\
    \ && $b == $c) {\n        return false;\n    }\n    if ($a > $b && $a > $c) {\n\
    \        if ($a * $a == $b * $b + $c * $c) {\n            return true;\n     \
    \   }\n    }\n    if ($b > $a && $b > $c) {\n        if ($b * $b == $a * $a +\
    \ $c * $c) {\n            return true;\n        }\n    }\n    if ($c > $a && $c\
    \ > $b) {\n        if ($c * $c == $a * $a + $b * $b) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $adjacent = $sides[1];\n\
    \  $opposite = $sides[0];\n  if ($hypotenuse ** 2 == $adjacent ** 2 + $opposite\
    \ ** 2) {\n    return true;\n  }\n  return false;\n}\n", "  $sides = [$a, $b,\
    \ $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a > 0 && $b >\
    \ 0 && $c > 0) {\n        if ($a == sqrt(pow($b, 2) + pow($c, 2))) {\n       \
    \     return true;\n        } elseif ($b == sqrt(pow($a, 2) + pow($c, 2))) {\n\
    \            return true;\n        } elseif ($c == sqrt(pow($a, 2) + pow($b, 2)))\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    } else {\n        return false;\n    }\n}\n", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2]\
    \ ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";\necho right_angle_triangle(6,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(4, 6, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 6) . \"\\n\";\necho right_angle_triangle(3, 5, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(5, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 5, 5) . \"\\n\";\necho right_angle_triangle(5, 4, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(5, 6, 4) . \"\\n\";\necho right_angle_triangle(6,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(4, 6, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 6) . \"\\n\";\necho right_angle_triangle(6, 5, 5) . \"\\", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) ==\
    \ pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho\
    \ right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4, 5, 3)\
    \ . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(6, 4, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";\necho right_angle_triangle(6,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(4, 3, 6) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 5) . \"\\n\";\necho right_angle_triangle(6, 3, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(3, 5, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(5, 3, 6) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1\
    \ = $sides[1];\n    $cathetus2 = $sides[0];\n    return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \   $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "    if ($a == 90 || $b == 90 || $c == 90) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1]\
    \ ** 2 == $sides[2] ** 2;\n}\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n \
    \       return false;\n    }\n    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2])\
    \ {\n        return true;\n    }\n    return false;\n}\n", "    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2)\
    \ == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return $sides[0] ** 2 + $sides[1] **\
    \ 2 == $sides[2] ** 2;\n}\n", "    if ($a > 0 && $b > 0 && $c > 0) {\n       \
    \ if ($a == sqrt(pow($b, 2) + pow($c, 2))) {\n            return true;\n     \
    \   } elseif ($b == sqrt(pow($a, 2) + pow($c, 2))) {\n            return true;\n\
    \        } elseif ($c == sqrt(pow($a, 2) + pow($b, 2))) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    } else {\n\
    \        return false;\n    }\n}\n", "    if(($a*$a + $b*$b) == $c*$c) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho\
    \ right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3)\
    \ . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(6, 4, 3) . \"\\n\";\necho right_angle_triangle(6,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 6) . \"\\n\";", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}", "  $sides\
    \ = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $arr = [$a, $b, $c];\n  sort($arr);\n  if ($arr[0] * $arr[0] + $arr[1] * $arr[1]\
    \ == $arr[2] * $arr[2]) {\n    return true;\n  }\n  return false;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5);\necho \"\\n\";\necho right_angle_triangle(3, 4, 6);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 7);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 8);\necho \"\\n\";\necho right_angle_triangle(3, 4, 9);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 10);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 11);\necho \"\\n\";\necho right_angle_triangle(3, 4, 12);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 13);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 14);\necho \"\\n\";\necho right_angle_triangle(3, 4, 15);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 16);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 17);\necho \"\\n\";\necho right_angle_triangle(3, 4, 18);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 19);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 20);\necho \"\\n\";\necho right_angle_triangle(3, 4, 21);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 22);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 23);\necho \"\\n\";\necho right_angle_triangle(3, 4, 24);\necho \"\\n\";\n\
    echo right_angle_triangle(3, 4, 25);\necho \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 26);\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 5, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(6, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";", "    if ($a\
    \ > 0 && $b > 0 && $c > 0) {\n        if ($a == sqrt(pow($b, 2) + pow($c, 2)))\
    \ {\n            return true;\n        } elseif ($b == sqrt(pow($a, 2) + pow($c,\
    \ 2))) {\n            return true;\n        } elseif ($c == sqrt(pow($a, 2) +\
    \ pow($b, 2))) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    } else {\n        return false;\n    }\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 7) . \"\\n\";\necho right_angle_triangle(3, 4, 8) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 9) . \"\\n\";\necho right_angle_triangle(3, 4, 10) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 11) . \"\\n\";\necho right_angle_triangle(3, 4, 12) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 13) . \"\\n\";\necho right_angle_triangle(3, 4, 14) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 15) . \"\\n\";\necho right_angle_triangle(3, 4, 16) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 17) . \"\\n\";\necho right_angle_triangle(3, 4, 18) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 19) . \"\\n\";\necho right_angle_triangle(3, 4, 20) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 21) . \"\\n\";\necho right_angle_triangle(3, 4, 22) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 23) . \"\\n\";\necho right_angle_triangle(3, 4, 24) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 25) . \"\\n\";\necho right_angle_triangle(3, 4, 26) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 27) . \"\\n\";\necho right_angle_triangle(3, 4, 28) . \"\\", "  $sides =\
    \ [$a, $b, $c];\n  sort($sides);\n  return $sides[0] * $sides[0] + $sides[1] *\
    \ $sides[1] == $sides[2] * $sides[2];\n}\n", "  if ($a == 0 || $b == 0 || $c ==\
    \ 0) {\n    return false;\n  }\n  $sides = [$a, $b, $c];\n  sort($sides);\n  if\
    \ ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2]) {\n\
    \    return true;\n  }\n  return false;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1 = $sides[1];\n\
    \  $cathetus2 = $sides[0];\n  if ($hypotenuse * $hypotenuse == $cathetus1 * $cathetus1\
    \ + $cathetus2 * $cathetus2) {\n    return true;\n  }\n  return false;\n}\n",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    if($a\
    \ == 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 =\
    \ $sides[1];\n    $cathetus2 = $sides[0];\n    if($hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2) {\n        return true;\n    }\n    return false;\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n\
    \  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n  $hypotenuse2 = pow($hypotenuse,\
    \ 2);\n  $cathetus12 = pow($cathetus1, 2);\n  $cathetus22 = pow($cathetus2, 2);\n\
    \  if ($hypotenuse2 == $cathetus12 + $cathetus22) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides\
    \ = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  $hypotenuse = $sides[2];\n  $cathetus1 = $sides[1];\n  $cathetus2 = $sides[0];\n\
    \  if ($hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\necho right_angle_triangle(3, 4, 5) .\
    \ PHP_EOL; // True\necho right_angle_triangle(4, 5, 3) . PHP_EOL; // True\necho\
    \ right_angle_triangle(5, 3, 4) . PHP_EOL; // True\necho right_angle_triangle(3,\
    \ 5, 4) . PHP_EOL; // True\necho right_angle_triangle(4, 3, 5) . PHP_EOL; // True\n\
    echo right_angle_triangle(5, 4, 3) . PHP_EOL; // True\necho right_angle_triangle(3,\
    \ 3, 3) . PHP_EOL; // False\necho right_angle_triangle(3, 4, 6) . PHP_EOL; //\
    \ False\necho right_angle_triangle(6, 4, 3) . PHP_EOL; // False\necho right_angle_triangle(3,\
    \ 6, 4) . PHP_EOL; // False\necho right_angle_triangle(4, 6, 3) . PHP_EOL; //\
    \ False\necho right_angle_triangle(6, 3, 4) . PHP_EOL; // False\necho right_angle_triangle(3,\
    \ 4, 7) . PHP_EOL; // False\necho right_angle_triangle(7, 4, 3) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 7, 4) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 7, 3) . PHP_EOL; // False\necho right_angle_triangle(7, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_tri", "  $sides = [$a, $b, $c];\n  sort($sides);\n \
    \ return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    if ($sides[0] ** 2 +\
    \ $sides[1] ** 2 == $sides[2] ** 2) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    $arr = [$a, $b, $c];\n\
    \    sort($arr);\n    return pow($arr[0], 2) + pow($arr[1], 2) == pow($arr[2],\
    \ 2);\n}", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a == 0 || $b ==\
    \ 0 || $c == 0) {\n        return false;\n    }\n    $max = max($a, $b, $c);\n\
    \    $sum = $a + $b + $c;\n    if ($max == $a) {\n        return $a * $a == $b\
    \ * $b + $c * $c;\n    } else if ($max == $b) {\n        return $b * $b == $a\
    \ * $a + $c * $c;\n    } else {\n        return $c * $c == $a * $a + $b * $b;\n\
    \    }\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  if ($a == 0 || $b == 0 ||\
    \ $c == 0) {\n    return false;\n  }\n  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  $hypotenuse = array_pop($sides);\n  $cathetus1 = array_pop($sides);\n  $cathetus2\
    \ = array_pop($sides);\n  if ($hypotenuse * $hypotenuse == $cathetus1 * $cathetus1\
    \ + $cathetus2 * $cathetus2) {\n    return true;\n  }\n  return false;\n}\n",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    if ($sides[0] * $sides[0] +\
    \ $sides[1] * $sides[1] == $sides[2] * $sides[2]) {\n        return true;\n  \
    \  }\n    return false;\n}\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n   \
    \     return False;\n    }\n    $sides = array($a, $b, $c);\n    sort($sides);\n\
    \    $hypotenuse = $sides[2];\n    $leg1 = $sides[0];\n    $leg2 = $sides[1];\n\
    \    if ($hypotenuse * $hypotenuse == $leg1 * $leg1 + $leg2 * $leg2) {\n     \
    \   return True;\n    }\n    return False;\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $arr = [$a, $b, $c];\n\
    \  sort($arr);\n  return pow($arr[0], 2) + pow($arr[1], 2) == pow($arr[2], 2);\n\
    }\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n\
    \    $hypotenuse = max($a, $b, $c);\n    $cathetus1 = min($a, $b, $c);\n    $cathetus2\
    \ = $a + $b + $c - $hypotenuse - $cathetus1;\n    return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}\n", "  if ($a == 0 || $b == 0 || $c == 0) {\n   \
    \ return false;\n  }\n  if ($a == $b && $b == $c) {\n    return false;\n  }\n\
    \  $max = max($a, $b, $c);\n  $min = min($a, $b, $c);\n  $mid = $a + $b + $c -\
    \ $max - $min;\n  if ($max * $max == $min * $min + $mid * $mid) {\n    return\
    \ true;\n  }\n  return false;\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  // Write your code here\n  $max = max($a,\
    \ $b, $c);\n  if ($max == $a) {\n    return $b * $b + $c * $c == $a * $a;\n  }\
    \ else if ($max == $b) {\n    return $a * $a + $c * $c == $b * $b;\n  } else {\n\
    \    return $a * $a + $b * $b == $c * $c;\n  }\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a == 0 || $b ==\
    \ 0 || $c == 0) {\n        return false;\n    }\n    if ($a == $b && $b == $c)\
    \ {\n        return false;\n    }\n    if ($a == $b || $b == $c || $a == $c) {\n\
    \        return false;\n    }\n    if ($a > $b && $a > $c) {\n        return $a\
    \ * $a == $b * $b + $c * $c;\n    }\n    if ($b > $a && $b > $c) {\n        return\
    \ $b * $b == $a * $a + $c * $c;\n    }\n    if ($c > $a && $c > $b) {\n      \
    \  return $c * $c == $a * $a + $b * $b;\n    }\n}\n", "  if ($a > 0 && $b > 0\
    \ && $c > 0) {\n    if ($a == sqrt(pow($b, 2) + pow($c, 2))) {\n      return true;\n\
    \    } else if ($b == sqrt(pow($a, 2) + pow($c, 2))) {\n      return true;\n \
    \   } else if ($c == sqrt(pow($a, 2) + pow($b, 2))) {\n      return true;\n  \
    \  } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4,\
    \ 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(3, 5, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(6, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 6) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 4) . \"\\n\";", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return\
    \ false;\n    }\n    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse\
    \ = $sides[2];\n    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n   \
    \ return $hypotenuse * $hypotenuse == $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2;\n\
    }\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) +\
    \ pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a == 90 || $b\
    \ == 90 || $c == 90) {\n        return true;\n    }\n    return false;\n}\n",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n \
    \   $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n    if ($hypotenuse\
    \ ** 2 == $cathetus1 ** 2 + $cathetus2 ** 2) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "    if ($a == 0 || $b ==\
    \ 0 || $c == 0) {\n        return false;\n    }\n    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 = $sides[1];\n\
    \    $cathetus2 = $sides[0];\n    return $hypotenuse * $hypotenuse == $cathetus1\
    \ * $cathetus1 + $cathetus2 * $cathetus2;\n}\n", "  if ($a == 0 || $b == 0 ||\
    \ $c == 0) {\n    return false;\n  }\n  if ($a == $b && $b == $c) {\n    return\
    \ false;\n  }\n  if ($a > $b && $a > $c) {\n    if ($a * $a == $b * $b + $c *\
    \ $c) {\n      return true;\n    }\n  }\n  if ($b > $a && $b > $c) {\n    if ($b\
    \ * $b == $a * $a + $c * $c) {\n      return true;\n    }\n  }\n  if ($c > $a\
    \ && $c > $b) {\n    if ($c * $c == $a * $a + $b * $b) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  $hypotenuse = $sides[2];\n  $leg1 = $sides[0];\n  $leg2 = $sides[1];\n  return\
    \ $hypotenuse ** 2 == $leg1 ** 2 + $leg2 ** 2;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4,\
    \ 6) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 7)\
    \ ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 8) ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 9) ? \"\
    True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 10) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 11) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 12) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 13) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 14) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 15) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 16) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 17) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 18) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 19) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle", "    if ($a == 0 || $b == 0\
    \ || $c == 0) {\n        return false;\n    }\n    $hypotenuse = max($a, $b, $c);\n\
    \    $cathetus1 = min($a, $b, $c);\n    $cathetus2 = $a + $b + $c - $hypotenuse\
    \ - $cathetus1;\n    return $hypotenuse ** 2 == $cathetus1 ** 2 + $cathetus2 **\
    \ 2;\n}\n", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n\
    \  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1\
    \ = $sides[1];\n  $cathetus2 = $sides[0];\n  if ($hypotenuse * $hypotenuse ==\
    \ $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2) {\n    return true;\n  }\n\
    \  return false;\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"; // True\n\
    echo right_angle_triangle(4, 3, 5) . \"\\n\"; // True\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\"; // True\necho right_angle_triangle(3, 5, 4) . \"\\n\"; // True\n\
    echo right_angle_triangle(4, 5, 3) . \"\\n\"; // True\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\"; // True\necho right_angle_triangle(3, 3, 3) . \"\\n\"; // False\n\
    echo right_angle_triangle(0, 3, 4) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 0, 4) . \"\\n\"; // False\necho right_angle_triangle(3, 4, 0) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 4, 6) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 6, 4) . \"\\n\"; // False\necho right_angle_triangle(6, 3, 4) . \"\\n\"; //\
    \ False\necho right_angle_triangle(6, 4, 3) . \"\\n\"; // False\necho right_angle_triangle(4,\
    \ 6, 3) . \"\\n\"; // False\necho right_angle_triangle(4, 3, 6) . \"\\n\"; //\
    \ False\necho right_angle_triangle(4, 4, 4) . \"\\n\"; // False\necho right_angle_tri",
  "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  return $sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2];\n\
    }\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n    if ($sides[0] * $sides[0]\
    \ + $sides[1] * $sides[1] == $sides[2] * $sides[2]) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    $a = abs($a);\n    $b = abs($b);\n    $c\
    \ = abs($c);\n    if ($a == 0 || $b == 0 || $c == 0) {\n        return false;\n\
    \    }\n    $max = max($a, $b, $c);\n    if ($max == $a) {\n        return $a\
    \ * $a == $b * $b + $c * $c;\n    } else if ($max == $b) {\n        return $b\
    \ * $b == $a * $a + $c * $c;\n    } else {\n        return $c * $c == $a * $a\
    \ + $b * $b;\n    }\n}\n", "    $sides = [$a, $b, $c];\n    sort($sides);\n  \
    \  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", " \
    \ if ($a > 0 && $b > 0 && $c > 0) {\n    if ($a * $a + $b * $b == $c * $c) {\n\
    \      return true;\n    } else if ($a * $a + $c * $c == $b * $b) {\n      return\
    \ true;\n    } else if ($b * $b + $c * $c == $a * $a) {\n      return true;\n\
    \    } else {\n      return false;\n    }\n  } else {\n    return false;\n  }\n\
    }\n", "    // Write your code here\n    $sides = [$a, $b, $c];\n    sort($sides);\n\
    \    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "  if ($a\
    \ > 0 && $b > 0 && $c > 0) {\n    if ($a == sqrt(pow($b, 2) + pow($c, 2))) {\n\
    \      return true;\n    } else if ($b == sqrt(pow($a, 2) + pow($c, 2))) {\n \
    \     return true;\n    } else if ($c == sqrt(pow($a, 2) + pow($b, 2))) {\n  \
    \    return true;\n    } else {\n      return false;\n    }\n  } else {\n    return\
    \ false;\n  }\n}\n", "  if ($a == 90 || $b == 90 || $c == 90) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "\tif ($a > 0 && $b > 0 && $c > 0)\
    \ {\n\t\tif ($a * $a + $b * $b == $c * $c) {\n\t\t\treturn true;\n\t\t} else if\
    \ ($a * $a + $c * $c == $b * $b) {\n\t\t\treturn true;\n\t\t} else if ($b * $b\
    \ + $c * $c == $a * $a) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\
    \t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n", "  $sides = [$a, $b, $c];\n \
    \ sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(3,\
    \ 5, 4) . \"\\n\";\necho right_angle_triangle(3, 5, 6) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(5, 6, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 6) . \"\\n\";\necho right_angle_triangle(6, 3, 5) . \"\\n\";\necho right_angle_triangle(6,\
    \ 5, 3) . \"\\n\";", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(5, 4, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 5, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(5, 4, 6) . \"\\n\";\necho right_angle_triangle(5,\
    \ 6, 4) . \"\\n\";\necho right_angle_triangle(6, 5, 4) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(4, 6, 5) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 6) . \"\\n\";\necho right_angle_triangle(5, 5, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 5, 6) . \"\\n\";\necho right_angle_triangle(5, 6, 5) . \"\\n\";\necho right_angle_triangle(6,\
    \ 5, 5) . \"\\n\";\necho right_angle_triangle(6, 6, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 6, 5) . \"\\n\";\necho right_angle_triangle(6, 5, 6) . \"\\n\";\necho right_angle_triangle(5,\
    \ 6, 6) . \"\\n\";\necho right_angle_triangle(5, 5, 6) . \"\\n\";\necho right_angle_triangle(5,\
    \ 6, 5) . \"\\n\";\necho right_angle_triangle(6, 5, 5) . \"\\", "  $sides = [$a,\
    \ $b, $c];\n  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2]\
    \ ** 2;\n}\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return false;\n\
    \    }\n    $sides = [$a, $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n\
    \    $cathetus1 = $sides[1];\n    $cathetus2 = $sides[0];\n    if ($hypotenuse\
    \ * $hypotenuse == $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2) {\n    \
    \    return true;\n    }\n    return false;\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(3, 5, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(6, 4, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 4) . \"\\n\";\necho right_angle_triangle(4, 6, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 3, 6) . \"\\n\";\necho right_angle_triangle(6, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(4, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 4) . \"\\n\";\necho right_angle_triangle(4, 4, 3) . \"\\n\";\necho right_angle_triangle(4,\
    \ 4, 4) . \"\\n\";\necho right_angle_triangle(3, 3, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 5, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 3, 6) . \"\\n\";\necho right_angle_triangle(6, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 6, 3) . \"\\", "    $sides = [$a, $b, $c];\n    sort($sides);\n    return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n\necho right_angle_triangle(3, 4, 5) . PHP_EOL; // True\necho right_angle_triangle(4,\
    \ 5, 3) . PHP_EOL; // True\necho right_angle_triangle(5, 3, 4) . PHP_EOL; // True\n\
    echo right_angle_triangle(3, 4, 6) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 6, 3) . PHP_EOL; // False\necho right_angle_triangle(6, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 4, 7) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 7, 3) . PHP_EOL; // False\necho right_angle_triangle(7, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 4, 8) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 8, 3) . PHP_EOL; // False\necho right_angle_triangle(8, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 4, 9) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 9, 3) . PHP_EOL; // False\necho right_angle_triangle(9, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 4, 10) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 10, 3) . PHP_EOL; // False\necho right_angle_triangle(10, 3, 4) . PHP_EOL; //\
    \ False\necho right_angle_triangle(3, 4, 11) . PHP_EOL; // False\necho right_angle_triangle(4,\
    \ 11, 3) . PHP", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0]\
    \ ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2]\
    \ * $sides[2]) {\n    return true;\n  }\n  return false;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4,\
    \ 6) ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 7)\
    \ ? \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 8) ?\
    \ \"True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 9) ? \"\
    True\" : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 10) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 11) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 12) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 13) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 14) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 15) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 16) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 17) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 18) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle(3, 4, 19) ? \"True\"\
    \ : \"False\";\necho \"\\n\";\necho right_angle_triangle", "  $a2 = $a * $a;\n\
    \  $b2 = $b * $b;\n  $c2 = $c * $c;\n  if ($a2 + $b2 == $c2) {\n    return true;\n\
    \  } else if ($a2 + $c2 == $b2) {\n    return true;\n  } else if ($b2 + $c2 ==\
    \ $a2) {\n    return true;\n  } else {\n    return false;\n  }\n}\necho right_angle_triangle(3,\
    \ 4, 5); // True\necho right_angle_triangle(3, 5, 4); // True\necho right_angle_triangle(4,\
    \ 3, 5); // True\necho right_angle_triangle(4, 5, 3); // True\necho right_angle_triangle(5,\
    \ 3, 4); // True\necho right_angle_triangle(5, 4, 3); // True\necho right_angle_triangle(3,\
    \ 3, 3); // False\necho right_angle_triangle(5, 5, 5); // False\necho right_angle_triangle(3,\
    \ 4, 6); // False\necho right_angle_triangle(6, 4, 3); // False\necho right_angle_triangle(3,\
    \ 6, 4); // False\necho right_angle_triangle(6, 3, 4); // False\necho right_angle_triangle(4,\
    \ 6, 3); // False\necho right_angle_triangle(4, 3, 6); // False\necho right_angle_triangle(3,\
    \ 6, 5); // False\necho right_angle_triangle(6, 3, 5); // False\necho right_angle_triangle(3,\
    \ 5, 6); // False\necho right_angle_triangle(5, 3, 6); // False\necho right_angle_triangle(5,\
    \ 6, 3); // False\necho right_angle_triangle(6, 5, 3); // False\necho right_angle_triangle(6,\
    \ 5, 4); // False\necho right_angle_triangle(5, 6, 4); // False\necho right_angle_triangle(5,\
    \ 4, 6); // False\necho right", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return\
    \ false;\n  }\n  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n\
    \  $adjacent = $sides[1];\n  $opposite = $sides[0];\n  if ($hypotenuse * $hypotenuse\
    \ == $adjacent * $adjacent + $opposite * $opposite) {\n    return true;\n  }\n\
    \  return false;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(4, 5, 3) ? \"\
    True\\n\" : \"False\\n\";\necho right_angle_triangle(5, 3, 4) ? \"True\\n\" :\
    \ \"False\\n\";\necho right_angle_triangle(3, 5, 4) ? \"True\\n\" : \"False\\\
    n\";\necho right_angle_triangle(4, 3, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(3, 3, 3) ? \"\
    True\\n\" : \"False\\n\";\necho right_angle_triangle(3, 4, 6) ? \"True\\n\" :\
    \ \"False\\n\";\necho right_angle_triangle(6, 4, 3) ? \"True\\n\" : \"False\\\
    n\";\necho right_angle_triangle(4, 6, 3) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(3,\
    \ 6, 4) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(6, 3, 4) ? \"\
    True\\n\" : \"False\\n\";\necho right_angle_triangle(4, 3, 6) ? \"True\\n\" :\
    \ \"False\\n\";\necho right_angle_triangle(3, 6, 5) ? \"True\\n\" : \"False\\\
    n\";\necho right_angle_triangle(6, 3, 5) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(3,\
    \ 5, 6) ? \"True\\n\" : \"False\\n\";\necho right_angle_triangle(5, 3, 6) ? \"\
    True\\n\" :", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return false;\n\
    \    }\n    $hypotenuse = max($a, $b, $c);\n    $cathetus1 = min($a, $b, $c);\n\
    \    $cathetus2 = $a + $b + $c - $hypotenuse - $cathetus1;\n    if ($hypotenuse\
    \ * $hypotenuse == $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2) {\n    \
    \    return true;\n    }\n    return false;\n}\n", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] **\
    \ 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0],\
    \ 2) + pow($sides[1], 2) == pow($sides[2], 2);\n}\n", "  $sides = [$a, $b, $c];\n\
    \  sort($sides);\n  return $sides[0] ** 2 + $sides[1] ** 2 == $sides[2] ** 2;\n\
    }\n", "    if ($a == 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n\
    \    $max = max($a, $b, $c);\n    $min = min($a, $b, $c);\n    $mid = $a + $b\
    \ + $c - $max - $min;\n    if ($max * $max == $min * $min + $mid * $mid) {\n \
    \       return true;\n    }\n    return false;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(3, 4, 6) . \"\\n\";\necho right_angle_triangle(0,\
    \ 0, 0) . \"\\n\";\necho right_angle_triangle(0, 3, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 0, 4) . \"\\n\";\necho right_angle_triangle(3, 4, 0) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, -5) . \"\\n\";\necho right_angle_triangle(3, 4, 5.00001) . \"\\n\";\necho\
    \ right_angle_triangle(3, 4, 5.000001) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 5.0000001) . \"\\n\";\necho right_angle_triangle(3, 4, 5.00000001) . \"\\\
    n\";\necho right_angle_triangle(3, 4, 5.000000001) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 5.0000000001) . \"\\n\";\necho right_angle_triangle(3, 4, 5.00000000001)\
    \ . \"\\n\";\necho right_angle_triangle(3, 4, 5.000000000001) . \"\\n\";\necho\
    \ right_angle_triangle(3, 4, 5.0000000000001) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 5.00000000000001) . \"\\n\";\necho right", "    $sides = [$a, $b, $c];\n\
    \    sort($sides);\n    return pow($sides[0], 2) + pow($sides[1], 2) == pow($sides[2],\
    \ 2);\n}\n", "  if ($a == 0 || $b == 0 || $c == 0) {\n    return false;\n  }\n\
    \  $sides = [$a, $b, $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $cathetus1\
    \ = $sides[1];\n  $cathetus2 = $sides[0];\n  return $hypotenuse * $hypotenuse\
    \ == $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2;\n}\n", "    if ($a ==\
    \ 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 =\
    \ $sides[1];\n    $cathetus2 = $sides[0];\n    if ($hypotenuse * $hypotenuse ==\
    \ $cathetus1 * $cathetus1 + $cathetus2 * $cathetus2) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    if ($a > 0 && $b > 0 && $c > 0) {\n    \
    \    $max = max($a, $b, $c);\n        $min = min($a, $b, $c);\n        $mid =\
    \ $a + $b + $c - $max - $min;\n        if ($max * $max == $min * $min + $mid *\
    \ $mid) {\n            return true;\n        }\n    }\n    return false;\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\n\"\
    ;\necho right_angle_triangle(5, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(3, 5, 4) . \"\\n\";\necho right_angle_triangle(5,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 5, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 5, 3) . \"\\n\";\necho right_angle_triangle(3, 3, 5) . \"\\n\";\necho right_angle_triangle(5,\
    \ 5, 5) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(6, 3, 4) . \"\\n\";\necho right_angle_triangle(4,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";\necho right_angle_triangle(6,\
    \ 4, 3) . \"\\n\";\necho right_angle_triangle(4, 3, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 3, 3) . \"\\n\";\necho right_angle_triangle(3, 6, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 6, 3) . \"\\n\";\necho right_angle_triangle(3, 3, 6) . \"\\n\";\necho right_angle_triangle(6,\
    \ 6, 6) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\", "    if ($a ==\
    \ 0 || $b == 0 || $c == 0) {\n        return false;\n    }\n    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $leg1 = $sides[0];\n\
    \    $leg2 = $sides[1];\n    if ($hypotenuse ** 2 == $leg1 ** 2 + $leg2 ** 2)\
    \ {\n        return true;\n    }\n    return false;\n}\n", "  $sides = [$a, $b,\
    \ $c];\n  sort($sides);\n  $hypotenuse = $sides[2];\n  $leg1 = $sides[0];\n  $leg2\
    \ = $sides[1];\n  return $hypotenuse ** 2 == $leg1 ** 2 + $leg2 ** 2;\n}\n", " \
    \ if ($a > 0 && $b > 0 && $c > 0) {\n    if (($a * $a + $b * $b == $c * $c) ||\
    \ ($a * $a + $c * $c == $b * $b) || ($b * $b + $c * $c == $a * $a)) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\necho right_angle_triangle(3, 4, 5); //\
    \ True\necho right_angle_triangle(3, 4, 6); // False\necho right_angle_triangle(5,\
    \ 3, 4); // True\necho right_angle_triangle(5, 12, 13); // True\necho right_angle_triangle(5,\
    \ 12, 14); // False\necho right_angle_triangle(5, 12, 15); // False\necho right_angle_triangle(5,\
    \ 12, 16); // False\necho right_angle_triangle(5, 12, 17); // False\necho right_angle_triangle(5,\
    \ 12, 18); // False\necho right_angle_triangle(5, 12, 19); // False\necho right_angle_triangle(5,\
    \ 12, 20); // False\necho right_angle_triangle(5, 12, 21); // False\necho right_angle_triangle(5,\
    \ 12, 22); // False\necho right_angle_triangle(5, 12, 23); // False\necho right_angle_triangle(5,\
    \ 12, 24); // False\necho right_angle_triangle(5, 12, 25); // False\necho right_angle_triangle(5,\
    \ 12, 26); // False\necho right_angle_triangle(5, 12, 27); // False\necho right_angle_triangle(5,\
    \ 12, 28); // False\necho right_angle_triangle(5, 12, 29); // False\necho right_angle_triangle(5,\
    \ 12, 30); // False\necho right_angle_triangle(5, 12, 31); // False\necho right_angle_triangle(5,\
    \ 12, 32); // False\necho right_angle_triangle(5, 12, 33); // False\necho right_angle_",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return $sides[0] * $sides[0] + $sides[1]\
    \ * $sides[1] == $sides[2] * $sides[2];\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n\
    \  if ($sides[0] * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2])\
    \ {\n    return true;\n  }\n  return false;\n}\n\necho right_angle_triangle(3,\
    \ 4, 5) . \"\\n\";\necho right_angle_triangle(4, 5, 3) . \"\\n\";\necho right_angle_triangle(5,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 3, 3) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 6) . \"\\n\";\necho right_angle_triangle(6, 4, 3) . \"\\n\";\necho right_angle_triangle(6,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 6, 4) . \"\\n\";\necho right_angle_triangle(3,\
    \ 4, 7) . \"\\n\";\necho right_angle_triangle(7, 4, 3) . \"\\n\";\necho right_angle_triangle(7,\
    \ 3, 4) . \"\\n\";\necho right_angle_triangle(3, 7, 4) . \"\\n\";", "    // $a,\
    \ $b, $c are the lengths of the sides of a triangle.\n    $hypotenuse = max($a,\
    \ $b, $c);\n    $cathetus1 = min($a, $b, $c);\n    $cathetus2 = $a + $b + $c -\
    \ $hypotenuse - $cathetus1;\n    return $hypotenuse ** 2 == $cathetus1 ** 2 +\
    \ $cathetus2 ** 2;\n}\n", "  $sides = [$a, $b, $c];\n  sort($sides);\n  if ($sides[0]\
    \ * $sides[0] + $sides[1] * $sides[1] == $sides[2] * $sides[2]) {\n    return\
    \ true;\n  }\n  return false;\n}\n\necho right_angle_triangle(3, 4, 5) . \"\\\
    n\"; // True\necho right_angle_triangle(3, 4, 6) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, 4) . \"\\n\"; // False\necho right_angle_triangle(3, 4, 3) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 4, 2) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, 1) . \"\\n\"; // False\necho right_angle_triangle(3, 4, 0) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 4, -1) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, -2) . \"\\n\"; // False\necho right_angle_triangle(3, 4, -3) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 4, -4) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, -5) . \"\\n\"; // False\necho right_angle_triangle(3, 4, -6) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 4, -7) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, -8) . \"\\n\"; // False\necho right_angle_triangle(3, 4, -9) . \"\\n\"; //\
    \ False\necho right_angle_triangle(3, 4, -10) . \"\\n\"; // False\necho right_angle_triangle(3,\
    \ 4, -11) . \"\\n\"; // False\necho right_angle_triangle(3, 4, -12) . \"\\n\"\
    ; // False\necho right_angle_triangle(3, 4, -13) .", "  // Your code here\n}\n",
  "  $sides = [$a, $b, $c];\n  sort($sides);\n  return pow($sides[0], 2) + pow($sides[1],\
    \ 2) == pow($sides[2], 2);\n}\n", "    // Write your code here\n    $sides = [$a,\
    \ $b, $c];\n    sort($sides);\n    $hypotenuse = $sides[2];\n    $cathetus1 =\
    \ $sides[1];\n    $cathetus2 = $sides[0];\n    return $hypotenuse ** 2 == $cathetus1\
    \ ** 2 + $cathetus2 ** 2;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
