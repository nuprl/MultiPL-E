name: HumanEval_43_pairs_sum_to_zero
language: php
prompt: "<?php\n// pairs_sum_to_zero takes a list of integers as an input.\n// it\
  \ returns True if there are two distinct elements in the list that\n// sum to zero,\
  \ and False otherwise.\nfunction pairs_sum_to_zero($l) {\n"
tests: "function candidate(...$args) {\n    return pairs_sum_to_zero(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 3, 5, 0)) !== false) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, -2, 1))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 7)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 4, -5, 3, 5, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1)) !== false) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-3, 9, -1, 3, 2, 30)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 3, 2, 31)) !== true) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-3, 9, -1, 4, 2, 30))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 9, -1, 4, 2, 31)) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  $n = count($l);\n  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i\
    \ + 1; $j < $n; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        return True;\n\
    \      }\n    }\n  }\n  return False;\n}\n", "    // Your code here\n    $n =\
    \ count($l);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            if ($l[$i] + $l[$j] == 0) {\n                return\
    \ True;\n            }\n        }\n    }\n    return False;\n}\n", "  // TODO:\
    \ implement this function\n  $count = count($l);\n  for ($i = 0; $i < $count;\
    \ $i++) {\n    for ($j = $i + 1; $j < $count; $j++) {\n      if ($l[$i] + $l[$j]\
    \ == 0) {\n        return True;\n      }\n    }\n  }\n  return False;\n}\n", " \
    \ // TODO: implement this function\n  $len = count($l);\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n      if ($l[$i] + $l[$j]\
    \ == 0) {\n        return True;\n      }\n    }\n  }\n  return False;\n}\n", "\t\
    $n = count($l);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = $i + 1; $j < $n;\
    \ $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn True;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn False;\n}\n", "  // TODO: implement this function\n  $n = count($l);\n\
    \  for ($i = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j < $n; $j++) {\n   \
    \   if ($l[$i] + $l[$j] == 0) {\n        return True;\n      }\n    }\n  }\n \
    \ return False;\n}\n", "  // TODO: implement this function\n  return false;\n\
    }\n", "  // TODO: implement this function\n}\n", "  // TODO: implement this function\n\
    \  $len = count($l);\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i + 1;\
    \ $j < $len; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        return True;\n\
    \      }\n    }\n  }\n  return False;\n}\n", "  // TODO: implement this function\n\
    \  $count = count($l);\n  for ($i = 0; $i < $count; $i++) {\n    for ($j = $i\
    \ + 1; $j < $count; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n        return\
    \ True;\n      }\n    }\n  }\n  return False;\n}\n", "  // TODO: implement this\
    \ function.\n  // Hint: you can use the function \"in_array\" to check if a value\
    \ is in a list.\n  // Example: in_array(5, [1, 2, 3]) will return False, while\n\
    \  // in_array(2, [1, 2, 3]) will return True.\n  $len = count($l);\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n      if\
    \ ($l[$i] + $l[$j] == 0) {\n        return True;\n      }\n    }\n  }\n  return\
    \ False;\n}\n", "  // TODO: implement this function\n  $count = count($l);\n \
    \ for ($i = 0; $i < $count; $i++) {\n    for ($j = $i + 1; $j < $count; $j++)\
    \ {\n      if ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\n", "    // TODO: Implement this function.\n    // Hint:\
    \ You can use the function in_array to check if a value is in a list.\n    //\
    \ Hint: You can use the function count to count the number of elements in a list.\n\
    \    // Hint: You can use the function array_slice to get a sublist of a list.\n\
    \    // Hint: You can use the function array_merge to merge two lists.\n    //\
    \ Hint: You can use the function array_push to add an element to the end of a\
    \ list.\n    // Hint: You can use the function array_pop to remove the last element\
    \ of a list.\n    // Hint: You can use the function array_shift to remove the\
    \ first element of a list.\n    // Hint: You can use the function array_unshift\
    \ to add an element to the beginning of a list.\n    // Hint: You can use the\
    \ function array_unique to remove duplicates from a list.\n    // Hint: You can\
    \ use the function array_diff to get the difference of two lists.\n    // Hint:\
    \ You can use the function array_values to get the values of a list.\n    // Hint:\
    \ You can use the function array_keys to get the keys of a list.\n    // Hint:\
    \ You can use the function array_key_exists to check if a key exists in a list.\n\
    \    // Hint: You can use the function array_flip to flip a list.\n    // Hint:\
    \ You can use the function array_reverse to reverse a list.\n    // Hint: You\
    \ can use the function array_search to search a list.\n    // Hint: You can use\
    \ the function array_rand to get a random element of a list.\n    // Hint: You\
    \ can use the function array_sum to get the sum of a list.\n    // Hint: You can\
    \ use the function array_product to get the product of a list.\n    // Hint: You\
    \ can use the function array_map to apply a function to each element of a list.\n\
    \    // Hint: You can use the function array_filter to filter a list.\n    //\
    \ Hint: You can use the function array_reduce to reduce a list.\n    // Hint:\
    \ You can use the function array", "  // your code here\n}\n", "  // TODO: implement\
    \ this function\n  $count = count($l);\n  for ($i = 0; $i < $count; $i++) {\n\
    \    for ($j = $i + 1; $j < $count; $j++) {\n      if ($l[$i] + $l[$j] == 0) {\n\
    \        return True;\n      }\n    }\n  }\n  return False;\n}\n", "    $n = count($l);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            if ($l[$i] + $l[$j] == 0) {\n                return True;\n     \
    \       }\n        }\n    }\n    return False;\n}\n", "\t// TODO: implement this\
    \ function\n\t$len = count($l);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tfor ($j\
    \ = $i + 1; $j < $len; $j++) {\n\t\t\tif ($l[$i] + $l[$j] == 0) {\n\t\t\t\treturn\
    \ True;\n\t\t\t}\n\t\t}\n\t}\n\treturn False;\n}\n", "  $n = count($l);\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    for ($j = $i + 1; $j < $n; $j++) {\n      if\
    \ ($l[$i] + $l[$j] == 0) {\n        return true;\n      }\n    }\n  }\n  return\
    \ false;\n}\n", "    $n = count($l);\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = $i + 1; $j < $n; $j++) {\n            if ($l[$i] + $l[$j] == 0)\
    \ {\n                return True;\n            }\n        }\n    }\n    return\
    \ False;\n}\n", "    // TODO: implement this function\n    $len = count($l);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        for ($j = $i + 1; $j < $len; $j++)\
    \ {\n            if ($l[$i] + $l[$j] == 0) {\n                return True;\n \
    \           }\n        }\n    }\n    return False;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
