name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n//\
  \ the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\nfunction largest_smallest_integers($lst) {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num\
    \ < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) === 0 || count($pos) === 0) {\n    return [null, null];\n \
    \ }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return\
    \ [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5])); // [-5, 1]\nvar_dump(largest_smallest_integers([1, 2, 3,\
    \ 4, 5])); // [-1, 5]\nvar_dump(largest_smallest_integers([0, 0, 0, 0, 0])); //\
    \ [null, null]\nvar_dump(largest_smallest_integers([-1, 1])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1,\
    \ -1, -1, -1, -1])); // [-1, null]\nvar_dump(largest_smallest_integers([1, 1,\
    \ 1, 1, 1])); // [null, 1]\nvar_dump(largest_smallest_integers([-1, 1, -1, 1,\
    \ -1])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -1, -1, 1, 1, 1]));\
    \ // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -1, -1, -1, -1, 1, 1, 1,\
    \ 1, 1])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1])); // [-1, null]\nvar_dump(largest_smallest_integers([1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1])); // [null, 1]\nvar_dump(largest_smallest_integers([-1,\
    \ -1, -1", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n   \
    \     if ($num < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0)\
    \ {\n            $pos[] = $num;\n        }\n    }\n    if (empty($neg) || empty($pos))\
    \ {\n        return null;\n    }\n    return [max($neg), min($pos)];\n}\n", " \
    \   $pos = [];\n    $neg = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ > 0) {\n            $pos[] = $num;\n        } else {\n            $neg[] = $num;\n\
    \        }\n    }\n    if (empty($pos) || empty($neg)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos)\
    \ == 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0)\
    \ {\n            $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[]\
    \ = $v;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos)\
    \ == 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n", "  \
    \  $negatives = [];\n    $positives = [];\n    foreach ($lst as $num) {\n    \
    \    if ($num < 0) {\n            $negatives[] = $num;\n        } elseif ($num\
    \ > 0) {\n            $positives[] = $num;\n        }\n    }\n    if (empty($negatives)\
    \ || empty($positives)) {\n        return null;\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst\
    \ as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n        } elseif\
    \ ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n    if (empty($neg)\
    \ || empty($pos)) {\n        return null;\n    }\n    return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) == 0 || count($pos) == 0) {\n    return null;\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return\
    \ null;\n  }\n  return [max($neg), min($pos)];\n}\n\necho \"largest_smallest_integers([-1,\
    \ -2, -3, 4, 5]) => \";\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5]));\n\
    echo \"largest_smallest_integers([-1, -2, -3]) => \";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3]));\necho \"largest_smallest_integers([4, 5]) => \";\nvar_dump(largest_smallest_integers([4,\
    \ 5]));\necho \"largest_smallest_integers([]) => \";\nvar_dump(largest_smallest_integers([]));\n\
    echo \"largest_smallest_integers([-1, -2, -3, 4, 5, -6, -7, 8, 9]) => \";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, 4, 5, -6, -7, 8, 9]));", "  $negative = [];\n  $positive = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $negative[] = $num;\n    } elseif\
    \ ($num > 0) {\n      $positive[] = $num;\n    }\n  }\n  if (empty($negative)\
    \ || empty($positive)) {\n    return null;\n  }\n  return [max($negative), min($positive)];\n\
    }\n\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $value) {\n        if ($value\
    \ < 0) {\n            $neg[] = $value;\n        } elseif ($value > 0) {\n    \
    \        $pos[] = $value;\n        }\n    }\n    if (count($neg) > 0) {\n    \
    \    $a = max($neg);\n    } else {\n        $a = null;\n    }\n    if (count($pos)\
    \ > 0) {\n        $b = min($pos);\n    } else {\n        $b = null;\n    }\n \
    \   return [$a, $b];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst\
    \ as $item) {\n        if ($item < 0) {\n            $neg[] = $item;\n       \
    \ } else {\n            $pos[] = $item;\n        }\n    }\n    if (count($neg)\
    \ == 0 || count($pos) == 0) {\n        return null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num)\
    \ {\n        if ($num < 0) {\n            $neg[] = $num;\n        } elseif ($num\
    \ > 0) {\n            $pos[] = $num;\n        }\n    }\n    if (count($neg) >\
    \ 0 && count($pos) > 0) {\n        return [max($neg), min($pos)];\n    } else\
    \ {\n        return [null, null];\n    }\n}\n", "  $neg = [];\n  $pos = [];\n\
    \  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    }\
    \ else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos)\
    \ == 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return NULL;\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n\nvar_dump(largest_smallest_integers([-1, -2, -3,\
    \ -4, -5, 0, 1, 2, 3, 4, 5]));", "    $neg = [];\n    $pos = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n    \
    \    } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n   \
    \ if (count($neg) === 0) {\n        $neg[] = null;\n    }\n    if (count($pos)\
    \ === 0) {\n        $pos[] = null;\n    }\n    return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (empty($neg) || empty($pos)) {\n    return [null, null];\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return\
    \ null;\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos =\
    \ [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos)\
    \ == 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n        \
    \    $pos[] = $num;\n        }\n    }\n    if (count($neg) > 0) {\n        $neg\
    \ = max($neg);\n    } else {\n        $neg = null;\n    }\n    if (count($pos)\
    \ > 0) {\n        $pos = min($pos);\n    } else {\n        $pos = null;\n    }\n\
    \    return [$neg, $pos];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n    \
    \    } else {\n            $pos[] = $num;\n        }\n    }\n    if (empty($neg)\
    \ || empty($pos)) {\n        return null;\n    }\n    return [max($neg), min($pos)];\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $pos[] = $num;\n        }\n    }\n    if (empty($neg) || empty($pos))\
    \ {\n        return null;\n    }\n    return [max($neg), min($pos)];\n}\n\necho\
    \ \"largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]) = \";\n\
    var_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\n\
    echo \"largest_smallest_integers([-1, -2, -3, -4, -5]) = \";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5]));\necho \"largest_smallest_integers([0, 1, 2, 3, 4, 5]) = \"\
    ;\nvar_dump(largest_smallest_integers([0, 1, 2, 3, 4, 5]));\necho \"largest_smallest_integers([])\
    \ = \";\nvar_dump(largest_smallest_integers([]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78,", "    $negatives = array_filter($lst, function($v) { return\
    \ $v < 0; });\n    $positives = array_filter($lst, function($v) { return $v >\
    \ 0; });\n    $negatives = empty($negatives) ? null : max($negatives);\n    $positives\
    \ = empty($positives) ? null : min($positives);\n    return [$negatives, $positives];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n\
    \  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n   \
    \ foreach ($lst as $val) {\n        if ($val < 0) {\n            $neg[] = $val;\n\
    \        } elseif ($val > 0) {\n            $pos[] = $val;\n        }\n    }\n\
    \    if (empty($neg) || empty($pos)) {\n        return [null, null];\n    }\n\
    \    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0)\
    \ {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n\n$lst\
    \ = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nprint_r(largest_smallest_integers($lst));",
  "  $negatives = [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num\
    \ < 0) {\n      $negatives[] = $num;\n    } elseif ($num > 0) {\n      $positives[]\
    \ = $num;\n    }\n  }\n  if (count($negatives) > 0 && count($positives) > 0) {\n\
    \    return [max($negatives), min($positives)];\n  } else {\n    return [null,\
    \ null];\n  }\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return\
    \ null;\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos =\
    \ [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos)\
    \ === 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) === 0 || count($pos) === 0) {\n    return [null, null];\n \
    \ }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0)\
    \ {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n\n$lst = [1,\
    \ 2, 3, 4, 5, -1, -2, -3, -4, -5];\nprint_r(largest_smallest_integers($lst));",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0)\
    \ {\n            $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[]\
    \ = $v;\n        }\n    }\n    if (count($neg) == 0 || count($pos) == 0) {\n \
    \       return null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg\
    \ = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n     \
    \ $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ === 0) {\n    $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ === 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ [$neg, $pos];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $v)\
    \ {\n        if ($v < 0) {\n            $neg[] = $v;\n        } else {\n     \
    \       $pos[] = $v;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n\
    \        return [null, null];\n    }\n    return [max($neg), min($pos)];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ === 0 || count($pos) === 0) {\n    return [null, null];\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return [null,\
    \ null];\n  }\n  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[]\
    \ = $num;\n        } else {\n            $pos[] = $num;\n        }\n    }\n  \
    \  $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos) ? null : min($pos);\n\
    \    return [$neg, $pos];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return\
    \ NULL;\n  }\n  return [max($neg), min($pos)];\n}\n", "    $negatives = [];\n\
    \    $positives = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n\
    \            $negatives[] = $num;\n        } else {\n            $positives[]\
    \ = $num;\n        }\n    }\n    if (empty($negatives) || empty($positives)) {\n\
    \        return null;\n    }\n    return [max($negatives), min($positives)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n\
    \  return [max($neg), min($pos)];\n}\n\necho \"largest_smallest_integers([-1,\
    \ -2, -3, 4, 5]) = \";\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5]));\n\
    echo \"largest_smallest_integers([-1, -2, -3]) = \";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3]));\necho \"largest_smallest_integers([4, 5]) = \";\nvar_dump(largest_smallest_integers([4,\
    \ 5]));\necho \"largest_smallest_integers([]) = \";\nvar_dump(largest_smallest_integers([]));\n\
    echo \"largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 4,\
    \ 5, 6, 7, 8, 9, 10]) = \";\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, 4, 5, 6, 7, 8, 9, 10]));", "    $neg = [];\n    $pos\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[]\
    \ = $num;\n        } else {\n            $pos[] = $num;\n        }\n    }\n  \
    \  if (count($neg) == 0 || count($pos) == 0) {\n        return [null, null];\n\
    \    }\n    return [max($neg), min($pos)];\n}\n", "  $negatives = [];\n  $positives\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $negatives[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $positives[] = $num;\n    }\n  }\n \
    \ if (empty($negatives) || empty($positives)) {\n    return null;\n  }\n  return\
    \ [max($negatives), min($positives)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return\
    \ null;\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos =\
    \ [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) > 0 && count($pos)\
    \ > 0) {\n    return [max($neg), min($pos)];\n  } else {\n    return [null, null];\n\
    \  }\n}\n\necho \"Test 1: \" . (largest_smallest_integers([-1, -2, -3, -4, -5])\
    \ == [-1, 1] ? \"true\" : \"false\") . \"\\n\";\necho \"Test 2: \" . (largest_smallest_integers([1,\
    \ 2, 3, 4, 5]) == [null, 1] ? \"true\" : \"false\") . \"\\n\";\necho \"Test 3:\
    \ \" . (largest_smallest_integers([-1, -2, -3, 4, 5]) == [-1, 4] ? \"true\" :\
    \ \"false\") . \"\\n\";\necho \"Test 4: \" . (largest_smallest_integers([-1, -2,\
    \ -3, -4, -5, 1, 2, 3, 4, 5]) == [-1, 1] ? \"true\" : \"false\") . \"\\n\";\n\
    echo \"Test 5: \" . (largest_smallest_integers([-1, -2, -3, -4, -5, 0, 0, 0, 0,\
    \ 0]) == [-1, null] ? \"true\" : \"false\") . \"\\n\";\necho \"Test 6: \" . (largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5]) == [-1, 1] ? \"true\" : \"false\"\
    ) . \"\\n\";\necho \"Test 7: \" . (largest_smallest_integers([-1, -2, -3, -4,\
    \ -5, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) > 0 && count($pos)\
    \ > 0) {\n    return [max($neg), min($pos)];\n  } else {\n    return [null, null];\n\
    \  }\n}\n\nprint_r(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10]));\nprint_r(largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\
    print_r(largest_smallest_integers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nprint_r(largest_smallest_integers([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nprint_r(largest_smallest_integers([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0]));\nprint_r(largest_smallest_integers([]));", " \
    \   $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n", "    $neg = [];\n    $pos\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[]\
    \ = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n       \
    \ }\n    }\n    if (count($neg) == 0 || count($pos) == 0) {\n        return null;\n\
    \    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n\
    \  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    }\
    \ elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) ||\
    \ empty($pos)) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n\
    \necho \"largest_smallest_integers([-1, -2, -3, 4, 5])\\n\";\nprint_r(largest_smallest_integers([-1,\
    \ -2, -3, 4, 5]));\necho \"\\n\";\n\necho \"largest_smallest_integers([-1, -2,\
    \ -3, -4, -5])\\n\";\nprint_r(largest_smallest_integers([-1, -2, -3, -4, -5]));\n\
    echo \"\\n\";\n\necho \"largest_smallest_integers([1, 2, 3, 4, 5])\\n\";\nprint_r(largest_smallest_integers([1,\
    \ 2, 3, 4, 5]));\necho \"\\n\";\n\necho \"largest_smallest_integers([0, 0, 0,\
    \ 0, 0])\\n\";\nprint_r(largest_smallest_integers([0, 0, 0, 0, 0]));\necho \"\\\
    n\";\n\necho \"largest_smallest_integers([-1, -2, -3, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,", "    $neg = [];\n    $pos\
    \ = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            $neg[]\
    \ = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n        }\n  \
    \  }\n    if (empty($neg) || empty($pos)) {\n        return null;\n    }\n   \
    \ return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos) ===\
    \ 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ == 0 || count($pos) == 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n\necho \"largest_smallest_integers([-1, -2, -3, 4, 5])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, 4, 5]));\necho \"largest_smallest_integers([-1, -2, -3])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3]));\necho \"largest_smallest_integers([1, 2, 3])\\n\";\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3]));\necho \"largest_smallest_integers([0, 0, 0])\\n\";\nvar_dump(largest_smallest_integers([0,\
    \ 0, 0]));\necho \"largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3])\\n\";\n\
    var_dump(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, 0, 1, 2, 3, 0])\\n\";\nvar_dump(largest_smallest_integers([-1, -2, -3,\
    \ 0, 1, 2, 3, 0]));\necho \"largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3,\
    \ 0, 0])\\n\";\nvar_dump(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 0,\
    \ 0]));\necho \"largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, 0", "  $neg\
    \ = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n     \
    \ $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "    $negatives = [];\n    $positives = [];\n    foreach ($lst as $num)\
    \ {\n        if ($num < 0) {\n            $negatives[] = $num;\n        } elseif\
    \ ($num > 0) {\n            $positives[] = $num;\n        }\n    }\n    if (empty($negatives)\
    \ || empty($positives)) {\n        return null;\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num)\
    \ {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return [null,\
    \ null];\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = array_filter($lst,\
    \ function($n) { return $n < 0; });\n  $pos = array_filter($lst, function($n)\
    \ { return $n > 0; });\n  return array(max($neg), min($pos));\n}\n\n$a = [-1,\
    \ -2, -3, 4, 5];\n$b = [1, 2, 3, -4, -5];\n$c = [-1, -2, -3, -4, -5];\n$d = [1,\
    \ 2, 3, 4, 5];\n\nvar_dump(largest_smallest_integers($a)); // [-1, 4]\nvar_dump(largest_smallest_integers($b));\
    \ // [-5, 1]\nvar_dump(largest_smallest_integers($c)); // [-5, null]\nvar_dump(largest_smallest_integers($d));\
    \ // [null, 5]", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $i)\
    \ {\n        if ($i < 0) {\n            if ($neg === null || $i > $neg) {\n  \
    \              $neg = $i;\n            }\n        } else {\n            if ($pos\
    \ === null || $i < $pos) {\n                $pos = $i;\n            }\n      \
    \  }\n    }\n    return [$neg, $pos];\n}\n", "    $neg = [];\n    $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } else {\n            $pos[] = $num;\n        }\n    }\n    if (count($neg)\
    \ == 0) {\n        $neg[] = null;\n    }\n    if (count($pos) == 0) {\n      \
    \  $pos[] = null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $negatives\
    \ = [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $negatives[] = $num;\n    } else {\n      $positives[] = $num;\n    }\n\
    \  }\n  if (count($negatives) > 0) {\n    $a = max($negatives);\n  } else {\n\
    \    $a = null;\n  }\n  if (count($positives) > 0) {\n    $b = min($positives);\n\
    \  } else {\n    $b = null;\n  }\n  return [$a, $b];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0) {\n \
    \   $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos) ==\
    \ 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return [$neg,\
    \ $pos];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $v) {\n\
    \        if ($v < 0) {\n            $neg[] = $v;\n        } else {\n         \
    \   $pos[] = $v;\n        }\n    }\n    if (count($neg) == 0) {\n        $neg\
    \ = null;\n    } else {\n        $neg = max($neg);\n    }\n    if (count($pos)\
    \ == 0) {\n        $pos = null;\n    } else {\n        $pos = min($pos);\n   \
    \ }\n    return [$neg, $pos];\n}\n\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11,\
    \ -12, -13, -14, -15];\nprint_r(largest_smallest_integers($lst));", "  $neg =\
    \ [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[]\
    \ = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) >\
    \ 0 && count($pos) > 0) {\n    return [max($neg), min($pos)];\n  } else {\n  \
    \  return [null, null];\n  }\n}\n", "    $negatives = [];\n    $positives = [];\n\
    \    foreach ($lst as $number) {\n        if ($number < 0) {\n            $negatives[]\
    \ = $number;\n        } elseif ($number > 0) {\n            $positives[] = $number;\n\
    \        }\n    }\n    $negatives = empty($negatives) ? null : max($negatives);\n\
    \    $positives = empty($positives) ? null : min($positives);\n    return [$negatives,\
    \ $positives];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $number)\
    \ {\n        if ($number < 0) {\n            $neg[] = $number;\n        } elseif\
    \ ($number > 0) {\n            $pos[] = $number;\n        }\n    }\n    if (count($neg)\
    \ === 0 || count($pos) === 0) {\n        return null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num)\
    \ {\n        if ($num < 0) {\n            $neg[] = $num;\n        } else {\n \
    \           $pos[] = $num;\n        }\n    }\n    if (count($neg) == 0) {\n  \
    \      $neg = null;\n    } else {\n        $neg = max($neg);\n    }\n    if (count($pos)\
    \ == 0) {\n        $pos = null;\n    } else {\n        $pos = min($pos);\n   \
    \ }\n    return [$neg, $pos];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst\
    \ as $v) {\n    if ($v < 0) {\n      $neg[] = $v;\n    } else {\n      $pos[]\
    \ = $v;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return\
    \ [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) ||\
    \ empty($pos)) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) > 0) {\n    $neg = max($neg);\n  } else {\n    $neg = null;\n\
    \  }\n  if (count($pos) > 0) {\n    $pos = min($pos);\n  } else {\n    $pos =\
    \ null;\n  }\n  return [$neg, $pos];\n}\n", "    $neg = [];\n    $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n\
    \    if (empty($neg) || empty($pos)) {\n        return [null, null];\n    }\n\
    \    return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n \
    \   foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n\
    \    if (count($neg) == 0 || count($pos) == 0) {\n        return null;\n    }\n\
    \    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos) ===\
    \ 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ === 0 || count($pos) === 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $negatives = array_filter($lst, function($v) { return $v < 0; });\n \
    \ $positives = array_filter($lst, function($v) { return $v > 0; });\n  if (count($negatives)\
    \ == 0 || count($positives) == 0) {\n    return NULL;\n  }\n  return array(max($negatives),\
    \ min($positives));\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else\
    \ {\n      $positives[] = $num;\n    }\n  }\n  if (count($negatives) === 0 ||\
    \ count($positives) === 0) {\n    return [null, null];\n  }\n  return [max($negatives),\
    \ min($positives)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num)\
    \ {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return [null,\
    \ null];\n  }\n  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[]\
    \ = $num;\n        } else {\n            $pos[] = $num;\n        }\n    }\n  \
    \  if (empty($neg) || empty($pos)) {\n        return [null, null];\n    }\n  \
    \  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0) {\n    $neg = null;\n\
    \  } else {\n    $neg = max($neg);\n  }\n  if (count($pos) == 0) {\n    $pos =\
    \ null;\n  } else {\n    $pos = min($pos);\n  }\n  return [$neg, $pos];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ === 0) {\n    $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ === 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ [$neg, $pos];\n}\n\n$lst = [1, 2, 3, -1, -2, -3];\nprint_r(largest_smallest_integers($lst));",
  "  $negatives = [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num\
    \ < 0) {\n      $negatives[] = $num;\n    } elseif ($num > 0) {\n      $positives[]\
    \ = $num;\n    }\n  }\n  if (empty($negatives) || empty($positives)) {\n    return\
    \ null;\n  }\n  return [max($negatives), min($positives)];\n}\n", "    $neg =\
    \ [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n\
    \            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n  \
    \      }\n    }\n    if (count($neg) == 0 || count($pos) == 0) {\n        return\
    \ [null, null];\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) ===\
    \ 0 || count($pos) === 0) {\n    return [null, null];\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n", "    $negatives = [];\n    $positives = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $negatives[] = $num;\n\
    \        } else {\n            $positives[] = $num;\n        }\n    }\n    if\
    \ (count($negatives) > 0 && count($positives) > 0) {\n        return [max($negatives),\
    \ min($positives)];\n    } else {\n        return [null, null];\n    }\n}\n",
  "  $negatives = [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num\
    \ < 0) {\n      $negatives[] = $num;\n    } else {\n      $positives[] = $num;\n\
    \    }\n  }\n  if (count($negatives) === 0 || count($positives) === 0) {\n   \
    \ return NULL;\n  }\n  return [max($negatives), min($positives)];\n}\n", "  $negative\
    \ = [];\n  $positive = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $negative[] = $num;\n    } else {\n      $positive[] = $num;\n    }\n \
    \ }\n  if (count($negative) > 0 && count($positive) > 0) {\n    return [max($negative),\
    \ min($positive)];\n  } else {\n    return [null, null];\n  }\n}\n", "    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $negatives[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $positives[] = $num;\n        }\n    }\n    if (count($negatives) ===\
    \ 0) {\n        $negatives[] = null;\n    }\n    if (count($positives) === 0)\
    \ {\n        $positives[] = null;\n    }\n    return [max($negatives), min($positives)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) === 0 || count($pos) === 0) {\n    return [null, null];\n \
    \ }\n  return [max($neg), min($pos)];\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ -11, -12, -13, -14, -15];\n$b = [0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10];\n\
    $c = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar_dump(largest_smallest_integers($a));\
    \ // [ -11, 2 ]\nvar_dump(largest_smallest_integers($b)); // [ -10, null ]\nvar_dump(largest_smallest_integers($c));\
    \ // [ null, 1 ]", "    $negatives = [];\n    $positives = [];\n    foreach ($lst\
    \ as $num) {\n        if ($num < 0) {\n            $negatives[] = $num;\n    \
    \    } else {\n            $positives[] = $num;\n        }\n    }\n    if (count($negatives)\
    \ > 0 && count($positives) > 0) {\n        return [max($negatives), min($positives)];\n\
    \    } else {\n        return [null, null];\n    }\n}\n\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, 4, 5])); // [-3, 4]\nvar_dump(largest_smallest_integers([-1, -2, -3]));\
    \ // [-3, null]\nvar_dump(largest_smallest_integers([4, 5])); // [null, 4]\nvar_dump(largest_smallest_integers([]));\
    \ // [null, null]", "  $negatives = [];\n  $positives = [];\n  foreach ($lst as\
    \ $number) {\n    if ($number < 0) {\n      $negatives[] = $number;\n    } elseif\
    \ ($number > 0) {\n      $positives[] = $number;\n    }\n  }\n  if (empty($negatives)\
    \ || empty($positives)) {\n    return null;\n  }\n  return [max($negatives), min($positives)];\n\
    }\n\n$lst = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10];\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10];\nprint_r(largest_smallest_integers($lst));\n\n$lst = [0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0];\nprint_r(largest_smallest_integers($lst));\n\n$lst = [-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9,",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n\
    \  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return [null, null];\n\
    \  }\n  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n\
    \    if (empty($neg) || empty($pos)) {\n        return null;\n    }\n    return\
    \ [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n    \
    \    } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n   \
    \ if (count($neg) == 0) {\n        $neg[] = null;\n    }\n    if (count($pos)\
    \ == 0) {\n        $pos[] = null;\n    }\n    return [max($neg), min($pos)];\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[]\
    \ = $num;\n        }\n    }\n    if (count($neg) == 0 || count($pos) == 0) {\n\
    \        return null;\n    }\n    return [max($neg), min($pos)];\n}\n", "    $neg\
    \ = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n\
    \            $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[]\
    \ = $num;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $negatives = array_filter($lst,\
    \ function($n) { return $n < 0; });\n  $positives = array_filter($lst, function($n)\
    \ { return $n > 0; });\n  $a = count($negatives) > 0 ? max($negatives) : null;\n\
    \  $b = count($positives) > 0 ? min($positives) : null;\n  return [$a, $b];\n\
    }\n\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5])); // [5, -1]\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5])); // [null, 1]\nvar_dump(largest_smallest_integers([-1, -2, 3,\
    \ 4, -5])); // [3, -1]\nvar_dump(largest_smallest_integers([-1, 2, -3, 4, -5]));\
    \ // [2, -1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5])); // [5,\
    \ -1]\nvar_dump(largest_smallest_integers([])); // [null, null]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0])); // [5, -1]\nvar_dump(largest_smallest_integers([1, 2,\
    \ 3, 4, 5, 0])); // [null, 1]\nvar_dump(largest_smallest_integers([-1, -2, 3,\
    \ 4, -5, 0])); // [3, -1]\nvar_dump(largest_smallest_integers([-1, 2, -3, 4, -5,\
    \ 0])); // [2, -1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0]));\
    \ // [5, -1]\nvar_dump(largest_smallest_integers([0])); // [null, null]\nvar_dump(largest_smallest_integers([-",
  "    $negatives = array_filter($lst, function($n) { return $n < 0; });\n    $positives\
    \ = array_filter($lst, function($n) { return $n > 0; });\n    return [max($negatives),\
    \ min($positives)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num)\
    \ {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return [null, null];\n \
    \ }\n  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } else {\n            $pos[] = $num;\n        }\n    }\n    if (empty($neg)\
    \ || empty($pos)) {\n        return [null, null];\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return [null, null];\n \
    \ }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) > 0 && count($pos) > 0) {\n\
    \    return [max($neg), min($pos)];\n  } else {\n    return [null, null];\n  }\n\
    }\n\necho \"largest_smallest_integers([-1, -2, -3, 4, 5])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, 4, 5]));\necho \"largest_smallest_integers([-1, -2, -3])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3]));\necho \"largest_smallest_integers([4, 5])\\n\";\nvar_dump(largest_smallest_integers([4,\
    \ 5]));\necho \"largest_smallest_integers([])\\n\";\nvar_dump(largest_smallest_integers([]));",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) > 0 && count($pos) > 0) {\n        return\
    \ [max($neg), min($pos)];\n    } else {\n        return [null, null];\n    }\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[]\
    \ = $num;\n        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos\
    \ = empty($pos) ? null : min($pos);\n    return [$neg, $pos];\n}\n", "    $neg\
    \ = [];\n    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0)\
    \ {\n            $neg[] = $item;\n        } else {\n            $pos[] = $item;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return null;\n\
    \    }\n    return [max($neg), min($pos)];\n}\n\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5])); // [-5, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3,\
    \ -4, 5])); // [-1, 5]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5,\
    \ 5])); // [-5, 5]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0]));\
    \ // [-5, 0]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2,\
    \ 3, 4, 5])); // [-5, 5]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5, 0, 1, 2, 3, 4, 5, 6])); // [-5, 5]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7])); // [-5, 5]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8])); // [-5, 5]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])); // [-5, 5]\nvar_dump(largest_smallest_integers([-",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ == 0 || count($pos) == 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $negatives = [];\n  $positives = [];\n  foreach ($lst as $num) {\n  \
    \  if ($num < 0) {\n      $negatives[] = $num;\n    } else {\n      $positives[]\
    \ = $num;\n    }\n  }\n  $negatives = empty($negatives) ? null : max($negatives);\n\
    \  $positives = empty($positives) ? null : min($positives);\n  return [$negatives,\
    \ $positives];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return null;\n\
    \  }\n  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } else {\n            $pos[] = $num;\n        }\n    }\n    if (count($neg)\
    \ == 0 || count($pos) == 0) {\n        return null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else {\n\
    \      $positives[] = $num;\n    }\n  }\n  if (count($negatives) == 0 || count($positives)\
    \ == 0) {\n    return [null, null];\n  }\n  return [max($negatives), min($positives)];\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[]\
    \ = $num;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $negatives = [];\n\
    \  $positives = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $negatives[]\
    \ = $num;\n    } elseif ($num > 0) {\n      $positives[] = $num;\n    }\n  }\n\
    \  if (count($negatives) > 0) {\n    $a = max($negatives);\n  } else {\n    $a\
    \ = null;\n  }\n  if (count($positives) > 0) {\n    $b = min($positives);\n  }\
    \ else {\n    $b = null;\n  }\n  return [$a, $b];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos)\
    \ == 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n", "  \
    \  $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0 || count($pos) == 0) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) > 0) {\n  \
    \  $a = max($neg);\n  } else {\n    $a = null;\n  }\n  if (count($pos) > 0) {\n\
    \    $b = min($pos);\n  } else {\n    $b = null;\n  }\n  return [$a, $b];\n}\n\
    \necho \"largest_smallest_integers([-1, -2, -3, 4, 5]) = \";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, 4, 5]));\necho \"largest_smallest_integers([-1, -2, -3]) = \";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3]));\necho \"largest_smallest_integers([4, 5]) = \";\nvar_dump(largest_smallest_integers([4,\
    \ 5]));\necho \"largest_smallest_integers([]) = \";\nvar_dump(largest_smallest_integers([]));",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ === 0 || count($pos) === 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $pos[] = $num;\n        }\n    }\n    if (empty($neg) || empty($pos))\
    \ {\n        return null;\n    }\n    return [max($neg), min($pos)];\n}\n", " \
    \ $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n\nprint_r(largest_smallest_integers([-1, -2, -3, -4, -5]));\
    \ // [-5, 1]\nprint_r(largest_smallest_integers([1, 2, 3, 4, 5])); // [-1, 5]\n\
    print_r(largest_smallest_integers([-1, -2, 3, 4, 5])); // [-2, 3]\nprint_r(largest_smallest_integers([-1,\
    \ 2, 3, 4, -5])); // [-1, 2]\nprint_r(largest_smallest_integers([1, 2, 3, 4, 5]));\
    \ // [null, null]\nprint_r(largest_smallest_integers([-1, -2, -3, -4, -5])); //\
    \ [null, null]", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n   \
    \ if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return null;\n\
    \  }\n  return [max($neg), min($pos)];\n}\n\necho \"largest_smallest_integers([-1,\
    \ -2, -3, 4, 5])\\n\";\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5]));\n\
    echo \"largest_smallest_integers([-1, -2, -3])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3]));\necho \"largest_smallest_integers([4, 5])\\n\";\nvar_dump(largest_smallest_integers([4,\
    \ 5]));\necho \"largest_smallest_integers([])\\n\";\nvar_dump(largest_smallest_integers([]));",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0)\
    \ {\n            $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[]\
    \ = $v;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) || empty($pos))\
    \ {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", " \
    \   $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n        \
    \    $pos[] = $num;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n\
    \        return null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg\
    \ = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n     \
    \ $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (empty($neg) || empty($pos)) {\n    return null;\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else {\n\
    \      $positives[] = $num;\n    }\n  }\n  if (count($negatives) === 0 || count($positives)\
    \ === 0) {\n    return [null, null];\n  }\n  return [max($negatives), min($positives)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) > 0 && count($pos) > 0) {\n    return [max($neg), min($pos)];\n\
    \  } else {\n    return [null, null];\n  }\n}\n\nvar_dump(largest_smallest_integers([-2,\
    \ -1, 0, 1, 2]));", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num)\
    \ {\n        if ($num < 0) {\n            $neg[] = $num;\n        } else {\n \
    \           $pos[] = $num;\n        }\n    }\n    if (empty($neg) || empty($pos))\
    \ {\n        return [null, null];\n    }\n    return [max($neg), min($pos)];\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[]\
    \ = $num;\n        }\n    }\n    if (count($neg) == 0 || count($pos) == 0) {\n\
    \        return null;\n    }\n    return [max($neg), min($pos)];\n}\n", "    $neg\
    \ = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n\
    \            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n  \
    \      }\n    }\n    return [max($neg), min($pos)];\n}\n", "    $negatives = array_filter($lst,\
    \ function($n) {\n        return $n < 0;\n    });\n    $positives = array_filter($lst,\
    \ function($n) {\n        return $n > 0;\n    });\n    if (count($negatives) ===\
    \ 0 || count($positives) === 0) {\n        return null;\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num)\
    \ {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return null;\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n    \
    \    } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n   \
    \ if (empty($neg) || empty($pos)) {\n        return null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } elseif ($num\
    \ > 0) {\n      $positives[] = $num;\n    }\n  }\n  if (count($negatives) ===\
    \ 0) {\n    $negatives[] = null;\n  }\n  if (count($positives) === 0) {\n    $positives[]\
    \ = null;\n  }\n  return [max($negatives), min($positives)];\n}\n", "  $neg =\
    \ [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[]\
    \ = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) ==\
    \ 0 || count($pos) == 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n\necho \"largest_smallest_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12,\
    \ -13, -14, -15])\\n\";\nvar_dump(largest_smallest_integers([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, -11, -12, -13, -14, -15]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, 11, 12, 13, 14, 15])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, 11, 12, 13, 14, 15]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]));\necho \"largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\\n\";\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "    $neg = [];\n    $pos = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } else {\n            $pos[] = $num;\n        }\n    }\n    if (count($neg)\
    \ == 0 || count($pos) == 0) {\n        return null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return null;\n\
    \  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } elseif ($num\
    \ > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) || empty($pos))\
    \ {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", " \
    \ $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n\
    \  }\n  if (count($neg) > 0 && count($pos) > 0) {\n    return [max($neg), min($pos)];\n\
    \  } else {\n    return [null, null];\n  }\n}\n", "    $neg = [];\n    $pos =\
    \ [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n            $neg[]\
    \ = $item;\n        } elseif ($item > 0) {\n            $pos[] = $item;\n    \
    \    }\n    }\n    if (count($neg) === 0 || count($pos) === 0) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "    $negatives = array_filter($lst,\
    \ function($n) { return $n < 0; });\n    $positives = array_filter($lst, function($n)\
    \ { return $n > 0; });\n    if (count($negatives) == 0 || count($positives) ==\
    \ 0) {\n        return [null, null];\n    }\n    return [max($negatives), min($positives)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n\
    \  return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n   \
    \ foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } else {\n            $pos[] = $num;\n        }\n    }\n    if (empty($neg)\
    \ || empty($pos)) {\n        return null;\n    }\n    return [max($neg), min($pos)];\n\
    }\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if\
    \ ($num < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[]\
    \ = $num;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return\
    \ null;\n    }\n    return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos)\
    \ === 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) > 0) {\n    $neg = max($neg);\n  } else {\n    $neg = null;\n\
    \  }\n  if (count($pos) > 0) {\n    $pos = min($pos);\n  } else {\n    $pos =\
    \ null;\n  }\n  return [$neg, $pos];\n}\n", "    $negatives = [];\n    $positives\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $negatives[]\
    \ = $num;\n        } elseif ($num > 0) {\n            $positives[] = $num;\n \
    \       }\n    }\n    if (count($negatives) > 0 && count($positives) > 0) {\n\
    \        return [max($negatives), min($positives)];\n    } else {\n        return\
    \ [null, null];\n    }\n}\n", "    $neg = [];\n    $pos = [];\n    foreach ($lst\
    \ as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n        } else\
    \ {\n            $pos[] = $num;\n        }\n    }\n    if (count($neg) == 0 ||\
    \ count($pos) == 0) {\n        return [null, null];\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else {\n\
    \      $positives[] = $num;\n    }\n  }\n  if (count($negatives) == 0 || count($positives)\
    \ == 0) {\n    return [null, null];\n  }\n  return [max($negatives), min($positives)];\n\
    }\n\nvar_dump(largest_smallest_integers([1, 2, 3, -1, -2, -3])); // [3, -3]\n\
    var_dump(largest_smallest_integers([1, 2, 3])); // [null, null]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3])); // [-1, null]\nvar_dump(largest_smallest_integers([-1, -2, -3, 0]));\
    \ // [-1, 0]\nvar_dump(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3])); //\
    \ [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, -4]));\
    \ // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3, -4,\
    \ 4])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, 0, 1, 2, 3,\
    \ -4, 4, -5])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, 0,\
    \ 1, 2, 3, -4, 4, -5, 5])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, 0, 1, 2, 3, -4, 4, -5, 5, -6])); // [-1, 1]\nvar_dump(largest_smallest_integers([",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n\necho \"largest_smallest_integers([-1, -2, -3, 4, 5]) = \"\
    ;\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5]) = \";\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5]));\necho \"largest_smallest_integers([1, 2, 3, 4, 5]) = \";\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5]));\necho \"largest_smallest_integers([0, 0, 0, 0, 0]) = \";\nvar_dump(largest_smallest_integers([0,\
    \ 0, 0, 0, 0]));\necho \"largest_smallest_integers([-1, -2, -3, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0,", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $val) {\n \
    \   if ($val < 0) {\n      $neg[] = $val;\n    } elseif ($val > 0) {\n      $pos[]\
    \ = $val;\n    }\n  }\n  if (count($neg) > 0 && count($pos) > 0) {\n    return\
    \ [max($neg), min($pos)];\n  } else {\n    return [null, null];\n  }\n}\n", " \
    \ $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n\
    \  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return null;\n  }\n\
    \  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  $neg = empty($neg) ? null : max($neg);\n\
    \  $pos = empty($pos) ? null : min($pos);\n  return [$neg, $pos];\n}\n", "  $neg\
    \ = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n     \
    \ $neg[] = $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (empty($neg) || empty($pos)) {\n    return [null, null];\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n\necho \"largest_smallest_integers([-1, -2, -3,\
    \ 4, 5])\\n\";\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5]));\necho\
    \ \"largest_smallest_integers([-1, -2, -3, -4, -5])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5]));\necho \"largest_smallest_integers([1, 2, 3, 4, 5])\\n\";\n\
    var_dump(largest_smallest_integers([1, 2, 3, 4, 5]));\necho \"largest_smallest_integers([0,\
    \ 0, 0, 0, 0])\\n\";\nvar_dump(largest_smallest_integers([0, 0, 0, 0, 0]));\n\
    echo \"largest_smallest_integers([-1, 0, 1])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ 0, 1]));\necho \"largest_smallest_integers([])\\n\";\nvar_dump(largest_smallest_integers([]));\n\
    echo \"largest_smallest_integers([-1])\\n\";\nvar_dump(largest_smallest_integers([-1]));\n\
    echo \"largest_smallest_integers([1])\\n\";\nvar_dump(largest_smallest_integers([1]));\n\
    echo \"largest_smallest_integers([0])\\n\";\nvar_dump(largest_smallest_integers([0]));\n\
    echo \"largest_smallest_integers([-1, -2, -3, -4, -5", "    $negatives = [];\n\
    \    $positives = [];\n    foreach ($lst as $value) {\n        if ($value < 0)\
    \ {\n            $negatives[] = $value;\n        } elseif ($value > 0) {\n   \
    \         $positives[] = $value;\n        }\n    }\n    if (count($negatives)\
    \ == 0 || count($positives) == 0) {\n        return null;\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num)\
    \ {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (empty($neg) || empty($pos)) {\n    return null;\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return\
    \ [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) ||\
    \ empty($pos)) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ > 0 && count($pos) > 0) {\n    return [max($neg), min($pos)];\n  } else {\n\
    \    return [null, null];\n  }\n}\n", "    $negatives = array_filter($lst, function($item)\
    \ {\n        return $item < 0;\n    });\n    $positives = array_filter($lst, function($item)\
    \ {\n        return $item > 0;\n    });\n    $negatives = empty($negatives) ?\
    \ null : max($negatives);\n    $positives = empty($positives) ? null : min($positives);\n\
    \    return [$negatives, $positives];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0)\
    \ {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n\n$a\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15];\n$b = [0, -1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10];\n$c = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\
    \nvar_dump(largest_smallest_integers($a)); // [-11, 2]\nvar_dump(largest_smallest_integers($b));\
    \ // [-10, null]\nvar_dump(largest_smallest_integers($c)); // [null, 1]", "  \
    \  $neg = [];\n    $pos = [];\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            $neg[] = $item;\n        } else {\n            $pos[] =\
    \ $item;\n        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return\
    \ [null, null];\n    }\n    return [max($neg), min($pos)];\n}\n", "    $neg =\
    \ [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n\
    \            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n  \
    \      }\n    }\n    if (count($neg) == 0) {\n        $neg[] = null;\n    }\n\
    \    if (count($pos) == 0) {\n        $pos[] = null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return [null,\
    \ null];\n  }\n  return [max($neg), min($pos)];\n}\n", "    $negatives = [];\n\
    \    $positives = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n\
    \            $negatives[] = $num;\n        } elseif ($num > 0) {\n           \
    \ $positives[] = $num;\n        }\n    }\n    if (count($negatives) === 0 || count($positives)\
    \ === 0) {\n        return null;\n    }\n    return [max($negatives), min($positives)];\n\
    }\n\nvar_dump(largest_smallest_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]));\
    \ // [5, -5]\nvar_dump(largest_smallest_integers([1, 2, 3, 4, 5])); // null\n\
    var_dump(largest_smallest_integers([-1, -2, -3, -4, -5])); // null\nvar_dump(largest_smallest_integers([0,\
    \ 0, 0, 0, 0])); // null\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5, 1, 2, 3, 4, 5])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2,\
    \ -3, -4, -5, 0, 0, 0, 0, 0])); // [-1, 0]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, -1, -2, -3, -4, -5])); // [-1, -1]\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5])); // [5, 1]\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 0, 0, 0, 0, 0])); // [5, 0]\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5, -1, -2, -3, -4, -5, 1, 2, 3", "  $negatives = [];\n  $positives\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $negatives[] =\
    \ $num;\n    } else {\n      $positives[] = $num;\n    }\n  }\n  if (count($negatives)\
    \ == 0 || count($positives) == 0) {\n    return [null, null];\n  }\n  return [max($negatives),\
    \ min($positives)];\n}\n", "    $negatives = [];\n    $positives = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $negatives[] = $num;\n\
    \        } else {\n            $positives[] = $num;\n        }\n    }\n    if\
    \ (empty($negatives) || empty($positives)) {\n        return [null, null];\n \
    \   }\n    return [max($negatives), min($positives)];\n}\n", "  $neg = [];\n \
    \ $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) ===\
    \ 0 || count($pos) === 0) {\n    return [null, null];\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n", "    $negatives = [];\n    $positives = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $negatives[] = $num;\n\
    \        } elseif ($num > 0) {\n            $positives[] = $num;\n        }\n\
    \    }\n    if (empty($negatives) || empty($positives)) {\n        return null;\n\
    \    }\n    return [max($negatives), min($positives)];\n}\n", "    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $negatives[] = $num;\n        } else {\n            $positives[]\
    \ = $num;\n        }\n    }\n    if (count($negatives) > 0 && count($positives)\
    \ > 0) {\n        return [max($negatives), min($positives)];\n    } else {\n \
    \       return [null, null];\n    }\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) > 0) {\n    $a = max($neg);\n\
    \  } else {\n    $a = null;\n  }\n  if (count($pos) > 0) {\n    $b = min($pos);\n\
    \  } else {\n    $b = null;\n  }\n  return [$a, $b];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) || empty($pos))\
    \ {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", " \
    \ $negatives = array_filter($lst, function($n) { return $n < 0; });\n  $positives\
    \ = array_filter($lst, function($n) { return $n > 0; });\n  if (count($negatives)\
    \ == 0 || count($positives) == 0) {\n    return [null, null];\n  }\n  return [max($negatives),\
    \ min($positives)];\n}\n\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5])); // [-5, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, 5]));\
    \ // [-1, 5]\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5])); // [-1,\
    \ 4]\nvar_dump(largest_smallest_integers([-1, 2, -3, 4, 5])); // [-1, 2]\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5])); // [null, null]\nvar_dump(largest_smallest_integers([-1, -2,\
    \ -3, -4, -5, 0])); // [-5, 0]\nvar_dump(largest_smallest_integers([-1, -2, -3,\
    \ -4, -5, -6])); // [-1, null]\nvar_dump(largest_smallest_integers([1, 2, 3, 4,\
    \ 5, 6])); // [null, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5,\
    \ -6, 0])); // [-5, 0]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5,\
    \ -6, 0, 1])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5, -6, 0, 1, 2])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1", " \
    \   $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } else {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) === 0 || count($pos) === 0) {\n       \
    \ return null;\n    }\n    return [max($neg), min($pos)];\n}\n", "    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $negatives[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $positives[] = $num;\n        }\n    }\n    if (count($negatives) ==\
    \ 0 || count($positives) == 0) {\n        return null;\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n\n$lst = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nprint_r(largest_smallest_integers($lst));",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n        \
    \    $pos[] = $num;\n        }\n    }\n    if (count($neg) == 0) {\n        $neg[]\
    \ = null;\n    }\n    if (count($pos) == 0) {\n        $pos[] = null;\n    }\n\
    \    return [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n \
    \   foreach ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n\
    \        } else {\n            $pos[] = $num;\n        }\n    }\n    if (count($neg)\
    \ == 0 || count($pos) == 0) {\n        return null;\n    }\n    return [max($neg),\
    \ min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n\
    \    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n\
    \    }\n  }\n  if (count($neg) === 0 || count($pos) === 0) {\n    return [null,\
    \ null];\n  }\n  return [max($neg), min($pos)];\n}\n\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5])\\n\";\nvar_dump(largest_smallest_integers([-1, -2, -3, -4,\
    \ -5]));\necho \"largest_smallest_integers([0, 1, 2, 3, 4, 5])\\n\";\nvar_dump(largest_smallest_integers([0,\
    \ 1, 2, 3, 4, 5]));\necho \"largest_smallest_integers([-1, -2, -3, -4, -5, 0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\\n\";\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15])\\\
    n\";\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5,\
    \ 6, 7,", "    $negatives = array_filter($lst, function($n) { return $n < 0; });\n\
    \    $positives = array_filter($lst, function($n) { return $n > 0; });\n    if\
    \ (count($negatives) == 0 || count($positives) == 0) {\n        return array(null,\
    \ null);\n    }\n    return array(max($negatives), min($positives));\n}\n", " \
    \ $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) == 0 || count($pos) == 0) {\n    return [null, null];\n  }\n\
    \  return [max($neg), min($pos)];\n}\n\nprint_r(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5])); // [-5, 1]\nprint_r(largest_smallest_integers([-1, -2, -3,\
    \ -4, 5])); // [-1, 5]\nprint_r(largest_smallest_integers([-1, -2, -3, -4, -5,\
    \ 5])); // [-5, 5]\nprint_r(largest_smallest_integers([1, 2, 3, 4, 5])); // [null,\
    \ null]\nprint_r(largest_smallest_integers([-1, -2, -3, -4, -5, 0])); // [-5,\
    \ 0]", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) === 0 || count($pos) === 0) {\n    return [null, null];\n \
    \ }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n  $pos = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n\
    \      $pos[] = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos) ===\
    \ 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n", "  $negatives\
    \ = [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $negatives[] = $num;\n    } elseif ($num > 0) {\n      $positives[] = $num;\n\
    \    }\n  }\n  if (empty($negatives) || empty($positives)) {\n    return null;\n\
    \  }\n  return [max($negatives), min($positives)];\n}\n", "  $neg = [];\n  $pos\
    \ = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n\
    \    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos)\
    \ == 0) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n\
    \nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5]));\
    \ // [-5, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5])); // [-1,\
    \ null]\nvar_dump(largest_smallest_integers([0, 1, 2, 3, 4, 5])); // [null, 1]\n\
    var_dump(largest_smallest_integers([-1, 0, 1])); // [-1, 1]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [-5, 1]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]));\
    \ // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]));\
    \ // [-1, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9", "    $neg = [];\n    $pos = [];\n    foreach ($lst as\
    \ $v) {\n        if ($v < 0) {\n            $neg[] = $v;\n        } elseif ($v\
    \ > 0) {\n            $pos[] = $v;\n        }\n    }\n    if (empty($neg) || empty($pos))\
    \ {\n        return null;\n    }\n    return [max($neg), min($pos)];\n}\n", " \
    \ $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return NULL;\n  }\n  return [max($neg), min($pos)];\n\
    }\n\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15];\nprint_r(largest_smallest_integers($lst));",
  "    $negatives = [];\n    $positives = [];\n    foreach ($lst as $num) {\n    \
    \    if ($num < 0) {\n            $negatives[] = $num;\n        } else {\n   \
    \         $positives[] = $num;\n        }\n    }\n    if (empty($negatives) ||\
    \ empty($positives)) {\n        return null;\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } elseif\
    \ ($num > 0) {\n      $positives[] = $num;\n    }\n  }\n  if (count($negatives)\
    \ === 0 || count($positives) === 0) {\n    return null;\n  }\n  return [max($negatives),\
    \ min($positives)];\n}\n", "  $negatives = [];\n  $positives = [];\n  foreach\
    \ ($lst as $num) {\n    if ($num < 0) {\n      $negatives[] = $num;\n    } else\
    \ {\n      $positives[] = $num;\n    }\n  }\n  if (count($negatives) === 0 ||\
    \ count($positives) === 0) {\n    return [null, null];\n  }\n  return [max($negatives),\
    \ min($positives)];\n}\n\necho \"largest_smallest_integers([-1, -2, -3, 4, 5])\\\
    n\";\nvar_dump(largest_smallest_integers([-1, -2, -3, 4, 5]));\necho \"largest_smallest_integers([-1,\
    \ -2, -3])\\n\";\nvar_dump(largest_smallest_integers([-1, -2, -3]));\necho \"\
    largest_smallest_integers([4, 5])\\n\";\nvar_dump(largest_smallest_integers([4,\
    \ 5]));\necho \"largest_smallest_integers([])\\n\";\nvar_dump(largest_smallest_integers([]));\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $n) {\n    if ($n < 0) {\n     \
    \ $neg[] = $n;\n    } else {\n      $pos[] = $n;\n    }\n  }\n  if (count($neg)\
    \ > 0 && count($pos) > 0) {\n    return [max($neg), min($pos)];\n  } else {\n\
    \    return [null, null];\n  }\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst\
    \ as $val) {\n    if ($val < 0) {\n      $neg[] = $val;\n    } else {\n      $pos[]\
    \ = $val;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return\
    \ [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) ==\
    \ 0 || count($pos) == 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n\
    }\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num <\
    \ 0) {\n      $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n\
    \  if (count($neg) > 0 && count($pos) > 0) {\n    return [max($neg), min($pos)];\n\
    \  } else {\n    return [null, null];\n  }\n}\n\n$a = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, -11, -12, -13, -14, -15];\n$b = [0, -1, -2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10];\n$c = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nprint_r(largest_smallest_integers($a));\n\
    print_r(largest_smallest_integers($b));\nprint_r(largest_smallest_integers($c));\n",
  "    $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n        \
    \    $pos[] = $num;\n        }\n    }\n    if (count($neg) > 0 && count($pos)\
    \ > 0) {\n        return [max($neg), min($pos)];\n    } else {\n        return\
    \ [null, null];\n    }\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as\
    \ $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } elseif ($num > 0)\
    \ {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg) === 0 || count($pos)\
    \ === 0) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); // [-5, 1]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])); // [-1, null]\nvar_dump(largest_smallest_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])); // [null, 1]\nvar_dump(largest_smallest_integers([0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])); // [null, null]\nvar_dump(largest_smallest_integers([-1,\
    \ -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5])); //\
    \ [-5, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5, 0, 1, 2, 3,\
    \ 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 1, 2, 3,\
    \ 4, 5])); // [-5, 1]\nvar_dump(largest_smallest_integers([-1, -2, -3, -4, -5,\
    \ 0, 1, 2, 3, 4, 5, -1, -2, -3,", "    $negatives = [];\n    $positives = [];\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            $negatives[]\
    \ = $num;\n        } elseif ($num > 0) {\n            $positives[] = $num;\n \
    \       }\n    }\n    if (count($negatives) > 0 && count($positives) > 0) {\n\
    \        return [max($negatives), min($positives)];\n    } else {\n        return\
    \ [null, null];\n    }\n}\n", "  $neg = [];\n  $pos = [];\n  foreach ($lst as\
    \ $num) {\n    if ($num < 0) {\n      $neg[] = $num;\n    } else {\n      $pos[]\
    \ = $num;\n    }\n  }\n  if (count($neg) == 0 || count($pos) == 0) {\n    return\
    \ [null, null];\n  }\n  return [max($neg), min($pos)];\n}\n", "  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg) ||\
    \ empty($pos)) {\n    return null;\n  }\n  return [max($neg), min($pos)];\n}\n",
  "  $neg = [];\n  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $neg[] = $num;\n    } else {\n      $pos[] = $num;\n    }\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n", "    $neg = [];\n    $pos = [];\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            $neg[] = $num;\n    \
    \    } elseif ($num > 0) {\n            $pos[] = $num;\n        }\n    }\n   \
    \ if (count($neg) == 0 || count($pos) == 0) {\n        return null;\n    }\n \
    \   return [max($neg), min($pos)];\n}\n", "    $negatives = [];\n    $positives\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $negatives[]\
    \ = $num;\n        } elseif ($num > 0) {\n            $positives[] = $num;\n \
    \       }\n    }\n    if (count($negatives) === 0) {\n        $negatives[] = null;\n\
    \    }\n    if (count($positives) === 0) {\n        $positives[] = null;\n   \
    \ }\n    return [max($negatives), min($positives)];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
