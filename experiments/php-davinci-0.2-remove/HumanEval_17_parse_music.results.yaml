language: php
name: HumanEval_17_parse_music
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' && $notes[$key + 1] == '|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.' && $notes[$key + 1] == '|')\
    \ {\n            $beat += 1;\n        }\n    }\n    return $beat;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gaj5uxl.php:30\n\
    Stack trace:\n#0 /tmp/tmp3gaj5uxl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3gaj5uxl.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map(function($item) {\n        return (int)$item;\n\
    \    }, $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsf8u_0wh.php:28\n\
    Stack trace:\n#0 /tmp/tmpsf8u_0wh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsf8u_0wh.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8na0h6zo.php:31\n\
    Stack trace:\n#0 /tmp/tmp8na0h6zo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8na0h6zo.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($music_array as $note) {\n        if ($note == 'o') {\n \
    \           $note_length = 4;\n        } elseif ($note == 'o' && $note == '|')\
    \ {\n            $note_length = 2;\n        } elseif ($note == '.' && $note ==\
    \ '|') {\n            $note_length = 1;\n        }\n        $result[] = $note_length;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvael442x.php:31\n\
    Stack trace:\n#0 /tmp/tmpvael442x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvael442x.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        }\n        $beats[]\
    \ = $beat;\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvi66o9v.php:31\n\
    Stack trace:\n#0 /tmp/tmpwvi66o9v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwvi66o9v.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $music_array_length = count($music_array);\n\
    \    $music_array_new = [];\n    $music_array_new_index = 0;\n    for ($i = 0;\
    \ $i < $music_array_length; $i++) {\n        if ($music_array[$i] === 'o') {\n\
    \            $music_array_new[$music_array_new_index] = 4;\n            $music_array_new_index++;\n\
    \        } elseif ($music_array[$i] === 'o' && $music_array[$i + 1] === '|') {\n\
    \            $music_array_new[$music_array_new_index] = 2;\n            $music_array_new_index++;\n\
    \            $i++;\n        } elseif ($music_array[$i] === '.' && $music_array[$i\
    \ + 1] === '|') {\n            $music_array_new[$music_array_new_index] = 1;\n\
    \            $music_array_new_index++;\n            $i++;\n        }\n    }\n\
    \    return $music_array_new;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2s62bcg.php:39\n\
    Stack trace:\n#0 /tmp/tmpv2s62bcg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv2s62bcg.php\
    \ on line 39\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimi7roj8.php:32\n\
    Stack trace:\n#0 /tmp/tmpimi7roj8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpimi7roj8.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_string = str_replace('o|', 'o| ', $music_string);\n\
    \    $music_string = str_replace('.|', '.| ', $music_string);\n    $music_string\
    \ = str_replace('o', 'o ', $music_string);\n    $music_string = str_replace('.',\
    \ '. ', $music_string);\n    $music_string = str_replace('|', '| ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = trim($music_string);\n    $music_string = explode(' ', $music_string);\n \
    \   foreach ($music_string as $note) {\n        if ($note == 'o') {\n        \
    \    $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho0ro76.php:38\n\
    Stack trace:\n#0 /tmp/tmpnho0ro76.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnho0ro76.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $notes = str_split($music_string);\n  $result = [];\n  $current_note =\
    \ '';\n  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $current_note\
    \ .= $note;\n    } elseif ($note == '|') {\n      $result[] = strlen($current_note);\n\
    \      $current_note = '';\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe0nblww.php:30\n\
    Stack trace:\n#0 /tmp/tmpoe0nblww.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpoe0nblww.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimi7roj8.php:32\n\
    Stack trace:\n#0 /tmp/tmpimi7roj8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpimi7roj8.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: -1
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_array = str_split($music_string);\n    $music_array_count\
    \ = count($music_array);\n    $i = 0;\n    while ($i < $music_array_count) {\n\
    \        if ($music_array[$i] == 'o') {\n            $result[] = 4;\n        \
    \    $i += 1;\n        } elseif ($music_array[$i] == 'o' && $music_array[$i +\
    \ 1] == '|') {\n            $result[] = 2;\n            $i += 2;\n        } elseif\
    \ ($music_array[$i] == '.' && $music_array[$i + 1] == '|') {\n            $result[]\
    \ = 1;\n            $i += 2;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730873
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $current_beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_beat += 4;\n        } elseif ($note == 'o' || $note == '|') {\n\
    \            $current_beat += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $current_beat += 1;\n        }\n        $beats[] = $current_beat;\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0ong7q9.php:31\n\
    Stack trace:\n#0 /tmp/tmpj0ong7q9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpj0ong7q9.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n    $result = [];\n    $music_string\
    \ = str_replace(' ', '', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', '\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_2j5im_i.php on line 32

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_string = str_replace('o', 'o|o|o|o|', $music_string);\n  $music_string\
    \ = str_replace('o|', '4', $music_string);\n  $music_string = str_replace('.|',\
    \ '1', $music_string);\n  $music_string = str_replace('|', ' ', $music_string);\n\
    \  $music_string = trim($music_string);\n  $music_string = explode(' ', $music_string);\n\
    \  return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizqhni13.php:24\n\
    Stack trace:\n#0 /tmp/tmpizqhni13.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpizqhni13.php\
    \ on line 24\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = explode(' ', $music_string);\n    $music_string = array_filter($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8bc7vna.php:26\n\
    Stack trace:\n#0 /tmp/tmps8bc7vna.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps8bc7vna.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '|', $music_string);\n    $music_string\
    \ = str_replace('o', '|', $music_string);\n    $music_string = str_replace('.',\
    \ '|', $music_string);\n    $music_string = str_replace('|', '| ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    $music_string = array_count_values($music_string);\n    $music_string = array_values($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07_yi_jv.php:26\n\
    Stack trace:\n#0 /tmp/tmp07_yi_jv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp07_yi_jv.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 1) {\n  \
    \              $result[] = 4;\n            } elseif (strlen($current_note) ==\
    \ 2) {\n                $result[] = 2;\n            } elseif (strlen($current_note)\
    \ == 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        } elseif ($note == '.') {\n            $current_note .= $note;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3six52gx.php:39\n\
    Stack trace:\n#0 /tmp/tmp3six52gx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3six52gx.php\
    \ on line 39\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o|o|', $music_string);\n    $music_string\
    \ = str_replace('o', 'o|o|o|o|', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = explode(' ', $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5vo4ovc.php:24\n\
    Stack trace:\n#0 /tmp/tmpj5vo4ovc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj5vo4ovc.php\
    \ on line 24\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = explode(' ', $music_string);\n    $music_string = array_filter($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8bc7vna.php:26\n\
    Stack trace:\n#0 /tmp/tmps8bc7vna.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps8bc7vna.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n      \
    \      $note_length += 4;\n        } elseif ($note === 'o' || $note === '|') {\n\
    \            $note_length += 2;\n        } elseif ($note === '.' || $note ===\
    \ '|') {\n            $note_length += 1;\n        } elseif ($note === ' ') {\n\
    \            $result[] = $note_length;\n            $note_length = 0;\n      \
    \  }\n    }\n    $result[] = $note_length;\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfoygo0bp.php:34\n\
    Stack trace:\n#0 /tmp/tmpfoygo0bp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfoygo0bp.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $notes = str_split($music_string);\n  $beats = [];\n  $beat = 0;\n  foreach\
    \ ($notes as $note) {\n    if ($note == 'o') {\n      $beat += 4;\n    } elseif\
    \ ($note == 'o|') {\n      $beat += 2;\n    } elseif ($note == '.|') {\n     \
    \ $beat += 1;\n    }\n    $beats[] = $beat;\n  }\n  return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xhtu2e1.php:31\n\
    Stack trace:\n#0 /tmp/tmp6xhtu2e1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6xhtu2e1.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '|', $music_string);\n    $music_string\
    \ = str_replace('o', '|', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_split($music_string);\n    $music_string = array_map('intval', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07jla856.php:25\n\
    Stack trace:\n#0 /tmp/tmp07jla856.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp07jla856.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $notes = str_split($music_string);\n  $result = [];\n  $current_note =\
    \ 0;\n  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $current_note\
    \ += 4;\n    } elseif ($note == '|') {\n      $result[] = $current_note;\n   \
    \   $current_note = 0;\n    } else {\n      $current_note += 1;\n    }\n  }\n\
    \  $result[] = $current_note;\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zdfuqn2.php:32\n\
    Stack trace:\n#0 /tmp/tmp6zdfuqn2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6zdfuqn2.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdacef4p.php:35\n\
    Stack trace:\n#0 /tmp/tmpfdacef4p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfdacef4p.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gd9xc5.php:26\n\
    Stack trace:\n#0 /tmp/tmp63gd9xc5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63gd9xc5.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gd9xc5.php:26\n\
    Stack trace:\n#0 /tmp/tmp63gd9xc5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63gd9xc5.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $output = [];\n    $count = 0;\n\
    \    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $note_length = 4;\n        } elseif ($note == '|') {\n \
    \           $note_length = $note_length / 2;\n        } elseif ($note == '.')\
    \ {\n            $note_length = 1;\n        }\n        $output[$count] = $note_length;\n\
    \        $count++;\n    }\n    return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwy5rxjru.php:33\n\
    Stack trace:\n#0 /tmp/tmpwy5rxjru.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwy5rxjru.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n    $result = [];\n    $music_string\
    \ = str_replace(' ', '', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    for ($i = 0; $i < strlen($music_string); $i++) {\n\
    \        if ($music_string[$i] === 'o') {\n            if ($music_string[$i +\
    \ 1] === '|') {\n                $result[] = $notes['o|'];\n                $i++;\n\
    \            } else {\n                $result[] = $notes['o'];\n            }\n\
    \        } else {\n            $result[] = $notes['.|'];\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kcgtrom.php:37\n\
    Stack trace:\n#0 /tmp/tmp9kcgtrom.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9kcgtrom.php\
    \ on line 37\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $count = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o' && $notes[$count + 1] == '|') {\n     \
    \       $result[] = 2;\n        } elseif ($note == '.' && $notes[$count + 1] ==\
    \ '|') {\n            $result[] = 1;\n        }\n        $count++;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp2trvlb.php:34\n\
    Stack trace:\n#0 /tmp/tmpnp2trvlb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnp2trvlb.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '|', $music_string);\n    $music_string\
    \ = str_replace('o', '|', $music_string);\n    $music_string = str_replace('.',\
    \ '|', $music_string);\n    $music_string = str_replace('|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_replace('|', ' ', $music_string);\n    $music_string = str_replace('1',\
    \ '|', $music_string);\n    $music_string = trim($music_string);\n    $music_string\
    \ = explode(' ', $music_string);\n    $music_string = array_map('intval', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dd9e0_2.php:28\n\
    Stack trace:\n#0 /tmp/tmp_dd9e0_2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_dd9e0_2.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', 'o', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_split($music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxzhhuia.php:24\n\
    Stack trace:\n#0 /tmp/tmplxzhhuia.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplxzhhuia.php\
    \ on line 24\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $current_beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_beat += 4;\n        } elseif ($note == 'o' || $note == '|') {\n\
    \            $current_beat += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $current_beat += 1;\n        }\n        $beats[] = $current_beat;\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0ong7q9.php:31\n\
    Stack trace:\n#0 /tmp/tmpj0ong7q9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpj0ong7q9.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_string = str_replace('o|', '1', $music_string);\n  $music_string\
    \ = str_replace('o', '4', $music_string);\n  $music_string = str_replace('.|',\
    \ '2', $music_string);\n  $music_string = str_replace('|', '', $music_string);\n\
    \  $music_string = str_replace(' ', '', $music_string);\n  $music_string = str_replace('.',\
    \ '', $music_string);\n  $music_string = str_split($music_string);\n  $music_string\
    \ = array_map('intval', $music_string);\n  return $music_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewnp9d78.php:26\n\
    Stack trace:\n#0 /tmp/tmpewnp9d78.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpewnp9d78.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n    $result = [];\n    $music_string\
    \ = str_replace(' ', '', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', '\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_2j5im_i.php on line 32

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    $result[] = $note_length;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxqhq33d.php:32\n\
    Stack trace:\n#0 /tmp/tmpkxqhq33d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkxqhq33d.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8na0h6zo.php:31\n\
    Stack trace:\n#0 /tmp/tmp8na0h6zo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8na0h6zo.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    $current_note_length = 0;\n    foreach ($notes as $note) {\n    \
    \    if ($note == 'o') {\n            if ($current_note_length != 0) {\n     \
    \           $result[] = $current_note_length;\n            }\n            $current_note_length\
    \ = 4;\n        } elseif ($note == '|') {\n            $current_note_length /=\
    \ 2;\n        } elseif ($note == '.') {\n            $current_note_length += 1;\n\
    \        }\n    }\n    $result[] = $current_note_length;\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc63hpt3q.php:35\n\
    Stack trace:\n#0 /tmp/tmpc63hpt3q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc63hpt3q.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',', ' ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxutopqh6.php:28\n\
    Stack trace:\n#0 /tmp/tmpxutopqh6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxutopqh6.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gd9xc5.php:26\n\
    Stack trace:\n#0 /tmp/tmp63gd9xc5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63gd9xc5.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      if ($current_note == 'o') {\n                $result[] = 4;\n         \
    \   } else {\n                $result[] = 4;\n                $current_note =\
    \ 'o';\n            }\n        } elseif ($note == '|') {\n            if ($current_note\
    \ == 'o') {\n                $result[] = 2;\n            } else {\n          \
    \      $result[] = 1;\n            }\n        } elseif ($note == '.') {\n    \
    \        $result[] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwl8wvw3.php:41\n\
    Stack trace:\n#0 /tmp/tmptwl8wvw3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmptwl8wvw3.php\
    \ on line 41\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $count = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o') {\n            $result[] = 2;\n      \
    \  } elseif ($note == '.') {\n            $result[] = 1;\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqcpwjga.php:33\n\
    Stack trace:\n#0 /tmp/tmpfqcpwjga.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfqcpwjga.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_string = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_string as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        } elseif ($note\
    \ == '.') {\n            $result[] = 1;\n        } elseif ($note == '|') {\n \
    \           $result[] = 0;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljpkyqt3.php:42\n\
    Stack trace:\n#0 /tmp/tmpljpkyqt3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpljpkyqt3.php\
    \ on line 42\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n      \
    \      $note_length += 4;\n        } elseif ($note === '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    $result[] = $note_length;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen5t_j_y.php:32\n\
    Stack trace:\n#0 /tmp/tmpen5t_j_y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpen5t_j_y.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    return str_split($music_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnrrcs3g.php:23\n\
    Stack trace:\n#0 /tmp/tmppnrrcs3g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppnrrcs3g.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_string as $char) {\n        $result[]\
    \ = (int)$char;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplg_tcg1i.php:29\n\
    Stack trace:\n#0 /tmp/tmplg_tcg1i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplg_tcg1i.php\
    \ on line 29\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n     \
    \       $current_note .= $note;\n        } elseif ($note === '|') {\n        \
    \    $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        } elseif ($note === '.') {\n       \
    \     $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv_y_7_z.php:35\n\
    Stack trace:\n#0 /tmp/tmprv_y_7_z.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprv_y_7_z.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        }\n        $beats[]\
    \ = $beat;\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvi66o9v.php:31\n\
    Stack trace:\n#0 /tmp/tmpwvi66o9v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwvi66o9v.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $current_beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_beat += 4;\n        } elseif ($note == 'o|') {\n            $current_beat\
    \ += 2;\n        } elseif ($note == '.|') {\n            $current_beat += 1;\n\
    \        }\n        $beats[] = $current_beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpalqdw0mp.php:31\n\
    Stack trace:\n#0 /tmp/tmpalqdw0mp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpalqdw0mp.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcuezgall.php on line 36

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_string = str_replace('o|', 'o', $music_string);\n  $music_string\
    \ = str_replace('.|', '.', $music_string);\n  $music_string = str_replace('o',\
    \ '4', $music_string);\n  $music_string = str_replace('.', '1', $music_string);\n\
    \  $music_string = str_replace('|', '', $music_string);\n  $music_string = str_split($music_string);\n\
    \  $music_string = array_map('intval', $music_string);\n  return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcorlx85x.php:25\n\
    Stack trace:\n#0 /tmp/tmpcorlx85x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcorlx85x.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', 'o', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_split($music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxzhhuia.php:24\n\
    Stack trace:\n#0 /tmp/tmplxzhhuia.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplxzhhuia.php\
    \ on line 24\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $result = [];\n    $count\
    \ = 0;\n    foreach ($music_array as $key => $value) {\n        if ($value ==\
    \ 'o') {\n            $result[$count] = 4;\n            $count++;\n        } elseif\
    \ ($value == 'o' && $music_array[$key + 1] == '|') {\n            $result[$count]\
    \ = 2;\n            $count++;\n        } elseif ($value == '.' && $music_array[$key\
    \ + 1] == '|') {\n            $result[$count] = 1;\n            $count++;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmez2_953.php:36\n\
    Stack trace:\n#0 /tmp/tmpmez2_953.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmez2_953.php\
    \ on line 36\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_string = str_replace('o|', 'o| ', $music_string);\n\
    \    $music_string = str_replace('.|', '.| ', $music_string);\n    $music_string\
    \ = str_replace('o', 'o ', $music_string);\n    $music_string = str_replace('.',\
    \ '. ', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = trim($music_string);\n    $music_string = explode(' ', $music_string);\n \
    \   foreach ($music_string as $note) {\n        switch ($note) {\n           \
    \ case 'o':\n                $result[] = 4;\n                break;\n        \
    \    case 'o|':\n                $result[] = 2;\n                break;\n    \
    \        case '.|':\n                $result[] = 1;\n                break;\n\
    \            case '.':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp006r14hx.php:46\n\
    Stack trace:\n#0 /tmp/tmp006r14hx.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp006r14hx.php\
    \ on line 46\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_string = str_replace('o|', 'o', $music_string);\n  $music_string\
    \ = str_replace('.|', '.', $music_string);\n  $music_string = str_replace('o',\
    \ '4', $music_string);\n  $music_string = str_replace('.', '1', $music_string);\n\
    \  $music_string = str_replace('|', ' ', $music_string);\n  $music_string = trim($music_string);\n\
    \  $music_string = explode(' ', $music_string);\n  return $music_string;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps20gylql.php:25\n\
    Stack trace:\n#0 /tmp/tmps20gylql.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps20gylql.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_string = str_replace('o|', 'o| ', $music_string);\n  $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n  $music_string = str_replace('o',\
    \ 'o ', $music_string);\n  $music_string = str_replace('.', '. ', $music_string);\n\
    \  $music_string = str_replace('|', '| ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_string = str_replace('  ', ' ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_string = str_replace('  ', ' ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_string = str_replace('  ', ' ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_string = str_replace('  ', ' ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_string = str_replace('  ', ' ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_string = str_replace('  ', ' ', $music_string);\n  $music_string = str_replace('\
    \  ', ' ', $music_string);\n  $music_string = str_replace('  ', ' ', $music_string);\n\
    \  $music_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb8zjr0zg.php on line 36

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_note += 4;\n        } elseif ($note == 'o' || $note == '|') {\n\
    \            $current_note += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $current_note += 1;\n        } else {\n            $result[]\
    \ = $current_note;\n            $current_note = 0;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhcnsh_7.php:33\n\
    Stack trace:\n#0 /tmp/tmpxhcnsh_7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxhcnsh_7.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $length =\
    \ count($notes);\n    for ($i = 0; $i < $length; $i++) {\n        if ($notes[$i]\
    \ == 'o') {\n            $result[] = 4;\n        } elseif ($notes[$i] == 'o' &&\
    \ $notes[$i + 1] == '|') {\n            $result[] = 2;\n            $i++;\n  \
    \      } elseif ($notes[$i] == '.' && $notes[$i + 1] == '|') {\n            $result[]\
    \ = 1;\n            $i++;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5l09q86i.php:35\n\
    Stack trace:\n#0 /tmp/tmp5l09q86i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5l09q86i.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    if (strlen($current_note) == 1) {\n        $result[]\
    \ = 4;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuvelu9l.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuvelu9l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpeuvelu9l.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', 'o', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5etuqfz2.php:26\n\
    Stack trace:\n#0 /tmp/tmp5etuqfz2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5etuqfz2.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '1', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.|',\
    \ '2', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsncvq14e.php:26\n\
    Stack trace:\n#0 /tmp/tmpsncvq14e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsncvq14e.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = [\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n\
    \    ];\n    $result = [];\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = explode('|', $music_string);\n    foreach ($music_string\
    \ as $note) {\n        $result[] = $notes[$note];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_vpmgsc.php:29\n\
    Stack trace:\n#0 /tmp/tmp0_vpmgsc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0_vpmgsc.php\
    \ on line 29\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '.', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '0', $music_string);\n\
    \    $music_string = str_split($music_string);\n    $music_string = array_map(function($x)\
    \ {\n        return (int)$x;\n    }, $music_string);\n    $music_string = array_chunk($music_string,\
    \ 4);\n    $music_string = array_map(function($x) {\n        return array_sum($x);\n\
    \    }, $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsoxzbnf6.php:30\n\
    Stack trace:\n#0 /tmp/tmpsoxzbnf6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsoxzbnf6.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkb589muk.php on line 35

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    foreach ($notes\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $result[] = 4;\n                break;\n            case 'o|':\n         \
    \       $result[] = 2;\n                break;\n            case '.|':\n     \
    \           $result[] = 1;\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnptq5ey.php:35\n\
    Stack trace:\n#0 /tmp/tmpcnptq5ey.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcnptq5ey.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        if ($note == '|') {\n            $beats[] = $beat;\n\
    \            $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhzv0r6a.php:35\n\
    Stack trace:\n#0 /tmp/tmpqhzv0r6a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqhzv0r6a.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_string as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case '.':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmak7_ta.php:39\n\
    Stack trace:\n#0 /tmp/tmpqmak7_ta.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqmak7_ta.php\
    \ on line 39\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbfrpxhd.php:35\n\
    Stack trace:\n#0 /tmp/tmptbfrpxhd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptbfrpxhd.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimi7roj8.php:32\n\
    Stack trace:\n#0 /tmp/tmpimi7roj8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpimi7roj8.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note = '';\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.' || $note == '|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqifxwj62.php:32\n\
    Stack trace:\n#0 /tmp/tmpqifxwj62.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqifxwj62.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_string = str_replace('o|', 'o.|', $music_string);\n\
    \    $music_string = str_replace('o', 'o.o.o.o.', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_string = str_replace('|',\
    \ '0', $music_string);\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    foreach ($music_string as\
    \ $item) {\n        if ($item == 1) {\n            $result[] = 1;\n        } elseif\
    \ ($item == 0) {\n            $result[] = 0;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ely2b_6.php:32\n\
    Stack trace:\n#0 /tmp/tmp0ely2b_6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0ely2b_6.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    if (strlen($current_note) == 1) {\n        $result[]\
    \ = 4;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuvelu9l.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuvelu9l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpeuvelu9l.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $music_array_length = count($music_array);\n\
    \    $music_array_length_minus_one = $music_array_length - 1;\n    $music_array_length_minus_two\
    \ = $music_array_length - 2;\n    $music_array_length_minus_three = $music_array_length\
    \ - 3;\n    $music_array_length_minus_four = $music_array_length - 4;\n    $music_array_length_minus_five\
    \ = $music_array_length - 5;\n    $music_array_length_minus_six = $music_array_length\
    \ - 6;\n    $music_array_length_minus_seven = $music_array_length - 7;\n    $music_array_length_minus_eight\
    \ = $music_array_length - 8;\n    $music_array_length_minus_nine = $music_array_length\
    \ - 9;\n    $music_array_length_minus_ten = $music_array_length - 10;\n    $music_array_length_minus_eleven\
    \ = $music_array_length - 11;\n    $music_array_length_minus_twelve = $music_array_length\
    \ - 12;\n    $music_array_length_minus_thirteen = $music_array_length - 13;\n\
    \    $music_array_length_minus_fourteen = $music_array_length - 14;\n    $music_array_length_minus_fifteen\
    \ = $music_array_length - 15;\n    $music_array_length_minus_sixteen = $music_array_length\
    \ - 16;\n    $music_array_length_minus_seventeen = $music_array_length - 17;\n\
    \    $music_array_length_minus_eighteen = $music_array_length - 18;\n    $music_array_length_minus_nineteen\
    \ = $music_array_length - 19;\n    $music_array_length_minus_twenty = $music_array_length\
    \ - 20;\n    $music_array_length_minus_twenty_one = $music_array_length - 21;\n\
    \    $music_array\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfitn0343.php on line 34

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcuezgall.php on line 36

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('.', '.|', $music_string);\n    $music_array = explode('|', $music_string);\n\
    \    $music_array = array_filter($music_array);\n    $music_array = array_values($music_array);\n\
    \    $music_array_length = count($music_array);\n    for ($i = 0; $i < $music_array_length;\
    \ $i++) {\n        if ($music_array[$i] == 'o') {\n            $music_array[$i]\
    \ = 4;\n        } elseif ($music_array[$i] == '.|') {\n            $music_array[$i]\
    \ = 1;\n        } elseif ($music_array[$i] == 'o|') {\n            $music_array[$i]\
    \ = 2;\n        }\n    }\n    return $music_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6bv2091.php:34\n\
    Stack trace:\n#0 /tmp/tmpc6bv2091.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc6bv2091.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = 0;\n    foreach ($notes as $note) {\n        switch ($note) {\n          \
    \  case 'o':\n                $current_note += 4;\n                break;\n  \
    \          case 'o|':\n                $current_note += 2;\n                break;\n\
    \            case '.|':\n                $current_note += 1;\n               \
    \ break;\n            case '|':\n                $result[] = $current_note;\n\
    \                $current_note = 0;\n                break;\n        }\n    }\n\
    \    $result[] = $current_note;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6erd_pf.php:39\n\
    Stack trace:\n#0 /tmp/tmpo6erd_pf.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpo6erd_pf.php\
    \ on line 39\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',', ' ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxutopqh6.php:28\n\
    Stack trace:\n#0 /tmp/tmpxutopqh6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxutopqh6.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        }\n        $beats[]\
    \ = $beat;\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvi66o9v.php:31\n\
    Stack trace:\n#0 /tmp/tmpwvi66o9v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwvi66o9v.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' && $notes[$key + 1] == '|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.' && $notes[$key + 1] == '|')\
    \ {\n            $beat += 1;\n        }\n    }\n    return $beat;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gaj5uxl.php:30\n\
    Stack trace:\n#0 /tmp/tmp3gaj5uxl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3gaj5uxl.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_array = str_split($music_string);\n  $music_array_length = count($music_array);\n\
    \  $music_array_result = [];\n  $music_array_result_index = 0;\n  for ($i = 0;\
    \ $i < $music_array_length; $i++) {\n    if ($music_array[$i] == 'o') {\n    \
    \  $music_array_result[$music_array_result_index] = 4;\n      $music_array_result_index++;\n\
    \    }\n    elseif ($music_array[$i] == 'o' && $music_array[$i + 1] == '|') {\n\
    \      $music_array_result[$music_array_result_index] = 2;\n      $music_array_result_index++;\n\
    \      $i++;\n    }\n    elseif ($music_array[$i] == '.' && $music_array[$i +\
    \ 1] == '|') {\n      $music_array_result[$music_array_result_index] = 1;\n  \
    \    $music_array_result_index++;\n      $i++;\n    }\n  }\n  return $music_array_result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputvtdgna.php:41\n\
    Stack trace:\n#0 /tmp/tmputvtdgna.php(45): test()\n#1 {main}\n  thrown in /tmp/tmputvtdgna.php\
    \ on line 41\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    $result[] = $note_length;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxqhq33d.php:32\n\
    Stack trace:\n#0 /tmp/tmpkxqhq33d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkxqhq33d.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $count = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o' && $notes[$count + 1] == '|') {\n     \
    \       $result[] = 2;\n        } elseif ($note == '.' && $notes[$count + 1] ==\
    \ '|') {\n            $result[] = 1;\n        }\n        $count++;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp2trvlb.php:34\n\
    Stack trace:\n#0 /tmp/tmpnp2trvlb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnp2trvlb.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_note += 4;\n        } elseif ($note == 'o' || $note == '|') {\n\
    \            $current_note += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $current_note += 1;\n        } else {\n            $result[]\
    \ = $current_note;\n            $current_note = 0;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhcnsh_7.php:33\n\
    Stack trace:\n#0 /tmp/tmpxhcnsh_7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxhcnsh_7.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = explode('|', $music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_rgg800.php:23\n\
    Stack trace:\n#0 /tmp/tmpt_rgg800.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpt_rgg800.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $result[] = $beat;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk2yd541g.php:31\n\
    Stack trace:\n#0 /tmp/tmpk2yd541g.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk2yd541g.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n     \
    \       if ($current_note === 'o') {\n                $result[] = 4;\n       \
    \     } else {\n                $result[] = 4;\n                $current_note\
    \ = 'o';\n            }\n        } else if ($note === 'o' || $note === '|') {\n\
    \            if ($current_note === 'o') {\n                $result[] = 2;\n  \
    \          } else {\n                $result[] = 2;\n                $current_note\
    \ = 'o';\n            }\n        } else if ($note === '.' || $note === '|') {\n\
    \            if ($current_note === '.') {\n                $result[] = 1;\n  \
    \          } else {\n                $result[] = 1;\n                $current_note\
    \ = '.';\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4op17el.php:47\n\
    Stack trace:\n#0 /tmp/tmpu4op17el.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpu4op17el.php\
    \ on line 47\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        }\n        if ($note\
    \ == '|') {\n            $beats[] = $beat;\n            $beat = 0;\n        }\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6oot20kg.php:35\n\
    Stack trace:\n#0 /tmp/tmp6oot20kg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6oot20kg.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == '|') {\n            $beats[] = $beat;\n  \
    \          $beat = 0;\n        } else {\n            $beat += 1;\n        }\n\
    \    }\n    $beats[] = $beat;\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lup90yu.php:32\n\
    Stack trace:\n#0 /tmp/tmp2lup90yu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2lup90yu.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat_counter\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $beats[] = 4;\n            $beat_counter += 4;\n        } elseif ($note\
    \ == 'o' && $notes[$key + 1] == '|') {\n            $beats[] = 2;\n          \
    \  $beat_counter += 2;\n        } elseif ($note == '.' && $notes[$key + 1] ==\
    \ '|') {\n            $beats[] = 1;\n            $beat_counter += 1;\n       \
    \ }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq__4vt6.php:36\n\
    Stack trace:\n#0 /tmp/tmptq__4vt6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptq__4vt6.php\
    \ on line 36\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = preg_replace('/\\s+/', '', $music_string);\n    $music_string\
    \ = preg_replace('/\\|/', '', $music_string);\n    $music_string = preg_replace('/o/',\
    \ '4', $music_string);\n    $music_string = preg_replace('/\\./', '1', $music_string);\n\
    \    $music_string = preg_replace('/\\d+/', '$0 ', $music_string);\n    $music_string\
    \ = preg_replace('/\\s+/', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_string = explode(' ', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cgcx067.php:26\n\
    Stack trace:\n#0 /tmp/tmp7cgcx067.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7cgcx067.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_string = explode(' ', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tl0dbou.php:26\n\
    Stack trace:\n#0 /tmp/tmp_tl0dbou.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_tl0dbou.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    $result[] = $note_length;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxqhq33d.php:32\n\
    Stack trace:\n#0 /tmp/tmpkxqhq33d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkxqhq33d.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('.|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    foreach ($music_string as\
    \ $item) {\n        $result[] = (int)$item;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lr36wrf.php:28\n\
    Stack trace:\n#0 /tmp/tmp_lr36wrf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_lr36wrf.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = explode(' ', $music_string);\n    $music_string = array_filter($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8bc7vna.php:26\n\
    Stack trace:\n#0 /tmp/tmps8bc7vna.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps8bc7vna.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $count = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o') {\n            $result[] = 2;\n      \
    \  } elseif ($note == '.') {\n            $result[] = 1;\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqcpwjga.php:33\n\
    Stack trace:\n#0 /tmp/tmpfqcpwjga.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfqcpwjga.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gd9xc5.php:26\n\
    Stack trace:\n#0 /tmp/tmp63gd9xc5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63gd9xc5.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length = 4;\n        } elseif ($note == 'o' && $note == '|') {\n \
    \           $note_length = 2;\n        } elseif ($note == '.' && $note == '|')\
    \ {\n            $note_length = 1;\n        }\n        $result[] = $note_length;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0auhegv.php:31\n\
    Stack trace:\n#0 /tmp/tmpp0auhegv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp0auhegv.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '.', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '0', $music_string);\n\
    \    $music_string = str_split($music_string);\n    $result = [];\n    $count\
    \ = 0;\n    foreach ($music_string as $char) {\n        if ($char == '1') {\n\
    \            $count++;\n        } else {\n            $result[] = $count;\n  \
    \          $count = 0;\n        }\n    }\n    $result[] = $count;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_fz97wo.php:34\n\
    Stack trace:\n#0 /tmp/tmp7_fz97wo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7_fz97wo.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' && $notes[$key + 1] == '|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.' && $notes[$key + 1] == '|')\
    \ {\n            $beat += 1;\n        }\n    }\n    return $beat;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcg5ji7or.php:30\n\
    Stack trace:\n#0 /tmp/tmpcg5ji7or.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcg5ji7or.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1l7ycmw.php:34\n\
    Stack trace:\n#0 /tmp/tmpt1l7ycmw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt1l7ycmw.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    return str_split($music_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptc37q4ct.php:24\n\
    Stack trace:\n#0 /tmp/tmptc37q4ct.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptc37q4ct.php\
    \ on line 24\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    if (strlen($current_note) == 1) {\n        $result[]\
    \ = 4;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuvelu9l.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuvelu9l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpeuvelu9l.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $beats = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beats\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beats += 2;\n      \
    \  } elseif ($note == '.|') {\n            $beats += 1;\n        }\n    }\n  \
    \  $result[] = $beats;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1zg8vna.php:31\n\
    Stack trace:\n#0 /tmp/tmpy1zg8vna.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpy1zg8vna.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $count = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o' && $notes[$count + 1] == '|') {\n     \
    \       $result[] = 2;\n        } elseif ($note == '.' && $notes[$count + 1] ==\
    \ '|') {\n            $result[] = 1;\n        }\n        $count++;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxpds79y.php:34\n\
    Stack trace:\n#0 /tmp/tmpkxpds79y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkxpds79y.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',', ' ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxutopqh6.php:28\n\
    Stack trace:\n#0 /tmp/tmpxutopqh6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxutopqh6.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_string as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = 4;\n        } else {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjx94qly.php:33\n\
    Stack trace:\n#0 /tmp/tmpnjx94qly.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnjx94qly.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $result = [];\n    $count\
    \ = 0;\n    foreach ($music_array as $key => $value) {\n        if ($value ==\
    \ 'o') {\n            $result[$count] = 4;\n            $count++;\n        } elseif\
    \ ($value == 'o' && $music_array[$key + 1] == '|') {\n            $result[$count]\
    \ = 2;\n            $count++;\n        } elseif ($value == '.' && $music_array[$key\
    \ + 1] == '|') {\n            $result[$count] = 1;\n            $count++;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmez2_953.php:36\n\
    Stack trace:\n#0 /tmp/tmpmez2_953.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmez2_953.php\
    \ on line 36\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    if (strlen($current_note) == 1) {\n        $result[]\
    \ = 4;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuvelu9l.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuvelu9l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpeuvelu9l.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $current_beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_beat += 4;\n        } elseif ($note == 'o|') {\n            $current_beat\
    \ += 2;\n        } elseif ($note == '.|') {\n            $current_beat += 1;\n\
    \        } elseif ($note == '|') {\n            $beats[] = $current_beat;\n  \
    \          $current_beat = 0;\n        }\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5isbx7xu.php:34\n\
    Stack trace:\n#0 /tmp/tmp5isbx7xu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5isbx7xu.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n      \
    \      $note_length += 4;\n        } elseif ($note === '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprni0uk_d.php:32\n\
    Stack trace:\n#0 /tmp/tmprni0uk_d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprni0uk_d.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_array = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        } elseif ($note\
    \ == '.') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjst1ggrp.php:41\n\
    Stack trace:\n#0 /tmp/tmpjst1ggrp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjst1ggrp.php\
    \ on line 41\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode(' ', $music_string);\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } else if ($note == 'o|') {\n            $result[] = 2;\n        } else\
    \ if ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '.', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '0', $music_string);\n\
    \    $music_string = str_split($music_string);\n    $music_string = array_map(function($item)\
    \ {\n        return (int)$item;\n    }, $music_string);\n    $music_string = array_chunk($music_string,\
    \ 4);\n    $music_string = array_map(function($item) {\n        return array_sum($item);\n\
    \    }, $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcbhtaxx.php:30\n\
    Stack trace:\n#0 /tmp/tmplcbhtaxx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplcbhtaxx.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8na0h6zo.php:31\n\
    Stack trace:\n#0 /tmp/tmp8na0h6zo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8na0h6zo.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_array = explode(' ', $music_string);\n    $music_array = array_map(function($item)\
    \ {\n        if ($item == 'o') {\n            return 4;\n        } elseif ($item\
    \ == 'o|') {\n            return 2;\n        } elseif ($item == '.|') {\n    \
    \        return 1;\n        } elseif ($item == '.') {\n            return 1;\n\
    \        } elseif ($item == '|') {\n            return 0;\n        }\n    }, $music_array);\n\
    \    return $music_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuovzdo0f.php:39\n\
    Stack trace:\n#0 /tmp/tmpuovzdo0f.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuovzdo0f.php\
    \ on line 39\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8na0h6zo.php:31\n\
    Stack trace:\n#0 /tmp/tmp8na0h6zo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8na0h6zo.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8na0h6zo.php:31\n\
    Stack trace:\n#0 /tmp/tmp8na0h6zo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8na0h6zo.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_array = str_split($music_string);\n    foreach\
    \ ($music_array as $key => $value) {\n        if ($value == 'o') {\n         \
    \   $result[] = 4;\n        } elseif ($value == 'o' && $music_array[$key + 1]\
    \ == '|') {\n            $result[] = 2;\n        } elseif ($value == '.' && $music_array[$key\
    \ + 1] == '|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5f6nn2m.php:32\n\
    Stack trace:\n#0 /tmp/tmpk5f6nn2m.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk5f6nn2m.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note = '';\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk89zr8qq.php:36\n\
    Stack trace:\n#0 /tmp/tmpk89zr8qq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk89zr8qq.php\
    \ on line 36\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 4;\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n      \
    \      $result[] = $note_length;\n        } elseif ($note === 'o' || $note ===\
    \ '|') {\n            $note_length /= 2;\n            $result[] = $note_length;\n\
    \        } elseif ($note === '.') {\n            $result[] = $note_length;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwys26wav.php:33\n\
    Stack trace:\n#0 /tmp/tmpwys26wav.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwys26wav.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbfrpxhd.php:35\n\
    Stack trace:\n#0 /tmp/tmptbfrpxhd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptbfrpxhd.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $result = [];\n    $counter\
    \ = 0;\n    foreach ($music_array as $key => $value) {\n        if ($value ==\
    \ 'o') {\n            $result[$counter] = 4;\n            $counter++;\n      \
    \  } elseif ($value == 'o' && $music_array[$key + 1] == '|') {\n            $result[$counter]\
    \ = 2;\n            $counter++;\n        } elseif ($value == '.' && $music_array[$key\
    \ + 1] == '|') {\n            $result[$counter] = 1;\n            $counter++;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrm0wa89.php:36\n\
    Stack trace:\n#0 /tmp/tmpfrm0wa89.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfrm0wa89.php\
    \ on line 36\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $beats = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beats\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beats += 2;\n      \
    \  } elseif ($note == '.|') {\n            $beats += 1;\n        }\n    }\n  \
    \  return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pantwta.php:30\n\
    Stack trace:\n#0 /tmp/tmp9pantwta.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9pantwta.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == '|') {\n            $result[]\
    \ = $note_length;\n            $note_length = 0;\n        } else {\n         \
    \   $note_length += 1;\n        }\n    }\n    $result[] = $note_length;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxqhq33d.php:32\n\
    Stack trace:\n#0 /tmp/tmpkxqhq33d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkxqhq33d.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $array = str_split($music_string);\n    $result = [];\n    $count = 0;\n\
    \    foreach ($array as $item) {\n        if ($item == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($item == 'o' && $array[$count + 1] == '|') {\n     \
    \       $result[] = 2;\n        } elseif ($item == '.' && $array[$count + 1] ==\
    \ '|') {\n            $result[] = 1;\n        }\n        $count++;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgjhs8gg.php:34\n\
    Stack trace:\n#0 /tmp/tmpbgjhs8gg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbgjhs8gg.php\
    \ on line 34\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    foreach ($notes\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $result[] = 4;\n                break;\n            case 'o|':\n         \
    \       $result[] = 2;\n                break;\n            case '.|':\n     \
    \           $result[] = 1;\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnptq5ey.php:35\n\
    Stack trace:\n#0 /tmp/tmpcnptq5ey.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcnptq5ey.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcuezgall.php on line 36

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace(' ', '', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_string = str_replace('|',\
    \ '|', $music_string);\n    $music_string = str_replace('|', ' ', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ explode(' ', $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp098s_0.php:32\n\
    Stack trace:\n#0 /tmp/tmpcp098s_0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcp098s_0.php\
    \ on line 32\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_note += 4;\n        } elseif ($note == 'o' || $note == '|') {\n\
    \            $current_note += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $current_note += 1;\n        } else {\n            $result[]\
    \ = $current_note;\n            $current_note = 0;\n        }\n    }\n    $result[]\
    \ = $current_note;\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr46qu23.php:34\n\
    Stack trace:\n#0 /tmp/tmpwr46qu23.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwr46qu23.php\
    \ on line 34\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o' || $note == '|') {\n            $result[] = 2;\n  \
    \      } elseif ($note == '.' || $note == '|') {\n            $result[] = 1;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv2regx_.php:31\n\
    Stack trace:\n#0 /tmp/tmphv2regx_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphv2regx_.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    echo implode(', ', parse_music('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwv_295qz.php on line 26

    '
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    if (strlen($current_note) == 1) {\n        $result[]\
    \ = 4;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuvelu9l.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuvelu9l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpeuvelu9l.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        if (strlen($note) == 1) {\n            $result[]\
    \ = 4;\n        } else {\n            $result[] = 2;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecs6y7tx.php:27\n\
    Stack trace:\n#0 /tmp/tmpecs6y7tx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpecs6y7tx.php\
    \ on line 27\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdacef4p.php:35\n\
    Stack trace:\n#0 /tmp/tmpfdacef4p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfdacef4p.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('.|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    foreach ($music_string as\
    \ $item) {\n        $result[] = (int)$item;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lr36wrf.php:28\n\
    Stack trace:\n#0 /tmp/tmp_lr36wrf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_lr36wrf.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_array = str_split($music_string);\n\
    \    return $music_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixxihuws.php:25\n\
    Stack trace:\n#0 /tmp/tmpixxihuws.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpixxihuws.php\
    \ on line 25\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbfrpxhd.php:35\n\
    Stack trace:\n#0 /tmp/tmptbfrpxhd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptbfrpxhd.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbfrpxhd.php:35\n\
    Stack trace:\n#0 /tmp/tmptbfrpxhd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptbfrpxhd.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $current_beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $current_beat += 4;\n        } elseif ($note == 'o' || $note == '|') {\n\
    \            $current_beat += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $current_beat += 1;\n        }\n        if ($note == '|') {\n\
    \            $beats[] = $current_beat;\n            $current_beat = 0;\n     \
    \   }\n    }\n    $beats[] = $current_beat;\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07857u8h.php:35\n\
    Stack trace:\n#0 /tmp/tmp07857u8h.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp07857u8h.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '.') {\n          \
    \  $current_note .= $note;\n        } elseif ($note == '|') {\n            if\
    \ ($current_note == 'o') {\n                $result[] = 4;\n            } elseif\
    \ ($current_note == 'o|') {\n                $result[] = 2;\n            } elseif\
    \ ($current_note == '.|') {\n                $result[] = 1;\n            }\n \
    \           $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0znxql09.php:38\n\
    Stack trace:\n#0 /tmp/tmp0znxql09.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0znxql09.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbfrpxhd.php:35\n\
    Stack trace:\n#0 /tmp/tmptbfrpxhd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptbfrpxhd.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    $current_note_length = 0;\n    foreach ($notes as $note) {\n    \
    \    if ($note === 'o') {\n            if ($current_note_length > 0) {\n     \
    \           $result[] = $current_note_length;\n            }\n            $current_note_length\
    \ = 4;\n        } elseif ($note === '.') {\n            $current_note_length +=\
    \ 1;\n        } elseif ($note === '|') {\n            $result[] = $current_note_length;\n\
    \            $current_note_length = 0;\n        }\n    }\n    if ($current_note_length\
    \ > 0) {\n        $result[] = $current_note_length;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnj_vn8rb.php:41\n\
    Stack trace:\n#0 /tmp/tmpnj_vn8rb.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnj_vn8rb.php\
    \ on line 41\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $result = [];\n    $current_beat\
    \ = 0;\n    foreach ($music_array as $key => $value) {\n        if ($value ==\
    \ 'o') {\n            $result[$current_beat] = 4;\n            $current_beat +=\
    \ 4;\n        } elseif ($value == 'o' && $music_array[$key + 1] == '|') {\n  \
    \          $result[$current_beat] = 2;\n            $current_beat += 2;\n    \
    \    } elseif ($value == '.' && $music_array[$key + 1] == '|') {\n           \
    \ $result[$current_beat] = 1;\n            $current_beat += 1;\n        }\n  \
    \  }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9bkv59p.php:34\n\
    Stack trace:\n#0 /tmp/tmpq9bkv59p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq9bkv59p.php\
    \ on line 34\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode(' ', $music_string);\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = explode('|', $music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_rgg800.php:23\n\
    Stack trace:\n#0 /tmp/tmpt_rgg800.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpt_rgg800.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $count = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o') {\n            $result[] = 2;\n      \
    \  } elseif ($note == '.') {\n            $result[] = 1;\n        }\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqcpwjga.php:33\n\
    Stack trace:\n#0 /tmp/tmpfqcpwjga.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfqcpwjga.php\
    \ on line 33\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note = '';\n\
    \    foreach ($notes as $note) {\n        if ($note === 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note === 'o' || $note === '|') {\n            $result[]\
    \ = 2;\n        } elseif ($note === '.' || $note === '|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5ylnjpa.php:32\n\
    Stack trace:\n#0 /tmp/tmpj5ylnjpa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj5ylnjpa.php\
    \ on line 32\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat_count\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $beat_count += 4;\n        } elseif ($note == 'o' || $note == '|') {\n \
    \           $beat_count += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $beat_count += 1;\n        }\n        if ($note == '|') {\n \
    \           $beats[] = $beat_count;\n            $beat_count = 0;\n        }\n\
    \    }\n    $beats[] = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrrv0xmc.php:35\n\
    Stack trace:\n#0 /tmp/tmpwrrv0xmc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwrrv0xmc.php\
    \ on line 35\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_replace('|', ' ', $music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxsg4zhsr.php:25\n\
    Stack trace:\n#0 /tmp/tmpxsg4zhsr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxsg4zhsr.php\
    \ on line 25\n"
  timestamp: 1659730869
- exit_code: -1
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $len = count($notes);\n\
    \    $i = 0;\n    while ($i < $len) {\n        if ($notes[$i] == 'o') {\n    \
    \        $result[] = 4;\n            $i++;\n        } else if ($notes[$i] == 'o'\
    \ && $notes[$i + 1] == '|') {\n            $result[] = 2;\n            $i += 2;\n\
    \        } else if ($notes[$i] == '.' && $notes[$i + 1] == '|') {\n          \
    \  $result[] = 1;\n            $i += 2;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730874
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' && $notes[$key + 1] == '|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.' && $notes[$key + 1] == '|')\
    \ {\n            $beat += 1;\n        }\n    }\n    return $beat;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gaj5uxl.php:30\n\
    Stack trace:\n#0 /tmp/tmp3gaj5uxl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3gaj5uxl.php\
    \ on line 30\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_array = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $value) {\n        if ($value == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($value == 'o|') {\n            $result[] = 2;\n    \
    \    } elseif ($value == '.|') {\n            $result[] = 1;\n        } elseif\
    \ ($value == '.') {\n            $result[] = 1;\n        } elseif ($value == '|')\
    \ {\n            $result[] = 0;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpre46lvmd.php:42\n\
    Stack trace:\n#0 /tmp/tmpre46lvmd.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpre46lvmd.php\
    \ on line 42\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt6qwi7k8.php:25\n\
    Stack trace:\n#0 /tmp/tmpt6qwi7k8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt6qwi7k8.php\
    \ on line 25\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        }\n        $beats[]\
    \ = $beat;\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvi66o9v.php:31\n\
    Stack trace:\n#0 /tmp/tmpwvi66o9v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwvi66o9v.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        if ($note === 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note === 'o') {\n            $result[] = 2;\n        } elseif\
    \ ($note === '.') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jy26cnn.php:30\n\
    Stack trace:\n#0 /tmp/tmp5jy26cnn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5jy26cnn.php\
    \ on line 30\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note = '';\n\
    \    foreach ($notes as $key => $value) {\n        if ($value === 'o') {\n   \
    \         $note .= $value;\n            if (isset($notes[$key + 1]) && $notes[$key\
    \ + 1] === '|') {\n                $note .= $notes[$key + 1];\n            }\n\
    \        } elseif ($value === '.') {\n            $note .= $value;\n         \
    \   if (isset($notes[$key + 1]) && $notes[$key + 1] === '|') {\n             \
    \   $note .= $notes[$key + 1];\n            }\n        } elseif ($value === '|')\
    \ {\n            $note .= $value;\n        }\n        if ($note !== '') {\n  \
    \          $result[] = $note;\n            $note = '';\n        }\n    }\n   \
    \ $result = array_map(function ($note) {\n        if ($note === 'o|') {\n    \
    \        return 2;\n        } elseif ($note === 'o') {\n            return 4;\n\
    \        } elseif ($note === '.|') {\n            return 1;\n        }\n    },\
    \ $result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpteiph0l_.php:51\n\
    Stack trace:\n#0 /tmp/tmpteiph0l_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpteiph0l_.php\
    \ on line 51\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_string as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = 4;\n        } elseif ($note == '.') {\n \
    \           $result[] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6imomep.php:36\n\
    Stack trace:\n#0 /tmp/tmpn6imomep.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpn6imomep.php\
    \ on line 36\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat_count\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $beat_count += 4;\n        } elseif ($note == 'o' || $note == '|') {\n \
    \           $beat_count += 2;\n        } elseif ($note == '.' || $note == '|')\
    \ {\n            $beat_count += 1;\n        }\n        if ($note == '|') {\n \
    \           $beats[] = $beat_count;\n            $beat_count = 0;\n        }\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst_nooqk.php:35\n\
    Stack trace:\n#0 /tmp/tmpst_nooqk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpst_nooqk.php\
    \ on line 35\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o' || $note == '|') {\n            $beat\
    \ += 2;\n        } elseif ($note == '.' || $note == '|') {\n            $beat\
    \ += 1;\n        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8na0h6zo.php:31\n\
    Stack trace:\n#0 /tmp/tmp8na0h6zo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8na0h6zo.php\
    \ on line 31\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '| ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = trim($music_string);\n\
    \    $music_array = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        } elseif ($note\
    \ == '.') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjst1ggrp.php:41\n\
    Stack trace:\n#0 /tmp/tmpjst1ggrp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjst1ggrp.php\
    \ on line 41\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o', 'o|o|o|o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|', 'o|o|o|o|o|o|o|o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o|o|o|o|', 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|', 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|',\
    \ $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|',\
    \ 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfk3vstdc.php on line 14

    '
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gd9xc5.php:26\n\
    Stack trace:\n#0 /tmp/tmp63gd9xc5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63gd9xc5.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $notes = str_split($music_string);\n  $result = [];\n  $current_note =\
    \ '';\n  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $current_note\
    \ .= $note;\n    } elseif ($note == '|') {\n      $current_note .= $note;\n  \
    \    if (strlen($current_note) == 2) {\n        $result[] = 2;\n      } elseif\
    \ (strlen($current_note) == 3) {\n        $result[] = 1;\n      }\n      $current_note\
    \ = '';\n    }\n  }\n  if (strlen($current_note) == 1) {\n    $result[] = 4;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1v0nfime.php:38\n\
    Stack trace:\n#0 /tmp/tmp1v0nfime.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1v0nfime.php\
    \ on line 38\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('.|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    foreach ($music_string as\
    \ $item) {\n        $result[] = (int)$item;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lr36wrf.php:28\n\
    Stack trace:\n#0 /tmp/tmp_lr36wrf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_lr36wrf.php\
    \ on line 28\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $notes = str_split($music_string);\n  $beats = [];\n  $beat = 0;\n  foreach\
    \ ($notes as $note) {\n    if ($note == 'o') {\n      $beat += 4;\n    } elseif\
    \ ($note == 'o' || $note == '|') {\n      $beat += 2;\n    } elseif ($note ==\
    \ '.' || $note == '|') {\n      $beat += 1;\n    }\n    if ($note == '|') {\n\
    \      $beats[] = $beat;\n      $beat = 0;\n    }\n  }\n  return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzilkk221.php:35\n\
    Stack trace:\n#0 /tmp/tmpzilkk221.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzilkk221.php\
    \ on line 35\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        } elseif ($note\
    \ == '|') {\n            $beats[] = $beat;\n            $beat = 0;\n        }\n\
    \    }\n    $beats[] = $beat;\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56tgqfvp.php:34\n\
    Stack trace:\n#0 /tmp/tmp56tgqfvp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp56tgqfvp.php\
    \ on line 34\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $result[] = substr_count($note, 'o');\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb37e4z7x.php:23\n\
    Stack trace:\n#0 /tmp/tmpb37e4z7x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb37e4z7x.php\
    \ on line 23\n"
  timestamp: 1659730868
- exit_code: -1
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $music_array = str_split($music_string);\n    $music_array_length\
    \ = count($music_array);\n    $i = 0;\n    while ($i < $music_array_length) {\n\
    \        if ($music_array[$i] == 'o') {\n            $result[] = 4;\n        \
    \    $i++;\n        } elseif ($music_array[$i] == 'o' && $music_array[$i + 1]\
    \ == '|') {\n            $result[] = 2;\n            $i += 2;\n        } elseif\
    \ ($music_array[$i] == '.' && $music_array[$i + 1] == '|') {\n            $result[]\
    \ = 1;\n            $i += 2;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730874
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    if (strlen($current_note) == 1) {\n        $result[]\
    \ = 4;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeuvelu9l.php:38\n\
    Stack trace:\n#0 /tmp/tmpeuvelu9l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpeuvelu9l.php\
    \ on line 38\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note === 'o') {\n     \
    \       $current_note .= $note;\n        } elseif ($note === '|') {\n        \
    \    $current_note .= $note;\n            if (strlen($current_note) === 2) {\n\
    \                $result[] = 2;\n            } elseif (strlen($current_note) ===\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlbkwk8k.php:35\n\
    Stack trace:\n#0 /tmp/tmpnlbkwk8k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnlbkwk8k.php\
    \ on line 35\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $music_string = str_replace('o|', 'o| ', $music_string);\n  $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n  $music_string = str_replace('o',\
    \ 'o ', $music_string);\n  $music_string = str_replace('.', '. ', $music_string);\n\
    \  $music_string = str_replace('|', '', $music_string);\n  $music_string = str_replace('\
    \ ', '', $music_string);\n  $music_string = str_split($music_string);\n  $music_array\
    \ = [];\n  foreach ($music_string as $key => $value) {\n    if ($value == 'o')\
    \ {\n      $music_array[] = 4;\n    } elseif ($value == '.') {\n      $music_array[]\
    \ = 1;\n    }\n  }\n  return $music_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fim26m_.php:36\n\
    Stack trace:\n#0 /tmp/tmp_fim26m_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_fim26m_.php\
    \ on line 36\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $note_length\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $note_length += 4;\n        } elseif ($note == 'o' && $note == '|') {\n\
    \            $note_length += 2;\n        } elseif ($note == '.' && $note == '|')\
    \ {\n            $note_length += 1;\n        } else {\n            $result[] =\
    \ $note_length;\n            $note_length = 0;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbuy9c8tf.php:33\n\
    Stack trace:\n#0 /tmp/tmpbuy9c8tf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbuy9c8tf.php\
    \ on line 33\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = explode('|', $music_string);\n    foreach\
    \ ($notes as $note) {\n        $note = str_replace('.', '', $note);\n        $note\
    \ = str_replace('o', '', $note);\n        $result[] = strlen($note) + 1;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbeiu7am0.php:25\n\
    Stack trace:\n#0 /tmp/tmpbeiu7am0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbeiu7am0.php\
    \ on line 25\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n  $notes = str_split($music_string);\n  $beats = [];\n  $beat_count = 0;\n\
    \  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $beat_count +=\
    \ 4;\n    } elseif ($note == '|') {\n      $beats[] = $beat_count;\n      $beat_count\
    \ = 0;\n    } else {\n      $beat_count += 1;\n    }\n  }\n  return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu0gqa33.php:32\n\
    Stack trace:\n#0 /tmp/tmplu0gqa33.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplu0gqa33.php\
    \ on line 32\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = trim($music_string);\n    $music_string = explode(' ', $music_string);\n \
    \   return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnogji_9.php:25\n\
    Stack trace:\n#0 /tmp/tmplnogji_9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmplnogji_9.php\
    \ on line 25\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $result = [];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            if (strlen($current_note) == 2) {\n  \
    \              $result[] = 2;\n            } elseif (strlen($current_note) ==\
    \ 3) {\n                $result[] = 1;\n            }\n            $current_note\
    \ = '';\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9ywbyb4.php:35\n\
    Stack trace:\n#0 /tmp/tmpv9ywbyb4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpv9ywbyb4.php\
    \ on line 35\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('.|', '.| ', $music_string);\n    $music_string = str_replace('o',\
    \ 'o ', $music_string);\n    $music_string = str_replace('.', '. ', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_array as $key => $value) {\n        if\
    \ ($value == 'o') {\n            $result[] = 4;\n        } elseif ($value == '.')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1iqbb0b5.php:36\n\
    Stack trace:\n#0 /tmp/tmp1iqbb0b5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1iqbb0b5.php\
    \ on line 36\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $result = [];\n    $notes = str_split($music_string);\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $current_note .= $note;\n        } elseif ($note == '|') {\n          \
    \  $current_note .= $note;\n            $result[] = strlen($current_note);\n \
    \           $current_note = '';\n        } elseif ($note == '.') {\n         \
    \   $current_note .= $note;\n            $result[] = strlen($current_note);\n\
    \            $current_note = '';\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdacef4p.php:35\n\
    Stack trace:\n#0 /tmp/tmpfdacef4p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfdacef4p.php\
    \ on line 35\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', '1', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_split($music_string);\n    $music_string = array_map('intval', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzh2bpex.php:25\n\
    Stack trace:\n#0 /tmp/tmpuzh2bpex.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuzh2bpex.php\
    \ on line 25\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        } elseif ($note\
    \ == '|') {\n            $beats[] = $beat;\n            $beat = 0;\n        }\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuyxs1at.php:34\n\
    Stack trace:\n#0 /tmp/tmpzuyxs1at.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzuyxs1at.php\
    \ on line 34\n"
  timestamp: 1659730869
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('.|', '.', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_string = str_split($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63gd9xc5.php:26\n\
    Stack trace:\n#0 /tmp/tmp63gd9xc5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp63gd9xc5.php\
    \ on line 26\n"
  timestamp: 1659730868
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\nfunction parse_music($music_string)\
    \ {\n    $music_array = str_split($music_string);\n    $music_array_count = count($music_array);\n\
    \    $music_array_count_minus_one = $music_array_count - 1;\n    $music_array_count_minus_two\
    \ = $music_array_count - 2;\n    $music_array_count_minus_three = $music_array_count\
    \ - 3;\n    $music_array_count_minus_four = $music_array_count - 4;\n    $music_array_count_minus_five\
    \ = $music_array_count - 5;\n    $music_array_count_minus_six = $music_array_count\
    \ - 6;\n    $music_array_count_minus_seven = $music_array_count - 7;\n    $music_array_count_minus_eight\
    \ = $music_array_count - 8;\n    $music_array_count_minus_nine = $music_array_count\
    \ - 9;\n    $music_array_count_minus_ten = $music_array_count - 10;\n    $music_array_count_minus_eleven\
    \ = $music_array_count - 11;\n    $music_array_count_minus_twelve = $music_array_count\
    \ - 12;\n    $music_array_count_minus_thirteen = $music_array_count - 13;\n  \
    \  $music_array_count_minus_fourteen = $music_array_count - 14;\n    $music_array_count_minus_fifteen\
    \ = $music_array_count - 15;\n    $music_array_count_minus_sixteen = $music_array_count\
    \ - 16;\n    $music_array_count_minus_seventeen = $music_array_count - 17;\n \
    \   $music_array_count_minus_eighteen = $music_array_count - 18;\n    $music_array_count_minus_nineteen\
    \ = $music_array_count - 19;\n    $music_array_count_minus_twenty = $music_array_count\
    \ - 20;\n    $music_array_count_minus_twenty_one = $music_array_count - 21;\n\
    \    $music_array\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmf0u64vk.php on line 34

    '
  timestamp: 1659730869
