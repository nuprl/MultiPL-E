language: php
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number % 10);\n  $number = (int)($number / 10);\n  $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n  $number = (int)($number / 10);\n\
    \  $roman = str_repeat('C', $number % 10) . $roman;\n  $number = (int)($number\
    \ / 10);\n  $roman = str_repeat('M', $number % 10) . $roman;\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70vbeyu2.php:23\n\
    Stack trace:\n#0 /tmp/tmp70vbeyu2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp70vbeyu2.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $roman_string\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $roman_string .= str_repeat($roman, $matches);\n    $number =\
    \ $number % $int;\n  }\n  return $roman_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $numerals\
    \ = array(\n        \"M\" => 1000,\n        \"CM\" => 900,\n        \"D\" => 500,\n\
    \        \"CD\" => 400,\n        \"C\" => 100,\n        \"XC\" => 90,\n      \
    \  \"L\" => 50,\n        \"XL\" => 40,\n        \"X\" => 10,\n        \"IX\" =>\
    \ 9,\n        \"V\" => 5,\n        \"IV\" => 4,\n        \"I\" => 1\n    );\n\
    \    foreach ($numerals as $numeral => $value) {\n        while ($number >= $value)\
    \ {\n            $roman .= $numeral;\n            $number -= $value;\n       \
    \ }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdcxfjx_.php:37\n\
    Stack trace:\n#0 /tmp/tmpjdcxfjx_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjdcxfjx_.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($numerals\
    \ as $numeral => $value) {\n        while ($number >= $value) {\n            $roman\
    \ .= $numeral;\n            $number -= $value;\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk7y8l5a.php:37\n\
    Stack trace:\n#0 /tmp/tmpbk7y8l5a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbk7y8l5a.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $values = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n  $numerals = ['m', 'cm', 'd', 'cd',\
    \ 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n  $result = '';\n  for ($i\
    \ = 0; $i < count($values); $i++) {\n    while ($number >= $values[$i]) {\n  \
    \    $number -= $values[$i];\n      $result .= $numerals[$i];\n    }\n  }\n  return\
    \ $result;\n}\n\necho int_to_mini_roman(1) . \"\\n\";\necho int_to_mini_roman(4)\
    \ . \"\\n\";\necho int_to_mini_roman(9) . \"\\n\";\necho int_to_mini_roman(40)\
    \ . \"\\n\";\necho int_to_mini_roman(90) . \"\\n\";\necho int_to_mini_roman(400)\
    \ . \"\\n\";\necho int_to_mini_roman(900) . \"\\n\";\necho int_to_mini_roman(1000)\
    \ . \"\\n\";\necho int_to_mini_roman(3999) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'i

    iv

    ix

    xl

    xc

    cd

    cm

    m

    mmmcmxcix

    '
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $numerals = [\n     \
    \   'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach ($numerals as\
    \ $numeral => $limit) {\n        for (; $number >= $limit; $number -= $limit)\
    \ {\n            $result .= $numeral;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $result = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $result .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $result;\n}\n\necho int_to_mini_roman(1)\
    \ . \"\\n\";\necho int_to_mini_roman(2) . \"\\n\";\necho int_to_mini_roman(3)\
    \ . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\";\necho int_to_mini_roman(5)\
    \ . \"\\n\";\necho int_to_mini_roman(6) . \"\\n\";\necho int_to_mini_roman(7)\
    \ . \"\\n\";\necho int_to_mini_roman(8) . \"\\n\";\necho int_to_mini_roman(9)\
    \ . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\";\necho int_to_mini_roman(11)\
    \ . \"\\n\";\necho int_to_mini_roman(12) . \"\\n\";\necho int_to_mini_roman(13)\
    \ . \"\\n\";\necho int_to_mini_roman(14) . \"\\n\";\necho int_to_mini_roman(15)\
    \ . \"\\n\";\necho int_to_mini_roman(16) . \"\\n\";\necho int_to_mini_roman(17)\
    \ . \"\\n\";\necho int_to_mini_roman(18) . \"\\n\";\necho int_to_mini_roman(19)\
    \ . \"\\n\";\necho int_to_mini_roman(20) . \"\\n\";\necho int_to_mini_roman(21)\
    \ . \"\\n\";\necho int_to_mini_roman(22) . \"\\n\";\necho int_to_mini_roman(23)\
    \ . \"\\n\";\necho int_to_mini_roman(24) .\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwkghl141.php on line 48

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    // Your code here\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiojk9j4j.php:15\n\
    Stack trace:\n#0 /tmp/tmpiojk9j4j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiojk9j4j.php\
    \ on line 15\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'M'  => 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD'\
    \ => 400,\n        'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n  \
    \      'XL' => 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n\
    \        'IV' => 4,\n        'I'  => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bveomv7.php:36\n\
    Stack trace:\n#0 /tmp/tmp_bveomv7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_bveomv7.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(1) . \"\\n\"\
    ;\necho int_to_mini_roman(4) . \"\\n\";\necho int_to_mini_roman(6) . \"\\n\";\n\
    echo int_to_mini_roman(14) . \"\\n\";\necho int_to_mini_roman(21) . \"\\n\";\n\
    echo int_to_mini_roman(99) . \"\\n\";\necho int_to_mini_roman(499) . \"\\n\";\n\
    echo int_to_mini_roman(1000) . \"\\n\";\necho int_to_mini_roman(1004) . \"\\n\"\
    ;\necho int_to_mini_roman(1023) . \"\\n\";\necho int_to_mini_roman(2014) . \"\\\
    n\";\necho int_to_mini_roman(3999) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'i

    iv

    vi

    xiv

    xxi

    xcix

    cdxcix

    m

    miv

    mxxiii

    mmxiv

    mmmcmxcix

    '
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $roman .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0262owas.php:29\n\
    Stack trace:\n#0 /tmp/tmp0262owas.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0262owas.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1,\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\n$test_cases = array(\n    1 => 'i',\n\
    \    2 => 'ii',\n    3 => 'iii',\n    4 => 'iv',\n    5 => 'v',\n    6 => 'vi',\n\
    \    7 => 'vii',\n    8 => 'viii',\n    9 => 'ix',\n    10 => 'x',\n    11 =>\
    \ 'xi',\n    12 => 'xii',\n    13 => 'xiii',\n    14 => 'xiv',\n    15 => 'xv',\n\
    \    16 => 'xvi',\n    17 => 'xvii',\n    18 => 'xviii',\n    19 => 'xix',\n \
    \   20 => 'xx',\n    21 => 'xxi',\n    22 => 'xxii',\n    23 => 'xxiii',\n   \
    \ 24 => 'xxiv',\n    25 => 'xxv',\n    26 => 'xxvi',\n    27 => 'xxvii',\n   \
    \ 28 => 'xxviii',\n    29 => 'xxix',\n    30 => 'xxx',\n    31 => 'xxxi',\n  \
    \  32 => 'xxxii',\n    33 => 'xxxiii',\n    34 => 'xxxiv',\n    35 => 'xxxv',\n\
    \    36 => 'xxxvi',\n    37 => 'xxxvii',\n    38 => 'xxxviii',\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1mvrqn6a.php on line 73

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('i', $number % 5);\n    $number = floor($number / 5);\n    $roman\
    \ = str_repeat('v', $number % 2) . $roman;\n    $number = floor($number / 2);\n\
    \    $roman = str_repeat('x', $number) . $roman;\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11yjp4ya.php:21\n\
    Stack trace:\n#0 /tmp/tmp11yjp4ya.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp11yjp4ya.php\
    \ on line 21\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyma2nutf.php:29\n\
    Stack trace:\n#0 /tmp/tmpyma2nutf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyma2nutf.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $roman\
    \ .= str_repeat(\"I\", $number);\n    $roman = str_replace(\"IIIII\", \"V\", $roman);\n\
    \    $roman = str_replace(\"IIII\", \"IV\", $roman);\n    $roman = str_replace(\"\
    VV\", \"X\", $roman);\n    $roman = str_replace(\"VIV\", \"IX\", $roman);\n  \
    \  $roman = str_replace(\"XXXXX\", \"L\", $roman);\n    $roman = str_replace(\"\
    XXXX\", \"XL\", $roman);\n    $roman = str_replace(\"LL\", \"C\", $roman);\n \
    \   $roman = str_replace(\"LXL\", \"XC\", $roman);\n    $roman = str_replace(\"\
    CCCCC\", \"D\", $roman);\n    $roman = str_replace(\"CCCC\", \"CD\", $roman);\n\
    \    $roman = str_replace(\"DD\", \"M\", $roman);\n    $roman = str_replace(\"\
    DCD\", \"CM\", $roman);\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppeq3ngfz.php:29\n\
    Stack trace:\n#0 /tmp/tmppeq3ngfz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppeq3ngfz.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm'  => 1000,\n    'cm' => 900,\n    'd'  => 500,\n    'cd' => 400,\n   \
    \ 'c'  => 100,\n    'xc' => 90,\n    'l'  => 50,\n    'xl' => 40,\n    'x'  =>\
    \ 10,\n    'ix' => 9,\n    'v'  => 5,\n    'iv' => 4,\n    'i'  => 1,\n  );\n\n\
    \  $result = '';\n  foreach ($roman_numerals as $roman => $int) {\n    // Determine\
    \ the number of times $int goes into $number.\n    $matches = intval($number /\
    \ $int);\n\n    // Concatenate that number of symbols to $result.\n    $result\
    \ .= str_repeat($roman, $matches);\n\n    // Set $number to be the remainder of\
    \ the division.\n    $number = $number % $int;\n  }\n\n  return $result;\n}\n\n\
    echo int_to_mini_roman(1) . \"\\n\"; // => 'i'\necho int_to_mini_roman(4) . \"\
    \\n\"; // => 'iv'\necho int_to_mini_roman(6) . \"\\n\"; // => 'vi'\necho int_to_mini_roman(14)\
    \ . \"\\n\"; // => 'xiv'\necho int_to_mini_roman(21) . \"\\n\"; // => 'xxi'\n\
    echo int_to_mini_roman(99) . \"\\n\"; // => 'xcix'\necho int_to_mini_roman(499)\
    \ . \"\\n\"; // => 'cdxcix'\necho int_to_mini_roman(648) . \"\\n\"; // => 'dclxviii'\n\
    echo int_to_mini_roman(1000) . \"\\n\"; // => 'm'\necho int_to_mini_roman(1889)\
    \ . \"\\n\"; // => 'mdccclxxxix'\necho int_to_mini_roman(1989) . \"\\n\"; // =>\
    \ 'mcmlxxxix'\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'i

    iv

    vi

    xiv

    xxi

    xcix

    cdxcix

    dcxlviii

    m

    mdccclxxxix

    mcmlxxxix

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number);\n  $roman = str_replace('IIIII', 'V', $roman);\n\
    \  $roman = str_replace('IIII', 'IV', $roman);\n  $roman = str_replace('VV', 'X',\
    \ $roman);\n  $roman = str_replace('VIV', 'IX', $roman);\n  $roman = str_replace('XXXXX',\
    \ 'L', $roman);\n  $roman = str_replace('XXXX', 'XL', $roman);\n  $roman = str_replace('LL',\
    \ 'C', $roman);\n  $roman = str_replace('LXL', 'XC', $roman);\n  $roman = str_replace('CCCCC',\
    \ 'D', $roman);\n  $roman = str_replace('CCCC', 'CD', $roman);\n  $roman = str_replace('DD',\
    \ 'M', $roman);\n  $roman = str_replace('DCD', 'CM', $roman);\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rusjdh9.php:29\n\
    Stack trace:\n#0 /tmp/tmp2rusjdh9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2rusjdh9.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    while ($number >= $value) {\n      $roman .= $numeral;\n \
    \     $number -= $value;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0t5_x30.php:31\n\
    Stack trace:\n#0 /tmp/tmpi0t5_x30.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi0t5_x30.php\
    \ on line 31\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $number_string\
    \ = (string)$number;\n    $number_length = strlen($number_string);\n    $number_array\
    \ = str_split($number_string);\n    $roman_array = [\n        'M' => 1000,\n \
    \       'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' =>\
    \ 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n       \
    \ 'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n    \
    \    'I' => 1\n    ];\n    foreach ($number_array as $key => $digit) {\n     \
    \   $digit = (int)$digit;\n        if ($digit === 0) {\n            continue;\n\
    \        }\n        $power = $number_length - $key - 1;\n        $multiplier =\
    \ pow(10, $power);\n        $roman_digit = $digit * $multiplier;\n        foreach\
    \ ($roman_array as $roman_numeral => $value) {\n            if ($roman_digit >=\
    \ $value) {\n                $result .= $roman_numeral;\n                $roman_digit\
    \ -= $value;\n                break;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz0xvv91.php:50\n\
    Stack trace:\n#0 /tmp/tmprz0xvv91.php(66): test()\n#1 {main}\n  thrown in /tmp/tmprz0xvv91.php\
    \ on line 50\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1,\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  );\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts_htfus.php:37\n\
    Stack trace:\n#0 /tmp/tmpts_htfus.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpts_htfus.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('i', $number);\n  $roman = str_replace('iiiii', 'v', $roman);\n\
    \  $roman = str_replace('iiii', 'iv', $roman);\n  $roman = str_replace('vv', 'x',\
    \ $roman);\n  $roman = str_replace('viv', 'ix', $roman);\n  return $roman;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ujl29pb.php:22\n\
    Stack trace:\n#0 /tmp/tmp8ujl29pb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8ujl29pb.php\
    \ on line 22\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $result = '';\n  $numerals\
    \ = [\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $result .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i6mrgy7.php:37\n\
    Stack trace:\n#0 /tmp/tmp0i6mrgy7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0i6mrgy7.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\necho int_to_mini_roman(1) . \"\\n\"; // i\necho int_to_mini_roman(2) . \"\
    \\n\"; // ii\necho int_to_mini_roman(3) . \"\\n\"; // iii\necho int_to_mini_roman(4)\
    \ . \"\\n\"; // iv\necho int_to_mini_roman(5) . \"\\n\"; // v\necho int_to_mini_roman(6)\
    \ . \"\\n\"; // vi\necho int_to_mini_roman(7) . \"\\n\"; // vii\necho int_to_mini_roman(8)\
    \ . \"\\n\"; // viii\necho int_to_mini_roman(9) . \"\\n\"; // ix\necho int_to_mini_roman(10)\
    \ . \"\\n\"; // x\necho int_to_mini_roman(11) . \"\\n\"; // xi\necho int_to_mini_roman(12)\
    \ . \"\\n\"; // xii\necho int_to_mini_roman(13) . \"\\n\"; // xiii\necho int_to_mini_roman(14)\
    \ . \"\\n\"; // xiv\necho int_to_mini_roman(15) . \"\\n\"; // xv\necho int_to_mini_roman(16)\
    \ . \"\\n\"; // xvi\necho int_to_mini_roman(17) . \"\\n\"; // xvii\necho int_to_mini_roman(18)\
    \ . \"\\n\"; // xviii\necho int_to_mini_roman(19) . \"\\n\"; // xix\necho int_to_mini_roman(20)\
    \ . \"\\n\"; // xx\necho int_to_mini\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfqnqmm2k.php on line 45

    '
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number % 10);\n  $number = floor($number / 10);\n  $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n  $number = floor($number / 10);\n\
    \  $roman = str_repeat('C', $number % 10) . $roman;\n  $number = floor($number\
    \ / 10);\n  $roman = str_repeat('M', $number % 10) . $roman;\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7b7wtdm.php:23\n\
    Stack trace:\n#0 /tmp/tmpn7b7wtdm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn7b7wtdm.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $numerals\
    \ = array(\n        'M' => 1000,\n        'D' => 500,\n        'C' => 100,\n \
    \       'L' => 50,\n        'X' => 10,\n        'V' => 5,\n        'I' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qx0i14m.php:29\n\
    Stack trace:\n#0 /tmp/tmp2qx0i14m.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2qx0i14m.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($roman_numerals as\
    \ $roman => $num) {\n        $matches = intval($number / $num);\n        $roman\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvrt5z06q.php:36\n\
    Stack trace:\n#0 /tmp/tmpvrt5z06q.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvrt5z06q.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = \"\";\n   \
    \ $numbers = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n  \
    \  $romans = array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyma2nutf.php:29\n\
    Stack trace:\n#0 /tmp/tmpyma2nutf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyma2nutf.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $roman => $number) {\n        $matches = intval($input / $number);\n    \
    \    $result .= str_repeat($roman, $matches);\n        $input = $input % $number;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz17yjiag.php:36\n\
    Stack trace:\n#0 /tmp/tmpz17yjiag.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpz17yjiag.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1,\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    foreach ($roman_numerals\
    \ as $key => $value) {\n        $matches = intval($number / $value);\n       \
    \ $roman .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31yp5f26.php:36\n\
    Stack trace:\n#0 /tmp/tmp31yp5f26.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp31yp5f26.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    while ($number\
    \ > 0) {\n        foreach ($roman_numerals as $roman => $int) {\n            if\
    \ ($number >= $int) {\n                $number -= $int;\n                $result\
    \ .= $roman;\n                break;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsn6qk3ks.php:40\n\
    Stack trace:\n#0 /tmp/tmpsn6qk3ks.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsn6qk3ks.php\
    \ on line 40\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7e3472t.php:37\n\
    Stack trace:\n#0 /tmp/tmpd7e3472t.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpd7e3472t.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplox63kzm.php:29\n\
    Stack trace:\n#0 /tmp/tmplox63kzm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmplox63kzm.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('i', $number);\n    $roman = str_replace('iiiii', 'v', $roman);\n\
    \    $roman = str_replace('iiii', 'iv', $roman);\n    $roman = str_replace('vv',\
    \ 'x', $roman);\n    $roman = str_replace('viv', 'ix', $roman);\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gbhwvri.php:22\n\
    Stack trace:\n#0 /tmp/tmp_gbhwvri.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_gbhwvri.php\
    \ on line 22\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $numerals = [\n    'm'\
    \ => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n\
    \    'v' => 5,\n    'i' => 1\n  ];\n  $result = '';\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $result .= str_repeat($numeral, $number / $value);\n    $number\
    \ %= $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cqxhkrn.php:29\n\
    Stack trace:\n#0 /tmp/tmp0cqxhkrn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0cqxhkrn.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm'  => 1000,\n    'cm' => 900,\n    'd'  => 500,\n    'cd' => 400,\n   \
    \ 'c'  => 100,\n    'xc' => 90,\n    'l'  => 50,\n    'xl' => 40,\n    'x'  =>\
    \ 10,\n    'ix' => 9,\n    'v'  => 5,\n    'iv' => 4,\n    'i'  => 1\n  );\n\n\
    \  $result = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches\
    \ = intval($number / $int);\n    $result .= str_repeat($roman, $matches);\n  \
    \  $number = $number % $int;\n  }\n\n  return $result;\n}\n\necho int_to_mini_roman(1)\
    \ . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\";\necho int_to_mini_roman(9)\
    \ . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\";\necho int_to_mini_roman(40)\
    \ . \"\\n\";\necho int_to_mini_roman(90) . \"\\n\";\necho int_to_mini_roman(100)\
    \ . \"\\n\";\necho int_to_mini_roman(400) . \"\\n\";\necho int_to_mini_roman(900)\
    \ . \"\\n\";\necho int_to_mini_roman(1000) . \"\\n\";\necho int_to_mini_roman(3999)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'i

    iv

    ix

    x

    xl

    xc

    c

    cd

    cm

    m

    mmmcmxcix

    '
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman_numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($roman_numerals as $roman_numeral => $value) {\n    $matches = intval($number\
    \ / $value);\n    $roman .= str_repeat($roman_numeral, $matches);\n    $number\
    \ = $number % $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('i', $number);\n    return str_replace(\n        array('iiiii',\
    \ 'iiii', 'iii', 'ii', 'i'),\n        array('v', 'iv', 'iii', 'ii', 'i'),\n  \
    \      $roman\n    );\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeubec_09.php:21\n\
    Stack trace:\n#0 /tmp/tmpeubec_09.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpeubec_09.php\
    \ on line 21\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $result = '';\n  $roman_numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number, $int);\n\
    \    $result .= str_repeat($roman, $matches);\n    $number = $number % $int;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $roman_numerals\
    \ = array(\n        'M'  => 1000,\n        'CM' => 900,\n        'D'  => 500,\n\
    \        'CD' => 400,\n        'C'  => 100,\n        'XC' => 90,\n        'L'\
    \  => 50,\n        'XL' => 40,\n        'X'  => 10,\n        'IX' => 9,\n    \
    \    'V'  => 5,\n        'IV' => 4,\n        'I'  => 1,\n    );\n    foreach ($roman_numerals\
    \ as $roman => $number_value) {\n        $matches = intval($number / $number_value);\n\
    \        $roman .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $number_value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw6d17wwr.php:36\n\
    Stack trace:\n#0 /tmp/tmpw6d17wwr.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpw6d17wwr.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    foreach ($roman_numerals\
    \ as $roman => $int) {\n        $matches = intval($number / $int);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $int;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $key => $value) {\n        while ($number >= $value) {\n            $roman\
    \ .= $key;\n            $number -= $value;\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphn1cstqd.php:37\n\
    Stack trace:\n#0 /tmp/tmphn1cstqd.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphn1cstqd.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $numerals = array(\n  \
    \  'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  );\n  $result\
    \ = '';\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ $number / $value);\n    $number %= $value;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number % 10);\n  $number = intval($number / 10);\n  $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n  $number = intval($number / 10);\n\
    \  $roman = str_repeat('C', $number % 10) . $roman;\n  $number = intval($number\
    \ / 10);\n  $roman = str_repeat('M', $number % 10) . $roman;\n  return $roman;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqm6sn4l.php:22\n\
    Stack trace:\n#0 /tmp/tmpkqm6sn4l.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkqm6sn4l.php\
    \ on line 22\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $result .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number);\n  $roman = str_replace('IIIII', 'V', $roman);\n\
    \  $roman = str_replace('IIII', 'IV', $roman);\n  $roman = str_replace('VV', 'X',\
    \ $roman);\n  $roman = str_replace('VIV', 'IX', $roman);\n  $roman = str_replace('XXXXX',\
    \ 'L', $roman);\n  $roman = str_replace('XXXX', 'XL', $roman);\n  $roman = str_replace('LL',\
    \ 'C', $roman);\n  $roman = str_replace('LXL', 'XC', $roman);\n  $roman = str_replace('CCCCC',\
    \ 'D', $roman);\n  $roman = str_replace('CCCC', 'CD', $roman);\n  $roman = str_replace('DD',\
    \ 'M', $roman);\n  $roman = str_replace('DCD', 'CM', $roman);\n  return $roman;\n\
    }\n\necho int_to_mini_roman(1) . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\"\
    ;\necho int_to_mini_roman(9) . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\"\
    ;\necho int_to_mini_roman(40) . \"\\n\";\necho int_to_mini_roman(90) . \"\\n\"\
    ;\necho int_to_mini_roman(100) . \"\\n\";\necho int_to_mini_roman(400) . \"\\\
    n\";\necho int_to_mini_roman(900) . \"\\n\";\necho int_to_mini_roman(1000) . \"\
    \\n\";\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "I\nIV\nIX\nX\nXL\nXC\nC\nCD\nCM\nM\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5g53bqg1.php:40\nStack trace:\n#0 /tmp/tmp5g53bqg1.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5g53bqg1.php on line 40\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\necho int_to_mini_roman(1) . \"\\n\"\
    ; // \"i\"\necho int_to_mini_roman(4) . \"\\n\"; // \"iv\"\necho int_to_mini_roman(6)\
    \ . \"\\n\"; // \"vi\"\necho int_to_mini_roman(14) . \"\\n\"; // \"xiv\"\necho\
    \ int_to_mini_roman(21) . \"\\n\"; // \"xxi\"\necho int_to_mini_roman(99) . \"\
    \\n\"; // \"xcix\"\necho int_to_mini_roman(499) . \"\\n\"; // \"cdxcix\"\necho\
    \ int_to_mini_roman(1000) . \"\\n\"; // \"m\"\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'i

    iv

    vi

    xiv

    xxi

    xcix

    cdxcix

    m

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = array(\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n\
    \    'x' => 10,\n    'v' => 5,\n    'i' => 1\n  );\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $roman .= str_repeat($numeral, $number / $value);\n    $number\
    \ %= $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bkgiksg.php:29\n\
    Stack trace:\n#0 /tmp/tmp8bkgiksg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8bkgiksg.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $lookup\
    \ = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1,\n  );\n  foreach\
    \ ($lookup as $roman => $value) {\n    $matches = intval($number / $value);\n\
    \    $roman .= str_repeat($roman, $matches);\n    $number = $number % $value;\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgcmn7fp.php:36\n\
    Stack trace:\n#0 /tmp/tmpcgcmn7fp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcgcmn7fp.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = array(\n   \
    \     'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' =>\
    \ 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n       \
    \ 'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n   \
    \     'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach ($roman\
    \ as $key => $value) {\n        $matches = intval($number / $value);\n       \
    \ $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\necho int_to_mini_roman(1) . \"\\n\";\necho int_to_mini_roman(4)\
    \ . \"\\n\";\necho int_to_mini_roman(9) . \"\\n\";\necho int_to_mini_roman(10)\
    \ . \"\\n\";\necho int_to_mini_roman(40) . \"\\n\";\necho int_to_mini_roman(90)\
    \ . \"\\n\";\necho int_to_mini_roman(100) . \"\\n\";\necho int_to_mini_roman(400)\
    \ . \"\\n\";\necho int_to_mini_roman(900) . \"\\n\";\necho int_to_mini_roman(1000)\
    \ . \"\\n\";\necho int_to_mini_roman(3999) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "I\nIV\nIX\nX\nXL\nXC\nC\nCD\nCM\nM\nMMMCMXCIX\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph1ln8lnn.php:47\nStack trace:\n#0 /tmp/tmph1ln8lnn.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph1ln8lnn.php on line 47\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    $matches = intval($number / $value);\n\
    \    $roman .= str_repeat($numeral, $matches);\n    $number = $number % $value;\n\
    \  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\necho int_to_mini_roman(1) . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\"\
    ;\necho int_to_mini_roman(9) . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\"\
    ;\necho int_to_mini_roman(11) . \"\\n\";\necho int_to_mini_roman(19) . \"\\n\"\
    ;\necho int_to_mini_roman(22) . \"\\n\";\necho int_to_mini_roman(15) . \"\\n\"\
    ;\necho int_to_mini_roman(1000) . \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "I\nIIII\nIIIIIIIII\nX\nXI\nXIIIIIIIII\nXXII\nXIIIII\nM\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjp5xdroa.php:33\nStack trace:\n\
    #0 /tmp/tmpjp5xdroa.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjp5xdroa.php\
    \ on line 33\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $roman\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bsvrgi7.php:36\n\
    Stack trace:\n#0 /tmp/tmp0bsvrgi7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0bsvrgi7.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('i', $number);\n    $roman = str_replace('iiiii', 'v', $roman);\n\
    \    $roman = str_replace('iiii', 'iv', $roman);\n    $roman = str_replace('vv',\
    \ 'x', $roman);\n    $roman = str_replace('viv', 'ix', $roman);\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gbhwvri.php:22\n\
    Stack trace:\n#0 /tmp/tmp_gbhwvri.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_gbhwvri.php\
    \ on line 22\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  );\n  foreach\
    \ ($numerals as $numeral => $value) {\n    $roman .= str_repeat($numeral, $number\
    \ / $value);\n    $number %= $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yaklpqb.php:35\n\
    Stack trace:\n#0 /tmp/tmp7yaklpqb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7yaklpqb.php\
    \ on line 35\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($numerals\
    \ as $numeral => $value) {\n        while ($number >= $value) {\n            $roman\
    \ .= $numeral;\n            $number -= $value;\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk7y8l5a.php:37\n\
    Stack trace:\n#0 /tmp/tmpbk7y8l5a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbk7y8l5a.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  );\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts_htfus.php:37\n\
    Stack trace:\n#0 /tmp/tmpts_htfus.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpts_htfus.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $roman\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($roman as $key =>\
    \ $value) {\n        $matches = intval($number / $value);\n        $result .=\
    \ str_repeat($key, $matches);\n        $number = $number % $value;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1rvan47.php:36\n\
    Stack trace:\n#0 /tmp/tmpn1rvan47.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpn1rvan47.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $numerals = [\n     \
    \   'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach ($numerals as\
    \ $numeral => $value) {\n        $result .= str_repeat($numeral, $number / $value);\n\
    \        $number %= $value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $numerals = array(\n  \
    \  'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($numerals as $numeral => $limit) {\n    while ($number >=\
    \ $limit) {\n      $result .= $numeral;\n      $number -= $limit;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = array(\n   \
    \     'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' =>\
    \ 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n       \
    \ 'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n   \
    \     'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach ($roman\
    \ as $key => $value) {\n        $matches = intval($number / $value);\n       \
    \ $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19r39d_j.php:36\n\
    Stack trace:\n#0 /tmp/tmp19r39d_j.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp19r39d_j.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $numerals = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach\
    \ ($numerals as $numeral => $value) {\n        while ($number >= $value) {\n \
    \           $result .= $numeral;\n            $number -= $value;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4yejlh5s.php:37\n\
    Stack trace:\n#0 /tmp/tmp4yejlh5s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4yejlh5s.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    foreach ($roman_numerals\
    \ as $roman => $number_value) {\n        $matches = intval($number / $number_value);\n\
    \        $roman .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $number_value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvi3vliop.php:36\n\
    Stack trace:\n#0 /tmp/tmpvi3vliop.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvi3vliop.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $num) {\n        $matches = intval($number / $num);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $num;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdq324s3r.php:31\n\
    Stack trace:\n#0 /tmp/tmpdq324s3r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdq324s3r.php\
    \ on line 31\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplox63kzm.php:29\n\
    Stack trace:\n#0 /tmp/tmplox63kzm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmplox63kzm.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1,\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7e3472t.php:37\n\
    Stack trace:\n#0 /tmp/tmpd7e3472t.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpd7e3472t.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('i', $number % 5);\n    $number -= $number % 5;\n    $roman =\
    \ str_repeat('v', $number / 5) . $roman;\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fjw80qa.php:19\n\
    Stack trace:\n#0 /tmp/tmp3fjw80qa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fjw80qa.php\
    \ on line 19\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $numerals\
    \ = array(\n        \"M\" => 1000,\n        \"CM\" => 900,\n        \"D\" => 500,\n\
    \        \"CD\" => 400,\n        \"C\" => 100,\n        \"XC\" => 90,\n      \
    \  \"L\" => 50,\n        \"XL\" => 40,\n        \"X\" => 10,\n        \"IX\" =>\
    \ 9,\n        \"V\" => 5,\n        \"IV\" => 4,\n        \"I\" => 1\n    );\n\
    \    foreach ($numerals as $numeral => $value) {\n        while ($number >= $value)\
    \ {\n            $roman .= $numeral;\n            $number -= $value;\n       \
    \ }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdcxfjx_.php:37\n\
    Stack trace:\n#0 /tmp/tmpjdcxfjx_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjdcxfjx_.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'M'  => 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD'\
    \ => 400,\n        'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n  \
    \      'XL' => 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n\
    \        'IV' => 4,\n        'I'  => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $num) {\n        $matches = intval($number / $num);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $num;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppm5p4d1k.php:36\n\
    Stack trace:\n#0 /tmp/tmppm5p4d1k.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppm5p4d1k.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('i', $number);\n  return str_replace(\n    ['iiiii', 'iiii', 'ii',\
    \ 'i'],\n    ['v', 'iv', 'ii', 'i'],\n    $roman\n  );\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5xl9vnn.php:21\n\
    Stack trace:\n#0 /tmp/tmpn5xl9vnn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpn5xl9vnn.php\
    \ on line 21\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $roman .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0262owas.php:29\n\
    Stack trace:\n#0 /tmp/tmp0262owas.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0262owas.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number -= $number % 10;\n    $roman\
    \ = str_replace('IIIII', 'V', $roman);\n    $roman = str_replace('IIII', 'IV',\
    \ $roman);\n    $roman = str_replace('VV', 'X', $roman);\n    $roman = str_replace('VIV',\
    \ 'IX', $roman);\n    $roman = str_replace('XXXXX', 'L', $roman);\n    $roman\
    \ = str_replace('XXXX', 'XL', $roman);\n    $roman = str_replace('LL', 'C', $roman);\n\
    \    $roman = str_replace('LXL', 'XC', $roman);\n    $roman = str_replace('CCCCC',\
    \ 'D', $roman);\n    $roman = str_replace('CCCC', 'CD', $roman);\n    $roman =\
    \ str_replace('DD', 'M', $roman);\n    $roman = str_replace('DCD', 'CM', $roman);\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vrxbdy5.php:30\n\
    Stack trace:\n#0 /tmp/tmp1vrxbdy5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1vrxbdy5.php\
    \ on line 30\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numeral\
    \ = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1,\n  );\n  foreach\
    \ ($numeral as $key => $value) {\n    while ($number >= $value) {\n      $roman\
    \ .= $key;\n      $number -= $value;\n    }\n  }\n  return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbco4djeq.php:37\n\
    Stack trace:\n#0 /tmp/tmpbco4djeq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbco4djeq.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ (int) ($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sj9z4mw.php:29\n\
    Stack trace:\n#0 /tmp/tmp1sj9z4mw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1sj9z4mw.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ (int) ($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9erbg6bk.php:29\n\
    Stack trace:\n#0 /tmp/tmp9erbg6bk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9erbg6bk.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    while ($number >= $value) {\n      $roman .= $numeral;\n \
    \     $number -= $value;\n    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0t5_x30.php:31\n\
    Stack trace:\n#0 /tmp/tmpi0t5_x30.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi0t5_x30.php\
    \ on line 31\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number -= $number % 10;\n    $roman\
    \ = str_replace('IIIII', 'V', $roman);\n    $roman = str_replace('IIII', 'IV',\
    \ $roman);\n    $roman = str_replace('VV', 'X', $roman);\n    $roman = str_replace('VIV',\
    \ 'IX', $roman);\n    $roman = str_replace('XXXXX', 'L', $roman);\n    $roman\
    \ = str_replace('XXXX', 'XL', $roman);\n    $roman = str_replace('LL', 'C', $roman);\n\
    \    $roman = str_replace('LXL', 'XC', $roman);\n    $roman = str_replace('CCCCC',\
    \ 'D', $roman);\n    $roman = str_replace('CCCC', 'CD', $roman);\n    $roman =\
    \ str_replace('DD', 'M', $roman);\n    $roman = str_replace('DCD', 'CM', $roman);\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vrxbdy5.php:30\n\
    Stack trace:\n#0 /tmp/tmp1vrxbdy5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1vrxbdy5.php\
    \ on line 30\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\necho int_to_mini_roman(1) . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\"\
    ;\necho int_to_mini_roman(9) . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\"\
    ;\necho int_to_mini_roman(40) . \"\\n\";\necho int_to_mini_roman(90) . \"\\n\"\
    ;\necho int_to_mini_roman(100) . \"\\n\";\necho int_to_mini_roman(400) . \"\\\
    n\";\necho int_to_mini_roman(900) . \"\\n\";\necho int_to_mini_roman(1000) . \"\
    \\n\";\necho int_to_mini_roman(999) . \"\\n\";\necho int_to_mini_roman(444) .\
    \ \"\\n\";\necho int_to_mini_roman(111) . \"\\n\";\necho int_to_mini_roman(2)\
    \ . \"\\n\";\necho int_to_mini_roman(3) . \"\\n\";\necho int_to_mini_roman(5)\
    \ . \"\\n\";\necho int_to_mini_roman(6) . \"\\n\";\necho int_to_mini_roman(7)\
    \ . \"\\n\";\necho int_to_mini_roman(8) . \"\\n\";\necho int_to_mini_roman(11)\
    \ . \"\\n\";\necho int_to_mini_roman(12) . \"\\n\";\necho int_to_mini_roman(13)\
    \ . \"\\n\";\necho int_to_mini_roman(14) . \"\\n\";\necho int_to_mini_roman(15)\
    \ . \"\\n\";\necho\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1blr1sua.php on line 43

    '
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $numerals = [\n     \
    \   'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach ($numerals as\
    \ $numeral => $limit) {\n        for (; $number >= $limit; $number -= $limit)\
    \ {\n            $result .= $numeral;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $romans = [\n       \
    \ 'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach ($romans as\
    \ $roman => $int) {\n        $matches = intdiv($number, $int);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $int;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $map\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($map as $roman =>\
    \ $int) {\n        $matches = intdiv($number, $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42js8lq3.php:36\n\
    Stack trace:\n#0 /tmp/tmp42js8lq3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp42js8lq3.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $result = '';\n  $numerals\
    \ = array(\n    'M' => 1000,\n    'D' => 500,\n    'C' => 100,\n    'L' => 50,\n\
    \    'X' => 10,\n    'V' => 5,\n    'I' => 1\n  );\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $result .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp291ybr0i.php:29\n\
    Stack trace:\n#0 /tmp/tmp291ybr0i.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp291ybr0i.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $roman\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7m229kh.php:36\n\
    Stack trace:\n#0 /tmp/tmph7m229kh.php(52): test()\n#1 {main}\n  thrown in /tmp/tmph7m229kh.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $numerals = [\n    'm'\
    \ => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n\
    \    'v' => 5,\n    'i' => 1\n  ];\n  $result = '';\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $result .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqkxowbd0.php:29\n\
    Stack trace:\n#0 /tmp/tmpqkxowbd0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpqkxowbd0.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number);\n  $roman = str_replace('IIIII', 'V', $roman);\n\
    \  $roman = str_replace('IIII', 'IV', $roman);\n  $roman = str_replace('VV', 'X',\
    \ $roman);\n  $roman = str_replace('VIV', 'IX', $roman);\n  $roman = str_replace('XXXXX',\
    \ 'L', $roman);\n  $roman = str_replace('XXXX', 'XL', $roman);\n  $roman = str_replace('LL',\
    \ 'C', $roman);\n  $roman = str_replace('LXL', 'XC', $roman);\n  $roman = str_replace('CCCCC',\
    \ 'D', $roman);\n  $roman = str_replace('CCCC', 'CD', $roman);\n  $roman = str_replace('DD',\
    \ 'M', $roman);\n  $roman = str_replace('DCD', 'CM', $roman);\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rusjdh9.php:29\n\
    Stack trace:\n#0 /tmp/tmp2rusjdh9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2rusjdh9.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $roman => $int) {\n        $matches = intval($number / $int);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $int;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpma5wkywb.php:36\n\
    Stack trace:\n#0 /tmp/tmpma5wkywb.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpma5wkywb.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm'  => 1000,\n        'cm' => 900,\n        'd'  => 500,\n        'cd'\
    \ => 400,\n        'c'  => 100,\n        'xc' => 90,\n        'l'  => 50,\n  \
    \      'xl' => 40,\n        'x'  => 10,\n        'ix' => 9,\n        'v'  => 5,\n\
    \        'iv' => 4,\n        'i'  => 1\n    );\n\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $numerals\
    \ = [\n        \"m\" => 1000,\n        \"cm\" => 900,\n        \"d\" => 500,\n\
    \        \"cd\" => 400,\n        \"c\" => 100,\n        \"xc\" => 90,\n      \
    \  \"l\" => 50,\n        \"xl\" => 40,\n        \"x\" => 10,\n        \"ix\" =>\
    \ 9,\n        \"v\" => 5,\n        \"iv\" => 4,\n        \"i\" => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        while ($number >= $value)\
    \ {\n            $roman .= $numeral;\n            $number -= $value;\n       \
    \ }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\necho int_to_mini_roman(1) . \"\\n\";\n\
    echo int_to_mini_roman(4) . \"\\n\";\necho int_to_mini_roman(9) . \"\\n\";\necho\
    \ int_to_mini_roman(10) . \"\\n\";\necho int_to_mini_roman(40) . \"\\n\";\necho\
    \ int_to_mini_roman(90) . \"\\n\";\necho int_to_mini_roman(100) . \"\\n\";\necho\
    \ int_to_mini_roman(400) . \"\\n\";\necho int_to_mini_roman(900) . \"\\n\";\n\
    echo int_to_mini_roman(1000) . \"\\n\";\necho int_to_mini_roman(3999) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'i

    iv

    ix

    x

    xl

    xc

    c

    cd

    cm

    m

    mmmcmxcix

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('i', $number % 5);\n    $number -= $number % 5;\n    $roman =\
    \ str_repeat('v', $number / 5) . $roman;\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fjw80qa.php:19\n\
    Stack trace:\n#0 /tmp/tmp3fjw80qa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3fjw80qa.php\
    \ on line 19\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intval($number\
    \ / $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2kgj9i5.php:29\n\
    Stack trace:\n#0 /tmp/tmpn2kgj9i5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn2kgj9i5.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $roman;\n}\necho\
    \ int_to_mini_roman(1) . \"\\n\"; // 'i'\necho int_to_mini_roman(4) . \"\\n\"\
    ; // 'iv'\necho int_to_mini_roman(6) . \"\\n\"; // 'vi'\necho int_to_mini_roman(14)\
    \ . \"\\n\"; // 'xiv'\necho int_to_mini_roman(21) . \"\\n\"; // 'xxi'\necho int_to_mini_roman(99)\
    \ . \"\\n\"; // 'xcix'\necho int_to_mini_roman(499) . \"\\n\"; // 'cdxcix'\necho\
    \ int_to_mini_roman(1000) . \"\\n\"; // 'm'\necho int_to_mini_roman(1001) . \"\
    \\n\"; // 'mi'\necho int_to_mini_roman(1990) . \"\\n\"; // 'mcmxc'\necho int_to_mini_roman(2007)\
    \ . \"\\n\"; // 'mmvii'\necho int_to_mini_roman(2008) . \"\\n\"; // 'mmviii'\n\
    echo int_to_mini_roman(2019) . \"\\n\"; // 'mmxix'\necho int_to_mini_roman(2020)\
    \ . \"\\n\"; // 'mmxx'\necho int_to_mini_roman(2021) . \"\\n\"; // 'mmxxi'\necho\
    \ int_to_mini_roman(2022) .\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpcigxjoiq.php on line 47

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $roman .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0262owas.php:29\n\
    Stack trace:\n#0 /tmp/tmp0262owas.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0262owas.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\necho int_to_mini_roman(1) . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\"\
    ;\necho int_to_mini_roman(9) . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\"\
    ;\necho int_to_mini_roman(11) . \"\\n\";\necho int_to_mini_roman(19) . \"\\n\"\
    ;\necho int_to_mini_roman(21) . \"\\n\";\necho int_to_mini_roman(99) . \"\\n\"\
    ;\necho int_to_mini_roman(100) . \"\\n\";\necho int_to_mini_roman(101) . \"\\\
    n\";\necho int_to_mini_roman(199) . \"\\n\";\necho int_to_mini_roman(200) . \"\
    \\n\";\necho int_to_mini_roman(201) . \"\\n\";\necho int_to_mini_roman(999) .\
    \ \"\\n\";\necho int_to_mini_roman(1000) . \"\\n\";\necho int_to_mini_roman(1001)\
    \ . \"\\n\";\necho int_to_mini_roman(1999) . \"\\n\";\necho int_to_mini_roman(2000)\
    \ . \"\\n\";\necho int_to_mini_roman(2001) . \"\\n\";\necho int_to_mini_roman(3999)\
    \ . \"\\n\";\necho int_to_mini_roman(4000) . \"\\n\";\necho int_to_mini_roman(4001)\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "I\nIIII\nIIIIIIIII\nX\nXI\nXIIIIIIIII\nXXI\nXXXXXXXXXIIIIIIIII\nC\nCI\n\
    CXXXXXXXXXIIIIIIIII\nCC\nCCI\nCCCCCCCCCXXXXXXXXXIIIIIIIII\nM\nMI\nMCCCCCCCCCXXXXXXXXXIIIIIIIII\n\
    MM\nMMI\nMMMCCCCCCCCCXXXXXXXXXIIIIIIIII\nMMMM\nMMMMI\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpd242ucwg.php:46\nStack trace:\n#0 /tmp/tmpd242ucwg.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd242ucwg.php on line 46\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n    'C'\
    \ => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' => 10,\n\
    \    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $value) {\n    $matches = intval($number\
    \ / $value);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $value;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqv5ydblb.php:36\n\
    Stack trace:\n#0 /tmp/tmpqv5ydblb.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqv5ydblb.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $roman .= str_repeat($numeral, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $roman;\n}\n\necho int_to_mini_roman(1)\
    \ . \"\\n\";\necho int_to_mini_roman(10) . \"\\n\";\necho int_to_mini_roman(100)\
    \ . \"\\n\";\necho int_to_mini_roman(1000) . \"\\n\";\necho int_to_mini_roman(999)\
    \ . \"\\n\";\necho int_to_mini_roman(500) . \"\\n\";\necho int_to_mini_roman(499)\
    \ . \"\\n\";\necho int_to_mini_roman(4) . \"\\n\";\necho int_to_mini_roman(3)\
    \ . \"\\n\";\necho int_to_mini_roman(2) . \"\\n\";\necho int_to_mini_roman(11)\
    \ . \"\\n\";\necho int_to_mini_roman(12) . \"\\n\";\necho int_to_mini_roman(13)\
    \ . \"\\n\";\necho int_to_mini_roman(14) . \"\\n\";\necho int_to_mini_roman(15)\
    \ . \"\\n\";\necho int_to_mini_roman(16) . \"\\n\";\necho int_to_mini_roman(17)\
    \ . \"\\n\";\necho int_to_mini_roman(18) . \"\\n\";\necho int_to_mini_roman(19)\
    \ . \"\\n\";\necho int_to_mini_roman(20) . \"\\n\";\necho int_to_mini_roman(21)\
    \ . \"\\n\";\necho int_to_mini_roman(22) . \"\\n\";\necho int_to_mini_roman(23)\
    \ . \"\\n\";\necho int_to_mini_roman(24) .\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpb1uvmg3r.php on line 48

    '
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number % 10);\n  $number = floor($number / 10);\n  $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n  $number = floor($number / 10);\n\
    \  $roman = str_repeat('C', $number % 10) . $roman;\n  $number = floor($number\
    \ / 10);\n  $roman = str_repeat('M', $number % 10) . $roman;\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7b7wtdm.php:23\n\
    Stack trace:\n#0 /tmp/tmpn7b7wtdm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn7b7wtdm.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n    foreach\
    \ ($numerals as $numeral => $value) {\n        while ($number >= $value) {\n \
    \           $result .= $numeral;\n            $number -= $value;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $lookup\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($lookup as\
    \ $roman => $value) {\n        $matches = intval($number / $value);\n        $roman\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebpzv8yf.php:36\n\
    Stack trace:\n#0 /tmp/tmpebpzv8yf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpebpzv8yf.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($numerals as $numeral => $value) {\n        while ($number >= $value) {\n \
    \           $result .= $numeral;\n            $number -= $value;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman_numerals\
    \ = array(\n    'M' => 1000,\n    'CM' => 900,\n    'D' => 500,\n    'CD' => 400,\n\
    \    'C' => 100,\n    'XC' => 90,\n    'L' => 50,\n    'XL' => 40,\n    'X' =>\
    \ 10,\n    'IX' => 9,\n    'V' => 5,\n    'IV' => 4,\n    'I' => 1,\n  );\n  foreach\
    \ ($roman_numerals as $roman_numeral => $value) {\n    $matches = intval($number\
    \ / $value);\n    $roman .= str_repeat($roman_numeral, $matches);\n    $number\
    \ = $number % $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa_5lz34.php:36\n\
    Stack trace:\n#0 /tmp/tmpqa_5lz34.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqa_5lz34.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = [\n \
    \   'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  $result\
    \ = '';\n  foreach ($roman_numerals as $roman => $int) {\n    $matches = intdiv($number,\
    \ $int);\n    $result .= str_repeat($roman, $matches);\n    $number = $number\
    \ % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2kgj9i5.php:29\n\
    Stack trace:\n#0 /tmp/tmpn2kgj9i5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn2kgj9i5.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman_numerals = array(\n\
    \    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c'\
    \ => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n\
    \    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  );\n  $result\
    \ = '';\n  foreach ($roman_numerals as $key => $value) {\n    while ($number >=\
    \ $value) {\n      $result .= $key;\n      $number -= $value;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n     \
    \   'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n\
    \        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman_numerals\
    \ = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  foreach\
    \ ($roman_numerals as $roman => $number_value) {\n    $matches = intval($number\
    \ / $number_value);\n    $roman .= str_repeat($roman, $matches);\n    $number\
    \ = $number % $number_value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppncqwpm6.php:36\n\
    Stack trace:\n#0 /tmp/tmppncqwpm6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppncqwpm6.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $roman\
    \ .= str_repeat('I', $number);\n  $roman = str_replace('IIIII', 'V', $roman);\n\
    \  $roman = str_replace('IIII', 'IV', $roman);\n  $roman = str_replace('VV', 'X',\
    \ $roman);\n  $roman = str_replace('VIV', 'IX', $roman);\n  $roman = str_replace('XXXXX',\
    \ 'L', $roman);\n  $roman = str_replace('XXXX', 'XL', $roman);\n  $roman = str_replace('LL',\
    \ 'C', $roman);\n  $roman = str_replace('LXL', 'XC', $roman);\n  $roman = str_replace('CCCCC',\
    \ 'D', $roman);\n  $roman = str_replace('CCCC', 'CD', $roman);\n  $roman = str_replace('DD',\
    \ 'M', $roman);\n  $roman = str_replace('DCD', 'CM', $roman);\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rusjdh9.php:29\n\
    Stack trace:\n#0 /tmp/tmp2rusjdh9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2rusjdh9.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $numerals\
    \ = array(\n        \"M\" => 1000,\n        \"CM\" => 900,\n        \"D\" => 500,\n\
    \        \"CD\" => 400,\n        \"C\" => 100,\n        \"XC\" => 90,\n      \
    \  \"L\" => 50,\n        \"XL\" => 40,\n        \"X\" => 10,\n        \"IX\" =>\
    \ 9,\n        \"V\" => 5,\n        \"IV\" => 4,\n        \"I\" => 1\n    );\n\
    \    foreach ($numerals as $numeral => $value) {\n        while ($number >= $value)\
    \ {\n            $roman .= $numeral;\n            $number -= $value;\n       \
    \ }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdcxfjx_.php:37\n\
    Stack trace:\n#0 /tmp/tmpjdcxfjx_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjdcxfjx_.php\
    \ on line 37\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n    'l' => 50,\n  \
    \  'x' => 10,\n    'v' => 5,\n    'i' => 1\n  ];\n  foreach ($numerals as $numeral\
    \ => $value) {\n    $roman .= str_repeat($numeral, intval($number / $value));\n\
    \    $number %= $value;\n  }\n  return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdvgv2qz.php:29\n\
    Stack trace:\n#0 /tmp/tmpmdvgv2qz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmdvgv2qz.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman_numerals = [\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    ];\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $key => $value) {\n        $matches = intval($number / $value);\n       \
    \ $roman .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfkkvje_.php:36\n\
    Stack trace:\n#0 /tmp/tmprfkkvje_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprfkkvje_.php\
    \ on line 36\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number % 10);\n    $number = floor($number / 10);\n    $roman\
    \ = str_repeat('X', $number % 10) . $roman;\n    $number = floor($number / 10);\n\
    \    $roman = str_repeat('C', $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat('M', $number % 10) . $roman;\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyn7gj0x.php:23\n\
    Stack trace:\n#0 /tmp/tmpbyn7gj0x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbyn7gj0x.php\
    \ on line 23\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $result = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ floor($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrskz2hn.php:29\n\
    Stack trace:\n#0 /tmp/tmpbrskz2hn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbrskz2hn.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $roman\
    \ .= str_repeat('I', $number);\n    $roman = str_replace('IIIII', 'V', $roman);\n\
    \    $roman = str_replace('IIII', 'IV', $roman);\n    $roman = str_replace('VV',\
    \ 'X', $roman);\n    $roman = str_replace('VIV', 'IX', $roman);\n    $roman =\
    \ str_replace('XXXXX', 'L', $roman);\n    $roman = str_replace('XXXX', 'XL', $roman);\n\
    \    $roman = str_replace('LL', 'C', $roman);\n    $roman = str_replace('LXL',\
    \ 'XC', $roman);\n    $roman = str_replace('CCCCC', 'D', $roman);\n    $roman\
    \ = str_replace('CCCC', 'CD', $roman);\n    $roman = str_replace('DD', 'M', $roman);\n\
    \    $roman = str_replace('DCD', 'CM', $roman);\n    return $roman;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0jqux8e.php:29\n\
    Stack trace:\n#0 /tmp/tmpu0jqux8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu0jqux8e.php\
    \ on line 29\n"
  timestamp: 1659731058
- exit_code: 0
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n  $roman = '';\n  $numerals\
    \ = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n\
    \    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' =>\
    \ 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1\n  ];\n  foreach\
    \ ($numerals as $numeral => $value) {\n    while ($number >= $value) {\n     \
    \ $roman .= $numeral;\n      $number -= $value;\n    }\n  }\n  return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = \"\";\n    $roman\
    \ .= str_repeat(\"I\", $number % 10);\n    $number = floor($number / 10);\n  \
    \  $roman = str_repeat(\"X\", $number % 10) . $roman;\n    $number = floor($number\
    \ / 10);\n    $roman = str_repeat(\"C\", $number % 10) . $roman;\n    $number\
    \ = floor($number / 10);\n    $roman = str_repeat(\"M\", $number % 10) . $roman;\n\
    \    $number = floor($number / 10);\n    $roman = str_repeat(\"V\", $number %\
    \ 5) . $roman;\n    $number = floor($number / 5);\n    $roman = str_repeat(\"\
    L\", $number % 5) . $roman;\n    $number = floor($number / 5);\n    $roman = str_repeat(\"\
    D\", $number % 5) . $roman;\n    $number = floor($number / 5);\n    $roman = str_repeat(\"\
    M\", $number % 5) . $roman;\n    $number = floor($number / 5);\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1f7xyvc.php:32\n\
    Stack trace:\n#0 /tmp/tmpg1f7xyvc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpg1f7xyvc.php\
    \ on line 32\n"
  timestamp: 1659731058
- exit_code: 255
  program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\nfunction int_to_mini_roman($number) {\n    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\necho int_to_mini_roman(1) . \"\\n\"; // i\necho int_to_mini_roman(4) . \"\
    \\n\"; // iv\necho int_to_mini_roman(9) . \"\\n\"; // ix\necho int_to_mini_roman(10)\
    \ . \"\\n\"; // x\necho int_to_mini_roman(40) . \"\\n\"; // xl\necho int_to_mini_roman(90)\
    \ . \"\\n\"; // xc\necho int_to_mini_roman(100) . \"\\n\"; // c\necho int_to_mini_roman(400)\
    \ . \"\\n\"; // cd\necho int_to_mini_roman(900) . \"\\n\"; // cm\necho int_to_mini_roman(1000)\
    \ . \"\\n\"; // m\necho int_to_mini_roman(3999) . \"\\n\"; // mmmmcmxcix\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "i\niiii\nviiii\nx\nxxxx\nlxxxx\nc\ncccc\ndcccc\nm\nmmmdcccclxxxxviiii\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d4v4a57.php:40\nStack\
    \ trace:\n#0 /tmp/tmp8d4v4a57.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp8d4v4a57.php\
    \ on line 40\n"
  timestamp: 1659731058
