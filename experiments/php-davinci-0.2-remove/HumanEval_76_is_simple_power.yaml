name: HumanEval_76_is_simple_power
language: php
prompt: "<?php\n// Your task is to write a function that returns true if a number\
  \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
  \ of n if n**int=x\n// For example:\nfunction is_simple_power($x, $n) {\n"
tests: "function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $x = log($x, $n);\n  return is_int($x);\n}\n", "  $int = log($x,\
    \ $n);\n  return $int == intval($int);\n}\n", "  $pow = log($x, $n);\n  return\
    \ $pow == (int)$pow;\n}\n", "  $i = 1;\n  while ($i < $x) {\n    $i *= $n;\n \
    \ }\n  return $i == $x;\n}\n", "  $int = log($x, $n);\n  return $int == floor($int);\n\
    }", "  $i = 1;\n  while ($n**$i <= $x) {\n    if ($n**$i == $x) {\n      return\
    \ true;\n    }\n    $i++;\n  }\n  return false;\n}\n", "    $i = 1;\n    while\
    \ (pow($n, $i) <= $x) {\n        if (pow($n, $i) == $x) {\n            return\
    \ true;\n        }\n        $i++;\n    }\n    return false;\n}\n", "    $i = 1;\n\
    \    while (pow($n, $i) < $x) {\n        $i++;\n    }\n    return pow($n, $i)\
    \ == $x;\n}\n", "  $int = log($x, $n);\n  return $int == (int)$int;\n}\n", " \
    \ if ($x == 1) {\n    return true;\n  }\n  $i = 1;\n  while ($i < $x) {\n    $i\
    \ *= $n;\n    if ($i == $x) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n", "  $i = 1;\n  while ($i < $x) {\n    $i *= $n;\n  }\n  return $i == $x;\n\
    }\n", "  return log($x, $n) == floor(log($x, $n));\n}", "  $i = 1;\n  while ($i\
    \ < $x) {\n    $i *= $n;\n  }\n  return $i == $x;\n}\n", "  $i = 1;\n  while (pow($n,\
    \ $i) <= $x) {\n    if (pow($n, $i) == $x) {\n      return true;\n    }\n    $i++;\n\
    \  }\n  return false;\n}\n", "  $int = log($x, $n);\n  return $int == floor($int);\n\
    }", "  $int = log($x, $n);\n  return $int == floor($int);\n}\n", "  $int = log($x,\
    \ $n);\n  return $int == intval($int);\n}\n", "  $int = log($x, $n);\n  return\
    \ $int == floor($int);\n}", "  $int = log($x, $n);\n  return $int == floor($int);\n\
    }\n", "  $i = 1;\n  while (pow($n, $i) < $x) {\n    $i++;\n  }\n  if (pow($n,\
    \ $i) == $x) {\n    return true;\n  } else {\n    return false;\n  }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
