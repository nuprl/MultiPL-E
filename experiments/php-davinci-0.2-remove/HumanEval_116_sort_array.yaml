name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\nfunction sort_array($arr) {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $arr = array_map(function($x) {\n        return [\n           \
    \ 'ones' => substr_count(decbin($x), '1'),\n            'value' => $x\n      \
    \  ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        if ($a['ones']\
    \ == $b['ones']) {\n            return $a['value'] - $b['value'];\n        }\n\
    \        return $a['ones'] - $b['ones'];\n    });\n    return array_map(function($x)\
    \ {\n        return $x['value'];\n    }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    $ones = substr_count(decbin($x), '1');\n    return [$ones, $x];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return\
    \ $a[1] - $b[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return array_map(function($x)\
    \ {\n    return $x[1];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n    $b\
    \ = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b)) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return strlen($a) - strlen($b);\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    $ones = substr_count(decbin($n), '1');\n    return [$ones, $n];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    return $a[0] == $b[0] ? $a[1]\
    \ - $b[1] : $a[0] - $b[0];\n  });\n  return array_map(function($n) {\n    return\
    \ $n[1];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_map('bindec', $arr);\n  return $arr;\n}\n", "  $arr_ones\
    \ = [];\n  $arr_decimal = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key]\
    \ = substr_count(decbin($value), '1');\n    $arr_decimal[$key] = $value;\n  }\n\
    \  array_multisort($arr_ones, SORT_ASC, $arr_decimal, SORT_ASC, $arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [\n\
    \      'dec' => $x,\n      'bin' => decbin($x)\n    ];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $aOnes = substr_count($a['bin'], '1');\n    $bOnes =\
    \ substr_count($b['bin'], '1');\n    if ($aOnes === $bOnes) {\n      return $a['dec']\
    \ - $b['dec'];\n    }\n    return $aOnes - $bOnes;\n  });\n  return array_map(function($x)\
    \ {\n    return $x['dec'];\n  }, $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ 1);\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map('decbin',\
    \ $arr);\n  $arr = array_map('strlen', $arr);\n  $arr = array_combine(range(0,\
    \ count($arr) - 1), $arr);\n  asort($arr);\n  $arr = array_keys($arr);\n  return\
    \ $arr;\n}\n", "  $arr = array_map(function($val) {\n    $ones = substr_count(decbin($val),\
    \ '1');\n    return [$ones, $val];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) return $a[1] - $b[1];\n    return $a[0] - $b[0];\n\
    \  });\n  return array_map(function($val) {\n    return $val[1];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [\n            'dec' => $n,\n            'bin' => decbin($n),\n        ];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones = substr_count($a['bin'],\
    \ '1');\n        $b_ones = substr_count($b['bin'], '1');\n        if ($a_ones\
    \ === $b_ones) {\n            return $a['dec'] - $b['dec'];\n        }\n     \
    \   return $a_ones - $b_ones;\n    });\n    return array_column($arr, 'dec');\n\
    }\n", "  $sorted = [];\n  foreach ($arr as $num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    $sorted[$ones][] = $num;\n  }\n  ksort($sorted);\n  $result = [];\n\
    \  foreach ($sorted as $ones => $nums) {\n    sort($nums);\n    $result = array_merge($result,\
    \ $nums);\n  }\n  return $result;\n}\n", "  $ones = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($v) {\n\
    \    $bin = decbin($v);\n    $ones = substr_count($bin, '1');\n    return [$v,\
    \ $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1])\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "  // sort the\
    \ array by the number of ones in the binary representation\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b),\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a - $b;\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a = $a[1];\n        $b = $b[1];\n        $a = str_split($a);\n        $b\
    \ = str_split($b);\n        $a = array_sum($a);\n        $b = array_sum($b);\n\
    \        if ($a === $b) {\n            return $a[0] - $b[0];\n        }\n    \
    \    return $a - $b;\n    });\n    $arr = array_map(function($n) {\n        return\
    \ $n[0];\n    }, $arr);\n    return $arr;\n}\n", "    // your code here\n    $arr_ones\
    \ = [];\n    foreach ($arr as $key => $value) {\n        $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    }\n    array_multisort($arr_ones, SORT_ASC, $arr);\n    return $arr;\n\
    }\n", "    $ones = [];\n    foreach ($arr as $num) {\n        $ones[$num] = substr_count(decbin($num),\
    \ '1');\n    }\n    asort($ones);\n    $sorted = [];\n    foreach ($ones as $key\
    \ => $value) {\n        $sorted[] = $key;\n    }\n    return $sorted;\n}\n", " \
    \ $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n\
    \    return [$ones, $n];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if\
    \ ($a[0] === $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0] -\
    \ $b[0];\n  });\n  return array_map(function($n) {\n    return $n[1];\n  }, $arr);\n\
    }\n", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n    \
    \    $b = $b[1];\n        $a = str_split($a);\n        $b = str_split($b);\n \
    \       $a = array_sum($a);\n        $b = array_sum($b);\n        if ($a == $b)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $a - $b;\n \
    \   });\n    $arr = array_map(function($n) {\n        return $n[0];\n    }, $arr);\n\
    \    return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\n$tests\
    \ = [\n  [[1,2,3,4,5,6,7,8,9], [1,2,4,8,3,5,6,7,9]],\n  [[0,1,2,3,4,5,6,7,8,9],\
    \ [0,1,2,4,8,3,5,6,7,9]],\n  [[0,1,2,4,8,16,32,64,128,256,512,1024], [0,1,2,4,8,16,32,64,128,256,512,1024]],\n\
    \  [[], []],\n  [[1,2,3,4,5,6,7,8,9,10,11], [1,2,4,8,3,5,6,7,9,10,11]],\n  [[1024,512,256,128,64,32,16,8,4,2,1],\
    \ [1,2,4,8,16,32,64,128,256,512,1024]],\n  [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],\
    \ [", "  $arr = array_map(function($e) {\n    return [$e, decbin($e)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($e) {\n    return $e[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  foreach ($arr as $num) {\n    $ones[$num] = substr_count(decbin($num), '1');\n\
    \  }\n  asort($ones);\n  $result = [];\n  foreach ($ones as $num => $count) {\n\
    \    $result[] = $num;\n  }\n  return $result;\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $aOnes = substr_count($a[1], '1');\n        $bOnes = substr_count($b[1],\
    \ '1');\n        if ($aOnes == $bOnes) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $aOnes - $bOnes;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n    return\
    \ $a[0];\n  }, $arr);\n}\n", "  // Your code here\n  $arr = array_map('decbin',\
    \ $arr);\n  $arr = array_map('strlen', $arr);\n  $arr = array_map('intval', $arr);\n\
    \  $arr = array_flip($arr);\n  $arr = array_map('array_keys', $arr);\n  $arr =\
    \ array_map('array_map', array_fill(0, count($arr), 'intval'), $arr);\n  $arr\
    \ = array_map('array_map', array_fill(0, count($arr), 'decbin'), $arr);\n  $arr\
    \ = array_map('array_map', array_fill(0, count($arr), 'strlen'), $arr);\n  $arr\
    \ = array_map('array_map', array_fill(0, count($arr), 'intval'), $arr);\n  $arr\
    \ = array_map('array_flip', $arr);\n  $arr = array_map('array_keys', $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'intval'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'decbin'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'strlen'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'intval'), $arr);\n\
    \  $arr = array_map('array_flip', $arr);\n  $arr = array_map('array_keys', $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'intval'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'decbin'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'strlen'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'intval'), $arr);\n\
    \  $arr = array_", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n    \
    \    $b = $b[1];\n        $a = substr_count($a, '1');\n        $b = substr_count($b,\
    \ '1');\n        if ($a === $b) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a - $b;\n    });\n    return array_map(function($n) {\n \
    \       return $n[0];\n    }, $arr);\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = substr_count($a[1], '1');\n        $b = substr_count($b[1],\
    \ '1');\n        if ($a === $b) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a - $b;\n    });\n    return array_map(function($n) {\n \
    \       return $n[0];\n    }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as\
    \ $num) {\n    $ones[$num] = substr_count(decbin($num), '1');\n  }\n  asort($ones);\n\
    \  $sorted = [];\n  foreach ($ones as $key => $value) {\n    $sorted[] = $key;\n\
    \  }\n  return $sorted;\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr\
    \ as $num) {\n    $binary = decbin($num);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count === 0) {\n      $zeros[] = $num;\n    } else {\n     \
    \ $ones[$count][] = $num;\n    }\n  }\n  ksort($ones);\n  $result = [];\n  foreach\
    \ ($ones as $count => $nums) {\n    sort($nums);\n    $result = array_merge($result,\
    \ $nums);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n \
    \ return $result;\n}\n", "  $arr = array_map(function($n) {\n    return [\n  \
    \    'dec' => $n,\n      'bin' => decbin($n),\n    ];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a['bin'], '1');\n    $b_ones\
    \ = substr_count($b['bin'], '1');\n    if ($a_ones === $b_ones) {\n      return\
    \ $a['dec'] - $b['dec'];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n['dec'];\n  }, $arr);\n}\n", "    $arr\
    \ = array_map(function($n) {\n        return [\n            'dec' => $n,\n   \
    \         'bin' => decbin($n),\n        ];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a['bin'], '1');\n        $b_ones = substr_count($b['bin'],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a['dec'] - $b['dec'];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n['dec'];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  // your code here\n  $arr_ones = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ \"1\");\n  }\n  asort($arr_ones);\n  $arr_sorted = [];\n  foreach ($arr_ones\
    \ as $key => $value) {\n    $arr_sorted[] = $arr[$key];\n  }\n  return $arr_sorted;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = substr_count($a[1], '1');\n    $b\
    \ = substr_count($b[1], '1');\n    return $a == $b ? $a[0] - $b[0] : $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n  $arr = array_keys($arr);\n\
    \  $arr = array_map('bindec', $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = count_chars($a[1], 1);\n    $b = count_chars($b[1], 1);\n    return\
    \ $a[49] == $b[49] ? $a[0] - $b[0] : $a[49] - $b[49];\n  });\n  return array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = count_chars($a[1], 1);\n    $b = count_chars($b[1], 1);\n    return\
    \ $a[49] == $b[49] ? $a[0] - $b[0] : $a[49] - $b[49];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  // sort by number of ones\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count(decbin($a), '1');\n    $b_ones\
    \ = substr_count(decbin($b), '1');\n    if ($a_ones == $b_ones) {\n      return\
    \ $a - $b;\n    }\n    return $a_ones - $b_ones;\n  });\n  return $arr;\n}\n",
  "    $arr = array_map(function($num) {\n        return [$num, decbin($num)];\n \
    \   }, $arr);\n    usort($arr, function($a, $b) {\n        $aOnes = substr_count($a[1],\
    \ '1');\n        $bOnes = substr_count($b[1], '1');\n        if ($aOnes == $bOnes)\
    \ {\n            return $a[0] - $b[0];\n        }\n        return $aOnes - $bOnes;\n\
    \    });\n    return array_map(function($num) {\n        return $num[0];\n   \
    \ }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n   \
    \ return [$ones, $n];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[0]\
    \ == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0] - $b[0];\n\
    \  });\n  return array_map(function($n) {\n    return $n[1];\n  }, $arr);\n}\n",
  "  $arr_ones = [];\n  $arr_decimal = [];\n  foreach ($arr as $value) {\n    $ones\
    \ = substr_count(decbin($value), '1');\n    $arr_ones[$value] = $ones;\n    $arr_decimal[$value]\
    \ = $value;\n  }\n  asort($arr_ones);\n  $arr_sorted = [];\n  foreach ($arr_ones\
    \ as $key => $value) {\n    $arr_sorted[$key] = $arr_decimal[$key];\n  }\n  return\
    \ array_keys($arr_sorted);\n}", "  $arr = array_map(function($x) {\n    return\
    \ [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [\n      'ones'\
    \ => substr_count(decbin($n), '1'),\n      'dec' => $n\n    ];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a['ones'] == $b['ones']) {\n     \
    \ return $a['dec'] - $b['dec'];\n    }\n    return $a['ones'] - $b['ones'];\n\
    \  });\n  return array_map(function($n) {\n    return $n['dec'];\n  }, $arr);\n\
    }\n", "    $arr = array_map(function($num) {\n        $ones = substr_count(decbin($num),\
    \ '1');\n        return [$ones, $num];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return array_map(function($num)\
    \ {\n        return $num[1];\n    }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr\
    \ as $key => $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n\
    \  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr\
    \ = array_map('decbin', $arr);\n  $arr = array_map('str_split', $arr);\n  $arr\
    \ = array_map('array_sum', $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n\
    \  $arr = array_keys($arr);\n  $arr = array_map('bindec', $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ substr_count($a, '1');\n    $b = substr_count($b, '1');\n    if ($a === $b)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr_ones\
    \ = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key]\
    \ = substr_count(decbin($value), '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones,\
    \ SORT_ASC, $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  // your code here\n  $arr_ones =\
    \ [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key]\
    \ = substr_count(decbin($value), '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones,\
    \ SORT_ASC, $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "    // Your code here\n    $arr_ones = array();\n\
    \    $arr_zeros = array();\n    foreach ($arr as $key => $value) {\n        $binary\
    \ = decbin($value);\n        $count = substr_count($binary, '1');\n        if\
    \ ($count == 0) {\n            $arr_zeros[] = $value;\n        } else {\n    \
    \        $arr_ones[$count][] = $value;\n        }\n    }\n    ksort($arr_ones);\n\
    \    $result = array();\n    foreach ($arr_ones as $key => $value) {\n       \
    \ sort($value);\n        foreach ($value as $k => $v) {\n            $result[]\
    \ = $v;\n        }\n    }\n    sort($arr_zeros);\n    foreach ($arr_zeros as $key\
    \ => $value) {\n        $result[] = $value;\n    }\n    return $result;\n}\n",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($num) {\n        return\
    \ [\n            'ones' => substr_count(decbin($num), '1'),\n            'num'\
    \ => $num\n        ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n   \
    \     if ($a['ones'] == $b['ones']) {\n            return $a['num'] - $b['num'];\n\
    \        }\n        return $a['ones'] - $b['ones'];\n    });\n    return array_map(function($num)\
    \ {\n        return $num['num'];\n    }, $arr);\n}\n", "    $arr = array_map(function($x)\
    \ {\n        return [$x, decbin($x)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $aOnes = substr_count($a[1], '1');\n        $bOnes = substr_count($b[1],\
    \ '1');\n        if ($aOnes === $bOnes) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $aOnes - $bOnes;\n    });\n    return array_map(function($x)\
    \ {\n        return $x[0];\n    }, $arr);\n}\n", "    $arr = array_map(function($num)\
    \ {\n        return [$num, decbin($num)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [\n            'ones' => substr_count(decbin($n), '1'),\n\
    \            'dec' => $n\n        ];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        if ($a['ones'] == $b['ones']) {\n            return $a['dec']\
    \ - $b['dec'];\n        }\n        return $a['ones'] - $b['ones'];\n    });\n\
    \    return array_map(function($n) {\n        return $n['dec'];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ substr_count($a, '1');\n    $b = substr_count($b, '1');\n    if ($a === $b)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin',\
    \ $arr);\n  $arr = array_map('str_split', $arr);\n  $arr = array_map('array_sum',\
    \ $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n  $arr = array_keys($arr);\n\
    \  $arr = array_map('bindec', $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    if ($a['1']\
    \ == $b['1']) {\n      return $a[0] - $b[0];\n    }\n    return $a['1'] - $b['1'];\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr_ones = [];\n  $arr_decimal = [];\n  foreach ($arr as $key => $value) {\n\
    \    $arr_ones[$key] = substr_count(decbin($value), '1');\n    $arr_decimal[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_decimal, SORT_ASC,\
    \ $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    $ones\
    \ = substr_count(decbin($n), '1');\n    return [$ones, $n];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) return $a[1] - $b[1];\n    return\
    \ $a[0] - $b[0];\n  });\n  return array_map(function($n) {\n    return $n[1];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr\
    \ = array_map('strlen', $arr);\n  $arr = array_flip($arr);\n  $arr = array_map('array_keys',\
    \ $arr);\n  $arr = array_map('max', $arr);\n  $arr = array_map('bindec', $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  $zeros = [];\n  foreach ($arr as $num) {\n    $ones[] = substr_count(decbin($num),\
    \ '1');\n    $zeros[] = $num;\n  }\n  array_multisort($ones, SORT_ASC, $zeros,\
    \ SORT_ASC);\n  return $zeros;\n}\n", "  $arr = array_map(function($n) {\n   \
    \ return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n  \
    \  $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = substr_count($a, '1');\n    $b = substr_count($b, '1');\n    if ($a\
    \ == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n \
    \ return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n}\n", " \
    \ $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "    $ones =\
    \ [];\n    foreach ($arr as $num) {\n        $ones[$num] = substr_count(decbin($num),\
    \ '1');\n    }\n    asort($ones);\n    $result = [];\n    foreach ($ones as $num\
    \ => $count) {\n        $result[] = $num;\n    }\n    return $result;\n}\n", " \
    \ // sort by number of ones in binary representation\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b),\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a - $b;\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [decbin($n), $n];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[0];\n\
    \    $b = $b[0];\n    $a_ones = substr_count($a, '1');\n    $b_ones = substr_count($b,\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a < $b ? -1 : 1;\n    }\n\
    \    return $a_ones < $b_ones ? -1 : 1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[1];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n\
    \    $bin = decbin($x);\n    $ones = substr_count($bin, '1');\n    return [$ones,\
    \ $x];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $a[1] - $b[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ array_map(function($x) {\n    return $x[1];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    $ones = substr_count(decbin($x),\
    \ '1');\n    return [$ones, $x];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return array_map(function($x) {\n    return $x[1];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($x) {\n        return [$x,\
    \ decbin($x)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($x)\
    \ {\n        return $x[0];\n    }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr\
    \ as $num) {\n    $ones[$num] = substr_count(decbin($num), '1');\n  }\n  asort($ones);\n\
    \  $sorted = [];\n  foreach ($ones as $key => $value) {\n    $sorted[] = $key;\n\
    \  }\n  return $sorted;\n}\n", "  $arr = array_map(function($num) {\n    $ones\
    \ = substr_count(decbin($num), '1');\n    return [$ones, $num];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a[0] === $b[0]) {\n      return $a[1]\
    \ - $b[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return array_map(function($num)\
    \ {\n    return $num[1];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return\
    \ [\n            'ones' => substr_count(decbin($n), '1'),\n            'dec' =>\
    \ $n\n        ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        if\
    \ ($a['ones'] == $b['ones']) {\n            return $a['dec'] - $b['dec'];\n  \
    \      }\n        return $a['ones'] - $b['ones'];\n    });\n    return array_map(function($n)\
    \ {\n        return $n['dec'];\n    }, $arr);\n}\n", "  $arr = array_map(function($num)\
    \ {\n    return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($num) {\n    return $num[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($x) {\n    $bin = decbin($x);\n    $ones =\
    \ substr_count($bin, '1');\n    return [$ones, $x];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return array_map(function($x) {\n\
    \    return $x[1];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n  \
    \  return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n \
    \   $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count == 0) {\n      $zeros[] = $value;\n    } else {\n    \
    \  $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n \
    \ foreach ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}\n", "  $arr = array_map(function($a) {\n    return [$a,\
    \ decbin($a)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  foreach ($arr as $num) {\n    $ones[$num] = substr_count(decbin($num),\
    \ '1');\n  }\n  asort($ones);\n  $result = [];\n  foreach ($ones as $key => $value)\
    \ {\n    $result[] = $key;\n  }\n  return $result;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n   \
    \     return [\n            'ones' => substr_count(decbin($n), '1'),\n       \
    \     'value' => $n\n        ];\n    }, $arr);\n    usort($arr, function($a, $b)\
    \ {\n        if ($a['ones'] == $b['ones']) {\n            return $a['value'] <=>\
    \ $b['value'];\n        }\n        return $a['ones'] <=> $b['ones'];\n    });\n\
    \    return array_column($arr, 'value');\n}\n", "  $ones = [];\n  foreach ($arr\
    \ as $value) {\n    $ones[] = substr_count(decbin($value), '1');\n  }\n  array_multisort($ones,\
    \ $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $aOnes = substr_count($a[1], '1');\n    $bOnes = substr_count($b[1],\
    \ '1');\n    if ($aOnes == $bOnes) {\n      return $a[0] - $b[0];\n    }\n   \
    \ return $aOnes - $bOnes;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ substr_count(decbin($n), '1')];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    return $a[1] == $b[1] ? $a[0] - $b[0] : $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $sorted =\
    \ [];\n  foreach ($arr as $num) {\n    $sorted[decbin($num)] = $num;\n  }\n  ksort($sorted);\n\
    \  return array_values($sorted);\n}\n", "  $arr = array_map(function($n) {\n \
    \   return [\n      'ones' => substr_count(decbin($n), '1'),\n      'dec' => $n\n\
    \    ];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a['ones'] ==\
    \ $b['ones']) {\n      return $a['dec'] - $b['dec'];\n    }\n    return $a['ones']\
    \ - $b['ones'];\n  });\n  return array_map(function($n) {\n    return $n['dec'];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a1\
    \ = substr_count($a[1], '1');\n        $b1 = substr_count($b[1], '1');\n     \
    \   if ($a1 == $b1) {\n            return $a[0] - $b[0];\n        }\n        return\
    \ $a1 - $b1;\n    });\n    return array_map(function($n) {\n        return $n[0];\n\
    \    }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  //\
    \ sort array by number of ones in binary representation\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b),\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a - $b;\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return $arr;\n}\n", "    $arr = array_map(function($n)\
    \ {\n        $ones = substr_count(decbin($n), '1');\n        return [$ones, $n];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $a[1] - $b[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return array_map(function($n) {\n        return $n[1];\n    }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$ones, $n];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return array_map(function($n) {\n    return $n[1];\n\
    \  }, $arr);\n}\n", "  $arr_bin = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr_bin, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr_bin);\n}\n",
  "  // your code here\n  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n   \
    \ $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($a) {\n    return $a[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [\n      'dec'\
    \ => $x,\n      'bin' => decbin($x)\n    ];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a['bin'], '1');\n    $b_ones = substr_count($b['bin'],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a['dec'] - $b['dec'];\n\
    \    }\n    return $a_ones - $b_ones;\n  });\n  return array_map(function($x)\
    \ {\n    return $x['dec'];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    return substr_count($a[1],\
    \ '1') - substr_count($b[1], '1') ?: $a[0] - $b[0];\n  });\n  return array_column($arr,\
    \ 0);\n}\n", "    $arr = array_map(function($x) {\n        return [$x, decbin($x)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = count_chars($a[1],\
    \ 1);\n        $b = count_chars($b[1], 1);\n        return $a[49] - $b[49] ?:\
    \ $a[48] - $b[48] ?: $a[0] - $b[0];\n    });\n    return array_map(function($x)\
    \ {\n        return $x[0];\n    }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr\
    \ as $num) {\n    $ones[$num] = substr_count(decbin($num), '1');\n  }\n  asort($ones);\n\
    \  $result = [];\n  foreach ($ones as $num => $count) {\n    $result[] = $num;\n\
    \  }\n  return $result;\n}\n", "  $ones = [];\n  foreach ($arr as $num) {\n  \
    \  $ones[$num] = substr_count(decbin($num), '1');\n  }\n  asort($ones);\n  $result\
    \ = [];\n  foreach ($ones as $num => $count) {\n    $result[] = $num;\n  }\n \
    \ return $result;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = substr_count($a, '1');\n    $b = substr_count($b, '1');\n    if ($a\
    \ === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  \
    \  $ones = [];\n    foreach ($arr as $num) {\n        $ones[$num] = substr_count(decbin($num),\
    \ '1');\n    }\n    asort($ones);\n    $result = [];\n    foreach ($ones as $key\
    \ => $value) {\n        $result[] = $key;\n    }\n    return $result;\n}\n", " \
    \ $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n\
    \    if ($a === $b) {\n      return $a[0] <=> $b[0];\n    }\n    return $a <=>\
    \ $b;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n   \
    \ return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [\n      'dec' => $x,\n      'bin' =>\
    \ decbin($x)\n    ];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a['bin'], '1');\n    $b_ones = substr_count($b['bin'], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a['dec'] < $b['dec'] ? -1 : 1;\n\
    \    }\n    return $a_ones < $b_ones ? -1 : 1;\n  });\n  return array_map(function($x)\
    \ {\n    return $x['dec'];\n  }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    $bin = decbin($x);\n    $ones = substr_count($bin, '1');\n    return\
    \ [$x, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] ==\
    \ $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $num) {\n    $ones[$num]\
    \ = substr_count(decbin($num), '1');\n  }\n  asort($ones);\n  $result = [];\n\
    \  foreach ($ones as $key => $value) {\n    $result[] = $key;\n  }\n  return $result;\n\
    }\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$ones, $n];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    return $a[0] == $b[0] ? $a[1] - $b[1] : $a[0] - $b[0];\n  });\n  return\
    \ array_map(function($n) {\n    return $n[1];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  foreach ($arr as $num) {\n    $ones[$num] = substr_count(decbin($num), '1');\n\
    \  }\n  asort($ones);\n  $sorted = [];\n  foreach ($ones as $num => $count) {\n\
    \    $sorted[] = $num;\n  }\n  return $sorted;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n  return $arr;\n}\n", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = substr_count($a[1], '1');\n        $b = substr_count($b[1],\
    \ '1');\n        if ($a === $b) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a - $b;\n    });\n    return array_map(function($n) {\n \
    \       return $n[0];\n    }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n \
    \ foreach ($arr as $num) {\n    $binary = decbin($num);\n    $ones[$num] = substr_count($binary,\
    \ '1');\n    $zeros[$num] = substr_count($binary, '0');\n  }\n  asort($ones);\n\
    \  $sorted = [];\n  foreach ($ones as $key => $value) {\n    $sorted[] = $key;\n\
    \  }\n  return $sorted;\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'];\n    $b = $b['1'];\n    if\
    \ ($a === $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n\
    \  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "    $arr =\
    \ array_map(function($n) {\n        return [\n            'dec' => $n,\n     \
    \       'bin' => decbin($n),\n        ];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $aOnes = substr_count($a['bin'], '1');\n        $bOnes = substr_count($b['bin'],\
    \ '1');\n        if ($aOnes == $bOnes) {\n            return $a['dec'] - $b['dec'];\n\
    \        }\n        return $aOnes - $bOnes;\n    });\n    return array_map(function($n)\
    \ {\n        return $n['dec'];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [\n      'ones' => substr_count(decbin($n), '1'),\n      'dec'\
    \ => $n\n    ];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a['ones']\
    \ == $b['ones']) {\n      return $a['dec'] - $b['dec'];\n    }\n    return $a['ones']\
    \ - $b['ones'];\n  });\n  return array_map(function($n) {\n    return $n['dec'];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($num) {\n    return [$num, decbin($num)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    if (substr_count($a[1], '1')\
    \ == substr_count($b[1], '1')) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ substr_count($a[1], '1') - substr_count($b[1], '1');\n  });\n  return array_map(function($num)\
    \ {\n    return $num[0];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n\
    \  $arr = array_map('strlen', $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n\
    \  $arr = array_keys($arr);\n  return $arr;\n}\n", "  $ones = [];\n  foreach ($arr\
    \ as $key => $value) {\n    $ones[$key] = substr_count(decbin($value), '1');\n\
    \  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [\n      'ones' => substr_count(decbin($n),\
    \ '1'),\n      'dec' => $n\n    ];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    return $a['ones'] == $b['ones'] ? $a['dec'] - $b['dec'] : $a['ones']\
    \ - $b['ones'];\n  });\n  return array_map(function($n) {\n    return $n['dec'];\n\
    \  }, $arr);\n}\n", "    $arr = array_map(function($n) {\n        return [\n \
    \           'ones' => substr_count(decbin($n), '1'),\n            'dec' => $n\n\
    \        ];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        if ($a['ones']\
    \ == $b['ones']) {\n            return $a['dec'] - $b['dec'];\n        }\n   \
    \     return $a['ones'] - $b['ones'];\n    });\n    return array_map(function($n)\
    \ {\n        return $n['dec'];\n    }, $arr);\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [\n      'dec' => $x,\n      'bin' => decbin($x)\n    ];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    $aOnes = substr_count($a['bin'],\
    \ '1');\n    $bOnes = substr_count($b['bin'], '1');\n    if ($aOnes === $bOnes)\
    \ {\n      return $a['dec'] - $b['dec'];\n    }\n    return $aOnes - $bOnes;\n\
    \  });\n  return array_map(function($x) {\n    return $x['dec'];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a === $b) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n\
    \    $bin = decbin($x);\n    $ones = substr_count($bin, '1');\n    return [$x,\
    \ $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1])\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "    $arr =\
    \ array_map(function($n) {\n        $ones = substr_count(decbin($n), '1');\n \
    \       return [$ones, $n];\n    }, $arr);\n    usort($arr, function($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return array_map(function($a) {\n\
    \        return $a[1];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  $zeros = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count == 0) {\n      $zeros[] = $value;\n    } else {\n    \
    \  $ones[$count][] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n \
    \ foreach ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}\n", "  $arr = array_map(function($n) {\n    return [\n \
    \     'ones' => substr_count(decbin($n), '1'),\n      'dec' => $n\n    ];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['dec'] - $b['dec'];\n    }\n    return $a['ones'] - $b['ones'];\n\
    \  });\n  return array_map(function($n) {\n    return $n['dec'];\n  }, $arr);\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, substr_count(decbin($n), '1')];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] == $b[1]) {\n  \
    \    return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n\
    \  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  // sort by number of ones\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count(decbin($a), '1');\n    $b_ones = substr_count(decbin($b),\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a - $b;\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return $arr;\n}\n", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n",
  "  $ones = [];\n  foreach ($arr as $n) {\n    $ones[$n] = substr_count(decbin($n),\
    \ '1');\n  }\n  asort($ones);\n  $result = [];\n  foreach ($ones as $n => $ones)\
    \ {\n    $result[] = $n;\n  }\n  return $result;\n}\n", "  // Your code here\n\
    \  $arr = array_map(function($num) {\n    $ones = substr_count(decbin($num), '1');\n\
    \    return [$ones, $num];\n  }, $arr);\n  usort($arr, function($a, $b) {\n  \
    \  if ($a[0] === $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0]\
    \ - $b[0];\n  });\n  return array_map(function($num) {\n    return $num[1];\n\
    \  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_combine(range(0, count($arr) - 1), $arr);\n  asort($arr);\n\
    \  return array_keys($arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  $arr\
    \ = array_map('strlen', $arr);\n  $arr = array_combine(range(0, count($arr) -\
    \ 1), $arr);\n  asort($arr);\n  $arr = array_keys($arr);\n  return $arr;\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n    $b = array_sum($b);\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n), '1');\n\
    \    return [$ones, $n];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    return\
    \ $a[0] <=> $b[0] ?: $a[1] <=> $b[1];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[1];\n  }, $arr);\n}\n", "  $result = [];\n  foreach ($arr as\
    \ $num) {\n    $result[decbin($num)] = $num;\n  }\n  ksort($result);\n  return\
    \ array_values($result);\n}\n", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_filter($a,\
    \ function($n) { return $n == 1; });\n    $b = array_filter($b, function($n) {\
    \ return $n == 1; });\n    $a = count($a);\n    $b = count($b);\n    if ($a ==\
    \ $b) {\n      return $a[0] < $b[0] ? -1 : 1;\n    }\n    return $a < $b ? -1\
    \ : 1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n", "  $ones = [];\n  foreach ($arr as $num) {\n    $ones[$num] = substr_count(decbin($num),\
    \ '1');\n  }\n  asort($ones);\n  $result = [];\n  foreach ($ones as $num => $one)\
    \ {\n    $result[] = $num;\n  }\n  return $result;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($x) {\n    return\
    \ [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  },\
    \ $arr);\n}\n", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $ones\
    \ = [];\n  foreach ($arr as $value) {\n    $ones[] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, $arr);\n  return $arr;\n}\n", "  $arr =\
    \ array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $num) {\n    $ones[$num]\
    \ = substr_count(decbin($num), '1');\n  }\n  asort($ones);\n  $sorted = [];\n\
    \  foreach ($ones as $key => $value) {\n    $sorted[] = $key;\n  }\n  return $sorted;\n\
    }\n", "    // your code here\n    $arr = array_map(function($a) {\n        return\
    \ [$a, decbin($a)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($a)\
    \ {\n        return $a[0];\n    }, $arr);\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n\
    \    return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n   \
    \ return $n[0];\n  }, $arr);\n}\n", "    $arr = array_map('decbin', $arr);\n \
    \   usort($arr, function($a, $b) {\n        $a = substr_count($a, '1');\n    \
    \    $b = substr_count($b, '1');\n        if ($a === $b) {\n            return\
    \ bindec($a) - bindec($b);\n        }\n        return $a - $b;\n    });\n    return\
    \ array_map('bindec', $arr);\n}\n", "  $arr = array_map(function($num) {\n   \
    \ return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    $a =\
    \ $a['1'];\n    $b = $b['1'];\n    if ($a === $b) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a - $b;\n  });\n  $arr = array_map(function($num) {\n    return\
    \ $num[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map('decbin', $arr);\n\
    \  $arr = array_map('strlen', $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n\
    \  $arr = array_keys($arr);\n  $arr = array_map('bindec', $arr);\n  return $arr;\n\
    }\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ substr_count($a, '1');\n    $b = substr_count($b, '1');\n    if ($a == $b) {\n\
    \      return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones === $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_count_values($a);\n    $b = array_count_values($b);\n\
    \    $a = isset($a['1']) ? $a['1'] : 0;\n    $b = isset($b['1']) ? $b['1'] : 0;\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n  return\
    \ $arr;\n}\n", "  $ones = [];\n  foreach ($arr as $value) {\n    $ones[] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, $arr);\n  return $arr;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
